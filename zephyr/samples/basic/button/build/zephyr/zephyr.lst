
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

08000000 <_vector_table>:
 8000000:	20020670 	.word	0x20020670
 8000004:	080013cd 	.word	0x080013cd
 8000008:	080025cb 	.word	0x080025cb
 800000c:	08001275 	.word	0x08001275
 8000010:	08001275 	.word	0x08001275
 8000014:	08001275 	.word	0x08001275
 8000018:	08001275 	.word	0x08001275
 800001c:	08001275 	.word	0x08001275
 8000020:	08001275 	.word	0x08001275
 8000024:	08001275 	.word	0x08001275
 8000028:	08001275 	.word	0x08001275
 800002c:	08000f09 	.word	0x08000f09
 8000030:	08001275 	.word	0x08001275
 8000034:	08001275 	.word	0x08001275
 8000038:	08000ec1 	.word	0x08000ec1
 800003c:	08000a91 	.word	0x08000a91

08000040 <_irq_vector_table>:
 8000040:	080013a5 080013a5 080013a5 080013a5     ................
 8000050:	080013a5 080013a5 080013a5 080013a5     ................
 8000060:	080013a5 080013a5 080013a5 080013a5     ................
 8000070:	080013a5 080013a5 080013a5 080013a5     ................
 8000080:	080013a5 080013a5 080013a5 080013a5     ................
 8000090:	080013a5 080013a5 080013a5 080013a5     ................
 80000a0:	080013a5 080013a5 080013a5 080013a5     ................
 80000b0:	080013a5 080013a5 080013a5 080013a5     ................
 80000c0:	080013a5 080013a5 080013a5 080013a5     ................
 80000d0:	080013a5 080013a5 080013a5 080013a5     ................
 80000e0:	080013a5 080013a5 080013a5 080013a5     ................
 80000f0:	080013a5 080013a5 080013a5 080013a5     ................
 8000100:	080013a5 080013a5 080013a5 080013a5     ................
 8000110:	080013a5 080013a5 080013a5 080013a5     ................
 8000120:	080013a5 080013a5 080013a5 080013a5     ................
 8000130:	080013a5 080013a5 080013a5 080013a5     ................
 8000140:	080013a5 080013a5 080013a5 080013a5     ................
 8000150:	080013a5 080013a5 080013a5 080013a5     ................
 8000160:	080013a5 080013a5 080013a5 080013a5     ................
 8000170:	080013a5 080013a5 080013a5 080013a5     ................
 8000180:	080013a5 080013a5 080013a5 080013a5     ................
 8000190:	080013a5 080013a5 080013a5 080013a5     ................
 80001a0:	080013a5 080013a5 080013a5 080013a5     ................
 80001b0:	080013a5 080013a5 080013a5 080013a5     ................
 80001c0:	080013a5 080013a5 080013a5 080013a5     ................
 80001d0:	080013a5 080013a5 080013a5 080013a5     ................
 80001e0:	080013a5 080013a5 080013a5 080013a5     ................
 80001f0:	080013a5 080013a5                       ........

Disassembly of section _TEXT_SECTION_NAME_2:

080001f8 <__aeabi_uldivmod>:
 80001f8:	b953      	cbnz	r3, 8000210 <__aeabi_uldivmod+0x18>
 80001fa:	b94a      	cbnz	r2, 8000210 <__aeabi_uldivmod+0x18>
 80001fc:	2900      	cmp	r1, #0
 80001fe:	bf08      	it	eq
 8000200:	2800      	cmpeq	r0, #0
 8000202:	bf1c      	itt	ne
 8000204:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000208:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800020c:	f000 b80c 	b.w	8000228 <__aeabi_idiv0>
 8000210:	f1ad 0c08 	sub.w	ip, sp, #8
 8000214:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000218:	f000 f808 	bl	800022c <__udivmoddi4>
 800021c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000224:	b004      	add	sp, #16
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop

0800022c <__udivmoddi4>:
 800022c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000230:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8000232:	4615      	mov	r5, r2
 8000234:	4604      	mov	r4, r0
 8000236:	468e      	mov	lr, r1
 8000238:	461e      	mov	r6, r3
 800023a:	2b00      	cmp	r3, #0
 800023c:	f040 80cc 	bne.w	80003d8 <__udivmoddi4+0x1ac>
 8000240:	428a      	cmp	r2, r1
 8000242:	fab2 fc82 	clz	ip, r2
 8000246:	d94c      	bls.n	80002e2 <__udivmoddi4+0xb6>
 8000248:	f1bc 0f00 	cmp.w	ip, #0
 800024c:	d00b      	beq.n	8000266 <__udivmoddi4+0x3a>
 800024e:	f1cc 0820 	rsb	r8, ip, #32
 8000252:	fa01 fe0c 	lsl.w	lr, r1, ip
 8000256:	fa20 f808 	lsr.w	r8, r0, r8
 800025a:	fa02 f50c 	lsl.w	r5, r2, ip
 800025e:	ea48 0e0e 	orr.w	lr, r8, lr
 8000262:	fa00 f40c 	lsl.w	r4, r0, ip
 8000266:	ea4f 4915 	mov.w	r9, r5, lsr #16
 800026a:	fa1f f885 	uxth.w	r8, r5
 800026e:	fbbe faf9 	udiv	sl, lr, r9
 8000272:	0c21      	lsrs	r1, r4, #16
 8000274:	fb09 e31a 	mls	r3, r9, sl, lr
 8000278:	fb0a fb08 	mul.w	fp, sl, r8
 800027c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000280:	459b      	cmp	fp, r3
 8000282:	d92a      	bls.n	80002da <__udivmoddi4+0xae>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
 800028a:	d204      	bcs.n	8000296 <__udivmoddi4+0x6a>
 800028c:	459b      	cmp	fp, r3
 800028e:	d902      	bls.n	8000296 <__udivmoddi4+0x6a>
 8000290:	f1aa 0002 	sub.w	r0, sl, #2
 8000294:	442b      	add	r3, r5
 8000296:	eba3 030b 	sub.w	r3, r3, fp
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f2f9 	udiv	r2, r3, r9
 80002a0:	fb09 3312 	mls	r3, r9, r2, r3
 80002a4:	fb02 f808 	mul.w	r8, r2, r8
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	45a0      	cmp	r8, r4
 80002ae:	d916      	bls.n	80002de <__udivmoddi4+0xb2>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 80002b6:	d203      	bcs.n	80002c0 <__udivmoddi4+0x94>
 80002b8:	45a0      	cmp	r8, r4
 80002ba:	d901      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002bc:	1e93      	subs	r3, r2, #2
 80002be:	442c      	add	r4, r5
 80002c0:	eba4 0408 	sub.w	r4, r4, r8
 80002c4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80002c8:	b127      	cbz	r7, 80002d4 <__udivmoddi4+0xa8>
 80002ca:	fa24 f40c 	lsr.w	r4, r4, ip
 80002ce:	2300      	movs	r3, #0
 80002d0:	603c      	str	r4, [r7, #0]
 80002d2:	607b      	str	r3, [r7, #4]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80002da:	4650      	mov	r0, sl
 80002dc:	e7db      	b.n	8000296 <__udivmoddi4+0x6a>
 80002de:	4613      	mov	r3, r2
 80002e0:	e7ee      	b.n	80002c0 <__udivmoddi4+0x94>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xba>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	f1bc 0f00 	cmp.w	ip, #0
 80002ea:	d12e      	bne.n	800034a <__udivmoddi4+0x11e>
 80002ec:	1a8b      	subs	r3, r1, r2
 80002ee:	2601      	movs	r6, #1
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	b2aa      	uxth	r2, r5
 80002f6:	fbb3 f8fe 	udiv	r8, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000300:	fb08 f902 	mul.w	r9, r8, r2
 8000304:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000308:	4599      	cmp	r9, r3
 800030a:	d961      	bls.n	80003d0 <__udivmoddi4+0x1a4>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000312:	d204      	bcs.n	800031e <__udivmoddi4+0xf2>
 8000314:	4599      	cmp	r9, r3
 8000316:	d902      	bls.n	800031e <__udivmoddi4+0xf2>
 8000318:	f1a8 0002 	sub.w	r0, r8, #2
 800031c:	442b      	add	r3, r5
 800031e:	eba3 0309 	sub.w	r3, r3, r9
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f1fe 	udiv	r1, r3, lr
 8000328:	fb0e 3311 	mls	r3, lr, r1, r3
 800032c:	434a      	muls	r2, r1
 800032e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000332:	42a2      	cmp	r2, r4
 8000334:	d94e      	bls.n	80003d4 <__udivmoddi4+0x1a8>
 8000336:	192c      	adds	r4, r5, r4
 8000338:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
 800033c:	d203      	bcs.n	8000346 <__udivmoddi4+0x11a>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d901      	bls.n	8000346 <__udivmoddi4+0x11a>
 8000342:	1e8b      	subs	r3, r1, #2
 8000344:	442c      	add	r4, r5
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	e7bc      	b.n	80002c4 <__udivmoddi4+0x98>
 800034a:	f1cc 0e20 	rsb	lr, ip, #32
 800034e:	fa02 f50c 	lsl.w	r5, r2, ip
 8000352:	fa21 f90e 	lsr.w	r9, r1, lr
 8000356:	fa01 f30c 	lsl.w	r3, r1, ip
 800035a:	fa20 fe0e 	lsr.w	lr, r0, lr
 800035e:	ea4e 0303 	orr.w	r3, lr, r3
 8000362:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000366:	fa00 f40c 	lsl.w	r4, r0, ip
 800036a:	fbb9 f1f8 	udiv	r1, r9, r8
 800036e:	fa1f fe85 	uxth.w	lr, r5
 8000372:	fb08 9211 	mls	r2, r8, r1, r9
 8000376:	0c18      	lsrs	r0, r3, #16
 8000378:	fb01 f60e 	mul.w	r6, r1, lr
 800037c:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8000380:	4296      	cmp	r6, r2
 8000382:	d921      	bls.n	80003c8 <__udivmoddi4+0x19c>
 8000384:	18aa      	adds	r2, r5, r2
 8000386:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800038a:	d203      	bcs.n	8000394 <__udivmoddi4+0x168>
 800038c:	4296      	cmp	r6, r2
 800038e:	d901      	bls.n	8000394 <__udivmoddi4+0x168>
 8000390:	1e88      	subs	r0, r1, #2
 8000392:	442a      	add	r2, r5
 8000394:	1b92      	subs	r2, r2, r6
 8000396:	b29b      	uxth	r3, r3
 8000398:	fbb2 f9f8 	udiv	r9, r2, r8
 800039c:	fb08 2219 	mls	r2, r8, r9, r2
 80003a0:	fb09 fe0e 	mul.w	lr, r9, lr
 80003a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a8:	459e      	cmp	lr, r3
 80003aa:	d90f      	bls.n	80003cc <__udivmoddi4+0x1a0>
 80003ac:	18eb      	adds	r3, r5, r3
 80003ae:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 80003b2:	d204      	bcs.n	80003be <__udivmoddi4+0x192>
 80003b4:	459e      	cmp	lr, r3
 80003b6:	d902      	bls.n	80003be <__udivmoddi4+0x192>
 80003b8:	f1a9 0602 	sub.w	r6, r9, #2
 80003bc:	442b      	add	r3, r5
 80003be:	eba3 030e 	sub.w	r3, r3, lr
 80003c2:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80003c6:	e793      	b.n	80002f0 <__udivmoddi4+0xc4>
 80003c8:	4608      	mov	r0, r1
 80003ca:	e7e3      	b.n	8000394 <__udivmoddi4+0x168>
 80003cc:	464e      	mov	r6, r9
 80003ce:	e7f6      	b.n	80003be <__udivmoddi4+0x192>
 80003d0:	4640      	mov	r0, r8
 80003d2:	e7a4      	b.n	800031e <__udivmoddi4+0xf2>
 80003d4:	460b      	mov	r3, r1
 80003d6:	e7b6      	b.n	8000346 <__udivmoddi4+0x11a>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d905      	bls.n	80003e8 <__udivmoddi4+0x1bc>
 80003dc:	b10f      	cbz	r7, 80003e2 <__udivmoddi4+0x1b6>
 80003de:	e9c7 0100 	strd	r0, r1, [r7]
 80003e2:	2600      	movs	r6, #0
 80003e4:	4630      	mov	r0, r6
 80003e6:	e775      	b.n	80002d4 <__udivmoddi4+0xa8>
 80003e8:	fab3 fc83 	clz	ip, r3
 80003ec:	f1bc 0f00 	cmp.w	ip, #0
 80003f0:	d10f      	bne.n	8000412 <__udivmoddi4+0x1e6>
 80003f2:	428b      	cmp	r3, r1
 80003f4:	d301      	bcc.n	80003fa <__udivmoddi4+0x1ce>
 80003f6:	4282      	cmp	r2, r0
 80003f8:	d809      	bhi.n	800040e <__udivmoddi4+0x1e2>
 80003fa:	1a84      	subs	r4, r0, r2
 80003fc:	eb61 0e03 	sbc.w	lr, r1, r3
 8000400:	2001      	movs	r0, #1
 8000402:	2f00      	cmp	r7, #0
 8000404:	d06a      	beq.n	80004dc <__udivmoddi4+0x2b0>
 8000406:	e9c7 4e00 	strd	r4, lr, [r7]
 800040a:	2600      	movs	r6, #0
 800040c:	e762      	b.n	80002d4 <__udivmoddi4+0xa8>
 800040e:	4660      	mov	r0, ip
 8000410:	e7f7      	b.n	8000402 <__udivmoddi4+0x1d6>
 8000412:	f1cc 0e20 	rsb	lr, ip, #32
 8000416:	fa03 f30c 	lsl.w	r3, r3, ip
 800041a:	fa22 f50e 	lsr.w	r5, r2, lr
 800041e:	fa21 f40e 	lsr.w	r4, r1, lr
 8000422:	431d      	orrs	r5, r3
 8000424:	fa01 f30c 	lsl.w	r3, r1, ip
 8000428:	fa20 f10e 	lsr.w	r1, r0, lr
 800042c:	430b      	orrs	r3, r1
 800042e:	ea4f 4a15 	mov.w	sl, r5, lsr #16
 8000432:	fa00 f60c 	lsl.w	r6, r0, ip
 8000436:	fbb4 f9fa 	udiv	r9, r4, sl
 800043a:	fa1f f885 	uxth.w	r8, r5
 800043e:	fb0a 4019 	mls	r0, sl, r9, r4
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	fb09 f108 	mul.w	r1, r9, r8
 8000448:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 800044c:	42a1      	cmp	r1, r4
 800044e:	fa02 f20c 	lsl.w	r2, r2, ip
 8000452:	d93f      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800045a:	d204      	bcs.n	8000466 <__udivmoddi4+0x23a>
 800045c:	42a1      	cmp	r1, r4
 800045e:	d902      	bls.n	8000466 <__udivmoddi4+0x23a>
 8000460:	f1a9 0002 	sub.w	r0, r9, #2
 8000464:	442c      	add	r4, r5
 8000466:	1a64      	subs	r4, r4, r1
 8000468:	b29b      	uxth	r3, r3
 800046a:	fbb4 f9fa 	udiv	r9, r4, sl
 800046e:	fb0a 4419 	mls	r4, sl, r9, r4
 8000472:	fb09 f808 	mul.w	r8, r9, r8
 8000476:	ea43 4104 	orr.w	r1, r3, r4, lsl #16
 800047a:	4588      	cmp	r8, r1
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8000484:	d204      	bcs.n	8000490 <__udivmoddi4+0x264>
 8000486:	4588      	cmp	r8, r1
 8000488:	d902      	bls.n	8000490 <__udivmoddi4+0x264>
 800048a:	f1a9 0302 	sub.w	r3, r9, #2
 800048e:	4429      	add	r1, r5
 8000490:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000494:	eba1 0108 	sub.w	r1, r1, r8
 8000498:	fba0 8902 	umull	r8, r9, r0, r2
 800049c:	4549      	cmp	r1, r9
 800049e:	46c2      	mov	sl, r8
 80004a0:	464c      	mov	r4, r9
 80004a2:	d302      	bcc.n	80004aa <__udivmoddi4+0x27e>
 80004a4:	d106      	bne.n	80004b4 <__udivmoddi4+0x288>
 80004a6:	4546      	cmp	r6, r8
 80004a8:	d204      	bcs.n	80004b4 <__udivmoddi4+0x288>
 80004aa:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ae:	eb69 0405 	sbc.w	r4, r9, r5
 80004b2:	3801      	subs	r0, #1
 80004b4:	b197      	cbz	r7, 80004dc <__udivmoddi4+0x2b0>
 80004b6:	ebb6 030a 	subs.w	r3, r6, sl
 80004ba:	eb61 0604 	sbc.w	r6, r1, r4
 80004be:	fa06 fe0e 	lsl.w	lr, r6, lr
 80004c2:	fa23 f30c 	lsr.w	r3, r3, ip
 80004c6:	ea4e 0303 	orr.w	r3, lr, r3
 80004ca:	fa26 f60c 	lsr.w	r6, r6, ip
 80004ce:	e9c7 3600 	strd	r3, r6, [r7]
 80004d2:	e79a      	b.n	800040a <__udivmoddi4+0x1de>
 80004d4:	4648      	mov	r0, r9
 80004d6:	e7c6      	b.n	8000466 <__udivmoddi4+0x23a>
 80004d8:	464b      	mov	r3, r9
 80004da:	e7d9      	b.n	8000490 <__udivmoddi4+0x264>
 80004dc:	463e      	mov	r6, r7
 80004de:	e6f9      	b.n	80002d4 <__udivmoddi4+0xa8>

080004e0 <button_pressed>:
#define SLEEP_TIME	500


void button_pressed(struct device *gpiob, struct gpio_callback *cb,
		    u32_t pins)
{
 80004e0:	b508      	push	{r3, lr}
	printk("Button pressed at %d\n", k_cycle_get_32());
 80004e2:	f000 fb89 	bl	8000bf8 <z_timer_cycle_get_32>
 80004e6:	4601      	mov	r1, r0
 80004e8:	4802      	ldr	r0, [pc, #8]	; (80004f4 <button_pressed+0x14>)
}
 80004ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("Button pressed at %d\n", k_cycle_get_32());
 80004ee:	f001 bfd4 	b.w	800249a <printk>
 80004f2:	bf00      	nop
 80004f4:	0800320a 	.word	0x0800320a

080004f8 <main>:

static struct gpio_callback gpio_cb;

void main(void)
{
 80004f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct device *gpiob;

	printk("Press the user defined button on the board\n");
 80004fa:	4819      	ldr	r0, [pc, #100]	; (8000560 <main+0x68>)
 80004fc:	f001 ffcd 	bl	800249a <printk>

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE1(K_SYSCALL_DEVICE_GET_BINDING, device_get_binding, struct device *, const char *, name)
 8000500:	4818      	ldr	r0, [pc, #96]	; (8000564 <main+0x6c>)
 8000502:	f001 f93d 	bl	8001780 <z_impl_device_get_binding>
	gpiob = device_get_binding(PORT);
	if (!gpiob) {
 8000506:	4604      	mov	r4, r0
 8000508:	b920      	cbnz	r0, 8000514 <main+0x1c>
		printk("error\n");
 800050a:	4817      	ldr	r0, [pc, #92]	; (8000568 <main+0x70>)
 800050c:	f001 ffc5 	bl	800249a <printk>
		u32_t val = 0U;

		gpio_pin_read(gpiob, PIN, &val);
		k_sleep(SLEEP_TIME);
	}
}
 8000510:	b002      	add	sp, #8
 8000512:	bd70      	pop	{r4, r5, r6, pc}
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
 8000514:	6843      	ldr	r3, [r0, #4]
 8000516:	2200      	movs	r2, #0
 8000518:	681d      	ldr	r5, [r3, #0]
 800051a:	4611      	mov	r1, r2
 800051c:	2326      	movs	r3, #38	; 0x26
 800051e:	47a8      	blx	r5
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 8000520:	4912      	ldr	r1, [pc, #72]	; (800056c <main+0x74>)
 8000522:	4b13      	ldr	r3, [pc, #76]	; (8000570 <main+0x78>)
	callback->pin_mask = pin_mask;
 8000524:	2201      	movs	r2, #1
	callback->handler = handler;
 8000526:	604b      	str	r3, [r1, #4]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->manage_callback == NULL) {
 8000528:	6863      	ldr	r3, [r4, #4]
	callback->pin_mask = pin_mask;
 800052a:	608a      	str	r2, [r1, #8]
	if (api->manage_callback == NULL) {
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	b10b      	cbz	r3, 8000534 <main+0x3c>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 8000530:	4620      	mov	r0, r4
 8000532:	4798      	blx	r3
	if (api->enable_callback == NULL) {
 8000534:	6863      	ldr	r3, [r4, #4]
 8000536:	691b      	ldr	r3, [r3, #16]
 8000538:	b11b      	cbz	r3, 8000542 <main+0x4a>
	return api->enable_callback(port, access_op, pin);
 800053a:	2200      	movs	r2, #0
 800053c:	4620      	mov	r0, r4
 800053e:	4611      	mov	r1, r2
 8000540:	4798      	blx	r3
		u32_t val = 0U;
 8000542:	2600      	movs	r6, #0
	return api->read(port, access_op, pin, value);
 8000544:	6863      	ldr	r3, [r4, #4]
 8000546:	2200      	movs	r2, #0
 8000548:	9601      	str	r6, [sp, #4]
 800054a:	4620      	mov	r0, r4
 800054c:	689d      	ldr	r5, [r3, #8]
 800054e:	4611      	mov	r1, r2
 8000550:	ab01      	add	r3, sp, #4
 8000552:	47a8      	blx	r5

K_SYSCALL_DECLARE1(K_SYSCALL_K_OBJECT_ALLOC, k_object_alloc, void *, enum k_objects, otype)

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)

K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, ms)
 8000554:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000558:	f002 fac8 	bl	8002aec <z_impl_k_sleep>
 800055c:	e7f2      	b.n	8000544 <main+0x4c>
 800055e:	bf00      	nop
 8000560:	08003220 	.word	0x08003220
 8000564:	0800324c 	.word	0x0800324c
 8000568:	080032c1 	.word	0x080032c1
 800056c:	20020008 	.word	0x20020008
 8000570:	080004e1 	.word	0x080004e1

08000574 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8000574:	680b      	ldr	r3, [r1, #0]
 8000576:	3301      	adds	r3, #1
 8000578:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 800057a:	4b01      	ldr	r3, [pc, #4]	; (8000580 <char_out+0xc>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4718      	bx	r3
 8000580:	20020fb0 	.word	0x20020fb0

08000584 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
 8000584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000588:	b085      	sub	sp, #20
 800058a:	469b      	mov	fp, r3
 800058c:	4616      	mov	r6, r2
 800058e:	4682      	mov	sl, r0
 8000590:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8000592:	4688      	mov	r8, r1
 8000594:	2501      	movs	r5, #1
 8000596:	270a      	movs	r7, #10
 8000598:	2c01      	cmp	r4, #1
 800059a:	f04f 0200 	mov.w	r2, #0
 800059e:	f8df 907c 	ldr.w	r9, [pc, #124]	; 800061c <_printk_dec_ulong+0x98>
 80005a2:	bfb8      	it	lt
 80005a4:	2401      	movlt	r4, #1
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	bf0c      	ite	eq
 80005aa:	2330      	moveq	r3, #48	; 0x30
 80005ac:	2320      	movne	r3, #32
 80005ae:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
 80005b0:	fbb6 f3f9 	udiv	r3, r6, r9
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	b90a      	cbnz	r2, 80005bc <_printk_dec_ulong+0x38>
 80005b8:	45b1      	cmp	r9, r6
 80005ba:	d81d      	bhi.n	80005f8 <_printk_dec_ulong+0x74>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
 80005bc:	9b01      	ldr	r3, [sp, #4]
 80005be:	4641      	mov	r1, r8
			digits++;
 80005c0:	3501      	adds	r5, #1
			out((int)(remainder / pos + 48), ctx);
 80005c2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80005c6:	47d0      	blx	sl
			found_largest_digit = 1;
 80005c8:	2201      	movs	r2, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
 80005ca:	9b01      	ldr	r3, [sp, #4]
		remaining--;
 80005cc:	3f01      	subs	r7, #1
		remainder %= pos;
 80005ce:	fb09 6613 	mls	r6, r9, r3, r6
	while (pos >= 10) {
 80005d2:	2f01      	cmp	r7, #1
		pos /= 10;
 80005d4:	f04f 030a 	mov.w	r3, #10
 80005d8:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
 80005dc:	d1e8      	bne.n	80005b0 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
 80005de:	4641      	mov	r1, r8
 80005e0:	f106 0030 	add.w	r0, r6, #48	; 0x30
 80005e4:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
 80005e6:	f1bb 0f03 	cmp.w	fp, #3
 80005ea:	d102      	bne.n	80005f2 <_printk_dec_ulong+0x6e>
		remaining = min_width - digits;
 80005ec:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
 80005ee:	2c00      	cmp	r4, #0
 80005f0:	dc0e      	bgt.n	8000610 <_printk_dec_ulong+0x8c>
			out(' ', ctx);
		}
	}
}
 80005f2:	b005      	add	sp, #20
 80005f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
 80005f8:	42bc      	cmp	r4, r7
 80005fa:	dbe6      	blt.n	80005ca <_printk_dec_ulong+0x46>
				&& padding < PAD_SPACE_AFTER) {
 80005fc:	f1bb 0f02 	cmp.w	fp, #2
 8000600:	d8e3      	bhi.n	80005ca <_printk_dec_ulong+0x46>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 8000602:	4641      	mov	r1, r8
 8000604:	9802      	ldr	r0, [sp, #8]
 8000606:	9203      	str	r2, [sp, #12]
			digits++;
 8000608:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 800060a:	47d0      	blx	sl
			digits++;
 800060c:	9a03      	ldr	r2, [sp, #12]
 800060e:	e7dc      	b.n	80005ca <_printk_dec_ulong+0x46>
			out(' ', ctx);
 8000610:	4641      	mov	r1, r8
 8000612:	2020      	movs	r0, #32
 8000614:	47d0      	blx	sl
 8000616:	3c01      	subs	r4, #1
 8000618:	e7e9      	b.n	80005ee <_printk_dec_ulong+0x6a>
 800061a:	bf00      	nop
 800061c:	3b9aca00 	.word	0x3b9aca00

08000620 <__printk_hook_install>:
	_char_out = fn;
 8000620:	4b01      	ldr	r3, [pc, #4]	; (8000628 <__printk_hook_install+0x8>)
 8000622:	6018      	str	r0, [r3, #0]
}
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	20020fb0 	.word	0x20020fb0

0800062c <vprintk>:
	struct out_context ctx = { 0 };
 800062c:	2300      	movs	r3, #0
{
 800062e:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
 8000630:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
 8000632:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
 8000634:	4803      	ldr	r0, [pc, #12]	; (8000644 <vprintk+0x18>)
 8000636:	460b      	mov	r3, r1
 8000638:	a901      	add	r1, sp, #4
 800063a:	f001 fdbe 	bl	80021ba <z_vprintk>
}
 800063e:	b003      	add	sp, #12
 8000640:	f85d fb04 	ldr.w	pc, [sp], #4
 8000644:	08000575 	.word	0x08000575

08000648 <st_stm32f7_init>:
 * So the init priority has to be 0 (zero).
 *
 * @return 0
 */
static int st_stm32f7_init(struct device *arg)
{
 8000648:	b5f0      	push	{r4, r5, r6, r7, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 800064a:	f04f 0310 	mov.w	r3, #16
 800064e:	f3ef 8011 	mrs	r0, BASEPRI
 8000652:	f383 8811 	msr	BASEPRI, r3
 8000656:	f3bf 8f6f 	isb	sy
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800065a:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <st_stm32f7_init+0xac>)
 800065c:	695a      	ldr	r2, [r3, #20]
 800065e:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8000662:	d111      	bne.n	8000688 <st_stm32f7_init+0x40>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000664:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000668:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800066c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000670:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000674:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000678:	695a      	ldr	r2, [r3, #20]
 800067a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800067e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000680:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000684:	f3bf 8f6f 	isb	sy
	ARG_UNUSED(arg);

	key = irq_lock();

	SCB_EnableICache();
	if (!(SCB->CCR & SCB_CCR_DC_Msk)) {
 8000688:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <st_stm32f7_init+0xac>)
 800068a:	695a      	ldr	r2, [r3, #20]
 800068c:	03d2      	lsls	r2, r2, #15
 800068e:	d428      	bmi.n	80006e2 <st_stm32f7_init+0x9a>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000690:	695a      	ldr	r2, [r3, #20]
 8000692:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
 8000696:	d124      	bne.n	80006e2 <st_stm32f7_init+0x9a>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800069c:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006a0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006a4:	f643 75e0 	movw	r5, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006a8:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006ac:	f3c2 324e 	ubfx	r2, r2, #13, #15
 80006b0:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006b2:	ea02 0705 	and.w	r7, r2, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006b6:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006b8:	ea47 7681 	orr.w	r6, r7, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80006bc:	f111 31ff 	adds.w	r1, r1, #4294967295	; 0xffffffff
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006c0:	f8c3 6260 	str.w	r6, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 80006c4:	d2f8      	bcs.n	80006b8 <st_stm32f7_init+0x70>
 80006c6:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 80006c8:	f112 0f20 	cmn.w	r2, #32
 80006cc:	d1f1      	bne.n	80006b2 <st_stm32f7_init+0x6a>
 80006ce:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80006d2:	695a      	ldr	r2, [r3, #20]
 80006d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80006d8:	615a      	str	r2, [r3, #20]
 80006da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006de:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 80006e2:	f380 8811 	msr	BASEPRI, r0
 80006e6:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 16 MHz from HSI */
	SystemCoreClock = 16000000;
 80006ea:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <st_stm32f7_init+0xb0>)

	return 0;
}
 80006ec:	2000      	movs	r0, #0
	SystemCoreClock = 16000000;
 80006ee:	4a03      	ldr	r2, [pc, #12]	; (80006fc <st_stm32f7_init+0xb4>)
 80006f0:	601a      	str	r2, [r3, #0]
}
 80006f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006f4:	e000ed00 	.word	0xe000ed00
 80006f8:	20020fc8 	.word	0x20020fc8
 80006fc:	00f42400 	.word	0x00f42400

08000700 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 8000700:	280a      	cmp	r0, #10
{
 8000702:	b538      	push	{r3, r4, r5, lr}
 8000704:	4604      	mov	r4, r0
 8000706:	4d07      	ldr	r5, [pc, #28]	; (8000724 <console_out+0x24>)
	if ('\n' == c) {
 8000708:	d104      	bne.n	8000714 <console_out+0x14>
 800070a:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
 800070c:	210d      	movs	r1, #13
 800070e:	6843      	ldr	r3, [r0, #4]
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
 8000714:	6828      	ldr	r0, [r5, #0]
 8000716:	b2e1      	uxtb	r1, r4
 8000718:	6843      	ldr	r3, [r0, #4]
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	4798      	blx	r3

	return c;
}
 800071e:	4620      	mov	r0, r4
 8000720:	bd38      	pop	{r3, r4, r5, pc}
 8000722:	bf00      	nop
 8000724:	20020014 	.word	0x20020014

08000728 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
 8000728:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
 800072a:	4c04      	ldr	r4, [pc, #16]	; (800073c <uart_console_hook_install+0x14>)
 800072c:	4620      	mov	r0, r4
 800072e:	f000 fe7d 	bl	800142c <__stdout_hook_install>
	__printk_hook_install(console_out);
 8000732:	4620      	mov	r0, r4
}
 8000734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
 8000738:	f7ff bf72 	b.w	8000620 <__printk_hook_install>
 800073c:	08000701 	.word	0x08000701

08000740 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
 8000740:	b508      	push	{r3, lr}
 8000742:	4804      	ldr	r0, [pc, #16]	; (8000754 <uart_console_init+0x14>)
 8000744:	f001 f81c 	bl	8001780 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 8000748:	4b03      	ldr	r3, [pc, #12]	; (8000758 <uart_console_init+0x18>)
 800074a:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
 800074c:	f7ff ffec 	bl	8000728 <uart_console_hook_install>

	return 0;
}
 8000750:	2000      	movs	r0, #0
 8000752:	bd08      	pop	{r3, pc}
 8000754:	08003252 	.word	0x08003252
 8000758:	20020014 	.word	0x20020014

0800075c <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, void *arg)
{
 800075c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct device *dev = arg;
	struct stm32_exti_data *data = dev->driver_data;
 8000760:	6895      	ldr	r5, [r2, #8]
{
 8000762:	4604      	mov	r4, r0
 8000764:	460f      	mov	r7, r1
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8000766:	f04f 0801 	mov.w	r8, #1
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800076a:	4e0b      	ldr	r6, [pc, #44]	; (8000798 <__stm32_exti_isr+0x3c>)
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 800076c:	f105 0904 	add.w	r9, r5, #4
	for (line = min; line < max; line++) {
 8000770:	42bc      	cmp	r4, r7
 8000772:	db01      	blt.n	8000778 <__stm32_exti_isr+0x1c>
		}
	}
}
 8000774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8000778:	fa08 f304 	lsl.w	r3, r8, r4
 800077c:	6972      	ldr	r2, [r6, #20]
		if (stm32_exti_is_pending(line)) {
 800077e:	ea33 0202 	bics.w	r2, r3, r2
 8000782:	d107      	bne.n	8000794 <__stm32_exti_isr+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8000784:	6173      	str	r3, [r6, #20]
			if (!data->cb[line].cb) {
 8000786:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 800078a:	b11b      	cbz	r3, 8000794 <__stm32_exti_isr+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 800078c:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 8000790:	4620      	mov	r0, r4
 8000792:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8000794:	3401      	adds	r4, #1
 8000796:	e7eb      	b.n	8000770 <__stm32_exti_isr+0x14>
 8000798:	40013c00 	.word	0x40013c00

0800079c <stm32_exti_enable>:
	if (line < 32) {
 800079c:	281f      	cmp	r0, #31
{
 800079e:	b508      	push	{r3, lr}
	if (line < 32) {
 80007a0:	dd02      	ble.n	80007a8 <stm32_exti_enable+0xc>
		return -ENOTSUP;
 80007a2:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 80007a6:	bd08      	pop	{r3, pc}
  SET_BIT(EXTI->IMR, ExtiLine);
 80007a8:	4a07      	ldr	r2, [pc, #28]	; (80007c8 <stm32_exti_enable+0x2c>)
		LL_EXTI_EnableIT_0_31(1 << line);
 80007aa:	2301      	movs	r3, #1
	if (line <= ARRAY_SIZE(exti_irq_table)) {
 80007ac:	2818      	cmp	r0, #24
 80007ae:	6811      	ldr	r1, [r2, #0]
		LL_EXTI_EnableIT_0_31(1 << line);
 80007b0:	fa03 f300 	lsl.w	r3, r3, r0
 80007b4:	ea43 0301 	orr.w	r3, r3, r1
 80007b8:	6013      	str	r3, [r2, #0]
	if (line <= ARRAY_SIZE(exti_irq_table)) {
 80007ba:	dcf2      	bgt.n	80007a2 <stm32_exti_enable+0x6>
	irq_enable(irqnum);
 80007bc:	4b03      	ldr	r3, [pc, #12]	; (80007cc <stm32_exti_enable+0x30>)
 80007be:	5618      	ldrsb	r0, [r3, r0]
 80007c0:	f000 fd02 	bl	80011c8 <z_arch_irq_enable>
	return 0;
 80007c4:	2000      	movs	r0, #0
 80007c6:	e7ee      	b.n	80007a6 <stm32_exti_enable+0xa>
 80007c8:	40013c00 	.word	0x40013c00
 80007cc:	08003259 	.word	0x08003259

080007d0 <stm32_exti_trigger>:
	if (trigger & STM32_EXTI_TRIG_RISING) {
 80007d0:	07ca      	lsls	r2, r1, #31
{
 80007d2:	b510      	push	{r4, lr}
	if (trigger & STM32_EXTI_TRIG_RISING) {
 80007d4:	d507      	bpl.n	80007e6 <stm32_exti_trigger+0x16>
		if (line < 32) {
 80007d6:	281f      	cmp	r0, #31
 80007d8:	dc05      	bgt.n	80007e6 <stm32_exti_trigger+0x16>
  SET_BIT(EXTI->RTSR, ExtiLine);
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <stm32_exti_trigger+0x2c>)
			LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80007dc:	2201      	movs	r2, #1
 80007de:	689c      	ldr	r4, [r3, #8]
 80007e0:	4082      	lsls	r2, r0
 80007e2:	4322      	orrs	r2, r4
 80007e4:	609a      	str	r2, [r3, #8]
	if (trigger & STM32_EXTI_TRIG_FALLING) {
 80007e6:	078b      	lsls	r3, r1, #30
 80007e8:	d507      	bpl.n	80007fa <stm32_exti_trigger+0x2a>
		if (line < 32) {
 80007ea:	281f      	cmp	r0, #31
 80007ec:	dc05      	bgt.n	80007fa <stm32_exti_trigger+0x2a>
  SET_BIT(EXTI->FTSR, ExtiLine);
 80007ee:	4a03      	ldr	r2, [pc, #12]	; (80007fc <stm32_exti_trigger+0x2c>)
			LL_EXTI_EnableFallingTrig_0_31(1 << line);
 80007f0:	2301      	movs	r3, #1
 80007f2:	68d1      	ldr	r1, [r2, #12]
 80007f4:	4083      	lsls	r3, r0
 80007f6:	430b      	orrs	r3, r1
 80007f8:	60d3      	str	r3, [r2, #12]
}
 80007fa:	bd10      	pop	{r4, pc}
 80007fc:	40013c00 	.word	0x40013c00

08000800 <stm32_exti_set_callback>:
				void *arg)
{
	struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->driver_data;

	if (data->cb[line].cb) {
 8000800:	4907      	ldr	r1, [pc, #28]	; (8000820 <stm32_exti_set_callback+0x20>)
{
 8000802:	b530      	push	{r4, r5, lr}
 8000804:	688c      	ldr	r4, [r1, #8]
	if (data->cb[line].cb) {
 8000806:	f854 1030 	ldr.w	r1, [r4, r0, lsl #3]
 800080a:	eb04 05c0 	add.w	r5, r4, r0, lsl #3
 800080e:	b921      	cbnz	r1, 800081a <stm32_exti_set_callback+0x1a>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8000810:	f844 2030 	str.w	r2, [r4, r0, lsl #3]
	data->cb[line].data = arg;

	return 0;
 8000814:	4608      	mov	r0, r1
	data->cb[line].data = arg;
 8000816:	606b      	str	r3, [r5, #4]
}
 8000818:	bd30      	pop	{r4, r5, pc}
		return -EBUSY;
 800081a:	f06f 000f 	mvn.w	r0, #15
 800081e:	e7fb      	b.n	8000818 <stm32_exti_set_callback+0x18>
 8000820:	20021018 	.word	0x20021018

08000824 <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8000824:	680b      	ldr	r3, [r1, #0]
{
 8000826:	b084      	sub	sp, #16
	switch (pclken->bus) {
 8000828:	2b03      	cmp	r3, #3
 800082a:	d82d      	bhi.n	8000888 <stm32_clock_control_on+0x64>
 800082c:	e8df f003 	tbb	[pc, r3]
 8000830:	22180e02 	.word	0x22180e02
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000834:	4a16      	ldr	r2, [pc, #88]	; (8000890 <stm32_clock_control_on+0x6c>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8000836:	684b      	ldr	r3, [r1, #4]
 8000838:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800083a:	4319      	orrs	r1, r3
 800083c:	6311      	str	r1, [r2, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800083e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000840:	4013      	ands	r3, r2
 8000842:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000844:	9b00      	ldr	r3, [sp, #0]
#endif /* CONFIG_SOC_SERIES_STM32L0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8000846:	2000      	movs	r0, #0
}
 8000848:	b004      	add	sp, #16
 800084a:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800084c:	4a10      	ldr	r2, [pc, #64]	; (8000890 <stm32_clock_control_on+0x6c>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 800084e:	684b      	ldr	r3, [r1, #4]
 8000850:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000852:	4319      	orrs	r1, r3
 8000854:	6351      	str	r1, [r2, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000856:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000858:	4013      	ands	r3, r2
 800085a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800085c:	9b01      	ldr	r3, [sp, #4]
 800085e:	e7f2      	b.n	8000846 <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000860:	4a0b      	ldr	r2, [pc, #44]	; (8000890 <stm32_clock_control_on+0x6c>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8000862:	684b      	ldr	r3, [r1, #4]
 8000864:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000866:	4319      	orrs	r1, r3
 8000868:	6411      	str	r1, [r2, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800086a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800086c:	4013      	ands	r3, r2
 800086e:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000870:	9b02      	ldr	r3, [sp, #8]
 8000872:	e7e8      	b.n	8000846 <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000874:	4a06      	ldr	r2, [pc, #24]	; (8000890 <stm32_clock_control_on+0x6c>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8000876:	684b      	ldr	r3, [r1, #4]
 8000878:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800087a:	4319      	orrs	r1, r3
 800087c:	6451      	str	r1, [r2, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800087e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000880:	4013      	ands	r3, r2
 8000882:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8000884:	9b03      	ldr	r3, [sp, #12]
 8000886:	e7de      	b.n	8000846 <stm32_clock_control_on+0x22>
		return -ENOTSUP;
 8000888:	f06f 0022 	mvn.w	r0, #34	; 0x22
 800088c:	e7dc      	b.n	8000848 <stm32_clock_control_on+0x24>
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800

08000894 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8000894:	680b      	ldr	r3, [r1, #0]
 8000896:	2b03      	cmp	r3, #3
 8000898:	d820      	bhi.n	80008dc <stm32_clock_control_off+0x48>
 800089a:	e8df f003 	tbb	[pc, r3]
 800089e:	0a02      	.short	0x0a02
 80008a0:	1811      	.short	0x1811
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 80008a2:	4a10      	ldr	r2, [pc, #64]	; (80008e4 <stm32_clock_control_off+0x50>)
 80008a4:	6849      	ldr	r1, [r1, #4]
 80008a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80008a8:	ea23 0301 	bic.w	r3, r3, r1
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* CONFIG_SOC_SERIES_STM32L0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 80008ae:	2000      	movs	r0, #0
 80008b0:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 80008b2:	4a0c      	ldr	r2, [pc, #48]	; (80008e4 <stm32_clock_control_off+0x50>)
 80008b4:	6849      	ldr	r1, [r1, #4]
 80008b6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80008b8:	ea23 0301 	bic.w	r3, r3, r1
 80008bc:	6353      	str	r3, [r2, #52]	; 0x34
 80008be:	e7f6      	b.n	80008ae <stm32_clock_control_off+0x1a>
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 80008c0:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <stm32_clock_control_off+0x50>)
 80008c2:	6849      	ldr	r1, [r1, #4]
 80008c4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80008c6:	ea23 0301 	bic.w	r3, r3, r1
 80008ca:	6413      	str	r3, [r2, #64]	; 0x40
 80008cc:	e7ef      	b.n	80008ae <stm32_clock_control_off+0x1a>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80008ce:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <stm32_clock_control_off+0x50>)
 80008d0:	6849      	ldr	r1, [r1, #4]
 80008d2:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80008d4:	ea23 0301 	bic.w	r3, r3, r1
 80008d8:	6453      	str	r3, [r2, #68]	; 0x44
 80008da:	e7e8      	b.n	80008ae <stm32_clock_control_off+0x1a>
		return -ENOTSUP;
 80008dc:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800

080008e8 <stm32_clock_control_get_subsys_rate>:
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	u32_t ahb_clock = SystemCoreClock;
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <stm32_clock_control_get_subsys_rate+0x24>)
				CONFIG_CLOCK_STM32_APB2_PRESCALER);
#endif /* CONFIG_SOC_SERIES_STM32F0X */

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 80008ea:	6809      	ldr	r1, [r1, #0]
	u32_t ahb_clock = SystemCoreClock;
 80008ec:	681b      	ldr	r3, [r3, #0]
	switch (pclken->bus) {
 80008ee:	2903      	cmp	r1, #3
 80008f0:	d809      	bhi.n	8000906 <stm32_clock_control_get_subsys_rate+0x1e>
 80008f2:	e8df f001 	tbb	[pc, r1]
 80008f6:	0303      	.short	0x0303
 80008f8:	0602      	.short	0x0602
	return clock / prescaler;
 80008fa:	089b      	lsrs	r3, r3, #2
#if defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32F0X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX)
	case STM32_CLOCK_BUS_APB1_2:
#endif
		*rate = apb1_clock;
 80008fc:	6013      	str	r3, [r2, #0]
#endif /* CONFIG_SOC_SERIES_STM32F0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 80008fe:	2000      	movs	r0, #0
		break;
 8000900:	4770      	bx	lr
	return clock / prescaler;
 8000902:	085b      	lsrs	r3, r3, #1
 8000904:	e7fa      	b.n	80008fc <stm32_clock_control_get_subsys_rate+0x14>
		return -ENOTSUP;
 8000906:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 800090a:	4770      	bx	lr
 800090c:	20020fc8 	.word	0x20020fc8

08000910 <stm32_clock_control_init>:
			 mco2_prescaler(CONFIG_CLOCK_STM32_MCO2_DIV));
#endif /* CONFIG_CLOCK_STM32_MCO2_SRC_NOCLOCK */
}

static int stm32_clock_control_init(struct device *dev)
{
 8000910:	b530      	push	{r4, r5, lr}
	clk_init->APB1CLKDivider = apb1_prescaler(
 8000912:	2100      	movs	r1, #0
{
 8000914:	b087      	sub	sp, #28
	clk_init->APB1CLKDivider = apb1_prescaler(
 8000916:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800091a:	e9cd 1300 	strd	r1, r3, [sp]
	clk_init->APB2CLKDivider = apb2_prescaler(
 800091e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000922:	9302      	str	r3, [sp, #8]
#else
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
#endif /* CONFIG_SOC_SERIES_STM32WBX */

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8000924:	f000 f838 	bl	8000998 <config_enable_default_clocks>

#ifdef CONFIG_CLOCK_STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8000928:	a803      	add	r0, sp, #12
 800092a:	f001 fe3f 	bl	80025ac <config_pll_init>
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <stm32_clock_control_init+0x80>)
 8000930:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 8000932:	0790      	lsls	r0, r2, #30
 8000934:	d406      	bmi.n	8000944 <stm32_clock_control_init+0x34>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	f042 0201 	orr.w	r2, r2, #1
 800093c:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800093e:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 8000940:	0792      	lsls	r2, r2, #30
 8000942:	d5fc      	bpl.n	800093e <stm32_clock_control_init+0x2e>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000944:	4c12      	ldr	r4, [pc, #72]	; (8000990 <stm32_clock_control_init+0x80>)
 8000946:	68a3      	ldr	r3, [r4, #8]
 8000948:	f023 0303 	bic.w	r3, r3, #3
 800094c:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800094e:	68a3      	ldr	r3, [r4, #8]
 8000950:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000954:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000956:	68a5      	ldr	r5, [r4, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8000958:	f015 050c 	ands.w	r5, r5, #12
 800095c:	d1fb      	bne.n	8000956 <stm32_clock_control_init+0x46>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800095e:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_CLOCK_STM32_HSE_BYPASS
	hse_bypass = LL_UTILS_HSEBYPASS_ON;
#endif /* CONFIG_CLOCK_STM32_HSE_BYPASS */

	/* Switch to PLL with HSE as clock source */
	LL_PLL_ConfigSystemClock_HSE(
 8000960:	aa03      	add	r2, sp, #12
 8000962:	4629      	mov	r1, r5
 8000964:	480b      	ldr	r0, [pc, #44]	; (8000994 <stm32_clock_control_init+0x84>)
 8000966:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800096a:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 800096c:	6863      	ldr	r3, [r4, #4]
 800096e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000972:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
 8000976:	6063      	str	r3, [r4, #4]
	LL_PLL_ConfigSystemClock_HSE(
 8000978:	466b      	mov	r3, sp
 800097a:	f000 fa25 	bl	8000dc8 <LL_PLL_ConfigSystemClock_HSE>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800097e:	6823      	ldr	r3, [r4, #0]
 8000980:	f023 0301 	bic.w	r3, r3, #1
 8000984:	6023      	str	r3, [r4, #0]
		&s_PLLInitStruct,
		&s_ClkInitStruct);

	/* Disable other clocks */
	LL_RCC_HSI_Disable();
	LL_RCC_MSI_Disable();
 8000986:	f001 fe19 	bl	80025bc <LL_RCC_MSI_Disable>

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 800098a:	4628      	mov	r0, r5
 800098c:	b007      	add	sp, #28
 800098e:	bd30      	pop	{r4, r5, pc}
 8000990:	40023800 	.word	0x40023800
 8000994:	017d7840 	.word	0x017d7840

08000998 <config_enable_default_clocks>:
  SET_BIT(RCC->APB1ENR, Periphs);
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <config_enable_default_clocks+0x1c>)

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 800099a:	b082      	sub	sp, #8
 800099c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800099e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009a2:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009aa:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80009ac:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 80009ae:	b002      	add	sp, #8
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800

080009b8 <z_pinmux_stm32_set>:
 *
 * @return 0 on success, error otherwise
 */
int z_pinmux_stm32_set(u32_t pin, u32_t func,
				struct device *clk)
{
 80009b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80009ba:	4604      	mov	r4, r0
	/* make sure to enable port clock first */
	if (enable_port(STM32_PORT(pin), clk)) {
 80009bc:	0906      	lsrs	r6, r0, #4
{
 80009be:	460d      	mov	r5, r1
	if (!clk) {
 80009c0:	4610      	mov	r0, r2
 80009c2:	b912      	cbnz	r2, 80009ca <z_pinmux_stm32_set+0x12>
 80009c4:	4811      	ldr	r0, [pc, #68]	; (8000a0c <z_pinmux_stm32_set+0x54>)
 80009c6:	f000 fedb 	bl	8001780 <z_impl_device_get_binding>
	pclken.bus = STM32_CLOCK_BUS_GPIO;
 80009ca:	2300      	movs	r3, #0
 80009cc:	9300      	str	r3, [sp, #0]
	pclken.enr = ports_enable[port];
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <z_pinmux_stm32_set+0x58>)
 80009d0:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 80009d4:	9301      	str	r3, [sp, #4]
	if (pclken.enr == STM32_PORT_NOT_AVAILABLE) {
 80009d6:	3301      	adds	r3, #1
 80009d8:	d102      	bne.n	80009e0 <z_pinmux_stm32_set+0x28>
		return -EIO;
 80009da:	f06f 0004 	mvn.w	r0, #4
 80009de:	e012      	b.n	8000a06 <z_pinmux_stm32_set+0x4e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
 80009e0:	6843      	ldr	r3, [r0, #4]
 80009e2:	4669      	mov	r1, sp
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4798      	blx	r3
	if (enable_port(STM32_PORT(pin), clk)) {
 80009e8:	2800      	cmp	r0, #0
 80009ea:	d1f6      	bne.n	80009da <z_pinmux_stm32_set+0x22>
	u32_t offset = STM32_PORT(pin) * GPIO_REG_SIZE;
 80009ec:	1120      	asrs	r0, r4, #4
	return gpio_stm32_configure((u32_t *)port_base,
 80009ee:	f005 030f 	and.w	r3, r5, #15
 80009f2:	462a      	mov	r2, r5
 80009f4:	f004 010f 	and.w	r1, r4, #15
	u32_t offset = STM32_PORT(pin) * GPIO_REG_SIZE;
 80009f8:	0280      	lsls	r0, r0, #10
	return gpio_stm32_configure((u32_t *)port_base,
 80009fa:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80009fe:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 8000a02:	f001 fedf 	bl	80027c4 <gpio_stm32_configure>
	}

	return stm32_pin_configure(pin, func, func & STM32_AFR_MASK);
}
 8000a06:	b002      	add	sp, #8
 8000a08:	bd70      	pop	{r4, r5, r6, pc}
 8000a0a:	bf00      	nop
 8000a0c:	0800327c 	.word	0x0800327c
 8000a10:	08003094 	.word	0x08003094

08000a14 <stm32_setup_pins>:
 * @param pinconf  board pin configuration array
 * @param pins     array size
 */
void stm32_setup_pins(const struct pin_config *pinconf,
		      size_t pins)
{
 8000a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a16:	4604      	mov	r4, r0
 8000a18:	4809      	ldr	r0, [pc, #36]	; (8000a40 <stm32_setup_pins+0x2c>)
 8000a1a:	460e      	mov	r6, r1
	struct device *clk;
	int i;

	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);

	for (i = 0; i < pins; i++) {
 8000a1c:	2500      	movs	r5, #0
 8000a1e:	f000 feaf 	bl	8001780 <z_impl_device_get_binding>
 8000a22:	4607      	mov	r7, r0
 8000a24:	42b5      	cmp	r5, r6
 8000a26:	f104 0408 	add.w	r4, r4, #8
 8000a2a:	d100      	bne.n	8000a2e <stm32_setup_pins+0x1a>
		z_pinmux_stm32_set(pinconf[i].pin_num,
				  pinconf[i].mode,
				  clk);
	}
}
 8000a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_pinmux_stm32_set(pinconf[i].pin_num,
 8000a2e:	463a      	mov	r2, r7
 8000a30:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8000a34:	f814 0c08 	ldrb.w	r0, [r4, #-8]
	for (i = 0; i < pins; i++) {
 8000a38:	3501      	adds	r5, #1
		z_pinmux_stm32_set(pinconf[i].pin_num,
 8000a3a:	f7ff ffbd 	bl	80009b8 <z_pinmux_stm32_set>
 8000a3e:	e7f1      	b.n	8000a24 <stm32_setup_pins+0x10>
 8000a40:	0800327c 	.word	0x0800327c

08000a44 <elapsed>:
	 * the double-overflow if called at the end of a cycle.  There
	 * is no safe algorithm here, so we split the difference by
	 * reading CTRL twice, suppressing the second overflow bit if
	 * VAL was "about to overflow".
	 */
	ctrl1 = SysTick->CTRL;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <elapsed+0x40>)
{
 8000a46:	b530      	push	{r4, r5, lr}
	ctrl1 = SysTick->CTRL;
 8000a48:	681a      	ldr	r2, [r3, #0]
	val = SysTick->VAL & COUNTER_MAX;
 8000a4a:	6899      	ldr	r1, [r3, #8]
	ctrl2 = SysTick->CTRL;
 8000a4c:	681d      	ldr	r5, [r3, #0]

	overflow_cyc += (ctrl1 & SysTick_CTRL_COUNTFLAG_Msk) ? last_load : 0;
 8000a4e:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
 8000a52:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <elapsed+0x44>)
	val = SysTick->VAL & COUNTER_MAX;
 8000a54:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
	overflow_cyc += (ctrl1 & SysTick_CTRL_COUNTFLAG_Msk) ? last_load : 0;
 8000a58:	681c      	ldr	r4, [r3, #0]
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <elapsed+0x48>)
 8000a5c:	bf18      	it	ne
 8000a5e:	4622      	movne	r2, r4
	if (val > VAL_ABOUT_TO_WRAP) {
 8000a60:	2908      	cmp	r1, #8
	overflow_cyc += (ctrl1 & SysTick_CTRL_COUNTFLAG_Msk) ? last_load : 0;
 8000a62:	6818      	ldr	r0, [r3, #0]
 8000a64:	4402      	add	r2, r0
 8000a66:	601a      	str	r2, [r3, #0]
	if (val > VAL_ABOUT_TO_WRAP) {
 8000a68:	d907      	bls.n	8000a7a <elapsed+0x36>
		int wrap = ctrl2 & SysTick_CTRL_COUNTFLAG_Msk;

		overflow_cyc += (wrap != 0) ? last_load : 0;
 8000a6a:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	bf14      	ite	ne
 8000a72:	4620      	movne	r0, r4
 8000a74:	2000      	moveq	r0, #0
 8000a76:	4402      	add	r2, r0
 8000a78:	601a      	str	r2, [r3, #0]
	}

	return (last_load - val) + overflow_cyc;
 8000a7a:	6818      	ldr	r0, [r3, #0]
 8000a7c:	4420      	add	r0, r4
}
 8000a7e:	1a40      	subs	r0, r0, r1
 8000a80:	bd30      	pop	{r4, r5, pc}
 8000a82:	bf00      	nop
 8000a84:	e000e010 	.word	0xe000e010
 8000a88:	200200e0 	.word	0x200200e0
 8000a8c:	200200e4 	.word	0x200200e4

08000a90 <z_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void z_clock_isr(void *arg)
{
 8000a90:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	u32_t dticks;

	cycle_count += last_load;
 8000a92:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <z_clock_isr+0x38>)
 8000a94:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <z_clock_isr+0x3c>)
 8000a96:	6812      	ldr	r2, [r2, #0]
 8000a98:	6818      	ldr	r0, [r3, #0]
 8000a9a:	4410      	add	r0, r2
	dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8000a9c:	4a0c      	ldr	r2, [pc, #48]	; (8000ad0 <z_clock_isr+0x40>)
 8000a9e:	6811      	ldr	r1, [r2, #0]
	cycle_count += last_load;
 8000aa0:	6018      	str	r0, [r3, #0]
	dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8000aa2:	1a40      	subs	r0, r0, r1
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <z_clock_isr+0x44>)
 8000aa6:	fbb0 f0f3 	udiv	r0, r0, r3
	announced_cycles += dticks * CYC_PER_TICK;
 8000aaa:	fb03 1300 	mla	r3, r3, r0, r1
 8000aae:	6013      	str	r3, [r2, #0]

	overflow_cyc = SysTick->CTRL; /* Reset overflow flag */
 8000ab0:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <z_clock_isr+0x48>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <z_clock_isr+0x4c>)
 8000ab6:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]

	z_clock_announce(TICKLESS ? dticks : 1);
 8000abc:	f001 fa6c 	bl	8001f98 <z_clock_announce>
	z_ExcExit();
}
 8000ac0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_ExcExit();
 8000ac4:	f000 b9c8 	b.w	8000e58 <_IntExit>
 8000ac8:	200200e0 	.word	0x200200e0
 8000acc:	200200dc 	.word	0x200200dc
 8000ad0:	200200d8 	.word	0x200200d8
 8000ad4:	00034bc0 	.word	0x00034bc0
 8000ad8:	e000e010 	.word	0xe000e010
 8000adc:	200200e4 	.word	0x200200e4

08000ae0 <z_clock_driver_init>:
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <z_clock_driver_init+0x24>)
 8000ae2:	2210      	movs	r2, #16

int z_clock_driver_init(struct device *device)
{
	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	last_load = CYC_PER_TICK - 1;
 8000aea:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <z_clock_driver_init+0x28>)
 8000aec:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <z_clock_driver_init+0x2c>)
 8000aee:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <z_clock_driver_init+0x30>)
 8000af2:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <z_clock_driver_init+0x34>)
 8000af6:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8000af8:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	f042 0207 	orr.w	r2, r2, #7
 8000b00:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00
 8000b08:	00034bbf 	.word	0x00034bbf
 8000b0c:	200200e0 	.word	0x200200e0
 8000b10:	200200e4 	.word	0x200200e4
 8000b14:	e000e010 	.word	0xe000e010

08000b18 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
 8000b18:	b570      	push	{r4, r5, r6, lr}
 8000b1a:	4c21      	ldr	r4, [pc, #132]	; (8000ba0 <z_clock_set_timeout+0x88>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_IDLE) && idle && ticks == K_FOREVER) {
 8000b1c:	b151      	cbz	r1, 8000b34 <z_clock_set_timeout+0x1c>
 8000b1e:	1c43      	adds	r3, r0, #1
 8000b20:	d108      	bne.n	8000b34 <z_clock_set_timeout+0x1c>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8000b22:	4a20      	ldr	r2, [pc, #128]	; (8000ba4 <z_clock_set_timeout+0x8c>)
 8000b24:	6813      	ldr	r3, [r2, #0]
 8000b26:	f023 0301 	bic.w	r3, r3, #1
 8000b2a:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
 8000b2c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000b30:	6023      	str	r3, [r4, #0]
	SysTick->LOAD = last_load - 1;
	SysTick->VAL = 0; /* resets timer to last_load */

	k_spin_unlock(&lock, key);
#endif
}
 8000b32:	bd70      	pop	{r4, r5, r6, pc}
	ticks = MIN(MAX_TICKS, MAX(ticks - 1, 0));
 8000b34:	3801      	subs	r0, #1
 8000b36:	284c      	cmp	r0, #76	; 0x4c
 8000b38:	dc2c      	bgt.n	8000b94 <z_clock_set_timeout+0x7c>
	delay = (ticks == 0) ? MIN_DELAY : ticks * CYC_PER_TICK;
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	dd2c      	ble.n	8000b98 <z_clock_set_timeout+0x80>
 8000b3e:	4e1a      	ldr	r6, [pc, #104]	; (8000ba8 <z_clock_set_timeout+0x90>)
 8000b40:	4346      	muls	r6, r0
	__asm__ volatile(
 8000b42:	f04f 0310 	mov.w	r3, #16
 8000b46:	f3ef 8511 	mrs	r5, BASEPRI
 8000b4a:	f383 8811 	msr	BASEPRI, r3
 8000b4e:	f3bf 8f6f 	isb	sy
	cycle_count += elapsed();
 8000b52:	f7ff ff77 	bl	8000a44 <elapsed>
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <z_clock_set_timeout+0x94>)
	delay = ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8000b58:	4913      	ldr	r1, [pc, #76]	; (8000ba8 <z_clock_set_timeout+0x90>)
	cycle_count += elapsed();
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4410      	add	r0, r2
 8000b5e:	6018      	str	r0, [r3, #0]
	delay = delay + (cycle_count - announced_cycles);
 8000b60:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <z_clock_set_timeout+0x98>)
 8000b62:	681a      	ldr	r2, [r3, #0]
	delay = ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8000b64:	f5c2 3352 	rsb	r3, r2, #215040	; 0x34800
 8000b68:	f203 33bf 	addw	r3, r3, #959	; 0x3bf
 8000b6c:	4433      	add	r3, r6
 8000b6e:	4403      	add	r3, r0
	last_load = delay - (cycle_count - announced_cycles);
 8000b70:	1a10      	subs	r0, r2, r0
	overflow_cyc = 0U;
 8000b72:	2200      	movs	r2, #0
	delay = ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8000b74:	fbb3 f3f1 	udiv	r3, r3, r1
	last_load = delay - (cycle_count - announced_cycles);
 8000b78:	fb01 0003 	mla	r0, r1, r3, r0
	overflow_cyc = 0U;
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <z_clock_set_timeout+0x9c>)
	last_load = delay - (cycle_count - announced_cycles);
 8000b7e:	6020      	str	r0, [r4, #0]
	SysTick->LOAD = last_load - 1;
 8000b80:	3801      	subs	r0, #1
	overflow_cyc = 0U;
 8000b82:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = last_load - 1;
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <z_clock_set_timeout+0x8c>)
 8000b86:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8000b88:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
 8000b8a:	f385 8811 	msr	BASEPRI, r5
 8000b8e:	f3bf 8f6f 	isb	sy
 8000b92:	e7ce      	b.n	8000b32 <z_clock_set_timeout+0x1a>
	ticks = MIN(MAX_TICKS, MAX(ticks - 1, 0));
 8000b94:	204c      	movs	r0, #76	; 0x4c
 8000b96:	e7d2      	b.n	8000b3e <z_clock_set_timeout+0x26>
	delay = (ticks == 0) ? MIN_DELAY : ticks * CYC_PER_TICK;
 8000b98:	f243 46bc 	movw	r6, #13500	; 0x34bc
 8000b9c:	e7d1      	b.n	8000b42 <z_clock_set_timeout+0x2a>
 8000b9e:	bf00      	nop
 8000ba0:	200200e0 	.word	0x200200e0
 8000ba4:	e000e010 	.word	0xe000e010
 8000ba8:	00034bc0 	.word	0x00034bc0
 8000bac:	200200dc 	.word	0x200200dc
 8000bb0:	200200d8 	.word	0x200200d8
 8000bb4:	200200e4 	.word	0x200200e4

08000bb8 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
 8000bb8:	b510      	push	{r4, lr}
	__asm__ volatile(
 8000bba:	f04f 0310 	mov.w	r3, #16
 8000bbe:	f3ef 8411 	mrs	r4, BASEPRI
 8000bc2:	f383 8811 	msr	BASEPRI, r3
 8000bc6:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc = elapsed() + cycle_count - announced_cycles;
 8000bca:	f7ff ff3b 	bl	8000a44 <elapsed>
 8000bce:	4b07      	ldr	r3, [pc, #28]	; (8000bec <z_clock_elapsed+0x34>)
 8000bd0:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <z_clock_elapsed+0x38>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	6812      	ldr	r2, [r2, #0]
 8000bd6:	1a9b      	subs	r3, r3, r2
 8000bd8:	4418      	add	r0, r3
	__asm__ volatile(
 8000bda:	f384 8811 	msr	BASEPRI, r4
 8000bde:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 8000be2:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <z_clock_elapsed+0x3c>)
 8000be4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000be8:	bd10      	pop	{r4, pc}
 8000bea:	bf00      	nop
 8000bec:	200200dc 	.word	0x200200dc
 8000bf0:	200200d8 	.word	0x200200d8
 8000bf4:	00034bc0 	.word	0x00034bc0

08000bf8 <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
 8000bf8:	b510      	push	{r4, lr}
	__asm__ volatile(
 8000bfa:	f04f 0310 	mov.w	r3, #16
 8000bfe:	f3ef 8411 	mrs	r4, BASEPRI
 8000c02:	f383 8811 	msr	BASEPRI, r3
 8000c06:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = elapsed() + cycle_count;
 8000c0a:	f7ff ff1b 	bl	8000a44 <elapsed>
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <z_timer_cycle_get_32+0x28>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4418      	add	r0, r3
	__asm__ volatile(
 8000c14:	f384 8811 	msr	BASEPRI, r4
 8000c18:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
 8000c1c:	bd10      	pop	{r4, pc}
 8000c1e:	bf00      	nop
 8000c20:	200200dc 	.word	0x200200dc

08000c24 <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <UTILS_PLL_IsBusy+0x24>)
 8000c26:	6819      	ldr	r1, [r3, #0]
  * @rmtoll CR           PLLSAIRDY    LL_RCC_PLLSAI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) == (RCC_CR_PLLSAIRDY));
 8000c28:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000c2a:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 8000c2e:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) == (RCC_CR_PLLSAIRDY));
 8000c30:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
static ErrorStatus UTILS_PLL_IsBusy(void)
{
  ErrorStatus status = SUCCESS;

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
 8000c34:	430a      	orrs	r2, r1
 8000c36:	bf14      	ite	ne
 8000c38:	2001      	movne	r0, #1
 8000c3a:	2000      	moveq	r0, #0
  {
    /* PLLSAI1 configuration cannot be modified */
    status = ERROR;
  }
  /* Check if PLLI2S is busy*/
  if(LL_RCC_PLLI2S_IsReady() != 0U)
 8000c3c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  {
    /* PLLI2S configuration cannot be modified */
    status = ERROR;
  }
  return status;
}
 8000c40:	bf18      	it	ne
 8000c42:	2001      	movne	r0, #1
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800

08000c4c <UTILS_SetFlashLatency.part.0>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 8000c4c:	4b2e      	ldr	r3, [pc, #184]	; (8000d08 <UTILS_SetFlashLatency.part.0+0xbc>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(PWR->CR1, PWR_CR1_ODEN) == (PWR_CR1_ODEN));
 8000c50:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 8000c52:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8000c56:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8000c5a:	d123      	bne.n	8000ca4 <UTILS_SetFlashLatency.part.0+0x58>
      if(LL_PWR_IsEnabledOverDriveMode() != 0U)
 8000c5c:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000c60:	d03c      	beq.n	8000cdc <UTILS_SetFlashLatency.part.0+0x90>
          if(HCLK_Frequency > UTILS_SCALE1_LATENCY7_FREQ)
 8000c62:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <UTILS_SetFlashLatency.part.0+0xc0>)
 8000c64:	4298      	cmp	r0, r3
 8000c66:	d83e      	bhi.n	8000ce6 <UTILS_SetFlashLatency.part.0+0x9a>
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY4_FREQ) && (latency == LL_FLASH_LATENCY_0))
 8000c68:	4b29      	ldr	r3, [pc, #164]	; (8000d10 <UTILS_SetFlashLatency.part.0+0xc4>)
 8000c6a:	4298      	cmp	r0, r3
 8000c6c:	d83d      	bhi.n	8000cea <UTILS_SetFlashLatency.part.0+0x9e>
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ) && (latency == LL_FLASH_LATENCY_0))
 8000c6e:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <UTILS_SetFlashLatency.part.0+0xc8>)
 8000c70:	4298      	cmp	r0, r3
 8000c72:	d83a      	bhi.n	8000cea <UTILS_SetFlashLatency.part.0+0x9e>
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ) && (latency == LL_FLASH_LATENCY_0))
 8000c74:	4b28      	ldr	r3, [pc, #160]	; (8000d18 <UTILS_SetFlashLatency.part.0+0xcc>)
 8000c76:	4298      	cmp	r0, r3
            latency = LL_FLASH_LATENCY_6;
 8000c78:	f04f 0306 	mov.w	r3, #6
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ) && (latency == LL_FLASH_LATENCY_0))
 8000c7c:	d805      	bhi.n	8000c8a <UTILS_SetFlashLatency.part.0+0x3e>
        if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ) && (latency == LL_FLASH_LATENCY_0))
 8000c7e:	4a27      	ldr	r2, [pc, #156]	; (8000d1c <UTILS_SetFlashLatency.part.0+0xd0>)
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d902      	bls.n	8000c8a <UTILS_SetFlashLatency.part.0+0x3e>
 8000c84:	2b00      	cmp	r3, #0
          latency = LL_FLASH_LATENCY_1;
 8000c86:	bf08      	it	eq
 8000c88:	2301      	moveq	r3, #1
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000c8a:	4925      	ldr	r1, [pc, #148]	; (8000d20 <UTILS_SetFlashLatency.part.0+0xd4>)
 8000c8c:	680a      	ldr	r2, [r1, #0]
 8000c8e:	f022 020f 	bic.w	r2, r2, #15
 8000c92:	431a      	orrs	r2, r3
 8000c94:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000c96:	6808      	ldr	r0, [r1, #0]
 8000c98:	f000 000f 	and.w	r0, r0, #15
  return status;
 8000c9c:	1ac0      	subs	r0, r0, r3
 8000c9e:	bf18      	it	ne
 8000ca0:	2001      	movne	r0, #1
}
 8000ca2:	4770      	bx	lr
 8000ca4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    else if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8000ca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000cac:	d105      	bne.n	8000cba <UTILS_SetFlashLatency.part.0+0x6e>
      if(HCLK_Frequency > UTILS_SCALE2_LATENCY5_FREQ)
 8000cae:	f103 630f 	add.w	r3, r3, #149946368	; 0x8f00000
 8000cb2:	f503 43a3 	add.w	r3, r3, #20864	; 0x5180
 8000cb6:	4298      	cmp	r0, r3
 8000cb8:	d813      	bhi.n	8000ce2 <UTILS_SetFlashLatency.part.0+0x96>
      if(HCLK_Frequency > UTILS_SCALE3_LATENCY4_FREQ)
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <UTILS_SetFlashLatency.part.0+0xc4>)
 8000cbc:	4298      	cmp	r0, r3
 8000cbe:	d80b      	bhi.n	8000cd8 <UTILS_SetFlashLatency.part.0+0x8c>
      else if(HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <UTILS_SetFlashLatency.part.0+0xc8>)
 8000cc2:	4298      	cmp	r0, r3
 8000cc4:	d819      	bhi.n	8000cfa <UTILS_SetFlashLatency.part.0+0xae>
      else if(HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <UTILS_SetFlashLatency.part.0+0xcc>)
 8000cc8:	4298      	cmp	r0, r3
 8000cca:	d81b      	bhi.n	8000d04 <UTILS_SetFlashLatency.part.0+0xb8>
        if(HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <UTILS_SetFlashLatency.part.0+0xd0>)
 8000cce:	4298      	cmp	r0, r3
 8000cd0:	bf94      	ite	ls
 8000cd2:	2300      	movls	r3, #0
 8000cd4:	2301      	movhi	r3, #1
 8000cd6:	e7d8      	b.n	8000c8a <UTILS_SetFlashLatency.part.0+0x3e>
        latency = LL_FLASH_LATENCY_4;
 8000cd8:	2304      	movs	r3, #4
 8000cda:	e7d6      	b.n	8000c8a <UTILS_SetFlashLatency.part.0+0x3e>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY5_FREQ) && (latency == LL_FLASH_LATENCY_0))
 8000cdc:	4a11      	ldr	r2, [pc, #68]	; (8000d24 <UTILS_SetFlashLatency.part.0+0xd8>)
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	d905      	bls.n	8000cee <UTILS_SetFlashLatency.part.0+0xa2>
        latency = LL_FLASH_LATENCY_5;
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	e7d1      	b.n	8000c8a <UTILS_SetFlashLatency.part.0+0x3e>
            latency = LL_FLASH_LATENCY_7;
 8000ce6:	2307      	movs	r3, #7
 8000ce8:	e7cf      	b.n	8000c8a <UTILS_SetFlashLatency.part.0+0x3e>
            latency = LL_FLASH_LATENCY_6;
 8000cea:	2306      	movs	r3, #6
 8000cec:	e7cd      	b.n	8000c8a <UTILS_SetFlashLatency.part.0+0x3e>
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY4_FREQ) && (latency == LL_FLASH_LATENCY_0))
 8000cee:	4a08      	ldr	r2, [pc, #32]	; (8000d10 <UTILS_SetFlashLatency.part.0+0xc4>)
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d8f1      	bhi.n	8000cd8 <UTILS_SetFlashLatency.part.0+0x8c>
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ) && (latency == LL_FLASH_LATENCY_0))
 8000cf4:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <UTILS_SetFlashLatency.part.0+0xc8>)
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d901      	bls.n	8000cfe <UTILS_SetFlashLatency.part.0+0xb2>
        latency = LL_FLASH_LATENCY_3;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	e7c5      	b.n	8000c8a <UTILS_SetFlashLatency.part.0+0x3e>
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ) && (latency == LL_FLASH_LATENCY_0))
 8000cfe:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <UTILS_SetFlashLatency.part.0+0xcc>)
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d9bc      	bls.n	8000c7e <UTILS_SetFlashLatency.part.0+0x32>
        latency = LL_FLASH_LATENCY_2;
 8000d04:	2302      	movs	r3, #2
 8000d06:	e7c0      	b.n	8000c8a <UTILS_SetFlashLatency.part.0+0x3e>
 8000d08:	40007000 	.word	0x40007000
 8000d0c:	0c845880 	.word	0x0c845880
 8000d10:	07270e00 	.word	0x07270e00
 8000d14:	055d4a80 	.word	0x055d4a80
 8000d18:	03938700 	.word	0x03938700
 8000d1c:	01c9c380 	.word	0x01c9c380
 8000d20:	40023c00 	.word	0x40023c00
 8000d24:	08f0d180 	.word	0x08f0d180

08000d28 <UTILS_EnablePLLAndSwitchSystem>:
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8000d28:	680b      	ldr	r3, [r1, #0]
 8000d2a:	4a24      	ldr	r2, [pc, #144]	; (8000dbc <UTILS_EnablePLLAndSwitchSystem+0x94>)
 8000d2c:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 8000d30:	b570      	push	{r4, r5, r6, lr}
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8000d32:	5cd4      	ldrb	r4, [r2, r3]
{
 8000d34:	460e      	mov	r6, r1

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 8000d36:	4d22      	ldr	r5, [pc, #136]	; (8000dc0 <UTILS_EnablePLLAndSwitchSystem+0x98>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8000d38:	fa20 f404 	lsr.w	r4, r0, r4
  if(SystemCoreClock < hclk_frequency)
 8000d3c:	682b      	ldr	r3, [r5, #0]
 8000d3e:	42a3      	cmp	r3, r4
 8000d40:	d327      	bcc.n	8000d92 <UTILS_EnablePLLAndSwitchSystem+0x6a>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000d42:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <UTILS_EnablePLLAndSwitchSystem+0x9c>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000d4a:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000d4c:	681a      	ldr	r2, [r3, #0]
  /* Update system clock configuration */
  if(status == SUCCESS)
  {
    /* Enable PLL */
    LL_RCC_PLL_Enable();
    while (LL_RCC_PLL_IsReady() != 1U)
 8000d4e:	0192      	lsls	r2, r2, #6
 8000d50:	d5fc      	bpl.n	8000d4c <UTILS_EnablePLLAndSwitchSystem+0x24>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	6831      	ldr	r1, [r6, #0]
 8000d56:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	f022 0203 	bic.w	r2, r2, #3
 8000d64:	f042 0202 	orr.w	r2, r2, #2
 8000d68:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <UTILS_EnablePLLAndSwitchSystem+0x9c>)
 8000d6c:	689a      	ldr	r2, [r3, #8]
 8000d6e:	f002 020c 	and.w	r2, r2, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000d72:	2a08      	cmp	r2, #8
 8000d74:	d1fa      	bne.n	8000d6c <UTILS_EnablePLLAndSwitchSystem+0x44>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000d76:	689a      	ldr	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000d78:	2000      	movs	r0, #0
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000d7a:	6871      	ldr	r1, [r6, #4]
 8000d7c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8000d80:	430a      	orrs	r2, r1
 8000d82:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000d84:	689a      	ldr	r2, [r3, #8]
 8000d86:	68b1      	ldr	r1, [r6, #8]
 8000d88:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	e005      	b.n	8000d9e <UTILS_EnablePLLAndSwitchSystem+0x76>
  if(HCLK_Frequency == 0U)
 8000d92:	b174      	cbz	r4, 8000db2 <UTILS_EnablePLLAndSwitchSystem+0x8a>
 8000d94:	4620      	mov	r0, r4
 8000d96:	f7ff ff59 	bl	8000c4c <UTILS_SetFlashLatency.part.0>
  if(status == SUCCESS)
 8000d9a:	2800      	cmp	r0, #0
 8000d9c:	d0d1      	beq.n	8000d42 <UTILS_EnablePLLAndSwitchSystem+0x1a>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 8000d9e:	682b      	ldr	r3, [r5, #0]
 8000da0:	42a3      	cmp	r3, r4
 8000da2:	d903      	bls.n	8000dac <UTILS_EnablePLLAndSwitchSystem+0x84>
  if(HCLK_Frequency == 0U)
 8000da4:	b13c      	cbz	r4, 8000db6 <UTILS_EnablePLLAndSwitchSystem+0x8e>
 8000da6:	4620      	mov	r0, r4
 8000da8:	f7ff ff50 	bl	8000c4c <UTILS_SetFlashLatency.part.0>
    /* Set FLASH latency to lowest latency */
    status = UTILS_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 8000dac:	b900      	cbnz	r0, 8000db0 <UTILS_EnablePLLAndSwitchSystem+0x88>
  SystemCoreClock = HCLKFrequency;
 8000dae:	602c      	str	r4, [r5, #0]
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 8000db0:	bd70      	pop	{r4, r5, r6, pc}
    status = ERROR;
 8000db2:	2001      	movs	r0, #1
 8000db4:	e7f3      	b.n	8000d9e <UTILS_EnablePLLAndSwitchSystem+0x76>
 8000db6:	2001      	movs	r0, #1
 8000db8:	e7fa      	b.n	8000db0 <UTILS_EnablePLLAndSwitchSystem+0x88>
 8000dba:	bf00      	nop
 8000dbc:	0800328f 	.word	0x0800328f
 8000dc0:	20020fc8 	.word	0x20020fc8
 8000dc4:	40023800 	.word	0x40023800

08000dc8 <LL_PLL_ConfigSystemClock_HSE>:
{
 8000dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dcc:	4604      	mov	r4, r0
 8000dce:	460e      	mov	r6, r1
 8000dd0:	4690      	mov	r8, r2
 8000dd2:	461d      	mov	r5, r3
  if(UTILS_PLL_IsBusy() == SUCCESS)
 8000dd4:	f7ff ff26 	bl	8000c24 <UTILS_PLL_IsBusy>
 8000dd8:	2800      	cmp	r0, #0
 8000dda:	d135      	bne.n	8000e48 <LL_PLL_ConfigSystemClock_HSE+0x80>
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8000ddc:	f8d8 3000 	ldr.w	r3, [r8]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8000de0:	f8d8 7004 	ldr.w	r7, [r8, #4]
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8000de4:	f003 003f 	and.w	r0, r3, #63	; 0x3f
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8000de8:	f8d8 1008 	ldr.w	r1, [r8, #8]
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8000dec:	fbb4 f4f0 	udiv	r4, r4, r0
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8000df0:	f3c7 0008 	ubfx	r0, r7, #0, #9
 8000df4:	4344      	muls	r4, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8000df6:	0c08      	lsrs	r0, r1, #16
 8000df8:	3001      	adds	r0, #1
 8000dfa:	0040      	lsls	r0, r0, #1
 8000dfc:	fbb4 f0f0 	udiv	r0, r4, r0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000e00:	4c13      	ldr	r4, [pc, #76]	; (8000e50 <LL_PLL_ConfigSystemClock_HSE+0x88>)
 8000e02:	6822      	ldr	r2, [r4, #0]
    if(LL_RCC_HSE_IsReady() != 1U)
 8000e04:	0392      	lsls	r2, r2, #14
 8000e06:	d40f      	bmi.n	8000e28 <LL_PLL_ConfigSystemClock_HSE+0x60>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000e08:	6822      	ldr	r2, [r4, #0]
      if(HSEBypass == LL_UTILS_HSEBYPASS_ON)
 8000e0a:	2e01      	cmp	r6, #1
 8000e0c:	bf0c      	ite	eq
 8000e0e:	f442 2280 	orreq.w	r2, r2, #262144	; 0x40000
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000e12:	f422 2280 	bicne.w	r2, r2, #262144	; 0x40000
 8000e16:	6022      	str	r2, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000e18:	6822      	ldr	r2, [r4, #0]
 8000e1a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000e1e:	6022      	str	r2, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000e20:	4c0b      	ldr	r4, [pc, #44]	; (8000e50 <LL_PLL_ConfigSystemClock_HSE+0x88>)
 8000e22:	6822      	ldr	r2, [r4, #0]
      while (LL_RCC_HSE_IsReady() != 1U)
 8000e24:	0392      	lsls	r2, r2, #14
 8000e26:	d5fc      	bpl.n	8000e22 <LL_PLL_ConfigSystemClock_HSE+0x5a>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP,
 8000e28:	4c09      	ldr	r4, [pc, #36]	; (8000e50 <LL_PLL_ConfigSystemClock_HSE+0x88>)
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <LL_PLL_ConfigSystemClock_HSE+0x8c>)
 8000e2c:	6866      	ldr	r6, [r4, #4]
 8000e2e:	4032      	ands	r2, r6
 8000e30:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
 8000e34:	431a      	orrs	r2, r3
 8000e36:	430a      	orrs	r2, r1
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8000e38:	4629      	mov	r1, r5
 8000e3a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000e3e:	6062      	str	r2, [r4, #4]
}
 8000e40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8000e44:	f7ff bf70 	b.w	8000d28 <UTILS_EnablePLLAndSwitchSystem>
}
 8000e48:	2001      	movs	r0, #1
 8000e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800
 8000e54:	ffbc8000 	.word	0xffbc8000

08000e58 <_IntExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
 8000e58:	4804      	ldr	r0, [pc, #16]	; (8000e6c <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
 8000e5a:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
 8000e5c:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
 8000e5e:	4288      	cmp	r0, r1
    beq _EXIT_EXC
 8000e60:	d003      	beq.n	8000e6a <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
 8000e62:	4903      	ldr	r1, [pc, #12]	; (8000e70 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
 8000e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
 8000e68:	600a      	str	r2, [r1, #0]

08000e6a <_EXIT_EXC>:
    mov lr, r1
#else
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */
    bx lr
 8000e6a:	4770      	bx	lr
    ldr r0, =_kernel
 8000e6c:	20020234 	.word	0x20020234
    ldr r1, =_SCS_ICSR
 8000e70:	e000ed04 	.word	0xe000ed04

08000e74 <z_IntLibInit>:
 * @return N/A
 */

void z_IntLibInit(void)
{
	int irq = 0;
 8000e74:	2300      	movs	r3, #0
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	4804      	ldr	r0, [pc, #16]	; (8000e88 <z_IntLibInit+0x14>)
 8000e78:	2110      	movs	r1, #16
 8000e7a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	2b6e      	cmp	r3, #110	; 0x6e
 8000e80:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8000e84:	d1f9      	bne.n	8000e7a <z_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8000e86:	4770      	bx	lr
 8000e88:	e000e100 	.word	0xe000e100

08000e8c <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
 8000e8c:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <__swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8000e8e:	490a      	ldr	r1, [pc, #40]	; (8000eb8 <__swap+0x2c>)
	_current->arch.basepri = key;
 8000e90:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8000e92:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
 8000e94:	65d8      	str	r0, [r3, #92]	; 0x5c
	_current->arch.swap_return_value = _k_neg_eagain;
 8000e96:	6619      	str	r1, [r3, #96]	; 0x60

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000e98:	4908      	ldr	r1, [pc, #32]	; (8000ebc <__swap+0x30>)
 8000e9a:	684b      	ldr	r3, [r1, #4]
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	604b      	str	r3, [r1, #4]
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f383 8811 	msr	BASEPRI, r3
 8000ea8:	f3bf 8f6f 	isb	sy
	irq_unlock(0);

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8000eac:	6893      	ldr	r3, [r2, #8]
}
 8000eae:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20020234 	.word	0x20020234
 8000eb8:	080031fc 	.word	0x080031fc
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8000ec0:	490f      	ldr	r1, [pc, #60]	; (8000f00 <__pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8000ec2:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8000ec4:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
 8000ec8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
 8000eca:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8000ece:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8000ed2:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8000ed4:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8000ed8:	f3bf 8f6f 	isb	sy
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
 8000edc:	4f09      	ldr	r7, [pc, #36]	; (8000f04 <__pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8000ede:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8000ee2:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
 8000ee4:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
 8000ee6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8000ee8:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
    movs.n r3, #0
 8000eea:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8000eec:	65d3      	str	r3, [r2, #92]	; 0x5c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8000eee:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8000ef2:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
 8000ef6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

    msr PSP, ip
 8000efa:	f38c 8809 	msr	PSP, ip
    pop {r0, lr}
#endif
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
 8000efe:	4770      	bx	lr
    ldr r1, =_kernel
 8000f00:	20020234 	.word	0x20020234
    ldr v4, =_SCS_ICSR
 8000f04:	e000ed04 	.word	0xe000ed04

08000f08 <__svc>:
 * - System Calls (User mode)
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
 8000f08:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8000f0c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8000f0e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8000f12:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8000f16:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read encoding */
    ldrh r1, [r1, #-2]
 8000f18:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call (if user mode supported)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
 8000f1c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
 8000f20:	2902      	cmp	r1, #2
    beq _oops
 8000f22:	d0ff      	beq.n	8000f24 <_oops>

08000f24 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {r0, lr}
 8000f24:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8000f26:	f001 fb4c 	bl	80025c2 <z_do_kernel_oops>
    pop {r0, pc}
 8000f2a:	bd01      	pop	{r0, pc}

08000f2c <MpuFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t MpuFault(NANO_ESF *esf, int fromHardFault)
 8000f2c:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****\n");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8000f2e:	4c1c      	ldr	r4, [pc, #112]	; (8000fa0 <MpuFault.isra.2+0x74>)
static u32_t MpuFault(NANO_ESF *esf, int fromHardFault)
 8000f30:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** MPU FAULT *****\n");
 8000f32:	481c      	ldr	r0, [pc, #112]	; (8000fa4 <MpuFault.isra.2+0x78>)
 8000f34:	f001 fab1 	bl	800249a <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8000f38:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f3a:	06d1      	lsls	r1, r2, #27
 8000f3c:	d502      	bpl.n	8000f44 <MpuFault.isra.2+0x18>
		PR_FAULT_INFO("  Stacking error (context area might be"
 8000f3e:	481a      	ldr	r0, [pc, #104]	; (8000fa8 <MpuFault.isra.2+0x7c>)
 8000f40:	f001 faab 	bl	800249a <printk>
			" not valid)\n");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8000f44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f46:	071a      	lsls	r2, r3, #28
 8000f48:	d502      	bpl.n	8000f50 <MpuFault.isra.2+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
 8000f4a:	4818      	ldr	r0, [pc, #96]	; (8000fac <MpuFault.isra.2+0x80>)
 8000f4c:	f001 faa5 	bl	800249a <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8000f50:	4c13      	ldr	r4, [pc, #76]	; (8000fa0 <MpuFault.isra.2+0x74>)
 8000f52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f54:	079b      	lsls	r3, r3, #30
 8000f56:	d50e      	bpl.n	8000f76 <MpuFault.isra.2+0x4a>
		PR_FAULT_INFO("  Data Access Violation\n");
 8000f58:	4815      	ldr	r0, [pc, #84]	; (8000fb0 <MpuFault.isra.2+0x84>)
 8000f5a:	f001 fa9e 	bl	800249a <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
 8000f5e:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8000f60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f62:	0618      	lsls	r0, r3, #24
 8000f64:	d507      	bpl.n	8000f76 <MpuFault.isra.2+0x4a>
			PR_EXC("  MMFAR Address: 0x%x\n", mmfar);
 8000f66:	4813      	ldr	r0, [pc, #76]	; (8000fb4 <MpuFault.isra.2+0x88>)
 8000f68:	f001 fa97 	bl	800249a <printk>
			if (fromHardFault) {
 8000f6c:	b11d      	cbz	r5, 8000f76 <MpuFault.isra.2+0x4a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8000f6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f74:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8000f76:	4c0a      	ldr	r4, [pc, #40]	; (8000fa0 <MpuFault.isra.2+0x74>)
 8000f78:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f7a:	07d2      	lsls	r2, r2, #31
 8000f7c:	d502      	bpl.n	8000f84 <MpuFault.isra.2+0x58>
		PR_FAULT_INFO("  Instruction Access Violation\n");
 8000f7e:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <MpuFault.isra.2+0x8c>)
 8000f80:	f001 fa8b 	bl	800249a <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8000f84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f86:	069b      	lsls	r3, r3, #26
 8000f88:	d502      	bpl.n	8000f90 <MpuFault.isra.2+0x64>
		PR_FAULT_INFO(
 8000f8a:	480c      	ldr	r0, [pc, #48]	; (8000fbc <MpuFault.isra.2+0x90>)
 8000f8c:	f001 fa85 	bl	800249a <printk>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <MpuFault.isra.2+0x74>)
	if (MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
 8000f92:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
 8000f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8000f96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f98:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8000f9c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f9e:	bd38      	pop	{r3, r4, r5, pc}
 8000fa0:	e000ed00 	.word	0xe000ed00
 8000fa4:	0800332d 	.word	0x0800332d
 8000fa8:	08003344 	.word	0x08003344
 8000fac:	08003378 	.word	0x08003378
 8000fb0:	0800338c 	.word	0x0800338c
 8000fb4:	080033a5 	.word	0x080033a5
 8000fb8:	080033bc 	.word	0x080033bc
 8000fbc:	080033dc 	.word	0x080033dc

08000fc0 <BusFault.isra.3>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int BusFault(NANO_ESF *esf, int fromHardFault)
 8000fc0:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8000fc2:	4c1e      	ldr	r4, [pc, #120]	; (800103c <BusFault.isra.3+0x7c>)
static int BusFault(NANO_ESF *esf, int fromHardFault)
 8000fc4:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** BUS FAULT *****\n");
 8000fc6:	481e      	ldr	r0, [pc, #120]	; (8001040 <BusFault.isra.3+0x80>)
 8000fc8:	f001 fa67 	bl	800249a <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8000fcc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000fce:	04d1      	lsls	r1, r2, #19
 8000fd0:	d502      	bpl.n	8000fd8 <BusFault.isra.3+0x18>
		PR_FAULT_INFO("  Stacking error\n");
 8000fd2:	481c      	ldr	r0, [pc, #112]	; (8001044 <BusFault.isra.3+0x84>)
 8000fd4:	f001 fa61 	bl	800249a <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8000fd8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fda:	051a      	lsls	r2, r3, #20
 8000fdc:	d502      	bpl.n	8000fe4 <BusFault.isra.3+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
 8000fde:	481a      	ldr	r0, [pc, #104]	; (8001048 <BusFault.isra.3+0x88>)
 8000fe0:	f001 fa5b 	bl	800249a <printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8000fe4:	4c15      	ldr	r4, [pc, #84]	; (800103c <BusFault.isra.3+0x7c>)
 8000fe6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fe8:	059b      	lsls	r3, r3, #22
 8000fea:	d50e      	bpl.n	800100a <BusFault.isra.3+0x4a>
		PR_FAULT_INFO("  Precise data bus error\n");
 8000fec:	4817      	ldr	r0, [pc, #92]	; (800104c <BusFault.isra.3+0x8c>)
 8000fee:	f001 fa54 	bl	800249a <printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8000ff2:	6ba1      	ldr	r1, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8000ff4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ff6:	0418      	lsls	r0, r3, #16
 8000ff8:	d507      	bpl.n	800100a <BusFault.isra.3+0x4a>
			PR_EXC("  BFAR Address: 0x%x\n", bfar);
 8000ffa:	4815      	ldr	r0, [pc, #84]	; (8001050 <BusFault.isra.3+0x90>)
 8000ffc:	f001 fa4d 	bl	800249a <printk>
			if (fromHardFault) {
 8001000:	b11d      	cbz	r5, 800100a <BusFault.isra.3+0x4a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8001002:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001004:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001008:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 800100a:	4c0c      	ldr	r4, [pc, #48]	; (800103c <BusFault.isra.3+0x7c>)
 800100c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800100e:	0559      	lsls	r1, r3, #21
 8001010:	d502      	bpl.n	8001018 <BusFault.isra.3+0x58>
		PR_FAULT_INFO("  Imprecise data bus error\n");
 8001012:	4810      	ldr	r0, [pc, #64]	; (8001054 <BusFault.isra.3+0x94>)
 8001014:	f001 fa41 	bl	800249a <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8001018:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800101a:	05da      	lsls	r2, r3, #23
 800101c:	d509      	bpl.n	8001032 <BusFault.isra.3+0x72>
		PR_FAULT_INFO("  Instruction bus error\n");
 800101e:	480e      	ldr	r0, [pc, #56]	; (8001058 <BusFault.isra.3+0x98>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
 8001020:	f001 fa3b 	bl	800249a <printk>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8001024:	4a05      	ldr	r2, [pc, #20]	; (800103c <BusFault.isra.3+0x7c>)
	if (MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
 8001026:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8001028:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800102a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800102e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001030:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8001032:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001034:	049b      	lsls	r3, r3, #18
 8001036:	d5f5      	bpl.n	8001024 <BusFault.isra.3+0x64>
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
 8001038:	4808      	ldr	r0, [pc, #32]	; (800105c <BusFault.isra.3+0x9c>)
 800103a:	e7f1      	b.n	8001020 <BusFault.isra.3+0x60>
 800103c:	e000ed00 	.word	0xe000ed00
 8001040:	0800329f 	.word	0x0800329f
 8001044:	080032b6 	.word	0x080032b6
 8001048:	08003378 	.word	0x08003378
 800104c:	080032c8 	.word	0x080032c8
 8001050:	080032e2 	.word	0x080032e2
 8001054:	080032f8 	.word	0x080032f8
 8001058:	08003314 	.word	0x08003314
 800105c:	080033dc 	.word	0x080033dc

08001060 <UsageFault.isra.4>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t UsageFault(const NANO_ESF *esf)
 8001060:	b510      	push	{r4, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****\n");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8001062:	4c19      	ldr	r4, [pc, #100]	; (80010c8 <UsageFault.isra.4+0x68>)
	PR_FAULT_INFO("***** USAGE FAULT *****\n");
 8001064:	4819      	ldr	r0, [pc, #100]	; (80010cc <UsageFault.isra.4+0x6c>)
 8001066:	f001 fa18 	bl	800249a <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 800106a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800106c:	0193      	lsls	r3, r2, #6
 800106e:	d502      	bpl.n	8001076 <UsageFault.isra.4+0x16>
		PR_FAULT_INFO("  Division by zero\n");
 8001070:	4817      	ldr	r0, [pc, #92]	; (80010d0 <UsageFault.isra.4+0x70>)
 8001072:	f001 fa12 	bl	800249a <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8001076:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001078:	01dc      	lsls	r4, r3, #7
 800107a:	d502      	bpl.n	8001082 <UsageFault.isra.4+0x22>
		PR_FAULT_INFO("  Unaligned memory access\n");
 800107c:	4815      	ldr	r0, [pc, #84]	; (80010d4 <UsageFault.isra.4+0x74>)
 800107e:	f001 fa0c 	bl	800249a <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8001082:	4c11      	ldr	r4, [pc, #68]	; (80010c8 <UsageFault.isra.4+0x68>)
 8001084:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001086:	0310      	lsls	r0, r2, #12
 8001088:	d502      	bpl.n	8001090 <UsageFault.isra.4+0x30>
		PR_FAULT_INFO("  No coprocessor instructions\n");
 800108a:	4813      	ldr	r0, [pc, #76]	; (80010d8 <UsageFault.isra.4+0x78>)
 800108c:	f001 fa05 	bl	800249a <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8001090:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001092:	0359      	lsls	r1, r3, #13
 8001094:	d502      	bpl.n	800109c <UsageFault.isra.4+0x3c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
 8001096:	4811      	ldr	r0, [pc, #68]	; (80010dc <UsageFault.isra.4+0x7c>)
 8001098:	f001 f9ff 	bl	800249a <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 800109c:	4c0a      	ldr	r4, [pc, #40]	; (80010c8 <UsageFault.isra.4+0x68>)
 800109e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80010a0:	0392      	lsls	r2, r2, #14
 80010a2:	d502      	bpl.n	80010aa <UsageFault.isra.4+0x4a>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
 80010a4:	480e      	ldr	r0, [pc, #56]	; (80010e0 <UsageFault.isra.4+0x80>)
 80010a6:	f001 f9f8 	bl	800249a <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 80010aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010ac:	03db      	lsls	r3, r3, #15
 80010ae:	d502      	bpl.n	80010b6 <UsageFault.isra.4+0x56>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
 80010b0:	480c      	ldr	r0, [pc, #48]	; (80010e4 <UsageFault.isra.4+0x84>)
 80010b2:	f001 f9f2 	bl	800249a <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 80010b6:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <UsageFault.isra.4+0x68>)

	return reason;
}
 80010b8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 80010ba:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80010bc:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80010c0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80010c4:	6293      	str	r3, [r2, #40]	; 0x28
}
 80010c6:	bd10      	pop	{r4, pc}
 80010c8:	e000ed00 	.word	0xe000ed00
 80010cc:	0800340c 	.word	0x0800340c
 80010d0:	08003425 	.word	0x08003425
 80010d4:	08003439 	.word	0x08003439
 80010d8:	08003454 	.word	0x08003454
 80010dc:	08003473 	.word	0x08003473
 80010e0:	08003499 	.word	0x08003499
 80010e4:	080034b4 	.word	0x080034b4

080010e8 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(NANO_ESF *esf, u32_t exc_return)
{
 80010e8:	b570      	push	{r4, r5, r6, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80010ea:	4d28      	ldr	r5, [pc, #160]	; (800118c <_Fault+0xa4>)
{
 80010ec:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80010ee:	686b      	ldr	r3, [r5, #4]
 80010f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
	switch (fault) {
 80010f4:	1ed1      	subs	r1, r2, #3
 80010f6:	2909      	cmp	r1, #9
 80010f8:	d83b      	bhi.n	8001172 <_Fault+0x8a>
 80010fa:	e8df f001 	tbb	[pc, r1]
 80010fe:	3405      	.short	0x3405
 8001100:	3a3a2936 	.word	0x3a3a2936
 8001104:	383a3a3a 	.word	0x383a3a3a
	PR_FAULT_INFO("***** HARD FAULT *****\n");
 8001108:	4821      	ldr	r0, [pc, #132]	; (8001190 <_Fault+0xa8>)
 800110a:	f001 f9c6 	bl	800249a <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800110e:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8001110:	f014 0402 	ands.w	r4, r4, #2
 8001114:	d004      	beq.n	8001120 <_Fault+0x38>
		PR_EXC("  Bus fault on vector table read\n");
 8001116:	481f      	ldr	r0, [pc, #124]	; (8001194 <_Fault+0xac>)
	PR_FAULT_INFO(
 8001118:	f001 f9bf 	bl	800249a <printk>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
 800111c:	2400      	movs	r4, #0
 800111e:	e01c      	b.n	800115a <_Fault+0x72>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8001120:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	d519      	bpl.n	800115a <_Fault+0x72>
		PR_EXC("  Fault escalation (see below)\n");
 8001126:	481c      	ldr	r0, [pc, #112]	; (8001198 <_Fault+0xb0>)
 8001128:	f001 f9b7 	bl	800249a <printk>
		if (SCB_MMFSR != 0) {
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <_Fault+0xb4>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b11b      	cbz	r3, 800113a <_Fault+0x52>
			reason = MpuFault(esf, 1);
 8001132:	2001      	movs	r0, #1
		reason = MpuFault(esf, 0);
 8001134:	f7ff fefa 	bl	8000f2c <MpuFault.isra.2>
 8001138:	e00c      	b.n	8001154 <_Fault+0x6c>
		} else if (SCB_BFSR != 0) {
 800113a:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <_Fault+0xb8>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b11b      	cbz	r3, 8001148 <_Fault+0x60>
			reason = BusFault(esf, 1);
 8001140:	2001      	movs	r0, #1
		reason = BusFault(esf, 0);
 8001142:	f7ff ff3d 	bl	8000fc0 <BusFault.isra.3>
 8001146:	e005      	b.n	8001154 <_Fault+0x6c>
		} else if (SCB_UFSR != 0) {
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <_Fault+0xbc>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	b29b      	uxth	r3, r3
 800114e:	b123      	cbz	r3, 800115a <_Fault+0x72>
			reason = UsageFault(esf);
 8001150:	f7ff ff86 	bl	8001060 <UsageFault.isra.4>
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = FaultHandle(esf, fault);

	if (reason == _NANO_ERR_RECOVERABLE) {
 8001154:	2806      	cmp	r0, #6
			reason = UsageFault(esf);
 8001156:	4604      	mov	r4, r0
	if (reason == _NANO_ERR_RECOVERABLE) {
 8001158:	d017      	beq.n	800118a <_Fault+0xa2>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_NanoFatalErrorHandler(reason, esf);
 800115a:	4631      	mov	r1, r6
 800115c:	4620      	mov	r0, r4
}
 800115e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_NanoFatalErrorHandler(reason, esf);
 8001162:	f000 b89b 	b.w	800129c <z_NanoFatalErrorHandler>
		reason = MpuFault(esf, 0);
 8001166:	2000      	movs	r0, #0
 8001168:	e7e4      	b.n	8001134 <_Fault+0x4c>
		reason = BusFault(esf, 0);
 800116a:	2000      	movs	r0, #0
 800116c:	e7e9      	b.n	8001142 <_Fault+0x5a>
	PR_FAULT_INFO(
 800116e:	480e      	ldr	r0, [pc, #56]	; (80011a8 <_Fault+0xc0>)
 8001170:	e7d2      	b.n	8001118 <_Fault+0x30>
	PR_FAULT_INFO("***** %s %d) *****\n",
 8001172:	f413 7ff8 	tst.w	r3, #496	; 0x1f0
 8001176:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <_Fault+0xc4>)
 8001178:	490d      	ldr	r1, [pc, #52]	; (80011b0 <_Fault+0xc8>)
 800117a:	f1a2 0210 	sub.w	r2, r2, #16
 800117e:	bf18      	it	ne
 8001180:	4619      	movne	r1, r3
 8001182:	480c      	ldr	r0, [pc, #48]	; (80011b4 <_Fault+0xcc>)
 8001184:	f001 f989 	bl	800249a <printk>
	if (reason == _NANO_ERR_RECOVERABLE) {
 8001188:	e7c8      	b.n	800111c <_Fault+0x34>
}
 800118a:	bd70      	pop	{r4, r5, r6, pc}
 800118c:	e000ed00 	.word	0xe000ed00
 8001190:	0800350e 	.word	0x0800350e
 8001194:	08003526 	.word	0x08003526
 8001198:	08003548 	.word	0x08003548
 800119c:	e000ed28 	.word	0xe000ed28
 80011a0:	e000ed29 	.word	0xe000ed29
 80011a4:	e000ed2a 	.word	0xe000ed2a
 80011a8:	08003568 	.word	0x08003568
 80011ac:	080034f5 	.word	0x080034f5
 80011b0:	080034e0 	.word	0x080034e0
 80011b4:	0800359f 	.word	0x0800359f

080011b8 <z_FaultInit>:
 */
void z_FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 80011b8:	4a02      	ldr	r2, [pc, #8]	; (80011c4 <z_FaultInit+0xc>)
 80011ba:	6953      	ldr	r3, [r2, #20]
 80011bc:	f043 0310 	orr.w	r3, r3, #16
 80011c0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <z_arch_irq_enable>:
 *
 * @return N/A
 */
void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 80011c8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	db08      	blt.n	80011e0 <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ce:	2201      	movs	r2, #1
 80011d0:	f000 001f 	and.w	r0, r0, #31
 80011d4:	095b      	lsrs	r3, r3, #5
 80011d6:	fa02 f000 	lsl.w	r0, r2, r0
 80011da:	4a02      	ldr	r2, [pc, #8]	; (80011e4 <z_arch_irq_enable+0x1c>)
 80011dc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000e100 	.word	0xe000e100

080011e8 <z_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 80011e8:	b243      	sxtb	r3, r0
	prio += _IRQ_PRIO_OFFSET;
 80011ea:	3101      	adds	r1, #1
  if ((int32_t)(IRQn) >= 0)
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	ea4f 1101 	mov.w	r1, r1, lsl #4
 80011f2:	b2c9      	uxtb	r1, r1
 80011f4:	db06      	blt.n	8001204 <z_irq_priority_set+0x1c>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80011fa:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80011fe:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 8001202:	4770      	bx	lr
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001204:	f000 000f 	and.w	r0, r0, #15
 8001208:	4b01      	ldr	r3, [pc, #4]	; (8001210 <z_irq_priority_set+0x28>)
 800120a:	5419      	strb	r1, [r3, r0]
}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000ed14 	.word	0xe000ed14

08001214 <z_new_thread>:

void z_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
 8001214:	b570      	push	{r4, r5, r6, lr}
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
 8001216:	188c      	adds	r4, r1, r2
{
 8001218:	461e      	mov	r6, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
 800121a:	2204      	movs	r2, #4
 800121c:	9b08      	ldr	r3, [sp, #32]
 800121e:	9907      	ldr	r1, [sp, #28]
 8001220:	4605      	mov	r5, r0
 8001222:	f001 fc9e 	bl	8002b62 <z_init_thread_base>
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
 8001226:	f1a4 0320 	sub.w	r3, r4, #32
#else
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
 800122a:	490b      	ldr	r1, [pc, #44]	; (8001258 <z_new_thread+0x44>)

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
 800122c:	2200      	movs	r2, #0
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
 800122e:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
 8001232:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
 8001236:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
 800123a:	6199      	str	r1, [r3, #24]

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
 800123c:	9904      	ldr	r1, [sp, #16]
	pInitCtx->basic.a1 = (u32_t)pEntry;
 800123e:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
 8001240:	6059      	str	r1, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
 8001242:	9905      	ldr	r1, [sp, #20]
 8001244:	6099      	str	r1, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
 8001246:	9906      	ldr	r1, [sp, #24]
 8001248:	60d9      	str	r1, [r3, #12]
	pInitCtx->basic.xpsr =
 800124a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800124e:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
 8001250:	64ab      	str	r3, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
 8001252:	65ea      	str	r2, [r5, #92]	; 0x5c

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8001254:	bd70      	pop	{r4, r5, r6, pc}
 8001256:	bf00      	nop
 8001258:	08002187 	.word	0x08002187

0800125c <z_CpuIdleInit>:
 *
 * void z_CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, z_CpuIdleInit)
	ldr r1, =_SCB_SCR
 800125c:	4901      	ldr	r1, [pc, #4]	; (8001264 <z_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
 800125e:	2210      	movs	r2, #16
	str r2, [r1]
 8001260:	600a      	str	r2, [r1, #0]
	bx lr
 8001262:	4770      	bx	lr
	ldr r1, =_SCB_SCR
 8001264:	e000ed10 	.word	0xe000ed10

08001268 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
 8001268:	4040      	eors	r0, r0
	msr BASEPRI, r0
 800126a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
 800126e:	bf30      	wfi

	bx lr
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop

08001274 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
 8001274:	4040      	eors	r0, r0
	msr BASEPRI, r0
 8001276:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE) && \
	!defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
 800127a:	f8df c01c 	ldr.w	ip, [pc, #28]	; 8001298 <__bus_fault+0x24>
	ldr ip, [ip]
 800127e:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
 8001282:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
 8001286:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
 8001288:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
 800128c:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
 8001290:	b501      	push	{r0, lr}
	bl _Fault
 8001292:	f7ff ff29 	bl	80010e8 <_Fault>

	pop {r0, pc}
 8001296:	bd01      	pop	{r0, pc}
	ldr ip, =_SCS_ICSR
 8001298:	e000ed04 	.word	0xe000ed04

0800129c <z_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void z_NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
 800129c:	b538      	push	{r3, r4, r5, lr}
 800129e:	4604      	mov	r4, r0
 80012a0:	460d      	mov	r5, r1
	const char *thread_name = k_thread_name_get(k_current_get());
#endif

	LOG_PANIC();

	switch (reason) {
 80012a2:	2805      	cmp	r0, #5
 80012a4:	d81a      	bhi.n	80012dc <z_NanoFatalErrorHandler+0x40>
 80012a6:	e8df f000 	tbb	[pc, r0]
 80012aa:	1903      	.short	0x1903
 80012ac:	17151319 	.word	0x17151319
	case _NANO_ERR_HW_EXCEPTION:
		printk("***** Hardware exception *****\n");
 80012b0:	480d      	ldr	r0, [pc, #52]	; (80012e8 <z_NanoFatalErrorHandler+0x4c>)
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
 80012b2:	f001 f8f2 	bl	800249a <printk>

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
 80012b6:	f000 fd4f 	bl	8001d58 <z_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p"
 80012ba:	69aa      	ldr	r2, [r5, #24]
 80012bc:	4601      	mov	r1, r0
 80012be:	480b      	ldr	r0, [pc, #44]	; (80012ec <z_NanoFatalErrorHandler+0x50>)
 80012c0:	f001 f8eb 	bl	800249a <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	z_SysFatalErrorHandler(reason, pEsf);
 80012c4:	4629      	mov	r1, r5
 80012c6:	4620      	mov	r0, r4
}
 80012c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_SysFatalErrorHandler(reason, pEsf);
 80012cc:	f000 b818 	b.w	8001300 <z_SysFatalErrorHandler>
		printk("**** Kernel Allocation Failure! ****\n");
 80012d0:	4807      	ldr	r0, [pc, #28]	; (80012f0 <z_NanoFatalErrorHandler+0x54>)
 80012d2:	e7ee      	b.n	80012b2 <z_NanoFatalErrorHandler+0x16>
		printk("***** Kernel OOPS! *****\n");
 80012d4:	4807      	ldr	r0, [pc, #28]	; (80012f4 <z_NanoFatalErrorHandler+0x58>)
 80012d6:	e7ec      	b.n	80012b2 <z_NanoFatalErrorHandler+0x16>
		printk("***** Kernel Panic! *****\n");
 80012d8:	4807      	ldr	r0, [pc, #28]	; (80012f8 <z_NanoFatalErrorHandler+0x5c>)
 80012da:	e7ea      	b.n	80012b2 <z_NanoFatalErrorHandler+0x16>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
 80012dc:	4601      	mov	r1, r0
 80012de:	4807      	ldr	r0, [pc, #28]	; (80012fc <z_NanoFatalErrorHandler+0x60>)
 80012e0:	f001 f8db 	bl	800249a <printk>
		break;
 80012e4:	e7e7      	b.n	80012b6 <z_NanoFatalErrorHandler+0x1a>
 80012e6:	bf00      	nop
 80012e8:	080035b3 	.word	0x080035b3
 80012ec:	08003651 	.word	0x08003651
 80012f0:	080035d3 	.word	0x080035d3
 80012f4:	080035f9 	.word	0x080035f9
 80012f8:	08003613 	.word	0x08003613
 80012fc:	0800362e 	.word	0x0800362e

08001300 <z_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
 8001300:	2805      	cmp	r0, #5
{
 8001302:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
 8001304:	d00c      	beq.n	8001320 <z_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || z_is_thread_essential()) {
 8001306:	f000 fd2d 	bl	8001d64 <k_is_in_isr>
 800130a:	b160      	cbz	r0, 8001326 <z_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
 800130c:	f000 fd2a 	bl	8001d64 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
 8001310:	490c      	ldr	r1, [pc, #48]	; (8001344 <z_SysFatalErrorHandler+0x44>)
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <z_SysFatalErrorHandler+0x48>)
 8001314:	2800      	cmp	r0, #0
 8001316:	bf08      	it	eq
 8001318:	4619      	moveq	r1, r3
 800131a:	480c      	ldr	r0, [pc, #48]	; (800134c <z_SysFatalErrorHandler+0x4c>)
 800131c:	f001 f8bd 	bl	800249a <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
 8001320:	f7ff ffa2 	bl	8001268 <k_cpu_idle>
 8001324:	e7fc      	b.n	8001320 <z_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || z_is_thread_essential()) {
 8001326:	f000 fd2d 	bl	8001d84 <z_is_thread_essential>
 800132a:	2800      	cmp	r0, #0
 800132c:	d1ee      	bne.n	800130c <z_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
 800132e:	4c08      	ldr	r4, [pc, #32]	; (8001350 <z_SysFatalErrorHandler+0x50>)
 8001330:	4808      	ldr	r0, [pc, #32]	; (8001354 <z_SysFatalErrorHandler+0x54>)
 8001332:	68a1      	ldr	r1, [r4, #8]
 8001334:	f001 f8b1 	bl	800249a <printk>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
 8001338:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
 800133a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800133e:	f000 b80b 	b.w	8001358 <z_impl_k_thread_abort>
 8001342:	bf00      	nop
 8001344:	0800368d 	.word	0x0800368d
 8001348:	08003691 	.word	0x08003691
 800134c:	080036a2 	.word	0x080036a2
 8001350:	20020234 	.word	0x20020234
 8001354:	080036c2 	.word	0x080036c2

08001358 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
 8001358:	b538      	push	{r3, r4, r5, lr}
 800135a:	4605      	mov	r5, r0
	__asm__ volatile(
 800135c:	f04f 0310 	mov.w	r3, #16
 8001360:	f3ef 8411 	mrs	r4, BASEPRI
 8001364:	f383 8811 	msr	BASEPRI, r3
 8001368:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
 800136c:	f001 fbda 	bl	8002b24 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <z_impl_k_thread_abort+0x44>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	42ab      	cmp	r3, r5
 8001376:	d10b      	bne.n	8001390 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <z_impl_k_thread_abort+0x48>)
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001380:	b912      	cbnz	r2, 8001388 <z_impl_k_thread_abort+0x30>
#ifndef CONFIG_ARM
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_out();
#endif
#endif
	ret = __swap(key);
 8001382:	4620      	mov	r0, r4
 8001384:	f7ff fd82 	bl	8000e8c <__swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800138e:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
 8001390:	4620      	mov	r0, r4
}
 8001392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
 8001396:	f001 bb58 	b.w	8002a4a <z_reschedule_irqlock>
 800139a:	bf00      	nop
 800139c:	20020234 	.word	0x20020234
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {r0,lr}		/* r0, lr are now the first items on the stack */
 80013a4:	b501      	push	{r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
#endif

	mrs r0, IPSR	/* get exception number */
 80013a6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 80013aa:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 80013ae:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
 80013b2:	4904      	ldr	r1, [pc, #16]	; (80013c4 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 80013b4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 80013b6:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
 80013b8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 80013ba:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * _IntExit() */
	ldr r0, =_IntExit
 80013be:	4802      	ldr	r0, [pc, #8]	; (80013c8 <_isr_wrapper+0x24>)
	bx r0
 80013c0:	4700      	bx	r0
 80013c2:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 80013c4:	08002c2c 	.word	0x08002c2c
	ldr r0, =_IntExit
 80013c8:	08000e59 	.word	0x08000e59

080013cc <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80013cc:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80013ce:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
 80013d2:	4808      	ldr	r0, [pc, #32]	; (80013f4 <__reset+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
 80013d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 80013d8:	1840      	adds	r0, r0, r1
    msr PSP, r0
 80013da:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 80013de:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 80013e2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 80013e4:	4308      	orrs	r0, r1
    msr CONTROL, r0
 80013e6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 80013ea:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
 80013ee:	f000 f807 	bl	8001400 <_PrepC>
 80013f2:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
 80013f4:	200207b0 	.word	0x200207b0

080013f8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 80013f8:	bf30      	wfi
    b z_SysNmiOnReset
 80013fa:	f7ff bffd 	b.w	80013f8 <z_SysNmiOnReset>
 80013fe:	bf00      	nop

08001400 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
 8001400:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <_PrepC+0x24>)
 8001404:	4a08      	ldr	r2, [pc, #32]	; (8001428 <_PrepC+0x28>)
 8001406:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800140a:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 800140c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001410:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
 8001414:	f000 f9da 	bl	80017cc <z_bss_zero>
	z_data_copy();
 8001418:	f000 f9e2 	bl	80017e0 <z_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0U;
#endif
	z_IntLibInit();
 800141c:	f7ff fd2a 	bl	8000e74 <z_IntLibInit>
	z_cstart();
 8001420:	f000 fa10 	bl	8001844 <z_cstart>
 8001424:	08000000 	.word	0x08000000
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 800142c:	4b01      	ldr	r3, [pc, #4]	; (8001434 <__stdout_hook_install+0x8>)
 800142e:	6018      	str	r0, [r3, #0]
}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20020fcc 	.word	0x20020fcc

08001438 <pinmux_stm32_init>:
	{STM32_PIN_PG14, STM32F7_PINMUX_FUNC_PG14_ETH},
#endif /* CONFIG_ETH_STM32_HAL */
};

static int pinmux_stm32_init(struct device *port)
{
 8001438:	b508      	push	{r3, lr}
	ARG_UNUSED(port);

	stm32_setup_pins(pinconf, ARRAY_SIZE(pinconf));
 800143a:	2104      	movs	r1, #4
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <pinmux_stm32_init+0x10>)
 800143e:	f7ff fae9 	bl	8000a14 <stm32_setup_pins>

	return 0;
}
 8001442:	2000      	movs	r0, #0
 8001444:	bd08      	pop	{r3, pc}
 8001446:	bf00      	nop
 8001448:	080030c0 	.word	0x080030c0

0800144c <gpio_stm32_init>:
 *
 * @return 0
 */
static int gpio_stm32_init(struct device *device)
{
	const struct gpio_stm32_config *cfg = device->config->config_info;
 800144c:	6803      	ldr	r3, [r0, #0]
 800144e:	4807      	ldr	r0, [pc, #28]	; (800146c <gpio_stm32_init+0x20>)
{
 8001450:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = device->config->config_info;
 8001452:	689c      	ldr	r4, [r3, #8]
 8001454:	f000 f994 	bl	8001780 <z_impl_device_get_binding>
 8001458:	6843      	ldr	r3, [r0, #4]
 800145a:	f104 0108 	add.w	r1, r4, #8
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4798      	blx	r3

	/* enable clock for subsystem */
	struct device *clk =
		device_get_binding(STM32_CLOCK_CONTROL_NAME);

	if (clock_control_on(clk,
 8001462:	2800      	cmp	r0, #0
		}
	}
#endif  /* PWR_CR2_IOSV */

	return 0;
}
 8001464:	bf18      	it	ne
 8001466:	f06f 0004 	mvnne.w	r0, #4
 800146a:	bd10      	pop	{r4, pc}
 800146c:	0800327c 	.word	0x0800327c

08001470 <gpio_stm32_enable_int>:
{
 8001470:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001472:	4605      	mov	r5, r0
 8001474:	481c      	ldr	r0, [pc, #112]	; (80014e8 <gpio_stm32_enable_int+0x78>)
 8001476:	460c      	mov	r4, r1
 8001478:	f000 f982 	bl	8001780 <z_impl_device_get_binding>
	struct stm32_pclken pclken = {
 800147c:	491b      	ldr	r1, [pc, #108]	; (80014ec <gpio_stm32_enable_int+0x7c>)
 800147e:	4602      	mov	r2, r0
 8001480:	466b      	mov	r3, sp
 8001482:	c903      	ldmia	r1, {r0, r1}
 8001484:	e883 0003 	stmia.w	r3, {r0, r1}
 8001488:	6851      	ldr	r1, [r2, #4]
 800148a:	4610      	mov	r0, r2
 800148c:	680e      	ldr	r6, [r1, #0]
 800148e:	4619      	mov	r1, r3
 8001490:	47b0      	blx	r6
	if (pin > 15) {
 8001492:	2c0f      	cmp	r4, #15
 8001494:	dc25      	bgt.n	80014e2 <gpio_stm32_enable_int+0x72>
	line = (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8001496:	4263      	negs	r3, r4
 8001498:	f004 0103 	and.w	r1, r4, #3
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	bf58      	it	pl
 80014a2:	4259      	negpl	r1, r3
 80014a4:	2c00      	cmp	r4, #0
 80014a6:	f101 0104 	add.w	r1, r1, #4
 80014aa:	bfb8      	it	lt
 80014ac:	3403      	addlt	r4, #3
 80014ae:	008b      	lsls	r3, r1, #2
 80014b0:	210f      	movs	r1, #15
 80014b2:	4099      	lsls	r1, r3
 80014b4:	ea41 01a4 	orr.w	r1, r1, r4, asr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80014b8:	b2cb      	uxtb	r3, r1
 80014ba:	0c09      	lsrs	r1, r1, #16
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80014c2:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	ea22 0201 	bic.w	r2, r2, r1
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014cc:	fa91 f1a1 	rbit	r1, r1
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80014d0:	fab1 f181 	clz	r1, r1
	return 0;
 80014d4:	2000      	movs	r0, #0
 80014d6:	fa05 f101 	lsl.w	r1, r5, r1
 80014da:	4311      	orrs	r1, r2
 80014dc:	6099      	str	r1, [r3, #8]
}
 80014de:	b002      	add	sp, #8
 80014e0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
 80014e2:	f06f 0015 	mvn.w	r0, #21
 80014e6:	e7fa      	b.n	80014de <gpio_stm32_enable_int+0x6e>
 80014e8:	0800327c 	.word	0x0800327c
 80014ec:	0800308c 	.word	0x0800308c

080014f0 <gpio_stm32_config>:
{
 80014f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80014f4:	461d      	mov	r5, r3
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 80014f6:	6803      	ldr	r3, [r0, #0]
{
 80014f8:	4680      	mov	r8, r0
 80014fa:	4616      	mov	r6, r2
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 80014fc:	689f      	ldr	r7, [r3, #8]
	if ((flags & GPIO_POL_MASK) == GPIO_POL_INV) {
 80014fe:	f005 0380 	and.w	r3, r5, #128	; 0x80
 8001502:	430b      	orrs	r3, r1
 8001504:	d005      	beq.n	8001512 <gpio_stm32_config+0x22>
		return -ENOTSUP;
 8001506:	f06f 0422 	mvn.w	r4, #34	; 0x22
}
 800150a:	4620      	mov	r0, r4
 800150c:	b002      	add	sp, #8
 800150e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	map_res = gpio_stm32_flags_to_conf(flags, &pincfg);
 8001512:	a901      	add	r1, sp, #4
 8001514:	4628      	mov	r0, r5
 8001516:	f001 f938 	bl	800278a <gpio_stm32_flags_to_conf>
	if (map_res != 0) {
 800151a:	4604      	mov	r4, r0
 800151c:	2800      	cmp	r0, #0
 800151e:	d1f4      	bne.n	800150a <gpio_stm32_config+0x1a>
	if (gpio_stm32_configure(cfg->base, pin, pincfg, 0) != 0) {
 8001520:	4603      	mov	r3, r0
 8001522:	9a01      	ldr	r2, [sp, #4]
 8001524:	4631      	mov	r1, r6
 8001526:	6838      	ldr	r0, [r7, #0]
 8001528:	f001 f94c 	bl	80027c4 <gpio_stm32_configure>
 800152c:	4604      	mov	r4, r0
 800152e:	bb10      	cbnz	r0, 8001576 <gpio_stm32_config+0x86>
	if (IS_ENABLED(CONFIG_EXTI_STM32) && (flags & GPIO_INT) != 0) {
 8001530:	07a9      	lsls	r1, r5, #30
 8001532:	d5ea      	bpl.n	800150a <gpio_stm32_config+0x1a>
		if (stm32_exti_set_callback(pin, cfg->port,
 8001534:	4643      	mov	r3, r8
 8001536:	4a13      	ldr	r2, [pc, #76]	; (8001584 <gpio_stm32_config+0x94>)
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4630      	mov	r0, r6
 800153c:	f7ff f960 	bl	8000800 <stm32_exti_set_callback>
 8001540:	b9e0      	cbnz	r0, 800157c <gpio_stm32_config+0x8c>
		gpio_stm32_enable_int(cfg->port, pin);
 8001542:	4631      	mov	r1, r6
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff93 	bl	8001470 <gpio_stm32_enable_int>
		if ((flags & GPIO_INT_EDGE) != 0) {
 800154a:	06aa      	lsls	r2, r5, #26
 800154c:	d5db      	bpl.n	8001506 <gpio_stm32_config+0x16>
			if ((flags & GPIO_INT_DOUBLE_EDGE) != 0) {
 800154e:	066b      	lsls	r3, r5, #25
 8001550:	d40f      	bmi.n	8001572 <gpio_stm32_config+0x82>
				edge = STM32_EXTI_TRIG_FALLING;
 8001552:	f015 0f04 	tst.w	r5, #4
 8001556:	bf14      	ite	ne
 8001558:	2101      	movne	r1, #1
 800155a:	2102      	moveq	r1, #2
			stm32_exti_trigger(pin, edge);
 800155c:	4630      	mov	r0, r6
 800155e:	f7ff f937 	bl	80007d0 <stm32_exti_trigger>
		if (stm32_exti_enable(pin) != 0) {
 8001562:	4630      	mov	r0, r6
 8001564:	f7ff f91a 	bl	800079c <stm32_exti_enable>
			return -ENOSYS;
 8001568:	2800      	cmp	r0, #0
 800156a:	bf18      	it	ne
 800156c:	f06f 0446 	mvnne.w	r4, #70	; 0x46
 8001570:	e7cb      	b.n	800150a <gpio_stm32_config+0x1a>
				edge = STM32_EXTI_TRIG_RISING |
 8001572:	2103      	movs	r1, #3
 8001574:	e7f2      	b.n	800155c <gpio_stm32_config+0x6c>
		return -EIO;
 8001576:	f06f 0404 	mvn.w	r4, #4
 800157a:	e7c6      	b.n	800150a <gpio_stm32_config+0x1a>
			return -EBUSY;
 800157c:	f06f 040f 	mvn.w	r4, #15
 8001580:	e7c3      	b.n	800150a <gpio_stm32_config+0x1a>
 8001582:	bf00      	nop
 8001584:	0800268f 	.word	0x0800268f

08001588 <uart_stm32_configure>:
	return UART_CFG_PARITY_NONE;
}

static int uart_stm32_configure(struct device *dev,
				const struct uart_config *cfg)
{
 8001588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct uart_stm32_data *data = DEV_DATA(dev);
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800158c:	6803      	ldr	r3, [r0, #0]
{
 800158e:	460d      	mov	r5, r1
	const u32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8001590:	790a      	ldrb	r2, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001592:	689b      	ldr	r3, [r3, #8]
	switch (parity) {
 8001594:	2a01      	cmp	r2, #1
	struct uart_stm32_data *data = DEV_DATA(dev);
 8001596:	6886      	ldr	r6, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001598:	681c      	ldr	r4, [r3, #0]
	switch (parity) {
 800159a:	f000 8089 	beq.w	80016b0 <uart_stm32_configure+0x128>
		return LL_USART_PARITY_NONE;
 800159e:	2a02      	cmp	r2, #2
 80015a0:	bf0c      	ite	eq
 80015a2:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 80015a6:	2100      	movne	r1, #0
	const u32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 80015a8:	f895 9005 	ldrb.w	r9, [r5, #5]
	const u32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits);
 80015ac:	f895 8006 	ldrb.w	r8, [r5, #6]
 80015b0:	f1b9 0f02 	cmp.w	r9, #2
 80015b4:	bf96      	itet	ls
 80015b6:	4b43      	ldrls	r3, [pc, #268]	; (80016c4 <uart_stm32_configure+0x13c>)
	const u32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 80015b8:	f44f 5e00 	movhi.w	lr, #8192	; 0x2000
 80015bc:	f833 e019 	ldrhls.w	lr, [r3, r9, lsl #1]
	switch (db) {
 80015c0:	f1b8 0f02 	cmp.w	r8, #2
 80015c4:	d077      	beq.n	80016b6 <uart_stm32_configure+0x12e>
		return LL_USART_DATAWIDTH_8B;
 80015c6:	f1b8 0f04 	cmp.w	r8, #4
 80015ca:	bf0c      	ite	eq
 80015cc:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 80015d0:	2300      	movne	r3, #0
	const u32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 80015d2:	79ef      	ldrb	r7, [r5, #7]

	/* Hardware doesn't support mark or space parity */
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 80015d4:	3a03      	subs	r2, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 80015d6:	2f01      	cmp	r7, #1
 80015d8:	bf14      	ite	ne
 80015da:	f04f 0c00 	movne.w	ip, #0
 80015de:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 80015e2:	2a01      	cmp	r2, #1
 80015e4:	d96a      	bls.n	80016bc <uart_stm32_configure+0x134>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    UART_CFG_STOP_BITS_0_5 == cfg->stop_bits) {
		return -ENOTSUP;
	}
#else
	if (UART_CFG_STOP_BITS_0_5 == cfg->stop_bits) {
 80015e6:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 80015ea:	d067      	beq.n	80016bc <uart_stm32_configure+0x134>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((UART_CFG_DATA_BITS_5 == cfg->data_bits) ||
 80015ec:	f1b8 0f01 	cmp.w	r8, #1
 80015f0:	d964      	bls.n	80016bc <uart_stm32_configure+0x134>
		) {
		return -ENOTSUP;
	}

	/* Driver supports only RTS CTS flow control */
	if (UART_CFG_FLOW_CTRL_NONE != cfg->flow_ctrl) {
 80015f2:	b307      	cbz	r7, 8001636 <uart_stm32_configure+0xae>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 80015f4:	4a34      	ldr	r2, [pc, #208]	; (80016c8 <uart_stm32_configure+0x140>)
 80015f6:	4294      	cmp	r4, r2
 80015f8:	d01b      	beq.n	8001632 <uart_stm32_configure+0xaa>
 80015fa:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 80015fe:	4294      	cmp	r4, r2
 8001600:	d017      	beq.n	8001632 <uart_stm32_configure+0xaa>
 8001602:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001606:	4294      	cmp	r4, r2
 8001608:	d013      	beq.n	8001632 <uart_stm32_configure+0xaa>
 800160a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800160e:	4294      	cmp	r4, r2
 8001610:	d00f      	beq.n	8001632 <uart_stm32_configure+0xaa>
 8001612:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001616:	4294      	cmp	r4, r2
 8001618:	d00b      	beq.n	8001632 <uart_stm32_configure+0xaa>
 800161a:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 800161e:	4294      	cmp	r4, r2
 8001620:	d007      	beq.n	8001632 <uart_stm32_configure+0xaa>
 8001622:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 8001626:	4294      	cmp	r4, r2
 8001628:	d003      	beq.n	8001632 <uart_stm32_configure+0xaa>
 800162a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800162e:	4294      	cmp	r4, r2
 8001630:	d144      	bne.n	80016bc <uart_stm32_configure+0x134>
 8001632:	2f01      	cmp	r7, #1
 8001634:	d142      	bne.n	80016bc <uart_stm32_configure+0x134>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001636:	6822      	ldr	r2, [r4, #0]
 8001638:	f022 0201 	bic.w	r2, r2, #1
 800163c:	6022      	str	r2, [r4, #0]
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  */
__STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800163e:	6822      	ldr	r2, [r4, #0]
 8001640:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
		}
	}

	LL_USART_Disable(UartInstance);

	if (parity != uart_stm32_get_parity(dev)) {
 8001644:	4291      	cmp	r1, r2
 8001646:	d004      	beq.n	8001652 <uart_stm32_configure+0xca>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8001648:	6827      	ldr	r7, [r4, #0]
 800164a:	f427 67c0 	bic.w	r7, r7, #1536	; 0x600
 800164e:	430f      	orrs	r7, r1
 8001650:	6027      	str	r7, [r4, #0]
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  */
__STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8001652:	6862      	ldr	r2, [r4, #4]
 8001654:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8001658:	4596      	cmp	lr, r2
 800165a:	d005      	beq.n	8001668 <uart_stm32_configure+0xe0>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800165c:	6861      	ldr	r1, [r4, #4]
 800165e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001662:	ea41 010e 	orr.w	r1, r1, lr
 8001666:	6061      	str	r1, [r4, #4]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8001668:	6822      	ldr	r2, [r4, #0]
 800166a:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
		uart_stm32_set_stopbits(dev, stopbits);
	}

	if (databits != uart_stm32_get_databits(dev)) {
 800166e:	4293      	cmp	r3, r2
 8001670:	d004      	beq.n	800167c <uart_stm32_configure+0xf4>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8001672:	6822      	ldr	r2, [r4, #0]
 8001674:	f022 2210 	bic.w	r2, r2, #268439552	; 0x10001000
 8001678:	431a      	orrs	r2, r3
 800167a:	6022      	str	r2, [r4, #0]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800167c:	68a3      	ldr	r3, [r4, #8]
 800167e:	f403 7340 	and.w	r3, r3, #768	; 0x300
		uart_stm32_set_databits(dev, databits);
	}

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8001682:	459c      	cmp	ip, r3
 8001684:	d005      	beq.n	8001692 <uart_stm32_configure+0x10a>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001686:	68a3      	ldr	r3, [r4, #8]
 8001688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800168c:	ea43 030c 	orr.w	r3, r3, ip
 8001690:	60a3      	str	r3, [r4, #8]
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

	if (cfg->baudrate != data->baud_rate) {
 8001692:	6829      	ldr	r1, [r5, #0]
 8001694:	6833      	ldr	r3, [r6, #0]
 8001696:	4299      	cmp	r1, r3
 8001698:	d003      	beq.n	80016a2 <uart_stm32_configure+0x11a>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 800169a:	f001 f918 	bl	80028ce <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 800169e:	682b      	ldr	r3, [r5, #0]
 80016a0:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80016a2:	6823      	ldr	r3, [r4, #0]
	}

	LL_USART_Enable(UartInstance);
	return 0;
 80016a4:	2000      	movs	r0, #0
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6023      	str	r3, [r4, #0]
};
 80016ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return LL_USART_PARITY_ODD;
 80016b0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80016b4:	e778      	b.n	80015a8 <uart_stm32_configure+0x20>
		return LL_USART_DATAWIDTH_7B;
 80016b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80016ba:	e78a      	b.n	80015d2 <uart_stm32_configure+0x4a>
		return -ENOTSUP;
 80016bc:	f06f 0022 	mvn.w	r0, #34	; 0x22
 80016c0:	e7f4      	b.n	80016ac <uart_stm32_configure+0x124>
 80016c2:	bf00      	nop
 80016c4:	08003204 	.word	0x08003204
 80016c8:	40011000 	.word	0x40011000

080016cc <uart_stm32_init>:
 *
 * @return 0
 */
static int uart_stm32_init(struct device *dev)
{
	const struct uart_stm32_config *config = DEV_CFG(dev);
 80016cc:	6803      	ldr	r3, [r0, #0]
{
 80016ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 80016d2:	f8d3 8008 	ldr.w	r8, [r3, #8]
{
 80016d6:	4605      	mov	r5, r0
	struct uart_stm32_data *data = DEV_DATA(dev);
 80016d8:	6887      	ldr	r7, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80016da:	4646      	mov	r6, r8
 80016dc:	481c      	ldr	r0, [pc, #112]	; (8001750 <uart_stm32_init+0x84>)
 80016de:	f856 4b08 	ldr.w	r4, [r6], #8
 80016e2:	f000 f84d 	bl	8001780 <z_impl_device_get_binding>
 80016e6:	6843      	ldr	r3, [r0, #4]
 80016e8:	4631      	mov	r1, r6
	data->clock = clk;
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4798      	blx	r3

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 80016f0:	4606      	mov	r6, r0
 80016f2:	bb48      	cbnz	r0, 8001748 <uart_stm32_init+0x7c>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80016f4:	6823      	ldr	r3, [r4, #0]
 80016f6:	f023 0301 	bic.w	r3, r3, #1
 80016fa:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 80016fc:	6823      	ldr	r3, [r4, #0]
 80016fe:	f043 030c 	orr.w	r3, r3, #12
 8001702:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8001704:	6823      	ldr	r3, [r4, #0]
 8001706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800170a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800170e:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001710:	6863      	ldr	r3, [r4, #4]
 8001712:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001716:	6063      	str	r3, [r4, #4]
	LL_USART_ConfigCharacter(UartInstance,
				 LL_USART_DATAWIDTH_8B,
				 LL_USART_PARITY_NONE,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 8001718:	f898 3010 	ldrb.w	r3, [r8, #16]
 800171c:	b133      	cbz	r3, 800172c <uart_stm32_init+0x60>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800171e:	682b      	ldr	r3, [r5, #0]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001724:	6893      	ldr	r3, [r2, #8]
 8001726:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800172a:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 800172c:	6839      	ldr	r1, [r7, #0]
 800172e:	4628      	mov	r0, r5
 8001730:	f001 f8cd 	bl	80028ce <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001734:	6823      	ldr	r3, [r4, #0]
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6023      	str	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800173c:	69e3      	ldr	r3, [r4, #28]
 800173e:	029b      	lsls	r3, r3, #10
 8001740:	d5fc      	bpl.n	800173c <uart_stm32_init+0x70>

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	config->uconf.irq_config_func(dev);
#endif
	return 0;
}
 8001742:	4630      	mov	r0, r6
 8001744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
 8001748:	f06f 0604 	mvn.w	r6, #4
 800174c:	e7f9      	b.n	8001742 <uart_stm32_init+0x76>
 800174e:	bf00      	nop
 8001750:	0800327c 	.word	0x0800327c

08001754 <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <z_sys_device_do_config_level+0x28>)
{
 8001756:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
 8001758:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800175c:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
 800175e:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
 8001760:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8001764:	42a5      	cmp	r5, r4
 8001766:	d800      	bhi.n	800176a <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
 8001768:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
 800176a:	6823      	ldr	r3, [r4, #0]
 800176c:	4620      	mov	r0, r4
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	4798      	blx	r3
		if (retval != 0) {
 8001772:	b100      	cbz	r0, 8001776 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
 8001774:	6066      	str	r6, [r4, #4]
								info++) {
 8001776:	340c      	adds	r4, #12
 8001778:	e7f4      	b.n	8001764 <z_sys_device_do_config_level+0x10>
 800177a:	bf00      	nop
 800177c:	080031e8 	.word	0x080031e8

08001780 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
 8001780:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <z_impl_device_get_binding+0x44>)
{
 8001782:	b570      	push	{r4, r5, r6, lr}
 8001784:	4605      	mov	r5, r0
	for (info = __device_init_start; info != __device_init_end; info++) {
 8001786:	4c10      	ldr	r4, [pc, #64]	; (80017c8 <z_impl_device_get_binding+0x48>)
 8001788:	461e      	mov	r6, r3
 800178a:	429c      	cmp	r4, r3
 800178c:	d104      	bne.n	8001798 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
 800178e:	4c0e      	ldr	r4, [pc, #56]	; (80017c8 <z_impl_device_get_binding+0x48>)
 8001790:	42b4      	cmp	r4, r6
 8001792:	d109      	bne.n	80017a8 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
 8001794:	2400      	movs	r4, #0
 8001796:	e012      	b.n	80017be <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
 8001798:	6862      	ldr	r2, [r4, #4]
 800179a:	b11a      	cbz	r2, 80017a4 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
 800179c:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	42aa      	cmp	r2, r5
 80017a2:	d00c      	beq.n	80017be <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
 80017a4:	340c      	adds	r4, #12
 80017a6:	e7f0      	b.n	800178a <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
 80017a8:	6863      	ldr	r3, [r4, #4]
 80017aa:	b90b      	cbnz	r3, 80017b0 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
 80017ac:	340c      	adds	r4, #12
 80017ae:	e7ef      	b.n	8001790 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
 80017b0:	6823      	ldr	r3, [r4, #0]
 80017b2:	4628      	mov	r0, r5
 80017b4:	6819      	ldr	r1, [r3, #0]
 80017b6:	f000 ff0f 	bl	80025d8 <strcmp>
 80017ba:	2800      	cmp	r0, #0
 80017bc:	d1f6      	bne.n	80017ac <z_impl_device_get_binding+0x2c>
}
 80017be:	4620      	mov	r0, r4
 80017c0:	bd70      	pop	{r4, r5, r6, pc}
 80017c2:	bf00      	nop
 80017c4:	200210d8 	.word	0x200210d8
 80017c8:	20020fe8 	.word	0x20020fe8

080017cc <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <z_bss_zero+0xc>)
 80017ce:	2100      	movs	r1, #0
 80017d0:	4a02      	ldr	r2, [pc, #8]	; (80017dc <z_bss_zero+0x10>)
 80017d2:	1a12      	subs	r2, r2, r0
 80017d4:	f000 bf36 	b.w	8002644 <memset>
 80017d8:	20020000 	.word	0x20020000
 80017dc:	20020270 	.word	0x20020270

080017e0 <z_data_copy>:
 * @return N/A
 */
void z_data_copy(void)
{
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
 80017e0:	4806      	ldr	r0, [pc, #24]	; (80017fc <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 80017e2:	4a07      	ldr	r2, [pc, #28]	; (8001800 <z_data_copy+0x20>)
 80017e4:	4907      	ldr	r1, [pc, #28]	; (8001804 <z_data_copy+0x24>)
 80017e6:	1a12      	subs	r2, r2, r0
{
 80017e8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 80017ea:	f000 ff01 	bl	80025f0 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
 80017ee:	4a06      	ldr	r2, [pc, #24]	; (8001808 <z_data_copy+0x28>)
 80017f0:	4906      	ldr	r1, [pc, #24]	; (800180c <z_data_copy+0x2c>)
 80017f2:	4807      	ldr	r0, [pc, #28]	; (8001810 <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 80017f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
 80017f8:	f000 befa 	b.w	80025f0 <memcpy>
 80017fc:	20020fb0 	.word	0x20020fb0
 8001800:	200210ec 	.word	0x200210ec
 8001804:	0800377c 	.word	0x0800377c
 8001808:	00000000 	.word	0x00000000
 800180c:	0800377c 	.word	0x0800377c
 8001810:	20020000 	.word	0x20020000

08001814 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 8001814:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8001816:	2002      	movs	r0, #2
 8001818:	f7ff ff9c 	bl	8001754 <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
 800181c:	4807      	ldr	r0, [pc, #28]	; (800183c <bg_thread_main+0x28>)
 800181e:	f000 fe3c 	bl	800249a <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
 8001822:	2003      	movs	r0, #3
 8001824:	f7ff ff96 	bl	8001754 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
 8001828:	f000 faf0 	bl	8001e0c <z_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
 800182c:	f7fe fe64 	bl	80004f8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
 8001830:	4a03      	ldr	r2, [pc, #12]	; (8001840 <bg_thread_main+0x2c>)
 8001832:	7b13      	ldrb	r3, [r2, #12]
 8001834:	f023 0301 	bic.w	r3, r3, #1
 8001838:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 800183a:	bd08      	pop	{r3, pc}
 800183c:	0800372a 	.word	0x0800372a
 8001840:	200201d0 	.word	0x200201d0

08001844 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
 8001844:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_InterruptStackSetup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
 8001846:	4b3a      	ldr	r3, [pc, #232]	; (8001930 <z_cstart+0xec>)
 8001848:	b0a0      	sub	sp, #128	; 0x80
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800184a:	f383 8808 	msr	MSP, r3
 800184e:	4d39      	ldr	r5, [pc, #228]	; (8001934 <z_cstart+0xf0>)
 8001850:	2400      	movs	r4, #0
 8001852:	23f0      	movs	r3, #240	; 0xf0
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
 8001854:	4e38      	ldr	r6, [pc, #224]	; (8001938 <z_cstart+0xf4>)
	struct k_thread dummy_thread = {
 8001856:	2701      	movs	r7, #1
 8001858:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 800185c:	77ec      	strb	r4, [r5, #31]
 800185e:	762c      	strb	r4, [r5, #24]
 8001860:	766c      	strb	r4, [r5, #25]
 8001862:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8001864:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001866:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800186a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void kernel_arch_init(void)
{
	z_InterruptStackSetup();
	z_ExcSetup();
	z_FaultInit();
 800186c:	f7ff fca4 	bl	80011b8 <z_FaultInit>
	z_CpuIdleInit();
 8001870:	f7ff fcf4 	bl	800125c <z_CpuIdleInit>
static ALWAYS_INLINE void z_clearfaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8001874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001878:	4621      	mov	r1, r4
 800187a:	2264      	movs	r2, #100	; 0x64
 800187c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 800187e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001880:	ab07      	add	r3, sp, #28
	_kernel.ready_q.cache = _main_thread;
 8001882:	4d2e      	ldr	r5, [pc, #184]	; (800193c <z_cstart+0xf8>)
	struct k_thread dummy_thread = {
 8001884:	4618      	mov	r0, r3
 8001886:	f000 fedd 	bl	8002644 <memset>
	_current = &dummy_thread;
 800188a:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 800188c:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
 800188e:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8001892:	f7ff ff5f 	bl	8001754 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8001896:	4638      	mov	r0, r7
 8001898:	f7ff ff5c 	bl	8001754 <z_sys_device_do_config_level>
	z_sched_init();
 800189c:	f000 fa06 	bl	8001cac <z_sched_init>
	z_setup_new_thread(_main_thread, _main_stack,
 80018a0:	4b27      	ldr	r3, [pc, #156]	; (8001940 <z_cstart+0xfc>)
	_kernel.ready_q.cache = _main_thread;
 80018a2:	6235      	str	r5, [r6, #32]
	z_setup_new_thread(_main_thread, _main_stack,
 80018a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018a8:	4926      	ldr	r1, [pc, #152]	; (8001944 <z_cstart+0x100>)
 80018aa:	4628      	mov	r0, r5
 80018ac:	e9cd 7304 	strd	r7, r3, [sp, #16]
 80018b0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80018b4:	e9cd 4400 	strd	r4, r4, [sp]
 80018b8:	4b23      	ldr	r3, [pc, #140]	; (8001948 <z_cstart+0x104>)
 80018ba:	4634      	mov	r4, r6
 80018bc:	f000 fa8e 	bl	8001ddc <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80018c0:	7b6b      	ldrb	r3, [r5, #13]
 80018c2:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 80018c6:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80018ca:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 80018cc:	d104      	bne.n	80018d8 <z_cstart+0x94>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
 80018ce:	69ab      	ldr	r3, [r5, #24]
 80018d0:	b913      	cbnz	r3, 80018d8 <z_cstart+0x94>
		z_add_thread_to_ready_q(thread);
 80018d2:	4628      	mov	r0, r5
 80018d4:	f000 f8ec 	bl	8001ab0 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
 80018d8:	4b1c      	ldr	r3, [pc, #112]	; (800194c <z_cstart+0x108>)
 80018da:	2201      	movs	r2, #1
 80018dc:	4e1c      	ldr	r6, [pc, #112]	; (8001950 <z_cstart+0x10c>)
 80018de:	9305      	str	r3, [sp, #20]
 80018e0:	230f      	movs	r3, #15
 80018e2:	491c      	ldr	r1, [pc, #112]	; (8001954 <z_cstart+0x110>)
 80018e4:	4630      	mov	r0, r6
 80018e6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80018ea:	2300      	movs	r3, #0
 80018ec:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80018f0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	4b18      	ldr	r3, [pc, #96]	; (8001958 <z_cstart+0x114>)
 80018f8:	f000 fa70 	bl	8001ddc <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80018fc:	7b73      	ldrb	r3, [r6, #13]
	_kernel.cpus[0].idle_thread = _idle_thread;
 80018fe:	60e6      	str	r6, [r4, #12]
 8001900:	f023 0304 	bic.w	r3, r3, #4
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
 8001904:	60a5      	str	r5, [r4, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8001906:	4a15      	ldr	r2, [pc, #84]	; (800195c <z_cstart+0x118>)
 8001908:	7373      	strb	r3, [r6, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <z_cstart+0x11c>)
	list->tail = (sys_dnode_t *)list;
 800190c:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8001910:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <z_cstart+0x104>)
 8001912:	4618      	mov	r0, r3
 8001914:	f382 8809 	msr	PSP, r2
 8001918:	b663      	cpsie	if
 800191a:	f04f 0100 	mov.w	r1, #0
 800191e:	f381 8811 	msr	BASEPRI, r1
 8001922:	f3bf 8f6f 	isb	sy
 8001926:	2100      	movs	r1, #0
 8001928:	2200      	movs	r2, #0
 800192a:	2300      	movs	r3, #0
 800192c:	f000 fc2b 	bl	8002186 <z_thread_entry>
	"bl z_thread_entry \n\t"   /* z_thread_entry(_main, 0, 0, 0); */
	:
	: "r" (_main), "r" (start_of_main_stack)
	);

	CODE_UNREACHABLE;
 8001930:	20020fb0 	.word	0x20020fb0
 8001934:	e000ed00 	.word	0xe000ed00
 8001938:	20020234 	.word	0x20020234
 800193c:	200201d0 	.word	0x200201d0
 8001940:	08003771 	.word	0x08003771
 8001944:	20020270 	.word	0x20020270
 8001948:	08001815 	.word	0x08001815
 800194c:	08003776 	.word	0x08003776
 8001950:	2002016c 	.word	0x2002016c
 8001954:	20020670 	.word	0x20020670
 8001958:	08002bfb 	.word	0x08002bfb
 800195c:	20020670 	.word	0x20020670
 8001960:	2002024c 	.word	0x2002024c

08001964 <reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

static void reset_time_slice(void)
{
 8001964:	b508      	push	{r3, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 8001966:	f7ff f927 	bl	8000bb8 <z_clock_elapsed>
 800196a:	4b05      	ldr	r3, [pc, #20]	; (8001980 <reset_time_slice+0x1c>)
 800196c:	4a05      	ldr	r2, [pc, #20]	; (8001984 <reset_time_slice+0x20>)

	z_set_timeout_expiry(slice_time, false);
 800196e:	2100      	movs	r1, #0
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4418      	add	r0, r3
 8001974:	6110      	str	r0, [r2, #16]
	z_set_timeout_expiry(slice_time, false);
 8001976:	4618      	mov	r0, r3
}
 8001978:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_set_timeout_expiry(slice_time, false);
 800197c:	f001 b91f 	b.w	8002bbe <z_set_timeout_expiry>
 8001980:	20020268 	.word	0x20020268
 8001984:	20020234 	.word	0x20020234

08001988 <resched.part.15>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001988:	f3ef 8005 	mrs	r0, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
 800198c:	280d      	cmp	r0, #13
 800198e:	d809      	bhi.n	80019a4 <resched.part.15+0x1c>
 8001990:	b128      	cbz	r0, 800199e <resched.part.15+0x16>
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <resched.part.15+0x20>)
 8001994:	6858      	ldr	r0, [r3, #4]
 8001996:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
 800199a:	f3c0 20c0 	ubfx	r0, r0, #11, #1
	}
	_current_cpu->swap_ok = 0;
#endif

	return z_arch_irq_unlocked(key) && !z_is_in_isr();
}
 800199e:	f080 0001 	eor.w	r0, r0, #1
 80019a2:	4770      	bx	lr
 80019a4:	2001      	movs	r0, #1
 80019a6:	e7fa      	b.n	800199e <resched.part.15+0x16>
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <k_sched_time_slice_set>:
{
 80019ac:	b510      	push	{r4, lr}
 80019ae:	f04f 0310 	mov.w	r3, #16
 80019b2:	f3ef 8411 	mrs	r4, BASEPRI
 80019b6:	f383 8811 	msr	BASEPRI, r3
 80019ba:	f3bf 8f6f 	isb	sy
		_current_cpu->slice_ticks = 0;
 80019be:	2200      	movs	r2, #0
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <k_sched_time_slice_set+0x30>)
 80019c2:	611a      	str	r2, [r3, #16]
		slice_time = z_ms_to_ticks(slice);
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <k_sched_time_slice_set+0x34>)
 80019c6:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <k_sched_time_slice_set+0x38>)
 80019ca:	6019      	str	r1, [r3, #0]
		reset_time_slice();
 80019cc:	f7ff ffca 	bl	8001964 <reset_time_slice>
	__asm__ volatile(
 80019d0:	f384 8811 	msr	BASEPRI, r4
 80019d4:	f3bf 8f6f 	isb	sy
}
 80019d8:	bd10      	pop	{r4, pc}
 80019da:	bf00      	nop
 80019dc:	20020234 	.word	0x20020234
 80019e0:	20020268 	.word	0x20020268
 80019e4:	20020264 	.word	0x20020264

080019e8 <k_sched_lock>:
	__asm__ volatile(
 80019e8:	f04f 0310 	mov.w	r3, #16
 80019ec:	f3ef 8111 	mrs	r1, BASEPRI
 80019f0:	f383 8811 	msr	BASEPRI, r3
 80019f4:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
 80019f8:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <k_sched_lock+0x24>)
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	7bd3      	ldrb	r3, [r2, #15]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8001a02:	f381 8811 	msr	BASEPRI, r1
 8001a06:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
 8001a0a:	4770      	bx	lr
 8001a0c:	20020234 	.word	0x20020234

08001a10 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <z_priq_dumb_remove+0x28>)
 8001a12:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001a16:	4282      	cmp	r2, r0
 8001a18:	d105      	bne.n	8001a26 <z_priq_dumb_remove+0x16>
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	428b      	cmp	r3, r1
 8001a1e:	d102      	bne.n	8001a26 <z_priq_dumb_remove+0x16>
 8001a20:	7b4b      	ldrb	r3, [r1, #13]
 8001a22:	06db      	lsls	r3, r3, #27
 8001a24:	d106      	bne.n	8001a34 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
 8001a26:	e9d1 3200 	ldrd	r3, r2, [r1]
 8001a2a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 8001a2c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8001a2e:	2300      	movs	r3, #0
	node->prev = NULL;
 8001a30:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20020234 	.word	0x20020234

08001a3c <update_cache>:
{
 8001a3c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
 8001a3e:	4c0d      	ldr	r4, [pc, #52]	; (8001a74 <update_cache+0x38>)
{
 8001a40:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
 8001a42:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001a46:	f001 f81a 	bl	8002a7e <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
 8001a4a:	4605      	mov	r5, r0
 8001a4c:	b900      	cbnz	r0, 8001a50 <update_cache+0x14>
 8001a4e:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
 8001a50:	68a3      	ldr	r3, [r4, #8]
 8001a52:	b94a      	cbnz	r2, 8001a68 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
 8001a54:	7b5a      	ldrb	r2, [r3, #13]
 8001a56:	06d2      	lsls	r2, r2, #27
 8001a58:	d106      	bne.n	8001a68 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8001a5a:	69aa      	ldr	r2, [r5, #24]
 8001a5c:	b922      	cbnz	r2, 8001a68 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
 8001a5e:	89da      	ldrh	r2, [r3, #14]
 8001a60:	2a7f      	cmp	r2, #127	; 0x7f
 8001a62:	d901      	bls.n	8001a68 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
 8001a64:	6223      	str	r3, [r4, #32]
}
 8001a66:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
 8001a68:	429d      	cmp	r5, r3
 8001a6a:	d001      	beq.n	8001a70 <update_cache+0x34>
			reset_time_slice();
 8001a6c:	f7ff ff7a 	bl	8001964 <reset_time_slice>
		_kernel.ready_q.cache = th;
 8001a70:	6225      	str	r5, [r4, #32]
}
 8001a72:	e7f8      	b.n	8001a66 <update_cache+0x2a>
 8001a74:	20020234 	.word	0x20020234

08001a78 <k_sched_unlock>:
{
 8001a78:	b510      	push	{r4, lr}
	__asm__ volatile(
 8001a7a:	f04f 0310 	mov.w	r3, #16
 8001a7e:	f3ef 8411 	mrs	r4, BASEPRI
 8001a82:	f383 8811 	msr	BASEPRI, r3
 8001a86:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <k_sched_unlock+0x34>)
		update_cache(1);
 8001a8c:	2001      	movs	r0, #1
		++_current->base.sched_locked;
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	7bd3      	ldrb	r3, [r2, #15]
 8001a92:	3301      	adds	r3, #1
 8001a94:	73d3      	strb	r3, [r2, #15]
		update_cache(1);
 8001a96:	f7ff ffd1 	bl	8001a3c <update_cache>
	__asm__ volatile(
 8001a9a:	f384 8811 	msr	BASEPRI, r4
 8001a9e:	f3bf 8f6f 	isb	sy
}
 8001aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8001aa6:	f000 bfe0 	b.w	8002a6a <z_reschedule_unlocked>
 8001aaa:	bf00      	nop
 8001aac:	20020234 	.word	0x20020234

08001ab0 <z_add_thread_to_ready_q>:
{
 8001ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 8001ab2:	f04f 0310 	mov.w	r3, #16
 8001ab6:	f3ef 8411 	mrs	r4, BASEPRI
 8001aba:	f383 8811 	msr	BASEPRI, r3
 8001abe:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8001ac2:	4a15      	ldr	r2, [pc, #84]	; (8001b18 <z_add_thread_to_ready_q+0x68>)
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8001aca:	428b      	cmp	r3, r1
 8001acc:	d01d      	beq.n	8001b0a <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8001ace:	b1e3      	cbz	r3, 8001b0a <z_add_thread_to_ready_q+0x5a>
 8001ad0:	6a96      	ldr	r6, [r2, #40]	; 0x28
	if (t1->base.prio < t2->base.prio) {
 8001ad2:	f990 500e 	ldrsb.w	r5, [r0, #14]
 8001ad6:	f993 700e 	ldrsb.w	r7, [r3, #14]
 8001ada:	42af      	cmp	r7, r5
 8001adc:	dd10      	ble.n	8001b00 <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
 8001ade:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8001ae0:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
 8001ae4:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 8001ae6:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
 8001ae8:	7b43      	ldrb	r3, [r0, #13]
 8001aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aee:	7343      	strb	r3, [r0, #13]
		update_cache(0);
 8001af0:	2000      	movs	r0, #0
 8001af2:	f7ff ffa3 	bl	8001a3c <update_cache>
	__asm__ volatile(
 8001af6:	f384 8811 	msr	BASEPRI, r4
 8001afa:	f3bf 8f6f 	isb	sy
}
 8001afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 8001b00:	42b3      	cmp	r3, r6
 8001b02:	d002      	beq.n	8001b0a <z_add_thread_to_ready_q+0x5a>
 8001b04:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1e5      	bne.n	8001ad6 <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
 8001b0a:	6a93      	ldr	r3, [r2, #40]	; 0x28
	node->next = list;
 8001b0c:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
 8001b0e:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
 8001b10:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001b12:	6018      	str	r0, [r3, #0]
	list->tail = node;
 8001b14:	6290      	str	r0, [r2, #40]	; 0x28
 8001b16:	e7e7      	b.n	8001ae8 <z_add_thread_to_ready_q+0x38>
 8001b18:	20020234 	.word	0x20020234

08001b1c <z_move_thread_to_end_of_prio_q>:
{
 8001b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b1e:	4604      	mov	r4, r0
	__asm__ volatile(
 8001b20:	f04f 0310 	mov.w	r3, #16
 8001b24:	f3ef 8711 	mrs	r7, BASEPRI
 8001b28:	f383 8811 	msr	BASEPRI, r3
 8001b2c:	f3bf 8f6f 	isb	sy
		_priq_run_remove(&_kernel.ready_q.runq, thread);
 8001b30:	4d19      	ldr	r5, [pc, #100]	; (8001b98 <z_move_thread_to_end_of_prio_q+0x7c>)
 8001b32:	4601      	mov	r1, r0
 8001b34:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8001b38:	4630      	mov	r0, r6
 8001b3a:	f7ff ff69 	bl	8001a10 <z_priq_dumb_remove>
	return list->head == list;
 8001b3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001b40:	462a      	mov	r2, r5
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8001b42:	42b3      	cmp	r3, r6
 8001b44:	d020      	beq.n	8001b88 <z_move_thread_to_end_of_prio_q+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8001b46:	b1fb      	cbz	r3, 8001b88 <z_move_thread_to_end_of_prio_q+0x6c>
 8001b48:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	if (t1->base.prio < t2->base.prio) {
 8001b4a:	f994 100e 	ldrsb.w	r1, [r4, #14]
 8001b4e:	f993 500e 	ldrsb.w	r5, [r3, #14]
 8001b52:	428d      	cmp	r5, r1
 8001b54:	dd13      	ble.n	8001b7e <z_move_thread_to_end_of_prio_q+0x62>
	node->prev = successor->prev;
 8001b56:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
 8001b58:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
 8001b5c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
 8001b5e:	605c      	str	r4, [r3, #4]
 8001b60:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
 8001b62:	6890      	ldr	r0, [r2, #8]
 8001b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b68:	7363      	strb	r3, [r4, #13]
 8001b6a:	1b03      	subs	r3, r0, r4
 8001b6c:	4258      	negs	r0, r3
 8001b6e:	4158      	adcs	r0, r3
 8001b70:	f7ff ff64 	bl	8001a3c <update_cache>
	__asm__ volatile(
 8001b74:	f387 8811 	msr	BASEPRI, r7
 8001b78:	f3bf 8f6f 	isb	sy
}
 8001b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 8001b7e:	4283      	cmp	r3, r0
 8001b80:	d002      	beq.n	8001b88 <z_move_thread_to_end_of_prio_q+0x6c>
 8001b82:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1e2      	bne.n	8001b4e <z_move_thread_to_end_of_prio_q+0x32>
	node->prev = list->tail;
 8001b88:	6a93      	ldr	r3, [r2, #40]	; 0x28
	node->next = list;
 8001b8a:	6026      	str	r6, [r4, #0]
	node->prev = list->tail;
 8001b8c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 8001b8e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001b90:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8001b92:	6294      	str	r4, [r2, #40]	; 0x28
 8001b94:	e7e4      	b.n	8001b60 <z_move_thread_to_end_of_prio_q+0x44>
 8001b96:	bf00      	nop
 8001b98:	20020234 	.word	0x20020234

08001b9c <z_time_slice>:
	if (pending_current == _current) {
 8001b9c:	4914      	ldr	r1, [pc, #80]	; (8001bf0 <z_time_slice+0x54>)
 8001b9e:	4a15      	ldr	r2, [pc, #84]	; (8001bf4 <z_time_slice+0x58>)
 8001ba0:	688b      	ldr	r3, [r1, #8]
{
 8001ba2:	b510      	push	{r4, lr}
	if (pending_current == _current) {
 8001ba4:	6814      	ldr	r4, [r2, #0]
 8001ba6:	42a3      	cmp	r3, r4
 8001ba8:	d103      	bne.n	8001bb2 <z_time_slice+0x16>
}
 8001baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			reset_time_slice();
 8001bae:	f7ff bed9 	b.w	8001964 <reset_time_slice>
	pending_current = NULL;
 8001bb2:	2400      	movs	r4, #0
 8001bb4:	6014      	str	r4, [r2, #0]
	if (slice_time && sliceable(_current)) {
 8001bb6:	4a10      	ldr	r2, [pc, #64]	; (8001bf8 <z_time_slice+0x5c>)
 8001bb8:	6812      	ldr	r2, [r2, #0]
 8001bba:	b1ba      	cbz	r2, 8001bec <z_time_slice+0x50>
		&& !z_is_thread_timeout_active(t);
 8001bbc:	89da      	ldrh	r2, [r3, #14]
 8001bbe:	2a7f      	cmp	r2, #127	; 0x7f
 8001bc0:	d814      	bhi.n	8001bec <z_time_slice+0x50>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
 8001bc2:	4a0e      	ldr	r2, [pc, #56]	; (8001bfc <z_time_slice+0x60>)
 8001bc4:	f993 400e 	ldrsb.w	r4, [r3, #14]
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	4294      	cmp	r4, r2
 8001bcc:	db0e      	blt.n	8001bec <z_time_slice+0x50>
	return thread == _idle_thread;
 8001bce:	4a0c      	ldr	r2, [pc, #48]	; (8001c00 <z_time_slice+0x64>)
		&& !is_idle(t)
 8001bd0:	6812      	ldr	r2, [r2, #0]
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d00a      	beq.n	8001bec <z_time_slice+0x50>
		&& !z_is_thread_timeout_active(t);
 8001bd6:	699a      	ldr	r2, [r3, #24]
 8001bd8:	b942      	cbnz	r2, 8001bec <z_time_slice+0x50>
		if (ticks >= _current_cpu->slice_ticks) {
 8001bda:	690a      	ldr	r2, [r1, #16]
 8001bdc:	4282      	cmp	r2, r0
 8001bde:	dc03      	bgt.n	8001be8 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff9b 	bl	8001b1c <z_move_thread_to_end_of_prio_q>
 8001be6:	e7e0      	b.n	8001baa <z_time_slice+0xe>
			_current_cpu->slice_ticks -= ticks;
 8001be8:	1a12      	subs	r2, r2, r0
 8001bea:	610a      	str	r2, [r1, #16]
}
 8001bec:	bd10      	pop	{r4, pc}
 8001bee:	bf00      	nop
 8001bf0:	20020234 	.word	0x20020234
 8001bf4:	20020260 	.word	0x20020260
 8001bf8:	20020268 	.word	0x20020268
 8001bfc:	20020264 	.word	0x20020264
 8001c00:	08003200 	.word	0x08003200

08001c04 <z_remove_thread_from_ready_q>:
{
 8001c04:	b538      	push	{r3, r4, r5, lr}
 8001c06:	4604      	mov	r4, r0
	__asm__ volatile(
 8001c08:	f04f 0310 	mov.w	r3, #16
 8001c0c:	f3ef 8511 	mrs	r5, BASEPRI
 8001c10:	f383 8811 	msr	BASEPRI, r3
 8001c14:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 8001c18:	7b43      	ldrb	r3, [r0, #13]
 8001c1a:	065a      	lsls	r2, r3, #25
 8001c1c:	d507      	bpl.n	8001c2e <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 8001c1e:	4601      	mov	r1, r0
 8001c20:	4809      	ldr	r0, [pc, #36]	; (8001c48 <z_remove_thread_from_ready_q+0x44>)
 8001c22:	f7ff fef5 	bl	8001a10 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 8001c26:	7b63      	ldrb	r3, [r4, #13]
 8001c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c2c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 8001c2e:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <z_remove_thread_from_ready_q+0x48>)
 8001c30:	6898      	ldr	r0, [r3, #8]
 8001c32:	1b03      	subs	r3, r0, r4
 8001c34:	4258      	negs	r0, r3
 8001c36:	4158      	adcs	r0, r3
 8001c38:	f7ff ff00 	bl	8001a3c <update_cache>
	__asm__ volatile(
 8001c3c:	f385 8811 	msr	BASEPRI, r5
 8001c40:	f3bf 8f6f 	isb	sy
}
 8001c44:	bd38      	pop	{r3, r4, r5, pc}
 8001c46:	bf00      	nop
 8001c48:	20020258 	.word	0x20020258
 8001c4c:	20020234 	.word	0x20020234

08001c50 <z_tick_sleep.part.16>:

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

static s32_t z_tick_sleep(s32_t ticks)
 8001c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
 8001c52:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
 8001c54:	f000 ffcd 	bl	8002bf2 <z_tick_get_32>
 8001c58:	1834      	adds	r4, r6, r0
	__asm__ volatile(
 8001c5a:	f04f 0310 	mov.w	r3, #16
 8001c5e:	f3ef 8711 	mrs	r7, BASEPRI
 8001c62:	f383 8811 	msr	BASEPRI, r3
 8001c66:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 8001c6a:	4d0d      	ldr	r5, [pc, #52]	; (8001ca0 <z_tick_sleep.part.16+0x50>)
 8001c6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <z_tick_sleep.part.16+0x54>)
 8001c6e:	68a8      	ldr	r0, [r5, #8]
 8001c70:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
 8001c72:	f7ff ffc7 	bl	8001c04 <z_remove_thread_from_ready_q>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 8001c76:	68a8      	ldr	r0, [r5, #8]
 8001c78:	4632      	mov	r2, r6
 8001c7a:	490b      	ldr	r1, [pc, #44]	; (8001ca8 <z_tick_sleep.part.16+0x58>)
 8001c7c:	3018      	adds	r0, #24
 8001c7e:	f000 f949 	bl	8001f14 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
 8001c82:	68aa      	ldr	r2, [r5, #8]
 8001c84:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8001c86:	7b53      	ldrb	r3, [r2, #13]
 8001c88:	f043 0310 	orr.w	r3, r3, #16
 8001c8c:	7353      	strb	r3, [r2, #13]
 8001c8e:	f7ff f8fd 	bl	8000e8c <__swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
 8001c92:	f000 ffae 	bl	8002bf2 <z_tick_get_32>
 8001c96:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
 8001c98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8001c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20020234 	.word	0x20020234
 8001ca4:	20020260 	.word	0x20020260
 8001ca8:	08002a8b 	.word	0x08002a8b

08001cac <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 8001cae:	2100      	movs	r1, #0
 8001cb0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001cb4:	4608      	mov	r0, r1
	list->tail = (sys_dnode_t *)list;
 8001cb6:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
 8001cba:	f7ff be77 	b.w	80019ac <k_sched_time_slice_set>
 8001cbe:	bf00      	nop
 8001cc0:	20020234 	.word	0x20020234

08001cc4 <z_impl_k_yield>:
{
 8001cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!is_idle(_current)) {
 8001cc6:	4c22      	ldr	r4, [pc, #136]	; (8001d50 <z_impl_k_yield+0x8c>)
 8001cc8:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <z_impl_k_yield+0x90>)
 8001cca:	68a2      	ldr	r2, [r4, #8]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d025      	beq.n	8001d1e <z_impl_k_yield+0x5a>
 8001cd2:	f04f 0310 	mov.w	r3, #16
 8001cd6:	f3ef 8611 	mrs	r6, BASEPRI
 8001cda:	f383 8811 	msr	BASEPRI, r3
 8001cde:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
 8001ce2:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8001ce6:	68a1      	ldr	r1, [r4, #8]
 8001ce8:	4628      	mov	r0, r5
 8001cea:	f7ff fe91 	bl	8001a10 <z_priq_dumb_remove>
	return list->head == list;
 8001cee:	6a63      	ldr	r3, [r4, #36]	; 0x24
				_priq_run_add(&_kernel.ready_q.runq,
 8001cf0:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8001cf2:	42ab      	cmp	r3, r5
 8001cf4:	d024      	beq.n	8001d40 <z_impl_k_yield+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8001cf6:	b31b      	cbz	r3, 8001d40 <z_impl_k_yield+0x7c>
 8001cf8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (t1->base.prio < t2->base.prio) {
 8001cfa:	f992 000e 	ldrsb.w	r0, [r2, #14]
 8001cfe:	f993 700e 	ldrsb.w	r7, [r3, #14]
 8001d02:	4287      	cmp	r7, r0
 8001d04:	dd17      	ble.n	8001d36 <z_impl_k_yield+0x72>
	node->prev = successor->prev;
 8001d06:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
 8001d08:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
 8001d0c:	600a      	str	r2, [r1, #0]
	successor->prev = node;
 8001d0e:	605a      	str	r2, [r3, #4]
			update_cache(1);
 8001d10:	2001      	movs	r0, #1
 8001d12:	f7ff fe93 	bl	8001a3c <update_cache>
	__asm__ volatile(
 8001d16:	f386 8811 	msr	BASEPRI, r6
 8001d1a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8001d1e:	f04f 0310 	mov.w	r3, #16
 8001d22:	f3ef 8011 	mrs	r0, BASEPRI
 8001d26:	f383 8811 	msr	BASEPRI, r3
 8001d2a:	f3bf 8f6f 	isb	sy
}
 8001d2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001d32:	f7ff b8ab 	b.w	8000e8c <__swap>
	return (node == list->tail) ? NULL : node->next;
 8001d36:	4299      	cmp	r1, r3
 8001d38:	d002      	beq.n	8001d40 <z_impl_k_yield+0x7c>
 8001d3a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1de      	bne.n	8001cfe <z_impl_k_yield+0x3a>
	node->prev = list->tail;
 8001d40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	node->next = list;
 8001d42:	6015      	str	r5, [r2, #0]
	node->prev = list->tail;
 8001d44:	6053      	str	r3, [r2, #4]
	list->tail->next = node;
 8001d46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d48:	601a      	str	r2, [r3, #0]
	list->tail = node;
 8001d4a:	62a2      	str	r2, [r4, #40]	; 0x28
 8001d4c:	e7e0      	b.n	8001d10 <z_impl_k_yield+0x4c>
 8001d4e:	bf00      	nop
 8001d50:	20020234 	.word	0x20020234
 8001d54:	08003200 	.word	0x08003200

08001d58 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
 8001d58:	4b01      	ldr	r3, [pc, #4]	; (8001d60 <z_impl_k_current_get+0x8>)
 8001d5a:	6898      	ldr	r0, [r3, #8]
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20020234 	.word	0x20020234

08001d64 <k_is_in_isr>:
 8001d64:	f3ef 8005 	mrs	r0, IPSR
 8001d68:	280d      	cmp	r0, #13
 8001d6a:	d807      	bhi.n	8001d7c <k_is_in_isr+0x18>
 8001d6c:	b138      	cbz	r0, 8001d7e <k_is_in_isr+0x1a>
 8001d6e:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <k_is_in_isr+0x1c>)
 8001d70:	6858      	ldr	r0, [r3, #4]
 8001d72:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
 8001d76:	f3c0 20c0 	ubfx	r0, r0, #11, #1
 8001d7a:	4770      	bx	lr
 8001d7c:	2001      	movs	r0, #1
}

bool k_is_in_isr(void)
{
	return z_is_in_isr();
}
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <z_is_thread_essential>:
 *
 * Returns true if current thread is essential, false if it is not.
 */
bool z_is_thread_essential(void)
{
	return (_current->base.user_options & K_ESSENTIAL) == K_ESSENTIAL;
 8001d84:	4b02      	ldr	r3, [pc, #8]	; (8001d90 <z_is_thread_essential+0xc>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	7b18      	ldrb	r0, [r3, #12]
}
 8001d8a:	f000 0001 	and.w	r0, r0, #1
 8001d8e:	4770      	bx	lr
 8001d90:	20020234 	.word	0x20020234

08001d94 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
 8001d94:	b510      	push	{r4, lr}
 8001d96:	4602      	mov	r2, r0
 8001d98:	f04f 0310 	mov.w	r3, #16
 8001d9c:	f3ef 8411 	mrs	r4, BASEPRI
 8001da0:	f383 8811 	msr	BASEPRI, r3
 8001da4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
 8001da8:	7b43      	ldrb	r3, [r0, #13]
 8001daa:	0759      	lsls	r1, r3, #29
 8001dac:	d404      	bmi.n	8001db8 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
 8001dae:	f384 8811 	msr	BASEPRI, r4
 8001db2:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
 8001db6:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8001db8:	f023 0304 	bic.w	r3, r3, #4
 8001dbc:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
 8001dbe:	f000 fea8 	bl	8002b12 <z_is_thread_ready>
 8001dc2:	b110      	cbz	r0, 8001dca <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	f7ff fe73 	bl	8001ab0 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
 8001dca:	4621      	mov	r1, r4
 8001dcc:	4802      	ldr	r0, [pc, #8]	; (8001dd8 <z_impl_k_thread_start+0x44>)
}
 8001dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
 8001dd2:	f000 be2b 	b.w	8002a2c <z_reschedule>
 8001dd6:	bf00      	nop
 8001dd8:	20020270 	.word	0x20020270

08001ddc <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
 8001ddc:	b530      	push	{r4, r5, lr}
 8001dde:	b087      	sub	sp, #28
 8001de0:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8001de2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8001de4:	9504      	str	r5, [sp, #16]
 8001de6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8001de8:	9503      	str	r5, [sp, #12]
 8001dea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001dec:	9502      	str	r5, [sp, #8]
 8001dee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8001df0:	9501      	str	r5, [sp, #4]
 8001df2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001df4:	9500      	str	r5, [sp, #0]
 8001df6:	f7ff fa0d 	bl	8001214 <z_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 8001dfa:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <z_setup_new_thread+0x2c>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	b103      	cbz	r3, 8001e02 <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e02:	65a3      	str	r3, [r4, #88]	; 0x58
	sys_trace_thread_create(new_thread);
}
 8001e04:	b007      	add	sp, #28
 8001e06:	bd30      	pop	{r4, r5, pc}
 8001e08:	20020234 	.word	0x20020234

08001e0c <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
 8001e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
 8001e0e:	4e1f      	ldr	r6, [pc, #124]	; (8001e8c <z_init_static_threads+0x80>)
{
 8001e10:	b087      	sub	sp, #28
 8001e12:	4d1f      	ldr	r5, [pc, #124]	; (8001e90 <z_init_static_threads+0x84>)
 8001e14:	4637      	mov	r7, r6
	_FOREACH_STATIC_THREAD(thread_data) {
 8001e16:	42b5      	cmp	r5, r6
 8001e18:	f105 0430 	add.w	r4, r5, #48	; 0x30
 8001e1c:	d30a      	bcc.n	8001e34 <z_init_static_threads+0x28>
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
 8001e1e:	4c1c      	ldr	r4, [pc, #112]	; (8001e90 <z_init_static_threads+0x84>)
	k_sched_lock();
 8001e20:	f7ff fde2 	bl	80019e8 <k_sched_lock>
 8001e24:	4d1b      	ldr	r5, [pc, #108]	; (8001e94 <z_init_static_threads+0x88>)
	_FOREACH_STATIC_THREAD(thread_data) {
 8001e26:	42bc      	cmp	r4, r7
 8001e28:	d321      	bcc.n	8001e6e <z_init_static_threads+0x62>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
 8001e2a:	b007      	add	sp, #28
 8001e2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 8001e30:	f7ff be22 	b.w	8001a78 <k_sched_unlock>
		z_setup_new_thread(
 8001e34:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8001e38:	9305      	str	r3, [sp, #20]
 8001e3a:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8001e3e:	9304      	str	r3, [sp, #16]
 8001e40:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8001e44:	9303      	str	r3, [sp, #12]
 8001e46:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8001e4a:	9302      	str	r3, [sp, #8]
 8001e4c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 8001e5c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 8001e60:	f7ff ffbc 	bl	8001ddc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 8001e64:	f854 3c30 	ldr.w	r3, [r4, #-48]
 8001e68:	64dd      	str	r5, [r3, #76]	; 0x4c
 8001e6a:	4625      	mov	r5, r4
 8001e6c:	e7d3      	b.n	8001e16 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
 8001e6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e70:	1c53      	adds	r3, r2, #1
 8001e72:	d003      	beq.n	8001e7c <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
 8001e74:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
 8001e76:	b91a      	cbnz	r2, 8001e80 <z_init_static_threads+0x74>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
 8001e78:	f7ff ff8c 	bl	8001d94 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8001e7c:	3430      	adds	r4, #48	; 0x30
 8001e7e:	e7d2      	b.n	8001e26 <z_init_static_threads+0x1a>
 8001e80:	3201      	adds	r2, #1
 8001e82:	4629      	mov	r1, r5
 8001e84:	3018      	adds	r0, #24
 8001e86:	f000 f845 	bl	8001f14 <z_add_timeout>
 8001e8a:	e7f7      	b.n	8001e7c <z_init_static_threads+0x70>
 8001e8c:	200210d8 	.word	0x200210d8
 8001e90:	200210d8 	.word	0x200210d8
 8001e94:	08002a8b 	.word	0x08002a8b

08001e98 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <elapsed+0x10>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	b90b      	cbnz	r3, 8001ea2 <elapsed+0xa>
 8001e9e:	f7fe be8b 	b.w	8000bb8 <z_clock_elapsed>
}
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	2002026c 	.word	0x2002026c

08001eac <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8001eac:	6803      	ldr	r3, [r0, #0]
 8001eae:	b140      	cbz	r0, 8001ec2 <remove_timeout+0x16>
 8001eb0:	4a07      	ldr	r2, [pc, #28]	; (8001ed0 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
 8001eb2:	6852      	ldr	r2, [r2, #4]
 8001eb4:	4290      	cmp	r0, r2
 8001eb6:	d004      	beq.n	8001ec2 <remove_timeout+0x16>
	if (next(t) != NULL) {
 8001eb8:	b11b      	cbz	r3, 8001ec2 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	6881      	ldr	r1, [r0, #8]
 8001ebe:	440a      	add	r2, r1
 8001ec0:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
 8001ec2:	6842      	ldr	r2, [r0, #4]
 8001ec4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 8001ec6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8001ec8:	2300      	movs	r3, #0
	node->prev = NULL;
 8001eca:	e9c0 3300 	strd	r3, r3, [r0]
}
 8001ece:	4770      	bx	lr
 8001ed0:	20020fe0 	.word	0x20020fe0

08001ed4 <next_timeout>:

static s32_t next_timeout(void)
{
 8001ed4:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <next_timeout+0x38>)
 8001ed8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8001eda:	429c      	cmp	r4, r3
 8001edc:	d011      	beq.n	8001f02 <next_timeout+0x2e>
	struct _timeout *to = first();
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - elapsed());
 8001ede:	b184      	cbz	r4, 8001f02 <next_timeout+0x2e>
 8001ee0:	68a5      	ldr	r5, [r4, #8]
 8001ee2:	f7ff ffd9 	bl	8001e98 <elapsed>
 8001ee6:	1a28      	subs	r0, r5, r0
 8001ee8:	2800      	cmp	r0, #0
 8001eea:	db0d      	blt.n	8001f08 <next_timeout+0x34>
 8001eec:	68a4      	ldr	r4, [r4, #8]
 8001eee:	f7ff ffd3 	bl	8001e98 <elapsed>
 8001ef2:	1a20      	subs	r0, r4, r0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <next_timeout+0x3c>)
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	b113      	cbz	r3, 8001f00 <next_timeout+0x2c>
 8001efa:	4298      	cmp	r0, r3
 8001efc:	bfa8      	it	ge
 8001efe:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 8001f00:	bd38      	pop	{r3, r4, r5, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - elapsed());
 8001f02:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8001f06:	e7f5      	b.n	8001ef4 <next_timeout+0x20>
 8001f08:	2000      	movs	r0, #0
 8001f0a:	e7f3      	b.n	8001ef4 <next_timeout+0x20>
 8001f0c:	20020fe0 	.word	0x20020fe0
 8001f10:	20020234 	.word	0x20020234

08001f14 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
 8001f14:	b570      	push	{r4, r5, r6, lr}
 8001f16:	4604      	mov	r4, r0
 8001f18:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8001f1a:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
 8001f1c:	f04f 0310 	mov.w	r3, #16
 8001f20:	f3ef 8511 	mrs	r5, BASEPRI
 8001f24:	f383 8811 	msr	BASEPRI, r3
 8001f28:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
 8001f2c:	f7ff ffb4 	bl	8001e98 <elapsed>
	return list->head == list;
 8001f30:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <z_add_timeout+0x80>)
 8001f32:	2e01      	cmp	r6, #1
 8001f34:	bfac      	ite	ge
 8001f36:	1980      	addge	r0, r0, r6
 8001f38:	3001      	addlt	r0, #1
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	60a0      	str	r0, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d001      	beq.n	8001f46 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8001f42:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
 8001f44:	b932      	cbnz	r2, 8001f54 <z_add_timeout+0x40>
	node->prev = list->tail;
 8001f46:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 8001f48:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
 8001f4a:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8001f50:	605c      	str	r4, [r3, #4]
 8001f52:	e00a      	b.n	8001f6a <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
 8001f54:	6890      	ldr	r0, [r2, #8]
 8001f56:	68a1      	ldr	r1, [r4, #8]
 8001f58:	4288      	cmp	r0, r1
 8001f5a:	dd15      	ble.n	8001f88 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
 8001f5c:	1a41      	subs	r1, r0, r1
 8001f5e:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
 8001f60:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8001f62:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
 8001f66:	600c      	str	r4, [r1, #0]
	successor->prev = node;
 8001f68:	6054      	str	r4, [r2, #4]
	return list->head == list;
 8001f6a:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d006      	beq.n	8001f7e <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8001f70:	4294      	cmp	r4, r2
 8001f72:	d104      	bne.n	8001f7e <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
 8001f74:	f7ff ffae 	bl	8001ed4 <next_timeout>
 8001f78:	2100      	movs	r1, #0
 8001f7a:	f7fe fdcd 	bl	8000b18 <z_clock_set_timeout>
	__asm__ volatile(
 8001f7e:	f385 8811 	msr	BASEPRI, r5
 8001f82:	f3bf 8f6f 	isb	sy
		}
	}
}
 8001f86:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
 8001f88:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 8001f8a:	42b2      	cmp	r2, r6
 8001f8c:	60a1      	str	r1, [r4, #8]
 8001f8e:	d0da      	beq.n	8001f46 <z_add_timeout+0x32>
 8001f90:	6812      	ldr	r2, [r2, #0]
 8001f92:	e7d7      	b.n	8001f44 <z_add_timeout+0x30>
 8001f94:	20020fe0 	.word	0x20020fe0

08001f98 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
 8001f98:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001f9c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8001f9e:	f7ff fdfd 	bl	8001b9c <z_time_slice>
	__asm__ volatile(
 8001fa2:	f04f 0310 	mov.w	r3, #16
 8001fa6:	f3ef 8511 	mrs	r5, BASEPRI
 8001faa:	f383 8811 	msr	BASEPRI, r3
 8001fae:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 8001fb2:	4f21      	ldr	r7, [pc, #132]	; (8002038 <z_clock_announce+0xa0>)
 8001fb4:	4e21      	ldr	r6, [pc, #132]	; (800203c <z_clock_announce+0xa4>)
	return list->head == list;
 8001fb6:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8002040 <z_clock_announce+0xa8>
 8001fba:	46b8      	mov	r8, r7
 8001fbc:	6034      	str	r4, [r6, #0]
 8001fbe:	f8d9 4000 	ldr.w	r4, [r9]
 8001fc2:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8001fc4:	454c      	cmp	r4, r9
 8001fc6:	e9d7 bc00 	ldrd	fp, ip, [r7]
 8001fca:	d005      	beq.n	8001fd8 <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
 8001fcc:	b124      	cbz	r4, 8001fd8 <z_clock_announce+0x40>
 8001fce:	68a3      	ldr	r3, [r4, #8]
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	dd15      	ble.n	8002000 <z_clock_announce+0x68>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
 8001fd8:	eb1b 0002 	adds.w	r0, fp, r2
	announce_remaining = 0;
 8001fdc:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
 8001fe0:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
 8001fe4:	6034      	str	r4, [r6, #0]
	curr_tick += announce_remaining;
 8001fe6:	e9c8 0100 	strd	r0, r1, [r8]

	z_clock_set_timeout(next_timeout(), false);
 8001fea:	f7ff ff73 	bl	8001ed4 <next_timeout>
 8001fee:	4621      	mov	r1, r4
 8001ff0:	f7fe fd92 	bl	8000b18 <z_clock_set_timeout>
	__asm__ volatile(
 8001ff4:	f385 8811 	msr	BASEPRI, r5
 8001ff8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8001ffc:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
 8002000:	eb1b 0003 	adds.w	r0, fp, r3
 8002004:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
 800200c:	2300      	movs	r3, #0
		curr_tick += dt;
 800200e:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
 8002012:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
 8002014:	4620      	mov	r0, r4
 8002016:	f7ff ff49 	bl	8001eac <remove_timeout>
 800201a:	f385 8811 	msr	BASEPRI, r5
 800201e:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8002022:	68e3      	ldr	r3, [r4, #12]
 8002024:	4798      	blx	r3
	__asm__ volatile(
 8002026:	f04f 0310 	mov.w	r3, #16
 800202a:	f3ef 8511 	mrs	r5, BASEPRI
 800202e:	f383 8811 	msr	BASEPRI, r3
 8002032:	f3bf 8f6f 	isb	sy
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8002036:	e7c2      	b.n	8001fbe <z_clock_announce+0x26>
 8002038:	20020000 	.word	0x20020000
 800203c:	2002026c 	.word	0x2002026c
 8002040:	20020fe0 	.word	0x20020fe0

08002044 <z_tick_get>:

s64_t z_tick_get(void)
{
 8002044:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
 8002048:	f04f 0310 	mov.w	r3, #16
 800204c:	f3ef 8411 	mrs	r4, BASEPRI
 8002050:	f383 8811 	msr	BASEPRI, r3
 8002054:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
 8002058:	f7fe fdae 	bl	8000bb8 <z_clock_elapsed>
 800205c:	4b07      	ldr	r3, [pc, #28]	; (800207c <z_tick_get+0x38>)
 800205e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002062:	eb12 0b00 	adds.w	fp, r2, r0
 8002066:	f143 0c00 	adc.w	ip, r3, #0
 800206a:	4658      	mov	r0, fp
 800206c:	4661      	mov	r1, ip
	__asm__ volatile(
 800206e:	f384 8811 	msr	BASEPRI, r4
 8002072:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8002076:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
 800207a:	bf00      	nop
 800207c:	20020000 	.word	0x20020000

08002080 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
 8002080:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
 8002082:	4c07      	ldr	r4, [pc, #28]	; (80020a0 <init_static_pools+0x20>)
 8002084:	4d07      	ldr	r5, [pc, #28]	; (80020a4 <init_static_pools+0x24>)
 8002086:	42ac      	cmp	r4, r5
 8002088:	d301      	bcc.n	800208e <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
 800208a:	2000      	movs	r0, #0
 800208c:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 800208e:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
 8002092:	4620      	mov	r0, r4
	list->tail = (sys_dnode_t *)list;
 8002094:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8002098:	f000 f82b 	bl	80020f2 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
 800209c:	341c      	adds	r4, #28
 800209e:	e7f2      	b.n	8002086 <init_static_pools+0x6>
 80020a0:	200210d8 	.word	0x200210d8
 80020a4:	200210d8 	.word	0x200210d8

080020a8 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	68c6      	ldr	r6, [r0, #12]
 80020ac:	250c      	movs	r5, #12
	u32_t *bitarray = level <= p->max_inline_level ?
 80020ae:	f990 000b 	ldrsb.w	r0, [r0, #11]
 80020b2:	434d      	muls	r5, r1
		&p->levels[level].bits : p->levels[level].bits_p;
 80020b4:	4288      	cmp	r0, r1

	*word = &bitarray[bn / 32];
 80020b6:	4610      	mov	r0, r2
 80020b8:	eb06 0405 	add.w	r4, r6, r5
		&p->levels[level].bits : p->levels[level].bits_p;
 80020bc:	bfb8      	it	lt
 80020be:	5974      	ldrlt	r4, [r6, r5]
	*word = &bitarray[bn / 32];
 80020c0:	2a00      	cmp	r2, #0
 80020c2:	bfb8      	it	lt
 80020c4:	f102 001f 	addlt.w	r0, r2, #31
 80020c8:	1140      	asrs	r0, r0, #5
 80020ca:	eb04 0180 	add.w	r1, r4, r0, lsl #2

	return bn & 0x1f;
}
 80020ce:	f002 001f 	and.w	r0, r2, #31
	*word = &bitarray[bn / 32];
 80020d2:	6019      	str	r1, [r3, #0]
}
 80020d4:	bd70      	pop	{r4, r5, r6, pc}

080020d6 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
 80020d6:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
 80020d8:	ab01      	add	r3, sp, #4
 80020da:	f7ff ffe5 	bl	80020a8 <get_bit_ptr>

	*word |= (1<<bit);
 80020de:	9a01      	ldr	r2, [sp, #4]
 80020e0:	2301      	movs	r3, #1
 80020e2:	fa03 f000 	lsl.w	r0, r3, r0
 80020e6:	6813      	ldr	r3, [r2, #0]
 80020e8:	4303      	orrs	r3, r0
 80020ea:	6013      	str	r3, [r2, #0]
}
 80020ec:	b003      	add	sp, #12
 80020ee:	f85d fb04 	ldr.w	pc, [sp], #4

080020f2 <z_sys_mem_pool_base_init>:

	return block_end <= (parent + parent_sz);
}

void z_sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
 80020f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 80020f6:	6843      	ldr	r3, [r0, #4]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);

	p->max_inline_level = -1;
 80020f8:	22ff      	movs	r2, #255	; 0xff
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 80020fa:	8906      	ldrh	r6, [r0, #8]
{
 80020fc:	4604      	mov	r4, r0
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
 80020fe:	6805      	ldr	r5, [r0, #0]

	for (i = 0; i < p->n_levels; i++) {
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
 8002100:	f04f 0e0c 	mov.w	lr, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 8002104:	435e      	muls	r6, r3
	for (i = 0; i < p->n_levels; i++) {
 8002106:	f890 c00a 	ldrb.w	ip, [r0, #10]
	p->max_inline_level = -1;
 800210a:	72c2      	strb	r2, [r0, #11]
	for (i = 0; i < p->n_levels; i++) {
 800210c:	2000      	movs	r0, #0
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
 800210e:	4435      	add	r5, r6
	for (i = 0; i < p->n_levels; i++) {
 8002110:	4584      	cmp	ip, r0
 8002112:	dc05      	bgt.n	8002120 <z_sys_mem_pool_base_init+0x2e>
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
 8002114:	2500      	movs	r5, #0
 8002116:	8923      	ldrh	r3, [r4, #8]
 8002118:	42ab      	cmp	r3, r5
 800211a:	dc21      	bgt.n	8002160 <z_sys_mem_pool_base_init+0x6e>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
 800211c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sys_dlist_init(&p->levels[i].free_list);
 8002120:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8002124:	fb0e f700 	mul.w	r7, lr, r0
		int nblocks = buflen / sz;
 8002128:	fbb6 f1f3 	udiv	r1, r6, r3
		sys_dlist_init(&p->levels[i].free_list);
 800212c:	eb08 0207 	add.w	r2, r8, r7
		if (nblocks <= 32) {
 8002130:	2920      	cmp	r1, #32
		sys_dlist_init(&p->levels[i].free_list);
 8002132:	f102 0904 	add.w	r9, r2, #4
 8002136:	e9c2 9901 	strd	r9, r9, [r2, #4]
		if (nblocks <= 32) {
 800213a:	dc06      	bgt.n	800214a <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
 800213c:	72e0      	strb	r0, [r4, #11]
		sz = _ALIGN4(sz / 4);
 800213e:	089b      	lsrs	r3, r3, #2
	for (i = 0; i < p->n_levels; i++) {
 8002140:	3001      	adds	r0, #1
		sz = _ALIGN4(sz / 4);
 8002142:	3303      	adds	r3, #3
 8002144:	f023 0303 	bic.w	r3, r3, #3
 8002148:	e7e2      	b.n	8002110 <z_sys_mem_pool_base_init+0x1e>
			bits += (nblocks + 31)/32;
 800214a:	f111 021f 	adds.w	r2, r1, #31
			p->levels[i].bits_p = bits;
 800214e:	f848 5007 	str.w	r5, [r8, r7]
			bits += (nblocks + 31)/32;
 8002152:	bf48      	it	mi
 8002154:	f101 023e 	addmi.w	r2, r1, #62	; 0x3e
 8002158:	1152      	asrs	r2, r2, #5
 800215a:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800215e:	e7ee      	b.n	800213e <z_sys_mem_pool_base_init+0x4c>
		sys_dlist_append(&p->levels[0].free_list, block);
 8002160:	68e3      	ldr	r3, [r4, #12]
	return (u8_t *)p->buf + lsz * block;
 8002162:	6862      	ldr	r2, [r4, #4]
 8002164:	6820      	ldr	r0, [r4, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
 8002166:	1d1e      	adds	r6, r3, #4
	return (u8_t *)p->buf + lsz * block;
 8002168:	436a      	muls	r2, r5
 800216a:	1881      	adds	r1, r0, r2
	node->next = list;
 800216c:	5086      	str	r6, [r0, r2]
	node->prev = list->tail;
 800216e:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
 8002170:	4620      	mov	r0, r4
 8002172:	604a      	str	r2, [r1, #4]
	list->tail->next = node;
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	6011      	str	r1, [r2, #0]
 8002178:	462a      	mov	r2, r5
	list->tail = node;
 800217a:	6099      	str	r1, [r3, #8]
 800217c:	2100      	movs	r1, #0
 800217e:	f7ff ffaa 	bl	80020d6 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
 8002182:	3501      	adds	r5, #1
 8002184:	e7c7      	b.n	8002116 <z_sys_mem_pool_base_init+0x24>

08002186 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8002186:	b508      	push	{r3, lr}
 8002188:	4604      	mov	r4, r0
 800218a:	4608      	mov	r0, r1
 800218c:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 800218e:	461a      	mov	r2, r3
 8002190:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
 8002192:	f7ff fde1 	bl	8001d58 <z_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
 8002196:	f7ff f8df 	bl	8001358 <z_impl_k_thread_abort>

0800219a <z_arch_printk_char_out>:
}
 800219a:	2000      	movs	r0, #0
 800219c:	4770      	bx	lr

0800219e <print_err>:
{
 800219e:	b570      	push	{r4, r5, r6, lr}
 80021a0:	460d      	mov	r5, r1
 80021a2:	4604      	mov	r4, r0
	out('E', ctx);
 80021a4:	2045      	movs	r0, #69	; 0x45
 80021a6:	47a0      	blx	r4
	out('R', ctx);
 80021a8:	4629      	mov	r1, r5
 80021aa:	2052      	movs	r0, #82	; 0x52
 80021ac:	47a0      	blx	r4
	out('R', ctx);
 80021ae:	4629      	mov	r1, r5
 80021b0:	4623      	mov	r3, r4
 80021b2:	2052      	movs	r0, #82	; 0x52
}
 80021b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
 80021b8:	4718      	bx	r3

080021ba <z_vprintk>:
{
 80021ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
 80021be:	f04f 0800 	mov.w	r8, #0
{
 80021c2:	b08b      	sub	sp, #44	; 0x2c
 80021c4:	461c      	mov	r4, r3
 80021c6:	4606      	mov	r6, r0
 80021c8:	1e53      	subs	r3, r2, #1
 80021ca:	460f      	mov	r7, r1
	int min_width = -1;
 80021cc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
 80021d0:	46c1      	mov	r9, r8
 80021d2:	9302      	str	r3, [sp, #8]
			might_format = 0;
 80021d4:	2500      	movs	r5, #0
					break;
 80021d6:	e005      	b.n	80021e4 <z_vprintk+0x2a>
		if (!might_format) {
 80021d8:	b96d      	cbnz	r5, 80021f6 <z_vprintk+0x3c>
			if (*fmt != '%') {
 80021da:	2825      	cmp	r0, #37	; 0x25
 80021dc:	f000 814f 	beq.w	800247e <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
 80021e0:	4639      	mov	r1, r7
 80021e2:	47b0      	blx	r6
	while (*fmt) {
 80021e4:	9b02      	ldr	r3, [sp, #8]
 80021e6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80021ea:	9302      	str	r3, [sp, #8]
 80021ec:	2800      	cmp	r0, #0
 80021ee:	d1f3      	bne.n	80021d8 <z_vprintk+0x1e>
}
 80021f0:	b00b      	add	sp, #44	; 0x2c
 80021f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
 80021f6:	2864      	cmp	r0, #100	; 0x64
 80021f8:	d06e      	beq.n	80022d8 <z_vprintk+0x11e>
 80021fa:	d81a      	bhi.n	8002232 <z_vprintk+0x78>
 80021fc:	2839      	cmp	r0, #57	; 0x39
 80021fe:	d80a      	bhi.n	8002216 <z_vprintk+0x5c>
 8002200:	2831      	cmp	r0, #49	; 0x31
 8002202:	d260      	bcs.n	80022c6 <z_vprintk+0x10c>
 8002204:	282d      	cmp	r0, #45	; 0x2d
 8002206:	f000 8140 	beq.w	800248a <z_vprintk+0x2d0>
 800220a:	2830      	cmp	r0, #48	; 0x30
 800220c:	d04c      	beq.n	80022a8 <z_vprintk+0xee>
 800220e:	2825      	cmp	r0, #37	; 0x25
 8002210:	d107      	bne.n	8002222 <z_vprintk+0x68>
				out((int)'%', ctx);
 8002212:	4639      	mov	r1, r7
 8002214:	e00b      	b.n	800222e <z_vprintk+0x74>
			switch (*fmt) {
 8002216:	2858      	cmp	r0, #88	; 0x58
 8002218:	f000 80bb 	beq.w	8002392 <z_vprintk+0x1d8>
 800221c:	2863      	cmp	r0, #99	; 0x63
 800221e:	f000 812a 	beq.w	8002476 <z_vprintk+0x2bc>
					out((int)'%', ctx);
 8002222:	4639      	mov	r1, r7
 8002224:	2025      	movs	r0, #37	; 0x25
 8002226:	47b0      	blx	r6
					out((int)*fmt, ctx);
 8002228:	9b02      	ldr	r3, [sp, #8]
 800222a:	4639      	mov	r1, r7
 800222c:	7818      	ldrb	r0, [r3, #0]
 800222e:	47b0      	blx	r6
 8002230:	e7d0      	b.n	80021d4 <z_vprintk+0x1a>
			switch (*fmt) {
 8002232:	2870      	cmp	r0, #112	; 0x70
 8002234:	f000 80a3 	beq.w	800237e <z_vprintk+0x1c4>
 8002238:	d811      	bhi.n	800225e <z_vprintk+0xa4>
 800223a:	2869      	cmp	r0, #105	; 0x69
 800223c:	d04c      	beq.n	80022d8 <z_vprintk+0x11e>
 800223e:	286c      	cmp	r0, #108	; 0x6c
 8002240:	d105      	bne.n	800224e <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
 8002242:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 8002246:	d12a      	bne.n	800229e <z_vprintk+0xe4>
					length_mod = 'L';
 8002248:	f04f 084c 	mov.w	r8, #76	; 0x4c
 800224c:	e7ca      	b.n	80021e4 <z_vprintk+0x2a>
			switch (*fmt) {
 800224e:	2868      	cmp	r0, #104	; 0x68
 8002250:	d1e7      	bne.n	8002222 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
 8002252:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
 8002256:	d122      	bne.n	800229e <z_vprintk+0xe4>
					length_mod = 'H';
 8002258:	f04f 0848 	mov.w	r8, #72	; 0x48
 800225c:	e7c2      	b.n	80021e4 <z_vprintk+0x2a>
			switch (*fmt) {
 800225e:	2875      	cmp	r0, #117	; 0x75
 8002260:	d071      	beq.n	8002346 <z_vprintk+0x18c>
 8002262:	d818      	bhi.n	8002296 <z_vprintk+0xdc>
 8002264:	2873      	cmp	r0, #115	; 0x73
 8002266:	d1dc      	bne.n	8002222 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
 8002268:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
 800226c:	46ab      	mov	fp, r5
 800226e:	465b      	mov	r3, fp
 8002270:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8002274:	2800      	cmp	r0, #0
 8002276:	f040 80fb 	bne.w	8002470 <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
 800227a:	f1b9 0f03 	cmp.w	r9, #3
 800227e:	f040 810a 	bne.w	8002496 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
 8002282:	1b5d      	subs	r5, r3, r5
 8002284:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
 8002288:	2d00      	cmp	r5, #0
 800228a:	dda3      	ble.n	80021d4 <z_vprintk+0x1a>
						out(' ', ctx);
 800228c:	4639      	mov	r1, r7
 800228e:	2020      	movs	r0, #32
 8002290:	47b0      	blx	r6
 8002292:	3d01      	subs	r5, #1
 8002294:	e7f8      	b.n	8002288 <z_vprintk+0xce>
			switch (*fmt) {
 8002296:	2878      	cmp	r0, #120	; 0x78
 8002298:	d07b      	beq.n	8002392 <z_vprintk+0x1d8>
 800229a:	287a      	cmp	r0, #122	; 0x7a
 800229c:	d1c1      	bne.n	8002222 <z_vprintk+0x68>
				} else if (length_mod == 0) {
 800229e:	f1b8 0f00 	cmp.w	r8, #0
 80022a2:	d1be      	bne.n	8002222 <z_vprintk+0x68>
 80022a4:	4680      	mov	r8, r0
 80022a6:	e79d      	b.n	80021e4 <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
 80022a8:	f1ba 0f00 	cmp.w	sl, #0
 80022ac:	da0e      	bge.n	80022cc <z_vprintk+0x112>
 80022ae:	f1b9 0f00 	cmp.w	r9, #0
 80022b2:	f000 80ed 	beq.w	8002490 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
 80022b6:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
 80022ba:	f1b9 0f00 	cmp.w	r9, #0
 80022be:	bf08      	it	eq
 80022c0:	f04f 0902 	moveq.w	r9, #2
 80022c4:	e78e      	b.n	80021e4 <z_vprintk+0x2a>
				if (min_width < 0) {
 80022c6:	f1ba 0f00 	cmp.w	sl, #0
 80022ca:	dbf4      	blt.n	80022b6 <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
 80022cc:	230a      	movs	r3, #10
 80022ce:	fb03 0a0a 	mla	sl, r3, sl, r0
 80022d2:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
 80022d6:	e7f0      	b.n	80022ba <z_vprintk+0x100>
				if (length_mod == 'z') {
 80022d8:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
 80022dc:	d102      	bne.n	80022e4 <z_vprintk+0x12a>
					d = va_arg(ap, int);
 80022de:	f854 5b04 	ldr.w	r5, [r4], #4
 80022e2:	e01f      	b.n	8002324 <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
 80022e4:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 80022e8:	d0f9      	beq.n	80022de <z_vprintk+0x124>
				} else if (length_mod == 'L') {
 80022ea:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
 80022ee:	d1f6      	bne.n	80022de <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
 80022f0:	3407      	adds	r4, #7
					if (lld > __LONG_MAX__ ||
 80022f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					long long lld = va_arg(ap, long long);
 80022f6:	f024 0407 	bic.w	r4, r4, #7
 80022fa:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
 80022fe:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
 8002302:	9106      	str	r1, [sp, #24]
 8002304:	f143 0100 	adc.w	r1, r3, #0
 8002308:	9107      	str	r1, [sp, #28]
 800230a:	2100      	movs	r1, #0
 800230c:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 8002310:	4561      	cmp	r1, ip
 8002312:	bf08      	it	eq
 8002314:	4558      	cmpeq	r0, fp
 8002316:	d204      	bcs.n	8002322 <z_vprintk+0x168>
						print_err(out, ctx);
 8002318:	4639      	mov	r1, r7
 800231a:	4630      	mov	r0, r6
 800231c:	f7ff ff3f 	bl	800219e <print_err>
						break;
 8002320:	e758      	b.n	80021d4 <z_vprintk+0x1a>
					d = lld;
 8002322:	4615      	mov	r5, r2
				if (d < 0) {
 8002324:	2d00      	cmp	r5, #0
 8002326:	da05      	bge.n	8002334 <z_vprintk+0x17a>
					d = -d;
 8002328:	426d      	negs	r5, r5
					min_width--;
 800232a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					out((int)'-', ctx);
 800232e:	4639      	mov	r1, r7
 8002330:	202d      	movs	r0, #45	; 0x2d
 8002332:	47b0      	blx	r6
				_printk_dec_ulong(out, ctx, d, padding,
 8002334:	464b      	mov	r3, r9
 8002336:	462a      	mov	r2, r5
 8002338:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
 800233c:	4639      	mov	r1, r7
 800233e:	4630      	mov	r0, r6
 8002340:	f7fe f920 	bl	8000584 <_printk_dec_ulong>
				break;
 8002344:	e746      	b.n	80021d4 <z_vprintk+0x1a>
				if (length_mod == 'z') {
 8002346:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
 800234a:	d102      	bne.n	8002352 <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
 800234c:	f854 2b04 	ldr.w	r2, [r4], #4
 8002350:	e011      	b.n	8002376 <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
 8002352:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 8002356:	d0f9      	beq.n	800234c <z_vprintk+0x192>
				} else if (length_mod == 'L') {
 8002358:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
 800235c:	d1f6      	bne.n	800234c <z_vprintk+0x192>
					unsigned long long llu =
 800235e:	3407      	adds	r4, #7
					if (llu > ~0UL) {
 8002360:	2100      	movs	r1, #0
 8002362:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
 8002366:	f024 0407 	bic.w	r4, r4, #7
 800236a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
 800236e:	4299      	cmp	r1, r3
 8002370:	bf08      	it	eq
 8002372:	4290      	cmpeq	r0, r2
 8002374:	d3d0      	bcc.n	8002318 <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
 8002376:	f8cd a000 	str.w	sl, [sp]
 800237a:	464b      	mov	r3, r9
 800237c:	e7de      	b.n	800233c <z_vprintk+0x182>
				  out('0', ctx);
 800237e:	4639      	mov	r1, r7
 8002380:	2030      	movs	r0, #48	; 0x30
				  min_width = 8;
 8002382:	f04f 0a08 	mov.w	sl, #8
				  padding = PAD_ZERO_BEFORE;
 8002386:	f04f 0901 	mov.w	r9, #1
				  out('0', ctx);
 800238a:	47b0      	blx	r6
				  out('x', ctx);
 800238c:	4639      	mov	r1, r7
 800238e:	2078      	movs	r0, #120	; 0x78
 8002390:	47b0      	blx	r6
				if (*fmt == 'p') {
 8002392:	9b02      	ldr	r3, [sp, #8]
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b70      	cmp	r3, #112	; 0x70
 8002398:	d104      	bne.n	80023a4 <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
 800239a:	f854 3b04 	ldr.w	r3, [r4], #4
 800239e:	9304      	str	r3, [sp, #16]
 80023a0:	2300      	movs	r3, #0
 80023a2:	e00d      	b.n	80023c0 <z_vprintk+0x206>
				} else if (length_mod == 'l') {
 80023a4:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 80023a8:	d0f7      	beq.n	800239a <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
 80023aa:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
 80023ae:	d1f4      	bne.n	800239a <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
 80023b0:	3407      	adds	r4, #7
 80023b2:	f024 0307 	bic.w	r3, r4, #7
 80023b6:	461c      	mov	r4, r3
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f854 2b08 	ldr.w	r2, [r4], #8
 80023be:	9204      	str	r2, [sp, #16]
	int digits = 0;
 80023c0:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
 80023c2:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
 80023c4:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
 80023c8:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
 80023ca:	9105      	str	r1, [sp, #20]
		shift -= 4;
 80023cc:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
 80023d0:	9804      	ldr	r0, [sp, #16]
 80023d2:	f1cb 0c20 	rsb	ip, fp, #32
 80023d6:	f1ab 0120 	sub.w	r1, fp, #32
 80023da:	fa20 f00b 	lsr.w	r0, r0, fp
 80023de:	fa03 fc0c 	lsl.w	ip, r3, ip
 80023e2:	fa23 f101 	lsr.w	r1, r3, r1
 80023e6:	ea40 000c 	orr.w	r0, r0, ip
 80023ea:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
 80023ec:	f010 000f 	ands.w	r0, r0, #15
 80023f0:	d108      	bne.n	8002404 <z_vprintk+0x24a>
 80023f2:	9905      	ldr	r1, [sp, #20]
 80023f4:	b911      	cbnz	r1, 80023fc <z_vprintk+0x242>
 80023f6:	f1bb 0f00 	cmp.w	fp, #0
 80023fa:	d124      	bne.n	8002446 <z_vprintk+0x28c>
			nibble += nibble > 9 ? 87 : 48;
 80023fc:	2130      	movs	r1, #48	; 0x30
 80023fe:	e005      	b.n	800240c <z_vprintk+0x252>
			found_largest_digit = 1;
 8002400:	9505      	str	r5, [sp, #20]
 8002402:	e7e3      	b.n	80023cc <z_vprintk+0x212>
			nibble += nibble > 9 ? 87 : 48;
 8002404:	2809      	cmp	r0, #9
 8002406:	bf8c      	ite	hi
 8002408:	2157      	movhi	r1, #87	; 0x57
 800240a:	2130      	movls	r1, #48	; 0x30
 800240c:	4408      	add	r0, r1
			out((int)nibble, ctx);
 800240e:	4639      	mov	r1, r7
 8002410:	9308      	str	r3, [sp, #32]
 8002412:	b240      	sxtb	r0, r0
 8002414:	9205      	str	r2, [sp, #20]
 8002416:	47b0      	blx	r6
			digits++;
 8002418:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
 800241a:	9a05      	ldr	r2, [sp, #20]
			digits++;
 800241c:	3301      	adds	r3, #1
 800241e:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
 8002420:	9b08      	ldr	r3, [sp, #32]
 8002422:	f1bb 0f00 	cmp.w	fp, #0
 8002426:	d1eb      	bne.n	8002400 <z_vprintk+0x246>
	if (padding == PAD_SPACE_AFTER) {
 8002428:	f1b9 0f03 	cmp.w	r9, #3
 800242c:	f47f aed2 	bne.w	80021d4 <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
 8002430:	9b03      	ldr	r3, [sp, #12]
 8002432:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
 8002436:	2d00      	cmp	r5, #0
 8002438:	f77f aecc 	ble.w	80021d4 <z_vprintk+0x1a>
			out(' ', ctx);
 800243c:	4639      	mov	r1, r7
 800243e:	2020      	movs	r0, #32
 8002440:	47b0      	blx	r6
 8002442:	3d01      	subs	r5, #1
 8002444:	e7f7      	b.n	8002436 <z_vprintk+0x27c>
		if (remaining-- <= min_width) {
 8002446:	1e51      	subs	r1, r2, #1
 8002448:	4592      	cmp	sl, r2
 800244a:	9108      	str	r1, [sp, #32]
 800244c:	db07      	blt.n	800245e <z_vprintk+0x2a4>
			if (padding == PAD_ZERO_BEFORE) {
 800244e:	f1b9 0f01 	cmp.w	r9, #1
 8002452:	d106      	bne.n	8002462 <z_vprintk+0x2a8>
				out('0', ctx);
 8002454:	4639      	mov	r1, r7
 8002456:	2030      	movs	r0, #48	; 0x30
 8002458:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
 800245a:	47b0      	blx	r6
 800245c:	9b09      	ldr	r3, [sp, #36]	; 0x24
					x = va_arg(ap, unsigned int);
 800245e:	9a08      	ldr	r2, [sp, #32]
 8002460:	e7b4      	b.n	80023cc <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
 8002462:	f1b9 0f02 	cmp.w	r9, #2
 8002466:	d1fa      	bne.n	800245e <z_vprintk+0x2a4>
 8002468:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
 800246a:	4639      	mov	r1, r7
 800246c:	2020      	movs	r0, #32
 800246e:	e7f4      	b.n	800245a <z_vprintk+0x2a0>
					out((int)(*s++), ctx);
 8002470:	4639      	mov	r1, r7
 8002472:	47b0      	blx	r6
 8002474:	e6fb      	b.n	800226e <z_vprintk+0xb4>
				out(c, ctx);
 8002476:	4639      	mov	r1, r7
 8002478:	f854 0b04 	ldr.w	r0, [r4], #4
 800247c:	e6d7      	b.n	800222e <z_vprintk+0x74>
				length_mod = 0;
 800247e:	46a8      	mov	r8, r5
				padding = PAD_NONE;
 8002480:	46a9      	mov	r9, r5
				min_width = -1;
 8002482:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
 8002486:	2501      	movs	r5, #1
 8002488:	e6ac      	b.n	80021e4 <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
 800248a:	f04f 0903 	mov.w	r9, #3
 800248e:	e6a9      	b.n	80021e4 <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
 8002490:	f04f 0901 	mov.w	r9, #1
 8002494:	e6a6      	b.n	80021e4 <z_vprintk+0x2a>
			might_format = 0;
 8002496:	4605      	mov	r5, r0
		++fmt;
 8002498:	e6a4      	b.n	80021e4 <z_vprintk+0x2a>

0800249a <printk>:
{
 800249a:	b40f      	push	{r0, r1, r2, r3}
 800249c:	b507      	push	{r0, r1, r2, lr}
 800249e:	a904      	add	r1, sp, #16
 80024a0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 80024a4:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
 80024a6:	f7fe f8c1 	bl	800062c <vprintk>
}
 80024aa:	b003      	add	sp, #12
 80024ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80024b0:	b004      	add	sp, #16
 80024b2:	4770      	bx	lr

080024b4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 80024b4:	4770      	bx	lr

080024b6 <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 80024b6:	4602      	mov	r2, r0
 80024b8:	2101      	movs	r1, #1
 80024ba:	2000      	movs	r0, #0
 80024bc:	f7fe b94e 	b.w	800075c <__stm32_exti_isr>

080024c0 <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 80024c0:	4602      	mov	r2, r0
 80024c2:	2102      	movs	r1, #2
 80024c4:	2001      	movs	r0, #1
 80024c6:	f7fe b949 	b.w	800075c <__stm32_exti_isr>

080024ca <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 80024ca:	4602      	mov	r2, r0
 80024cc:	2103      	movs	r1, #3
 80024ce:	2002      	movs	r0, #2
 80024d0:	f7fe b944 	b.w	800075c <__stm32_exti_isr>

080024d4 <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 80024d4:	4602      	mov	r2, r0
 80024d6:	2104      	movs	r1, #4
 80024d8:	2003      	movs	r0, #3
 80024da:	f7fe b93f 	b.w	800075c <__stm32_exti_isr>

080024de <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 80024de:	4602      	mov	r2, r0
 80024e0:	2105      	movs	r1, #5
 80024e2:	2004      	movs	r0, #4
 80024e4:	f7fe b93a 	b.w	800075c <__stm32_exti_isr>

080024e8 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 80024e8:	4602      	mov	r2, r0
 80024ea:	210a      	movs	r1, #10
 80024ec:	2005      	movs	r0, #5
 80024ee:	f7fe b935 	b.w	800075c <__stm32_exti_isr>

080024f2 <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 80024f2:	4602      	mov	r2, r0
 80024f4:	2110      	movs	r1, #16
 80024f6:	200a      	movs	r0, #10
 80024f8:	f7fe b930 	b.w	800075c <__stm32_exti_isr>

080024fc <__stm32_exti_isr_16>:
	__stm32_exti_isr(16, 17, arg);
 80024fc:	4602      	mov	r2, r0
 80024fe:	2111      	movs	r1, #17
 8002500:	2010      	movs	r0, #16
 8002502:	f7fe b92b 	b.w	800075c <__stm32_exti_isr>

08002506 <__stm32_exti_isr_18>:
	__stm32_exti_isr(18, 19, arg);
 8002506:	4602      	mov	r2, r0
 8002508:	2113      	movs	r1, #19
 800250a:	2012      	movs	r0, #18
 800250c:	f7fe b926 	b.w	800075c <__stm32_exti_isr>

08002510 <__stm32_exti_isr_21>:
	__stm32_exti_isr(21, 22, arg);
 8002510:	4602      	mov	r2, r0
 8002512:	2116      	movs	r1, #22
 8002514:	2015      	movs	r0, #21
 8002516:	f7fe b921 	b.w	800075c <__stm32_exti_isr>

0800251a <__stm32_exti_isr_22>:
	__stm32_exti_isr(22, 23, arg);
 800251a:	4602      	mov	r2, r0
 800251c:	2117      	movs	r1, #23
 800251e:	2016      	movs	r0, #22
 8002520:	f7fe b91c 	b.w	800075c <__stm32_exti_isr>

08002524 <__stm32_exti_isr_23>:
	__stm32_exti_isr(23, 24, arg);
 8002524:	4602      	mov	r2, r0
 8002526:	2118      	movs	r1, #24
 8002528:	2017      	movs	r0, #23
 800252a:	f7fe b917 	b.w	800075c <__stm32_exti_isr>

0800252e <stm32_exti_init>:
      defined(CONFIG_SOC_SERIES_STM32F7X) || \
      defined(CONFIG_SOC_SERIES_STM32L1X) || \
      defined(CONFIG_SOC_SERIES_STM32L4X) || \
      defined(CONFIG_SOC_SERIES_STM32MP1X) || \
      defined(CONFIG_SOC_SERIES_STM32WBX)
	IRQ_CONNECT(EXTI0_IRQn,
 800252e:	2200      	movs	r2, #0
 8002530:	2006      	movs	r0, #6
{
 8002532:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8002534:	4611      	mov	r1, r2
 8002536:	f7fe fe57 	bl	80011e8 <z_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 800253a:	2200      	movs	r2, #0
 800253c:	2007      	movs	r0, #7
 800253e:	4611      	mov	r1, r2
 8002540:	f7fe fe52 	bl	80011e8 <z_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8002544:	2200      	movs	r2, #0
 8002546:	2008      	movs	r0, #8
 8002548:	4611      	mov	r1, r2
 800254a:	f7fe fe4d 	bl	80011e8 <z_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 800254e:	2200      	movs	r2, #0
 8002550:	2009      	movs	r0, #9
 8002552:	4611      	mov	r1, r2
 8002554:	f7fe fe48 	bl	80011e8 <z_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8002558:	2200      	movs	r2, #0
 800255a:	200a      	movs	r0, #10
 800255c:	4611      	mov	r1, r2
 800255e:	f7fe fe43 	bl	80011e8 <z_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_GET(exti_stm32),
		0);
#ifndef CONFIG_SOC_SERIES_STM32MP1X
	IRQ_CONNECT(EXTI9_5_IRQn,
 8002562:	2200      	movs	r2, #0
 8002564:	2017      	movs	r0, #23
 8002566:	4611      	mov	r1, r2
 8002568:	f7fe fe3e 	bl	80011e8 <z_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 800256c:	2200      	movs	r2, #0
 800256e:	2028      	movs	r0, #40	; 0x28
 8002570:	4611      	mov	r1, r2
 8002572:	f7fe fe39 	bl	80011e8 <z_irq_priority_set>
#endif /* CONFIG_SOC_SERIES_STM32MP1X */

#if defined(CONFIG_SOC_SERIES_STM32F2X) || \
      defined(CONFIG_SOC_SERIES_STM32F4X) || \
      defined(CONFIG_SOC_SERIES_STM32F7X)
	IRQ_CONNECT(PVD_IRQn,
 8002576:	2200      	movs	r2, #0
 8002578:	2001      	movs	r0, #1
 800257a:	4611      	mov	r1, r2
 800257c:	f7fe fe34 	bl	80011e8 <z_irq_priority_set>
		CONFIG_EXTI_STM32_PVD_IRQ_PRI,
		__stm32_exti_isr_16, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(OTG_FS_WKUP_IRQn,
 8002580:	2200      	movs	r2, #0
 8002582:	202a      	movs	r0, #42	; 0x2a
 8002584:	4611      	mov	r1, r2
 8002586:	f7fe fe2f 	bl	80011e8 <z_irq_priority_set>
		CONFIG_EXTI_STM32_OTG_FS_WKUP_IRQ_PRI,
		__stm32_exti_isr_18, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(TAMP_STAMP_IRQn,
 800258a:	2200      	movs	r2, #0
 800258c:	2002      	movs	r0, #2
 800258e:	4611      	mov	r1, r2
 8002590:	f7fe fe2a 	bl	80011e8 <z_irq_priority_set>
		CONFIG_EXTI_STM32_TAMP_STAMP_IRQ_PRI,
		__stm32_exti_isr_21, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(RTC_WKUP_IRQn,
 8002594:	2200      	movs	r2, #0
 8002596:	2003      	movs	r0, #3
 8002598:	4611      	mov	r1, r2
 800259a:	f7fe fe25 	bl	80011e8 <z_irq_priority_set>
		CONFIG_EXTI_STM32_RTC_WKUP_IRQ_PRI,
		__stm32_exti_isr_22, DEVICE_GET(exti_stm32),
		0);
#endif
#if CONFIG_SOC_SERIES_STM32F7X
	IRQ_CONNECT(LPTIM1_IRQn,
 800259e:	2200      	movs	r2, #0
 80025a0:	205d      	movs	r0, #93	; 0x5d
 80025a2:	4611      	mov	r1, r2
 80025a4:	f7fe fe20 	bl	80011e8 <z_irq_priority_set>
}
 80025a8:	2000      	movs	r0, #0
 80025aa:	bd08      	pop	{r3, pc}

080025ac <config_pll_init>:
	pllinit->PLLN = CONFIG_CLOCK_STM32_PLL_N_MULTIPLIER;
 80025ac:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80025b0:	2219      	movs	r2, #25
 80025b2:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLP = pllp(CONFIG_CLOCK_STM32_PLL_P_DIVISOR);
 80025b6:	2300      	movs	r3, #0
 80025b8:	6083      	str	r3, [r0, #8]
}
 80025ba:	4770      	bx	lr

080025bc <LL_RCC_MSI_Disable>:
 * @brief Function kept for driver genericity
 */
void LL_RCC_MSI_Disable(void)
{
	/* Do nothing */
}
 80025bc:	4770      	bx	lr

080025be <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
 80025be:	f7fe be59 	b.w	8001274 <__bus_fault>

080025c2 <z_do_kernel_oops>:

void z_do_kernel_oops(const NANO_ESF *esf)
{
 80025c2:	4601      	mov	r1, r0
	z_NanoFatalErrorHandler(esf->basic.r0, esf);
 80025c4:	6800      	ldr	r0, [r0, #0]
 80025c6:	f7fe be69 	b.w	800129c <z_NanoFatalErrorHandler>

080025ca <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
 80025ca:	b508      	push	{r3, lr}
	handler();
 80025cc:	f7fe ff14 	bl	80013f8 <z_SysNmiOnReset>
	z_ExcExit();
}
 80025d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_ExcExit();
 80025d4:	f7fe bc40 	b.w	8000e58 <_IntExit>

080025d8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
 80025d8:	3801      	subs	r0, #1
 80025da:	3901      	subs	r1, #1
 80025dc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80025e0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d101      	bne.n	80025ec <strcmp+0x14>
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1f7      	bne.n	80025dc <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
 80025ec:	1a98      	subs	r0, r3, r2
 80025ee:	4770      	bx	lr

080025f0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
 80025f0:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
 80025f2:	ea81 0400 	eor.w	r4, r1, r0
 80025f6:	4603      	mov	r3, r0
 80025f8:	07a5      	lsls	r5, r4, #30
 80025fa:	d00b      	beq.n	8002614 <memcpy+0x24>
 80025fc:	3b01      	subs	r3, #1
 80025fe:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
 8002600:	4291      	cmp	r1, r2
 8002602:	d11a      	bne.n	800263a <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8002604:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
 8002606:	2a00      	cmp	r2, #0
 8002608:	d0fc      	beq.n	8002604 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
 800260a:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
 800260e:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
 8002610:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
 8002614:	079c      	lsls	r4, r3, #30
 8002616:	d1f6      	bne.n	8002606 <memcpy+0x16>
 8002618:	0895      	lsrs	r5, r2, #2
 800261a:	1f1e      	subs	r6, r3, #4
 800261c:	00ac      	lsls	r4, r5, #2
 800261e:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
 8002620:	42b9      	cmp	r1, r7
 8002622:	d105      	bne.n	8002630 <memcpy+0x40>
 8002624:	f06f 0603 	mvn.w	r6, #3
 8002628:	4423      	add	r3, r4
 800262a:	fb06 2205 	mla	r2, r6, r5, r2
 800262e:	e7e5      	b.n	80025fc <memcpy+0xc>
			*(d_word++) = *(s_word++);
 8002630:	f851 cb04 	ldr.w	ip, [r1], #4
 8002634:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
 8002638:	e7f2      	b.n	8002620 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
 800263a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800263e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 8002642:	e7dd      	b.n	8002600 <memcpy+0x10>

08002644 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 8002644:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
 8002646:	4603      	mov	r3, r0
{
 8002648:	b570      	push	{r4, r5, r6, lr}

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
 800264a:	079c      	lsls	r4, r3, #30
 800264c:	d110      	bne.n	8002670 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
 800264e:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
 8002652:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
 8002656:	0894      	lsrs	r4, r2, #2
 8002658:	eb03 0684 	add.w	r6, r3, r4, lsl #2
 800265c:	42b3      	cmp	r3, r6
 800265e:	d10d      	bne.n	800267c <memset+0x38>
 8002660:	f06f 0503 	mvn.w	r5, #3
 8002664:	fb05 2404 	mla	r4, r5, r4, r2
 8002668:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
 800266a:	42a3      	cmp	r3, r4
 800266c:	d109      	bne.n	8002682 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 800266e:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
 8002670:	2a00      	cmp	r2, #0
 8002672:	d0fc      	beq.n	800266e <memset+0x2a>
		*(d_byte++) = c_byte;
 8002674:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8002678:	3a01      	subs	r2, #1
 800267a:	e7e6      	b.n	800264a <memset+0x6>
		*(d_word++) = c_word;
 800267c:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
 8002680:	e7ec      	b.n	800265c <memset+0x18>
		*(d_byte++) = c_byte;
 8002682:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8002686:	e7f0      	b.n	800266a <memset+0x26>

08002688 <_stdout_hook_default>:
}
 8002688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800268c:	4770      	bx	lr

0800268e <gpio_stm32_isr>:
	struct gpio_stm32_data *data = dev->driver_data;
 800268e:	688a      	ldr	r2, [r1, #8]
	if ((BIT(line) & data->cb_pins) != 0) {
 8002690:	6813      	ldr	r3, [r2, #0]
 8002692:	40c3      	lsrs	r3, r0
 8002694:	07db      	lsls	r3, r3, #31
{
 8002696:	b570      	push	{r4, r5, r6, lr}
 8002698:	460e      	mov	r6, r1
	if ((BIT(line) & data->cb_pins) != 0) {
 800269a:	d50f      	bpl.n	80026bc <gpio_stm32_isr+0x2e>
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800269c:	6851      	ldr	r1, [r2, #4]
 800269e:	b169      	cbz	r1, 80026bc <gpio_stm32_isr+0x2e>
		gpio_fire_callbacks(&data->cb, dev, BIT(line));
 80026a0:	2501      	movs	r5, #1
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 80026a2:	680c      	ldr	r4, [r1, #0]
 80026a4:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 80026a6:	688b      	ldr	r3, [r1, #8]
 80026a8:	421d      	tst	r5, r3
 80026aa:	d003      	beq.n	80026b4 <gpio_stm32_isr+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
 80026ac:	684b      	ldr	r3, [r1, #4]
 80026ae:	462a      	mov	r2, r5
 80026b0:	4630      	mov	r0, r6
 80026b2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 80026b4:	b114      	cbz	r4, 80026bc <gpio_stm32_isr+0x2e>
 80026b6:	4621      	mov	r1, r4
 80026b8:	6824      	ldr	r4, [r4, #0]
 80026ba:	e7f4      	b.n	80026a6 <gpio_stm32_isr+0x18>
}
 80026bc:	bd70      	pop	{r4, r5, r6, pc}

080026be <gpio_stm32_write>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 80026be:	6800      	ldr	r0, [r0, #0]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80026c0:	6880      	ldr	r0, [r0, #8]
{
 80026c2:	b510      	push	{r4, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80026c4:	6800      	ldr	r0, [r0, #0]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 80026c6:	b941      	cbnz	r1, 80026da <gpio_stm32_write+0x1c>
	pinval = 1 << pin;
 80026c8:	2401      	movs	r4, #1
 80026ca:	fa04 f202 	lsl.w	r2, r4, r2
	if (value != 0U) {
 80026ce:	b113      	cbz	r3, 80026d6 <gpio_stm32_write+0x18>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80026d0:	6182      	str	r2, [r0, #24]
}
 80026d2:	4608      	mov	r0, r1
 80026d4:	bd10      	pop	{r4, pc}
 80026d6:	0412      	lsls	r2, r2, #16
 80026d8:	e7fa      	b.n	80026d0 <gpio_stm32_write+0x12>
		return -ENOTSUP;
 80026da:	f06f 0122 	mvn.w	r1, #34	; 0x22
 80026de:	e7f8      	b.n	80026d2 <gpio_stm32_write+0x14>

080026e0 <gpio_stm32_read>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 80026e0:	6800      	ldr	r0, [r0, #0]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80026e2:	6880      	ldr	r0, [r0, #8]
{
 80026e4:	b510      	push	{r4, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80026e6:	6800      	ldr	r0, [r0, #0]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 80026e8:	b931      	cbnz	r1, 80026f8 <gpio_stm32_read+0x18>
  return (uint32_t)(READ_REG(GPIOx->IDR));
 80026ea:	6904      	ldr	r4, [r0, #16]
	*value = (LL_GPIO_ReadInputPort(gpio) >> pin) & 0x1;
 80026ec:	40d4      	lsrs	r4, r2
 80026ee:	f004 0401 	and.w	r4, r4, #1
 80026f2:	601c      	str	r4, [r3, #0]
}
 80026f4:	4608      	mov	r0, r1
 80026f6:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
 80026f8:	f06f 0122 	mvn.w	r1, #34	; 0x22
 80026fc:	e7fa      	b.n	80026f4 <gpio_stm32_read+0x14>

080026fe <gpio_stm32_manage_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 80026fe:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
 8002700:	6858      	ldr	r0, [r3, #4]
{
 8002702:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
 8002704:	b158      	cbz	r0, 800271e <gpio_stm32_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002706:	2400      	movs	r4, #0
 8002708:	4281      	cmp	r1, r0
 800270a:	d113      	bne.n	8002734 <gpio_stm32_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
 800270c:	6808      	ldr	r0, [r1, #0]
 800270e:	b95c      	cbnz	r4, 8002728 <gpio_stm32_manage_callback+0x2a>
 8002710:	689c      	ldr	r4, [r3, #8]
	list->head = node;
 8002712:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 8002714:	42a1      	cmp	r1, r4
 8002716:	d100      	bne.n	800271a <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 8002718:	6098      	str	r0, [r3, #8]
	parent->next = child;
 800271a:	2000      	movs	r0, #0
 800271c:	6008      	str	r0, [r1, #0]
	if (set) {
 800271e:	b972      	cbnz	r2, 800273e <gpio_stm32_manage_callback+0x40>
	return 0;
 8002720:	2000      	movs	r0, #0
}
 8002722:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002724:	4628      	mov	r0, r5
 8002726:	e7ef      	b.n	8002708 <gpio_stm32_manage_callback+0xa>
	parent->next = child;
 8002728:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 800272a:	6898      	ldr	r0, [r3, #8]
 800272c:	4281      	cmp	r1, r0
	list->tail = node;
 800272e:	bf08      	it	eq
 8002730:	609c      	streq	r4, [r3, #8]
 8002732:	e7f2      	b.n	800271a <gpio_stm32_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8002734:	6805      	ldr	r5, [r0, #0]
	return node->next;
 8002736:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002738:	2d00      	cmp	r5, #0
 800273a:	d1f3      	bne.n	8002724 <gpio_stm32_manage_callback+0x26>
			if (!set) {
 800273c:	b13a      	cbz	r2, 800274e <gpio_stm32_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
 800273e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
 8002740:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 8002742:	6898      	ldr	r0, [r3, #8]
	list->head = node;
 8002744:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 8002746:	2800      	cmp	r0, #0
 8002748:	d1ea      	bne.n	8002720 <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 800274a:	6099      	str	r1, [r3, #8]
 800274c:	e7e9      	b.n	8002722 <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 800274e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 8002752:	e7e6      	b.n	8002722 <gpio_stm32_manage_callback+0x24>

08002754 <gpio_stm32_enable_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 8002754:	6880      	ldr	r0, [r0, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8002756:	b939      	cbnz	r1, 8002768 <gpio_stm32_enable_callback+0x14>
	data->cb_pins |= BIT(pin);
 8002758:	2301      	movs	r3, #1
 800275a:	fa03 f202 	lsl.w	r2, r3, r2
 800275e:	6803      	ldr	r3, [r0, #0]
 8002760:	4313      	orrs	r3, r2
 8002762:	6003      	str	r3, [r0, #0]
}
 8002764:	4608      	mov	r0, r1
 8002766:	4770      	bx	lr
		return -ENOTSUP;
 8002768:	f06f 0122 	mvn.w	r1, #34	; 0x22
 800276c:	e7fa      	b.n	8002764 <gpio_stm32_enable_callback+0x10>

0800276e <gpio_stm32_disable_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 800276e:	6880      	ldr	r0, [r0, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8002770:	b941      	cbnz	r1, 8002784 <gpio_stm32_disable_callback+0x16>
	data->cb_pins &= ~BIT(pin);
 8002772:	2301      	movs	r3, #1
 8002774:	fa03 f202 	lsl.w	r2, r3, r2
 8002778:	6803      	ldr	r3, [r0, #0]
 800277a:	ea23 0302 	bic.w	r3, r3, r2
 800277e:	6003      	str	r3, [r0, #0]
}
 8002780:	4608      	mov	r0, r1
 8002782:	4770      	bx	lr
		return -ENOTSUP;
 8002784:	f06f 0122 	mvn.w	r1, #34	; 0x22
 8002788:	e7fa      	b.n	8002780 <gpio_stm32_disable_callback+0x12>

0800278a <gpio_stm32_flags_to_conf>:
	int direction = flags & GPIO_DIR_MASK;
 800278a:	f000 0301 	and.w	r3, r0, #1
	if (pincfg == NULL) {
 800278e:	b1b1      	cbz	r1, 80027be <gpio_stm32_flags_to_conf+0x34>
	if (direction == GPIO_DIR_OUT) {
 8002790:	b123      	cbz	r3, 800279c <gpio_stm32_flags_to_conf+0x12>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8002792:	2310      	movs	r3, #16
 8002794:	600b      	str	r3, [r1, #0]
	return 0;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	4770      	bx	lr
	int pud = flags & GPIO_PUD_MASK;
 800279c:	f400 7040 	and.w	r0, r0, #768	; 0x300
		if (pud == GPIO_PUD_PULL_UP) {
 80027a0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80027a4:	d103      	bne.n	80027ae <gpio_stm32_flags_to_conf+0x24>
			*pincfg |= STM32_PINCFG_PULL_UP;
 80027a6:	f44f 7200 	mov.w	r2, #512	; 0x200
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 80027aa:	600a      	str	r2, [r1, #0]
 80027ac:	e7f4      	b.n	8002798 <gpio_stm32_flags_to_conf+0xe>
		} else if (pud == GPIO_PUD_PULL_DOWN) {
 80027ae:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80027b2:	d001      	beq.n	80027b8 <gpio_stm32_flags_to_conf+0x2e>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 80027b4:	600b      	str	r3, [r1, #0]
 80027b6:	e7ef      	b.n	8002798 <gpio_stm32_flags_to_conf+0xe>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 80027b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027bc:	e7f5      	b.n	80027aa <gpio_stm32_flags_to_conf+0x20>
		return -EINVAL;
 80027be:	f06f 0315 	mvn.w	r3, #21
 80027c2:	e7e9      	b.n	8002798 <gpio_stm32_flags_to_conf+0xe>

080027c4 <gpio_stm32_configure>:
{
 80027c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 80027c6:	f002 0530 	and.w	r5, r2, #48	; 0x30
	pinval = 1 << pin;
 80027ca:	2401      	movs	r4, #1
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80027cc:	f8d0 c000 	ldr.w	ip, [r0]
 80027d0:	408c      	lsls	r4, r1
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 80027d2:	092e      	lsrs	r6, r5, #4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 80027d8:	fab7 f787 	clz	r7, r7
 80027dc:	f04f 0e03 	mov.w	lr, #3
 80027e0:	007f      	lsls	r7, r7, #1
 80027e2:	fa0e f707 	lsl.w	r7, lr, r7
 80027e6:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 80027ee:	fab7 f787 	clz	r7, r7
	if (STM32_MODER_ALT_MODE == mode) {
 80027f2:	2d20      	cmp	r5, #32
 80027f4:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80027f8:	fa06 f607 	lsl.w	r6, r6, r7
 80027fc:	ea46 060c 	orr.w	r6, r6, ip
 8002800:	6006      	str	r6, [r0, #0]
 8002802:	d116      	bne.n	8002832 <gpio_stm32_configure+0x6e>
		if (pin < 8) {
 8002804:	2907      	cmp	r1, #7
 8002806:	dc49      	bgt.n	800289c <gpio_stm32_configure+0xd8>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002808:	6a07      	ldr	r7, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280a:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 800280e:	b10e      	cbz	r6, 8002814 <gpio_stm32_configure+0x50>
  return __builtin_clz(value);
 8002810:	fab6 f586 	clz	r5, r6
 8002814:	260f      	movs	r6, #15
 8002816:	00ad      	lsls	r5, r5, #2
 8002818:	fa06 f505 	lsl.w	r5, r6, r5
 800281c:	ea27 0605 	bic.w	r6, r7, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	fa94 f5a4 	rbit	r5, r4
  return __builtin_clz(value);
 8002824:	fab5 f585 	clz	r5, r5
 8002828:	00ad      	lsls	r5, r5, #2
 800282a:	fa03 f505 	lsl.w	r5, r3, r5
 800282e:	4335      	orrs	r5, r6
 8002830:	6205      	str	r5, [r0, #32]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002832:	6845      	ldr	r5, [r0, #4]
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8002834:	f3c2 1380 	ubfx	r3, r2, #6, #1
 8002838:	ea25 0504 	bic.w	r5, r5, r4
 800283c:	fa03 f101 	lsl.w	r1, r3, r1
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8002840:	f3c2 13c1 	ubfx	r3, r2, #7, #2
 8002844:	4329      	orrs	r1, r5
 8002846:	6041      	str	r1, [r0, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002848:	6885      	ldr	r5, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	fa94 f1a4 	rbit	r1, r4
  return __builtin_clz(value);
 800284e:	fab1 f181 	clz	r1, r1
 8002852:	2603      	movs	r6, #3
 8002854:	0049      	lsls	r1, r1, #1
 8002856:	fa06 f101 	lsl.w	r1, r6, r1
 800285a:	ea25 0501 	bic.w	r5, r5, r1
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	fa94 f1a4 	rbit	r1, r4
  return __builtin_clz(value);
 8002862:	fab1 f181 	clz	r1, r1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8002866:	f3c2 2241 	ubfx	r2, r2, #9, #2
 800286a:	0049      	lsls	r1, r1, #1
 800286c:	408b      	lsls	r3, r1
 800286e:	432b      	orrs	r3, r5
 8002870:	6083      	str	r3, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002872:	68c1      	ldr	r1, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002874:	fa94 f3a4 	rbit	r3, r4
  return __builtin_clz(value);
 8002878:	fab3 f383 	clz	r3, r3
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	fa06 f303 	lsl.w	r3, r6, r3
 8002882:	ea21 0303 	bic.w	r3, r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	fa94 f4a4 	rbit	r4, r4
  return __builtin_clz(value);
 800288a:	fab4 f484 	clz	r4, r4
 800288e:	0064      	lsls	r4, r4, #1
 8002890:	fa02 f404 	lsl.w	r4, r2, r4
 8002894:	431c      	orrs	r4, r3
 8002896:	60c4      	str	r4, [r0, #12]
}
 8002898:	2000      	movs	r0, #0
 800289a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800289c:	6a47      	ldr	r7, [r0, #36]	; 0x24
 800289e:	0a26      	lsrs	r6, r4, #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	fa96 fca6 	rbit	ip, r6
  if (value == 0U)
 80028a4:	f1bc 0f00 	cmp.w	ip, #0
 80028a8:	d001      	beq.n	80028ae <gpio_stm32_configure+0xea>
  return __builtin_clz(value);
 80028aa:	fabc f58c 	clz	r5, ip
 80028ae:	f04f 0c0f 	mov.w	ip, #15
 80028b2:	00ad      	lsls	r5, r5, #2
 80028b4:	fa0c f505 	lsl.w	r5, ip, r5
 80028b8:	ea27 0505 	bic.w	r5, r7, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	fa96 f6a6 	rbit	r6, r6
  return __builtin_clz(value);
 80028c0:	fab6 f686 	clz	r6, r6
 80028c4:	00b6      	lsls	r6, r6, #2
 80028c6:	40b3      	lsls	r3, r6
 80028c8:	432b      	orrs	r3, r5
 80028ca:	6243      	str	r3, [r0, #36]	; 0x24
 80028cc:	e7b1      	b.n	8002832 <gpio_stm32_configure+0x6e>

080028ce <uart_stm32_set_baudrate>:
	const struct uart_stm32_config *config = DEV_CFG(dev);
 80028ce:	6803      	ldr	r3, [r0, #0]
{
 80028d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80028d2:	460c      	mov	r4, r1
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80028d4:	6899      	ldr	r1, [r3, #8]
	clock_control_get_rate(data->clock,
 80028d6:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->driver_api;

	__ASSERT(api->get_rate != NULL, "%s not implemented for device %s",
		__func__, dev->config->name);

	return api->get_rate(dev, sys, rate);
 80028d8:	aa01      	add	r2, sp, #4
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80028da:	f851 5b08 	ldr.w	r5, [r1], #8
	clock_control_get_rate(data->clock,
 80028de:	6858      	ldr	r0, [r3, #4]
 80028e0:	6843      	ldr	r3, [r0, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	4798      	blx	r3
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80028e6:	9901      	ldr	r1, [sp, #4]
 80028e8:	eb01 0154 	add.w	r1, r1, r4, lsr #1
 80028ec:	fbb1 f1f4 	udiv	r1, r1, r4
 80028f0:	b289      	uxth	r1, r1
 80028f2:	60e9      	str	r1, [r5, #12]
}
 80028f4:	b003      	add	sp, #12
 80028f6:	bd30      	pop	{r4, r5, pc}

080028f8 <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80028f8:	6803      	ldr	r3, [r0, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80028fe:	69da      	ldr	r2, [r3, #28]
 8002900:	0612      	lsls	r2, r2, #24
 8002902:	d5fc      	bpl.n	80028fe <uart_stm32_poll_out+0x6>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8002904:	2240      	movs	r2, #64	; 0x40
 8002906:	621a      	str	r2, [r3, #32]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8002908:	6299      	str	r1, [r3, #40]	; 0x28
}
 800290a:	4770      	bx	lr

0800290c <uart_stm32_err_check>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800290c:	6803      	ldr	r3, [r0, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002912:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8002914:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002916:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 800291a:	07d2      	lsls	r2, r2, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800291c:	69da      	ldr	r2, [r3, #28]
		err |= UART_ERROR_PARITY;
 800291e:	bf48      	it	mi
 8002920:	f040 0002 	orrmi.w	r0, r0, #2
 8002924:	0791      	lsls	r1, r2, #30
		err |= UART_ERROR_FRAMING;
 8002926:	bf48      	it	mi
 8002928:	f040 0004 	orrmi.w	r0, r0, #4
	if (err & UART_ERROR_OVERRUN) {
 800292c:	07c2      	lsls	r2, r0, #31
 800292e:	d501      	bpl.n	8002934 <uart_stm32_err_check+0x28>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002930:	2208      	movs	r2, #8
 8002932:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 8002934:	0781      	lsls	r1, r0, #30
 8002936:	d501      	bpl.n	800293c <uart_stm32_err_check+0x30>
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8002938:	2201      	movs	r2, #1
 800293a:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 800293c:	0742      	lsls	r2, r0, #29
 800293e:	d501      	bpl.n	8002944 <uart_stm32_err_check+0x38>
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8002940:	2202      	movs	r2, #2
 8002942:	621a      	str	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NCF);
 8002944:	2204      	movs	r2, #4
 8002946:	621a      	str	r2, [r3, #32]
}
 8002948:	4770      	bx	lr

0800294a <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800294a:	6803      	ldr	r3, [r0, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002950:	69da      	ldr	r2, [r3, #28]
 8002952:	0710      	lsls	r0, r2, #28
 8002954:	d501      	bpl.n	800295a <uart_stm32_poll_in+0x10>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002956:	2208      	movs	r2, #8
 8002958:	621a      	str	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800295a:	69da      	ldr	r2, [r3, #28]
 800295c:	0692      	lsls	r2, r2, #26
 800295e:	d503      	bpl.n	8002968 <uart_stm32_poll_in+0x1e>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return 0;
 8002962:	2000      	movs	r0, #0
 8002964:	700b      	strb	r3, [r1, #0]
 8002966:	4770      	bx	lr
		return -1;
 8002968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800296c:	4770      	bx	lr

0800296e <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 800296e:	6883      	ldr	r3, [r0, #8]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002974:	6803      	ldr	r3, [r0, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800297a:	6813      	ldr	r3, [r2, #0]
 800297c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8002980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002984:	d028      	beq.n	80029d8 <uart_stm32_config_get+0x6a>
		return UART_CFG_PARITY_NONE;
 8002986:	f5a3 60c0 	sub.w	r0, r3, #1536	; 0x600
 800298a:	4243      	negs	r3, r0
 800298c:	4143      	adcs	r3, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 800298e:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8002990:	6853      	ldr	r3, [r2, #4]
 8002992:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8002996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800299a:	d01f      	beq.n	80029dc <uart_stm32_config_get+0x6e>
 800299c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029a0:	d01e      	beq.n	80029e0 <uart_stm32_config_get+0x72>
 80029a2:	2b00      	cmp	r3, #0
		return UART_CFG_STOP_BITS_2;
 80029a4:	bf0c      	ite	eq
 80029a6:	2301      	moveq	r3, #1
 80029a8:	2303      	movne	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 80029aa:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80029ac:	6813      	ldr	r3, [r2, #0]
 80029ae:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
	switch (db) {
 80029b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b6:	d015      	beq.n	80029e4 <uart_stm32_config_get+0x76>
 80029b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		return UART_CFG_DATA_BITS_8;
 80029bc:	bf0c      	ite	eq
 80029be:	2302      	moveq	r3, #2
 80029c0:	2303      	movne	r3, #3
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 80029c2:	718b      	strb	r3, [r1, #6]
}
 80029c4:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80029c6:	6893      	ldr	r3, [r2, #8]
 80029c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 80029cc:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 80029d0:	4253      	negs	r3, r2
 80029d2:	4153      	adcs	r3, r2
 80029d4:	71cb      	strb	r3, [r1, #7]
}
 80029d6:	4770      	bx	lr
		return UART_CFG_PARITY_EVEN;
 80029d8:	2302      	movs	r3, #2
 80029da:	e7d8      	b.n	800298e <uart_stm32_config_get+0x20>
		return UART_CFG_STOP_BITS_0_5;
 80029dc:	2300      	movs	r3, #0
 80029de:	e7e4      	b.n	80029aa <uart_stm32_config_get+0x3c>
		return UART_CFG_STOP_BITS_1_5;
 80029e0:	2302      	movs	r3, #2
 80029e2:	e7e2      	b.n	80029aa <uart_stm32_config_get+0x3c>
		return UART_CFG_DATA_BITS_9;
 80029e4:	2304      	movs	r3, #4
 80029e6:	e7ec      	b.n	80029c2 <uart_stm32_config_get+0x54>

080029e8 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 80029e8:	7b43      	ldrb	r3, [r0, #13]
 80029ea:	06db      	lsls	r3, r3, #27
 80029ec:	bf03      	ittte	eq
 80029ee:	6980      	ldreq	r0, [r0, #24]
 80029f0:	fab0 f080 	clzeq	r0, r0
 80029f4:	0940      	lsreq	r0, r0, #5
 80029f6:	2000      	movne	r0, #0
}
 80029f8:	4770      	bx	lr

080029fa <z_unpend_thread_no_timeout>:
{
 80029fa:	b538      	push	{r3, r4, r5, lr}
 80029fc:	4604      	mov	r4, r0
	__asm__ volatile(
 80029fe:	f04f 0310 	mov.w	r3, #16
 8002a02:	f3ef 8511 	mrs	r5, BASEPRI
 8002a06:	f383 8811 	msr	BASEPRI, r3
 8002a0a:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8002a0e:	4601      	mov	r1, r0
 8002a10:	6880      	ldr	r0, [r0, #8]
 8002a12:	f7fe fffd 	bl	8001a10 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8002a16:	7b63      	ldrb	r3, [r4, #13]
 8002a18:	f023 0302 	bic.w	r3, r3, #2
 8002a1c:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
 8002a1e:	f385 8811 	msr	BASEPRI, r5
 8002a22:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60a3      	str	r3, [r4, #8]
}
 8002a2a:	bd38      	pop	{r3, r4, r5, pc}

08002a2c <z_reschedule>:
{
 8002a2c:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_is_in_isr();
 8002a2e:	b939      	cbnz	r1, 8002a40 <z_reschedule+0x14>
 8002a30:	f7fe ffaa 	bl	8001988 <resched.part.15>
	if (resched(key.key)) {
 8002a34:	b120      	cbz	r0, 8002a40 <z_reschedule+0x14>
 8002a36:	4608      	mov	r0, r1
}
 8002a38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002a3c:	f7fe ba26 	b.w	8000e8c <__swap>
 8002a40:	f381 8811 	msr	BASEPRI, r1
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	bd08      	pop	{r3, pc}

08002a4a <z_reschedule_irqlock>:
{
 8002a4a:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_is_in_isr();
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	b938      	cbnz	r0, 8002a60 <z_reschedule_irqlock+0x16>
 8002a50:	f7fe ff9a 	bl	8001988 <resched.part.15>
	if (resched(key)) {
 8002a54:	b120      	cbz	r0, 8002a60 <z_reschedule_irqlock+0x16>
 8002a56:	4610      	mov	r0, r2
}
 8002a58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002a5c:	f7fe ba16 	b.w	8000e8c <__swap>
 8002a60:	f382 8811 	msr	BASEPRI, r2
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	bd08      	pop	{r3, pc}

08002a6a <z_reschedule_unlocked>:
	__asm__ volatile(
 8002a6a:	f04f 0310 	mov.w	r3, #16
 8002a6e:	f3ef 8011 	mrs	r0, BASEPRI
 8002a72:	f383 8811 	msr	BASEPRI, r3
 8002a76:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
 8002a7a:	f7ff bfe6 	b.w	8002a4a <z_reschedule_irqlock>

08002a7e <z_priq_dumb_best>:
	return list->head == list;
 8002a7e:	6803      	ldr	r3, [r0, #0]
}
 8002a80:	4298      	cmp	r0, r3
 8002a82:	bf14      	ite	ne
 8002a84:	4618      	movne	r0, r3
 8002a86:	2000      	moveq	r0, #0
 8002a88:	4770      	bx	lr

08002a8a <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
 8002a8a:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
 8002a8e:	b570      	push	{r4, r5, r6, lr}
 8002a90:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
 8002a92:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
 8002a96:	b1cb      	cbz	r3, 8002acc <z_thread_timeout+0x42>
 8002a98:	f04f 0310 	mov.w	r3, #16
 8002a9c:	f3ef 8611 	mrs	r6, BASEPRI
 8002aa0:	f383 8811 	msr	BASEPRI, r3
 8002aa4:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8002aa8:	4629      	mov	r1, r5
 8002aaa:	f850 0c10 	ldr.w	r0, [r0, #-16]
 8002aae:	f7fe ffaf 	bl	8001a10 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8002ab2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 8002ab6:	f023 0302 	bic.w	r3, r3, #2
 8002aba:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
 8002abe:	f386 8811 	msr	BASEPRI, r6
 8002ac2:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8002acc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
 8002ad0:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8002ad2:	f023 0314 	bic.w	r3, r3, #20
 8002ad6:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
 8002ada:	f7ff ff85 	bl	80029e8 <z_is_thread_ready>
 8002ade:	b120      	cbz	r0, 8002aea <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
 8002ae0:	4628      	mov	r0, r5
}
 8002ae2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002ae6:	f7fe bfe3 	b.w	8001ab0 <z_add_thread_to_ready_q>
 8002aea:	bd70      	pop	{r4, r5, r6, pc}

08002aec <z_impl_k_sleep>:
{
 8002aec:	b510      	push	{r4, lr}
	if (ticks == 0) {
 8002aee:	4604      	mov	r4, r0
 8002af0:	b958      	cbnz	r0, 8002b0a <z_impl_k_sleep+0x1e>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
 8002af2:	f7ff f8e7 	bl	8001cc4 <z_impl_k_yield>
}

static inline u64_t __ticks_to_ms(s64_t ticks)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	return (u64_t)ticks * MSEC_PER_SEC /
 8002af6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002afa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002afe:	2300      	movs	r3, #0
 8002b00:	fb84 0100 	smull	r0, r1, r4, r0
 8002b04:	f7fd fb78 	bl	80001f8 <__aeabi_uldivmod>
}
 8002b08:	bd10      	pop	{r4, pc}
 8002b0a:	f7ff f8a1 	bl	8001c50 <z_tick_sleep.part.16>
 8002b0e:	4604      	mov	r4, r0
 8002b10:	e7f1      	b.n	8002af6 <z_impl_k_sleep+0xa>

08002b12 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8002b12:	7b43      	ldrb	r3, [r0, #13]
 8002b14:	06db      	lsls	r3, r3, #27
 8002b16:	bf03      	ittte	eq
 8002b18:	6980      	ldreq	r0, [r0, #24]
 8002b1a:	fab0 f080 	clzeq	r0, r0
 8002b1e:	0940      	lsreq	r0, r0, #5
 8002b20:	2000      	movne	r0, #0
}
 8002b22:	4770      	bx	lr

08002b24 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
 8002b24:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 8002b26:	b510      	push	{r4, lr}
 8002b28:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
 8002b2a:	b103      	cbz	r3, 8002b2e <z_thread_single_abort+0xa>
		thread->fn_abort();
 8002b2c:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f7ff ffef 	bl	8002b12 <z_is_thread_ready>
 8002b34:	b138      	cbz	r0, 8002b46 <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
 8002b36:	4620      	mov	r0, r4
 8002b38:	f7ff f864 	bl	8001c04 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
 8002b3c:	7b63      	ldrb	r3, [r4, #13]
 8002b3e:	f043 0308 	orr.w	r3, r3, #8
 8002b42:	7363      	strb	r3, [r4, #13]
}
 8002b44:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
 8002b46:	7b63      	ldrb	r3, [r4, #13]
 8002b48:	079b      	lsls	r3, r3, #30
 8002b4a:	d502      	bpl.n	8002b52 <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	f7ff ff54 	bl	80029fa <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
 8002b52:	69a3      	ldr	r3, [r4, #24]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f1      	beq.n	8002b3c <z_thread_single_abort+0x18>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8002b58:	f104 0018 	add.w	r0, r4, #24
 8002b5c:	f000 f809 	bl	8002b72 <z_abort_timeout>
 8002b60:	e7ec      	b.n	8002b3c <z_thread_single_abort+0x18>

08002b62 <z_init_thread_base>:
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
 8002b62:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
 8002b64:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
 8002b66:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
 8002b68:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
 8002b6a:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
 8002b6c:	e9c0 3306 	strd	r3, r3, [r0, #24]

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
 8002b70:	4770      	bx	lr

08002b72 <z_abort_timeout>:
{
 8002b72:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002b74:	f04f 0210 	mov.w	r2, #16
 8002b78:	f3ef 8411 	mrs	r4, BASEPRI
 8002b7c:	f382 8811 	msr	BASEPRI, r2
 8002b80:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8002b84:	6803      	ldr	r3, [r0, #0]
 8002b86:	b13b      	cbz	r3, 8002b98 <z_abort_timeout+0x26>
			remove_timeout(to);
 8002b88:	f7ff f990 	bl	8001eac <remove_timeout>
			ret = 0;
 8002b8c:	2000      	movs	r0, #0
	__asm__ volatile(
 8002b8e:	f384 8811 	msr	BASEPRI, r4
 8002b92:	f3bf 8f6f 	isb	sy
}
 8002b96:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8002b98:	f06f 0015 	mvn.w	r0, #21
 8002b9c:	e7f7      	b.n	8002b8e <z_abort_timeout+0x1c>

08002b9e <z_get_next_timeout_expiry>:
{
 8002b9e:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002ba0:	f04f 0310 	mov.w	r3, #16
 8002ba4:	f3ef 8411 	mrs	r4, BASEPRI
 8002ba8:	f383 8811 	msr	BASEPRI, r3
 8002bac:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
 8002bb0:	f7ff f990 	bl	8001ed4 <next_timeout>
	__asm__ volatile(
 8002bb4:	f384 8811 	msr	BASEPRI, r4
 8002bb8:	f3bf 8f6f 	isb	sy
}
 8002bbc:	bd10      	pop	{r4, pc}

08002bbe <z_set_timeout_expiry>:
{
 8002bbe:	b570      	push	{r4, r5, r6, lr}
 8002bc0:	4604      	mov	r4, r0
 8002bc2:	460e      	mov	r6, r1
	__asm__ volatile(
 8002bc4:	f04f 0310 	mov.w	r3, #16
 8002bc8:	f3ef 8511 	mrs	r5, BASEPRI
 8002bcc:	f383 8811 	msr	BASEPRI, r3
 8002bd0:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
 8002bd4:	f7ff f97e 	bl	8001ed4 <next_timeout>
		if (sooner && !imminent) {
 8002bd8:	42a0      	cmp	r0, r4
 8002bda:	dd05      	ble.n	8002be8 <z_set_timeout_expiry+0x2a>
 8002bdc:	2801      	cmp	r0, #1
 8002bde:	dd03      	ble.n	8002be8 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
 8002be0:	4631      	mov	r1, r6
 8002be2:	4620      	mov	r0, r4
 8002be4:	f7fd ff98 	bl	8000b18 <z_clock_set_timeout>
	__asm__ volatile(
 8002be8:	f385 8811 	msr	BASEPRI, r5
 8002bec:	f3bf 8f6f 	isb	sy
}
 8002bf0:	bd70      	pop	{r4, r5, r6, pc}

08002bf2 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
 8002bf2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
 8002bf4:	f7ff fa26 	bl	8002044 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
 8002bf8:	bd08      	pop	{r3, pc}

08002bfa <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
 8002bfa:	b508      	push	{r3, lr}
	__asm__ volatile(
 8002bfc:	f04f 0210 	mov.w	r2, #16
 8002c00:	f3ef 8311 	mrs	r3, BASEPRI
 8002c04:	f382 8811 	msr	BASEPRI, r2
 8002c08:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
 8002c0c:	f7ff ffc7 	bl	8002b9e <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
 8002c10:	2101      	movs	r1, #1
 8002c12:	2802      	cmp	r0, #2
 8002c14:	bfd8      	it	le
 8002c16:	4608      	movle	r0, r1
 8002c18:	f7ff ffd1 	bl	8002bbe <z_set_timeout_expiry>
	k_cpu_idle();
 8002c1c:	f7fe fb24 	bl	8001268 <k_cpu_idle>
 8002c20:	e7ec      	b.n	8002bfc <idle+0x2>

08002c22 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
 8002c22:	4770      	bx	lr
