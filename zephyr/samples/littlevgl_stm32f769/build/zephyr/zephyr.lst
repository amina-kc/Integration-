
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

08000000 <_vector_table>:
 8000000:	2002d0e8 	.word	0x2002d0e8
 8000004:	0800d389 	.word	0x0800d389
 8000008:	08016729 	.word	0x08016729
 800000c:	0800d231 	.word	0x0800d231
 8000010:	0800d231 	.word	0x0800d231
 8000014:	0800d231 	.word	0x0800d231
 8000018:	0800d231 	.word	0x0800d231
 800001c:	0800d231 	.word	0x0800d231
 8000020:	0800d231 	.word	0x0800d231
 8000024:	0800d231 	.word	0x0800d231
 8000028:	0800d231 	.word	0x0800d231
 800002c:	0800cec5 	.word	0x0800cec5
 8000030:	0800d231 	.word	0x0800d231
 8000034:	0800d231 	.word	0x0800d231
 8000038:	0800ce7d 	.word	0x0800ce7d
 800003c:	080009fd 	.word	0x080009fd

08000040 <_irq_vector_table>:
 8000040:	0800d361 0800d361 0800d361 0800d361     a...a...a...a...
 8000050:	0800d361 0800d361 0800d361 0800d361     a...a...a...a...
 8000060:	0800d361 0800d361 0800d361 0800d361     a...a...a...a...
 8000070:	0800d361 0800d361 0800d361 0800d361     a...a...a...a...
 8000080:	0800d361 0800d361 0800d361 0800d361     a...a...a...a...
 8000090:	0800d361 0800d361 0800d361 0800d361     a...a...a...a...
 80000a0:	0800d361 0800d361 0800d361 0800d361     a...a...a...a...
 80000b0:	0800d361 0800d361 0800d361 0800d361     a...a...a...a...
 80000c0:	0800d361 0800d361 0800d361 0800d361     a...a...a...a...
 80000d0:	0800d361 0800d361 0800d361 0800d361     a...a...a...a...
 80000e0:	0800d361 0800d361 0800d361 0800d361     a...a...a...a...
 80000f0:	0800d361 0800d361 0800d361 0800d361     a...a...a...a...
 8000100:	0800d361 0800d361 0800d361 0800d361     a...a...a...a...
 8000110:	0800d361 0800d361 0800d361 0800d361     a...a...a...a...
 8000120:	0800d361 0800d361 0800d361 0800d361     a...a...a...a...
 8000130:	0800d361 0800d361 0800d361 0800d361     a...a...a...a...
 8000140:	0800d361 0800d361 0800d361 0800d361     a...a...a...a...
 8000150:	0800d361 0800d361 0800d361 0800d361     a...a...a...a...
 8000160:	0800d361 0800d361 0800d361 0800d361     a...a...a...a...
 8000170:	0800d361 0800d361 0800d361 0800d361     a...a...a...a...
 8000180:	0800d361 0800d361 0800d361 0800d361     a...a...a...a...
 8000190:	0800d361 0800d361 0800d361 0800d361     a...a...a...a...
 80001a0:	0800d361 0800d361 0800d361 0800d361     a...a...a...a...
 80001b0:	0800d361 0800d361 0800d361 0800d361     a...a...a...a...
 80001c0:	0800d361 0800d361 0800d361 0800d361     a...a...a...a...
 80001d0:	0800d361 0800d361 0800d361 0800d361     a...a...a...a...
 80001e0:	0800d361 0800d361 0800d361 0800d361     a...a...a...a...
 80001f0:	0800d361 0800d361                       a...a...

Disassembly of section _TEXT_SECTION_NAME_2:

080001f8 <__aeabi_uldivmod>:
 80001f8:	b953      	cbnz	r3, 8000210 <__aeabi_uldivmod+0x18>
 80001fa:	b94a      	cbnz	r2, 8000210 <__aeabi_uldivmod+0x18>
 80001fc:	2900      	cmp	r1, #0
 80001fe:	bf08      	it	eq
 8000200:	2800      	cmpeq	r0, #0
 8000202:	bf1c      	itt	ne
 8000204:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000208:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800020c:	f000 b80c 	b.w	8000228 <__aeabi_idiv0>
 8000210:	f1ad 0c08 	sub.w	ip, sp, #8
 8000214:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000218:	f000 f808 	bl	800022c <__udivmoddi4>
 800021c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000224:	b004      	add	sp, #16
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop

0800022c <__udivmoddi4>:
 800022c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000230:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8000232:	4615      	mov	r5, r2
 8000234:	4604      	mov	r4, r0
 8000236:	468e      	mov	lr, r1
 8000238:	461e      	mov	r6, r3
 800023a:	2b00      	cmp	r3, #0
 800023c:	f040 80cc 	bne.w	80003d8 <__udivmoddi4+0x1ac>
 8000240:	428a      	cmp	r2, r1
 8000242:	fab2 fc82 	clz	ip, r2
 8000246:	d94c      	bls.n	80002e2 <__udivmoddi4+0xb6>
 8000248:	f1bc 0f00 	cmp.w	ip, #0
 800024c:	d00b      	beq.n	8000266 <__udivmoddi4+0x3a>
 800024e:	f1cc 0820 	rsb	r8, ip, #32
 8000252:	fa01 fe0c 	lsl.w	lr, r1, ip
 8000256:	fa20 f808 	lsr.w	r8, r0, r8
 800025a:	fa02 f50c 	lsl.w	r5, r2, ip
 800025e:	ea48 0e0e 	orr.w	lr, r8, lr
 8000262:	fa00 f40c 	lsl.w	r4, r0, ip
 8000266:	ea4f 4915 	mov.w	r9, r5, lsr #16
 800026a:	fa1f f885 	uxth.w	r8, r5
 800026e:	fbbe faf9 	udiv	sl, lr, r9
 8000272:	0c21      	lsrs	r1, r4, #16
 8000274:	fb09 e31a 	mls	r3, r9, sl, lr
 8000278:	fb0a fb08 	mul.w	fp, sl, r8
 800027c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000280:	459b      	cmp	fp, r3
 8000282:	d92a      	bls.n	80002da <__udivmoddi4+0xae>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
 800028a:	d204      	bcs.n	8000296 <__udivmoddi4+0x6a>
 800028c:	459b      	cmp	fp, r3
 800028e:	d902      	bls.n	8000296 <__udivmoddi4+0x6a>
 8000290:	f1aa 0002 	sub.w	r0, sl, #2
 8000294:	442b      	add	r3, r5
 8000296:	eba3 030b 	sub.w	r3, r3, fp
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f2f9 	udiv	r2, r3, r9
 80002a0:	fb09 3312 	mls	r3, r9, r2, r3
 80002a4:	fb02 f808 	mul.w	r8, r2, r8
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	45a0      	cmp	r8, r4
 80002ae:	d916      	bls.n	80002de <__udivmoddi4+0xb2>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 80002b6:	d203      	bcs.n	80002c0 <__udivmoddi4+0x94>
 80002b8:	45a0      	cmp	r8, r4
 80002ba:	d901      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002bc:	1e93      	subs	r3, r2, #2
 80002be:	442c      	add	r4, r5
 80002c0:	eba4 0408 	sub.w	r4, r4, r8
 80002c4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80002c8:	b127      	cbz	r7, 80002d4 <__udivmoddi4+0xa8>
 80002ca:	fa24 f40c 	lsr.w	r4, r4, ip
 80002ce:	2300      	movs	r3, #0
 80002d0:	603c      	str	r4, [r7, #0]
 80002d2:	607b      	str	r3, [r7, #4]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80002da:	4650      	mov	r0, sl
 80002dc:	e7db      	b.n	8000296 <__udivmoddi4+0x6a>
 80002de:	4613      	mov	r3, r2
 80002e0:	e7ee      	b.n	80002c0 <__udivmoddi4+0x94>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xba>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	f1bc 0f00 	cmp.w	ip, #0
 80002ea:	d12e      	bne.n	800034a <__udivmoddi4+0x11e>
 80002ec:	1a8b      	subs	r3, r1, r2
 80002ee:	2601      	movs	r6, #1
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	b2aa      	uxth	r2, r5
 80002f6:	fbb3 f8fe 	udiv	r8, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000300:	fb08 f902 	mul.w	r9, r8, r2
 8000304:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000308:	4599      	cmp	r9, r3
 800030a:	d961      	bls.n	80003d0 <__udivmoddi4+0x1a4>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000312:	d204      	bcs.n	800031e <__udivmoddi4+0xf2>
 8000314:	4599      	cmp	r9, r3
 8000316:	d902      	bls.n	800031e <__udivmoddi4+0xf2>
 8000318:	f1a8 0002 	sub.w	r0, r8, #2
 800031c:	442b      	add	r3, r5
 800031e:	eba3 0309 	sub.w	r3, r3, r9
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f1fe 	udiv	r1, r3, lr
 8000328:	fb0e 3311 	mls	r3, lr, r1, r3
 800032c:	434a      	muls	r2, r1
 800032e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000332:	42a2      	cmp	r2, r4
 8000334:	d94e      	bls.n	80003d4 <__udivmoddi4+0x1a8>
 8000336:	192c      	adds	r4, r5, r4
 8000338:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
 800033c:	d203      	bcs.n	8000346 <__udivmoddi4+0x11a>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d901      	bls.n	8000346 <__udivmoddi4+0x11a>
 8000342:	1e8b      	subs	r3, r1, #2
 8000344:	442c      	add	r4, r5
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	e7bc      	b.n	80002c4 <__udivmoddi4+0x98>
 800034a:	f1cc 0e20 	rsb	lr, ip, #32
 800034e:	fa02 f50c 	lsl.w	r5, r2, ip
 8000352:	fa21 f90e 	lsr.w	r9, r1, lr
 8000356:	fa01 f30c 	lsl.w	r3, r1, ip
 800035a:	fa20 fe0e 	lsr.w	lr, r0, lr
 800035e:	ea4e 0303 	orr.w	r3, lr, r3
 8000362:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000366:	fa00 f40c 	lsl.w	r4, r0, ip
 800036a:	fbb9 f1f8 	udiv	r1, r9, r8
 800036e:	fa1f fe85 	uxth.w	lr, r5
 8000372:	fb08 9211 	mls	r2, r8, r1, r9
 8000376:	0c18      	lsrs	r0, r3, #16
 8000378:	fb01 f60e 	mul.w	r6, r1, lr
 800037c:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8000380:	4296      	cmp	r6, r2
 8000382:	d921      	bls.n	80003c8 <__udivmoddi4+0x19c>
 8000384:	18aa      	adds	r2, r5, r2
 8000386:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800038a:	d203      	bcs.n	8000394 <__udivmoddi4+0x168>
 800038c:	4296      	cmp	r6, r2
 800038e:	d901      	bls.n	8000394 <__udivmoddi4+0x168>
 8000390:	1e88      	subs	r0, r1, #2
 8000392:	442a      	add	r2, r5
 8000394:	1b92      	subs	r2, r2, r6
 8000396:	b29b      	uxth	r3, r3
 8000398:	fbb2 f9f8 	udiv	r9, r2, r8
 800039c:	fb08 2219 	mls	r2, r8, r9, r2
 80003a0:	fb09 fe0e 	mul.w	lr, r9, lr
 80003a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a8:	459e      	cmp	lr, r3
 80003aa:	d90f      	bls.n	80003cc <__udivmoddi4+0x1a0>
 80003ac:	18eb      	adds	r3, r5, r3
 80003ae:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 80003b2:	d204      	bcs.n	80003be <__udivmoddi4+0x192>
 80003b4:	459e      	cmp	lr, r3
 80003b6:	d902      	bls.n	80003be <__udivmoddi4+0x192>
 80003b8:	f1a9 0602 	sub.w	r6, r9, #2
 80003bc:	442b      	add	r3, r5
 80003be:	eba3 030e 	sub.w	r3, r3, lr
 80003c2:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80003c6:	e793      	b.n	80002f0 <__udivmoddi4+0xc4>
 80003c8:	4608      	mov	r0, r1
 80003ca:	e7e3      	b.n	8000394 <__udivmoddi4+0x168>
 80003cc:	464e      	mov	r6, r9
 80003ce:	e7f6      	b.n	80003be <__udivmoddi4+0x192>
 80003d0:	4640      	mov	r0, r8
 80003d2:	e7a4      	b.n	800031e <__udivmoddi4+0xf2>
 80003d4:	460b      	mov	r3, r1
 80003d6:	e7b6      	b.n	8000346 <__udivmoddi4+0x11a>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d905      	bls.n	80003e8 <__udivmoddi4+0x1bc>
 80003dc:	b10f      	cbz	r7, 80003e2 <__udivmoddi4+0x1b6>
 80003de:	e9c7 0100 	strd	r0, r1, [r7]
 80003e2:	2600      	movs	r6, #0
 80003e4:	4630      	mov	r0, r6
 80003e6:	e775      	b.n	80002d4 <__udivmoddi4+0xa8>
 80003e8:	fab3 fc83 	clz	ip, r3
 80003ec:	f1bc 0f00 	cmp.w	ip, #0
 80003f0:	d10f      	bne.n	8000412 <__udivmoddi4+0x1e6>
 80003f2:	428b      	cmp	r3, r1
 80003f4:	d301      	bcc.n	80003fa <__udivmoddi4+0x1ce>
 80003f6:	4282      	cmp	r2, r0
 80003f8:	d809      	bhi.n	800040e <__udivmoddi4+0x1e2>
 80003fa:	1a84      	subs	r4, r0, r2
 80003fc:	eb61 0e03 	sbc.w	lr, r1, r3
 8000400:	2001      	movs	r0, #1
 8000402:	2f00      	cmp	r7, #0
 8000404:	d06a      	beq.n	80004dc <__udivmoddi4+0x2b0>
 8000406:	e9c7 4e00 	strd	r4, lr, [r7]
 800040a:	2600      	movs	r6, #0
 800040c:	e762      	b.n	80002d4 <__udivmoddi4+0xa8>
 800040e:	4660      	mov	r0, ip
 8000410:	e7f7      	b.n	8000402 <__udivmoddi4+0x1d6>
 8000412:	f1cc 0e20 	rsb	lr, ip, #32
 8000416:	fa03 f30c 	lsl.w	r3, r3, ip
 800041a:	fa22 f50e 	lsr.w	r5, r2, lr
 800041e:	fa21 f40e 	lsr.w	r4, r1, lr
 8000422:	431d      	orrs	r5, r3
 8000424:	fa01 f30c 	lsl.w	r3, r1, ip
 8000428:	fa20 f10e 	lsr.w	r1, r0, lr
 800042c:	430b      	orrs	r3, r1
 800042e:	ea4f 4a15 	mov.w	sl, r5, lsr #16
 8000432:	fa00 f60c 	lsl.w	r6, r0, ip
 8000436:	fbb4 f9fa 	udiv	r9, r4, sl
 800043a:	fa1f f885 	uxth.w	r8, r5
 800043e:	fb0a 4019 	mls	r0, sl, r9, r4
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	fb09 f108 	mul.w	r1, r9, r8
 8000448:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 800044c:	42a1      	cmp	r1, r4
 800044e:	fa02 f20c 	lsl.w	r2, r2, ip
 8000452:	d93f      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800045a:	d204      	bcs.n	8000466 <__udivmoddi4+0x23a>
 800045c:	42a1      	cmp	r1, r4
 800045e:	d902      	bls.n	8000466 <__udivmoddi4+0x23a>
 8000460:	f1a9 0002 	sub.w	r0, r9, #2
 8000464:	442c      	add	r4, r5
 8000466:	1a64      	subs	r4, r4, r1
 8000468:	b29b      	uxth	r3, r3
 800046a:	fbb4 f9fa 	udiv	r9, r4, sl
 800046e:	fb0a 4419 	mls	r4, sl, r9, r4
 8000472:	fb09 f808 	mul.w	r8, r9, r8
 8000476:	ea43 4104 	orr.w	r1, r3, r4, lsl #16
 800047a:	4588      	cmp	r8, r1
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8000484:	d204      	bcs.n	8000490 <__udivmoddi4+0x264>
 8000486:	4588      	cmp	r8, r1
 8000488:	d902      	bls.n	8000490 <__udivmoddi4+0x264>
 800048a:	f1a9 0302 	sub.w	r3, r9, #2
 800048e:	4429      	add	r1, r5
 8000490:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000494:	eba1 0108 	sub.w	r1, r1, r8
 8000498:	fba0 8902 	umull	r8, r9, r0, r2
 800049c:	4549      	cmp	r1, r9
 800049e:	46c2      	mov	sl, r8
 80004a0:	464c      	mov	r4, r9
 80004a2:	d302      	bcc.n	80004aa <__udivmoddi4+0x27e>
 80004a4:	d106      	bne.n	80004b4 <__udivmoddi4+0x288>
 80004a6:	4546      	cmp	r6, r8
 80004a8:	d204      	bcs.n	80004b4 <__udivmoddi4+0x288>
 80004aa:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ae:	eb69 0405 	sbc.w	r4, r9, r5
 80004b2:	3801      	subs	r0, #1
 80004b4:	b197      	cbz	r7, 80004dc <__udivmoddi4+0x2b0>
 80004b6:	ebb6 030a 	subs.w	r3, r6, sl
 80004ba:	eb61 0604 	sbc.w	r6, r1, r4
 80004be:	fa06 fe0e 	lsl.w	lr, r6, lr
 80004c2:	fa23 f30c 	lsr.w	r3, r3, ip
 80004c6:	ea4e 0303 	orr.w	r3, lr, r3
 80004ca:	fa26 f60c 	lsr.w	r6, r6, ip
 80004ce:	e9c7 3600 	strd	r3, r6, [r7]
 80004d2:	e79a      	b.n	800040a <__udivmoddi4+0x1de>
 80004d4:	4648      	mov	r0, r9
 80004d6:	e7c6      	b.n	8000466 <__udivmoddi4+0x23a>
 80004d8:	464b      	mov	r3, r9
 80004da:	e7d9      	b.n	8000490 <__udivmoddi4+0x264>
 80004dc:	463e      	mov	r6, r7
 80004de:	e6f9      	b.n	80002d4 <__udivmoddi4+0xa8>

080004e0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 80004e0:	680b      	ldr	r3, [r1, #0]
 80004e2:	3301      	adds	r3, #1
 80004e4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 80004e6:	4b01      	ldr	r3, [pc, #4]	; (80004ec <char_out+0xc>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4718      	bx	r3
 80004ec:	2002da28 	.word	0x2002da28

080004f0 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
 80004f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004f4:	b085      	sub	sp, #20
 80004f6:	469b      	mov	fp, r3
 80004f8:	4616      	mov	r6, r2
 80004fa:	4682      	mov	sl, r0
 80004fc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80004fe:	4688      	mov	r8, r1
 8000500:	2501      	movs	r5, #1
 8000502:	270a      	movs	r7, #10
 8000504:	2c01      	cmp	r4, #1
 8000506:	f04f 0200 	mov.w	r2, #0
 800050a:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8000588 <_printk_dec_ulong+0x98>
 800050e:	bfb8      	it	lt
 8000510:	2401      	movlt	r4, #1
 8000512:	2b01      	cmp	r3, #1
 8000514:	bf0c      	ite	eq
 8000516:	2330      	moveq	r3, #48	; 0x30
 8000518:	2320      	movne	r3, #32
 800051a:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
 800051c:	fbb6 f3f9 	udiv	r3, r6, r9
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	b90a      	cbnz	r2, 8000528 <_printk_dec_ulong+0x38>
 8000524:	45b1      	cmp	r9, r6
 8000526:	d81d      	bhi.n	8000564 <_printk_dec_ulong+0x74>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
 8000528:	9b01      	ldr	r3, [sp, #4]
 800052a:	4641      	mov	r1, r8
			digits++;
 800052c:	3501      	adds	r5, #1
			out((int)(remainder / pos + 48), ctx);
 800052e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000532:	47d0      	blx	sl
			found_largest_digit = 1;
 8000534:	2201      	movs	r2, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
 8000536:	9b01      	ldr	r3, [sp, #4]
		remaining--;
 8000538:	3f01      	subs	r7, #1
		remainder %= pos;
 800053a:	fb09 6613 	mls	r6, r9, r3, r6
	while (pos >= 10) {
 800053e:	2f01      	cmp	r7, #1
		pos /= 10;
 8000540:	f04f 030a 	mov.w	r3, #10
 8000544:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
 8000548:	d1e8      	bne.n	800051c <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
 800054a:	4641      	mov	r1, r8
 800054c:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8000550:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
 8000552:	f1bb 0f03 	cmp.w	fp, #3
 8000556:	d102      	bne.n	800055e <_printk_dec_ulong+0x6e>
		remaining = min_width - digits;
 8000558:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
 800055a:	2c00      	cmp	r4, #0
 800055c:	dc0e      	bgt.n	800057c <_printk_dec_ulong+0x8c>
			out(' ', ctx);
		}
	}
}
 800055e:	b005      	add	sp, #20
 8000560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
 8000564:	42bc      	cmp	r4, r7
 8000566:	dbe6      	blt.n	8000536 <_printk_dec_ulong+0x46>
				&& padding < PAD_SPACE_AFTER) {
 8000568:	f1bb 0f02 	cmp.w	fp, #2
 800056c:	d8e3      	bhi.n	8000536 <_printk_dec_ulong+0x46>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 800056e:	4641      	mov	r1, r8
 8000570:	9802      	ldr	r0, [sp, #8]
 8000572:	9203      	str	r2, [sp, #12]
			digits++;
 8000574:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 8000576:	47d0      	blx	sl
			digits++;
 8000578:	9a03      	ldr	r2, [sp, #12]
 800057a:	e7dc      	b.n	8000536 <_printk_dec_ulong+0x46>
			out(' ', ctx);
 800057c:	4641      	mov	r1, r8
 800057e:	2020      	movs	r0, #32
 8000580:	47d0      	blx	sl
 8000582:	3c01      	subs	r4, #1
 8000584:	e7e9      	b.n	800055a <_printk_dec_ulong+0x6a>
 8000586:	bf00      	nop
 8000588:	3b9aca00 	.word	0x3b9aca00

0800058c <__printk_hook_install>:
	_char_out = fn;
 800058c:	4b01      	ldr	r3, [pc, #4]	; (8000594 <__printk_hook_install+0x8>)
 800058e:	6018      	str	r0, [r3, #0]
}
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	2002da28 	.word	0x2002da28

08000598 <vprintk>:
	struct out_context ctx = { 0 };
 8000598:	2300      	movs	r3, #0
{
 800059a:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
 800059c:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
 800059e:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
 80005a0:	4803      	ldr	r0, [pc, #12]	; (80005b0 <vprintk+0x18>)
 80005a2:	460b      	mov	r3, r1
 80005a4:	a901      	add	r1, sp, #4
 80005a6:	f00d fdf3 	bl	800e190 <z_vprintk>
}
 80005aa:	b003      	add	sp, #12
 80005ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80005b0:	080004e1 	.word	0x080004e1

080005b4 <st_stm32f7_init>:
 * So the init priority has to be 0 (zero).
 *
 * @return 0
 */
static int st_stm32f7_init(struct device *arg)
{
 80005b4:	b5f0      	push	{r4, r5, r6, r7, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 80005b6:	f04f 0310 	mov.w	r3, #16
 80005ba:	f3ef 8011 	mrs	r0, BASEPRI
 80005be:	f383 8811 	msr	BASEPRI, r3
 80005c2:	f3bf 8f6f 	isb	sy
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80005c6:	4b26      	ldr	r3, [pc, #152]	; (8000660 <st_stm32f7_init+0xac>)
 80005c8:	695a      	ldr	r2, [r3, #20]
 80005ca:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 80005ce:	d111      	bne.n	80005f4 <st_stm32f7_init+0x40>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005d4:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005d8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005e0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005e4:	695a      	ldr	r2, [r3, #20]
 80005e6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80005ea:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005f0:	f3bf 8f6f 	isb	sy
	ARG_UNUSED(arg);

	key = irq_lock();

	SCB_EnableICache();
	if (!(SCB->CCR & SCB_CCR_DC_Msk)) {
 80005f4:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <st_stm32f7_init+0xac>)
 80005f6:	695a      	ldr	r2, [r3, #20]
 80005f8:	03d2      	lsls	r2, r2, #15
 80005fa:	d428      	bmi.n	800064e <st_stm32f7_init+0x9a>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80005fc:	695a      	ldr	r2, [r3, #20]
 80005fe:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
 8000602:	d124      	bne.n	800064e <st_stm32f7_init+0x9a>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000604:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000608:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800060c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000610:	f643 75e0 	movw	r5, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000614:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000618:	f3c2 324e 	ubfx	r2, r2, #13, #15
 800061c:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800061e:	ea02 0705 	and.w	r7, r2, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000622:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000624:	ea47 7681 	orr.w	r6, r7, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000628:	f111 31ff 	adds.w	r1, r1, #4294967295	; 0xffffffff
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800062c:	f8c3 6260 	str.w	r6, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8000630:	d2f8      	bcs.n	8000624 <st_stm32f7_init+0x70>
 8000632:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 8000634:	f112 0f20 	cmn.w	r2, #32
 8000638:	d1f1      	bne.n	800061e <st_stm32f7_init+0x6a>
 800063a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800063e:	695a      	ldr	r2, [r3, #20]
 8000640:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000644:	615a      	str	r2, [r3, #20]
 8000646:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800064a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 800064e:	f380 8811 	msr	BASEPRI, r0
 8000652:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 16 MHz from HSI */
	SystemCoreClock = 16000000;
 8000656:	4b03      	ldr	r3, [pc, #12]	; (8000664 <st_stm32f7_init+0xb0>)

	return 0;
}
 8000658:	2000      	movs	r0, #0
	SystemCoreClock = 16000000;
 800065a:	4a03      	ldr	r2, [pc, #12]	; (8000668 <st_stm32f7_init+0xb4>)
 800065c:	601a      	str	r2, [r3, #0]
}
 800065e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000660:	e000ed00 	.word	0xe000ed00
 8000664:	2002da40 	.word	0x2002da40
 8000668:	00f42400 	.word	0x00f42400

0800066c <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 800066c:	280a      	cmp	r0, #10
{
 800066e:	b538      	push	{r3, r4, r5, lr}
 8000670:	4604      	mov	r4, r0
 8000672:	4d07      	ldr	r5, [pc, #28]	; (8000690 <console_out+0x24>)
	if ('\n' == c) {
 8000674:	d104      	bne.n	8000680 <console_out+0x14>
 8000676:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
 8000678:	210d      	movs	r1, #13
 800067a:	6843      	ldr	r3, [r0, #4]
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
 8000680:	6828      	ldr	r0, [r5, #0]
 8000682:	b2e1      	uxtb	r1, r4
 8000684:	6843      	ldr	r3, [r0, #4]
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	4798      	blx	r3

	return c;
}
 800068a:	4620      	mov	r0, r4
 800068c:	bd38      	pop	{r3, r4, r5, pc}
 800068e:	bf00      	nop
 8000690:	20020008 	.word	0x20020008

08000694 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
 8000694:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
 8000696:	4c04      	ldr	r4, [pc, #16]	; (80006a8 <uart_console_hook_install+0x14>)
 8000698:	4620      	mov	r0, r4
 800069a:	f00c fea5 	bl	800d3e8 <__stdout_hook_install>
	__printk_hook_install(console_out);
 800069e:	4620      	mov	r0, r4
}
 80006a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
 80006a4:	f7ff bf72 	b.w	800058c <__printk_hook_install>
 80006a8:	0800066d 	.word	0x0800066d

080006ac <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
 80006ac:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE1(K_SYSCALL_DEVICE_GET_BINDING, device_get_binding, struct device *, const char *, name)
 80006ae:	4804      	ldr	r0, [pc, #16]	; (80006c0 <uart_console_init+0x14>)
 80006b0:	f00d f844 	bl	800d73c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 80006b4:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <uart_console_init+0x18>)
 80006b6:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
 80006b8:	f7ff ffec 	bl	8000694 <uart_console_hook_install>

	return 0;
}
 80006bc:	2000      	movs	r0, #0
 80006be:	bd08      	pop	{r3, pc}
 80006c0:	0801750a 	.word	0x0801750a
 80006c4:	20020008 	.word	0x20020008

080006c8 <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, void *arg)
{
 80006c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct device *dev = arg;
	struct stm32_exti_data *data = dev->driver_data;
 80006cc:	6895      	ldr	r5, [r2, #8]
{
 80006ce:	4604      	mov	r4, r0
 80006d0:	460f      	mov	r7, r1
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 80006d2:	f04f 0801 	mov.w	r8, #1
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80006d6:	4e0b      	ldr	r6, [pc, #44]	; (8000704 <__stm32_exti_isr+0x3c>)
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 80006d8:	f105 0904 	add.w	r9, r5, #4
	for (line = min; line < max; line++) {
 80006dc:	42bc      	cmp	r4, r7
 80006de:	db01      	blt.n	80006e4 <__stm32_exti_isr+0x1c>
		}
	}
}
 80006e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 80006e4:	fa08 f304 	lsl.w	r3, r8, r4
 80006e8:	6972      	ldr	r2, [r6, #20]
		if (stm32_exti_is_pending(line)) {
 80006ea:	ea33 0202 	bics.w	r2, r3, r2
 80006ee:	d107      	bne.n	8000700 <__stm32_exti_isr+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 80006f0:	6173      	str	r3, [r6, #20]
			if (!data->cb[line].cb) {
 80006f2:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 80006f6:	b11b      	cbz	r3, 8000700 <__stm32_exti_isr+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 80006f8:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 80006fc:	4620      	mov	r0, r4
 80006fe:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8000700:	3401      	adds	r4, #1
 8000702:	e7eb      	b.n	80006dc <__stm32_exti_isr+0x14>
 8000704:	40013c00 	.word	0x40013c00

08000708 <stm32_exti_enable>:
	if (line < 32) {
 8000708:	281f      	cmp	r0, #31
{
 800070a:	b508      	push	{r3, lr}
	if (line < 32) {
 800070c:	dd02      	ble.n	8000714 <stm32_exti_enable+0xc>
		return -ENOTSUP;
 800070e:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 8000712:	bd08      	pop	{r3, pc}
  SET_BIT(EXTI->IMR, ExtiLine);
 8000714:	4a07      	ldr	r2, [pc, #28]	; (8000734 <stm32_exti_enable+0x2c>)
		LL_EXTI_EnableIT_0_31(1 << line);
 8000716:	2301      	movs	r3, #1
	if (line <= ARRAY_SIZE(exti_irq_table)) {
 8000718:	2818      	cmp	r0, #24
 800071a:	6811      	ldr	r1, [r2, #0]
		LL_EXTI_EnableIT_0_31(1 << line);
 800071c:	fa03 f300 	lsl.w	r3, r3, r0
 8000720:	ea43 0301 	orr.w	r3, r3, r1
 8000724:	6013      	str	r3, [r2, #0]
	if (line <= ARRAY_SIZE(exti_irq_table)) {
 8000726:	dcf2      	bgt.n	800070e <stm32_exti_enable+0x6>
	irq_enable(irqnum);
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <stm32_exti_enable+0x30>)
 800072a:	5618      	ldrsb	r0, [r3, r0]
 800072c:	f00c fd2a 	bl	800d184 <z_arch_irq_enable>
	return 0;
 8000730:	2000      	movs	r0, #0
 8000732:	e7ee      	b.n	8000712 <stm32_exti_enable+0xa>
 8000734:	40013c00 	.word	0x40013c00
 8000738:	08017511 	.word	0x08017511

0800073c <stm32_exti_trigger>:
	if (trigger & STM32_EXTI_TRIG_RISING) {
 800073c:	07ca      	lsls	r2, r1, #31
{
 800073e:	b510      	push	{r4, lr}
	if (trigger & STM32_EXTI_TRIG_RISING) {
 8000740:	d507      	bpl.n	8000752 <stm32_exti_trigger+0x16>
		if (line < 32) {
 8000742:	281f      	cmp	r0, #31
 8000744:	dc05      	bgt.n	8000752 <stm32_exti_trigger+0x16>
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <stm32_exti_trigger+0x2c>)
			LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8000748:	2201      	movs	r2, #1
 800074a:	689c      	ldr	r4, [r3, #8]
 800074c:	4082      	lsls	r2, r0
 800074e:	4322      	orrs	r2, r4
 8000750:	609a      	str	r2, [r3, #8]
	if (trigger & STM32_EXTI_TRIG_FALLING) {
 8000752:	078b      	lsls	r3, r1, #30
 8000754:	d507      	bpl.n	8000766 <stm32_exti_trigger+0x2a>
		if (line < 32) {
 8000756:	281f      	cmp	r0, #31
 8000758:	dc05      	bgt.n	8000766 <stm32_exti_trigger+0x2a>
  SET_BIT(EXTI->FTSR, ExtiLine);
 800075a:	4a03      	ldr	r2, [pc, #12]	; (8000768 <stm32_exti_trigger+0x2c>)
			LL_EXTI_EnableFallingTrig_0_31(1 << line);
 800075c:	2301      	movs	r3, #1
 800075e:	68d1      	ldr	r1, [r2, #12]
 8000760:	4083      	lsls	r3, r0
 8000762:	430b      	orrs	r3, r1
 8000764:	60d3      	str	r3, [r2, #12]
}
 8000766:	bd10      	pop	{r4, pc}
 8000768:	40013c00 	.word	0x40013c00

0800076c <stm32_exti_set_callback>:
				void *arg)
{
	struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->driver_data;

	if (data->cb[line].cb) {
 800076c:	4907      	ldr	r1, [pc, #28]	; (800078c <stm32_exti_set_callback+0x20>)
{
 800076e:	b530      	push	{r4, r5, lr}
 8000770:	688c      	ldr	r4, [r1, #8]
	if (data->cb[line].cb) {
 8000772:	f854 1030 	ldr.w	r1, [r4, r0, lsl #3]
 8000776:	eb04 05c0 	add.w	r5, r4, r0, lsl #3
 800077a:	b921      	cbnz	r1, 8000786 <stm32_exti_set_callback+0x1a>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 800077c:	f844 2030 	str.w	r2, [r4, r0, lsl #3]
	data->cb[line].data = arg;

	return 0;
 8000780:	4608      	mov	r0, r1
	data->cb[line].data = arg;
 8000782:	606b      	str	r3, [r5, #4]
}
 8000784:	bd30      	pop	{r4, r5, pc}
		return -EBUSY;
 8000786:	f06f 000f 	mvn.w	r0, #15
 800078a:	e7fb      	b.n	8000784 <stm32_exti_set_callback+0x18>
 800078c:	2002e8b8 	.word	0x2002e8b8

08000790 <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8000790:	680b      	ldr	r3, [r1, #0]
{
 8000792:	b084      	sub	sp, #16
	switch (pclken->bus) {
 8000794:	2b03      	cmp	r3, #3
 8000796:	d82d      	bhi.n	80007f4 <stm32_clock_control_on+0x64>
 8000798:	e8df f003 	tbb	[pc, r3]
 800079c:	22180e02 	.word	0x22180e02
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007a0:	4a16      	ldr	r2, [pc, #88]	; (80007fc <stm32_clock_control_on+0x6c>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 80007a2:	684b      	ldr	r3, [r1, #4]
 80007a4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80007a6:	4319      	orrs	r1, r3
 80007a8:	6311      	str	r1, [r2, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80007ac:	4013      	ands	r3, r2
 80007ae:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80007b0:	9b00      	ldr	r3, [sp, #0]
#endif /* CONFIG_SOC_SERIES_STM32L0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 80007b2:	2000      	movs	r0, #0
}
 80007b4:	b004      	add	sp, #16
 80007b6:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007b8:	4a10      	ldr	r2, [pc, #64]	; (80007fc <stm32_clock_control_on+0x6c>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 80007ba:	684b      	ldr	r3, [r1, #4]
 80007bc:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80007be:	4319      	orrs	r1, r3
 80007c0:	6351      	str	r1, [r2, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80007c4:	4013      	ands	r3, r2
 80007c6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80007c8:	9b01      	ldr	r3, [sp, #4]
 80007ca:	e7f2      	b.n	80007b2 <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80007cc:	4a0b      	ldr	r2, [pc, #44]	; (80007fc <stm32_clock_control_on+0x6c>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 80007ce:	684b      	ldr	r3, [r1, #4]
 80007d0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80007d2:	4319      	orrs	r1, r3
 80007d4:	6411      	str	r1, [r2, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80007d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80007d8:	4013      	ands	r3, r2
 80007da:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80007dc:	9b02      	ldr	r3, [sp, #8]
 80007de:	e7e8      	b.n	80007b2 <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80007e0:	4a06      	ldr	r2, [pc, #24]	; (80007fc <stm32_clock_control_on+0x6c>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 80007e2:	684b      	ldr	r3, [r1, #4]
 80007e4:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80007e6:	4319      	orrs	r1, r3
 80007e8:	6451      	str	r1, [r2, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80007ea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80007ec:	4013      	ands	r3, r2
 80007ee:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80007f0:	9b03      	ldr	r3, [sp, #12]
 80007f2:	e7de      	b.n	80007b2 <stm32_clock_control_on+0x22>
		return -ENOTSUP;
 80007f4:	f06f 0022 	mvn.w	r0, #34	; 0x22
 80007f8:	e7dc      	b.n	80007b4 <stm32_clock_control_on+0x24>
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800

08000800 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8000800:	680b      	ldr	r3, [r1, #0]
 8000802:	2b03      	cmp	r3, #3
 8000804:	d820      	bhi.n	8000848 <stm32_clock_control_off+0x48>
 8000806:	e8df f003 	tbb	[pc, r3]
 800080a:	0a02      	.short	0x0a02
 800080c:	1811      	.short	0x1811
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 800080e:	4a10      	ldr	r2, [pc, #64]	; (8000850 <stm32_clock_control_off+0x50>)
 8000810:	6849      	ldr	r1, [r1, #4]
 8000812:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000814:	ea23 0301 	bic.w	r3, r3, r1
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* CONFIG_SOC_SERIES_STM32L0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 800081a:	2000      	movs	r0, #0
 800081c:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 800081e:	4a0c      	ldr	r2, [pc, #48]	; (8000850 <stm32_clock_control_off+0x50>)
 8000820:	6849      	ldr	r1, [r1, #4]
 8000822:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000824:	ea23 0301 	bic.w	r3, r3, r1
 8000828:	6353      	str	r3, [r2, #52]	; 0x34
 800082a:	e7f6      	b.n	800081a <stm32_clock_control_off+0x1a>
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 800082c:	4a08      	ldr	r2, [pc, #32]	; (8000850 <stm32_clock_control_off+0x50>)
 800082e:	6849      	ldr	r1, [r1, #4]
 8000830:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000832:	ea23 0301 	bic.w	r3, r3, r1
 8000836:	6413      	str	r3, [r2, #64]	; 0x40
 8000838:	e7ef      	b.n	800081a <stm32_clock_control_off+0x1a>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800083a:	4a05      	ldr	r2, [pc, #20]	; (8000850 <stm32_clock_control_off+0x50>)
 800083c:	6849      	ldr	r1, [r1, #4]
 800083e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8000840:	ea23 0301 	bic.w	r3, r3, r1
 8000844:	6453      	str	r3, [r2, #68]	; 0x44
 8000846:	e7e8      	b.n	800081a <stm32_clock_control_off+0x1a>
		return -ENOTSUP;
 8000848:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800

08000854 <stm32_clock_control_get_subsys_rate>:
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	u32_t ahb_clock = SystemCoreClock;
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <stm32_clock_control_get_subsys_rate+0x24>)
				CONFIG_CLOCK_STM32_APB2_PRESCALER);
#endif /* CONFIG_SOC_SERIES_STM32F0X */

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8000856:	6809      	ldr	r1, [r1, #0]
	u32_t ahb_clock = SystemCoreClock;
 8000858:	681b      	ldr	r3, [r3, #0]
	switch (pclken->bus) {
 800085a:	2903      	cmp	r1, #3
 800085c:	d809      	bhi.n	8000872 <stm32_clock_control_get_subsys_rate+0x1e>
 800085e:	e8df f001 	tbb	[pc, r1]
 8000862:	0303      	.short	0x0303
 8000864:	0602      	.short	0x0602
	return clock / prescaler;
 8000866:	089b      	lsrs	r3, r3, #2
#if defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32F0X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX)
	case STM32_CLOCK_BUS_APB1_2:
#endif
		*rate = apb1_clock;
 8000868:	6013      	str	r3, [r2, #0]
#endif /* CONFIG_SOC_SERIES_STM32F0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 800086a:	2000      	movs	r0, #0
		break;
 800086c:	4770      	bx	lr
	return clock / prescaler;
 800086e:	085b      	lsrs	r3, r3, #1
 8000870:	e7fa      	b.n	8000868 <stm32_clock_control_get_subsys_rate+0x14>
		return -ENOTSUP;
 8000872:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 8000876:	4770      	bx	lr
 8000878:	2002da40 	.word	0x2002da40

0800087c <stm32_clock_control_init>:
			 mco2_prescaler(CONFIG_CLOCK_STM32_MCO2_DIV));
#endif /* CONFIG_CLOCK_STM32_MCO2_SRC_NOCLOCK */
}

static int stm32_clock_control_init(struct device *dev)
{
 800087c:	b530      	push	{r4, r5, lr}
	clk_init->APB1CLKDivider = apb1_prescaler(
 800087e:	2100      	movs	r1, #0
{
 8000880:	b087      	sub	sp, #28
	clk_init->APB1CLKDivider = apb1_prescaler(
 8000882:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000886:	e9cd 1300 	strd	r1, r3, [sp]
	clk_init->APB2CLKDivider = apb2_prescaler(
 800088a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800088e:	9302      	str	r3, [sp, #8]
#else
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
#endif /* CONFIG_SOC_SERIES_STM32WBX */

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8000890:	f000 f838 	bl	8000904 <config_enable_default_clocks>

#ifdef CONFIG_CLOCK_STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8000894:	a803      	add	r0, sp, #12
 8000896:	f00d fe7c 	bl	800e592 <config_pll_init>
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <stm32_clock_control_init+0x80>)
 800089c:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 800089e:	0790      	lsls	r0, r2, #30
 80008a0:	d406      	bmi.n	80008b0 <stm32_clock_control_init+0x34>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	f042 0201 	orr.w	r2, r2, #1
 80008a8:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80008aa:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 80008ac:	0792      	lsls	r2, r2, #30
 80008ae:	d5fc      	bpl.n	80008aa <stm32_clock_control_init+0x2e>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80008b0:	4c12      	ldr	r4, [pc, #72]	; (80008fc <stm32_clock_control_init+0x80>)
 80008b2:	68a3      	ldr	r3, [r4, #8]
 80008b4:	f023 0303 	bic.w	r3, r3, #3
 80008b8:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80008ba:	68a3      	ldr	r3, [r4, #8]
 80008bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80008c0:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80008c2:	68a5      	ldr	r5, [r4, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 80008c4:	f015 050c 	ands.w	r5, r5, #12
 80008c8:	d1fb      	bne.n	80008c2 <stm32_clock_control_init+0x46>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80008ca:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_CLOCK_STM32_HSE_BYPASS
	hse_bypass = LL_UTILS_HSEBYPASS_ON;
#endif /* CONFIG_CLOCK_STM32_HSE_BYPASS */

	/* Switch to PLL with HSE as clock source */
	LL_PLL_ConfigSystemClock_HSE(
 80008cc:	aa03      	add	r2, sp, #12
 80008ce:	4629      	mov	r1, r5
 80008d0:	480b      	ldr	r0, [pc, #44]	; (8000900 <stm32_clock_control_init+0x84>)
 80008d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80008d6:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 80008d8:	6863      	ldr	r3, [r4, #4]
 80008da:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80008de:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
 80008e2:	6063      	str	r3, [r4, #4]
	LL_PLL_ConfigSystemClock_HSE(
 80008e4:	466b      	mov	r3, sp
 80008e6:	f001 f88d 	bl	8001a04 <LL_PLL_ConfigSystemClock_HSE>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80008ea:	6823      	ldr	r3, [r4, #0]
 80008ec:	f023 0301 	bic.w	r3, r3, #1
 80008f0:	6023      	str	r3, [r4, #0]
		&s_PLLInitStruct,
		&s_ClkInitStruct);

	/* Disable other clocks */
	LL_RCC_HSI_Disable();
	LL_RCC_MSI_Disable();
 80008f2:	f00d fe56 	bl	800e5a2 <LL_RCC_MSI_Disable>

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 80008f6:	4628      	mov	r0, r5
 80008f8:	b007      	add	sp, #28
 80008fa:	bd30      	pop	{r4, r5, pc}
 80008fc:	40023800 	.word	0x40023800
 8000900:	017d7840 	.word	0x017d7840

08000904 <config_enable_default_clocks>:
  SET_BIT(RCC->APB1ENR, Periphs);
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <config_enable_default_clocks+0x1c>)

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8000906:	b082      	sub	sp, #8
 8000908:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800090a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800090e:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000916:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000918:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 800091a:	b002      	add	sp, #8
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800

08000924 <z_pinmux_stm32_set>:
 *
 * @return 0 on success, error otherwise
 */
int z_pinmux_stm32_set(u32_t pin, u32_t func,
				struct device *clk)
{
 8000924:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000926:	4604      	mov	r4, r0
	/* make sure to enable port clock first */
	if (enable_port(STM32_PORT(pin), clk)) {
 8000928:	0906      	lsrs	r6, r0, #4
{
 800092a:	460d      	mov	r5, r1
	if (!clk) {
 800092c:	4610      	mov	r0, r2
 800092e:	b912      	cbnz	r2, 8000936 <z_pinmux_stm32_set+0x12>
 8000930:	4811      	ldr	r0, [pc, #68]	; (8000978 <z_pinmux_stm32_set+0x54>)
 8000932:	f00c ff03 	bl	800d73c <z_impl_device_get_binding>
	pclken.bus = STM32_CLOCK_BUS_GPIO;
 8000936:	2300      	movs	r3, #0
 8000938:	9300      	str	r3, [sp, #0]
	pclken.enr = ports_enable[port];
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <z_pinmux_stm32_set+0x58>)
 800093c:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8000940:	9301      	str	r3, [sp, #4]
	if (pclken.enr == STM32_PORT_NOT_AVAILABLE) {
 8000942:	3301      	adds	r3, #1
 8000944:	d102      	bne.n	800094c <z_pinmux_stm32_set+0x28>
		return -EIO;
 8000946:	f06f 0004 	mvn.w	r0, #4
 800094a:	e012      	b.n	8000972 <z_pinmux_stm32_set+0x4e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
 800094c:	6843      	ldr	r3, [r0, #4]
 800094e:	4669      	mov	r1, sp
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4798      	blx	r3
	if (enable_port(STM32_PORT(pin), clk)) {
 8000954:	2800      	cmp	r0, #0
 8000956:	d1f6      	bne.n	8000946 <z_pinmux_stm32_set+0x22>
	u32_t offset = STM32_PORT(pin) * GPIO_REG_SIZE;
 8000958:	1120      	asrs	r0, r4, #4
	return gpio_stm32_configure((u32_t *)port_base,
 800095a:	f005 030f 	and.w	r3, r5, #15
 800095e:	462a      	mov	r2, r5
 8000960:	f004 010f 	and.w	r1, r4, #15
	u32_t offset = STM32_PORT(pin) * GPIO_REG_SIZE;
 8000964:	0280      	lsls	r0, r0, #10
	return gpio_stm32_configure((u32_t *)port_base,
 8000966:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800096a:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800096e:	f015 ffe9 	bl	8016944 <gpio_stm32_configure>
	}

	return stm32_pin_configure(pin, func, func & STM32_AFR_MASK);
}
 8000972:	b002      	add	sp, #8
 8000974:	bd70      	pop	{r4, r5, r6, pc}
 8000976:	bf00      	nop
 8000978:	08017534 	.word	0x08017534
 800097c:	0801725c 	.word	0x0801725c

08000980 <stm32_setup_pins>:
 * @param pinconf  board pin configuration array
 * @param pins     array size
 */
void stm32_setup_pins(const struct pin_config *pinconf,
		      size_t pins)
{
 8000980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000982:	4604      	mov	r4, r0
 8000984:	4809      	ldr	r0, [pc, #36]	; (80009ac <stm32_setup_pins+0x2c>)
 8000986:	460e      	mov	r6, r1
	struct device *clk;
	int i;

	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);

	for (i = 0; i < pins; i++) {
 8000988:	2500      	movs	r5, #0
 800098a:	f00c fed7 	bl	800d73c <z_impl_device_get_binding>
 800098e:	4607      	mov	r7, r0
 8000990:	42b5      	cmp	r5, r6
 8000992:	f104 0408 	add.w	r4, r4, #8
 8000996:	d100      	bne.n	800099a <stm32_setup_pins+0x1a>
		z_pinmux_stm32_set(pinconf[i].pin_num,
				  pinconf[i].mode,
				  clk);
	}
}
 8000998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_pinmux_stm32_set(pinconf[i].pin_num,
 800099a:	463a      	mov	r2, r7
 800099c:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80009a0:	f814 0c08 	ldrb.w	r0, [r4, #-8]
	for (i = 0; i < pins; i++) {
 80009a4:	3501      	adds	r5, #1
		z_pinmux_stm32_set(pinconf[i].pin_num,
 80009a6:	f7ff ffbd 	bl	8000924 <z_pinmux_stm32_set>
 80009aa:	e7f1      	b.n	8000990 <stm32_setup_pins+0x10>
 80009ac:	08017534 	.word	0x08017534

080009b0 <elapsed>:
	 * the double-overflow if called at the end of a cycle.  There
	 * is no safe algorithm here, so we split the difference by
	 * reading CTRL twice, suppressing the second overflow bit if
	 * VAL was "about to overflow".
	 */
	ctrl1 = SysTick->CTRL;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <elapsed+0x40>)
{
 80009b2:	b530      	push	{r4, r5, lr}
	ctrl1 = SysTick->CTRL;
 80009b4:	681a      	ldr	r2, [r3, #0]
	val = SysTick->VAL & COUNTER_MAX;
 80009b6:	6899      	ldr	r1, [r3, #8]
	ctrl2 = SysTick->CTRL;
 80009b8:	681d      	ldr	r5, [r3, #0]

	overflow_cyc += (ctrl1 & SysTick_CTRL_COUNTFLAG_Msk) ? last_load : 0;
 80009ba:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <elapsed+0x44>)
	val = SysTick->VAL & COUNTER_MAX;
 80009c0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
	overflow_cyc += (ctrl1 & SysTick_CTRL_COUNTFLAG_Msk) ? last_load : 0;
 80009c4:	681c      	ldr	r4, [r3, #0]
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <elapsed+0x48>)
 80009c8:	bf18      	it	ne
 80009ca:	4622      	movne	r2, r4
	if (val > VAL_ABOUT_TO_WRAP) {
 80009cc:	2908      	cmp	r1, #8
	overflow_cyc += (ctrl1 & SysTick_CTRL_COUNTFLAG_Msk) ? last_load : 0;
 80009ce:	6818      	ldr	r0, [r3, #0]
 80009d0:	4402      	add	r2, r0
 80009d2:	601a      	str	r2, [r3, #0]
	if (val > VAL_ABOUT_TO_WRAP) {
 80009d4:	d907      	bls.n	80009e6 <elapsed+0x36>
		int wrap = ctrl2 & SysTick_CTRL_COUNTFLAG_Msk;

		overflow_cyc += (wrap != 0) ? last_load : 0;
 80009d6:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	bf14      	ite	ne
 80009de:	4620      	movne	r0, r4
 80009e0:	2000      	moveq	r0, #0
 80009e2:	4402      	add	r2, r0
 80009e4:	601a      	str	r2, [r3, #0]
	}

	return (last_load - val) + overflow_cyc;
 80009e6:	6818      	ldr	r0, [r3, #0]
 80009e8:	4420      	add	r0, r4
}
 80009ea:	1a40      	subs	r0, r0, r1
 80009ec:	bd30      	pop	{r4, r5, pc}
 80009ee:	bf00      	nop
 80009f0:	e000e010 	.word	0xe000e010
 80009f4:	200200d4 	.word	0x200200d4
 80009f8:	200200d8 	.word	0x200200d8

080009fc <z_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void z_clock_isr(void *arg)
{
 80009fc:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	u32_t dticks;

	cycle_count += last_load;
 80009fe:	4a0d      	ldr	r2, [pc, #52]	; (8000a34 <z_clock_isr+0x38>)
 8000a00:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <z_clock_isr+0x3c>)
 8000a02:	6812      	ldr	r2, [r2, #0]
 8000a04:	6818      	ldr	r0, [r3, #0]
 8000a06:	4410      	add	r0, r2
	dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8000a08:	4a0c      	ldr	r2, [pc, #48]	; (8000a3c <z_clock_isr+0x40>)
 8000a0a:	6811      	ldr	r1, [r2, #0]
	cycle_count += last_load;
 8000a0c:	6018      	str	r0, [r3, #0]
	dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8000a0e:	1a40      	subs	r0, r0, r1
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <z_clock_isr+0x44>)
 8000a12:	fbb0 f0f3 	udiv	r0, r0, r3
	announced_cycles += dticks * CYC_PER_TICK;
 8000a16:	fb03 1300 	mla	r3, r3, r0, r1
 8000a1a:	6013      	str	r3, [r2, #0]

	overflow_cyc = SysTick->CTRL; /* Reset overflow flag */
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <z_clock_isr+0x48>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <z_clock_isr+0x4c>)
 8000a22:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]

	z_clock_announce(TICKLESS ? dticks : 1);
 8000a28:	f00d fa94 	bl	800df54 <z_clock_announce>
	z_ExcExit();
}
 8000a2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_ExcExit();
 8000a30:	f00c b9f0 	b.w	800ce14 <_IntExit>
 8000a34:	200200d4 	.word	0x200200d4
 8000a38:	200200d0 	.word	0x200200d0
 8000a3c:	200200cc 	.word	0x200200cc
 8000a40:	00034bc0 	.word	0x00034bc0
 8000a44:	e000e010 	.word	0xe000e010
 8000a48:	200200d8 	.word	0x200200d8

08000a4c <z_clock_driver_init>:
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <z_clock_driver_init+0x24>)
 8000a4e:	2210      	movs	r2, #16

int z_clock_driver_init(struct device *device)
{
	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
 8000a50:	2000      	movs	r0, #0
 8000a52:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	last_load = CYC_PER_TICK - 1;
 8000a56:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <z_clock_driver_init+0x28>)
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <z_clock_driver_init+0x2c>)
 8000a5a:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8000a5c:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <z_clock_driver_init+0x30>)
 8000a5e:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8000a60:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <z_clock_driver_init+0x34>)
 8000a62:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8000a64:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	f042 0207 	orr.w	r2, r2, #7
 8000a6c:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00
 8000a74:	00034bbf 	.word	0x00034bbf
 8000a78:	200200d4 	.word	0x200200d4
 8000a7c:	200200d8 	.word	0x200200d8
 8000a80:	e000e010 	.word	0xe000e010

08000a84 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
 8000a84:	b570      	push	{r4, r5, r6, lr}
 8000a86:	4c21      	ldr	r4, [pc, #132]	; (8000b0c <z_clock_set_timeout+0x88>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_IDLE) && idle && ticks == K_FOREVER) {
 8000a88:	b151      	cbz	r1, 8000aa0 <z_clock_set_timeout+0x1c>
 8000a8a:	1c43      	adds	r3, r0, #1
 8000a8c:	d108      	bne.n	8000aa0 <z_clock_set_timeout+0x1c>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8000a8e:	4a20      	ldr	r2, [pc, #128]	; (8000b10 <z_clock_set_timeout+0x8c>)
 8000a90:	6813      	ldr	r3, [r2, #0]
 8000a92:	f023 0301 	bic.w	r3, r3, #1
 8000a96:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
 8000a98:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000a9c:	6023      	str	r3, [r4, #0]
	SysTick->LOAD = last_load - 1;
	SysTick->VAL = 0; /* resets timer to last_load */

	k_spin_unlock(&lock, key);
#endif
}
 8000a9e:	bd70      	pop	{r4, r5, r6, pc}
	ticks = MIN(MAX_TICKS, MAX(ticks - 1, 0));
 8000aa0:	3801      	subs	r0, #1
 8000aa2:	284c      	cmp	r0, #76	; 0x4c
 8000aa4:	dc2c      	bgt.n	8000b00 <z_clock_set_timeout+0x7c>
	delay = (ticks == 0) ? MIN_DELAY : ticks * CYC_PER_TICK;
 8000aa6:	2800      	cmp	r0, #0
 8000aa8:	dd2c      	ble.n	8000b04 <z_clock_set_timeout+0x80>
 8000aaa:	4e1a      	ldr	r6, [pc, #104]	; (8000b14 <z_clock_set_timeout+0x90>)
 8000aac:	4346      	muls	r6, r0
	__asm__ volatile(
 8000aae:	f04f 0310 	mov.w	r3, #16
 8000ab2:	f3ef 8511 	mrs	r5, BASEPRI
 8000ab6:	f383 8811 	msr	BASEPRI, r3
 8000aba:	f3bf 8f6f 	isb	sy
	cycle_count += elapsed();
 8000abe:	f7ff ff77 	bl	80009b0 <elapsed>
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <z_clock_set_timeout+0x94>)
	delay = ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8000ac4:	4913      	ldr	r1, [pc, #76]	; (8000b14 <z_clock_set_timeout+0x90>)
	cycle_count += elapsed();
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4410      	add	r0, r2
 8000aca:	6018      	str	r0, [r3, #0]
	delay = delay + (cycle_count - announced_cycles);
 8000acc:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <z_clock_set_timeout+0x98>)
 8000ace:	681a      	ldr	r2, [r3, #0]
	delay = ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8000ad0:	f5c2 3352 	rsb	r3, r2, #215040	; 0x34800
 8000ad4:	f203 33bf 	addw	r3, r3, #959	; 0x3bf
 8000ad8:	4433      	add	r3, r6
 8000ada:	4403      	add	r3, r0
	last_load = delay - (cycle_count - announced_cycles);
 8000adc:	1a10      	subs	r0, r2, r0
	overflow_cyc = 0U;
 8000ade:	2200      	movs	r2, #0
	delay = ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8000ae0:	fbb3 f3f1 	udiv	r3, r3, r1
	last_load = delay - (cycle_count - announced_cycles);
 8000ae4:	fb01 0003 	mla	r0, r1, r3, r0
	overflow_cyc = 0U;
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <z_clock_set_timeout+0x9c>)
	last_load = delay - (cycle_count - announced_cycles);
 8000aea:	6020      	str	r0, [r4, #0]
	SysTick->LOAD = last_load - 1;
 8000aec:	3801      	subs	r0, #1
	overflow_cyc = 0U;
 8000aee:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = last_load - 1;
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <z_clock_set_timeout+0x8c>)
 8000af2:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8000af4:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
 8000af6:	f385 8811 	msr	BASEPRI, r5
 8000afa:	f3bf 8f6f 	isb	sy
 8000afe:	e7ce      	b.n	8000a9e <z_clock_set_timeout+0x1a>
	ticks = MIN(MAX_TICKS, MAX(ticks - 1, 0));
 8000b00:	204c      	movs	r0, #76	; 0x4c
 8000b02:	e7d2      	b.n	8000aaa <z_clock_set_timeout+0x26>
	delay = (ticks == 0) ? MIN_DELAY : ticks * CYC_PER_TICK;
 8000b04:	f243 46bc 	movw	r6, #13500	; 0x34bc
 8000b08:	e7d1      	b.n	8000aae <z_clock_set_timeout+0x2a>
 8000b0a:	bf00      	nop
 8000b0c:	200200d4 	.word	0x200200d4
 8000b10:	e000e010 	.word	0xe000e010
 8000b14:	00034bc0 	.word	0x00034bc0
 8000b18:	200200d0 	.word	0x200200d0
 8000b1c:	200200cc 	.word	0x200200cc
 8000b20:	200200d8 	.word	0x200200d8

08000b24 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
 8000b24:	b510      	push	{r4, lr}
	__asm__ volatile(
 8000b26:	f04f 0310 	mov.w	r3, #16
 8000b2a:	f3ef 8411 	mrs	r4, BASEPRI
 8000b2e:	f383 8811 	msr	BASEPRI, r3
 8000b32:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc = elapsed() + cycle_count - announced_cycles;
 8000b36:	f7ff ff3b 	bl	80009b0 <elapsed>
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <z_clock_elapsed+0x34>)
 8000b3c:	4a07      	ldr	r2, [pc, #28]	; (8000b5c <z_clock_elapsed+0x38>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	6812      	ldr	r2, [r2, #0]
 8000b42:	1a9b      	subs	r3, r3, r2
 8000b44:	4418      	add	r0, r3
	__asm__ volatile(
 8000b46:	f384 8811 	msr	BASEPRI, r4
 8000b4a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 8000b4e:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <z_clock_elapsed+0x3c>)
 8000b50:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b54:	bd10      	pop	{r4, pc}
 8000b56:	bf00      	nop
 8000b58:	200200d0 	.word	0x200200d0
 8000b5c:	200200cc 	.word	0x200200cc
 8000b60:	00034bc0 	.word	0x00034bc0

08000b64 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b64:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b66:	b570      	push	{r4, r5, r6, lr}
 8000b68:	68dc      	ldr	r4, [r3, #12]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b6e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b72:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b76:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b78:	2d04      	cmp	r5, #4
 8000b7a:	bf28      	it	cs
 8000b7c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7e:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	fa06 f505 	lsl.w	r5, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b84:	bf8c      	ite	hi
 8000b86:	3c03      	subhi	r4, #3
 8000b88:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) >= 0)
 8000b8a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	ea21 0105 	bic.w	r1, r1, r5
 8000b90:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b94:	fa06 f404 	lsl.w	r4, r6, r4
 8000b98:	ea22 0304 	bic.w	r3, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	ea43 0301 	orr.w	r3, r3, r1
 8000ba0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000ba4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000ba6:	db06      	blt.n	8000bb6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000bac:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000bb0:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000bb4:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	f000 000f 	and.w	r0, r0, #15
 8000bba:	4a02      	ldr	r2, [pc, #8]	; (8000bc4 <HAL_NVIC_SetPriority+0x60>)
 8000bbc:	5413      	strb	r3, [r2, r0]
 8000bbe:	e7f9      	b.n	8000bb4 <HAL_NVIC_SetPriority+0x50>
 8000bc0:	e000ed00 	.word	0xe000ed00
 8000bc4:	e000ed14 	.word	0xe000ed14

08000bc8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000bc8:	2800      	cmp	r0, #0
 8000bca:	db08      	blt.n	8000bde <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bcc:	0942      	lsrs	r2, r0, #5
 8000bce:	2301      	movs	r3, #1
 8000bd0:	f000 001f 	and.w	r0, r0, #31
 8000bd4:	fa03 f000 	lsl.w	r0, r3, r0
 8000bd8:	4b01      	ldr	r3, [pc, #4]	; (8000be0 <HAL_NVIC_EnableIRQ+0x18>)
 8000bda:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000bde:	4770      	bx	lr
 8000be0:	e000e100 	.word	0xe000e100

08000be4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000be4:	6803      	ldr	r3, [r0, #0]
 8000be6:	2118      	movs	r1, #24
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000bee:	3a10      	subs	r2, #16

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000bf0:	f023 0303 	bic.w	r3, r3, #3
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000bf4:	fbb2 f1f1 	udiv	r1, r2, r1
{
 8000bf8:	b510      	push	{r4, lr}

  if (stream_number > 3U)
 8000bfa:	2a5f      	cmp	r2, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000bfc:	4c03      	ldr	r4, [pc, #12]	; (8000c0c <DMA_CalcBaseAndBitshift+0x28>)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000bfe:	bf88      	it	hi
 8000c00:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000c02:	5c61      	ldrb	r1, [r4, r1]
 8000c04:	6583      	str	r3, [r0, #88]	; 0x58
 8000c06:	65c1      	str	r1, [r0, #92]	; 0x5c
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }

  return hdma->StreamBaseAddress;
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	bd10      	pop	{r4, pc}
 8000c0c:	08017557 	.word	0x08017557

08000c10 <HAL_DMA_Init>:
{
 8000c10:	b570      	push	{r4, r5, r6, lr}
 8000c12:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c14:	f00d fc3a 	bl	800e48c <HAL_GetTick>
 8000c18:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000c1a:	2c00      	cmp	r4, #0
 8000c1c:	d071      	beq.n	8000d02 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000c1e:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 8000c20:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8000c22:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c26:	2302      	movs	r3, #2
 8000c28:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000c2c:	6813      	ldr	r3, [r2, #0]
 8000c2e:	f023 0301 	bic.w	r3, r3, #1
 8000c32:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c34:	6821      	ldr	r1, [r4, #0]
 8000c36:	680b      	ldr	r3, [r1, #0]
 8000c38:	07da      	lsls	r2, r3, #31
 8000c3a:	d43b      	bmi.n	8000cb4 <HAL_DMA_Init+0xa4>
  tmp = hdma->Instance->CR;
 8000c3c:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000c3e:	4d32      	ldr	r5, [pc, #200]	; (8000d08 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c40:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000c42:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000c44:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	68e2      	ldr	r2, [r4, #12]
 8000c4c:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c4e:	6922      	ldr	r2, [r4, #16]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	6962      	ldr	r2, [r4, #20]
 8000c54:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c56:	69e2      	ldr	r2, [r4, #28]
 8000c58:	4303      	orrs	r3, r0
 8000c5a:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c5c:	6a22      	ldr	r2, [r4, #32]
 8000c5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000c60:	432b      	orrs	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000c62:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8000c64:	2d04      	cmp	r5, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000c66:	bf02      	ittt	eq
 8000c68:	e9d4 260b 	ldrdeq	r2, r6, [r4, #44]	; 0x2c
 8000c6c:	4332      	orreq	r2, r6
 8000c6e:	4313      	orreq	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000c70:	2d04      	cmp	r5, #4
  hdma->Instance->CR = tmp;
 8000c72:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000c74:	694a      	ldr	r2, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000c76:	f022 0207 	bic.w	r2, r2, #7
  tmp |= hdma->Init.FIFOMode;
 8000c7a:	ea42 0205 	orr.w	r2, r2, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000c7e:	d10b      	bne.n	8000c98 <HAL_DMA_Init+0x88>
    tmp |= hdma->Init.FIFOThreshold;
 8000c80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000c82:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000c84:	431a      	orrs	r2, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000c86:	b13d      	cbz	r5, 8000c98 <HAL_DMA_Init+0x88>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;

  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000c88:	b9f8      	cbnz	r0, 8000cca <HAL_DMA_Init+0xba>
  {
    switch (tmp)
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d02e      	beq.n	8000cec <HAL_DMA_Init+0xdc>
 8000c8e:	b10b      	cbz	r3, 8000c94 <HAL_DMA_Init+0x84>
 8000c90:	2b02      	cmp	r3, #2
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000c92:	d101      	bne.n	8000c98 <HAL_DMA_Init+0x88>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000c94:	01eb      	lsls	r3, r5, #7
 8000c96:	d42c      	bmi.n	8000cf2 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000c98:	614a      	str	r2, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	f7ff ffa2 	bl	8000be4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ca0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000ca2:	233f      	movs	r3, #63	; 0x3f
 8000ca4:	4093      	lsls	r3, r2
 8000ca6:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ca8:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000caa:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cac:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000cae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000cb2:	e009      	b.n	8000cc8 <HAL_DMA_Init+0xb8>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000cb4:	f00d fbea 	bl	800e48c <HAL_GetTick>
 8000cb8:	1b40      	subs	r0, r0, r5
 8000cba:	2805      	cmp	r0, #5
 8000cbc:	d9ba      	bls.n	8000c34 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000cbe:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000cc0:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000cc2:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000cc4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000cc8:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000cca:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000cce:	d114      	bne.n	8000cfa <HAL_DMA_Init+0xea>
    switch (tmp)
 8000cd0:	2b03      	cmp	r3, #3
 8000cd2:	d8e1      	bhi.n	8000c98 <HAL_DMA_Init+0x88>
 8000cd4:	a001      	add	r0, pc, #4	; (adr r0, 8000cdc <HAL_DMA_Init+0xcc>)
 8000cd6:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000cda:	bf00      	nop
 8000cdc:	08000cf3 	.word	0x08000cf3
 8000ce0:	08000c95 	.word	0x08000c95
 8000ce4:	08000cf3 	.word	0x08000cf3
 8000ce8:	08000ced 	.word	0x08000ced
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000cec:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000cf0:	d1d2      	bne.n	8000c98 <HAL_DMA_Init+0x88>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000cf2:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8000cf4:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000cf6:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000cf8:	e7e4      	b.n	8000cc4 <HAL_DMA_Init+0xb4>
    switch (tmp)
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d9f9      	bls.n	8000cf2 <HAL_DMA_Init+0xe2>
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	e7c7      	b.n	8000c92 <HAL_DMA_Init+0x82>
    return HAL_ERROR;
 8000d02:	2001      	movs	r0, #1
 8000d04:	e7e0      	b.n	8000cc8 <HAL_DMA_Init+0xb8>
 8000d06:	bf00      	nop
 8000d08:	e010803f 	.word	0xe010803f

08000d0c <HAL_DMA2D_ConfigLayer>:
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8000d0c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	f04f 0302 	mov.w	r3, #2
{
 8000d16:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8000d18:	d031      	beq.n	8000d7e <HAL_DMA2D_ConfigLayer+0x72>

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8000d1a:	2418      	movs	r4, #24
  __HAL_LOCK(hdma2d);
 8000d1c:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000d1e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8000d22:	fb04 0401 	mla	r4, r4, r1, r0
 8000d26:	4f20      	ldr	r7, [pc, #128]	; (8000da8 <HAL_DMA2D_ConfigLayer+0x9c>)
  __HAL_LOCK(hdma2d);
 8000d28:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8000d2c:	6b22      	ldr	r2, [r4, #48]	; 0x30
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8000d2e:	e9d4 5609 	ldrd	r5, r6, [r4, #36]	; 0x24
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8000d32:	0513      	lsls	r3, r2, #20
 8000d34:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000d36:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8000d38:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d3c:	432b      	orrs	r3, r5
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000d3e:	3d09      	subs	r5, #9
 8000d40:	2d01      	cmp	r5, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8000d42:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8000d46:	bf96      	itet	ls
 8000d48:	f004 427f 	andls.w	r2, r4, #4278190080	; 0xff000000
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8000d4c:	ea43 6304 	orrhi.w	r3, r3, r4, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8000d50:	4313      	orrls	r3, r2
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8000d52:	6802      	ldr	r2, [r0, #0]
 8000d54:	b9a9      	cbnz	r1, 8000d82 <HAL_DMA2D_ConfigLayer+0x76>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8000d56:	6a56      	ldr	r6, [r2, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000d58:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8000d5a:	ea06 0607 	and.w	r6, r6, r7
 8000d5e:	ea43 0306 	orr.w	r3, r3, r6
 8000d62:	6253      	str	r3, [r2, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8000d64:	6a03      	ldr	r3, [r0, #32]
 8000d66:	6193      	str	r3, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000d68:	d803      	bhi.n	8000d72 <HAL_DMA2D_ConfigLayer+0x66>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8000d6a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000d6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000d70:	6293      	str	r3, [r2, #40]	; 0x28
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8000d72:	2301      	movs	r3, #1
 8000d74:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  __HAL_LOCK(hdma2d);
 8000d7e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8000d82:	69d6      	ldr	r6, [r2, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000d84:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8000d86:	ea06 0607 	and.w	r6, r6, r7
 8000d8a:	ea43 0306 	orr.w	r3, r3, r6
 8000d8e:	61d3      	str	r3, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8000d90:	f04f 0318 	mov.w	r3, #24
 8000d94:	fb03 0101 	mla	r1, r3, r1, r0
 8000d98:	6a0b      	ldr	r3, [r1, #32]
 8000d9a:	6113      	str	r3, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000d9c:	d8e9      	bhi.n	8000d72 <HAL_DMA2D_ConfigLayer+0x66>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8000d9e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8000da2:	6214      	str	r4, [r2, #32]
 8000da4:	e7e5      	b.n	8000d72 <HAL_DMA2D_ConfigLayer+0x66>
 8000da6:	bf00      	nop
 8000da8:	00ccfff0 	.word	0x00ccfff0

08000dac <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8000dac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000dae:	460d      	mov	r5, r1
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8000db0:	4604      	mov	r4, r0
 8000db2:	2800      	cmp	r0, #0
 8000db4:	f000 80a6 	beq.w	8000f04 <HAL_DSI_Init+0x158>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8000db8:	7c43      	ldrb	r3, [r0, #17]
 8000dba:	b90b      	cbnz	r3, 8000dc0 <HAL_DSI_Init+0x14>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8000dbc:	f00d fcd4 	bl	800e768 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	7463      	strb	r3, [r4, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	6823      	ldr	r3, [r4, #0]
 8000dca:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8000dce:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000dd2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8000dd6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8000dda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	9b00      	ldr	r3, [sp, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000de2:	f00d fb53 	bl	800e48c <HAL_GetTick>
 8000de6:	4606      	mov	r6, r0

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8000de8:	6822      	ldr	r2, [r4, #0]
 8000dea:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8000dee:	04d9      	lsls	r1, r3, #19
 8000df0:	d577      	bpl.n	8000ee2 <HAL_DSI_Init+0x136>
      return HAL_TIMEOUT;
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8000df2:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8000df6:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8000dfa:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8000dfe:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8000e02:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
 8000e06:	e9d5 0300 	ldrd	r0, r3, [r5]
 8000e0a:	02db      	lsls	r3, r3, #11
 8000e0c:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 8000e10:	68a8      	ldr	r0, [r5, #8]
 8000e12:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000e16:	430b      	orrs	r3, r1
 8000e18:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	9301      	str	r3, [sp, #4]
 8000e20:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8000e2c:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	9301      	str	r3, [sp, #4]
 8000e36:	9b01      	ldr	r3, [sp, #4]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e38:	f00d fb28 	bl	800e48c <HAL_GetTick>
 8000e3c:	4606      	mov	r6, r0

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8000e3e:	6823      	ldr	r3, [r4, #0]
 8000e40:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8000e44:	05d2      	lsls	r2, r2, #23
 8000e46:	d556      	bpl.n	8000ef6 <HAL_DSI_Init+0x14a>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8000e48:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8000e4c:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8000e4e:	f042 0206 	orr.w	r2, r2, #6

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8000e52:	6828      	ldr	r0, [r5, #0]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8000e54:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8000e58:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8000e5c:	f022 0203 	bic.w	r2, r2, #3
 8000e60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8000e64:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8000e68:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8000e6a:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8000e6c:	f042 0201 	orr.w	r2, r2, #1
 8000e70:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8000e74:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8000e78:	f022 0203 	bic.w	r2, r2, #3
 8000e7c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8000e80:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8000e84:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8000e86:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8000e88:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000e92:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	430a      	orrs	r2, r1
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8000e98:	6869      	ldr	r1, [r5, #4]
 8000e9a:	2900      	cmp	r1, #0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8000e9c:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8000e9e:	4a1a      	ldr	r2, [pc, #104]	; (8000f08 <HAL_DSI_Init+0x15c>)
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8000ea0:	bf08      	it	eq
 8000ea2:	2101      	moveq	r1, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8000ea4:	434a      	muls	r2, r1
 8000ea6:	68a9      	ldr	r1, [r5, #8]
 8000ea8:	f001 0103 	and.w	r1, r1, #3
 8000eac:	408a      	lsls	r2, r1
 8000eae:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8000eb2:	4341      	muls	r1, r0
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8000eb4:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8000eb6:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8000eba:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8000ebe:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8000ec2:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8000ec6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8000ed0:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8000ed4:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8000ed8:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8000eda:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8000edc:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8000ede:	7463      	strb	r3, [r4, #17]

  return HAL_OK;
 8000ee0:	e007      	b.n	8000ef2 <HAL_DSI_Init+0x146>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8000ee2:	f00d fad3 	bl	800e48c <HAL_GetTick>
 8000ee6:	1b80      	subs	r0, r0, r6
 8000ee8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000eec:	f67f af7c 	bls.w	8000de8 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8000ef0:	2003      	movs	r0, #3
}
 8000ef2:	b002      	add	sp, #8
 8000ef4:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8000ef6:	f00d fac9 	bl	800e48c <HAL_GetTick>
 8000efa:	1b80      	subs	r0, r0, r6
 8000efc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000f00:	d99d      	bls.n	8000e3e <HAL_DSI_Init+0x92>
 8000f02:	e7f5      	b.n	8000ef0 <HAL_DSI_Init+0x144>
    return HAL_ERROR;
 8000f04:	2001      	movs	r0, #1
 8000f06:	e7f4      	b.n	8000ef2 <HAL_DSI_Init+0x146>
 8000f08:	003d0900 	.word	0x003d0900

08000f0c <HAL_DSI_ConfigCommand>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8000f0c:	7c03      	ldrb	r3, [r0, #16]
 8000f0e:	2b01      	cmp	r3, #1
{
 8000f10:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdsi);
 8000f12:	d02a      	beq.n	8000f6a <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8000f14:	6802      	ldr	r2, [r0, #0]
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <HAL_DSI_ConfigCommand+0x64>)
 8000f18:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8000f1a:	4023      	ands	r3, r4
 8000f1c:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8000f1e:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8000f20:	e9d1 3500 	ldrd	r3, r5, [r1]
 8000f24:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8000f26:	688d      	ldr	r5, [r1, #8]
 8000f28:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 8000f2a:	68cd      	ldr	r5, [r1, #12]
 8000f2c:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 8000f2e:	690d      	ldr	r5, [r1, #16]
 8000f30:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 8000f32:	694d      	ldr	r5, [r1, #20]
 8000f34:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8000f36:	698d      	ldr	r5, [r1, #24]
 8000f38:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 8000f3a:	69cd      	ldr	r5, [r1, #28]
 8000f3c:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 8000f3e:	6a0d      	ldr	r5, [r1, #32]
 8000f40:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 8000f42:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8000f44:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8000f46:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8000f48:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 8000f4a:	6acd      	ldr	r5, [r1, #44]	; 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8000f4c:	6b09      	ldr	r1, [r1, #48]	; 0x30
                           LPCmd->LPDcsLongWrite      | \
 8000f4e:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8000f50:	4323      	orrs	r3, r4
 8000f52:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8000f54:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8000f56:	f023 0302 	bic.w	r3, r3, #2
 8000f5a:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8000f5c:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8000f5e:	430b      	orrs	r3, r1
 8000f60:	6693      	str	r3, [r2, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8000f62:	2300      	movs	r3, #0
 8000f64:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8000f66:	4618      	mov	r0, r3
}
 8000f68:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8000f6a:	2002      	movs	r0, #2
 8000f6c:	e7fc      	b.n	8000f68 <HAL_DSI_ConfigCommand+0x5c>
 8000f6e:	bf00      	nop
 8000f70:	fef080ff 	.word	0xfef080ff

08000f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f78:	680b      	ldr	r3, [r1, #0]
{
 8000f7a:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001140 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f80:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f82:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f84:	4a6c      	ldr	r2, [pc, #432]	; (8001138 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f86:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8001144 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000f8a:	f04f 0c01 	mov.w	ip, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f8e:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000f90:	fa0c fc03 	lsl.w	ip, ip, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f94:	ea04 060c 	and.w	r6, r4, ip
    if(iocurrent == ioposition)
 8000f98:	45b4      	cmp	ip, r6
 8000f9a:	f040 80b3 	bne.w	8001104 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f9e:	684c      	ldr	r4, [r1, #4]
 8000fa0:	f024 0710 	bic.w	r7, r4, #16
 8000fa4:	2f02      	cmp	r7, #2
 8000fa6:	d116      	bne.n	8000fd6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000fa8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000fac:	f003 0b07 	and.w	fp, r3, #7
 8000fb0:	f04f 0e0f 	mov.w	lr, #15
 8000fb4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000fb8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000fbc:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000fc0:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000fc4:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000fc8:	690d      	ldr	r5, [r1, #16]
 8000fca:	fa05 f50b 	lsl.w	r5, r5, fp
 8000fce:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3] = temp;
 8000fd2:	f8ca 5020 	str.w	r5, [sl, #32]
      temp = GPIOx->MODER;
 8000fd6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000fda:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000fdc:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fe0:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000fe4:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe8:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fea:	fa0e fe0a 	lsl.w	lr, lr, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000fee:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ff0:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ff2:	ea05 0b0b 	and.w	fp, r5, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ff6:	ea4e 0e0b 	orr.w	lr, lr, fp
      GPIOx->MODER = temp;
 8000ffa:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ffe:	d811      	bhi.n	8001024 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR;
 8001000:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001002:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8001006:	68cf      	ldr	r7, [r1, #12]
 8001008:	fa07 fe0a 	lsl.w	lr, r7, sl
 800100c:	ea4e 070b 	orr.w	r7, lr, fp
        GPIOx->OSPEEDR = temp;
 8001010:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001012:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001014:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001018:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800101c:	409f      	lsls	r7, r3
 800101e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8001022:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001024:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001026:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001028:	688f      	ldr	r7, [r1, #8]
 800102a:	fa07 f70a 	lsl.w	r7, r7, sl
 800102e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001030:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001032:	00e5      	lsls	r5, r4, #3
 8001034:	d566      	bpl.n	8001104 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001036:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 800103a:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800103e:	f003 0c03 	and.w	ip, r3, #3
 8001042:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 800104a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800104e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8001056:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 800105a:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 800105e:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8001062:	9503      	str	r5, [sp, #12]
 8001064:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001066:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 800106a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800106e:	ea2a 0e05 	bic.w	lr, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001072:	4d32      	ldr	r5, [pc, #200]	; (800113c <HAL_GPIO_Init+0x1c8>)
 8001074:	42a8      	cmp	r0, r5
 8001076:	d04c      	beq.n	8001112 <HAL_GPIO_Init+0x19e>
 8001078:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800107c:	42a8      	cmp	r0, r5
 800107e:	d04a      	beq.n	8001116 <HAL_GPIO_Init+0x1a2>
 8001080:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001084:	42a8      	cmp	r0, r5
 8001086:	d048      	beq.n	800111a <HAL_GPIO_Init+0x1a6>
 8001088:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800108c:	42a8      	cmp	r0, r5
 800108e:	d046      	beq.n	800111e <HAL_GPIO_Init+0x1aa>
 8001090:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001094:	42a8      	cmp	r0, r5
 8001096:	d044      	beq.n	8001122 <HAL_GPIO_Init+0x1ae>
 8001098:	4548      	cmp	r0, r9
 800109a:	d044      	beq.n	8001126 <HAL_GPIO_Init+0x1b2>
 800109c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80010a0:	42a8      	cmp	r0, r5
 80010a2:	d042      	beq.n	800112a <HAL_GPIO_Init+0x1b6>
 80010a4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010a8:	42a8      	cmp	r0, r5
 80010aa:	d040      	beq.n	800112e <HAL_GPIO_Init+0x1ba>
 80010ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010b0:	42a8      	cmp	r0, r5
 80010b2:	d03e      	beq.n	8001132 <HAL_GPIO_Init+0x1be>
 80010b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010b8:	42a8      	cmp	r0, r5
 80010ba:	bf0c      	ite	eq
 80010bc:	2509      	moveq	r5, #9
 80010be:	250a      	movne	r5, #10
 80010c0:	fa05 f50c 	lsl.w	r5, r5, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010c4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010c8:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80010cc:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 80010ce:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 80010d2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80010d4:	bf0c      	ite	eq
 80010d6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80010d8:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010da:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 80010de:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80010e0:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80010e2:	bf0c      	ite	eq
 80010e4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80010e6:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010e8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 80010ec:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80010ee:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80010f0:	bf0c      	ite	eq
 80010f2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80010f4:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010f6:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 80010f8:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80010fa:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80010fc:	bf54      	ite	pl
 80010fe:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001100:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001102:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001104:	3301      	adds	r3, #1
 8001106:	2b10      	cmp	r3, #16
 8001108:	f47f af3f 	bne.w	8000f8a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800110c:	b005      	add	sp, #20
 800110e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001112:	2500      	movs	r5, #0
 8001114:	e7d4      	b.n	80010c0 <HAL_GPIO_Init+0x14c>
 8001116:	2501      	movs	r5, #1
 8001118:	e7d2      	b.n	80010c0 <HAL_GPIO_Init+0x14c>
 800111a:	2502      	movs	r5, #2
 800111c:	e7d0      	b.n	80010c0 <HAL_GPIO_Init+0x14c>
 800111e:	2503      	movs	r5, #3
 8001120:	e7ce      	b.n	80010c0 <HAL_GPIO_Init+0x14c>
 8001122:	2504      	movs	r5, #4
 8001124:	e7cc      	b.n	80010c0 <HAL_GPIO_Init+0x14c>
 8001126:	2505      	movs	r5, #5
 8001128:	e7ca      	b.n	80010c0 <HAL_GPIO_Init+0x14c>
 800112a:	2506      	movs	r5, #6
 800112c:	e7c8      	b.n	80010c0 <HAL_GPIO_Init+0x14c>
 800112e:	2507      	movs	r5, #7
 8001130:	e7c6      	b.n	80010c0 <HAL_GPIO_Init+0x14c>
 8001132:	2508      	movs	r5, #8
 8001134:	e7c4      	b.n	80010c0 <HAL_GPIO_Init+0x14c>
 8001136:	bf00      	nop
 8001138:	40013c00 	.word	0x40013c00
 800113c:	40020000 	.word	0x40020000
 8001140:	40023800 	.word	0x40023800
 8001144:	40021400 	.word	0x40021400

08001148 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8001148:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800114a:	4604      	mov	r4, r0
 800114c:	2800      	cmp	r0, #0
 800114e:	d063      	beq.n	8001218 <HAL_LTDC_Init+0xd0>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8001150:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8001154:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001158:	b91b      	cbnz	r3, 8001162 <HAL_LTDC_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800115a:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800115e:	f00d fd16 	bl	800eb8e <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001162:	2302      	movs	r3, #2
 8001164:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001168:	6823      	ldr	r3, [r4, #0]
 800116a:	699a      	ldr	r2, [r3, #24]
 800116c:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8001170:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001172:	6999      	ldr	r1, [r3, #24]
 8001174:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8001178:	4302      	orrs	r2, r0
 800117a:	68e0      	ldr	r0, [r4, #12]
 800117c:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800117e:	6920      	ldr	r0, [r4, #16]
 8001180:	4302      	orrs	r2, r0

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8001182:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001184:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001186:	4925      	ldr	r1, [pc, #148]	; (800121c <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001188:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	400a      	ands	r2, r1
 800118e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001190:	689a      	ldr	r2, [r3, #8]
 8001192:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001196:	69a0      	ldr	r0, [r4, #24]
 8001198:	4302      	orrs	r2, r0

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800119a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800119c:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800119e:	68da      	ldr	r2, [r3, #12]
 80011a0:	400a      	ands	r2, r1
 80011a2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80011aa:	6a20      	ldr	r0, [r4, #32]
 80011ac:	4302      	orrs	r2, r0

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80011ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80011b0:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	400a      	ands	r2, r1
 80011b6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80011b8:	691a      	ldr	r2, [r3, #16]
 80011ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80011be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80011c0:	4302      	orrs	r2, r0
 80011c2:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80011c4:	695a      	ldr	r2, [r3, #20]
 80011c6:	4011      	ands	r1, r2
 80011c8:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80011ca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80011cc:	695a      	ldr	r2, [r3, #20]
 80011ce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80011d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80011d4:	430a      	orrs	r2, r1
 80011d6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80011d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80011da:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80011de:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80011e2:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80011e6:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80011e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011ea:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80011ee:	430a      	orrs	r2, r1
 80011f0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80011f4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80011f8:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80011fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011fe:	f042 0206 	orr.w	r2, r2, #6
 8001202:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8001204:	699a      	ldr	r2, [r3, #24]
 8001206:	f042 0201 	orr.w	r2, r2, #1
 800120a:	619a      	str	r2, [r3, #24]

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800120c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800120e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8001212:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  return HAL_OK;
}
 8001216:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001218:	2001      	movs	r0, #1
 800121a:	e7fc      	b.n	8001216 <HAL_LTDC_Init+0xce>
 800121c:	f000f800 	.word	0xf000f800

08001220 <HAL_LTDC_SetPitch>:

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8001220:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001224:	2b01      	cmp	r3, #1
 8001226:	f04f 0302 	mov.w	r3, #2
{
 800122a:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 800122c:	d02d      	beq.n	800128a <HAL_LTDC_SetPitch+0x6a>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* get LayerIdx used pixel format */
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800122e:	2434      	movs	r4, #52	; 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001230:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8001234:	fb04 0402 	mla	r4, r4, r2, r0
 8001238:	6ca4      	ldr	r4, [r4, #72]	; 0x48

  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800123a:	b344      	cbz	r4, 800128e <HAL_LTDC_SetPitch+0x6e>
  {
    tmp = 4U;
  }
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800123c:	2c01      	cmp	r4, #1
 800123e:	d028      	beq.n	8001292 <HAL_LTDC_SetPitch+0x72>
  {
    tmp = 3U;
  }
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001240:	1ea5      	subs	r5, r4, #2
 8001242:	429d      	cmp	r5, r3
 8001244:	d902      	bls.n	800124c <HAL_LTDC_SetPitch+0x2c>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8001246:	2c07      	cmp	r4, #7
 8001248:	bf18      	it	ne
 800124a:	2301      	movne	r3, #1
  }

  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);

  /* Clear previously set standard pitch */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800124c:	01d2      	lsls	r2, r2, #7
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800124e:	4359      	muls	r1, r3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8001250:	f102 0484 	add.w	r4, r2, #132	; 0x84
 8001254:	6802      	ldr	r2, [r0, #0]
 8001256:	4422      	add	r2, r4
 8001258:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800125a:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800125e:	f424 14f8 	bic.w	r4, r4, #2031616	; 0x1f0000
 8001262:	62d4      	str	r4, [r2, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8001264:	4c0c      	ldr	r4, [pc, #48]	; (8001298 <HAL_LTDC_SetPitch+0x78>)
 8001266:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001268:	f045 0501 	orr.w	r5, r5, #1
 800126c:	6265      	str	r5, [r4, #36]	; 0x24

  /* Set new line pitch value */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800126e:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8001270:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001274:	62d5      	str	r5, [r2, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8001276:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6263      	str	r3, [r4, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800127e:	2301      	movs	r3, #1
 8001280:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8001284:	2300      	movs	r3, #0
 8001286:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0

  return HAL_OK;
}
 800128a:	4618      	mov	r0, r3
 800128c:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 800128e:	2304      	movs	r3, #4
 8001290:	e7dc      	b.n	800124c <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 8001292:	2303      	movs	r3, #3
 8001294:	e7da      	b.n	800124c <HAL_LTDC_SetPitch+0x2c>
 8001296:	bf00      	nop
 8001298:	40016800 	.word	0x40016800

0800129c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800129c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80012a0:	6802      	ldr	r2, [r0, #0]
{
 80012a2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80012a4:	f012 0601 	ands.w	r6, r2, #1
 80012a8:	d00b      	beq.n	80012c2 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80012aa:	4bbb      	ldr	r3, [pc, #748]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80012ac:	6899      	ldr	r1, [r3, #8]
 80012ae:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80012b2:	6099      	str	r1, [r3, #8]
 80012b4:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80012b6:	6899      	ldr	r1, [r3, #8]
 80012b8:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80012ba:	fab6 f686 	clz	r6, r6
 80012be:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80012c0:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80012c2:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 80012c6:	d012      	beq.n	80012ee <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80012c8:	49b3      	ldr	r1, [pc, #716]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80012ca:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80012cc:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80012d0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80012d4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 80012d8:	bf08      	it	eq
 80012da:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80012dc:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80012e0:	bf16      	itet	ne
 80012e2:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80012e6:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80012e8:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80012ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80012ee:	02d1      	lsls	r1, r2, #11
 80012f0:	d510      	bpl.n	8001314 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80012f2:	48a9      	ldr	r0, [pc, #676]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80012f4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80012f6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80012fa:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80012fe:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001302:	ea43 0301 	orr.w	r3, r3, r1
 8001306:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800130a:	f000 81aa 	beq.w	8001662 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800130e:	2900      	cmp	r1, #0
 8001310:	bf08      	it	eq
 8001312:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001314:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001318:	bf18      	it	ne
 800131a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800131c:	0692      	lsls	r2, r2, #26
 800131e:	d531      	bpl.n	8001384 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001320:	4b9d      	ldr	r3, [pc, #628]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001322:	4f9e      	ldr	r7, [pc, #632]	; (800159c <HAL_RCCEx_PeriphCLKConfig+0x300>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001324:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001326:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800132a:	641a      	str	r2, [r3, #64]	; 0x40
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800133e:	f00d f8a5 	bl	800e48c <HAL_GetTick>
 8001342:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	05db      	lsls	r3, r3, #23
 8001348:	f140 818d 	bpl.w	8001666 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800134c:	4f92      	ldr	r7, [pc, #584]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800134e:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001350:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001354:	f040 8192 	bne.w	800167c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001358:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800135a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800135e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001362:	4a8d      	ldr	r2, [pc, #564]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001364:	f040 81b0 	bne.w	80016c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8001368:	6891      	ldr	r1, [r2, #8]
 800136a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800136e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001372:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001376:	4301      	orrs	r1, r0
 8001378:	6091      	str	r1, [r2, #8]
 800137a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800137e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001380:	430b      	orrs	r3, r1
 8001382:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001384:	6823      	ldr	r3, [r4, #0]
 8001386:	06da      	lsls	r2, r3, #27
 8001388:	d50c      	bpl.n	80013a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800138a:	4a83      	ldr	r2, [pc, #524]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800138c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001390:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001394:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001398:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800139c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800139e:	4301      	orrs	r1, r0
 80013a0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80013a4:	045f      	lsls	r7, r3, #17
 80013a6:	d508      	bpl.n	80013ba <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80013a8:	497b      	ldr	r1, [pc, #492]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80013aa:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80013ac:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013b0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80013b4:	4302      	orrs	r2, r0
 80013b6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80013ba:	0418      	lsls	r0, r3, #16
 80013bc:	d508      	bpl.n	80013d0 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80013be:	4976      	ldr	r1, [pc, #472]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80013c0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80013c2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013c6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80013ca:	4302      	orrs	r2, r0
 80013cc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80013d0:	03d9      	lsls	r1, r3, #15
 80013d2:	d508      	bpl.n	80013e6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80013d4:	4970      	ldr	r1, [pc, #448]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80013d6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80013d8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013dc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80013e0:	4302      	orrs	r2, r0
 80013e2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80013e6:	039a      	lsls	r2, r3, #14
 80013e8:	d508      	bpl.n	80013fc <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80013ea:	496b      	ldr	r1, [pc, #428]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80013ec:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80013ee:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013f2:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80013f6:	4302      	orrs	r2, r0
 80013f8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80013fc:	065f      	lsls	r7, r3, #25
 80013fe:	d508      	bpl.n	8001412 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001400:	4965      	ldr	r1, [pc, #404]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001402:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001404:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001408:	f022 0203 	bic.w	r2, r2, #3
 800140c:	4302      	orrs	r2, r0
 800140e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001412:	0618      	lsls	r0, r3, #24
 8001414:	d508      	bpl.n	8001428 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001416:	4960      	ldr	r1, [pc, #384]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001418:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800141a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800141e:	f022 020c 	bic.w	r2, r2, #12
 8001422:	4302      	orrs	r2, r0
 8001424:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001428:	05d9      	lsls	r1, r3, #23
 800142a:	d508      	bpl.n	800143e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800142c:	495a      	ldr	r1, [pc, #360]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800142e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001430:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001434:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001438:	4302      	orrs	r2, r0
 800143a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800143e:	059a      	lsls	r2, r3, #22
 8001440:	d508      	bpl.n	8001454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001442:	4955      	ldr	r1, [pc, #340]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001444:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001446:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800144a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800144e:	4302      	orrs	r2, r0
 8001450:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001454:	055f      	lsls	r7, r3, #21
 8001456:	d508      	bpl.n	800146a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001458:	494f      	ldr	r1, [pc, #316]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800145a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800145c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001460:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001464:	4302      	orrs	r2, r0
 8001466:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800146a:	0518      	lsls	r0, r3, #20
 800146c:	d508      	bpl.n	8001480 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800146e:	494a      	ldr	r1, [pc, #296]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001472:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001476:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800147a:	4302      	orrs	r2, r0
 800147c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001480:	04d9      	lsls	r1, r3, #19
 8001482:	d508      	bpl.n	8001496 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001484:	4944      	ldr	r1, [pc, #272]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001486:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001488:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800148c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001490:	4302      	orrs	r2, r0
 8001492:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001496:	049a      	lsls	r2, r3, #18
 8001498:	d508      	bpl.n	80014ac <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800149a:	493f      	ldr	r1, [pc, #252]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800149c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800149e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80014a2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80014a6:	4302      	orrs	r2, r0
 80014a8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80014ac:	025f      	lsls	r7, r3, #9
 80014ae:	d508      	bpl.n	80014c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80014b0:	4939      	ldr	r1, [pc, #228]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80014b2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80014b4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80014b8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80014bc:	4302      	orrs	r2, r0
 80014be:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80014c2:	0298      	lsls	r0, r3, #10
 80014c4:	d50c      	bpl.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80014c6:	4834      	ldr	r0, [pc, #208]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80014c8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80014ca:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80014ce:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80014d2:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80014d6:	bf08      	it	eq
 80014d8:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80014da:	430a      	orrs	r2, r1
 80014dc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80014e0:	f013 0f08 	tst.w	r3, #8
 80014e4:	bf18      	it	ne
 80014e6:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80014e8:	0359      	lsls	r1, r3, #13
 80014ea:	d508      	bpl.n	80014fe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80014ec:	492a      	ldr	r1, [pc, #168]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80014ee:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80014f0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80014f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014f8:	4302      	orrs	r2, r0
 80014fa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80014fe:	021a      	lsls	r2, r3, #8
 8001500:	d509      	bpl.n	8001516 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001502:	4925      	ldr	r1, [pc, #148]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001504:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001508:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800150c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001510:	4302      	orrs	r2, r0
 8001512:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001516:	015f      	lsls	r7, r3, #5
 8001518:	d509      	bpl.n	800152e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800151a:	491f      	ldr	r1, [pc, #124]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800151c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001520:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001524:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001528:	4302      	orrs	r2, r0
 800152a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800152e:	0118      	lsls	r0, r3, #4
 8001530:	d509      	bpl.n	8001546 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001532:	4919      	ldr	r1, [pc, #100]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001534:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8001538:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800153c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001540:	4302      	orrs	r2, r0
 8001542:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001546:	00d9      	lsls	r1, r3, #3
 8001548:	d509      	bpl.n	800155e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800154a:	4913      	ldr	r1, [pc, #76]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800154c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8001550:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001554:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001558:	4302      	orrs	r2, r0
 800155a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800155e:	2e01      	cmp	r6, #1
 8001560:	f000 80b6 	beq.w	80016d0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8001564:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001568:	f000 80b2 	beq.w	80016d0 <HAL_RCCEx_PeriphCLKConfig+0x434>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800156c:	2d01      	cmp	r5, #1
 800156e:	d176      	bne.n	800165e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001570:	4d09      	ldr	r5, [pc, #36]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001572:	682b      	ldr	r3, [r5, #0]
 8001574:	462e      	mov	r6, r5
 8001576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800157a:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800157c:	f00c ff86 	bl	800e48c <HAL_GetTick>
 8001580:	4607      	mov	r7, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001582:	682b      	ldr	r3, [r5, #0]
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	f100 8127 	bmi.w	80017d8 <HAL_RCCEx_PeriphCLKConfig+0x53c>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800158a:	6822      	ldr	r2, [r4, #0]
 800158c:	0315      	lsls	r5, r2, #12
 800158e:	d507      	bpl.n	80015a0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8001590:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001592:	b14b      	cbz	r3, 80015a8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8001594:	e004      	b.n	80015a0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800
 800159c:	40007000 	.word	0x40007000
 80015a0:	02d0      	lsls	r0, r2, #11
 80015a2:	d51c      	bpl.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x342>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80015a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015a6:	b9d3      	cbnz	r3, 80015de <HAL_RCCEx_PeriphCLKConfig+0x342>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80015a8:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80015ac:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80015b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015b4:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80015b8:	430b      	orrs	r3, r1
 80015ba:	6961      	ldr	r1, [r4, #20]
 80015bc:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80015c0:	69a1      	ldr	r1, [r4, #24]
 80015c2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80015c6:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80015ca:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 80015ce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80015d0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80015d4:	3901      	subs	r1, #1
 80015d6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80015da:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80015de:	0291      	lsls	r1, r2, #10
 80015e0:	d515      	bpl.n	800160e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80015e2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80015e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80015e8:	d111      	bne.n	800160e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80015ea:	4982      	ldr	r1, [pc, #520]	; (80017f4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80015ec:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80015f0:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80015f4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80015f8:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80015fc:	4303      	orrs	r3, r0
 80015fe:	6960      	ldr	r0, [r4, #20]
 8001600:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001604:	6a20      	ldr	r0, [r4, #32]
 8001606:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800160a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800160e:	0712      	lsls	r2, r2, #28
 8001610:	d519      	bpl.n	8001646 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001612:	4978      	ldr	r1, [pc, #480]	; (80017f4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001614:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001618:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800161c:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001620:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001624:	4313      	orrs	r3, r2
 8001626:	6962      	ldr	r2, [r4, #20]
 8001628:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800162c:	69e2      	ldr	r2, [r4, #28]
 800162e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001636:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800163a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800163c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001640:	4313      	orrs	r3, r2
 8001642:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001646:	4c6b      	ldr	r4, [pc, #428]	; (80017f4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001648:	6823      	ldr	r3, [r4, #0]
 800164a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800164e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001650:	f00c ff1c 	bl	800e48c <HAL_GetTick>
 8001654:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001656:	6823      	ldr	r3, [r4, #0]
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	f140 80c4 	bpl.w	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800165e:	2000      	movs	r0, #0
 8001660:	e009      	b.n	8001676 <HAL_RCCEx_PeriphCLKConfig+0x3da>
      plli2sused = 1;
 8001662:	2601      	movs	r6, #1
 8001664:	e656      	b.n	8001314 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001666:	f00c ff11 	bl	800e48c <HAL_GetTick>
 800166a:	eba0 0008 	sub.w	r0, r0, r8
 800166e:	2864      	cmp	r0, #100	; 0x64
 8001670:	f67f ae68 	bls.w	8001344 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8001674:	2003      	movs	r0, #3
}
 8001676:	b003      	add	sp, #12
 8001678:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800167c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800167e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001682:	4293      	cmp	r3, r2
 8001684:	f43f ae68 	beq.w	8001358 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001688:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800168a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800168c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001690:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001694:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001696:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001698:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800169c:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800169e:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80016a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016a2:	07d8      	lsls	r0, r3, #31
 80016a4:	f57f ae58 	bpl.w	8001358 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80016a8:	f00c fef0 	bl	800e48c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ac:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80016b0:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016b4:	0799      	lsls	r1, r3, #30
 80016b6:	f53f ae4f 	bmi.w	8001358 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ba:	f00c fee7 	bl	800e48c <HAL_GetTick>
 80016be:	eba0 0008 	sub.w	r0, r0, r8
 80016c2:	4548      	cmp	r0, r9
 80016c4:	d9f5      	bls.n	80016b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80016c6:	e7d5      	b.n	8001674 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016c8:	6891      	ldr	r1, [r2, #8]
 80016ca:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80016ce:	e653      	b.n	8001378 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 80016d0:	4e48      	ldr	r6, [pc, #288]	; (80017f4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80016d2:	6833      	ldr	r3, [r6, #0]
 80016d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80016d8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80016da:	f00c fed7 	bl	800e48c <HAL_GetTick>
 80016de:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80016e0:	6833      	ldr	r3, [r6, #0]
 80016e2:	011a      	lsls	r2, r3, #4
 80016e4:	d472      	bmi.n	80017cc <HAL_RCCEx_PeriphCLKConfig+0x530>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80016e6:	6822      	ldr	r2, [r4, #0]
 80016e8:	07d3      	lsls	r3, r2, #31
 80016ea:	d512      	bpl.n	8001712 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80016ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80016ee:	b983      	cbnz	r3, 8001712 <HAL_RCCEx_PeriphCLKConfig+0x476>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80016f0:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80016f4:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80016f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016fc:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001700:	430b      	orrs	r3, r1
 8001702:	6861      	ldr	r1, [r4, #4]
 8001704:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001708:	68a1      	ldr	r1, [r4, #8]
 800170a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800170e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001712:	0317      	lsls	r7, r2, #12
 8001714:	d503      	bpl.n	800171e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8001716:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001718:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800171c:	d005      	beq.n	800172a <HAL_RCCEx_PeriphCLKConfig+0x48e>
 800171e:	02d6      	lsls	r6, r2, #11
 8001720:	d51e      	bpl.n	8001760 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001722:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001724:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001728:	d11a      	bne.n	8001760 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800172a:	4932      	ldr	r1, [pc, #200]	; (80017f4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800172c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001730:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001734:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001738:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800173c:	4303      	orrs	r3, r0
 800173e:	6860      	ldr	r0, [r4, #4]
 8001740:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001744:	68e0      	ldr	r0, [r4, #12]
 8001746:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800174a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800174e:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001752:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001754:	f020 001f 	bic.w	r0, r0, #31
 8001758:	3b01      	subs	r3, #1
 800175a:	4303      	orrs	r3, r0
 800175c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001760:	01d0      	lsls	r0, r2, #7
 8001762:	d511      	bpl.n	8001788 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001764:	4923      	ldr	r1, [pc, #140]	; (80017f4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001766:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800176a:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800176e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001772:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001776:	4303      	orrs	r3, r0
 8001778:	6860      	ldr	r0, [r4, #4]
 800177a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800177e:	6920      	ldr	r0, [r4, #16]
 8001780:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001784:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001788:	0191      	lsls	r1, r2, #6
 800178a:	d50d      	bpl.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800178c:	6923      	ldr	r3, [r4, #16]
 800178e:	6862      	ldr	r2, [r4, #4]
 8001790:	041b      	lsls	r3, r3, #16
 8001792:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001796:	68e2      	ldr	r2, [r4, #12]
 8001798:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800179c:	68a2      	ldr	r2, [r4, #8]
 800179e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80017a2:	4a14      	ldr	r2, [pc, #80]	; (80017f4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80017a4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80017a8:	4e12      	ldr	r6, [pc, #72]	; (80017f4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80017aa:	6833      	ldr	r3, [r6, #0]
 80017ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017b0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80017b2:	f00c fe6b 	bl	800e48c <HAL_GetTick>
 80017b6:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80017b8:	6833      	ldr	r3, [r6, #0]
 80017ba:	011a      	lsls	r2, r3, #4
 80017bc:	f53f aed6 	bmi.w	800156c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80017c0:	f00c fe64 	bl	800e48c <HAL_GetTick>
 80017c4:	1bc0      	subs	r0, r0, r7
 80017c6:	2864      	cmp	r0, #100	; 0x64
 80017c8:	d9f6      	bls.n	80017b8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 80017ca:	e753      	b.n	8001674 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80017cc:	f00c fe5e 	bl	800e48c <HAL_GetTick>
 80017d0:	1bc0      	subs	r0, r0, r7
 80017d2:	2864      	cmp	r0, #100	; 0x64
 80017d4:	d984      	bls.n	80016e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
 80017d6:	e74d      	b.n	8001674 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80017d8:	f00c fe58 	bl	800e48c <HAL_GetTick>
 80017dc:	1bc0      	subs	r0, r0, r7
 80017de:	2864      	cmp	r0, #100	; 0x64
 80017e0:	f67f aecf 	bls.w	8001582 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 80017e4:	e746      	b.n	8001674 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80017e6:	f00c fe51 	bl	800e48c <HAL_GetTick>
 80017ea:	1b40      	subs	r0, r0, r5
 80017ec:	2864      	cmp	r0, #100	; 0x64
 80017ee:	f67f af32 	bls.w	8001656 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80017f2:	e73f      	b.n	8001674 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 80017f4:	40023800 	.word	0x40023800

080017f8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80017f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017fc:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80017fe:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 8001802:	e9d1 4e01 	ldrd	r4, lr, [r1, #4]
 8001806:	e9d1 c703 	ldrd	ip, r7, [r1, #12]
 800180a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2)
 800180e:	6809      	ldr	r1, [r1, #0]
 8001810:	ea43 0308 	orr.w	r3, r3, r8
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8001814:	f8d0 8000 	ldr.w	r8, [r0]
  if (Init->SDBank != FMC_SDRAM_BANK2)
 8001818:	2901      	cmp	r1, #1
 800181a:	4912      	ldr	r1, [pc, #72]	; (8001864 <FMC_SDRAM_Init+0x6c>)
 800181c:	d00f      	beq.n	800183e <FMC_SDRAM_Init+0x46>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800181e:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8001820:	ea08 0101 	and.w	r1, r8, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8001824:	4322      	orrs	r2, r4
 8001826:	ea42 030e 	orr.w	r3, r2, lr
 800182a:	ea43 030c 	orr.w	r3, r3, ip
 800182e:	433b      	orrs	r3, r7
 8001830:	4333      	orrs	r3, r6
 8001832:	432b      	orrs	r3, r5
 8001834:	430b      	orrs	r3, r1
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8001836:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }

  return HAL_OK;
}
 8001838:	2000      	movs	r0, #0
 800183a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800183e:	4313      	orrs	r3, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8001840:	6842      	ldr	r2, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8001842:	f428 48f8 	bic.w	r8, r8, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8001846:	4011      	ands	r1, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8001848:	ea44 020e 	orr.w	r2, r4, lr
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800184c:	ea43 0308 	orr.w	r3, r3, r8
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8001850:	ea42 020c 	orr.w	r2, r2, ip
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8001854:	6003      	str	r3, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8001856:	433a      	orrs	r2, r7
 8001858:	4332      	orrs	r2, r6
 800185a:	432a      	orrs	r2, r5
 800185c:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800185e:	6042      	str	r2, [r0, #4]
 8001860:	e7ea      	b.n	8001838 <FMC_SDRAM_Init+0x40>
 8001862:	bf00      	nop
 8001864:	ffff8000 	.word	0xffff8000

08001868 <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <UTILS_PLL_IsBusy+0x24>)
 800186a:	6819      	ldr	r1, [r3, #0]
  * @rmtoll CR           PLLSAIRDY    LL_RCC_PLLSAI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) == (RCC_CR_PLLSAIRDY));
 800186c:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800186e:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 8001872:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) == (RCC_CR_PLLSAIRDY));
 8001874:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
static ErrorStatus UTILS_PLL_IsBusy(void)
{
  ErrorStatus status = SUCCESS;

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
 8001878:	430a      	orrs	r2, r1
 800187a:	bf14      	ite	ne
 800187c:	2000      	movne	r0, #0
 800187e:	2001      	moveq	r0, #1
  {
    /* PLLSAI1 configuration cannot be modified */
    status = ERROR;
  }
  /* Check if PLLI2S is busy*/
  if(LL_RCC_PLLI2S_IsReady() != 0U)
 8001880:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  {
    /* PLLI2S configuration cannot be modified */
    status = ERROR;
  }
  return status;
}
 8001884:	bf18      	it	ne
 8001886:	2000      	movne	r0, #0
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800

08001890 <UTILS_SetFlashLatency.part.0>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 8001890:	4b2e      	ldr	r3, [pc, #184]	; (800194c <UTILS_SetFlashLatency.part.0+0xbc>)
 8001892:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(PWR->CR1, PWR_CR1_ODEN) == (PWR_CR1_ODEN));
 8001894:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 8001896:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 800189a:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 800189e:	d123      	bne.n	80018e8 <UTILS_SetFlashLatency.part.0+0x58>
      if(LL_PWR_IsEnabledOverDriveMode() != 0U)
 80018a0:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80018a4:	d03c      	beq.n	8001920 <UTILS_SetFlashLatency.part.0+0x90>
          if(HCLK_Frequency > UTILS_SCALE1_LATENCY7_FREQ)
 80018a6:	4b2a      	ldr	r3, [pc, #168]	; (8001950 <UTILS_SetFlashLatency.part.0+0xc0>)
 80018a8:	4298      	cmp	r0, r3
 80018aa:	d83e      	bhi.n	800192a <UTILS_SetFlashLatency.part.0+0x9a>
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY4_FREQ) && (latency == LL_FLASH_LATENCY_0))
 80018ac:	4b29      	ldr	r3, [pc, #164]	; (8001954 <UTILS_SetFlashLatency.part.0+0xc4>)
 80018ae:	4298      	cmp	r0, r3
 80018b0:	d83d      	bhi.n	800192e <UTILS_SetFlashLatency.part.0+0x9e>
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ) && (latency == LL_FLASH_LATENCY_0))
 80018b2:	4b29      	ldr	r3, [pc, #164]	; (8001958 <UTILS_SetFlashLatency.part.0+0xc8>)
 80018b4:	4298      	cmp	r0, r3
 80018b6:	d83a      	bhi.n	800192e <UTILS_SetFlashLatency.part.0+0x9e>
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ) && (latency == LL_FLASH_LATENCY_0))
 80018b8:	4b28      	ldr	r3, [pc, #160]	; (800195c <UTILS_SetFlashLatency.part.0+0xcc>)
 80018ba:	4298      	cmp	r0, r3
            latency = LL_FLASH_LATENCY_6;
 80018bc:	f04f 0306 	mov.w	r3, #6
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ) && (latency == LL_FLASH_LATENCY_0))
 80018c0:	d805      	bhi.n	80018ce <UTILS_SetFlashLatency.part.0+0x3e>
        if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ) && (latency == LL_FLASH_LATENCY_0))
 80018c2:	4a27      	ldr	r2, [pc, #156]	; (8001960 <UTILS_SetFlashLatency.part.0+0xd0>)
 80018c4:	4290      	cmp	r0, r2
 80018c6:	d902      	bls.n	80018ce <UTILS_SetFlashLatency.part.0+0x3e>
 80018c8:	2b00      	cmp	r3, #0
          latency = LL_FLASH_LATENCY_1;
 80018ca:	bf08      	it	eq
 80018cc:	2301      	moveq	r3, #1
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80018ce:	4925      	ldr	r1, [pc, #148]	; (8001964 <UTILS_SetFlashLatency.part.0+0xd4>)
 80018d0:	680a      	ldr	r2, [r1, #0]
 80018d2:	f022 020f 	bic.w	r2, r2, #15
 80018d6:	431a      	orrs	r2, r3
 80018d8:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80018da:	6808      	ldr	r0, [r1, #0]
 80018dc:	f000 000f 	and.w	r0, r0, #15
  return status;
 80018e0:	1ac3      	subs	r3, r0, r3
 80018e2:	4258      	negs	r0, r3
 80018e4:	4158      	adcs	r0, r3
}
 80018e6:	4770      	bx	lr
 80018e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    else if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 80018ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018f0:	d105      	bne.n	80018fe <UTILS_SetFlashLatency.part.0+0x6e>
      if(HCLK_Frequency > UTILS_SCALE2_LATENCY5_FREQ)
 80018f2:	f103 630f 	add.w	r3, r3, #149946368	; 0x8f00000
 80018f6:	f503 43a3 	add.w	r3, r3, #20864	; 0x5180
 80018fa:	4298      	cmp	r0, r3
 80018fc:	d813      	bhi.n	8001926 <UTILS_SetFlashLatency.part.0+0x96>
      if(HCLK_Frequency > UTILS_SCALE3_LATENCY4_FREQ)
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <UTILS_SetFlashLatency.part.0+0xc4>)
 8001900:	4298      	cmp	r0, r3
 8001902:	d80b      	bhi.n	800191c <UTILS_SetFlashLatency.part.0+0x8c>
      else if(HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)
 8001904:	4b14      	ldr	r3, [pc, #80]	; (8001958 <UTILS_SetFlashLatency.part.0+0xc8>)
 8001906:	4298      	cmp	r0, r3
 8001908:	d819      	bhi.n	800193e <UTILS_SetFlashLatency.part.0+0xae>
      else if(HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)
 800190a:	4b14      	ldr	r3, [pc, #80]	; (800195c <UTILS_SetFlashLatency.part.0+0xcc>)
 800190c:	4298      	cmp	r0, r3
 800190e:	d81b      	bhi.n	8001948 <UTILS_SetFlashLatency.part.0+0xb8>
        if(HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <UTILS_SetFlashLatency.part.0+0xd0>)
 8001912:	4298      	cmp	r0, r3
 8001914:	bf94      	ite	ls
 8001916:	2300      	movls	r3, #0
 8001918:	2301      	movhi	r3, #1
 800191a:	e7d8      	b.n	80018ce <UTILS_SetFlashLatency.part.0+0x3e>
        latency = LL_FLASH_LATENCY_4;
 800191c:	2304      	movs	r3, #4
 800191e:	e7d6      	b.n	80018ce <UTILS_SetFlashLatency.part.0+0x3e>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY5_FREQ) && (latency == LL_FLASH_LATENCY_0))
 8001920:	4a11      	ldr	r2, [pc, #68]	; (8001968 <UTILS_SetFlashLatency.part.0+0xd8>)
 8001922:	4290      	cmp	r0, r2
 8001924:	d905      	bls.n	8001932 <UTILS_SetFlashLatency.part.0+0xa2>
        latency = LL_FLASH_LATENCY_5;
 8001926:	2305      	movs	r3, #5
 8001928:	e7d1      	b.n	80018ce <UTILS_SetFlashLatency.part.0+0x3e>
            latency = LL_FLASH_LATENCY_7;
 800192a:	2307      	movs	r3, #7
 800192c:	e7cf      	b.n	80018ce <UTILS_SetFlashLatency.part.0+0x3e>
            latency = LL_FLASH_LATENCY_6;
 800192e:	2306      	movs	r3, #6
 8001930:	e7cd      	b.n	80018ce <UTILS_SetFlashLatency.part.0+0x3e>
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY4_FREQ) && (latency == LL_FLASH_LATENCY_0))
 8001932:	4a08      	ldr	r2, [pc, #32]	; (8001954 <UTILS_SetFlashLatency.part.0+0xc4>)
 8001934:	4290      	cmp	r0, r2
 8001936:	d8f1      	bhi.n	800191c <UTILS_SetFlashLatency.part.0+0x8c>
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ) && (latency == LL_FLASH_LATENCY_0))
 8001938:	4a07      	ldr	r2, [pc, #28]	; (8001958 <UTILS_SetFlashLatency.part.0+0xc8>)
 800193a:	4290      	cmp	r0, r2
 800193c:	d901      	bls.n	8001942 <UTILS_SetFlashLatency.part.0+0xb2>
        latency = LL_FLASH_LATENCY_3;
 800193e:	2303      	movs	r3, #3
 8001940:	e7c5      	b.n	80018ce <UTILS_SetFlashLatency.part.0+0x3e>
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ) && (latency == LL_FLASH_LATENCY_0))
 8001942:	4a06      	ldr	r2, [pc, #24]	; (800195c <UTILS_SetFlashLatency.part.0+0xcc>)
 8001944:	4290      	cmp	r0, r2
 8001946:	d9bc      	bls.n	80018c2 <UTILS_SetFlashLatency.part.0+0x32>
        latency = LL_FLASH_LATENCY_2;
 8001948:	2302      	movs	r3, #2
 800194a:	e7c0      	b.n	80018ce <UTILS_SetFlashLatency.part.0+0x3e>
 800194c:	40007000 	.word	0x40007000
 8001950:	0c845880 	.word	0x0c845880
 8001954:	07270e00 	.word	0x07270e00
 8001958:	055d4a80 	.word	0x055d4a80
 800195c:	03938700 	.word	0x03938700
 8001960:	01c9c380 	.word	0x01c9c380
 8001964:	40023c00 	.word	0x40023c00
 8001968:	08f0d180 	.word	0x08f0d180

0800196c <UTILS_EnablePLLAndSwitchSystem>:
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 800196c:	680b      	ldr	r3, [r1, #0]
 800196e:	4a22      	ldr	r2, [pc, #136]	; (80019f8 <UTILS_EnablePLLAndSwitchSystem+0x8c>)
 8001970:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 8001974:	b570      	push	{r4, r5, r6, lr}
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8001976:	5cd4      	ldrb	r4, [r2, r3]
{
 8001978:	460e      	mov	r6, r1

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 800197a:	4d20      	ldr	r5, [pc, #128]	; (80019fc <UTILS_EnablePLLAndSwitchSystem+0x90>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 800197c:	fa20 f404 	lsr.w	r4, r0, r4
  if(SystemCoreClock < hclk_frequency)
 8001980:	682b      	ldr	r3, [r5, #0]
 8001982:	42a3      	cmp	r3, r4
 8001984:	d327      	bcc.n	80019d6 <UTILS_EnablePLLAndSwitchSystem+0x6a>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001986:	4b1e      	ldr	r3, [pc, #120]	; (8001a00 <UTILS_EnablePLLAndSwitchSystem+0x94>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800198e:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001990:	681a      	ldr	r2, [r3, #0]
  /* Update system clock configuration */
  if(status == SUCCESS)
  {
    /* Enable PLL */
    LL_RCC_PLL_Enable();
    while (LL_RCC_PLL_IsReady() != 1U)
 8001992:	0192      	lsls	r2, r2, #6
 8001994:	d5fc      	bpl.n	8001990 <UTILS_EnablePLLAndSwitchSystem+0x24>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	6831      	ldr	r1, [r6, #0]
 800199a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800199e:	430a      	orrs	r2, r1
 80019a0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	f022 0203 	bic.w	r2, r2, #3
 80019a8:	f042 0202 	orr.w	r2, r2, #2
 80019ac:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80019ae:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <UTILS_EnablePLLAndSwitchSystem+0x94>)
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	f002 020c 	and.w	r2, r2, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80019b6:	2a08      	cmp	r2, #8
 80019b8:	d1fa      	bne.n	80019b0 <UTILS_EnablePLLAndSwitchSystem+0x44>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80019ba:	689a      	ldr	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80019bc:	2001      	movs	r0, #1
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80019be:	6871      	ldr	r1, [r6, #4]
 80019c0:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80019c4:	430a      	orrs	r2, r1
 80019c6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	68b1      	ldr	r1, [r6, #8]
 80019cc:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019d0:	430a      	orrs	r2, r1
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	e005      	b.n	80019e2 <UTILS_EnablePLLAndSwitchSystem+0x76>
    status = ERROR;
 80019d6:	4620      	mov	r0, r4
  if(HCLK_Frequency == 0U)
 80019d8:	b11c      	cbz	r4, 80019e2 <UTILS_EnablePLLAndSwitchSystem+0x76>
 80019da:	f7ff ff59 	bl	8001890 <UTILS_SetFlashLatency.part.0>
  if(status == SUCCESS)
 80019de:	2801      	cmp	r0, #1
 80019e0:	d0d1      	beq.n	8001986 <UTILS_EnablePLLAndSwitchSystem+0x1a>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 80019e2:	682b      	ldr	r3, [r5, #0]
 80019e4:	42a3      	cmp	r3, r4
 80019e6:	d903      	bls.n	80019f0 <UTILS_EnablePLLAndSwitchSystem+0x84>
    status = ERROR;
 80019e8:	4620      	mov	r0, r4
  if(HCLK_Frequency == 0U)
 80019ea:	b124      	cbz	r4, 80019f6 <UTILS_EnablePLLAndSwitchSystem+0x8a>
 80019ec:	f7ff ff50 	bl	8001890 <UTILS_SetFlashLatency.part.0>
    /* Set FLASH latency to lowest latency */
    status = UTILS_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 80019f0:	2801      	cmp	r0, #1
  SystemCoreClock = HCLKFrequency;
 80019f2:	bf08      	it	eq
 80019f4:	602c      	streq	r4, [r5, #0]
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 80019f6:	bd70      	pop	{r4, r5, r6, pc}
 80019f8:	08017547 	.word	0x08017547
 80019fc:	2002da40 	.word	0x2002da40
 8001a00:	40023800 	.word	0x40023800

08001a04 <LL_PLL_ConfigSystemClock_HSE>:
{
 8001a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a08:	4604      	mov	r4, r0
 8001a0a:	460e      	mov	r6, r1
 8001a0c:	4690      	mov	r8, r2
 8001a0e:	461d      	mov	r5, r3
  if(UTILS_PLL_IsBusy() == SUCCESS)
 8001a10:	f7ff ff2a 	bl	8001868 <UTILS_PLL_IsBusy>
 8001a14:	2801      	cmp	r0, #1
 8001a16:	d135      	bne.n	8001a84 <LL_PLL_ConfigSystemClock_HSE+0x80>
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8001a18:	f8d8 3000 	ldr.w	r3, [r8]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8001a1c:	f8d8 7004 	ldr.w	r7, [r8, #4]
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8001a20:	f003 003f 	and.w	r0, r3, #63	; 0x3f
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001a24:	f8d8 1008 	ldr.w	r1, [r8, #8]
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8001a28:	fbb4 f4f0 	udiv	r4, r4, r0
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8001a2c:	f3c7 0008 	ubfx	r0, r7, #0, #9
 8001a30:	4344      	muls	r4, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001a32:	0c08      	lsrs	r0, r1, #16
 8001a34:	3001      	adds	r0, #1
 8001a36:	0040      	lsls	r0, r0, #1
 8001a38:	fbb4 f0f0 	udiv	r0, r4, r0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001a3c:	4c13      	ldr	r4, [pc, #76]	; (8001a8c <LL_PLL_ConfigSystemClock_HSE+0x88>)
 8001a3e:	6822      	ldr	r2, [r4, #0]
    if(LL_RCC_HSE_IsReady() != 1U)
 8001a40:	0392      	lsls	r2, r2, #14
 8001a42:	d40f      	bmi.n	8001a64 <LL_PLL_ConfigSystemClock_HSE+0x60>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001a44:	6822      	ldr	r2, [r4, #0]
      if(HSEBypass == LL_UTILS_HSEBYPASS_ON)
 8001a46:	2e01      	cmp	r6, #1
 8001a48:	bf0c      	ite	eq
 8001a4a:	f442 2280 	orreq.w	r2, r2, #262144	; 0x40000
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001a4e:	f422 2280 	bicne.w	r2, r2, #262144	; 0x40000
 8001a52:	6022      	str	r2, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001a54:	6822      	ldr	r2, [r4, #0]
 8001a56:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a5a:	6022      	str	r2, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001a5c:	4c0b      	ldr	r4, [pc, #44]	; (8001a8c <LL_PLL_ConfigSystemClock_HSE+0x88>)
 8001a5e:	6822      	ldr	r2, [r4, #0]
      while (LL_RCC_HSE_IsReady() != 1U)
 8001a60:	0392      	lsls	r2, r2, #14
 8001a62:	d5fc      	bpl.n	8001a5e <LL_PLL_ConfigSystemClock_HSE+0x5a>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP,
 8001a64:	4c09      	ldr	r4, [pc, #36]	; (8001a8c <LL_PLL_ConfigSystemClock_HSE+0x88>)
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <LL_PLL_ConfigSystemClock_HSE+0x8c>)
 8001a68:	6866      	ldr	r6, [r4, #4]
 8001a6a:	4032      	ands	r2, r6
 8001a6c:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
 8001a70:	431a      	orrs	r2, r3
 8001a72:	430a      	orrs	r2, r1
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8001a74:	4629      	mov	r1, r5
 8001a76:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001a7a:	6062      	str	r2, [r4, #4]
}
 8001a7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8001a80:	f7ff bf74 	b.w	800196c <UTILS_EnablePLLAndSwitchSystem>
}
 8001a84:	2000      	movs	r0, #0
 8001a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	ffbc8000 	.word	0xffbc8000

08001a94 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8001a94:	b538      	push	{r3, r4, r5, lr}
 8001a96:	4604      	mov	r4, r0
 8001a98:	460d      	mov	r5, r1
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	49cb      	ldr	r1, [pc, #812]	; (8001dcc <OTM8009A_Init+0x338>)
 8001a9e:	f000 fb89 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8001aa2:	49cb      	ldr	r1, [pc, #812]	; (8001dd0 <OTM8009A_Init+0x33c>)
 8001aa4:	2003      	movs	r0, #3
 8001aa6:	f000 fb85 	bl	80021b4 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8001aaa:	49ca      	ldr	r1, [pc, #808]	; (8001dd4 <OTM8009A_Init+0x340>)
 8001aac:	2000      	movs	r0, #0
 8001aae:	f000 fb81 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8001ab2:	49c9      	ldr	r1, [pc, #804]	; (8001dd8 <OTM8009A_Init+0x344>)
 8001ab4:	2002      	movs	r0, #2
 8001ab6:	f000 fb7d 	bl	80021b4 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001aba:	49c6      	ldr	r1, [pc, #792]	; (8001dd4 <OTM8009A_Init+0x340>)
 8001abc:	2000      	movs	r0, #0
 8001abe:	f000 fb79 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8001ac2:	49c6      	ldr	r1, [pc, #792]	; (8001ddc <OTM8009A_Init+0x348>)
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f000 fb75 	bl	80021b4 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8001aca:	200a      	movs	r0, #10
 8001acc:	f00d f93d 	bl	800ed4a <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8001ad0:	49c3      	ldr	r1, [pc, #780]	; (8001de0 <OTM8009A_Init+0x34c>)
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f000 fb6e 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8001ad8:	49c2      	ldr	r1, [pc, #776]	; (8001de4 <OTM8009A_Init+0x350>)
 8001ada:	2000      	movs	r0, #0
 8001adc:	f000 fb6a 	bl	80021b4 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8001ae0:	200a      	movs	r0, #10
 8001ae2:	f00d f932 	bl	800ed4a <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8001ae6:	49c0      	ldr	r1, [pc, #768]	; (8001de8 <OTM8009A_Init+0x354>)
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f000 fb63 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8001aee:	49bf      	ldr	r1, [pc, #764]	; (8001dec <OTM8009A_Init+0x358>)
 8001af0:	2000      	movs	r0, #0
 8001af2:	f000 fb5f 	bl	80021b4 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8001af6:	49be      	ldr	r1, [pc, #760]	; (8001df0 <OTM8009A_Init+0x35c>)
 8001af8:	2000      	movs	r0, #0
 8001afa:	f000 fb5b 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8001afe:	49bd      	ldr	r1, [pc, #756]	; (8001df4 <OTM8009A_Init+0x360>)
 8001b00:	2000      	movs	r0, #0
 8001b02:	f000 fb57 	bl	80021b4 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8001b06:	49bc      	ldr	r1, [pc, #752]	; (8001df8 <OTM8009A_Init+0x364>)
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f000 fb53 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8001b0e:	49bb      	ldr	r1, [pc, #748]	; (8001dfc <OTM8009A_Init+0x368>)
 8001b10:	2000      	movs	r0, #0
 8001b12:	f000 fb4f 	bl	80021b4 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001b16:	49ad      	ldr	r1, [pc, #692]	; (8001dcc <OTM8009A_Init+0x338>)
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f000 fb4b 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8001b1e:	49b8      	ldr	r1, [pc, #736]	; (8001e00 <OTM8009A_Init+0x36c>)
 8001b20:	2000      	movs	r0, #0
 8001b22:	f000 fb47 	bl	80021b4 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001b26:	49b7      	ldr	r1, [pc, #732]	; (8001e04 <OTM8009A_Init+0x370>)
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f000 fb43 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8001b2e:	49b6      	ldr	r1, [pc, #728]	; (8001e08 <OTM8009A_Init+0x374>)
 8001b30:	2000      	movs	r0, #0
 8001b32:	f000 fb3f 	bl	80021b4 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001b36:	49b5      	ldr	r1, [pc, #724]	; (8001e0c <OTM8009A_Init+0x378>)
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f000 fb3b 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8001b3e:	49b4      	ldr	r1, [pc, #720]	; (8001e10 <OTM8009A_Init+0x37c>)
 8001b40:	2000      	movs	r0, #0
 8001b42:	f000 fb37 	bl	80021b4 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8001b46:	49b3      	ldr	r1, [pc, #716]	; (8001e14 <OTM8009A_Init+0x380>)
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f000 fb33 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8001b4e:	49b2      	ldr	r1, [pc, #712]	; (8001e18 <OTM8009A_Init+0x384>)
 8001b50:	2000      	movs	r0, #0
 8001b52:	f000 fb2f 	bl	80021b4 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8001b56:	49b1      	ldr	r1, [pc, #708]	; (8001e1c <OTM8009A_Init+0x388>)
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f000 fb2b 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8001b5e:	49a5      	ldr	r1, [pc, #660]	; (8001df4 <OTM8009A_Init+0x360>)
 8001b60:	2000      	movs	r0, #0
 8001b62:	f000 fb27 	bl	80021b4 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001b66:	4999      	ldr	r1, [pc, #612]	; (8001dcc <OTM8009A_Init+0x338>)
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f000 fb23 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8001b6e:	49ac      	ldr	r1, [pc, #688]	; (8001e20 <OTM8009A_Init+0x38c>)
 8001b70:	2002      	movs	r0, #2
 8001b72:	f000 fb1f 	bl	80021b4 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8001b76:	49ab      	ldr	r1, [pc, #684]	; (8001e24 <OTM8009A_Init+0x390>)
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f000 fb1b 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8001b7e:	49aa      	ldr	r1, [pc, #680]	; (8001e28 <OTM8009A_Init+0x394>)
 8001b80:	2000      	movs	r0, #0
 8001b82:	f000 fb17 	bl	80021b4 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8001b86:	49a9      	ldr	r1, [pc, #676]	; (8001e2c <OTM8009A_Init+0x398>)
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f000 fb13 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8001b8e:	49a8      	ldr	r1, [pc, #672]	; (8001e30 <OTM8009A_Init+0x39c>)
 8001b90:	2000      	movs	r0, #0
 8001b92:	f000 fb0f 	bl	80021b4 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8001b96:	49a7      	ldr	r1, [pc, #668]	; (8001e34 <OTM8009A_Init+0x3a0>)
 8001b98:	2000      	movs	r0, #0
 8001b9a:	f000 fb0b 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8001b9e:	49a6      	ldr	r1, [pc, #664]	; (8001e38 <OTM8009A_Init+0x3a4>)
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f000 fb07 	bl	80021b4 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001ba6:	4997      	ldr	r1, [pc, #604]	; (8001e04 <OTM8009A_Init+0x370>)
 8001ba8:	2000      	movs	r0, #0
 8001baa:	f000 fb03 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8001bae:	49a3      	ldr	r1, [pc, #652]	; (8001e3c <OTM8009A_Init+0x3a8>)
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f000 faff 	bl	80021b4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001bb6:	4995      	ldr	r1, [pc, #596]	; (8001e0c <OTM8009A_Init+0x378>)
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f000 fafb 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8001bbe:	49a0      	ldr	r1, [pc, #640]	; (8001e40 <OTM8009A_Init+0x3ac>)
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f000 faf7 	bl	80021b4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8001bc6:	499f      	ldr	r1, [pc, #636]	; (8001e44 <OTM8009A_Init+0x3b0>)
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f000 faf3 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8001bce:	499e      	ldr	r1, [pc, #632]	; (8001e48 <OTM8009A_Init+0x3b4>)
 8001bd0:	2002      	movs	r0, #2
 8001bd2:	f000 faef 	bl	80021b4 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001bd6:	497f      	ldr	r1, [pc, #508]	; (8001dd4 <OTM8009A_Init+0x340>)
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f000 faeb 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8001bde:	499b      	ldr	r1, [pc, #620]	; (8001e4c <OTM8009A_Init+0x3b8>)
 8001be0:	2006      	movs	r0, #6
 8001be2:	f000 fae7 	bl	80021b4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001be6:	499a      	ldr	r1, [pc, #616]	; (8001e50 <OTM8009A_Init+0x3bc>)
 8001be8:	2000      	movs	r0, #0
 8001bea:	f000 fae3 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8001bee:	4999      	ldr	r1, [pc, #612]	; (8001e54 <OTM8009A_Init+0x3c0>)
 8001bf0:	200e      	movs	r0, #14
 8001bf2:	f000 fadf 	bl	80021b4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001bf6:	4998      	ldr	r1, [pc, #608]	; (8001e58 <OTM8009A_Init+0x3c4>)
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f000 fadb 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8001bfe:	4997      	ldr	r1, [pc, #604]	; (8001e5c <OTM8009A_Init+0x3c8>)
 8001c00:	200e      	movs	r0, #14
 8001c02:	f000 fad7 	bl	80021b4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001c06:	4996      	ldr	r1, [pc, #600]	; (8001e60 <OTM8009A_Init+0x3cc>)
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f000 fad3 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8001c0e:	4995      	ldr	r1, [pc, #596]	; (8001e64 <OTM8009A_Init+0x3d0>)
 8001c10:	200a      	movs	r0, #10
 8001c12:	f000 facf 	bl	80021b4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001c16:	4994      	ldr	r1, [pc, #592]	; (8001e68 <OTM8009A_Init+0x3d4>)
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f000 facb 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8001c1e:	4993      	ldr	r1, [pc, #588]	; (8001e6c <OTM8009A_Init+0x3d8>)
 8001c20:	2000      	movs	r0, #0
 8001c22:	f000 fac7 	bl	80021b4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001c26:	496b      	ldr	r1, [pc, #428]	; (8001dd4 <OTM8009A_Init+0x340>)
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f000 fac3 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8001c2e:	4990      	ldr	r1, [pc, #576]	; (8001e70 <OTM8009A_Init+0x3dc>)
 8001c30:	200a      	movs	r0, #10
 8001c32:	f000 fabf 	bl	80021b4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8001c36:	498f      	ldr	r1, [pc, #572]	; (8001e74 <OTM8009A_Init+0x3e0>)
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f000 fabb 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8001c3e:	498e      	ldr	r1, [pc, #568]	; (8001e78 <OTM8009A_Init+0x3e4>)
 8001c40:	200f      	movs	r0, #15
 8001c42:	f000 fab7 	bl	80021b4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001c46:	4982      	ldr	r1, [pc, #520]	; (8001e50 <OTM8009A_Init+0x3bc>)
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f000 fab3 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8001c4e:	498b      	ldr	r1, [pc, #556]	; (8001e7c <OTM8009A_Init+0x3e8>)
 8001c50:	200f      	movs	r0, #15
 8001c52:	f000 faaf 	bl	80021b4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001c56:	4980      	ldr	r1, [pc, #512]	; (8001e58 <OTM8009A_Init+0x3c4>)
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f000 faab 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8001c5e:	4988      	ldr	r1, [pc, #544]	; (8001e80 <OTM8009A_Init+0x3ec>)
 8001c60:	200a      	movs	r0, #10
 8001c62:	f000 faa7 	bl	80021b4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001c66:	497e      	ldr	r1, [pc, #504]	; (8001e60 <OTM8009A_Init+0x3cc>)
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f000 faa3 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8001c6e:	4985      	ldr	r1, [pc, #532]	; (8001e84 <OTM8009A_Init+0x3f0>)
 8001c70:	200f      	movs	r0, #15
 8001c72:	f000 fa9f 	bl	80021b4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001c76:	497c      	ldr	r1, [pc, #496]	; (8001e68 <OTM8009A_Init+0x3d4>)
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f000 fa9b 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8001c7e:	4982      	ldr	r1, [pc, #520]	; (8001e88 <OTM8009A_Init+0x3f4>)
 8001c80:	200f      	movs	r0, #15
 8001c82:	f000 fa97 	bl	80021b4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8001c86:	4981      	ldr	r1, [pc, #516]	; (8001e8c <OTM8009A_Init+0x3f8>)
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f000 fa93 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8001c8e:	4980      	ldr	r1, [pc, #512]	; (8001e90 <OTM8009A_Init+0x3fc>)
 8001c90:	200a      	movs	r0, #10
 8001c92:	f000 fa8f 	bl	80021b4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8001c96:	497f      	ldr	r1, [pc, #508]	; (8001e94 <OTM8009A_Init+0x400>)
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f000 fa8b 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8001c9e:	497e      	ldr	r1, [pc, #504]	; (8001e98 <OTM8009A_Init+0x404>)
 8001ca0:	200a      	movs	r0, #10
 8001ca2:	f000 fa87 	bl	80021b4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001ca6:	494b      	ldr	r1, [pc, #300]	; (8001dd4 <OTM8009A_Init+0x340>)
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f000 fa83 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8001cae:	497b      	ldr	r1, [pc, #492]	; (8001e9c <OTM8009A_Init+0x408>)
 8001cb0:	200a      	movs	r0, #10
 8001cb2:	f000 fa7f 	bl	80021b4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8001cb6:	496f      	ldr	r1, [pc, #444]	; (8001e74 <OTM8009A_Init+0x3e0>)
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f000 fa7b 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8001cbe:	4978      	ldr	r1, [pc, #480]	; (8001ea0 <OTM8009A_Init+0x40c>)
 8001cc0:	200f      	movs	r0, #15
 8001cc2:	f000 fa77 	bl	80021b4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001cc6:	4962      	ldr	r1, [pc, #392]	; (8001e50 <OTM8009A_Init+0x3bc>)
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f000 fa73 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8001cce:	4975      	ldr	r1, [pc, #468]	; (8001ea4 <OTM8009A_Init+0x410>)
 8001cd0:	200f      	movs	r0, #15
 8001cd2:	f000 fa6f 	bl	80021b4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001cd6:	4960      	ldr	r1, [pc, #384]	; (8001e58 <OTM8009A_Init+0x3c4>)
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f000 fa6b 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8001cde:	4972      	ldr	r1, [pc, #456]	; (8001ea8 <OTM8009A_Init+0x414>)
 8001ce0:	200a      	movs	r0, #10
 8001ce2:	f000 fa67 	bl	80021b4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001ce6:	495e      	ldr	r1, [pc, #376]	; (8001e60 <OTM8009A_Init+0x3cc>)
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f000 fa63 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8001cee:	496f      	ldr	r1, [pc, #444]	; (8001eac <OTM8009A_Init+0x418>)
 8001cf0:	200f      	movs	r0, #15
 8001cf2:	f000 fa5f 	bl	80021b4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001cf6:	495c      	ldr	r1, [pc, #368]	; (8001e68 <OTM8009A_Init+0x3d4>)
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f000 fa5b 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8001cfe:	496c      	ldr	r1, [pc, #432]	; (8001eb0 <OTM8009A_Init+0x41c>)
 8001d00:	200f      	movs	r0, #15
 8001d02:	f000 fa57 	bl	80021b4 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001d06:	493f      	ldr	r1, [pc, #252]	; (8001e04 <OTM8009A_Init+0x370>)
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f000 fa53 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8001d0e:	4969      	ldr	r1, [pc, #420]	; (8001eb4 <OTM8009A_Init+0x420>)
 8001d10:	2000      	movs	r0, #0
 8001d12:	f000 fa4f 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8001d16:	4968      	ldr	r1, [pc, #416]	; (8001eb8 <OTM8009A_Init+0x424>)
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f000 fa4b 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8001d1e:	4967      	ldr	r1, [pc, #412]	; (8001ebc <OTM8009A_Init+0x428>)
 8001d20:	2000      	movs	r0, #0
 8001d22:	f000 fa47 	bl	80021b4 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8001d26:	4966      	ldr	r1, [pc, #408]	; (8001ec0 <OTM8009A_Init+0x42c>)
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f000 fa43 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8001d2e:	4965      	ldr	r1, [pc, #404]	; (8001ec4 <OTM8009A_Init+0x430>)
 8001d30:	2000      	movs	r0, #0
 8001d32:	f000 fa3f 	bl	80021b4 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001d36:	4925      	ldr	r1, [pc, #148]	; (8001dcc <OTM8009A_Init+0x338>)
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f000 fa3b 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8001d3e:	4962      	ldr	r1, [pc, #392]	; (8001ec8 <OTM8009A_Init+0x434>)
 8001d40:	2003      	movs	r0, #3
 8001d42:	f000 fa37 	bl	80021b4 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001d46:	4921      	ldr	r1, [pc, #132]	; (8001dcc <OTM8009A_Init+0x338>)
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f000 fa33 	bl	80021b4 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001d4e:	491f      	ldr	r1, [pc, #124]	; (8001dcc <OTM8009A_Init+0x338>)
 8001d50:	2000      	movs	r0, #0
 8001d52:	f000 fa2f 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8001d56:	495d      	ldr	r1, [pc, #372]	; (8001ecc <OTM8009A_Init+0x438>)
 8001d58:	2010      	movs	r0, #16
 8001d5a:	f000 fa2b 	bl	80021b4 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001d5e:	491b      	ldr	r1, [pc, #108]	; (8001dcc <OTM8009A_Init+0x338>)
 8001d60:	2000      	movs	r0, #0
 8001d62:	f000 fa27 	bl	80021b4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8001d66:	495a      	ldr	r1, [pc, #360]	; (8001ed0 <OTM8009A_Init+0x43c>)
 8001d68:	2010      	movs	r0, #16
 8001d6a:	f000 fa23 	bl	80021b4 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8001d6e:	2000      	movs	r0, #0
 8001d70:	4958      	ldr	r1, [pc, #352]	; (8001ed4 <OTM8009A_Init+0x440>)
 8001d72:	f000 fa1f 	bl	80021b4 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8001d76:	2078      	movs	r0, #120	; 0x78
 8001d78:	f00c ffe7 	bl	800ed4a <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8001d7c:	2c00      	cmp	r4, #0
 8001d7e:	f000 80c9 	beq.w	8001f14 <OTM8009A_Init+0x480>
 8001d82:	2c02      	cmp	r4, #2
 8001d84:	d103      	bne.n	8001d8e <OTM8009A_Init+0x2fa>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8001d86:	4954      	ldr	r1, [pc, #336]	; (8001ed8 <OTM8009A_Init+0x444>)
 8001d88:	2000      	movs	r0, #0
    break;
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8001d8a:	f000 fa13 	bl	80021b4 <DSI_IO_WriteCmd>
    break;
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8001d8e:	2d01      	cmp	r5, #1
 8001d90:	d10b      	bne.n	8001daa <OTM8009A_Init+0x316>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8001d92:	4952      	ldr	r1, [pc, #328]	; (8001edc <OTM8009A_Init+0x448>)
 8001d94:	2000      	movs	r0, #0
 8001d96:	f000 fa0d 	bl	80021b4 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8001d9a:	4951      	ldr	r1, [pc, #324]	; (8001ee0 <OTM8009A_Init+0x44c>)
 8001d9c:	2004      	movs	r0, #4
 8001d9e:	f000 fa09 	bl	80021b4 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8001da2:	4950      	ldr	r1, [pc, #320]	; (8001ee4 <OTM8009A_Init+0x450>)
 8001da4:	2004      	movs	r0, #4
 8001da6:	f000 fa05 	bl	80021b4 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8001daa:	494f      	ldr	r1, [pc, #316]	; (8001ee8 <OTM8009A_Init+0x454>)
 8001dac:	2000      	movs	r0, #0
 8001dae:	f000 fa01 	bl	80021b4 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8001db2:	494e      	ldr	r1, [pc, #312]	; (8001eec <OTM8009A_Init+0x458>)
 8001db4:	2000      	movs	r0, #0
 8001db6:	f000 f9fd 	bl	80021b4 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8001dba:	494d      	ldr	r1, [pc, #308]	; (8001ef0 <OTM8009A_Init+0x45c>)
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f000 f9f9 	bl	80021b4 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8001dc2:	494c      	ldr	r1, [pc, #304]	; (8001ef4 <OTM8009A_Init+0x460>)
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	f000 f9f5 	bl	80021b4 <DSI_IO_WriteCmd>
 8001dca:	e095      	b.n	8001ef8 <OTM8009A_Init+0x464>
 8001dcc:	0801755f 	.word	0x0801755f
 8001dd0:	080175c5 	.word	0x080175c5
 8001dd4:	08017575 	.word	0x08017575
 8001dd8:	0801764b 	.word	0x0801764b
 8001ddc:	0801758b 	.word	0x0801758b
 8001de0:	080175a1 	.word	0x080175a1
 8001de4:	080175b7 	.word	0x080175b7
 8001de8:	080175bd 	.word	0x080175bd
 8001dec:	080175bf 	.word	0x080175bf
 8001df0:	080175c1 	.word	0x080175c1
 8001df4:	080175c3 	.word	0x080175c3
 8001df8:	08017561 	.word	0x08017561
 8001dfc:	08017563 	.word	0x08017563
 8001e00:	08017565 	.word	0x08017565
 8001e04:	08017567 	.word	0x08017567
 8001e08:	08017569 	.word	0x08017569
 8001e0c:	0801756b 	.word	0x0801756b
 8001e10:	0801756d 	.word	0x0801756d
 8001e14:	0801756f 	.word	0x0801756f
 8001e18:	08017571 	.word	0x08017571
 8001e1c:	08017573 	.word	0x08017573
 8001e20:	080176c9 	.word	0x080176c9
 8001e24:	08017577 	.word	0x08017577
 8001e28:	08017579 	.word	0x08017579
 8001e2c:	0801757b 	.word	0x0801757b
 8001e30:	0801757d 	.word	0x0801757d
 8001e34:	0801757f 	.word	0x0801757f
 8001e38:	08017581 	.word	0x08017581
 8001e3c:	08017583 	.word	0x08017583
 8001e40:	08017585 	.word	0x08017585
 8001e44:	08017587 	.word	0x08017587
 8001e48:	080176cc 	.word	0x080176cc
 8001e4c:	080176cf 	.word	0x080176cf
 8001e50:	08017589 	.word	0x08017589
 8001e54:	080176d6 	.word	0x080176d6
 8001e58:	0801758d 	.word	0x0801758d
 8001e5c:	080176e5 	.word	0x080176e5
 8001e60:	0801758f 	.word	0x0801758f
 8001e64:	080175c9 	.word	0x080175c9
 8001e68:	08017591 	.word	0x08017591
 8001e6c:	080175af 	.word	0x080175af
 8001e70:	080175d4 	.word	0x080175d4
 8001e74:	08017593 	.word	0x08017593
 8001e78:	080175df 	.word	0x080175df
 8001e7c:	080175ef 	.word	0x080175ef
 8001e80:	080175ff 	.word	0x080175ff
 8001e84:	0801760a 	.word	0x0801760a
 8001e88:	0801761a 	.word	0x0801761a
 8001e8c:	08017595 	.word	0x08017595
 8001e90:	0801762a 	.word	0x0801762a
 8001e94:	08017597 	.word	0x08017597
 8001e98:	08017635 	.word	0x08017635
 8001e9c:	08017640 	.word	0x08017640
 8001ea0:	0801764e 	.word	0x0801764e
 8001ea4:	0801765e 	.word	0x0801765e
 8001ea8:	0801766e 	.word	0x0801766e
 8001eac:	08017679 	.word	0x08017679
 8001eb0:	08017689 	.word	0x08017689
 8001eb4:	080175b1 	.word	0x080175b1
 8001eb8:	080175b3 	.word	0x080175b3
 8001ebc:	080175b5 	.word	0x080175b5
 8001ec0:	080175b9 	.word	0x080175b9
 8001ec4:	080175bb 	.word	0x080175bb
 8001ec8:	08017699 	.word	0x08017699
 8001ecc:	080176a7 	.word	0x080176a7
 8001ed0:	080176b8 	.word	0x080176b8
 8001ed4:	08017599 	.word	0x08017599
 8001ed8:	0801759b 	.word	0x0801759b
 8001edc:	0801759f 	.word	0x0801759f
 8001ee0:	0801769d 	.word	0x0801769d
 8001ee4:	080176a2 	.word	0x080176a2
 8001ee8:	080175a3 	.word	0x080175a3
 8001eec:	080175a5 	.word	0x080175a5
 8001ef0:	080175a7 	.word	0x080175a7
 8001ef4:	080175a9 	.word	0x080175a9

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8001ef8:	4908      	ldr	r1, [pc, #32]	; (8001f1c <OTM8009A_Init+0x488>)
 8001efa:	2000      	movs	r0, #0
 8001efc:	f000 f95a 	bl	80021b4 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001f00:	4907      	ldr	r1, [pc, #28]	; (8001f20 <OTM8009A_Init+0x48c>)
 8001f02:	2000      	movs	r0, #0
 8001f04:	f000 f956 	bl	80021b4 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8001f08:	4906      	ldr	r1, [pc, #24]	; (8001f24 <OTM8009A_Init+0x490>)
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f000 f952 	bl	80021b4 <DSI_IO_WriteCmd>

  return 0;
}
 8001f10:	2000      	movs	r0, #0
 8001f12:	bd38      	pop	{r3, r4, r5, pc}
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8001f14:	4904      	ldr	r1, [pc, #16]	; (8001f28 <OTM8009A_Init+0x494>)
 8001f16:	4620      	mov	r0, r4
 8001f18:	e737      	b.n	8001d8a <OTM8009A_Init+0x2f6>
 8001f1a:	bf00      	nop
 8001f1c:	080175ab 	.word	0x080175ab
 8001f20:	0801755f 	.word	0x0801755f
 8001f24:	080175ad 	.word	0x080175ad
 8001f28:	0801759d 	.word	0x0801759d

08001f2c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001f2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001f30:	4c21      	ldr	r4, [pc, #132]	; (8001fb8 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001f32:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001f34:	4d21      	ldr	r5, [pc, #132]	; (8001fbc <BSP_SDRAM_Initialization_sequence+0x90>)
  __IO uint32_t tmpmrd = 0;
 8001f36:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001f3a:	2710      	movs	r7, #16
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001f3c:	4621      	mov	r1, r4
{
 8001f3e:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f44:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 8001f46:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001f4a:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8001f4e:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001f52:	f00c fe74 	bl	800ec3e <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001f56:	4630      	mov	r0, r6
 8001f58:	f00c fa9a 	bl	800e490 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001f5c:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001f5e:	4621      	mov	r1, r4
 8001f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f64:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001f66:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8001f6a:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001f6e:	f00c fe66 	bl	800ec3e <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001f72:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001f74:	4621      	mov	r1, r4
 8001f76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f7a:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001f7c:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 8001f80:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 8001f82:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001f86:	f00c fe5a 	bl	800ec3e <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001f8a:	f44f 730c 	mov.w	r3, #560	; 0x230
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001f8e:	4621      	mov	r1, r4
 8001f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001f94:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001f96:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001f98:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 8001f9a:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001f9c:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 8001fa0:	9b01      	ldr	r3, [sp, #4]
 8001fa2:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001fa4:	f00c fe4b 	bl	800ec3e <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001fa8:	4649      	mov	r1, r9
 8001faa:	4628      	mov	r0, r5
}
 8001fac:	b003      	add	sp, #12
 8001fae:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001fb2:	f00c be5b 	b.w	800ec6c <HAL_SDRAM_ProgramRefreshRate>
 8001fb6:	bf00      	nop
 8001fb8:	200200dc 	.word	0x200200dc
 8001fbc:	20020168 	.word	0x20020168

08001fc0 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001fc0:	4b55      	ldr	r3, [pc, #340]	; (8002118 <BSP_SDRAM_MspInit+0x158>)
 8001fc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fc4:	f042 0201 	orr.w	r2, r2, #1
{  
 8001fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8001fca:	639a      	str	r2, [r3, #56]	; 0x38
{  
 8001fcc:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_FMC_CLK_ENABLE();
 8001fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001fd0:	2703      	movs	r7, #3
{  
 8001fd2:	4606      	mov	r6, r0
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001fd4:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_FMC_CLK_ENABLE();
 8001fd6:	f002 0201 	and.w	r2, r2, #1
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001fda:	4850      	ldr	r0, [pc, #320]	; (800211c <BSP_SDRAM_MspInit+0x15c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001fdc:	4c50      	ldr	r4, [pc, #320]	; (8002120 <BSP_SDRAM_MspInit+0x160>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001fde:	2500      	movs	r5, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 8001fe0:	9201      	str	r2, [sp, #4]
 8001fe2:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8001fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fe6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001fea:	631a      	str	r2, [r3, #48]	; 0x30
 8001fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fee:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001ff2:	9202      	str	r2, [sp, #8]
 8001ff4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ff8:	f042 0208 	orr.w	r2, r2, #8
 8001ffc:	631a      	str	r2, [r3, #48]	; 0x30
 8001ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002000:	f002 0208 	and.w	r2, r2, #8
 8002004:	9203      	str	r2, [sp, #12]
 8002006:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800200a:	f042 0210 	orr.w	r2, r2, #16
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
 8002010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002012:	f002 0210 	and.w	r2, r2, #16
 8002016:	9204      	str	r2, [sp, #16]
 8002018:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800201a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800201c:	f042 0220 	orr.w	r2, r2, #32
 8002020:	631a      	str	r2, [r3, #48]	; 0x30
 8002022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002024:	f002 0220 	and.w	r2, r2, #32
 8002028:	9205      	str	r2, [sp, #20]
 800202a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800202c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800202e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002032:	631a      	str	r2, [r3, #48]	; 0x30
 8002034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002036:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800203a:	9206      	str	r2, [sp, #24]
 800203c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800203e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002040:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002044:	631a      	str	r2, [r3, #48]	; 0x30
 8002046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002048:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800204c:	9207      	str	r2, [sp, #28]
 800204e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002052:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002056:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002058:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002060:	9308      	str	r3, [sp, #32]
 8002062:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002064:	2301      	movs	r3, #1
 8002066:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800206a:	230c      	movs	r3, #12
 800206c:	e9cd 730c 	strd	r7, r3, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8002070:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002074:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002076:	f7fe ff7d 	bl	8000f74 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800207a:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800207e:	a909      	add	r1, sp, #36	; 0x24
 8002080:	4828      	ldr	r0, [pc, #160]	; (8002124 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002082:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002084:	f7fe ff76 	bl	8000f74 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002088:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800208c:	a909      	add	r1, sp, #36	; 0x24
 800208e:	4826      	ldr	r0, [pc, #152]	; (8002128 <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002090:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002092:	f7fe ff6f 	bl	8000f74 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8002096:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800209a:	a909      	add	r1, sp, #36	; 0x24
 800209c:	4823      	ldr	r0, [pc, #140]	; (800212c <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 800209e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80020a0:	f7fe ff68 	bl	8000f74 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80020a4:	f64f 732c 	movw	r3, #65324	; 0xff2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80020a8:	a909      	add	r1, sp, #36	; 0x24
 80020aa:	4821      	ldr	r0, [pc, #132]	; (8002130 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80020ac:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80020ae:	f7fe ff61 	bl	8000f74 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80020b2:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 80020b6:	a909      	add	r1, sp, #36	; 0x24
 80020b8:	481e      	ldr	r0, [pc, #120]	; (8002134 <BSP_SDRAM_MspInit+0x174>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80020ba:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 80020bc:	f7fe ff5a 	bl	8000f74 <HAL_GPIO_Init>
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80020c0:	2380      	movs	r3, #128	; 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80020c2:	f44f 7100 	mov.w	r1, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80020c6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80020ca:	6325      	str	r5, [r4, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80020cc:	6334      	str	r4, [r6, #48]	; 0x30
  dma_handle.Init.Mode                = DMA_NORMAL;
 80020ce:	61e5      	str	r5, [r4, #28]
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80020d0:	63a6      	str	r6, [r4, #56]	; 0x38
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80020d2:	e9c4 5301 	strd	r5, r3, [r4, #4]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80020d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020da:	e9c4 1303 	strd	r1, r3, [r4, #12]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80020de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020e2:	e9c4 0305 	strd	r0, r3, [r4, #20]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80020e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80020ea:	4620      	mov	r0, r4
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80020ec:	e9c4 3508 	strd	r3, r5, [r4, #32]
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80020f0:	4b11      	ldr	r3, [pc, #68]	; (8002138 <BSP_SDRAM_MspInit+0x178>)
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80020f2:	e9c4 750a 	strd	r7, r5, [r4, #40]	; 0x28
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80020f6:	6023      	str	r3, [r4, #0]
  HAL_DMA_DeInit(&dma_handle);
 80020f8:	f00c fa54 	bl	800e5a4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80020fc:	4620      	mov	r0, r4
 80020fe:	f7fe fd87 	bl	8000c10 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002102:	462a      	mov	r2, r5
 8002104:	210f      	movs	r1, #15
 8002106:	2038      	movs	r0, #56	; 0x38
 8002108:	f7fe fd2c 	bl	8000b64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800210c:	2038      	movs	r0, #56	; 0x38
 800210e:	f7fe fd5b 	bl	8000bc8 <HAL_NVIC_EnableIRQ>
}
 8002112:	b00f      	add	sp, #60	; 0x3c
 8002114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002116:	bf00      	nop
 8002118:	40023800 	.word	0x40023800
 800211c:	40020c00 	.word	0x40020c00
 8002120:	20020108 	.word	0x20020108
 8002124:	40021000 	.word	0x40021000
 8002128:	40021400 	.word	0x40021400
 800212c:	40021800 	.word	0x40021800
 8002130:	40021c00 	.word	0x40021c00
 8002134:	40022000 	.word	0x40022000
 8002138:	40026410 	.word	0x40026410

0800213c <BSP_SDRAM_Init>:
{ 
 800213c:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800213e:	4c19      	ldr	r4, [pc, #100]	; (80021a4 <BSP_SDRAM_Init+0x68>)
  Timing.ExitSelfRefreshDelay = 7;
 8002140:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002142:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <BSP_SDRAM_Init+0x6c>)
  Timing.SelfRefreshTime      = 4;
 8002144:	2204      	movs	r2, #4
  Timing.LoadToActiveDelay    = 2;
 8002146:	4d19      	ldr	r5, [pc, #100]	; (80021ac <BSP_SDRAM_Init+0x70>)
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002148:	f44f 6000 	mov.w	r0, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800214c:	6023      	str	r3, [r4, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800214e:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002150:	60e2      	str	r2, [r4, #12]
  Timing.RCDDelay             = 2;
 8002152:	61ab      	str	r3, [r5, #24]
  Timing.ExitSelfRefreshDelay = 7;
 8002154:	e9c5 3100 	strd	r3, r1, [r5]
  Timing.RowCycleDelay        = 7;
 8002158:	e9c5 2102 	strd	r2, r1, [r5, #8]
  Timing.RPDelay              = 2;
 800215c:	e9c5 3304 	strd	r3, r3, [r5, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002160:	2220      	movs	r2, #32
 8002162:	2340      	movs	r3, #64	; 0x40
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002164:	2100      	movs	r1, #0
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002166:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800216a:	f44f 73c0 	mov.w	r3, #384	; 0x180
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800216e:	62a1      	str	r1, [r4, #40]	; 0x28
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002170:	e9c4 3106 	strd	r3, r1, [r4, #24]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002178:	e9c4 0308 	strd	r0, r3, [r4, #32]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800217c:	4620      	mov	r0, r4
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800217e:	e9c4 1101 	strd	r1, r1, [r4, #4]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002182:	f7ff ff1d 	bl	8001fc0 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002186:	4629      	mov	r1, r5
 8002188:	4620      	mov	r0, r4
 800218a:	4c09      	ldr	r4, [pc, #36]	; (80021b0 <BSP_SDRAM_Init+0x74>)
 800218c:	f00c fd37 	bl	800ebfe <HAL_SDRAM_Init>
 8002190:	3000      	adds	r0, #0
 8002192:	bf18      	it	ne
 8002194:	2001      	movne	r0, #1
 8002196:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002198:	f240 6003 	movw	r0, #1539	; 0x603
 800219c:	f7ff fec6 	bl	8001f2c <BSP_SDRAM_Initialization_sequence>
}
 80021a0:	7820      	ldrb	r0, [r4, #0]
 80021a2:	bd38      	pop	{r3, r4, r5, pc}
 80021a4:	20020168 	.word	0x20020168
 80021a8:	a0000140 	.word	0xa0000140
 80021ac:	200200ec 	.word	0x200200ec
 80021b0:	2002e1e8 	.word	0x2002e1e8

080021b4 <DSI_IO_WriteCmd>:
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
  if(NbrParams <= 1)
 80021b4:	2801      	cmp	r0, #1
{
 80021b6:	4603      	mov	r3, r0
 80021b8:	b507      	push	{r0, r1, r2, lr}
  if(NbrParams <= 1)
 80021ba:	d80a      	bhi.n	80021d2 <DSI_IO_WriteCmd+0x1e>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 80021bc:	784b      	ldrb	r3, [r1, #1]
 80021be:	2215      	movs	r2, #21
 80021c0:	4808      	ldr	r0, [pc, #32]	; (80021e4 <DSI_IO_WriteCmd+0x30>)
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	780b      	ldrb	r3, [r1, #0]
 80021c6:	2100      	movs	r1, #0
 80021c8:	f00c fbea 	bl	800e9a0 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 80021cc:	b003      	add	sp, #12
 80021ce:	f85d fb04 	ldr.w	pc, [sp], #4
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 80021d2:	9101      	str	r1, [sp, #4]
 80021d4:	5c0a      	ldrb	r2, [r1, r0]
 80021d6:	2100      	movs	r1, #0
 80021d8:	4802      	ldr	r0, [pc, #8]	; (80021e4 <DSI_IO_WriteCmd+0x30>)
 80021da:	9200      	str	r2, [sp, #0]
 80021dc:	2239      	movs	r2, #57	; 0x39
 80021de:	f00c fbf0 	bl	800e9c2 <HAL_DSI_LongWrite>
}
 80021e2:	e7f3      	b.n	80021cc <DSI_IO_WriteCmd+0x18>
 80021e4:	200201f4 	.word	0x200201f4

080021e8 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 80021e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80021ea:	4b27      	ldr	r3, [pc, #156]	; (8002288 <BSP_LCD_MspInit+0xa0>)
  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
  __HAL_RCC_DSI_RELEASE_RESET();

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 80021ec:	2103      	movs	r1, #3
 80021ee:	2058      	movs	r0, #88	; 0x58
  __HAL_RCC_LTDC_CLK_ENABLE();
 80021f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80021f6:	645a      	str	r2, [r3, #68]	; 0x44
 80021f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021fa:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80021fe:	9201      	str	r2, [sp, #4]
 8002200:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_LTDC_FORCE_RESET();
 8002202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002204:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002208:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 800220a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800220c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002210:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002214:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002218:	631a      	str	r2, [r3, #48]	; 0x30
 800221a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800221c:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8002220:	9202      	str	r2, [sp, #8]
 8002222:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2D_FORCE_RESET();
 8002224:	691a      	ldr	r2, [r3, #16]
 8002226:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800222a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002232:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DSI_CLK_ENABLE();
 8002234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002236:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800223a:	645a      	str	r2, [r3, #68]	; 0x44
 800223c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800223e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002242:	9203      	str	r2, [sp, #12]
 8002244:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_DSI_FORCE_RESET();
 8002246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002248:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800224c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 800224e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002250:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8002254:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8002256:	2200      	movs	r2, #0
 8002258:	f7fe fc84 	bl	8000b64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800225c:	2058      	movs	r0, #88	; 0x58
 800225e:	f7fe fcb3 	bl	8000bc8 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8002262:	2200      	movs	r2, #0
 8002264:	2103      	movs	r1, #3
 8002266:	205a      	movs	r0, #90	; 0x5a
 8002268:	f7fe fc7c 	bl	8000b64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800226c:	205a      	movs	r0, #90	; 0x5a
 800226e:	f7fe fcab 	bl	8000bc8 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8002272:	2200      	movs	r2, #0
 8002274:	2103      	movs	r1, #3
 8002276:	2062      	movs	r0, #98	; 0x62
 8002278:	f7fe fc74 	bl	8000b64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 800227c:	2062      	movs	r0, #98	; 0x62
}
 800227e:	b005      	add	sp, #20
 8002280:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8002284:	f7fe bca0 	b.w	8000bc8 <HAL_NVIC_EnableIRQ>
 8002288:	40023800 	.word	0x40023800

0800228c <DMA2D_TransferComplete>:
 **********************/
static volatile int dma2d_done;

static void DMA2D_TransferComplete(DMA2D_HandleTypeDef *han)
{
	i++;
 800228c:	4a03      	ldr	r2, [pc, #12]	; (800229c <DMA2D_TransferComplete+0x10>)
 800228e:	6813      	ldr	r3, [r2, #0]
 8002290:	3301      	adds	r3, #1
 8002292:	6013      	str	r3, [r2, #0]
	dma2d_done = 1;
 8002294:	2201      	movs	r2, #1
 8002296:	4b02      	ldr	r3, [pc, #8]	; (80022a0 <DMA2D_TransferComplete+0x14>)
 8002298:	601a      	str	r2, [r3, #0]
}
 800229a:	4770      	bx	lr
 800229c:	200203d4 	.word	0x200203d4
 80022a0:	200203c4 	.word	0x200203c4

080022a4 <tft_flush_cb>:


static void tft_flush_cb(lv_disp_drv_t * drv, const lv_area_t * area, lv_color_t * color_p)
{
 80022a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 80022a8:	888d      	ldrh	r5, [r1, #4]
	uint32_t destination = (uint32_t)pDst + (y * 800 + x) * 2;
	uint32_t source      = (uint32_t)pSrc;

	/*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
	hdma2d_discovery.Init.Mode         = DMA2D_M2M;
	hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_RGB565;
 80022aa:	2300      	movs	r3, #0
	CopyBuffer((const uint32_t *)color_p, my_fb, area->x1, area->y1, lv_area_get_width(area), lv_area_get_height(area));
 80022ac:	f9b1 b000 	ldrsh.w	fp, [r1]
{
 80022b0:	4691      	mov	r9, r2
 80022b2:	3501      	adds	r5, #1
	CopyBuffer((const uint32_t *)color_p, my_fb, area->x1, area->y1, lv_area_get_width(area), lv_area_get_height(area));
 80022b4:	f9b1 a002 	ldrsh.w	sl, [r1, #2]
	hdma2d_discovery.Init.Mode         = DMA2D_M2M;
 80022b8:	4c23      	ldr	r4, [pc, #140]	; (8002348 <tft_flush_cb+0xa4>)
	hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_RGB565;
 80022ba:	2202      	movs	r2, #2
 80022bc:	eba5 050b 	sub.w	r5, r5, fp
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 80022c0:	f9b1 6006 	ldrsh.w	r6, [r1, #6]
	hdma2d_discovery.Init.OutputOffset = 800 - xsize;
	hdma2d_discovery.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  /* No Output Alpha Inversion*/
	hdma2d_discovery.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     /* No Output Red & Blue swap */
 80022c4:	6163      	str	r3, [r4, #20]
{
 80022c6:	4680      	mov	r8, r0
	CopyBuffer((const uint32_t *)color_p, my_fb, area->x1, area->y1, lv_area_get_width(area), lv_area_get_height(area));
 80022c8:	b2ad      	uxth	r5, r5

	/*##-2- DMA2D Callbacks Configuration ######################################*/
	hdma2d_discovery.XferCpltCallback  = DMA2D_TransferComplete;

	/*##-3- Foreground Configuration ###########################################*/
	hdma2d_discovery.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80022ca:	6423      	str	r3, [r4, #64]	; 0x40
	hdma2d_discovery.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; /* No ForeGround Red/Blue swap */
	hdma2d_discovery.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */

	hdma2d_discovery.Instance          = DMA2D;
	/* DMA2D Initialization */
   if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 80022cc:	4620      	mov	r0, r4
	hdma2d_discovery.Init.OutputOffset = 800 - xsize;
 80022ce:	f5c5 7148 	rsb	r1, r5, #800	; 0x320
	hdma2d_discovery.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  /* No Output Alpha Inversion*/
 80022d2:	e9c4 1303 	strd	r1, r3, [r4, #12]
	hdma2d_discovery.XferCpltCallback  = DMA2D_TransferComplete;
 80022d6:	491d      	ldr	r1, [pc, #116]	; (800234c <tft_flush_cb+0xa8>)
	hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_RGB565;
 80022d8:	e9c4 3201 	strd	r3, r2, [r4, #4]
	hdma2d_discovery.XferCpltCallback  = DMA2D_TransferComplete;
 80022dc:	61a1      	str	r1, [r4, #24]
	hdma2d_discovery.LayerCfg[1].InputAlpha = 0xFF;
 80022de:	21ff      	movs	r1, #255	; 0xff
	hdma2d_discovery.LayerCfg[1].InputOffset = 0;
 80022e0:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
	hdma2d_discovery.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */
 80022e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
	hdma2d_discovery.Instance          = DMA2D;
 80022e8:	4b19      	ldr	r3, [pc, #100]	; (8002350 <tft_flush_cb+0xac>)
	hdma2d_discovery.LayerCfg[1].InputAlpha = 0xFF;
 80022ea:	6461      	str	r1, [r4, #68]	; 0x44
	hdma2d_discovery.Instance          = DMA2D;
 80022ec:	6023      	str	r3, [r4, #0]
   if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 80022ee:	f00c f9c6 	bl	800e67e <HAL_DMA2D_Init>
 80022f2:	b9f8      	cbnz	r0, 8002334 <tft_flush_cb+0x90>
	{
		if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, 1) == HAL_OK)
 80022f4:	2101      	movs	r1, #1
 80022f6:	4620      	mov	r0, r4
 80022f8:	f7fe fd08 	bl	8000d0c <HAL_DMA2D_ConfigLayer>
 80022fc:	b9d0      	cbnz	r0, 8002334 <tft_flush_cb+0x90>
	uint32_t destination = (uint32_t)pDst + (y * 800 + x) * 2;
 80022fe:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002302:	fa1f f28a 	uxth.w	r2, sl
 8002306:	fa1f fb8b 	uxth.w	fp, fp
 800230a:	3601      	adds	r6, #1
		{
			dma2d_done = 0;
 800230c:	4f11      	ldr	r7, [pc, #68]	; (8002354 <tft_flush_cb+0xb0>)
			if (HAL_DMA2D_Start_IT(&hdma2d_discovery, source, destination, xsize, ysize) == HAL_OK)
 800230e:	4649      	mov	r1, r9
	uint32_t destination = (uint32_t)pDst + (y * 800 + x) * 2;
 8002310:	fb03 b202 	mla	r2, r3, r2, fp
 8002314:	eba6 060a 	sub.w	r6, r6, sl
			dma2d_done = 0;
 8002318:	6038      	str	r0, [r7, #0]
			if (HAL_DMA2D_Start_IT(&hdma2d_discovery, source, destination, xsize, ysize) == HAL_OK)
 800231a:	462b      	mov	r3, r5
	uint32_t destination = (uint32_t)pDst + (y * 800 + x) * 2;
 800231c:	0052      	lsls	r2, r2, #1
			if (HAL_DMA2D_Start_IT(&hdma2d_discovery, source, destination, xsize, ysize) == HAL_OK)
 800231e:	4620      	mov	r0, r4
 8002320:	b2b6      	uxth	r6, r6
 8002322:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
 8002326:	9600      	str	r6, [sp, #0]
 8002328:	f00c f9df 	bl	800e6ea <HAL_DMA2D_Start_IT>
 800232c:	b910      	cbnz	r0, 8002334 <tft_flush_cb+0x90>
			{
				while(dma2d_done == 0);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0fc      	beq.n	800232e <tft_flush_cb+0x8a>
    refreshRequested = true ;
 8002334:	4b08      	ldr	r3, [pc, #32]	; (8002358 <tft_flush_cb+0xb4>)
 8002336:	2201      	movs	r2, #1
	lv_disp_flush_ready(drv);
 8002338:	4640      	mov	r0, r8
    refreshRequested = true ;
 800233a:	701a      	strb	r2, [r3, #0]
}
 800233c:	b003      	add	sp, #12
 800233e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	lv_disp_flush_ready(drv);
 8002342:	f00c bd12 	b.w	800ed6a <lv_disp_flush_ready>
 8002346:	bf00      	nop
 8002348:	2002019c 	.word	0x2002019c
 800234c:	0800228d 	.word	0x0800228d
 8002350:	4002b000 	.word	0x4002b000
 8002354:	200203c4 	.word	0x200203c4
 8002358:	2002ccd8 	.word	0x2002ccd8

0800235c <LCD_ReqTear>:
		}
	}
}

void LCD_ReqTear(void)
   {
 800235c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
       uint8_t ScanLineParams[2];
       uint16_t scanline = 533;

       ScanLineParams[0] = scanline >> 8;
 800235e:	f241 5302 	movw	r3, #5378	; 0x1502
       ScanLineParams[1] = scanline & 0x00FF;

       HAL_DSI_LongWrite(&hdsi_discovery, 0, DSI_DCS_LONG_PKT_WRITE, 2, OTM8009A_CMD_WRTESCN, ScanLineParams);
 8002362:	4c0b      	ldr	r4, [pc, #44]	; (8002390 <LCD_ReqTear+0x34>)
 8002364:	2239      	movs	r2, #57	; 0x39
 8002366:	2100      	movs	r1, #0
       ScanLineParams[0] = scanline >> 8;
 8002368:	f8ad 300c 	strh.w	r3, [sp, #12]
       HAL_DSI_LongWrite(&hdsi_discovery, 0, DSI_DCS_LONG_PKT_WRITE, 2, OTM8009A_CMD_WRTESCN, ScanLineParams);
 800236c:	ab03      	add	r3, sp, #12
 800236e:	4620      	mov	r0, r4
 8002370:	9301      	str	r3, [sp, #4]
 8002372:	2344      	movs	r3, #68	; 0x44
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	2302      	movs	r3, #2
 8002378:	f00c fb23 	bl	800e9c2 <HAL_DSI_LongWrite>
       HAL_DSI_ShortWrite(&hdsi_discovery, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, OTM8009A_TEEON_TELOM_VBLANKING_INFO_ONLY);
 800237c:	2100      	movs	r1, #0
 800237e:	2335      	movs	r3, #53	; 0x35
 8002380:	2215      	movs	r2, #21
 8002382:	9100      	str	r1, [sp, #0]
 8002384:	4620      	mov	r0, r4
 8002386:	f00c fb0b 	bl	800e9a0 <HAL_DSI_ShortWrite>
   }
 800238a:	b004      	add	sp, #16
 800238c:	bd10      	pop	{r4, pc}
 800238e:	bf00      	nop
 8002390:	200201f4 	.word	0x200201f4

08002394 <tft_init>:
{
 8002394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002398:	b095      	sub	sp, #84	; 0x54
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800239a:	2400      	movs	r4, #0
	BSP_SDRAM_Init();
 800239c:	f7ff fece 	bl	800213c <BSP_SDRAM_Init>
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80023a0:	f04f 0805 	mov.w	r8, #5
	BSP_LCD_MspInit();
 80023a4:	f7ff ff20 	bl	80021e8 <BSP_LCD_MspInit>
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80023a8:	4876      	ldr	r0, [pc, #472]	; (8002584 <tft_init+0x1f0>)
 80023aa:	2308      	movs	r3, #8
	hdsi_discovery.Instance = DSI;
 80023ac:	4f76      	ldr	r7, [pc, #472]	; (8002588 <tft_init+0x1f4>)
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80023ae:	f8c0 801c 	str.w	r8, [r0, #28]
	hdsi_discovery.Init.TXEscapeCkdiv = 0x4;
 80023b2:	f04f 0901 	mov.w	r9, #1
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80023b6:	6003      	str	r3, [r0, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 417;
 80023b8:	f240 13a1 	movw	r3, #417	; 0x1a1
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80023bc:	62c4      	str	r4, [r0, #44]	; 0x2c
	CmdCfg.TearingEffectSource   = DSI_TE_EXTERNAL;
 80023be:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 417;
 80023c2:	6143      	str	r3, [r0, #20]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80023c4:	f7fe ff6a 	bl	800129c <HAL_RCCEx_PeriphCLKConfig>
	hdsi_discovery.Instance = DSI;
 80023c8:	4b70      	ldr	r3, [pc, #448]	; (800258c <tft_init+0x1f8>)
	HAL_DSI_DeInit(&(hdsi_discovery));
 80023ca:	4638      	mov	r0, r7
	LPCmd.LPGenShortWriteNoP    = DSI_LP_GSW0P_ENABLE;
 80023cc:	4d70      	ldr	r5, [pc, #448]	; (8002590 <tft_init+0x1fc>)
	LPCmd.LPDcsShortWriteNoP    = DSI_LP_DSW0P_ENABLE;
 80023ce:	f44f 4680 	mov.w	r6, #16384	; 0x4000
	hdsi_discovery.Instance = DSI;
 80023d2:	603b      	str	r3, [r7, #0]
	HAL_DSI_DeInit(&(hdsi_discovery));
 80023d4:	f00c f9ca 	bl	800e76c <HAL_DSI_DeInit>
	dsiPllInit.PLLNDIV  = 100;
 80023d8:	496e      	ldr	r1, [pc, #440]	; (8002594 <tft_init+0x200>)
 80023da:	2364      	movs	r3, #100	; 0x64
	HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 80023dc:	4638      	mov	r0, r7
	hltdc_discovery.Init.AccumulatedHBP = HSYNC+HBP;
 80023de:	f04f 0a02 	mov.w	sl, #2
	dsiPllInit.PLLODF   = DSI_PLL_OUT_DIV1;
 80023e2:	608c      	str	r4, [r1, #8]
	dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 80023e4:	e9c1 3800 	strd	r3, r8, [r1]
	hdsi_discovery.Init.TXEscapeCkdiv = 0x4;
 80023e8:	2304      	movs	r3, #4
 80023ea:	e9c7 3902 	strd	r3, r9, [r7, #8]
	HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 80023ee:	f7fe fcdd 	bl	8000dac <HAL_DSI_Init>
	CmdCfg.VirtualChannelID      = 0;
 80023f2:	4969      	ldr	r1, [pc, #420]	; (8002598 <tft_init+0x204>)
	CmdCfg.TearingEffectSource   = DSI_TE_EXTERNAL;
 80023f4:	2310      	movs	r3, #16
	HAL_DSI_ConfigAdaptedCommandMode(&hdsi_discovery, &CmdCfg);
 80023f6:	4638      	mov	r0, r7
	CmdCfg.VirtualChannelID      = 0;
 80023f8:	600c      	str	r4, [r1, #0]
	CmdCfg.DEPolarity            = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80023fa:	61cc      	str	r4, [r1, #28]
	CmdCfg.ColorCoding           = DSI_RGB565;
 80023fc:	604c      	str	r4, [r1, #4]
	CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 80023fe:	610c      	str	r4, [r1, #16]
	CmdCfg.TEAcknowledgeRequest  = DSI_TE_ACKNOWLEDGE_ENABLE;
 8002400:	f8c1 9028 	str.w	r9, [r1, #40]	; 0x28
	CmdCfg.TearingEffectSource   = DSI_TE_EXTERNAL;
 8002404:	e9c1 b302 	strd	fp, r3, [r1, #8]
	CmdCfg.VSPolarity            = DSI_VSYNC_ACTIVE_HIGH;
 8002408:	e9c1 4405 	strd	r4, r4, [r1, #20]
	CmdCfg.AutomaticRefresh      = DSI_AR_DISABLE;
 800240c:	e9c1 4408 	strd	r4, r4, [r1, #32]
	HAL_DSI_ConfigAdaptedCommandMode(&hdsi_discovery, &CmdCfg);
 8002410:	f00c f9f6 	bl	800e800 <HAL_DSI_ConfigAdaptedCommandMode>
	LPCmd.LPGenShortWriteOneP   = DSI_LP_GSW1P_ENABLE;
 8002414:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002418:	f44f 7300 	mov.w	r3, #512	; 0x200
	LPCmd.LPGenShortReadNoP     = DSI_LP_GSR0P_ENABLE;
 800241c:	f44f 6280 	mov.w	r2, #1024	; 0x400
	LPCmd.LPGenShortReadTwoP    = DSI_LP_GSR2P_ENABLE;
 8002420:	f44f 5080 	mov.w	r0, #4096	; 0x1000
	LPCmd.LPDcsShortReadNoP     = DSI_LP_DSR0P_ENABLE;
 8002424:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
	LPCmd.LPGenShortWriteOneP   = DSI_LP_GSW1P_ENABLE;
 8002428:	e9c5 1300 	strd	r1, r3, [r5]
	LPCmd.LPGenShortReadNoP     = DSI_LP_GSR0P_ENABLE;
 800242c:	f44f 6300 	mov.w	r3, #2048	; 0x800
	HAL_DSI_ConfigCommand(&hdsi_discovery, &LPCmd);
 8002430:	4629      	mov	r1, r5
	LPCmd.LPGenShortReadNoP     = DSI_LP_GSR0P_ENABLE;
 8002432:	e9c5 2302 	strd	r2, r3, [r5, #8]
	LPCmd.LPGenShortReadTwoP    = DSI_LP_GSR2P_ENABLE;
 8002436:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800243a:	e9c5 0304 	strd	r0, r3, [r5, #16]
	LPCmd.LPDcsShortWriteNoP    = DSI_LP_DSW0P_ENABLE;
 800243e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	HAL_DSI_ConfigCommand(&hdsi_discovery, &LPCmd);
 8002442:	4638      	mov	r0, r7
	LPCmd.LPDcsShortWriteNoP    = DSI_LP_DSW0P_ENABLE;
 8002444:	e9c5 6306 	strd	r6, r3, [r5, #24]
	LPCmd.LPDcsShortReadNoP     = DSI_LP_DSR0P_ENABLE;
 8002448:	f44f 2380 	mov.w	r3, #262144	; 0x40000
	HAL_LTDC_DeInit(&hltdc_discovery);
 800244c:	4e53      	ldr	r6, [pc, #332]	; (800259c <tft_init+0x208>)
	LPCmd.LPDcsShortReadNoP     = DSI_LP_DSR0P_ENABLE;
 800244e:	e9c5 c308 	strd	ip, r3, [r5, #32]
	LPCmd.LPDcsLongWrite        = DSI_LP_DLW_ENABLE;
 8002452:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002456:	62ab      	str	r3, [r5, #40]	; 0x28
	HAL_DSI_ConfigCommand(&hdsi_discovery, &LPCmd);
 8002458:	f7fe fd58 	bl	8000f0c <HAL_DSI_ConfigCommand>
		PhyTimings.ClockLaneHS2LPTime = 35;
 800245c:	2323      	movs	r3, #35	; 0x23
		HAL_DSI_ConfigPhyTimer(&hdsi_discovery, &PhyTimings);
 800245e:	a901      	add	r1, sp, #4
 8002460:	4638      	mov	r0, r7
		PhyTimings.DataLaneMaxReadTime = 0;
 8002462:	9405      	str	r4, [sp, #20]
		PhyTimings.ClockLaneLP2HSTime = 35;
 8002464:	e9cd 3301 	strd	r3, r3, [sp, #4]
		PhyTimings.DataLaneLP2HSTime = 35;
 8002468:	e9cd 3303 	strd	r3, r3, [sp, #12]
		PhyTimings.StopWaitTime = 10;
 800246c:	230a      	movs	r3, #10
 800246e:	9306      	str	r3, [sp, #24]
		HAL_DSI_ConfigPhyTimer(&hdsi_discovery, &PhyTimings);
 8002470:	f00c fa37 	bl	800e8e2 <HAL_DSI_ConfigPhyTimer>
	HAL_LTDC_DeInit(&hltdc_discovery);
 8002474:	4630      	mov	r0, r6
 8002476:	f00c fb8c 	bl	800eb92 <HAL_LTDC_DeInit>
	hltdc_discovery.Instance = LTDC;
 800247a:	4b49      	ldr	r3, [pc, #292]	; (80025a0 <tft_init+0x20c>)
	hltdc_discovery.Init.AccumulatedActiveH = VSYNC+VBP+VACT;
 800247c:	f04f 0eca 	mov.w	lr, #202	; 0xca
	hltdc_discovery.Init.TotalHeigh = VSYNC+VBP+VACT+VFP;
 8002480:	22cb      	movs	r2, #203	; 0xcb
	hltdc_discovery.Init.Backcolor.Blue = 0;
 8002482:	86b4      	strh	r4, [r6, #52]	; 0x34
	HAL_LTDC_Init(&hltdc_discovery);
 8002484:	4630      	mov	r0, r6
	hltdc_discovery.Init.VerticalSync = VSYNC;
 8002486:	f8c6 9018 	str.w	r9, [r6, #24]
	hltdc_discovery.Init.Backcolor.Red = 0;
 800248a:	f886 4036 	strb.w	r4, [r6, #54]	; 0x36
	hltdc_discovery.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800248e:	e9c6 3400 	strd	r3, r4, [r6]
	hltdc_discovery.Init.AccumulatedActiveH = VSYNC+VBP+VACT;
 8002492:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8002496:	e9c6 e309 	strd	lr, r3, [r6, #36]	; 0x24
	hltdc_discovery.Init.TotalHeigh = VSYNC+VBP+VACT+VFP;
 800249a:	f240 13e3 	movw	r3, #483	; 0x1e3
	hltdc_discovery.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800249e:	e9c6 4402 	strd	r4, r4, [r6, #8]
	hltdc_discovery.Init.TotalHeigh = VSYNC+VBP+VACT+VFP;
 80024a2:	e9c6 230b 	strd	r2, r3, [r6, #44]	; 0x2c
	hltdc_discovery.Init.HorizontalSync = HSYNC;
 80024a6:	e9c6 4904 	strd	r4, r9, [r6, #16]
	hltdc_discovery.Init.AccumulatedVBP = VSYNC+VBP;
 80024aa:	e9c6 aa07 	strd	sl, sl, [r6, #28]
	HAL_LTDC_Init(&hltdc_discovery);
 80024ae:	f7fe fe4b 	bl	8001148 <HAL_LTDC_Init>
	__HAL_LTDC_DISABLE(&hltdc_discovery);
 80024b2:	6831      	ldr	r1, [r6, #0]
	HAL_DSI_Start(&(hdsi_discovery));
 80024b4:	4638      	mov	r0, r7
	__HAL_LTDC_DISABLE(&hltdc_discovery);
 80024b6:	698b      	ldr	r3, [r1, #24]
 80024b8:	f023 0301 	bic.w	r3, r3, #1
 80024bc:	618b      	str	r3, [r1, #24]
	HAL_DSI_Start(&(hdsi_discovery));
 80024be:	f00c fa4c 	bl	800e95a <HAL_DSI_Start>
    OTM8009A_Init(OTM8009A_FORMAT_RBG565, 1);
 80024c2:	4649      	mov	r1, r9
 80024c4:	4650      	mov	r0, sl
 80024c6:	f7ff fae5 	bl	8001a94 <OTM8009A_Init>
	HAL_DSI_ConfigCommand(&hdsi_discovery, &LPCmd);
 80024ca:	4629      	mov	r1, r5
 80024cc:	4638      	mov	r0, r7
	LPCmd.LPDcsLongWrite        = DSI_LP_DLW_DISABLE;
 80024ce:	62ac      	str	r4, [r5, #40]	; 0x28
	LPCmd.LPGenShortWriteOneP   = DSI_LP_GSW1P_DISABLE;
 80024d0:	e9c5 4400 	strd	r4, r4, [r5]
	LPCmd.LPGenShortReadNoP     = DSI_LP_GSR0P_DISABLE;
 80024d4:	e9c5 4402 	strd	r4, r4, [r5, #8]
	LPCmd.LPGenShortReadTwoP    = DSI_LP_GSR2P_DISABLE;
 80024d8:	e9c5 4404 	strd	r4, r4, [r5, #16]
	LPCmd.LPDcsShortWriteNoP    = DSI_LP_DSW0P_DISABLE;
 80024dc:	e9c5 4406 	strd	r4, r4, [r5, #24]
	LPCmd.LPDcsShortReadNoP     = DSI_LP_DSR0P_DISABLE;
 80024e0:	e9c5 4408 	strd	r4, r4, [r5, #32]
	HAL_DSI_ConfigCommand(&hdsi_discovery, &LPCmd);
 80024e4:	f7fe fd12 	bl	8000f0c <HAL_DSI_ConfigCommand>
    Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80024e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    Layercfg.Alpha = 255;
 80024ec:	21ff      	movs	r1, #255	; 0xff
    Layercfg.WindowY1 = 480;
 80024ee:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex);
 80024f2:	4630      	mov	r0, r6
    Layercfg.WindowY0 = 0;
 80024f4:	9409      	str	r4, [sp, #36]	; 0x24
    Layercfg.ImageHeight = 480;
 80024f6:	9312      	str	r3, [sp, #72]	; 0x48
    Layercfg.Backcolor.Blue = 0;
 80024f8:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
    Layercfg.Backcolor.Red = 0;
 80024fc:	f88d 404e 	strb.w	r4, [sp, #78]	; 0x4e
    lv_disp_buf_init(&disp_buf_1, buf1_1, NULL, LV_HOR_RES_MAX * 10);   /*Initialize the display buffer*/
 8002500:	4d28      	ldr	r5, [pc, #160]	; (80025a4 <tft_init+0x210>)
    Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002502:	e9cd 280e 	strd	r2, r8, [sp, #56]	; 0x38
    Layercfg.FBStartAdress = Address;
 8002506:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    Layercfg.Alpha0 = 0;
 800250a:	e9cd 140c 	strd	r1, r4, [sp, #48]	; 0x30
    Layercfg.ImageWidth = 800 / 4; //Note: Div4 due to screen being divided into 4 areas.
 800250e:	e9cd 2b10 	strd	r2, fp, [sp, #64]	; 0x40
    HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex);
 8002512:	a907      	add	r1, sp, #28
 8002514:	4622      	mov	r2, r4
    Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002516:	e9cd 3a0a 	strd	r3, sl, [sp, #40]	; 0x28
    Layercfg.WindowX1 = 800 / 4; //Note: Div4 due to screen being divided into 4 areas.
 800251a:	e9cd 4b07 	strd	r4, fp, [sp, #28]
    HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex);
 800251e:	f00c fb44 	bl	800ebaa <HAL_LTDC_ConfigLayer>
    HAL_LTDC_SetPitch(&hltdc_discovery,800, 0);
 8002522:	4622      	mov	r2, r4
 8002524:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002528:	4630      	mov	r0, r6
 800252a:	f7fe fe79 	bl	8001220 <HAL_LTDC_SetPitch>
    __HAL_LTDC_ENABLE(&hltdc_discovery);
 800252e:	6832      	ldr	r2, [r6, #0]
 8002530:	6993      	ldr	r3, [r2, #24]
 8002532:	ea43 0309 	orr.w	r3, r3, r9
 8002536:	6193      	str	r3, [r2, #24]
	LCD_ReqTear();
 8002538:	f7ff ff10 	bl	800235c <LCD_ReqTear>
    lv_disp_buf_init(&disp_buf_1, buf1_1, NULL, LV_HOR_RES_MAX * 10);   /*Initialize the display buffer*/
 800253c:	4622      	mov	r2, r4
 800253e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8002542:	4919      	ldr	r1, [pc, #100]	; (80025a8 <tft_init+0x214>)
 8002544:	4628      	mov	r0, r5
 8002546:	f00c fc02 	bl	800ed4e <lv_disp_buf_init>
		lv_disp_drv_init(&disp_drv);                    /*Basic initialization*/
 800254a:	a807      	add	r0, sp, #28
 800254c:	f000 f830 	bl	80025b0 <lv_disp_drv_init>
		disp_drv.flush_cb = tft_flush_cb;
 8002550:	4b16      	ldr	r3, [pc, #88]	; (80025ac <tft_init+0x218>)
	HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 5);
 8002552:	4642      	mov	r2, r8
 8002554:	4641      	mov	r1, r8
 8002556:	205a      	movs	r0, #90	; 0x5a
		disp_drv.flush_cb = tft_flush_cb;
 8002558:	930a      	str	r3, [sp, #40]	; 0x28
		disp_drv.buffer = &disp_buf_1;
 800255a:	9508      	str	r5, [sp, #32]
	HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 5);
 800255c:	f7fe fb02 	bl	8000b64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002560:	205a      	movs	r0, #90	; 0x5a
 8002562:	f7fe fb31 	bl	8000bc8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DSI_IRQn,5 , 5);
 8002566:	4642      	mov	r2, r8
 8002568:	4641      	mov	r1, r8
 800256a:	2062      	movs	r0, #98	; 0x62
 800256c:	f7fe fafa 	bl	8000b64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8002570:	2062      	movs	r0, #98	; 0x62
 8002572:	f7fe fb29 	bl	8000bc8 <HAL_NVIC_EnableIRQ>
    disp=lv_disp_drv_register(&disp_drv);
 8002576:	a807      	add	r0, sp, #28
 8002578:	f000 f834 	bl	80025e4 <lv_disp_drv_register>
}
 800257c:	b015      	add	sp, #84	; 0x54
 800257e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002582:	bf00      	nop
 8002584:	20020318 	.word	0x20020318
 8002588:	200201f4 	.word	0x200201f4
 800258c:	40016c00 	.word	0x40016c00
 8002590:	200202e4 	.word	0x200202e4
 8002594:	200203c8 	.word	0x200203c8
 8002598:	200202b8 	.word	0x200202b8
 800259c:	20020210 	.word	0x20020210
 80025a0:	40016800 	.word	0x40016800
 80025a4:	200203a8 	.word	0x200203a8
 80025a8:	20028e50 	.word	0x20028e50
 80025ac:	080022a5 	.word	0x080022a5

080025b0 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 80025b0:	b510      	push	{r4, lr}
    memset(driver, 0, sizeof(lv_disp_drv_t));
 80025b2:	2224      	movs	r2, #36	; 0x24
 80025b4:	2100      	movs	r1, #0
{
 80025b6:	4604      	mov	r4, r0
    memset(driver, 0, sizeof(lv_disp_drv_t));
 80025b8:	f014 f904 	bl	80167c4 <memset>
    driver->flush_cb         = NULL;
    driver->hor_res          = LV_HOR_RES_MAX;
    driver->ver_res          = LV_VER_RES_MAX;
    driver->buffer           = NULL;
    driver->rotated          = 0;
    driver->color_chroma_key = LV_COLOR_TRANSP;
 80025bc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
    driver->flush_cb         = NULL;
 80025c0:	2200      	movs	r2, #0
    driver->color_chroma_key = LV_COLOR_TRANSP;
 80025c2:	83a3      	strh	r3, [r4, #28]
    driver->hor_res          = LV_HOR_RES_MAX;
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <lv_disp_drv_init+0x30>)
    driver->flush_cb         = NULL;
 80025c6:	60e2      	str	r2, [r4, #12]
    driver->gpu_blend_cb = NULL;
    driver->gpu_fill_cb  = NULL;
#endif

#if LV_USE_USER_DATA
    driver->user_data = NULL;
 80025c8:	6222      	str	r2, [r4, #32]
#endif

    driver->set_px_cb = NULL;
 80025ca:	6162      	str	r2, [r4, #20]
    driver->buffer           = NULL;
 80025cc:	e9c4 3200 	strd	r3, r2, [r4]
    driver->antialiasing = true;
 80025d0:	7a23      	ldrb	r3, [r4, #8]
 80025d2:	f023 0303 	bic.w	r3, r3, #3
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	7223      	strb	r3, [r4, #8]
}
 80025dc:	bd10      	pop	{r4, pc}
 80025de:	bf00      	nop
 80025e0:	01e00320 	.word	0x01e00320

080025e4 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 80025e4:	b570      	push	{r4, r5, r6, lr}
 80025e6:	4605      	mov	r5, r0
    lv_disp_t * disp = lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 80025e8:	482d      	ldr	r0, [pc, #180]	; (80026a0 <lv_disp_drv_register+0xbc>)
 80025ea:	f00d fd1d 	bl	8010028 <lv_ll_ins_head>
    if(!disp) {
 80025ee:	4604      	mov	r4, r0
 80025f0:	b930      	cbnz	r0, 8002600 <lv_disp_drv_register+0x1c>
        lv_mem_assert(disp);
 80025f2:	4b2c      	ldr	r3, [pc, #176]	; (80026a4 <lv_disp_drv_register+0xc0>)
 80025f4:	2279      	movs	r2, #121	; 0x79
 80025f6:	492c      	ldr	r1, [pc, #176]	; (80026a8 <lv_disp_drv_register+0xc4>)
 80025f8:	2003      	movs	r0, #3
 80025fa:	f001 f80b 	bl	8003614 <lv_log_add>
 80025fe:	e7fe      	b.n	80025fe <lv_disp_drv_register+0x1a>
        return NULL;
    }

    memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
 8002600:	4629      	mov	r1, r5
 8002602:	2224      	movs	r2, #36	; 0x24
 8002604:	f014 f8b4 	bl	8016770 <memcpy>
    memset(&disp->inv_area_joined, 0, sizeof(disp->inv_area_joined));
 8002608:	2220      	movs	r2, #32
 800260a:	2100      	movs	r1, #0
 800260c:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 8002610:	f014 f8d8 	bl	80167c4 <memset>
    memset(&disp->inv_areas, 0, sizeof(disp->inv_areas));
    lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));

    if(disp_def == NULL) disp_def = disp;
 8002614:	4d25      	ldr	r5, [pc, #148]	; (80026ac <lv_disp_drv_register+0xc8>)
    memset(&disp->inv_areas, 0, sizeof(disp->inv_areas));
 8002616:	f44f 7280 	mov.w	r2, #256	; 0x100
 800261a:	2100      	movs	r1, #0
 800261c:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8002620:	f014 f8d0 	bl	80167c4 <memset>
    lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
 8002624:	2148      	movs	r1, #72	; 0x48
 8002626:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800262a:	f00d fcf3 	bl	8010014 <lv_ll_init>
    if(disp_def == NULL) disp_def = disp;
 800262e:	682b      	ldr	r3, [r5, #0]
 8002630:	b903      	cbnz	r3, 8002634 <lv_disp_drv_register+0x50>
 8002632:	602c      	str	r4, [r5, #0]

    lv_disp_t * disp_def_tmp = disp_def;
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
                                        new display*/

    disp->inv_p = 0;
 8002634:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160

    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 8002638:	2100      	movs	r1, #0
    lv_disp_t * disp_def_tmp = disp_def;
 800263a:	682e      	ldr	r6, [r5, #0]
    disp->inv_p = 0;
 800263c:	f36f 0309 	bfc	r3, #0, #10
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 8002640:	4608      	mov	r0, r1
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 8002642:	602c      	str	r4, [r5, #0]
    disp->inv_p = 0;
 8002644:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 8002648:	f000 f9e8 	bl	8002a1c <lv_obj_create>
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800264c:	2100      	movs	r1, #0
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800264e:	6360      	str	r0, [r4, #52]	; 0x34
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8002650:	4608      	mov	r0, r1
 8002652:	f000 f9e3 	bl	8002a1c <lv_obj_create>
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8002656:	2100      	movs	r1, #0
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8002658:	63a0      	str	r0, [r4, #56]	; 0x38
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800265a:	4608      	mov	r0, r1
 800265c:	f000 f9de 	bl	8002a1c <lv_obj_create>
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
 8002660:	4913      	ldr	r1, [pc, #76]	; (80026b0 <lv_disp_drv_register+0xcc>)
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8002662:	63e0      	str	r0, [r4, #60]	; 0x3c
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
 8002664:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002666:	f00d f96d 	bl	800f944 <lv_obj_set_style>
    lv_obj_set_style(disp->sys_layer, &lv_style_transp);
 800266a:	4911      	ldr	r1, [pc, #68]	; (80026b0 <lv_disp_drv_register+0xcc>)
 800266c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800266e:	f00d f969 	bl	800f944 <lv_obj_set_style>

    lv_obj_invalidate(disp->act_scr);
 8002672:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002674:	f00c fdbc 	bl	800f1f0 <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/

    /*Create a refresh task*/
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
 8002678:	4623      	mov	r3, r4
 800267a:	2203      	movs	r2, #3
 800267c:	211e      	movs	r1, #30
 800267e:	480d      	ldr	r0, [pc, #52]	; (80026b4 <lv_disp_drv_register+0xd0>)
    disp_def = disp_def_tmp; /*Revert the default display*/
 8002680:	602e      	str	r6, [r5, #0]
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
 8002682:	f001 fc63 	bl	8003f4c <lv_task_create>
 8002686:	6260      	str	r0, [r4, #36]	; 0x24
    lv_mem_assert(disp->refr_task);
 8002688:	b930      	cbnz	r0, 8002698 <lv_disp_drv_register+0xb4>
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <lv_disp_drv_register+0xc0>)
 800268c:	2296      	movs	r2, #150	; 0x96
 800268e:	4906      	ldr	r1, [pc, #24]	; (80026a8 <lv_disp_drv_register+0xc4>)
 8002690:	2003      	movs	r0, #3
 8002692:	f000 ffbf 	bl	8003614 <lv_log_add>
 8002696:	e7fe      	b.n	8002696 <lv_disp_drv_register+0xb2>
    if(disp->refr_task == NULL) return NULL;

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 8002698:	f00e f895 	bl	80107c6 <lv_task_ready>

    return disp;
}
 800269c:	4620      	mov	r0, r4
 800269e:	bd70      	pop	{r4, r5, r6, pc}
 80026a0:	20020710 	.word	0x20020710
 80026a4:	080176f4 	.word	0x080176f4
 80026a8:	08017703 	.word	0x08017703
 80026ac:	200203d8 	.word	0x200203d8
 80026b0:	20020650 	.word	0x20020650
 80026b4:	08002fb1 	.word	0x08002fb1

080026b8 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
 80026b8:	4b01      	ldr	r3, [pc, #4]	; (80026c0 <lv_disp_get_default+0x8>)
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	200203d8 	.word	0x200203d8

080026c4 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 80026c4:	b910      	cbnz	r0, 80026cc <lv_disp_get_hor_res+0x8>
    return disp_def;
 80026c6:	4b07      	ldr	r3, [pc, #28]	; (80026e4 <lv_disp_get_hor_res+0x20>)
 80026c8:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
 80026ca:	b138      	cbz	r0, 80026dc <lv_disp_get_hor_res+0x18>
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
 80026cc:	7a03      	ldrb	r3, [r0, #8]
 80026ce:	079b      	lsls	r3, r3, #30
 80026d0:	bf54      	ite	pl
 80026d2:	f9b0 0000 	ldrshpl.w	r0, [r0]
 80026d6:	f9b0 0002 	ldrshmi.w	r0, [r0, #2]
 80026da:	4770      	bx	lr
        return LV_HOR_RES_MAX;
 80026dc:	f44f 7048 	mov.w	r0, #800	; 0x320
}
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	200203d8 	.word	0x200203d8

080026e8 <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 80026e8:	b910      	cbnz	r0, 80026f0 <lv_disp_get_ver_res+0x8>
    return disp_def;
 80026ea:	4b07      	ldr	r3, [pc, #28]	; (8002708 <lv_disp_get_ver_res+0x20>)
 80026ec:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
 80026ee:	b138      	cbz	r0, 8002700 <lv_disp_get_ver_res+0x18>
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
 80026f0:	7a03      	ldrb	r3, [r0, #8]
 80026f2:	079b      	lsls	r3, r3, #30
 80026f4:	bf54      	ite	pl
 80026f6:	f9b0 0002 	ldrshpl.w	r0, [r0, #2]
 80026fa:	f9b0 0000 	ldrshmi.w	r0, [r0]
 80026fe:	4770      	bx	lr
        return LV_VER_RES_MAX;
 8002700:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
}
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	200203d8 	.word	0x200203d8

0800270c <lv_disp_get_antialiasing>:
bool lv_disp_get_antialiasing(lv_disp_t * disp)
{
#if LV_ANTIALIAS == 0
    return false;
#else
    if(disp == NULL) disp = lv_disp_get_default();
 800270c:	b910      	cbnz	r0, 8002714 <lv_disp_get_antialiasing+0x8>
    return disp_def;
 800270e:	4b03      	ldr	r3, [pc, #12]	; (800271c <lv_disp_get_antialiasing+0x10>)
 8002710:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL) return false;
 8002712:	b110      	cbz	r0, 800271a <lv_disp_get_antialiasing+0xe>

    return disp->driver.antialiasing ? true : false;
 8002714:	7a00      	ldrb	r0, [r0, #8]
 8002716:	f000 0001 	and.w	r0, r0, #1
#endif
}
 800271a:	4770      	bx	lr
 800271c:	200203d8 	.word	0x200203d8

08002720 <lv_tick_get>:
{
#if LV_TICK_CUSTOM == 0
    uint32_t result;
    do {
        tick_irq_flag = 1;
        result        = sys_time;
 8002720:	4b04      	ldr	r3, [pc, #16]	; (8002734 <lv_tick_get+0x14>)
        tick_irq_flag = 1;
 8002722:	f04f 0101 	mov.w	r1, #1
        result        = sys_time;
 8002726:	6818      	ldr	r0, [r3, #0]
        tick_irq_flag = 1;
 8002728:	4b03      	ldr	r3, [pc, #12]	; (8002738 <lv_tick_get+0x18>)
 800272a:	7019      	strb	r1, [r3, #0]
    } while(!tick_irq_flag); /*'lv_tick_inc()' clears this flag which can be in an interrupt.
 800272c:	781a      	ldrb	r2, [r3, #0]
 800272e:	2a00      	cmp	r2, #0
 8002730:	d0fb      	beq.n	800272a <lv_tick_get+0xa>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 8002732:	4770      	bx	lr
 8002734:	200203dc 	.word	0x200203dc
 8002738:	2002ccd9 	.word	0x2002ccd9

0800273c <lv_indev_get_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    if(indev == NULL)
 800273c:	4601      	mov	r1, r0
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 800273e:	4803      	ldr	r0, [pc, #12]	; (800274c <lv_indev_get_next+0x10>)
    if(indev == NULL)
 8002740:	b909      	cbnz	r1, 8002746 <lv_indev_get_next+0xa>
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 8002742:	f00d bcad 	b.w	80100a0 <lv_ll_get_head>
    else
        return lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 8002746:	f00d bcb1 	b.w	80100ac <lv_ll_get_next>
 800274a:	bf00      	nop
 800274c:	20020748 	.word	0x20020748

08002750 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 8002750:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 8002752:	4604      	mov	r4, r0
 8002754:	b958      	cbnz	r0, 800276e <lv_disp_get_scr_act+0x1e>
 8002756:	f7ff ffaf 	bl	80026b8 <lv_disp_get_default>
    if(!disp) {
 800275a:	4604      	mov	r4, r0
 800275c:	b938      	cbnz	r0, 800276e <lv_disp_get_scr_act+0x1e>
        LV_LOG_WARN("lv_scr_act: no display registered to get its top layer");
 800275e:	4b05      	ldr	r3, [pc, #20]	; (8002774 <lv_disp_get_scr_act+0x24>)
 8002760:	222e      	movs	r2, #46	; 0x2e
 8002762:	4905      	ldr	r1, [pc, #20]	; (8002778 <lv_disp_get_scr_act+0x28>)
 8002764:	2002      	movs	r0, #2
 8002766:	f000 ff55 	bl	8003614 <lv_log_add>
        return NULL;
    }

    return disp->act_scr;
}
 800276a:	4620      	mov	r0, r4
 800276c:	bd10      	pop	{r4, pc}
    return disp->act_scr;
 800276e:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8002770:	e7fb      	b.n	800276a <lv_disp_get_scr_act+0x1a>
 8002772:	bf00      	nop
 8002774:	080177d9 	.word	0x080177d9
 8002778:	08017810 	.word	0x08017810

0800277c <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 800277c:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 800277e:	4604      	mov	r4, r0
 8002780:	b958      	cbnz	r0, 800279a <lv_disp_get_layer_top+0x1e>
 8002782:	f7ff ff99 	bl	80026b8 <lv_disp_get_default>
    if(!disp) {
 8002786:	4604      	mov	r4, r0
 8002788:	b938      	cbnz	r0, 800279a <lv_disp_get_layer_top+0x1e>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
 800278a:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <lv_disp_get_layer_top+0x24>)
 800278c:	224b      	movs	r2, #75	; 0x4b
 800278e:	4905      	ldr	r1, [pc, #20]	; (80027a4 <lv_disp_get_layer_top+0x28>)
 8002790:	2002      	movs	r0, #2
 8002792:	f000 ff3f 	bl	8003614 <lv_log_add>
        return NULL;
    }

    return disp->top_layer;
}
 8002796:	4620      	mov	r0, r4
 8002798:	bd10      	pop	{r4, pc}
    return disp->top_layer;
 800279a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800279c:	e7fb      	b.n	8002796 <lv_disp_get_layer_top+0x1a>
 800279e:	bf00      	nop
 80027a0:	080177a0 	.word	0x080177a0
 80027a4:	08017810 	.word	0x08017810

080027a8 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 80027a8:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 80027aa:	4604      	mov	r4, r0
 80027ac:	b958      	cbnz	r0, 80027c6 <lv_disp_get_layer_sys+0x1e>
 80027ae:	f7ff ff83 	bl	80026b8 <lv_disp_get_default>
    if(!disp) {
 80027b2:	4604      	mov	r4, r0
 80027b4:	b938      	cbnz	r0, 80027c6 <lv_disp_get_layer_sys+0x1e>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its top layer");
 80027b6:	4b05      	ldr	r3, [pc, #20]	; (80027cc <lv_disp_get_layer_sys+0x24>)
 80027b8:	225c      	movs	r2, #92	; 0x5c
 80027ba:	4905      	ldr	r1, [pc, #20]	; (80027d0 <lv_disp_get_layer_sys+0x28>)
 80027bc:	2002      	movs	r0, #2
 80027be:	f000 ff29 	bl	8003614 <lv_log_add>
        return NULL;
    }

    return disp->sys_layer;
}
 80027c2:	4620      	mov	r0, r4
 80027c4:	bd10      	pop	{r4, pc}
    return disp->sys_layer;
 80027c6:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80027c8:	e7fb      	b.n	80027c2 <lv_disp_get_layer_sys+0x1a>
 80027ca:	bf00      	nop
 80027cc:	08017767 	.word	0x08017767
 80027d0:	08017810 	.word	0x08017810

080027d4 <lv_group_init>:
/**
 * Init. the group module
 */
void lv_group_init(void)
{
    lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 80027d4:	2160      	movs	r1, #96	; 0x60
 80027d6:	4801      	ldr	r0, [pc, #4]	; (80027dc <lv_group_init+0x8>)
 80027d8:	f00d bc1c 	b.w	8010014 <lv_ll_init>
 80027dc:	2002072c 	.word	0x2002072c

080027e0 <lv_group_focus_next>:
}

static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
                            void * (*move)(const lv_ll_t *, const void *))
{
    if(group->frozen) return;
 80027e0:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80027e4:	07db      	lsls	r3, r3, #31
 80027e6:	d403      	bmi.n	80027f0 <lv_group_focus_next+0x10>
 80027e8:	4a02      	ldr	r2, [pc, #8]	; (80027f4 <lv_group_focus_next+0x14>)
 80027ea:	4903      	ldr	r1, [pc, #12]	; (80027f8 <lv_group_focus_next+0x18>)
 80027ec:	f00c baf5 	b.w	800edda <focus_next_core.part.0>
}
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	080100ad 	.word	0x080100ad
 80027f8:	080100a1 	.word	0x080100a1

080027fc <lv_group_focus_prev>:
    if(group->frozen) return;
 80027fc:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8002800:	07db      	lsls	r3, r3, #31
 8002802:	d403      	bmi.n	800280c <lv_group_focus_prev+0x10>
 8002804:	4a02      	ldr	r2, [pc, #8]	; (8002810 <lv_group_focus_prev+0x14>)
 8002806:	4903      	ldr	r1, [pc, #12]	; (8002814 <lv_group_focus_prev+0x18>)
 8002808:	f00c bae7 	b.w	800edda <focus_next_core.part.0>
}
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	080100cd 	.word	0x080100cd
 8002814:	080100a7 	.word	0x080100a7

08002818 <lv_group_add_obj>:
{
 8002818:	b570      	push	{r4, r5, r6, lr}
 800281a:	460c      	mov	r4, r1
    if(group == NULL) return;
 800281c:	4605      	mov	r5, r0
 800281e:	b358      	cbz	r0, 8002878 <lv_group_add_obj+0x60>
    LV_LL_READ(group->obj_ll, obj_i)
 8002820:	f00d fc3e 	bl	80100a0 <lv_ll_get_head>
 8002824:	b9a8      	cbnz	r0, 8002852 <lv_group_add_obj+0x3a>
    if(obj->group_p) {
 8002826:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002828:	b133      	cbz	r3, 8002838 <lv_group_add_obj+0x20>
        if(lv_obj_is_focused(obj)) {
 800282a:	4620      	mov	r0, r4
 800282c:	f00d f978 	bl	800fb20 <lv_obj_is_focused>
 8002830:	b110      	cbz	r0, 8002838 <lv_group_add_obj+0x20>
            lv_group_refocus(obj->group_p);
 8002832:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002834:	f00c fb32 	bl	800ee9c <lv_group_refocus>
    obj->group_p     = group;
 8002838:	62e5      	str	r5, [r4, #44]	; 0x2c
    lv_obj_t ** next = lv_ll_ins_tail(&group->obj_ll);
 800283a:	4628      	mov	r0, r5
 800283c:	f00d fc12 	bl	8010064 <lv_ll_ins_tail>
    lv_mem_assert(next);
 8002840:	4606      	mov	r6, r0
 8002842:	b970      	cbnz	r0, 8002862 <lv_group_add_obj+0x4a>
 8002844:	4b0d      	ldr	r3, [pc, #52]	; (800287c <lv_group_add_obj+0x64>)
 8002846:	228d      	movs	r2, #141	; 0x8d
 8002848:	490d      	ldr	r1, [pc, #52]	; (8002880 <lv_group_add_obj+0x68>)
 800284a:	2003      	movs	r0, #3
 800284c:	f000 fee2 	bl	8003614 <lv_log_add>
 8002850:	e7fe      	b.n	8002850 <lv_group_add_obj+0x38>
        if((*obj_i) == obj) {
 8002852:	6803      	ldr	r3, [r0, #0]
 8002854:	42a3      	cmp	r3, r4
 8002856:	d00f      	beq.n	8002878 <lv_group_add_obj+0x60>
    LV_LL_READ(group->obj_ll, obj_i)
 8002858:	4601      	mov	r1, r0
 800285a:	4628      	mov	r0, r5
 800285c:	f00d fc26 	bl	80100ac <lv_ll_get_next>
 8002860:	e7e0      	b.n	8002824 <lv_group_add_obj+0xc>
    *next = obj;
 8002862:	6004      	str	r4, [r0, #0]
    if(lv_ll_get_head(&group->obj_ll) == next) {
 8002864:	4628      	mov	r0, r5
 8002866:	f00d fc1b 	bl	80100a0 <lv_ll_get_head>
 800286a:	4286      	cmp	r6, r0
 800286c:	d104      	bne.n	8002878 <lv_group_add_obj+0x60>
        lv_group_refocus(group);
 800286e:	4628      	mov	r0, r5
}
 8002870:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_group_refocus(group);
 8002874:	f00c bb12 	b.w	800ee9c <lv_group_refocus>
}
 8002878:	bd70      	pop	{r4, r5, r6, pc}
 800287a:	bf00      	nop
 800287c:	080176f4 	.word	0x080176f4
 8002880:	08017871 	.word	0x08017871

08002884 <lv_indev_get_act>:
 * right now
 */
lv_indev_t * lv_indev_get_act(void)
{
    return indev_act;
}
 8002884:	4b01      	ldr	r3, [pc, #4]	; (800288c <lv_indev_get_act+0x8>)
 8002886:	6818      	ldr	r0, [r3, #0]
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	200203e0 	.word	0x200203e0

08002890 <lv_indev_get_obj_act>:
 * @return pointer to currently active object or NULL if no active object
 */
lv_obj_t * lv_indev_get_obj_act(void)
{
    return indev_obj_act;
}
 8002890:	4b01      	ldr	r3, [pc, #4]	; (8002898 <lv_indev_get_obj_act+0x8>)
 8002892:	6818      	ldr	r0, [r3, #0]
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	200203e4 	.word	0x200203e4

0800289c <lv_event_mark_deleted>:
    lv_mem_free(obj); /*Free the object itself*/
}

static void lv_event_mark_deleted(lv_obj_t * obj)
{
    lv_event_temp_data_t * t = event_temp_data_head;
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <lv_event_mark_deleted+0x18>)

    while(t) {
        if(t->obj == obj) t->deleted = true;
 800289e:	2201      	movs	r2, #1
    lv_event_temp_data_t * t = event_temp_data_head;
 80028a0:	681b      	ldr	r3, [r3, #0]
    while(t) {
 80028a2:	b903      	cbnz	r3, 80028a6 <lv_event_mark_deleted+0xa>
        t = t->prev;
    }
}
 80028a4:	4770      	bx	lr
        if(t->obj == obj) t->deleted = true;
 80028a6:	6819      	ldr	r1, [r3, #0]
 80028a8:	4281      	cmp	r1, r0
 80028aa:	bf08      	it	eq
 80028ac:	711a      	strbeq	r2, [r3, #4]
        t = t->prev;
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	e7f7      	b.n	80028a2 <lv_event_mark_deleted+0x6>
 80028b2:	bf00      	nop
 80028b4:	200203ec 	.word	0x200203ec

080028b8 <lv_init>:
{
 80028b8:	b510      	push	{r4, lr}
    if(lv_initialized) {
 80028ba:	4c16      	ldr	r4, [pc, #88]	; (8002914 <lv_init+0x5c>)
 80028bc:	7823      	ldrb	r3, [r4, #0]
 80028be:	b13b      	cbz	r3, 80028d0 <lv_init+0x18>
        LV_LOG_WARN("lv_init: already inited");
 80028c0:	4b15      	ldr	r3, [pc, #84]	; (8002918 <lv_init+0x60>)
 80028c2:	224d      	movs	r2, #77	; 0x4d
 80028c4:	4915      	ldr	r1, [pc, #84]	; (800291c <lv_init+0x64>)
 80028c6:	2002      	movs	r0, #2
}
 80028c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LV_LOG_WARN("lv_init: already inited");
 80028cc:	f000 bea2 	b.w	8003614 <lv_log_add>
    lv_mem_init();
 80028d0:	f000 fec2 	bl	8003658 <lv_mem_init>
    lv_task_core_init();
 80028d4:	f001 f9ec 	bl	8003cb0 <lv_task_core_init>
    lv_fs_init();
 80028d8:	f000 fe3a 	bl	8003550 <lv_fs_init>
    lv_anim_core_init();
 80028dc:	f001 f972 	bl	8003bc4 <lv_anim_core_init>
    lv_group_init();
 80028e0:	f7ff ff78 	bl	80027d4 <lv_group_init>
    lv_style_init();
 80028e4:	f000 fd06 	bl	80032f4 <lv_style_init>
    lv_refr_init();
 80028e8:	f00d f9c3 	bl	800fc72 <lv_refr_init>
    lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 80028ec:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80028f0:	480b      	ldr	r0, [pc, #44]	; (8002920 <lv_init+0x68>)
 80028f2:	f00d fb8f 	bl	8010014 <lv_ll_init>
    lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 80028f6:	2160      	movs	r1, #96	; 0x60
 80028f8:	480a      	ldr	r0, [pc, #40]	; (8002924 <lv_init+0x6c>)
 80028fa:	f00d fb8b 	bl	8010014 <lv_ll_init>
    lv_indev_init();
 80028fe:	f00c fb6b 	bl	800efd8 <lv_indev_init>
    lv_img_decoder_init();
 8002902:	f002 fc97 	bl	8005234 <lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
 8002906:	2001      	movs	r0, #1
 8002908:	f001 fd74 	bl	80043f4 <lv_img_cache_set_size>
    lv_initialized = true;
 800290c:	2301      	movs	r3, #1
 800290e:	7023      	strb	r3, [r4, #0]
}
 8002910:	bd10      	pop	{r4, pc}
 8002912:	bf00      	nop
 8002914:	2002ccda 	.word	0x2002ccda
 8002918:	080178d3 	.word	0x080178d3
 800291c:	080178eb 	.word	0x080178eb
 8002920:	20020710 	.word	0x20020710
 8002924:	20020748 	.word	0x20020748

08002928 <lv_event_send_func>:
{
 8002928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800292c:	4698      	mov	r8, r3
 800292e:	4e1d      	ldr	r6, [pc, #116]	; (80029a4 <lv_event_send_func+0x7c>)
    event_temp_data.deleted = false;
 8002930:	2300      	movs	r3, #0
    const void * event_act_data_save = event_act_data;
 8002932:	4d1d      	ldr	r5, [pc, #116]	; (80029a8 <lv_event_send_func+0x80>)
{
 8002934:	4681      	mov	r9, r0
 8002936:	460c      	mov	r4, r1
    event_temp_data.deleted = false;
 8002938:	f88d 3008 	strb.w	r3, [sp, #8]
{
 800293c:	4617      	mov	r7, r2
        event_temp_data.prev = event_temp_data_head;
 800293e:	6833      	ldr	r3, [r6, #0]
    const void * event_act_data_save = event_act_data;
 8002940:	f8d5 a000 	ldr.w	sl, [r5]
        event_temp_data.prev = event_temp_data_head;
 8002944:	9303      	str	r3, [sp, #12]
    event_temp_data_head = &event_temp_data;
 8002946:	ab01      	add	r3, sp, #4
    event_temp_data.obj     = obj;
 8002948:	9101      	str	r1, [sp, #4]
    event_temp_data_head = &event_temp_data;
 800294a:	6033      	str	r3, [r6, #0]
    event_act_data                   = data;
 800294c:	f8c5 8000 	str.w	r8, [r5]
    lv_indev_t * indev_act = lv_indev_get_act();
 8002950:	f7ff ff98 	bl	8002884 <lv_indev_get_act>
    if(indev_act) {
 8002954:	b118      	cbz	r0, 800295e <lv_event_send_func+0x36>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
 8002956:	6883      	ldr	r3, [r0, #8]
 8002958:	b10b      	cbz	r3, 800295e <lv_event_send_func+0x36>
 800295a:	4639      	mov	r1, r7
 800295c:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
 800295e:	f1b9 0f00 	cmp.w	r9, #0
 8002962:	d002      	beq.n	800296a <lv_event_send_func+0x42>
 8002964:	4639      	mov	r1, r7
 8002966:	4620      	mov	r0, r4
 8002968:	47c8      	blx	r9
    event_temp_data_head = event_temp_data_head->prev;
 800296a:	6833      	ldr	r3, [r6, #0]
    event_act_data = event_act_data_save;
 800296c:	f8c5 a000 	str.w	sl, [r5]
    event_temp_data_head = event_temp_data_head->prev;
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	6033      	str	r3, [r6, #0]
    if(event_temp_data.deleted) {
 8002974:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002978:	b983      	cbnz	r3, 800299c <lv_event_send_func+0x74>
    if(obj) {
 800297a:	b18c      	cbz	r4, 80029a0 <lv_event_send_func+0x78>
        if(obj->parent_event && obj->par) {
 800297c:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 8002980:	2b00      	cmp	r3, #0
 8002982:	da0d      	bge.n	80029a0 <lv_event_send_func+0x78>
 8002984:	6820      	ldr	r0, [r4, #0]
 8002986:	b158      	cbz	r0, 80029a0 <lv_event_send_func+0x78>
            lv_res_t res = lv_event_send(obj->par, event, data);
 8002988:	4642      	mov	r2, r8
 800298a:	4639      	mov	r1, r7
 800298c:	f00c fbc8 	bl	800f120 <lv_event_send>
        return LV_RES_INV;
 8002990:	1e43      	subs	r3, r0, #1
 8002992:	4258      	negs	r0, r3
 8002994:	4158      	adcs	r0, r3
}
 8002996:	b004      	add	sp, #16
 8002998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return LV_RES_INV;
 800299c:	2000      	movs	r0, #0
 800299e:	e7fa      	b.n	8002996 <lv_event_send_func+0x6e>
    return LV_RES_OK;
 80029a0:	2001      	movs	r0, #1
 80029a2:	e7f8      	b.n	8002996 <lv_event_send_func+0x6e>
 80029a4:	200203ec 	.word	0x200203ec
 80029a8:	200203e8 	.word	0x200203e8

080029ac <lv_event_get_data>:
}
 80029ac:	4b01      	ldr	r3, [pc, #4]	; (80029b4 <lv_event_get_data+0x8>)
 80029ae:	6818      	ldr	r0, [r3, #0]
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	200203e8 	.word	0x200203e8

080029b8 <lv_obj_get_disp>:
{
 80029b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(obj->par == NULL)
 80029ba:	6803      	ldr	r3, [r0, #0]
{
 80029bc:	4605      	mov	r5, r0
    if(obj->par == NULL)
 80029be:	b97b      	cbnz	r3, 80029e0 <lv_obj_get_disp+0x28>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 80029c0:	4813      	ldr	r0, [pc, #76]	; (8002a10 <lv_obj_get_disp+0x58>)
 80029c2:	f00d fb6d 	bl	80100a0 <lv_ll_get_head>
 80029c6:	4f12      	ldr	r7, [pc, #72]	; (8002a10 <lv_obj_get_disp+0x58>)
 80029c8:	4604      	mov	r4, r0
 80029ca:	b96c      	cbnz	r4, 80029e8 <lv_obj_get_disp+0x30>
    LV_LOG_WARN("lv_scr_get_disp: screen not found")
 80029cc:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <lv_obj_get_disp+0x5c>)
 80029ce:	f240 52db 	movw	r2, #1499	; 0x5db
 80029d2:	4911      	ldr	r1, [pc, #68]	; (8002a18 <lv_obj_get_disp+0x60>)
 80029d4:	2002      	movs	r0, #2
 80029d6:	f000 fe1d 	bl	8003614 <lv_log_add>
}
 80029da:	4620      	mov	r0, r4
 80029dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while(par != NULL);
 80029de:	461d      	mov	r5, r3
    return obj->par;
 80029e0:	682b      	ldr	r3, [r5, #0]
    } while(par != NULL);
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1fb      	bne.n	80029de <lv_obj_get_disp+0x26>
 80029e6:	e7eb      	b.n	80029c0 <lv_obj_get_disp+0x8>
        LV_LL_READ(d->scr_ll, s)
 80029e8:	f104 0628 	add.w	r6, r4, #40	; 0x28
 80029ec:	4630      	mov	r0, r6
 80029ee:	f00d fb57 	bl	80100a0 <lv_ll_get_head>
 80029f2:	b928      	cbnz	r0, 8002a00 <lv_obj_get_disp+0x48>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 80029f4:	4621      	mov	r1, r4
 80029f6:	4638      	mov	r0, r7
 80029f8:	f00d fb58 	bl	80100ac <lv_ll_get_next>
 80029fc:	4604      	mov	r4, r0
 80029fe:	e7e4      	b.n	80029ca <lv_obj_get_disp+0x12>
            if(s == scr) return d;
 8002a00:	4285      	cmp	r5, r0
 8002a02:	d0ea      	beq.n	80029da <lv_obj_get_disp+0x22>
        LV_LL_READ(d->scr_ll, s)
 8002a04:	4601      	mov	r1, r0
 8002a06:	4630      	mov	r0, r6
 8002a08:	f00d fb50 	bl	80100ac <lv_ll_get_next>
 8002a0c:	e7f1      	b.n	80029f2 <lv_obj_get_disp+0x3a>
 8002a0e:	bf00      	nop
 8002a10:	20020710 	.word	0x20020710
 8002a14:	0801799b 	.word	0x0801799b
 8002a18:	080178eb 	.word	0x080178eb

08002a1c <lv_obj_create>:
{
 8002a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a1e:	460d      	mov	r5, r1
    if(parent == NULL) {
 8002a20:	4606      	mov	r6, r0
 8002a22:	2800      	cmp	r0, #0
 8002a24:	f040 80f0 	bne.w	8002c08 <lv_obj_create+0x1ec>
        lv_disp_t * disp = lv_disp_get_default();
 8002a28:	f7ff fe46 	bl	80026b8 <lv_disp_get_default>
        if(!disp) {
 8002a2c:	4604      	mov	r4, r0
 8002a2e:	b938      	cbnz	r0, 8002a40 <lv_obj_create+0x24>
            LV_LOG_WARN("lv_obj_create: not display created to so far. No place to assign the new screen");
 8002a30:	4b99      	ldr	r3, [pc, #612]	; (8002c98 <lv_obj_create+0x27c>)
 8002a32:	228a      	movs	r2, #138	; 0x8a
 8002a34:	4999      	ldr	r1, [pc, #612]	; (8002c9c <lv_obj_create+0x280>)
 8002a36:	2002      	movs	r0, #2
 8002a38:	f000 fdec 	bl	8003614 <lv_log_add>
}
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_obj = lv_ll_ins_head(&disp->scr_ll);
 8002a40:	3028      	adds	r0, #40	; 0x28
 8002a42:	f00d faf1 	bl	8010028 <lv_ll_ins_head>
        lv_mem_assert(new_obj);
 8002a46:	4604      	mov	r4, r0
 8002a48:	b930      	cbnz	r0, 8002a58 <lv_obj_create+0x3c>
 8002a4a:	4b95      	ldr	r3, [pc, #596]	; (8002ca0 <lv_obj_create+0x284>)
 8002a4c:	228f      	movs	r2, #143	; 0x8f
 8002a4e:	4993      	ldr	r1, [pc, #588]	; (8002c9c <lv_obj_create+0x280>)
 8002a50:	2003      	movs	r0, #3
 8002a52:	f000 fddf 	bl	8003614 <lv_log_add>
 8002a56:	e7fe      	b.n	8002a56 <lv_obj_create+0x3a>
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8002a58:	2148      	movs	r1, #72	; 0x48
        new_obj->par = NULL; /*Screens has no a parent*/
 8002a5a:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8002a5e:	f00d fad9 	bl	8010014 <lv_ll_init>
        new_obj->coords.x1    = 0;
 8002a62:	6126      	str	r6, [r4, #16]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 8002a64:	4630      	mov	r0, r6
 8002a66:	f7ff fe2d 	bl	80026c4 <lv_disp_get_hor_res>
 8002a6a:	3801      	subs	r0, #1
 8002a6c:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 8002a6e:	4630      	mov	r0, r6
 8002a70:	f7ff fe3a 	bl	80026e8 <lv_disp_get_ver_res>
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8002a74:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 8002a78:	3801      	subs	r0, #1
        new_obj->ext_draw_pad = 0;
 8002a7a:	86a6      	strh	r6, [r4, #52]	; 0x34
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8002a7c:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 8002a80:	82e0      	strh	r0, [r4, #22]
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8002a82:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
        new_obj->realign.xofs         = 0;
 8002a86:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
        lv_theme_t * th = lv_theme_get_current();
 8002a8a:	f002 fcdf 	bl	800544c <lv_theme_get_current>
        if(th) {
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	f000 80b8 	beq.w	8002c04 <lv_obj_create+0x1e8>
            new_obj->style_p = th->style.scr;
 8002a94:	6803      	ldr	r3, [r0, #0]
 8002a96:	62a3      	str	r3, [r4, #40]	; 0x28
        new_obj->event_cb = NULL;
 8002a98:	2700      	movs	r7, #0
    obj->signal_cb = signal_cb;
 8002a9a:	4b82      	ldr	r3, [pc, #520]	; (8002ca4 <lv_obj_create+0x288>)
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
 8002a9c:	2204      	movs	r2, #4
        new_obj->event_cb = NULL;
 8002a9e:	61a7      	str	r7, [r4, #24]
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
 8002aa0:	4639      	mov	r1, r7
    obj->signal_cb = signal_cb;
 8002aa2:	61e3      	str	r3, [r4, #28]
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
 8002aa4:	f104 0044 	add.w	r0, r4, #68	; 0x44
    obj->design_cb = design_cb;
 8002aa8:	4b7f      	ldr	r3, [pc, #508]	; (8002ca8 <lv_obj_create+0x28c>)
 8002aaa:	6223      	str	r3, [r4, #32]
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
 8002aac:	f013 fe8a 	bl	80167c4 <memset>
        new_obj->click        = 0;
 8002ab0:	6b23      	ldr	r3, [r4, #48]	; 0x30
        new_obj->group_p = NULL;
 8002ab2:	62e7      	str	r7, [r4, #44]	; 0x2c
        new_obj->click        = 0;
 8002ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
        new_obj->click        = 1;
 8002abc:	6323      	str	r3, [r4, #48]	; 0x30
        new_obj->ext_attr = NULL;
 8002abe:	6267      	str	r7, [r4, #36]	; 0x24
    if(copy != NULL) {
 8002ac0:	2d00      	cmp	r5, #0
 8002ac2:	f000 80e6 	beq.w	8002c92 <lv_obj_create+0x276>
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 8002ac6:	2208      	movs	r2, #8
 8002ac8:	f105 0110 	add.w	r1, r5, #16
 8002acc:	f104 0010 	add.w	r0, r4, #16
 8002ad0:	f013 fe4e 	bl	8016770 <memcpy>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 8002ad4:	f9b5 3034 	ldrsh.w	r3, [r5, #52]	; 0x34
        memcpy(&new_obj->user_data, &copy->user_data, sizeof(lv_obj_user_data_t));
 8002ad8:	2204      	movs	r2, #4
 8002ada:	f105 0144 	add.w	r1, r5, #68	; 0x44
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 8002ade:	86a3      	strh	r3, [r4, #52]	; 0x34
        memcpy(&new_obj->user_data, &copy->user_data, sizeof(lv_obj_user_data_t));
 8002ae0:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8002ae4:	f013 fe44 	bl	8016770 <memcpy>
        new_obj->realign.align        = copy->realign.align;
 8002ae8:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 8002aec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        new_obj->realign.xofs         = copy->realign.xofs;
 8002af0:	f9b5 303c 	ldrsh.w	r3, [r5, #60]	; 0x3c
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 8002af4:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
        new_obj->realign.xofs         = copy->realign.xofs;
 8002af8:	87a3      	strh	r3, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = copy->realign.yofs;
 8002afa:	f9b5 303e 	ldrsh.w	r3, [r5, #62]	; 0x3e
 8002afe:	87e3      	strh	r3, [r4, #62]	; 0x3e
        new_obj->realign.base         = copy->realign.base;
 8002b00:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002b02:	63a3      	str	r3, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 8002b04:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002b08:	f362 0300 	bfi	r3, r2, #0, #1
 8002b0c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        new_obj->event_cb = copy->event_cb;
 8002b10:	69ab      	ldr	r3, [r5, #24]
        new_obj->click        = copy->click;
 8002b12:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
        new_obj->event_cb = copy->event_cb;
 8002b16:	61a3      	str	r3, [r4, #24]
        new_obj->click        = copy->click;
 8002b18:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8002b1c:	f362 0300 	bfi	r3, r2, #0, #1
 8002b20:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->drag         = copy->drag;
 8002b24:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8002b28:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8002b2c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002b30:	f363 0241 	bfi	r2, r3, #1, #1
        new_obj->drag_dir     = copy->drag_dir;
 8002b34:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
        new_obj->drag         = copy->drag;
 8002b38:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->drag_dir     = copy->drag_dir;
 8002b3c:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
 8002b40:	f362 0301 	bfi	r3, r2, #0, #2
        new_obj->drag_throw   = copy->drag_throw;
 8002b44:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
        new_obj->drag_dir     = copy->drag_dir;
 8002b48:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->drag_throw   = copy->drag_throw;
 8002b4c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8002b50:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b54:	f363 0282 	bfi	r2, r3, #2, #1
 8002b58:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->drag_parent  = copy->drag_parent;
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8002b62:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b66:	f363 02c3 	bfi	r2, r3, #3, #1
 8002b6a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->hidden       = copy->hidden;
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8002b74:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002b78:	f363 1204 	bfi	r2, r3, #4, #1
 8002b7c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->top          = copy->top;
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8002b86:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002b8a:	f363 1245 	bfi	r2, r3, #5, #1
 8002b8e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->parent_event = copy->parent_event;
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8002b98:	09db      	lsrs	r3, r3, #7
 8002b9a:	f363 12c7 	bfi	r2, r3, #7, #1
 8002b9e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->opa_scale_en = copy->opa_scale_en;
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8002ba8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002bac:	f363 1286 	bfi	r2, r3, #6, #1
 8002bb0:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->protect      = copy->protect;
 8002bb4:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 8002bb8:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        new_obj->opa_scale    = copy->opa_scale;
 8002bbc:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
 8002bc0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        new_obj->style_p = copy->style_p;
 8002bc4:	6aab      	ldr	r3, [r5, #40]	; 0x28
        if(copy->group_p != NULL) {
 8002bc6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
        new_obj->style_p = copy->style_p;
 8002bc8:	62a3      	str	r3, [r4, #40]	; 0x28
        if(copy->group_p != NULL) {
 8002bca:	b110      	cbz	r0, 8002bd2 <lv_obj_create+0x1b6>
            lv_group_add_obj(copy->group_p, new_obj);
 8002bcc:	4621      	mov	r1, r4
 8002bce:	f7ff fe23 	bl	8002818 <lv_group_add_obj>
    return obj->par;
 8002bd2:	682b      	ldr	r3, [r5, #0]
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d057      	beq.n	8002c88 <lv_obj_create+0x26c>
 8002bd8:	2e00      	cmp	r6, #0
 8002bda:	d055      	beq.n	8002c88 <lv_obj_create+0x26c>
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8002bdc:	8a59      	ldrh	r1, [r3, #18]
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 8002bde:	4620      	mov	r0, r4
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8002be0:	8a6a      	ldrh	r2, [r5, #18]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8002be2:	8a1b      	ldrh	r3, [r3, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8002be4:	1a52      	subs	r2, r2, r1
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8002be6:	8a29      	ldrh	r1, [r5, #16]
 8002be8:	1ac9      	subs	r1, r1, r3
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 8002bea:	b212      	sxth	r2, r2
 8002bec:	b209      	sxth	r1, r1
 8002bee:	f00c fb6c 	bl	800f2ca <lv_obj_set_pos>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
 8002bf2:	69f3      	ldr	r3, [r6, #28]
 8002bf4:	4622      	mov	r2, r4
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	4630      	mov	r0, r6
 8002bfa:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	f00c faf7 	bl	800f1f0 <lv_obj_invalidate>
 8002c02:	e71b      	b.n	8002a3c <lv_obj_create+0x20>
            new_obj->style_p = &lv_style_scr;
 8002c04:	4b29      	ldr	r3, [pc, #164]	; (8002cac <lv_obj_create+0x290>)
 8002c06:	e746      	b.n	8002a96 <lv_obj_create+0x7a>
        new_obj = lv_ll_ins_head(&parent->child_ll);
 8002c08:	3004      	adds	r0, #4
 8002c0a:	f00d fa0d 	bl	8010028 <lv_ll_ins_head>
        lv_mem_assert(new_obj);
 8002c0e:	4604      	mov	r4, r0
 8002c10:	b930      	cbnz	r0, 8002c20 <lv_obj_create+0x204>
 8002c12:	4b23      	ldr	r3, [pc, #140]	; (8002ca0 <lv_obj_create+0x284>)
 8002c14:	22d8      	movs	r2, #216	; 0xd8
 8002c16:	4921      	ldr	r1, [pc, #132]	; (8002c9c <lv_obj_create+0x280>)
 8002c18:	2003      	movs	r0, #3
 8002c1a:	f000 fcfb 	bl	8003614 <lv_log_add>
 8002c1e:	e7fe      	b.n	8002c1e <lv_obj_create+0x202>
        new_obj->par = parent; /*Set the parent*/
 8002c20:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8002c24:	2148      	movs	r1, #72	; 0x48
 8002c26:	f00d f9f5 	bl	8010014 <lv_ll_init>
        new_obj->coords.x1    = parent->coords.x1;
 8002c2a:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
        new_obj->coords.y1    = parent->coords.y1;
 8002c2e:	f9b6 2012 	ldrsh.w	r2, [r6, #18]
        new_obj->coords.x1    = parent->coords.x1;
 8002c32:	8223      	strh	r3, [r4, #16]
        new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 8002c34:	3364      	adds	r3, #100	; 0x64
        new_obj->coords.y1    = parent->coords.y1;
 8002c36:	8262      	strh	r2, [r4, #18]
        new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 8002c38:	82a3      	strh	r3, [r4, #20]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 8002c3a:	8a73      	ldrh	r3, [r6, #18]
 8002c3c:	3342      	adds	r3, #66	; 0x42
 8002c3e:	82e3      	strh	r3, [r4, #22]
        new_obj->ext_draw_pad = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	86a3      	strh	r3, [r4, #52]	; 0x34
        new_obj->realign.xofs         = 0;
 8002c44:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8002c48:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8002c4c:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 8002c50:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
        lv_theme_t * th = lv_theme_get_current();
 8002c54:	f002 fbfa 	bl	800544c <lv_theme_get_current>
        if(th) {
 8002c58:	b1a0      	cbz	r0, 8002c84 <lv_obj_create+0x268>
            new_obj->style_p = th->style.panel;
 8002c5a:	6883      	ldr	r3, [r0, #8]
 8002c5c:	62a3      	str	r3, [r4, #40]	; 0x28
        new_obj->event_cb = NULL;
 8002c5e:	2700      	movs	r7, #0
    obj->signal_cb = signal_cb;
 8002c60:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <lv_obj_create+0x288>)
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
 8002c62:	2204      	movs	r2, #4
        new_obj->event_cb = NULL;
 8002c64:	61a7      	str	r7, [r4, #24]
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
 8002c66:	4639      	mov	r1, r7
    obj->signal_cb = signal_cb;
 8002c68:	61e3      	str	r3, [r4, #28]
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
 8002c6a:	f104 0044 	add.w	r0, r4, #68	; 0x44
    obj->design_cb = design_cb;
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <lv_obj_create+0x28c>)
 8002c70:	6223      	str	r3, [r4, #32]
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
 8002c72:	f013 fda7 	bl	80167c4 <memset>
        new_obj->click        = 1;
 8002c76:	6b23      	ldr	r3, [r4, #48]	; 0x30
        new_obj->group_p = NULL;
 8002c78:	62e7      	str	r7, [r4, #44]	; 0x2c
        new_obj->click        = 1;
 8002c7a:	f403 427c 	and.w	r2, r3, #64512	; 0xfc00
 8002c7e:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <lv_obj_create+0x294>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	e71b      	b.n	8002abc <lv_obj_create+0xa0>
            new_obj->style_p = &lv_style_plain_color;
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <lv_obj_create+0x298>)
 8002c86:	e7e9      	b.n	8002c5c <lv_obj_create+0x240>
            lv_obj_set_pos(new_obj, 0, 0);
 8002c88:	2200      	movs	r2, #0
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	f00c fb1c 	bl	800f2ca <lv_obj_set_pos>
    if(parent != NULL) {
 8002c92:	2e00      	cmp	r6, #0
 8002c94:	d1ad      	bne.n	8002bf2 <lv_obj_create+0x1d6>
 8002c96:	e6d1      	b.n	8002a3c <lv_obj_create+0x20>
 8002c98:	0801794b 	.word	0x0801794b
 8002c9c:	080178eb 	.word	0x080178eb
 8002ca0:	080176f4 	.word	0x080176f4
 8002ca4:	08002d99 	.word	0x08002d99
 8002ca8:	0800fa07 	.word	0x0800fa07
 8002cac:	20020614 	.word	0x20020614
 8002cb0:	ff000301 	.word	0xff000301
 8002cb4:	20020560 	.word	0x20020560

08002cb8 <lv_obj_set_parent>:
    if(obj->par == NULL) {
 8002cb8:	6803      	ldr	r3, [r0, #0]
{
 8002cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cbe:	4604      	mov	r4, r0
 8002cc0:	460d      	mov	r5, r1
    if(obj->par == NULL) {
 8002cc2:	b943      	cbnz	r3, 8002cd6 <lv_obj_set_parent+0x1e>
        LV_LOG_WARN("Can't set the parent of a screen");
 8002cc4:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <lv_obj_set_parent+0x7c>)
 8002cc6:	f240 220a 	movw	r2, #522	; 0x20a
        LV_LOG_WARN("Can't set parent == NULL to an object");
 8002cca:	491b      	ldr	r1, [pc, #108]	; (8002d38 <lv_obj_set_parent+0x80>)
 8002ccc:	2002      	movs	r0, #2
}
 8002cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        LV_LOG_WARN("Can't set parent == NULL to an object");
 8002cd2:	f000 bc9f 	b.w	8003614 <lv_log_add>
    if(parent == NULL) {
 8002cd6:	b919      	cbnz	r1, 8002ce0 <lv_obj_set_parent+0x28>
        LV_LOG_WARN("Can't set parent == NULL to an object");
 8002cd8:	4b18      	ldr	r3, [pc, #96]	; (8002d3c <lv_obj_set_parent+0x84>)
 8002cda:	f240 220f 	movw	r2, #527	; 0x20f
 8002cde:	e7f4      	b.n	8002cca <lv_obj_set_parent+0x12>
    lv_obj_invalidate(obj);
 8002ce0:	f00c fa86 	bl	800f1f0 <lv_obj_invalidate>
    return obj->par;
 8002ce4:	6826      	ldr	r6, [r4, #0]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8002ce6:	8a27      	ldrh	r7, [r4, #16]
    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj, true);
 8002ce8:	4622      	mov	r2, r4
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8002cea:	8a33      	ldrh	r3, [r6, #16]
    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj, true);
 8002cec:	1d29      	adds	r1, r5, #4
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8002cee:	f8b4 8012 	ldrh.w	r8, [r4, #18]
    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj, true);
 8002cf2:	1d30      	adds	r0, r6, #4
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8002cf4:	1aff      	subs	r7, r7, r3
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8002cf6:	8a73      	ldrh	r3, [r6, #18]
 8002cf8:	eba8 0803 	sub.w	r8, r8, r3
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8002cfc:	b23f      	sxth	r7, r7
    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj, true);
 8002cfe:	2301      	movs	r3, #1
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8002d00:	fa0f f888 	sxth.w	r8, r8
    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj, true);
 8002d04:	f00d fa70 	bl	80101e8 <lv_ll_chg_list>
    lv_obj_set_pos(obj, old_pos.x, old_pos.y);
 8002d08:	4639      	mov	r1, r7
 8002d0a:	4642      	mov	r2, r8
 8002d0c:	4620      	mov	r0, r4
    obj->par = parent;
 8002d0e:	6025      	str	r5, [r4, #0]
    lv_obj_set_pos(obj, old_pos.x, old_pos.y);
 8002d10:	f00c fadb 	bl	800f2ca <lv_obj_set_pos>
    old_par->signal_cb(old_par, LV_SIGNAL_CHILD_CHG, NULL);
 8002d14:	69f3      	ldr	r3, [r6, #28]
 8002d16:	2200      	movs	r2, #0
 8002d18:	2101      	movs	r1, #1
 8002d1a:	4630      	mov	r0, r6
 8002d1c:	4798      	blx	r3
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 8002d1e:	69eb      	ldr	r3, [r5, #28]
 8002d20:	4622      	mov	r2, r4
 8002d22:	4628      	mov	r0, r5
 8002d24:	2101      	movs	r1, #1
 8002d26:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8002d28:	4620      	mov	r0, r4
}
 8002d2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_invalidate(obj);
 8002d2e:	f00c ba5f 	b.w	800f1f0 <lv_obj_invalidate>
 8002d32:	bf00      	nop
 8002d34:	080179bd 	.word	0x080179bd
 8002d38:	080178eb 	.word	0x080178eb
 8002d3c:	080179de 	.word	0x080179de

08002d40 <lv_obj_get_style>:
{
 8002d40:	b570      	push	{r4, r5, r6, lr}
    const lv_style_t * style_act = obj->style_p;
 8002d42:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 8002d44:	4605      	mov	r5, r0
    if(style_act == NULL) {
 8002d46:	b98c      	cbnz	r4, 8002d6c <lv_obj_get_style+0x2c>
        lv_obj_t * par = obj->par;
 8002d48:	6804      	ldr	r4, [r0, #0]
        while(par) {
 8002d4a:	b17c      	cbz	r4, 8002d6c <lv_obj_get_style+0x2c>
            if(par->style_p) {
 8002d4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d4e:	b1fb      	cbz	r3, 8002d90 <lv_obj_get_style+0x50>
                if(par->style_p->glass == 0) {
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	07db      	lsls	r3, r3, #31
 8002d54:	d41c      	bmi.n	8002d90 <lv_obj_get_style+0x50>
    return obj->group_p;
 8002d56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
                    if(lv_group_get_focused(g) == par) {
 8002d58:	4630      	mov	r0, r6
 8002d5a:	f00c f903 	bl	800ef64 <lv_group_get_focused>
 8002d5e:	4284      	cmp	r4, r0
 8002d60:	d114      	bne.n	8002d8c <lv_obj_get_style+0x4c>
                        style_act = lv_group_mod_style(g, par->style_p);
 8002d62:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002d64:	4630      	mov	r0, r6
 8002d66:	f00c f8ea 	bl	800ef3e <lv_group_mod_style>
 8002d6a:	4604      	mov	r4, r0
    if(obj->group_p) {
 8002d6c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002d6e:	b140      	cbz	r0, 8002d82 <lv_obj_get_style+0x42>
        if(lv_group_get_focused(obj->group_p) == obj) {
 8002d70:	f00c f8f8 	bl	800ef64 <lv_group_get_focused>
 8002d74:	4285      	cmp	r5, r0
 8002d76:	d104      	bne.n	8002d82 <lv_obj_get_style+0x42>
            style_act = lv_group_mod_style(obj->group_p, style_act);
 8002d78:	4621      	mov	r1, r4
 8002d7a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002d7c:	f00c f8df 	bl	800ef3e <lv_group_mod_style>
 8002d80:	4604      	mov	r4, r0
}
 8002d82:	4804      	ldr	r0, [pc, #16]	; (8002d94 <lv_obj_get_style+0x54>)
 8002d84:	2c00      	cmp	r4, #0
 8002d86:	bf18      	it	ne
 8002d88:	4620      	movne	r0, r4
 8002d8a:	bd70      	pop	{r4, r5, r6, pc}
                        style_act = par->style_p;
 8002d8c:	6aa4      	ldr	r4, [r4, #40]	; 0x28
 8002d8e:	e7ed      	b.n	8002d6c <lv_obj_get_style+0x2c>
            par = par->par;
 8002d90:	6824      	ldr	r4, [r4, #0]
 8002d92:	e7da      	b.n	8002d4a <lv_obj_get_style+0xa>
 8002d94:	20020524 	.word	0x20020524

08002d98 <lv_obj_signal>:
{
 8002d98:	b570      	push	{r4, r5, r6, lr}
 8002d9a:	460c      	mov	r4, r1
 8002d9c:	4605      	mov	r5, r0
 8002d9e:	4616      	mov	r6, r2
    const lv_style_t * style = lv_obj_get_style(obj);
 8002da0:	f7ff ffce 	bl	8002d40 <lv_obj_get_style>
    if(sign == LV_SIGNAL_CHILD_CHG) {
 8002da4:	2c01      	cmp	r4, #1
 8002da6:	d105      	bne.n	8002db4 <lv_obj_signal+0x1c>
    return (obj->protect & prot) == 0 ? false : true;
 8002da8:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
 8002dac:	43c0      	mvns	r0, r0
 8002dae:	f000 0001 	and.w	r0, r0, #1
}
 8002db2:	bd70      	pop	{r4, r5, r6, pc}
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8002db4:	2c05      	cmp	r4, #5
 8002db6:	d108      	bne.n	8002dca <lv_obj_signal+0x32>
        if(style->body.shadow.width > obj->ext_draw_pad) obj->ext_draw_pad = style->body.shadow.width;
 8002db8:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 8002dbc:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	da00      	bge.n	8002dc6 <lv_obj_signal+0x2e>
 8002dc4:	86ab      	strh	r3, [r5, #52]	; 0x34
    lv_res_t res = LV_RES_OK;
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	e7f3      	b.n	8002db2 <lv_obj_signal+0x1a>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 8002dca:	2c04      	cmp	r4, #4
 8002dcc:	d103      	bne.n	8002dd6 <lv_obj_signal+0x3e>
        lv_obj_refresh_ext_draw_pad(obj);
 8002dce:	4628      	mov	r0, r5
 8002dd0:	f00c fd1e 	bl	800f810 <lv_obj_refresh_ext_draw_pad>
 8002dd4:	e7f7      	b.n	8002dc6 <lv_obj_signal+0x2e>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8002dd6:	2c06      	cmp	r4, #6
        buf->type[0]        = "lv_obj";
 8002dd8:	bf04      	itt	eq
 8002dda:	4b01      	ldreq	r3, [pc, #4]	; (8002de0 <lv_obj_signal+0x48>)
 8002ddc:	6033      	streq	r3, [r6, #0]
 8002dde:	e7f2      	b.n	8002dc6 <lv_obj_signal+0x2e>
 8002de0:	08017a04 	.word	0x08017a04

08002de4 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
 8002de4:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8002de6:	4d10      	ldr	r5, [pc, #64]	; (8002e28 <lv_refr_vdb_flush+0x44>)
 8002de8:	6828      	ldr	r0, [r5, #0]
 8002dea:	f00b ffc4 	bl	800ed76 <lv_disp_get_buf>
 8002dee:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
 8002df0:	6828      	ldr	r0, [r5, #0]
 8002df2:	f00b ffc2 	bl	800ed7a <lv_disp_is_double_buf>
 8002df6:	b110      	cbz	r0, 8002dfe <lv_refr_vdb_flush+0x1a>
        while(vdb->flushing)
 8002df8:	69a3      	ldr	r3, [r4, #24]
 8002dfa:	07db      	lsls	r3, r3, #31
 8002dfc:	d4fc      	bmi.n	8002df8 <lv_refr_vdb_flush+0x14>
            ;
    }

    vdb->flushing = 1;
 8002dfe:	7e23      	ldrb	r3, [r4, #24]
    return disp_refr;
 8002e00:	6828      	ldr	r0, [r5, #0]
    vdb->flushing = 1;
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	7623      	strb	r3, [r4, #24]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
 8002e08:	68c3      	ldr	r3, [r0, #12]
 8002e0a:	b11b      	cbz	r3, 8002e14 <lv_refr_vdb_flush+0x30>
 8002e0c:	68a2      	ldr	r2, [r4, #8]
 8002e0e:	f104 0110 	add.w	r1, r4, #16
 8002e12:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
 8002e14:	6823      	ldr	r3, [r4, #0]
 8002e16:	b133      	cbz	r3, 8002e26 <lv_refr_vdb_flush+0x42>
 8002e18:	6862      	ldr	r2, [r4, #4]
 8002e1a:	b122      	cbz	r2, 8002e26 <lv_refr_vdb_flush+0x42>
        if(vdb->buf_act == vdb->buf1)
 8002e1c:	68a1      	ldr	r1, [r4, #8]
            vdb->buf_act = vdb->buf2;
 8002e1e:	428b      	cmp	r3, r1
 8002e20:	bf08      	it	eq
 8002e22:	4613      	moveq	r3, r2
 8002e24:	60a3      	str	r3, [r4, #8]
        else
            vdb->buf_act = vdb->buf1;
    }
}
 8002e26:	bd38      	pop	{r3, r4, r5, pc}
 8002e28:	200203f0 	.word	0x200203f0

08002e2c <lv_refr_obj_and_children>:
{
 8002e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e2e:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 8002e30:	4605      	mov	r5, r0
 8002e32:	b920      	cbnz	r0, 8002e3e <lv_refr_obj_and_children+0x12>
 8002e34:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <lv_refr_obj_and_children+0x54>)
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	f7ff fc8a 	bl	8002750 <lv_disp_get_scr_act>
 8002e3c:	4605      	mov	r5, r0
    lv_refr_obj(top_p, mask_p);
 8002e3e:	4628      	mov	r0, r5
 8002e40:	4631      	mov	r1, r6
 8002e42:	f00c fea9 	bl	800fb98 <lv_refr_obj>
    par = lv_obj_get_parent(top_p);
 8002e46:	4628      	mov	r0, r5
 8002e48:	f00c fd58 	bl	800f8fc <lv_obj_get_parent>
        par = lv_obj_get_parent(par);
 8002e4c:	4604      	mov	r4, r0
    while(par != NULL) {
 8002e4e:	b900      	cbnz	r0, 8002e52 <lv_refr_obj_and_children+0x26>
}
 8002e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * i = lv_ll_get_prev(&(par->child_ll), border_p);
 8002e52:	1d27      	adds	r7, r4, #4
            i = lv_ll_get_prev(&(par->child_ll), i);
 8002e54:	4629      	mov	r1, r5
 8002e56:	4638      	mov	r0, r7
 8002e58:	f00d f938 	bl	80100cc <lv_ll_get_prev>
 8002e5c:	4605      	mov	r5, r0
        while(i != NULL) {
 8002e5e:	b948      	cbnz	r0, 8002e74 <lv_refr_obj_and_children+0x48>
        par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
 8002e60:	6a23      	ldr	r3, [r4, #32]
 8002e62:	2201      	movs	r2, #1
 8002e64:	4631      	mov	r1, r6
 8002e66:	4620      	mov	r0, r4
 8002e68:	4798      	blx	r3
        par = lv_obj_get_parent(par);
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	f00c fd46 	bl	800f8fc <lv_obj_get_parent>
 8002e70:	4625      	mov	r5, r4
 8002e72:	e7eb      	b.n	8002e4c <lv_refr_obj_and_children+0x20>
            lv_refr_obj(i, mask_p);
 8002e74:	4631      	mov	r1, r6
 8002e76:	4628      	mov	r0, r5
 8002e78:	f00c fe8e 	bl	800fb98 <lv_refr_obj>
 8002e7c:	e7ea      	b.n	8002e54 <lv_refr_obj_and_children+0x28>
 8002e7e:	bf00      	nop
 8002e80:	200203f0 	.word	0x200203f0

08002e84 <lv_refr_area_part>:
{
 8002e84:	b573      	push	{r0, r1, r4, r5, r6, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8002e86:	4c18      	ldr	r4, [pc, #96]	; (8002ee8 <lv_refr_area_part+0x64>)
{
 8002e88:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8002e8a:	6820      	ldr	r0, [r4, #0]
 8002e8c:	f00b ff73 	bl	800ed76 <lv_disp_get_buf>
 8002e90:	4605      	mov	r5, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
 8002e92:	6820      	ldr	r0, [r4, #0]
 8002e94:	f00b ff71 	bl	800ed7a <lv_disp_is_double_buf>
 8002e98:	b910      	cbnz	r0, 8002ea0 <lv_refr_area_part+0x1c>
        while(vdb->flushing)
 8002e9a:	69ab      	ldr	r3, [r5, #24]
 8002e9c:	07db      	lsls	r3, r3, #31
 8002e9e:	d4fc      	bmi.n	8002e9a <lv_refr_area_part+0x16>
    lv_area_intersect(&start_mask, area_p, &vdb->area);
 8002ea0:	f105 0210 	add.w	r2, r5, #16
 8002ea4:	4631      	mov	r1, r6
 8002ea6:	4668      	mov	r0, sp
 8002ea8:	f00d fbc9 	bl	801063e <lv_area_intersect>
    top_p = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 8002eac:	6820      	ldr	r0, [r4, #0]
 8002eae:	f7ff fc4f 	bl	8002750 <lv_disp_get_scr_act>
 8002eb2:	4601      	mov	r1, r0
 8002eb4:	4668      	mov	r0, sp
 8002eb6:	f00c fe3d 	bl	800fb34 <lv_refr_get_top_obj>
    lv_refr_obj_and_children(top_p, &start_mask);
 8002eba:	4669      	mov	r1, sp
 8002ebc:	f7ff ffb6 	bl	8002e2c <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
 8002ec0:	6820      	ldr	r0, [r4, #0]
 8002ec2:	f7ff fc5b 	bl	800277c <lv_disp_get_layer_top>
 8002ec6:	4669      	mov	r1, sp
 8002ec8:	f7ff ffb0 	bl	8002e2c <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
 8002ecc:	6820      	ldr	r0, [r4, #0]
 8002ece:	f7ff fc6b 	bl	80027a8 <lv_disp_get_layer_sys>
 8002ed2:	4669      	mov	r1, sp
 8002ed4:	f7ff ffaa 	bl	8002e2c <lv_refr_obj_and_children>
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
 8002ed8:	6820      	ldr	r0, [r4, #0]
 8002eda:	f00b ff56 	bl	800ed8a <lv_disp_is_true_double_buf>
 8002ede:	b908      	cbnz	r0, 8002ee4 <lv_refr_area_part+0x60>
        lv_refr_vdb_flush();
 8002ee0:	f7ff ff80 	bl	8002de4 <lv_refr_vdb_flush>
}
 8002ee4:	b002      	add	sp, #8
 8002ee6:	bd70      	pop	{r4, r5, r6, pc}
 8002ee8:	200203f0 	.word	0x200203f0

08002eec <lv_inv_area>:
{
 8002eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eee:	460d      	mov	r5, r1
 8002ef0:	b085      	sub	sp, #20
    if(!disp) disp = lv_disp_get_default();
 8002ef2:	4604      	mov	r4, r0
 8002ef4:	b920      	cbnz	r0, 8002f00 <lv_inv_area+0x14>
 8002ef6:	f7ff fbdf 	bl	80026b8 <lv_disp_get_default>
    if(!disp) return;
 8002efa:	4604      	mov	r4, r0
 8002efc:	2800      	cmp	r0, #0
 8002efe:	d044      	beq.n	8002f8a <lv_inv_area+0x9e>
    if(area_p == NULL) {
 8002f00:	b935      	cbnz	r5, 8002f10 <lv_inv_area+0x24>
        disp->inv_p = 0;
 8002f02:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
 8002f06:	f365 0309 	bfi	r3, r5, #0, #10
        disp->inv_p++;
 8002f0a:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
 8002f0e:	e03c      	b.n	8002f8a <lv_inv_area+0x9e>
    scr_area.x1 = 0;
 8002f10:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8002f12:	4620      	mov	r0, r4
    scr_area.x1 = 0;
 8002f14:	9300      	str	r3, [sp, #0]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8002f16:	f7ff fbd5 	bl	80026c4 <lv_disp_get_hor_res>
 8002f1a:	3801      	subs	r0, #1
 8002f1c:	f8ad 0004 	strh.w	r0, [sp, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 8002f20:	4620      	mov	r0, r4
 8002f22:	f7ff fbe1 	bl	80026e8 <lv_disp_get_ver_res>
 8002f26:	3801      	subs	r0, #1
    suc = lv_area_intersect(&com_area, area_p, &scr_area);
 8002f28:	466a      	mov	r2, sp
 8002f2a:	4629      	mov	r1, r5
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 8002f2c:	f8ad 0006 	strh.w	r0, [sp, #6]
    suc = lv_area_intersect(&com_area, area_p, &scr_area);
 8002f30:	a802      	add	r0, sp, #8
 8002f32:	f00d fb84 	bl	801063e <lv_area_intersect>
    if(suc != false) {
 8002f36:	b340      	cbz	r0, 8002f8a <lv_inv_area+0x9e>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp_refr->driver, &com_area);
 8002f38:	6923      	ldr	r3, [r4, #16]
 8002f3a:	b11b      	cbz	r3, 8002f44 <lv_inv_area+0x58>
 8002f3c:	4a18      	ldr	r2, [pc, #96]	; (8002fa0 <lv_inv_area+0xb4>)
 8002f3e:	a902      	add	r1, sp, #8
 8002f40:	6810      	ldr	r0, [r2, #0]
 8002f42:	4798      	blx	r3
 8002f44:	f104 0540 	add.w	r5, r4, #64	; 0x40
{
 8002f48:	2600      	movs	r6, #0
 8002f4a:	462f      	mov	r7, r5
        for(i = 0; i < disp->inv_p; i++) {
 8002f4c:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
 8002f50:	b2b2      	uxth	r2, r6
 8002f52:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8002f56:	4290      	cmp	r0, r2
 8002f58:	d80f      	bhi.n	8002f7a <lv_inv_area+0x8e>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
 8002f5a:	281f      	cmp	r0, #31
 8002f5c:	d817      	bhi.n	8002f8e <lv_inv_area+0xa2>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 8002f5e:	3008      	adds	r0, #8
 8002f60:	2208      	movs	r2, #8
 8002f62:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002f66:	eb0d 0102 	add.w	r1, sp, r2
 8002f6a:	f013 fc01 	bl	8016770 <memcpy>
        disp->inv_p++;
 8002f6e:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	f362 0309 	bfi	r3, r2, #0, #10
 8002f78:	e7c7      	b.n	8002f0a <lv_inv_area+0x1e>
            if(lv_area_is_in(&com_area, &disp->inv_areas[i]) != false) return;
 8002f7a:	4629      	mov	r1, r5
 8002f7c:	a802      	add	r0, sp, #8
 8002f7e:	f00d fbe0 	bl	8010742 <lv_area_is_in>
 8002f82:	3601      	adds	r6, #1
 8002f84:	3508      	adds	r5, #8
 8002f86:	2800      	cmp	r0, #0
 8002f88:	d0e0      	beq.n	8002f4c <lv_inv_area+0x60>
}
 8002f8a:	b005      	add	sp, #20
 8002f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            disp->inv_p = 0;
 8002f8e:	f36f 0309 	bfc	r3, #0, #10
 8002f92:	2208      	movs	r2, #8
 8002f94:	4669      	mov	r1, sp
 8002f96:	4638      	mov	r0, r7
 8002f98:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
 8002f9c:	e7e5      	b.n	8002f6a <lv_inv_area+0x7e>
 8002f9e:	bf00      	nop
 8002fa0:	200203f0 	.word	0x200203f0

08002fa4 <lv_refr_get_disp_refreshing>:
}
 8002fa4:	4b01      	ldr	r3, [pc, #4]	; (8002fac <lv_refr_get_disp_refreshing+0x8>)
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	200203f0 	.word	0x200203f0

08002fb0 <lv_disp_refr_task>:
{
 8002fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fb4:	4605      	mov	r5, r0
 8002fb6:	b089      	sub	sp, #36	; 0x24
    uint32_t start = lv_tick_get();
 8002fb8:	f7ff fbb2 	bl	8002720 <lv_tick_get>
    disp_refr = task->user_data;
 8002fbc:	4cb0      	ldr	r4, [pc, #704]	; (8003280 <lv_disp_refr_task+0x2d0>)
 8002fbe:	68eb      	ldr	r3, [r5, #12]
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8002fc0:	2600      	movs	r6, #0
    uint32_t start = lv_tick_get();
 8002fc2:	9003      	str	r0, [sp, #12]
    disp_refr = task->user_data;
 8002fc4:	6023      	str	r3, [r4, #0]
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8002fc6:	6823      	ldr	r3, [r4, #0]
 8002fc8:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
 8002fcc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002fd0:	4296      	cmp	r6, r2
 8002fd2:	d330      	bcc.n	8003036 <lv_disp_refr_task+0x86>
    px_num = 0;
 8002fd4:	4bab      	ldr	r3, [pc, #684]	; (8003284 <lv_disp_refr_task+0x2d4>)
 8002fd6:	2600      	movs	r6, #0
 8002fd8:	9301      	str	r3, [sp, #4]
 8002fda:	601e      	str	r6, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 8002fdc:	f8d4 8000 	ldr.w	r8, [r4]
 8002fe0:	f8b8 3160 	ldrh.w	r3, [r8, #352]	; 0x160
 8002fe4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fe8:	4296      	cmp	r6, r2
 8002fea:	d368      	bcc.n	80030be <lv_disp_refr_task+0x10e>
    if(disp_refr->inv_p != 0) {
 8002fec:	b1f2      	cbz	r2, 800302c <lv_disp_refr_task+0x7c>
        if(lv_disp_is_true_double_buf(disp_refr)) {
 8002fee:	4640      	mov	r0, r8
 8002ff0:	f00b fecb 	bl	800ed8a <lv_disp_is_true_double_buf>
 8002ff4:	2800      	cmp	r0, #0
 8002ff6:	f040 811d 	bne.w	8003234 <lv_disp_refr_task+0x284>
        memset(disp_refr->inv_areas, 0, sizeof(disp_refr->inv_areas));
 8002ffa:	6820      	ldr	r0, [r4, #0]
 8002ffc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003000:	2100      	movs	r1, #0
 8003002:	3040      	adds	r0, #64	; 0x40
 8003004:	f013 fbde 	bl	80167c4 <memset>
        memset(disp_refr->inv_area_joined, 0, sizeof(disp_refr->inv_area_joined));
 8003008:	6820      	ldr	r0, [r4, #0]
 800300a:	2220      	movs	r2, #32
 800300c:	2100      	movs	r1, #0
 800300e:	f500 70a0 	add.w	r0, r0, #320	; 0x140
 8003012:	f013 fbd7 	bl	80167c4 <memset>
        disp_refr->inv_p = 0;
 8003016:	6824      	ldr	r4, [r4, #0]
 8003018:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
        if(disp_refr->driver.monitor_cb) {
 800301c:	69a5      	ldr	r5, [r4, #24]
        disp_refr->inv_p = 0;
 800301e:	f36f 0309 	bfc	r3, #0, #10
 8003022:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
        if(disp_refr->driver.monitor_cb) {
 8003026:	2d00      	cmp	r5, #0
 8003028:	f040 815a 	bne.w	80032e0 <lv_disp_refr_task+0x330>
    lv_draw_free_buf();
 800302c:	f000 ffdc 	bl	8003fe8 <lv_draw_free_buf>
}
 8003030:	b009      	add	sp, #36	; 0x24
 8003032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 8003036:	4433      	add	r3, r6
 8003038:	f893 5140 	ldrb.w	r5, [r3, #320]	; 0x140
 800303c:	b10d      	cbz	r5, 8003042 <lv_disp_refr_task+0x92>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800303e:	3601      	adds	r6, #1
 8003040:	e7c1      	b.n	8002fc6 <lv_disp_refr_task+0x16>
 8003042:	00f7      	lsls	r7, r6, #3
                disp_refr->inv_area_joined[join_from] = 1;
 8003044:	f04f 0901 	mov.w	r9, #1
 8003048:	3740      	adds	r7, #64	; 0x40
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800304a:	6820      	ldr	r0, [r4, #0]
 800304c:	f8b0 3160 	ldrh.w	r3, [r0, #352]	; 0x160
 8003050:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003054:	429d      	cmp	r5, r3
 8003056:	d2f2      	bcs.n	800303e <lv_disp_refr_task+0x8e>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 8003058:	1943      	adds	r3, r0, r5
 800305a:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800305e:	bb63      	cbnz	r3, 80030ba <lv_disp_refr_task+0x10a>
 8003060:	42ae      	cmp	r6, r5
 8003062:	d02a      	beq.n	80030ba <lv_disp_refr_task+0x10a>
            if(lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 8003064:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8003068:	f108 0840 	add.w	r8, r8, #64	; 0x40
 800306c:	eb00 0108 	add.w	r1, r0, r8
 8003070:	4438      	add	r0, r7
 8003072:	f00d fb49 	bl	8010708 <lv_area_is_on>
 8003076:	b300      	cbz	r0, 80030ba <lv_disp_refr_task+0x10a>
            lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 8003078:	6821      	ldr	r1, [r4, #0]
 800307a:	a806      	add	r0, sp, #24
 800307c:	eb01 0208 	add.w	r2, r1, r8
 8003080:	4439      	add	r1, r7
 8003082:	f00d fb06 	bl	8010692 <lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8003086:	a806      	add	r0, sp, #24
 8003088:	f00d facb 	bl	8010622 <lv_area_get_size>
 800308c:	4683      	mov	fp, r0
 800308e:	6820      	ldr	r0, [r4, #0]
 8003090:	4438      	add	r0, r7
 8003092:	f00d fac6 	bl	8010622 <lv_area_get_size>
 8003096:	4682      	mov	sl, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 8003098:	6820      	ldr	r0, [r4, #0]
 800309a:	4440      	add	r0, r8
 800309c:	f00d fac1 	bl	8010622 <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 80030a0:	4450      	add	r0, sl
 80030a2:	4583      	cmp	fp, r0
 80030a4:	d209      	bcs.n	80030ba <lv_disp_refr_task+0x10a>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 80030a6:	6820      	ldr	r0, [r4, #0]
 80030a8:	2208      	movs	r2, #8
 80030aa:	a906      	add	r1, sp, #24
 80030ac:	4438      	add	r0, r7
 80030ae:	f013 fb5f 	bl	8016770 <memcpy>
                disp_refr->inv_area_joined[join_from] = 1;
 80030b2:	6823      	ldr	r3, [r4, #0]
 80030b4:	442b      	add	r3, r5
 80030b6:	f883 9140 	strb.w	r9, [r3, #320]	; 0x140
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 80030ba:	3501      	adds	r5, #1
 80030bc:	e7c5      	b.n	800304a <lv_disp_refr_task+0x9a>
        if(disp_refr->inv_area_joined[i] == 0) {
 80030be:	eb08 0306 	add.w	r3, r8, r6
 80030c2:	f893 7140 	ldrb.w	r7, [r3, #320]	; 0x140
 80030c6:	2f00      	cmp	r7, #0
 80030c8:	d17c      	bne.n	80031c4 <lv_disp_refr_task+0x214>
            lv_refr_area(&disp_refr->inv_areas[i]);
 80030ca:	00f5      	lsls	r5, r6, #3
    if(lv_disp_is_true_double_buf(disp_refr)) {
 80030cc:	4640      	mov	r0, r8
 80030ce:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80030d2:	9302      	str	r3, [sp, #8]
            lv_refr_area(&disp_refr->inv_areas[i]);
 80030d4:	eb08 0903 	add.w	r9, r8, r3
    if(lv_disp_is_true_double_buf(disp_refr)) {
 80030d8:	f00b fe57 	bl	800ed8a <lv_disp_is_true_double_buf>
 80030dc:	b198      	cbz	r0, 8003106 <lv_disp_refr_task+0x156>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80030de:	6820      	ldr	r0, [r4, #0]
 80030e0:	f00b fe49 	bl	800ed76 <lv_disp_get_buf>
 80030e4:	4605      	mov	r5, r0
        vdb->area.x1        = 0;
 80030e6:	8207      	strh	r7, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 80030e8:	6820      	ldr	r0, [r4, #0]
 80030ea:	f7ff faeb 	bl	80026c4 <lv_disp_get_hor_res>
 80030ee:	3801      	subs	r0, #1
        vdb->area.y1        = 0;
 80030f0:	826f      	strh	r7, [r5, #18]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 80030f2:	82a8      	strh	r0, [r5, #20]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 80030f4:	6820      	ldr	r0, [r4, #0]
 80030f6:	f7ff faf7 	bl	80026e8 <lv_disp_get_ver_res>
 80030fa:	3801      	subs	r0, #1
 80030fc:	82e8      	strh	r0, [r5, #22]
            lv_refr_area_part(area_p);
 80030fe:	4648      	mov	r0, r9
 8003100:	f7ff fec0 	bl	8002e84 <lv_refr_area_part>
 8003104:	e052      	b.n	80031ac <lv_disp_refr_task+0x1fc>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8003106:	4445      	add	r5, r8
 8003108:	6820      	ldr	r0, [r4, #0]
 800310a:	f00b fe34 	bl	800ed76 <lv_disp_get_buf>
 800310e:	4607      	mov	r7, r0
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 8003110:	f8b5 8044 	ldrh.w	r8, [r5, #68]	; 0x44
 8003114:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 8003118:	f9b5 b046 	ldrsh.w	fp, [r5, #70]	; 0x46
    return area_p->x2 - area_p->x1 + 1;
 800311c:	f108 0801 	add.w	r8, r8, #1
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 8003120:	6820      	ldr	r0, [r4, #0]
 8003122:	eba8 0803 	sub.w	r8, r8, r3
    return area_p->y2 - area_p->y1 + 1;
 8003126:	f10b 0a01 	add.w	sl, fp, #1
 800312a:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
    return area_p->x2 - area_p->x1 + 1;
 800312e:	fa0f f888 	sxth.w	r8, r8
    return area_p->y2 - area_p->y1 + 1;
 8003132:	ebaa 0a03 	sub.w	sl, sl, r3
 8003136:	f7ff fad7 	bl	80026e8 <lv_disp_get_ver_res>
        lv_coord_t y2 =
 800313a:	4583      	cmp	fp, r0
 800313c:	fa0f fa8a 	sxth.w	sl, sl
 8003140:	db42      	blt.n	80031c8 <lv_disp_refr_task+0x218>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 8003142:	6820      	ldr	r0, [r4, #0]
 8003144:	f7ff fad0 	bl	80026e8 <lv_disp_get_ver_res>
 8003148:	3801      	subs	r0, #1
 800314a:	fa0f fb80 	sxth.w	fp, r0
        int32_t max_row = (uint32_t)vdb->size / w;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	fbb3 f8f8 	udiv	r8, r3, r8
        if(disp_refr->driver.rounder_cb) {
 8003154:	6823      	ldr	r3, [r4, #0]
 8003156:	45c2      	cmp	sl, r8
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	bfa8      	it	ge
 800315c:	46c2      	movge	sl, r8
 800315e:	2b00      	cmp	r3, #0
 8003160:	d039      	beq.n	80031d6 <lv_disp_refr_task+0x226>
            lv_coord_t y_tmp = max_row - 1;
 8003162:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
            tmp.x1 = 0;
 8003166:	2300      	movs	r3, #0
            lv_coord_t y_tmp = max_row - 1;
 8003168:	fa0f f888 	sxth.w	r8, r8
            tmp.x1 = 0;
 800316c:	9306      	str	r3, [sp, #24]
            tmp.x2 = 0;
 800316e:	f8ad 301c 	strh.w	r3, [sp, #28]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 8003172:	6820      	ldr	r0, [r4, #0]
 8003174:	a906      	add	r1, sp, #24
                tmp.y2 = y_tmp;
 8003176:	f8ad 801e 	strh.w	r8, [sp, #30]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 800317a:	6903      	ldr	r3, [r0, #16]
 800317c:	4798      	blx	r3
 800317e:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 8003182:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8003186:	3201      	adds	r2, #1
 8003188:	1ad3      	subs	r3, r2, r3
                if(lv_area_get_height(&tmp) <= max_row) break;
 800318a:	b21b      	sxth	r3, r3
 800318c:	459a      	cmp	sl, r3
 800318e:	da1e      	bge.n	80031ce <lv_disp_refr_task+0x21e>
                y_tmp--;
 8003190:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003194:	fa0f f888 	sxth.w	r8, r8
            } while(y_tmp != 0);
 8003198:	f1b8 0f00 	cmp.w	r8, #0
 800319c:	d1e9      	bne.n	8003172 <lv_disp_refr_task+0x1c2>
                LV_LOG_WARN("Can't set VDB height using the round function. (Wrong round_cb or to "
 800319e:	4b3a      	ldr	r3, [pc, #232]	; (8003288 <lv_disp_refr_task+0x2d8>)
 80031a0:	f240 124f 	movw	r2, #335	; 0x14f
 80031a4:	4939      	ldr	r1, [pc, #228]	; (800328c <lv_disp_refr_task+0x2dc>)
 80031a6:	2002      	movs	r0, #2
 80031a8:	f000 fa34 	bl	8003614 <lv_log_add>
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 80031ac:	6820      	ldr	r0, [r4, #0]
 80031ae:	6983      	ldr	r3, [r0, #24]
 80031b0:	b143      	cbz	r3, 80031c4 <lv_disp_refr_task+0x214>
 80031b2:	9b02      	ldr	r3, [sp, #8]
 80031b4:	4418      	add	r0, r3
 80031b6:	f00d fa34 	bl	8010622 <lv_area_get_size>
 80031ba:	9b01      	ldr	r3, [sp, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4418      	add	r0, r3
 80031c0:	9b01      	ldr	r3, [sp, #4]
 80031c2:	6018      	str	r0, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 80031c4:	3601      	adds	r6, #1
 80031c6:	e709      	b.n	8002fdc <lv_disp_refr_task+0x2c>
        lv_coord_t y2 =
 80031c8:	f9b5 b046 	ldrsh.w	fp, [r5, #70]	; 0x46
 80031cc:	e7bf      	b.n	800314e <lv_disp_refr_task+0x19e>
            if(y_tmp == 0) {
 80031ce:	f1b8 0f00 	cmp.w	r8, #0
 80031d2:	d0e4      	beq.n	800319e <lv_disp_refr_task+0x1ee>
                max_row = tmp.y2 + 1;
 80031d4:	4692      	mov	sl, r2
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 80031d6:	f9b5 3042 	ldrsh.w	r3, [r5, #66]	; 0x42
        lv_coord_t row_last = 0;
 80031da:	f04f 0800 	mov.w	r8, #0
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 80031de:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 80031e2:	18d1      	adds	r1, r2, r3
 80031e4:	4559      	cmp	r1, fp
 80031e6:	dd0b      	ble.n	8003200 <lv_disp_refr_task+0x250>
        if(y2 != row_last) {
 80031e8:	45c3      	cmp	fp, r8
 80031ea:	d0df      	beq.n	80031ac <lv_disp_refr_task+0x1fc>
            vdb->area.x1 = area_p->x1;
 80031ec:	f9b5 2040 	ldrsh.w	r2, [r5, #64]	; 0x40
 80031f0:	823a      	strh	r2, [r7, #16]
            vdb->area.x2 = area_p->x2;
 80031f2:	f9b5 2044 	ldrsh.w	r2, [r5, #68]	; 0x44
            vdb->area.y1 = row;
 80031f6:	827b      	strh	r3, [r7, #18]
            vdb->area.x2 = area_p->x2;
 80031f8:	82ba      	strh	r2, [r7, #20]
            vdb->area.y2 = y2;
 80031fa:	f8a7 b016 	strh.w	fp, [r7, #22]
 80031fe:	e77e      	b.n	80030fe <lv_disp_refr_task+0x14e>
            vdb->area.x1 = area_p->x1;
 8003200:	f9b5 1040 	ldrsh.w	r1, [r5, #64]	; 0x40
            lv_refr_area_part(area_p);
 8003204:	4648      	mov	r0, r9
 8003206:	9205      	str	r2, [sp, #20]
            vdb->area.x1 = area_p->x1;
 8003208:	8239      	strh	r1, [r7, #16]
            vdb->area.x2 = area_p->x2;
 800320a:	f9b5 1044 	ldrsh.w	r1, [r5, #68]	; 0x44
            vdb->area.y1 = row;
 800320e:	827b      	strh	r3, [r7, #18]
            vdb->area.y2 = row + max_row - 1;
 8003210:	4453      	add	r3, sl
            vdb->area.x2 = area_p->x2;
 8003212:	82b9      	strh	r1, [r7, #20]
            vdb->area.y2 = row + max_row - 1;
 8003214:	b21b      	sxth	r3, r3
 8003216:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800321a:	9304      	str	r3, [sp, #16]
 800321c:	fa0f f888 	sxth.w	r8, r8
 8003220:	45d8      	cmp	r8, fp
 8003222:	bfa8      	it	ge
 8003224:	46d8      	movge	r8, fp
 8003226:	f8a7 8016 	strh.w	r8, [r7, #22]
            lv_refr_area_part(area_p);
 800322a:	f7ff fe2b 	bl	8002e84 <lv_refr_area_part>
 800322e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8003232:	e7d6      	b.n	80031e2 <lv_disp_refr_task+0x232>
            lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8003234:	6820      	ldr	r0, [r4, #0]
 8003236:	f00b fd9e 	bl	800ed76 <lv_disp_get_buf>
 800323a:	4605      	mov	r5, r0
            lv_refr_vdb_flush();
 800323c:	f7ff fdd2 	bl	8002de4 <lv_refr_vdb_flush>
            while(vdb->flushing)
 8003240:	69ab      	ldr	r3, [r5, #24]
 8003242:	07db      	lsls	r3, r3, #31
 8003244:	d4fc      	bmi.n	8003240 <lv_disp_refr_task+0x290>
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 8003246:	f8d5 9000 	ldr.w	r9, [r5]
            for(a = 0; a < disp_refr->inv_p; a++) {
 800324a:	2600      	movs	r6, #0
            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 800324c:	f8d5 b008 	ldr.w	fp, [r5, #8]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 8003250:	6820      	ldr	r0, [r4, #0]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 8003252:	45d9      	cmp	r9, fp
 8003254:	bf08      	it	eq
 8003256:	f8d5 9004 	ldreq.w	r9, [r5, #4]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 800325a:	f7ff fa33 	bl	80026c4 <lv_disp_get_hor_res>
 800325e:	4603      	mov	r3, r0
            for(a = 0; a < disp_refr->inv_p; a++) {
 8003260:	6822      	ldr	r2, [r4, #0]
 8003262:	b2b0      	uxth	r0, r6
 8003264:	f8b2 1160 	ldrh.w	r1, [r2, #352]	; 0x160
 8003268:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800326c:	4281      	cmp	r1, r0
 800326e:	f67f aec4 	bls.w	8002ffa <lv_disp_refr_task+0x4a>
                if(disp_refr->inv_area_joined[a] == 0) {
 8003272:	1991      	adds	r1, r2, r6
 8003274:	f891 1140 	ldrb.w	r1, [r1, #320]	; 0x140
 8003278:	b151      	cbz	r1, 8003290 <lv_disp_refr_task+0x2e0>
 800327a:	3601      	adds	r6, #1
 800327c:	e7f0      	b.n	8003260 <lv_disp_refr_task+0x2b0>
 800327e:	bf00      	nop
 8003280:	200203f0 	.word	0x200203f0
 8003284:	200203f4 	.word	0x200203f4
 8003288:	08017a0b 	.word	0x08017a0b
 800328c:	08017a5b 	.word	0x08017a5b
                    uint32_t start_offs =
 8003290:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 8003294:	f106 0a08 	add.w	sl, r6, #8
    return area_p->x2 - area_p->x1 + 1;
 8003298:	f8b2 5044 	ldrh.w	r5, [r2, #68]	; 0x44
 800329c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
                        (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 80032a0:	f9b2 1040 	ldrsh.w	r1, [r2, #64]	; 0x40
 80032a4:	3501      	adds	r5, #1
 80032a6:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
 80032aa:	1a6d      	subs	r5, r5, r1
 80032ac:	fb03 1807 	mla	r8, r3, r7, r1
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 80032b0:	b22d      	sxth	r5, r5
                    uint32_t start_offs =
 80032b2:	ea4f 0848 	mov.w	r8, r8, lsl #1
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 80032b6:	006d      	lsls	r5, r5, #1
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 80032b8:	6822      	ldr	r2, [r4, #0]
 80032ba:	4452      	add	r2, sl
 80032bc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80032c0:	42ba      	cmp	r2, r7
 80032c2:	dbda      	blt.n	800327a <lv_disp_refr_task+0x2ca>
                        memcpy(buf_act + start_offs, buf_ina + start_offs, line_length);
 80032c4:	eb09 0108 	add.w	r1, r9, r8
 80032c8:	eb0b 0008 	add.w	r0, fp, r8
 80032cc:	462a      	mov	r2, r5
 80032ce:	9302      	str	r3, [sp, #8]
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 80032d0:	3701      	adds	r7, #1
                        memcpy(buf_act + start_offs, buf_ina + start_offs, line_length);
 80032d2:	f013 fa4d 	bl	8016770 <memcpy>
                        start_offs += hres * sizeof(lv_color_t);
 80032d6:	9b02      	ldr	r3, [sp, #8]
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 80032d8:	b23f      	sxth	r7, r7
                        start_offs += hres * sizeof(lv_color_t);
 80032da:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 80032de:	e7eb      	b.n	80032b8 <lv_disp_refr_task+0x308>
            disp_refr->driver.monitor_cb(&disp_refr->driver, lv_tick_elaps(start), px_num);
 80032e0:	9803      	ldr	r0, [sp, #12]
 80032e2:	f00b fd61 	bl	800eda8 <lv_tick_elaps>
 80032e6:	9b01      	ldr	r3, [sp, #4]
 80032e8:	4601      	mov	r1, r0
 80032ea:	4620      	mov	r0, r4
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	47a8      	blx	r5
 80032f0:	e69c      	b.n	800302c <lv_disp_refr_task+0x7c>
 80032f2:	bf00      	nop

080032f4 <lv_style_init>:
{
    /* Not White/Black/Gray colors are created by HSV model with
     * HUE = 210*/

    /*Screen style*/
    lv_style_scr.glass               = 0;
 80032f4:	4979      	ldr	r1, [pc, #484]	; (80034dc <lv_style_init+0x1e8>)
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
    lv_style_scr.body.shadow.width = 0;

    lv_style_scr.text.opa          = LV_OPA_COVER;
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 80032f6:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
    lv_style_scr.body.border.width = 0;
 80032fa:	4a79      	ldr	r2, [pc, #484]	; (80034e0 <lv_style_init+0x1ec>)
{
 80032fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    lv_style_scr.glass               = 0;
 8003300:	780b      	ldrb	r3, [r1, #0]
    lv_style_scr.body.radius         = 0;
 8003302:	2500      	movs	r5, #0
    lv_style_scr.body.border.width = 0;
 8003304:	60ca      	str	r2, [r1, #12]
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
 8003306:	2201      	movs	r2, #1
    lv_style_scr.glass               = 0;
 8003308:	f36f 0300 	bfc	r3, #0, #1
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 800330c:	4f75      	ldr	r7, [pc, #468]	; (80034e4 <lv_style_init+0x1f0>)
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
 800330e:	750a      	strb	r2, [r1, #20]
    lv_style_scr.glass               = 0;
 8003310:	700b      	strb	r3, [r1, #0]
    lv_style_scr.body.opa            = LV_OPA_COVER;
 8003312:	23ff      	movs	r3, #255	; 0xff
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8003314:	4a74      	ldr	r2, [pc, #464]	; (80034e8 <lv_style_init+0x1f4>)
    lv_style_scr.body.opa            = LV_OPA_COVER;
 8003316:	720b      	strb	r3, [r1, #8]
    lv_style_scr.text.opa          = LV_OPA_COVER;
 8003318:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
    lv_style_scr.text.letter_space = 0;
    lv_style_scr.text.line_space   = 2;

    lv_style_scr.image.opa     = LV_OPA_COVER;
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 800331c:	4b73      	ldr	r3, [pc, #460]	; (80034ec <lv_style_init+0x1f8>)
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
    lv_style_scr.line.width   = 2;
    lv_style_scr.line.rounded = 0;

    /*Plain style (by default near the same as the screen style)*/
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 800331e:	4e74      	ldr	r6, [pc, #464]	; (80034f0 <lv_style_init+0x1fc>)
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 8003320:	630b      	str	r3, [r1, #48]	; 0x30
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
 8003322:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 8003326:	f8b7 9000 	ldrh.w	r9, [r7]
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
 800332a:	634b      	str	r3, [r1, #52]	; 0x34
    lv_style_scr.line.opa     = LV_OPA_COVER;
 800332c:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 800332e:	f8b7 8002 	ldrh.w	r8, [r7, #2]
    lv_style_scr.line.opa     = LV_OPA_COVER;
 8003332:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 8003336:	814d      	strh	r5, [r1, #10]
    lv_style_scr.body.padding.bottom = 0;
 8003338:	618d      	str	r5, [r1, #24]
    lv_style_scr.line.opa     = LV_OPA_COVER;
 800333a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    lv_style_plain.body.padding.right  = LV_DPI / 20;
    lv_style_plain.body.padding.top    = LV_DPI / 20;
    lv_style_plain.body.padding.bottom = LV_DPI / 20;

    /*Plain color style*/
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 800333e:	4c6d      	ldr	r4, [pc, #436]	; (80034f4 <lv_style_init+0x200>)
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 8003340:	f8a1 9002 	strh.w	r9, [r1, #2]
    lv_style_scr.line.opa     = LV_OPA_COVER;
 8003344:	870b      	strh	r3, [r1, #56]	; 0x38
    lv_style_scr.body.grad_color     = LV_COLOR_WHITE;
 8003346:	f8a1 9004 	strh.w	r9, [r1, #4]
    lv_style_scr.body.radius         = 0;
 800334a:	80cd      	strh	r5, [r1, #6]
    lv_style_scr.body.shadow.width = 0;
 800334c:	824d      	strh	r5, [r1, #18]
    lv_style_scr.body.padding.top    = 0;
 800334e:	82cd      	strh	r5, [r1, #22]
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 8003350:	f8a1 8010 	strh.w	r8, [r1, #16]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8003354:	e9c1 0207 	strd	r0, r2, [r1, #28]
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
 8003358:	4a67      	ldr	r2, [pc, #412]	; (80034f8 <lv_style_init+0x204>)
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 800335a:	4630      	mov	r0, r6
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
 800335c:	624a      	str	r2, [r1, #36]	; 0x24
    lv_style_scr.text.letter_space = 0;
 800335e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003362:	628a      	str	r2, [r1, #40]	; 0x28
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 8003364:	f00c fcb1 	bl	800fcca <lv_style_copy>
    lv_style_plain.body.padding.bottom = LV_DPI / 20;
 8003368:	f04f 1205 	mov.w	r2, #327685	; 0x50005
    lv_style_plain.body.padding.top    = LV_DPI / 20;
 800336c:	2305      	movs	r3, #5
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 800336e:	4631      	mov	r1, r6
    lv_style_plain.body.padding.bottom = LV_DPI / 20;
 8003370:	61b2      	str	r2, [r6, #24]
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 8003372:	4620      	mov	r0, r4
    lv_style_plain.body.padding.top    = LV_DPI / 20;
 8003374:	82f3      	strh	r3, [r6, #22]
    lv_style_plain.body.padding.right  = LV_DPI / 20;
 8003376:	83b3      	strh	r3, [r6, #28]
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 8003378:	f00c fca7 	bl	800fcca <lv_style_copy>
    lv_style_plain_color.text.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 800337c:	f24f 739e 	movw	r3, #63390	; 0xf79e
    lv_style_plain_color.line.color      = lv_color_make(0xf0, 0xf0, 0xf0);
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;

    /*Pretty style */
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 8003380:	4631      	mov	r1, r6
    lv_style_plain_color.text.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 8003382:	8423      	strh	r3, [r4, #32]
    lv_style_plain_color.image.color     = lv_color_make(0xf0, 0xf0, 0xf0);
 8003384:	8623      	strh	r3, [r4, #48]	; 0x30
    lv_style_plain_color.line.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 8003386:	86a3      	strh	r3, [r4, #52]	; 0x34
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 8003388:	f245 43bb 	movw	r3, #21691	; 0x54bb
 800338c:	8063      	strh	r3, [r4, #2]
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 800338e:	80a3      	strh	r3, [r4, #4]
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 8003390:	4c5a      	ldr	r4, [pc, #360]	; (80034fc <lv_style_init+0x208>)
 8003392:	4620      	mov	r0, r4
 8003394:	f00c fc99 	bl	800fcca <lv_style_copy>
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 8003398:	f242 1304 	movw	r3, #8452	; 0x2104
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
    lv_style_pretty.line.color        = lv_color_make(0x20, 0x20, 0x20);
    lv_style_pretty.body.main_color   = LV_COLOR_WHITE;
 800339c:	f8a4 9002 	strh.w	r9, [r4, #2]
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
    lv_style_pretty.body.radius       = LV_DPI / 15;
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 80033a0:	f04f 0902 	mov.w	r9, #2
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 80033a4:	8423      	strh	r3, [r4, #32]
    lv_style_pretty.body.border.opa   = LV_OPA_30;

    /*Pretty color style*/
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 80033a6:	4621      	mov	r1, r4
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
 80033a8:	8623      	strh	r3, [r4, #48]	; 0x30
    lv_style_pretty.line.color        = lv_color_make(0x20, 0x20, 0x20);
 80033aa:	86a3      	strh	r3, [r4, #52]	; 0x34
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
 80033ac:	88bb      	ldrh	r3, [r7, #4]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 80033ae:	4f54      	ldr	r7, [pc, #336]	; (8003500 <lv_style_init+0x20c>)
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
 80033b0:	80a3      	strh	r3, [r4, #4]
    lv_style_pretty.body.radius       = LV_DPI / 15;
 80033b2:	2306      	movs	r3, #6
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 80033b4:	4638      	mov	r0, r7
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 80033b6:	f8a4 900c 	strh.w	r9, [r4, #12]
    lv_style_pretty.body.radius       = LV_DPI / 15;
 80033ba:	80e3      	strh	r3, [r4, #6]
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
 80033bc:	f244 2308 	movw	r3, #16904	; 0x4208
 80033c0:	8163      	strh	r3, [r4, #10]
    lv_style_pretty.body.border.opa   = LV_OPA_30;
 80033c2:	234c      	movs	r3, #76	; 0x4c
 80033c4:	73e3      	strb	r3, [r4, #15]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 80033c6:	f00c fc80 	bl	800fcca <lv_style_copy>
    lv_style_pretty_color.text.color        = lv_color_make(0xe0, 0xe0, 0xe0);
 80033ca:	f24e 731c 	movw	r3, #59164	; 0xe71c
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);

    /*Transparent style*/
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 80033ce:	4c4d      	ldr	r4, [pc, #308]	; (8003504 <lv_style_init+0x210>)
 80033d0:	4631      	mov	r1, r6
    lv_style_pretty_color.text.color        = lv_color_make(0xe0, 0xe0, 0xe0);
 80033d2:	843b      	strh	r3, [r7, #32]
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 80033d4:	4620      	mov	r0, r4
    lv_style_pretty_color.image.color       = lv_color_make(0xe0, 0xe0, 0xe0);
 80033d6:	863b      	strh	r3, [r7, #48]	; 0x30
    lv_style_pretty_color.line.color        = lv_color_make(0xc0, 0xc0, 0xc0);
 80033d8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80033dc:	86bb      	strh	r3, [r7, #52]	; 0x34
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
 80033de:	f646 43d8 	movw	r3, #27864	; 0x6cd8
 80033e2:	807b      	strh	r3, [r7, #2]
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 80033e4:	f642 23d1 	movw	r3, #10961	; 0x2ad1
 80033e8:	80bb      	strh	r3, [r7, #4]
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
 80033ea:	f241 1368 	movw	r3, #4456	; 0x1168
 80033ee:	817b      	strh	r3, [r7, #10]
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 80033f0:	f00c fc6b 	bl	800fcca <lv_style_copy>
    lv_style_transp.glass             = 1;
 80033f4:	7823      	ldrb	r3, [r4, #0]
    lv_style_transp.body.border.width = 0;
    lv_style_transp.body.opa          = LV_OPA_TRANSP;

    /*Transparent fitting size*/
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 80033f6:	4f44      	ldr	r7, [pc, #272]	; (8003508 <lv_style_init+0x214>)
 80033f8:	4621      	mov	r1, r4
    lv_style_transp.glass             = 1;
 80033fa:	f043 0301 	orr.w	r3, r3, #1
    lv_style_transp.body.border.width = 0;
 80033fe:	81a5      	strh	r5, [r4, #12]
    lv_style_transp.body.opa          = LV_OPA_TRANSP;
 8003400:	7225      	strb	r5, [r4, #8]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 8003402:	4638      	mov	r0, r7
    lv_style_transp.glass             = 1;
 8003404:	7023      	strb	r3, [r4, #0]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 8003406:	f00c fc60 	bl	800fcca <lv_style_copy>
    lv_style_transp_fit.body.padding.right  = 0;
    lv_style_transp_fit.body.padding.top    = 0;
    lv_style_transp_fit.body.padding.bottom = 0;

    /*Transparent tight style*/
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 800340a:	4c40      	ldr	r4, [pc, #256]	; (800350c <lv_style_init+0x218>)
 800340c:	4639      	mov	r1, r7
    lv_style_transp_fit.body.padding.bottom = 0;
 800340e:	61bd      	str	r5, [r7, #24]
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 8003410:	4620      	mov	r0, r4
    lv_style_transp_fit.body.padding.top    = 0;
 8003412:	82fd      	strh	r5, [r7, #22]
    lv_style_transp_fit.body.padding.right  = 0;
 8003414:	83bd      	strh	r5, [r7, #28]
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 8003416:	f00c fc58 	bl	800fcca <lv_style_copy>
    lv_style_transp_tight.body.padding.inner = 0;
 800341a:	83e5      	strh	r5, [r4, #30]

    /*Button released style*/
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 800341c:	4631      	mov	r1, r6
 800341e:	4c3c      	ldr	r4, [pc, #240]	; (8003510 <lv_style_init+0x21c>)

    /*Button pressed style*/
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8003420:	f24a 57b8 	movw	r7, #42424	; 0xa5b8
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 8003424:	f243 3612 	movw	r6, #13074	; 0x3312
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 8003428:	4620      	mov	r0, r4
 800342a:	f00c fc4e 	bl	800fcca <lv_style_copy>
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 800342e:	f247 531a 	movw	r3, #29978	; 0x751a
    lv_style_btn_rel.body.shadow.width   = 0;
 8003432:	8265      	strh	r5, [r4, #18]
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 8003434:	4621      	mov	r1, r4
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 8003436:	8063      	strh	r3, [r4, #2]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 8003438:	4b36      	ldr	r3, [pc, #216]	; (8003514 <lv_style_init+0x220>)
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 800343a:	4d37      	ldr	r5, [pc, #220]	; (8003518 <lv_style_init+0x224>)
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 800343c:	6063      	str	r3, [r4, #4]
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 800343e:	f640 03c5 	movw	r3, #2245	; 0x8c5
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 8003442:	4628      	mov	r0, r5
    lv_style_btn_rel.body.border.width   = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 8003444:	f8a4 900c 	strh.w	r9, [r4, #12]
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 8003448:	8163      	strh	r3, [r4, #10]
    lv_style_btn_rel.body.border.opa     = LV_OPA_70;
 800344a:	23b2      	movs	r3, #178	; 0xb2
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 800344c:	f8a4 8010 	strh.w	r8, [r4, #16]
    lv_style_btn_rel.body.border.opa     = LV_OPA_70;
 8003450:	73e3      	strb	r3, [r4, #15]
    lv_style_btn_rel.body.padding.top    = LV_DPI / 6;
 8003452:	2310      	movs	r3, #16
 8003454:	82e3      	strh	r3, [r4, #22]
    lv_style_btn_rel.body.padding.bottom = LV_DPI / 6;
 8003456:	f503 13c8 	add.w	r3, r3, #1638400	; 0x190000
 800345a:	61a3      	str	r3, [r4, #24]
    lv_style_btn_rel.body.padding.right  = LV_DPI / 4;
 800345c:	4b2f      	ldr	r3, [pc, #188]	; (800351c <lv_style_init+0x228>)
 800345e:	61e3      	str	r3, [r4, #28]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 8003460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003464:	8423      	strh	r3, [r4, #32]
    lv_style_btn_rel.image.color         = lv_color_make(0xff, 0xff, 0xff);
 8003466:	8623      	strh	r3, [r4, #48]	; 0x30
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 8003468:	f00c fc2f 	bl	800fcca <lv_style_copy>
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
 800346c:	f241 1327 	movw	r3, #4391	; 0x1127
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 8003470:	806e      	strh	r6, [r5, #2]
    lv_style_btn_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
    lv_style_btn_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);

    /*Button toggle released style*/
    lv_style_copy(&lv_style_btn_tgl_rel, &lv_style_btn_rel);
 8003472:	4621      	mov	r1, r4
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
 8003474:	80ab      	strh	r3, [r5, #4]
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8003476:	842f      	strh	r7, [r5, #32]
    lv_style_btn_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 8003478:	862f      	strh	r7, [r5, #48]	; 0x30
    lv_style_btn_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800347a:	86af      	strh	r7, [r5, #52]	; 0x34
    lv_style_copy(&lv_style_btn_tgl_rel, &lv_style_btn_rel);
 800347c:	4d28      	ldr	r5, [pc, #160]	; (8003520 <lv_style_init+0x22c>)
 800347e:	4628      	mov	r0, r5
 8003480:	f00c fc23 	bl	800fcca <lv_style_copy>
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 8003484:	f640 0384 	movw	r3, #2180	; 0x884
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 8003488:	80ae      	strh	r6, [r5, #4]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);

    /*Button toggle pressed style*/
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 800348a:	4629      	mov	r1, r5
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 800348c:	806b      	strh	r3, [r5, #2]
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 800348e:	2321      	movs	r3, #33	; 0x21
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 8003490:	4e24      	ldr	r6, [pc, #144]	; (8003524 <lv_style_init+0x230>)
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 8003492:	816b      	strh	r3, [r5, #10]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8003494:	f64c 63fe 	movw	r3, #52990	; 0xcefe
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 8003498:	4630      	mov	r0, r6
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 800349a:	842b      	strh	r3, [r5, #32]
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
 800349c:	862b      	strh	r3, [r5, #48]	; 0x30
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 800349e:	86ab      	strh	r3, [r5, #52]	; 0x34
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 80034a0:	f00c fc13 	bl	800fcca <lv_style_copy>
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 80034a4:	23a4      	movs	r3, #164	; 0xa4
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
    lv_style_btn_tgl_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);

    /*Button inactive style*/
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 80034a6:	4d20      	ldr	r5, [pc, #128]	; (8003528 <lv_style_init+0x234>)
 80034a8:	4621      	mov	r1, r4
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 80034aa:	8073      	strh	r3, [r6, #2]
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 80034ac:	f642 236e 	movw	r3, #10862	; 0x2a6e
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 80034b0:	8437      	strh	r7, [r6, #32]
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 80034b2:	4628      	mov	r0, r5
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 80034b4:	80b3      	strh	r3, [r6, #4]
    lv_style_btn_tgl_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 80034b6:	8637      	strh	r7, [r6, #48]	; 0x30
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 80034b8:	86b7      	strh	r7, [r6, #52]	; 0x34
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 80034ba:	f00c fc06 	bl	800fcca <lv_style_copy>
    lv_style_btn_ina.body.main_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 80034be:	f64d 63db 	movw	r3, #57051	; 0xdedb
 80034c2:	806b      	strh	r3, [r5, #2]
    lv_style_btn_ina.body.grad_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 80034c4:	80ab      	strh	r3, [r5, #4]
    lv_style_btn_ina.body.border.color = lv_color_make(0x90, 0x90, 0x90);
 80034c6:	f249 4392 	movw	r3, #38034	; 0x9492
 80034ca:	816b      	strh	r3, [r5, #10]
    lv_style_btn_ina.text.color        = lv_color_make(0x70, 0x70, 0x70);
 80034cc:	f247 338e 	movw	r3, #29582	; 0x738e
 80034d0:	842b      	strh	r3, [r5, #32]
    lv_style_btn_ina.image.color       = lv_color_make(0x70, 0x70, 0x70);
 80034d2:	862b      	strh	r3, [r5, #48]	; 0x30
    lv_style_btn_ina.line.color        = lv_color_make(0x70, 0x70, 0x70);
 80034d4:	86ab      	strh	r3, [r5, #52]	; 0x34
}
 80034d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034da:	bf00      	nop
 80034dc:	20020614 	.word	0x20020614
 80034e0:	ff0f0000 	.word	0xff0f0000
 80034e4:	08017230 	.word	0x08017230
 80034e8:	54bb3186 	.word	0x54bb3186
 80034ec:	ff002104 	.word	0xff002104
 80034f0:	20020524 	.word	0x20020524
 80034f4:	20020560 	.word	0x20020560
 80034f8:	2002df1c 	.word	0x2002df1c
 80034fc:	2002059c 	.word	0x2002059c
 8003500:	200205d8 	.word	0x200205d8
 8003504:	20020650 	.word	0x20020650
 8003508:	2002068c 	.word	0x2002068c
 800350c:	200206c8 	.word	0x200206c8
 8003510:	20020470 	.word	0x20020470
 8003514:	000619cb 	.word	0x000619cb
 8003518:	20020434 	.word	0x20020434
 800351c:	000a0019 	.word	0x000a0019
 8003520:	200204e8 	.word	0x200204e8
 8003524:	200204ac 	.word	0x200204ac
 8003528:	200203f8 	.word	0x200203f8

0800352c <lv_fs_get_drv>:
 * Give a pointer to a driver from its letter
 * @param letter the driver letter
 * @return pointer to a driver or NULL if not found
 */
static lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 800352c:	b538      	push	{r3, r4, r5, lr}
    lv_fs_drv_t * drv;

    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 800352e:	4d07      	ldr	r5, [pc, #28]	; (800354c <lv_fs_get_drv+0x20>)
{
 8003530:	4604      	mov	r4, r0
    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 8003532:	4806      	ldr	r0, [pc, #24]	; (800354c <lv_fs_get_drv+0x20>)
 8003534:	f00c fdb4 	bl	80100a0 <lv_ll_get_head>
 8003538:	b900      	cbnz	r0, 800353c <lv_fs_get_drv+0x10>
            return drv;
        }
    }

    return NULL;
}
 800353a:	bd38      	pop	{r3, r4, r5, pc}
        if(drv->letter == letter) {
 800353c:	7803      	ldrb	r3, [r0, #0]
 800353e:	42a3      	cmp	r3, r4
 8003540:	d0fb      	beq.n	800353a <lv_fs_get_drv+0xe>
    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 8003542:	4601      	mov	r1, r0
 8003544:	4628      	mov	r0, r5
 8003546:	f00c fdb1 	bl	80100ac <lv_ll_get_next>
 800354a:	e7f5      	b.n	8003538 <lv_fs_get_drv+0xc>
 800354c:	20020720 	.word	0x20020720

08003550 <lv_fs_init>:
    lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
 8003550:	2148      	movs	r1, #72	; 0x48
 8003552:	4801      	ldr	r0, [pc, #4]	; (8003558 <lv_fs_init+0x8>)
 8003554:	f00c bd5e 	b.w	8010014 <lv_ll_init>
 8003558:	20020720 	.word	0x20020720

0800355c <lv_fs_open>:
    file_p->drv    = NULL;
 800355c:	2300      	movs	r3, #0
{
 800355e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003562:	4604      	mov	r4, r0
 8003564:	4690      	mov	r8, r2
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 8003566:	460d      	mov	r5, r1
    file_p->file_d = NULL;
 8003568:	e9c0 3300 	strd	r3, r3, [r0]
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 800356c:	2900      	cmp	r1, #0
 800356e:	d033      	beq.n	80035d8 <lv_fs_open+0x7c>
    file_p->drv = lv_fs_get_drv(letter);
 8003570:	7808      	ldrb	r0, [r1, #0]
 8003572:	f7ff ffdb 	bl	800352c <lv_fs_get_drv>
 8003576:	6060      	str	r0, [r4, #4]
    if(file_p->drv == NULL) {
 8003578:	b920      	cbnz	r0, 8003584 <lv_fs_open+0x28>
        return LV_FS_RES_NOT_EX;
 800357a:	2503      	movs	r5, #3
        file_p->file_d = NULL;
 800357c:	6020      	str	r0, [r4, #0]
}
 800357e:	4628      	mov	r0, r5
 8003580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(file_p->drv->ready_cb != NULL) {
 8003584:	6883      	ldr	r3, [r0, #8]
 8003586:	b12b      	cbz	r3, 8003594 <lv_fs_open+0x38>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
 8003588:	4798      	blx	r3
 800358a:	b918      	cbnz	r0, 8003594 <lv_fs_open+0x38>
            return LV_FS_RES_HW_ERR;
 800358c:	2501      	movs	r5, #1
            file_p->file_d = NULL;
 800358e:	e9c4 0000 	strd	r0, r0, [r4]
            return LV_FS_RES_HW_ERR;
 8003592:	e7f4      	b.n	800357e <lv_fs_open+0x22>
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
 8003594:	6863      	ldr	r3, [r4, #4]
 8003596:	8858      	ldrh	r0, [r3, #2]
 8003598:	f000 f86a 	bl	8003670 <lv_mem_alloc>
 800359c:	4601      	mov	r1, r0
 800359e:	6020      	str	r0, [r4, #0]
    lv_mem_assert(file_p->file_d);
 80035a0:	b930      	cbnz	r0, 80035b0 <lv_fs_open+0x54>
 80035a2:	4b0f      	ldr	r3, [pc, #60]	; (80035e0 <lv_fs_open+0x84>)
 80035a4:	226f      	movs	r2, #111	; 0x6f
 80035a6:	490f      	ldr	r1, [pc, #60]	; (80035e4 <lv_fs_open+0x88>)
 80035a8:	2003      	movs	r0, #3
 80035aa:	f000 f833 	bl	8003614 <lv_log_add>
 80035ae:	e7fe      	b.n	80035ae <lv_fs_open+0x52>
    if(file_p->drv->open_cb == NULL) {
 80035b0:	6867      	ldr	r7, [r4, #4]
 80035b2:	68fe      	ldr	r6, [r7, #12]
 80035b4:	b196      	cbz	r6, 80035dc <lv_fs_open+0x80>
    const char * real_path = lv_fs_get_real_path(path);
 80035b6:	4628      	mov	r0, r5
 80035b8:	f00c fcbb 	bl	800ff32 <lv_fs_get_real_path>
    lv_fs_res_t res        = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
 80035bc:	4643      	mov	r3, r8
 80035be:	4602      	mov	r2, r0
 80035c0:	4638      	mov	r0, r7
 80035c2:	47b0      	blx	r6
    if(res != LV_FS_RES_OK) {
 80035c4:	4605      	mov	r5, r0
 80035c6:	2800      	cmp	r0, #0
 80035c8:	d0d9      	beq.n	800357e <lv_fs_open+0x22>
        lv_mem_free(file_p->file_d);
 80035ca:	6820      	ldr	r0, [r4, #0]
 80035cc:	f000 f892 	bl	80036f4 <lv_mem_free>
        file_p->file_d = NULL;
 80035d0:	2300      	movs	r3, #0
        file_p->drv    = NULL;
 80035d2:	e9c4 3300 	strd	r3, r3, [r4]
 80035d6:	e7d2      	b.n	800357e <lv_fs_open+0x22>
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 80035d8:	250b      	movs	r5, #11
 80035da:	e7d0      	b.n	800357e <lv_fs_open+0x22>
        return LV_FS_RES_NOT_IMP;
 80035dc:	2509      	movs	r5, #9
 80035de:	e7ce      	b.n	800357e <lv_fs_open+0x22>
 80035e0:	080176f4 	.word	0x080176f4
 80035e4:	08017abc 	.word	0x08017abc

080035e8 <lv_fs_get_ext>:
{
 80035e8:	b510      	push	{r4, lr}
 80035ea:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
 80035ec:	f013 f8ad 	bl	801674a <strlen>
 80035f0:	b280      	uxth	r0, r0
 80035f2:	b158      	cbz	r0, 800360c <lv_fs_get_ext+0x24>
        if(fn[i] == '.') {
 80035f4:	5c23      	ldrb	r3, [r4, r0]
 80035f6:	2b2e      	cmp	r3, #46	; 0x2e
 80035f8:	d102      	bne.n	8003600 <lv_fs_get_ext+0x18>
            return &fn[i + 1];
 80035fa:	3001      	adds	r0, #1
 80035fc:	4420      	add	r0, r4
}
 80035fe:	bd10      	pop	{r4, pc}
        } else if(fn[i] == '/' || fn[i] == '\\') {
 8003600:	2b2f      	cmp	r3, #47	; 0x2f
 8003602:	d003      	beq.n	800360c <lv_fs_get_ext+0x24>
 8003604:	2b5c      	cmp	r3, #92	; 0x5c
 8003606:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800360a:	d1f2      	bne.n	80035f2 <lv_fs_get_ext+0xa>
            return ""; /*No extension if a '\' or '/' found*/
 800360c:	4800      	ldr	r0, [pc, #0]	; (8003610 <lv_fs_get_ext+0x28>)
 800360e:	e7f6      	b.n	80035fe <lv_fs_get_ext+0x16>
 8003610:	0801ca18 	.word	0x0801ca18

08003614 <lv_log_add>:
 * @param file name of the file when the log added
 * @param line line number in the source code where the log added
 * @param dsc description of the log
 */
void lv_log_add(lv_log_level_t level, const char * file, int line, const char * dsc)
{
 8003614:	b410      	push	{r4}
    if(level >= _LV_LOG_LEVEL_NUM) return; /*Invalid level*/

    if(level >= LV_LOG_LEVEL) {
 8003616:	1e84      	subs	r4, r0, #2
 8003618:	b2e4      	uxtb	r4, r4
 800361a:	2c02      	cmp	r4, #2
 800361c:	d805      	bhi.n	800362a <lv_log_add+0x16>

#if LV_LOG_PRINTF
        static const char * lvl_prefix[] = {"Trace", "Info", "Warn", "Error"};
        printf("%s: %s \t(%s #%d)\n", lvl_prefix[level], dsc, file, line);
#else
        if(custom_print_cb) custom_print_cb(level, file, line, dsc);
 800361e:	4c04      	ldr	r4, [pc, #16]	; (8003630 <lv_log_add+0x1c>)
 8003620:	6824      	ldr	r4, [r4, #0]
 8003622:	b114      	cbz	r4, 800362a <lv_log_add+0x16>
 8003624:	46a4      	mov	ip, r4
#endif
    }
}
 8003626:	bc10      	pop	{r4}
        if(custom_print_cb) custom_print_cb(level, file, line, dsc);
 8003628:	4760      	bx	ip
}
 800362a:	bc10      	pop	{r4}
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	20020764 	.word	0x20020764

08003634 <ent_get_next>:
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
 8003634:	4b07      	ldr	r3, [pc, #28]	; (8003654 <ent_get_next+0x20>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	b150      	cbz	r0, 8003650 <ent_get_next+0x1c>
        next_e = (lv_mem_ent_t *)work_mem;
    } else { /*Get the next entry */
        uint8_t * data = &act_e->first_data;
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 800363a:	f850 2b04 	ldr.w	r2, [r0], #4

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 800363e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 8003642:	eb00 0052 	add.w	r0, r0, r2, lsr #1
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 8003646:	1d02      	adds	r2, r0, #4
 8003648:	429a      	cmp	r2, r3
 800364a:	bf28      	it	cs
 800364c:	2000      	movcs	r0, #0
 800364e:	4770      	bx	lr
        next_e = (lv_mem_ent_t *)work_mem;
 8003650:	4618      	mov	r0, r3
    }

    return next_e;
}
 8003652:	4770      	bx	lr
 8003654:	20020768 	.word	0x20020768

08003658 <lv_mem_init>:
    work_mem = (uint8_t *)work_mem_int;
 8003658:	4b03      	ldr	r3, [pc, #12]	; (8003668 <lv_mem_init+0x10>)
 800365a:	4a04      	ldr	r2, [pc, #16]	; (800366c <lv_mem_init+0x14>)
 800365c:	6013      	str	r3, [r2, #0]
    full->header.s.used = 0;
 800365e:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 8003662:	601a      	str	r2, [r3, #0]
}
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	2002076c 	.word	0x2002076c
 800366c:	20020768 	.word	0x20020768

08003670 <lv_mem_alloc>:
{
 8003670:	b538      	push	{r3, r4, r5, lr}
    if(size == 0) {
 8003672:	4605      	mov	r5, r0
 8003674:	b308      	cbz	r0, 80036ba <lv_mem_alloc+0x4a>
    if(size & 0x3) {
 8003676:	0782      	lsls	r2, r0, #30
    lv_mem_ent_t * e = NULL;
 8003678:	f04f 0400 	mov.w	r4, #0
        size = size & (~0x3);
 800367c:	bf1c      	itt	ne
 800367e:	f020 0503 	bicne.w	r5, r0, #3
        size += 4;
 8003682:	3504      	addne	r5, #4
        e = ent_get_next(e);
 8003684:	4620      	mov	r0, r4
 8003686:	f7ff ffd5 	bl	8003634 <ent_get_next>
        if(e != NULL) {
 800368a:	4604      	mov	r4, r0
 800368c:	b1b8      	cbz	r0, 80036be <lv_mem_alloc+0x4e>
static void * ent_alloc(lv_mem_ent_t * e, uint32_t size)
{
    void * alloc = NULL;

    /*If the memory is free and big enough then use it */
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 800368e:	7803      	ldrb	r3, [r0, #0]
 8003690:	07db      	lsls	r3, r3, #31
 8003692:	d4f7      	bmi.n	8003684 <lv_mem_alloc+0x14>
 8003694:	6803      	ldr	r3, [r0, #0]
 8003696:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
 800369a:	d8f3      	bhi.n	8003684 <lv_mem_alloc+0x14>
        /*Truncate the entry to the desired size */
        ent_trunc(e, size),
 800369c:	4629      	mov	r1, r5
 800369e:	f00c fe11 	bl	80102c4 <ent_trunc>

            e->header.s.used = 1;
 80036a2:	7803      	ldrb	r3, [r0, #0]
    if(alloc != NULL) memset(alloc, 0xaa, size);
 80036a4:	462a      	mov	r2, r5
 80036a6:	21aa      	movs	r1, #170	; 0xaa
            e->header.s.used = 1;
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	f804 3b04 	strb.w	r3, [r4], #4
    if(alloc != NULL) memset(alloc, 0xaa, size);
 80036b0:	4620      	mov	r0, r4
 80036b2:	f013 f887 	bl	80167c4 <memset>
}
 80036b6:	4620      	mov	r0, r4
 80036b8:	bd38      	pop	{r3, r4, r5, pc}
        return &zero_mem;
 80036ba:	4c04      	ldr	r4, [pc, #16]	; (80036cc <lv_mem_alloc+0x5c>)
 80036bc:	e7fb      	b.n	80036b6 <lv_mem_alloc+0x46>
    if(alloc == NULL) LV_LOG_WARN("Couldn't allocate memory");
 80036be:	4b04      	ldr	r3, [pc, #16]	; (80036d0 <lv_mem_alloc+0x60>)
 80036c0:	22a5      	movs	r2, #165	; 0xa5
 80036c2:	4904      	ldr	r1, [pc, #16]	; (80036d4 <lv_mem_alloc+0x64>)
 80036c4:	2002      	movs	r0, #2
 80036c6:	f7ff ffa5 	bl	8003614 <lv_log_add>
 80036ca:	e7f4      	b.n	80036b6 <lv_mem_alloc+0x46>
 80036cc:	2002876c 	.word	0x2002876c
 80036d0:	08017b1b 	.word	0x08017b1b
 80036d4:	08017b34 	.word	0x08017b34

080036d8 <lv_mem_get_size>:
    if(data == NULL) return 0;
 80036d8:	b140      	cbz	r0, 80036ec <lv_mem_get_size+0x14>
    if(data == &zero_mem) return 0;
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <lv_mem_get_size+0x18>)
 80036dc:	4298      	cmp	r0, r3
 80036de:	d004      	beq.n	80036ea <lv_mem_get_size+0x12>
    return e->header.s.d_size;
 80036e0:	f850 0c04 	ldr.w	r0, [r0, #-4]
 80036e4:	f3c0 005e 	ubfx	r0, r0, #1, #31
 80036e8:	4770      	bx	lr
    if(data == NULL) return 0;
 80036ea:	2000      	movs	r0, #0
}
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	2002876c 	.word	0x2002876c

080036f4 <lv_mem_free>:
    if(data == &zero_mem) return;
 80036f4:	4b13      	ldr	r3, [pc, #76]	; (8003744 <lv_mem_free+0x50>)
 80036f6:	4298      	cmp	r0, r3
{
 80036f8:	b510      	push	{r4, lr}
 80036fa:	4604      	mov	r4, r0
    if(data == &zero_mem) return;
 80036fc:	d011      	beq.n	8003722 <lv_mem_free+0x2e>
    if(data == NULL) return;
 80036fe:	b180      	cbz	r0, 8003722 <lv_mem_free+0x2e>
    memset((void *)data, 0xbb, lv_mem_get_size(data));
 8003700:	f7ff ffea 	bl	80036d8 <lv_mem_get_size>
 8003704:	21bb      	movs	r1, #187	; 0xbb
 8003706:	4602      	mov	r2, r0
 8003708:	4620      	mov	r0, r4
 800370a:	f013 f85b 	bl	80167c4 <memset>
    e->header.s.used = 0;
 800370e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8003712:	4620      	mov	r0, r4
 8003714:	f36f 0300 	bfc	r3, #0, #1
 8003718:	f800 3d04 	strb.w	r3, [r0, #-4]!
        e_next = ent_get_next(e_next);
 800371c:	f7ff ff8a 	bl	8003634 <ent_get_next>
    while(e_next != NULL) {
 8003720:	b900      	cbnz	r0, 8003724 <lv_mem_free+0x30>
}
 8003722:	bd10      	pop	{r4, pc}
        if(e_next->header.s.used == 0) {
 8003724:	7803      	ldrb	r3, [r0, #0]
 8003726:	07db      	lsls	r3, r3, #31
 8003728:	d4fb      	bmi.n	8003722 <lv_mem_free+0x2e>
            e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
 800372a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800372e:	6801      	ldr	r1, [r0, #0]
 8003730:	f3c3 025e 	ubfx	r2, r3, #1, #31
 8003734:	3204      	adds	r2, #4
 8003736:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 800373a:	f362 035f 	bfi	r3, r2, #1, #31
 800373e:	f844 3c04 	str.w	r3, [r4, #-4]
 8003742:	e7eb      	b.n	800371c <lv_mem_free+0x28>
 8003744:	2002876c 	.word	0x2002876c

08003748 <lv_mem_realloc>:
{
 8003748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374a:	460d      	mov	r5, r1
    if(data_p != NULL) {
 800374c:	4604      	mov	r4, r0
 800374e:	b128      	cbz	r0, 800375c <lv_mem_realloc+0x14>
        if(e->header.s.used == 0) {
 8003750:	f810 3c04 	ldrb.w	r3, [r0, #-4]
            data_p = NULL;
 8003754:	f013 0f01 	tst.w	r3, #1
 8003758:	bf08      	it	eq
 800375a:	2400      	moveq	r4, #0
    uint32_t old_size = lv_mem_get_size(data_p);
 800375c:	4620      	mov	r0, r4
 800375e:	f7ff ffbb 	bl	80036d8 <lv_mem_get_size>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 8003762:	42a8      	cmp	r0, r5
    uint32_t old_size = lv_mem_get_size(data_p);
 8003764:	4607      	mov	r7, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 8003766:	d004      	beq.n	8003772 <lv_mem_realloc+0x2a>
    if(new_size < old_size) {
 8003768:	d905      	bls.n	8003776 <lv_mem_realloc+0x2e>
        ent_trunc(e, new_size);
 800376a:	4629      	mov	r1, r5
 800376c:	1f20      	subs	r0, r4, #4
 800376e:	f00c fda9 	bl	80102c4 <ent_trunc>
        return &e->first_data;
 8003772:	4626      	mov	r6, r4
 8003774:	e010      	b.n	8003798 <lv_mem_realloc+0x50>
    new_p = lv_mem_alloc(new_size);
 8003776:	4628      	mov	r0, r5
 8003778:	f7ff ff7a 	bl	8003670 <lv_mem_alloc>
    if(new_p != NULL && data_p != NULL) {
 800377c:	4606      	mov	r6, r0
 800377e:	b168      	cbz	r0, 800379c <lv_mem_realloc+0x54>
 8003780:	b154      	cbz	r4, 8003798 <lv_mem_realloc+0x50>
        if(old_size != 0) {
 8003782:	b14f      	cbz	r7, 8003798 <lv_mem_realloc+0x50>
            memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 8003784:	42af      	cmp	r7, r5
 8003786:	463a      	mov	r2, r7
 8003788:	4621      	mov	r1, r4
 800378a:	bf28      	it	cs
 800378c:	462a      	movcs	r2, r5
 800378e:	f012 ffef 	bl	8016770 <memcpy>
            lv_mem_free(data_p);
 8003792:	4620      	mov	r0, r4
 8003794:	f7ff ffae 	bl	80036f4 <lv_mem_free>
}
 8003798:	4630      	mov	r0, r6
 800379a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(new_p == NULL) LV_LOG_WARN("Couldn't allocate memory");
 800379c:	4b03      	ldr	r3, [pc, #12]	; (80037ac <lv_mem_realloc+0x64>)
 800379e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037a2:	4903      	ldr	r1, [pc, #12]	; (80037b0 <lv_mem_realloc+0x68>)
 80037a4:	2002      	movs	r0, #2
 80037a6:	f7ff ff35 	bl	8003614 <lv_log_add>
 80037aa:	e7f5      	b.n	8003798 <lv_mem_realloc+0x50>
 80037ac:	08017b1b 	.word	0x08017b1b
 80037b0:	08017b34 	.word	0x08017b34

080037b4 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 80037b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
 80037b8:	2400      	movs	r4, #0
{
 80037ba:	4607      	mov	r7, r0
 80037bc:	460e      	mov	r6, r1
    for(i = 0; i < utf8_id; i++) {
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 80037be:	f8df 801c 	ldr.w	r8, [pc, #28]	; 80037dc <lv_txt_utf8_get_byte_id+0x28>
    for(i = 0; i < utf8_id; i++) {
 80037c2:	4625      	mov	r5, r4
 80037c4:	42b5      	cmp	r5, r6
 80037c6:	d102      	bne.n	80037ce <lv_txt_utf8_get_byte_id+0x1a>
    }

    return byte_cnt;
}
 80037c8:	4620      	mov	r0, r4
 80037ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 80037ce:	1938      	adds	r0, r7, r4
 80037d0:	f8d8 3000 	ldr.w	r3, [r8]
 80037d4:	4798      	blx	r3
    for(i = 0; i < utf8_id; i++) {
 80037d6:	3501      	adds	r5, #1
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 80037d8:	4404      	add	r4, r0
 80037da:	e7f3      	b.n	80037c4 <lv_txt_utf8_get_byte_id+0x10>
 80037dc:	2002da54 	.word	0x2002da54

080037e0 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 80037e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t i        = 0;
 80037e2:	2400      	movs	r4, #0
{
 80037e4:	4606      	mov	r6, r0
 80037e6:	460d      	mov	r5, r1
    uint32_t char_cnt = 0;

    while(i < byte_id) {
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 80037e8:	4f06      	ldr	r7, [pc, #24]	; (8003804 <lv_txt_utf8_get_char_id+0x24>)
    uint32_t i        = 0;
 80037ea:	9401      	str	r4, [sp, #4]
    while(i < byte_id) {
 80037ec:	9b01      	ldr	r3, [sp, #4]
 80037ee:	42ab      	cmp	r3, r5
 80037f0:	d302      	bcc.n	80037f8 <lv_txt_utf8_get_char_id+0x18>
        char_cnt++;
    }

    return char_cnt;
}
 80037f2:	4620      	mov	r0, r4
 80037f4:	b003      	add	sp, #12
 80037f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	a901      	add	r1, sp, #4
 80037fc:	4630      	mov	r0, r6
        char_cnt++;
 80037fe:	3401      	adds	r4, #1
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8003800:	4798      	blx	r3
        char_cnt++;
 8003802:	e7f3      	b.n	80037ec <lv_txt_utf8_get_char_id+0xc>
 8003804:	2002da4c 	.word	0x2002da4c

08003808 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 8003808:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t len = 0;
    uint32_t i   = 0;
 800380a:	2400      	movs	r4, #0
{
 800380c:	4605      	mov	r5, r0

    while(txt[i] != '\0') {
        lv_txt_encoded_next(txt, &i);
 800380e:	4e07      	ldr	r6, [pc, #28]	; (800382c <lv_txt_utf8_get_length+0x24>)
    uint32_t i   = 0;
 8003810:	9401      	str	r4, [sp, #4]
    while(txt[i] != '\0') {
 8003812:	9b01      	ldr	r3, [sp, #4]
 8003814:	5ceb      	ldrb	r3, [r5, r3]
 8003816:	b913      	cbnz	r3, 800381e <lv_txt_utf8_get_length+0x16>
        len++;
    }

    return len;
}
 8003818:	4620      	mov	r0, r4
 800381a:	b002      	add	sp, #8
 800381c:	bd70      	pop	{r4, r5, r6, pc}
        lv_txt_encoded_next(txt, &i);
 800381e:	6833      	ldr	r3, [r6, #0]
 8003820:	a901      	add	r1, sp, #4
 8003822:	4628      	mov	r0, r5
        len++;
 8003824:	3401      	adds	r4, #1
        lv_txt_encoded_next(txt, &i);
 8003826:	4798      	blx	r3
        len++;
 8003828:	e7f3      	b.n	8003812 <lv_txt_utf8_get_length+0xa>
 800382a:	bf00      	nop
 800382c:	2002da4c 	.word	0x2002da4c

08003830 <lv_txt_utf8_prev>:
    (*i)--;
 8003830:	680b      	ldr	r3, [r1, #0]
{
 8003832:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    (*i)--;
 8003834:	3b01      	subs	r3, #1
{
 8003836:	4606      	mov	r6, r0
 8003838:	460d      	mov	r5, r1
    (*i)--;
 800383a:	2404      	movs	r4, #4
        c_size = lv_txt_encoded_size(&txt[*i]);
 800383c:	4f0c      	ldr	r7, [pc, #48]	; (8003870 <lv_txt_utf8_prev+0x40>)
    (*i)--;
 800383e:	600b      	str	r3, [r1, #0]
        c_size = lv_txt_encoded_size(&txt[*i]);
 8003840:	6828      	ldr	r0, [r5, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	4430      	add	r0, r6
 8003846:	4798      	blx	r3
        if(c_size == 0) {
 8003848:	682b      	ldr	r3, [r5, #0]
 800384a:	b948      	cbnz	r0, 8003860 <lv_txt_utf8_prev+0x30>
            if(*i != 0)
 800384c:	b12b      	cbz	r3, 800385a <lv_txt_utf8_prev+0x2a>
                (*i)--;
 800384e:	3c01      	subs	r4, #1
 8003850:	3b01      	subs	r3, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8003852:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
                (*i)--;
 8003856:	602b      	str	r3, [r5, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8003858:	d1f2      	bne.n	8003840 <lv_txt_utf8_prev+0x10>
 800385a:	2000      	movs	r0, #0
}
 800385c:	b003      	add	sp, #12
 800385e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t i_tmp  = *i;
 8003860:	9301      	str	r3, [sp, #4]
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 8003862:	a901      	add	r1, sp, #4
 8003864:	4b03      	ldr	r3, [pc, #12]	; (8003874 <lv_txt_utf8_prev+0x44>)
 8003866:	4630      	mov	r0, r6
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4798      	blx	r3
    return letter;
 800386c:	e7f6      	b.n	800385c <lv_txt_utf8_prev+0x2c>
 800386e:	bf00      	nop
 8003870:	2002da54 	.word	0x2002da54
 8003874:	2002da4c 	.word	0x2002da4c

08003878 <lv_txt_get_next_line>:
{
 8003878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800387c:	b087      	sub	sp, #28
 800387e:	460d      	mov	r5, r1
 8003880:	469a      	mov	sl, r3
    if(txt == NULL) return 0;
 8003882:	4607      	mov	r7, r0
{
 8003884:	9200      	str	r2, [sp, #0]
 8003886:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
    if(txt == NULL) return 0;
 800388a:	2800      	cmp	r0, #0
 800388c:	d03d      	beq.n	800390a <lv_txt_get_next_line+0x92>
    if(font == NULL) return 0;
 800388e:	2900      	cmp	r1, #0
 8003890:	d06e      	beq.n	8003970 <lv_txt_get_next_line+0xf8>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8003892:	f01b 0f02 	tst.w	fp, #2
 8003896:	f647 4218 	movw	r2, #31768	; 0x7c18
    uint32_t i                   = 0;
 800389a:	f04f 0400 	mov.w	r4, #0
    letter_next = lv_txt_encoded_next(txt, &i_next);
 800389e:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 800397c <lv_txt_get_next_line+0x104>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80038a2:	bf18      	it	ne
 80038a4:	4692      	movne	sl, r2
    letter_next = lv_txt_encoded_next(txt, &i_next);
 80038a6:	a905      	add	r1, sp, #20
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 80038a8:	f88d 400f 	strb.w	r4, [sp, #15]
    uint32_t last_break          = NO_BREAK_FOUND;
 80038ac:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    letter_next = lv_txt_encoded_next(txt, &i_next);
 80038b0:	f8d8 2000 	ldr.w	r2, [r8]
    uint32_t i_next              = 0;
 80038b4:	e9cd 4404 	strd	r4, r4, [sp, #16]
    letter_next = lv_txt_encoded_next(txt, &i_next);
 80038b8:	4790      	blx	r2
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 80038ba:	f00b 0301 	and.w	r3, fp, #1
    letter_next = lv_txt_encoded_next(txt, &i_next);
 80038be:	4606      	mov	r6, r0
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 80038c0:	9301      	str	r3, [sp, #4]
    while(txt[i] != '\0') {
 80038c2:	9804      	ldr	r0, [sp, #16]
 80038c4:	5c3b      	ldrb	r3, [r7, r0]
 80038c6:	b90b      	cbnz	r3, 80038cc <lv_txt_get_next_line+0x54>
    return i;
 80038c8:	b280      	uxth	r0, r0
 80038ca:	e01e      	b.n	800390a <lv_txt_get_next_line+0x92>
        i           = i_next;
 80038cc:	9b05      	ldr	r3, [sp, #20]
        letter_next = lv_txt_encoded_next(txt, &i_next);
 80038ce:	a905      	add	r1, sp, #20
 80038d0:	4638      	mov	r0, r7
        i           = i_next;
 80038d2:	9304      	str	r3, [sp, #16]
        letter_next = lv_txt_encoded_next(txt, &i_next);
 80038d4:	f8d8 3000 	ldr.w	r3, [r8]
 80038d8:	4798      	blx	r3
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 80038da:	9b01      	ldr	r3, [sp, #4]
        letter_next = lv_txt_encoded_next(txt, &i_next);
 80038dc:	4683      	mov	fp, r0
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 80038de:	b923      	cbnz	r3, 80038ea <lv_txt_get_next_line+0x72>
        if(letter == '\n' || letter == '\r') {
 80038e0:	2e0a      	cmp	r6, #10
 80038e2:	d10b      	bne.n	80038fc <lv_txt_get_next_line+0x84>
                return i;
 80038e4:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80038e8:	e00f      	b.n	800390a <lv_txt_get_next_line+0x92>
            if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 80038ea:	4631      	mov	r1, r6
 80038ec:	f10d 000f 	add.w	r0, sp, #15
 80038f0:	f00c fdd2 	bl	8010498 <lv_txt_is_cmd>
 80038f4:	2800      	cmp	r0, #0
 80038f6:	d0f3      	beq.n	80038e0 <lv_txt_get_next_line+0x68>
        letter_next = lv_txt_encoded_next(txt, &i_next);
 80038f8:	465e      	mov	r6, fp
 80038fa:	e7e2      	b.n	80038c2 <lv_txt_get_next_line+0x4a>
        if(letter == '\n' || letter == '\r') {
 80038fc:	2e0d      	cmp	r6, #13
 80038fe:	d107      	bne.n	8003910 <lv_txt_get_next_line+0x98>
            if(letter == '\r' && letter_next == '\n')
 8003900:	f1bb 0f0a 	cmp.w	fp, #10
 8003904:	d1ee      	bne.n	80038e4 <lv_txt_get_next_line+0x6c>
                return i_next;
 8003906:	f8bd 0014 	ldrh.w	r0, [sp, #20]
}
 800390a:	b007      	add	sp, #28
 800390c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8003910:	465a      	mov	r2, fp
 8003912:	4631      	mov	r1, r6
 8003914:	4628      	mov	r0, r5
 8003916:	f010 fbd2 	bl	80140be <lv_font_get_glyph_width>
            cur_w += letter_w;
 800391a:	4404      	add	r4, r0
 800391c:	b224      	sxth	r4, r4
            if(cur_w > max_width) {
 800391e:	4554      	cmp	r4, sl
 8003920:	dd1a      	ble.n	8003958 <lv_txt_get_next_line+0xe0>
                if(last_break != NO_BREAK_FOUND) {
 8003922:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8003926:	d00a      	beq.n	800393e <lv_txt_get_next_line+0xc6>
                    i = last_break;
 8003928:	f8cd 9010 	str.w	r9, [sp, #16]
                if(i == 0) lv_txt_encoded_next(txt, &i);
 800392c:	9b04      	ldr	r3, [sp, #16]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1d8      	bne.n	80038e4 <lv_txt_get_next_line+0x6c>
 8003932:	f8d8 3000 	ldr.w	r3, [r8]
 8003936:	a904      	add	r1, sp, #16
 8003938:	4638      	mov	r0, r7
 800393a:	4798      	blx	r3
 800393c:	e7d2      	b.n	80038e4 <lv_txt_get_next_line+0x6c>
                    lv_txt_encoded_prev(txt, &i);
 800393e:	4b0d      	ldr	r3, [pc, #52]	; (8003974 <lv_txt_get_next_line+0xfc>)
 8003940:	a904      	add	r1, sp, #16
 8003942:	4638      	mov	r0, r7
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4798      	blx	r3
 8003948:	e7f0      	b.n	800392c <lv_txt_get_next_line+0xb4>
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 800394a:	428e      	cmp	r6, r1
 800394c:	f102 0201 	add.w	r2, r2, #1
 8003950:	d103      	bne.n	800395a <lv_txt_get_next_line+0xe2>
                last_break = i; /*Save the first char index after break*/
 8003952:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8003956:	e005      	b.n	8003964 <lv_txt_get_next_line+0xec>
            if(cur_w > max_width) {
 8003958:	2200      	movs	r2, #0
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 800395a:	b2d1      	uxtb	r1, r2
 800395c:	4b06      	ldr	r3, [pc, #24]	; (8003978 <lv_txt_get_next_line+0x100>)
 800395e:	5c59      	ldrb	r1, [r3, r1]
 8003960:	2900      	cmp	r1, #0
 8003962:	d1f2      	bne.n	800394a <lv_txt_get_next_line+0xd2>
        if(letter_w > 0) {
 8003964:	2800      	cmp	r0, #0
 8003966:	d0c7      	beq.n	80038f8 <lv_txt_get_next_line+0x80>
            cur_w += letter_space;
 8003968:	9b00      	ldr	r3, [sp, #0]
 800396a:	441c      	add	r4, r3
 800396c:	b224      	sxth	r4, r4
 800396e:	e7c3      	b.n	80038f8 <lv_txt_get_next_line+0x80>
    if(txt == NULL) return 0;
 8003970:	4608      	mov	r0, r1
 8003972:	e7ca      	b.n	800390a <lv_txt_get_next_line+0x92>
 8003974:	2002da50 	.word	0x2002da50
 8003978:	08017b94 	.word	0x08017b94
 800397c:	2002da4c 	.word	0x2002da4c

08003980 <lv_txt_get_width>:
{
 8003980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003984:	4688      	mov	r8, r1
 8003986:	b085      	sub	sp, #20
 8003988:	4617      	mov	r7, r2
 800398a:	461e      	mov	r6, r3
    if(txt == NULL) return 0;
 800398c:	4605      	mov	r5, r0
 800398e:	2400      	movs	r4, #0
 8003990:	2800      	cmp	r0, #0
 8003992:	d03f      	beq.n	8003a14 <lv_txt_get_width+0x94>
    if(font == NULL) return 0;
 8003994:	2a00      	cmp	r2, #0
 8003996:	d03f      	beq.n	8003a18 <lv_txt_get_width+0x98>
    uint32_t i                   = 0;
 8003998:	9403      	str	r4, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800399a:	f88d 400b 	strb.w	r4, [sp, #11]
    if(length != 0) {
 800399e:	2900      	cmp	r1, #0
 80039a0:	d036      	beq.n	8003a10 <lv_txt_get_width+0x90>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 80039a2:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
            letter      = lv_txt_encoded_next(txt, &i);
 80039a6:	f8df a074 	ldr.w	sl, [pc, #116]	; 8003a1c <lv_txt_get_width+0x9c>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 80039aa:	f009 0901 	and.w	r9, r9, #1
            letter      = lv_txt_encoded_next(txt, &i);
 80039ae:	f8da 3000 	ldr.w	r3, [sl]
 80039b2:	a903      	add	r1, sp, #12
 80039b4:	4628      	mov	r0, r5
 80039b6:	4798      	blx	r3
 80039b8:	4683      	mov	fp, r0
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 80039ba:	9803      	ldr	r0, [sp, #12]
 80039bc:	2100      	movs	r1, #0
 80039be:	f8da 3000 	ldr.w	r3, [sl]
 80039c2:	4428      	add	r0, r5
 80039c4:	4798      	blx	r3
 80039c6:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 80039c8:	f1b9 0f00 	cmp.w	r9, #0
 80039cc:	d111      	bne.n	80039f2 <lv_txt_get_width+0x72>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 80039ce:	4659      	mov	r1, fp
 80039d0:	4638      	mov	r0, r7
 80039d2:	f010 fb74 	bl	80140be <lv_font_get_glyph_width>
 80039d6:	b200      	sxth	r0, r0
            if(char_width > 0) {
 80039d8:	2800      	cmp	r0, #0
 80039da:	dc14      	bgt.n	8003a06 <lv_txt_get_width+0x86>
        while(i < length) {
 80039dc:	9b03      	ldr	r3, [sp, #12]
 80039de:	4598      	cmp	r8, r3
 80039e0:	d8e5      	bhi.n	80039ae <lv_txt_get_width+0x2e>
        if(width > 0) {
 80039e2:	2c00      	cmp	r4, #0
 80039e4:	dd01      	ble.n	80039ea <lv_txt_get_width+0x6a>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 80039e6:	1ba4      	subs	r4, r4, r6
 80039e8:	b224      	sxth	r4, r4
}
 80039ea:	4620      	mov	r0, r4
 80039ec:	b005      	add	sp, #20
 80039ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039f2:	9001      	str	r0, [sp, #4]
                if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 80039f4:	4659      	mov	r1, fp
 80039f6:	f10d 000b 	add.w	r0, sp, #11
 80039fa:	f00c fd4d 	bl	8010498 <lv_txt_is_cmd>
 80039fe:	9a01      	ldr	r2, [sp, #4]
 8003a00:	2800      	cmp	r0, #0
 8003a02:	d0e4      	beq.n	80039ce <lv_txt_get_width+0x4e>
 8003a04:	e7ea      	b.n	80039dc <lv_txt_get_width+0x5c>
                width += letter_space;
 8003a06:	19a3      	adds	r3, r4, r6
 8003a08:	fa00 f483 	sxtah	r4, r0, r3
 8003a0c:	b224      	sxth	r4, r4
 8003a0e:	e7e5      	b.n	80039dc <lv_txt_get_width+0x5c>
    lv_coord_t width             = 0;
 8003a10:	460c      	mov	r4, r1
 8003a12:	e7ea      	b.n	80039ea <lv_txt_get_width+0x6a>
    if(txt == NULL) return 0;
 8003a14:	4604      	mov	r4, r0
 8003a16:	e7e8      	b.n	80039ea <lv_txt_get_width+0x6a>
 8003a18:	4614      	mov	r4, r2
 8003a1a:	e7e6      	b.n	80039ea <lv_txt_get_width+0x6a>
 8003a1c:	2002da4c 	.word	0x2002da4c

08003a20 <lv_txt_ins>:
{
 8003a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a24:	4617      	mov	r7, r2
 8003a26:	4605      	mov	r5, r0
 8003a28:	4688      	mov	r8, r1
    uint32_t old_len = strlen(txt_buf);
 8003a2a:	f012 fe8e 	bl	801674a <strlen>
 8003a2e:	4604      	mov	r4, r0
    uint32_t ins_len = strlen(ins_txt);
 8003a30:	4638      	mov	r0, r7
 8003a32:	f012 fe8a 	bl	801674a <strlen>
    pos              = lv_txt_encoded_get_byte_id(txt_buf, pos); /*Convert to byte index instead of letter index*/
 8003a36:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <lv_txt_ins+0x44>)
    uint32_t ins_len = strlen(ins_txt);
 8003a38:	4606      	mov	r6, r0
    uint32_t new_len = ins_len + old_len;
 8003a3a:	4404      	add	r4, r0
    pos              = lv_txt_encoded_get_byte_id(txt_buf, pos); /*Convert to byte index instead of letter index*/
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4641      	mov	r1, r8
 8003a40:	4628      	mov	r0, r5
 8003a42:	4798      	blx	r3
        txt_buf[i] = txt_buf[i - ins_len];
 8003a44:	1baa      	subs	r2, r5, r6
    for(i = new_len; i >= pos + ins_len; i--) {
 8003a46:	1833      	adds	r3, r6, r0
 8003a48:	42a3      	cmp	r3, r4
 8003a4a:	d906      	bls.n	8003a5a <lv_txt_ins+0x3a>
    memcpy(txt_buf + pos, ins_txt, ins_len);
 8003a4c:	4632      	mov	r2, r6
 8003a4e:	4639      	mov	r1, r7
 8003a50:	4428      	add	r0, r5
}
 8003a52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    memcpy(txt_buf + pos, ins_txt, ins_len);
 8003a56:	f012 be8b 	b.w	8016770 <memcpy>
        txt_buf[i] = txt_buf[i - ins_len];
 8003a5a:	5d11      	ldrb	r1, [r2, r4]
 8003a5c:	5529      	strb	r1, [r5, r4]
    for(i = new_len; i >= pos + ins_len; i--) {
 8003a5e:	3c01      	subs	r4, #1
 8003a60:	e7f2      	b.n	8003a48 <lv_txt_ins+0x28>
 8003a62:	bf00      	nop
 8003a64:	2002da48 	.word	0x2002da48

08003a68 <lv_txt_cut>:
{
 8003a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a6c:	4606      	mov	r6, r0
 8003a6e:	460c      	mov	r4, r1
    pos = lv_txt_encoded_get_byte_id(txt, pos); /*Convert to byte index instead of letter index*/
 8003a70:	4f0c      	ldr	r7, [pc, #48]	; (8003aa4 <lv_txt_cut+0x3c>)
{
 8003a72:	4690      	mov	r8, r2
    uint32_t old_len = strlen(txt);
 8003a74:	f012 fe69 	bl	801674a <strlen>
    pos = lv_txt_encoded_get_byte_id(txt, pos); /*Convert to byte index instead of letter index*/
 8003a78:	4621      	mov	r1, r4
    uint32_t old_len = strlen(txt);
 8003a7a:	4605      	mov	r5, r0
    pos = lv_txt_encoded_get_byte_id(txt, pos); /*Convert to byte index instead of letter index*/
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	4630      	mov	r0, r6
 8003a80:	4798      	blx	r3
    len = lv_txt_encoded_get_byte_id(&txt[pos], len);
 8003a82:	1834      	adds	r4, r6, r0
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	4641      	mov	r1, r8
 8003a88:	4620      	mov	r0, r4
 8003a8a:	4798      	blx	r3
    for(i = pos; i <= old_len - len; i++) {
 8003a8c:	4623      	mov	r3, r4
 8003a8e:	1a2d      	subs	r5, r5, r0
 8003a90:	1b9a      	subs	r2, r3, r6
 8003a92:	4295      	cmp	r5, r2
 8003a94:	d201      	bcs.n	8003a9a <lv_txt_cut+0x32>
}
 8003a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        txt[i] = txt[i + len];
 8003a9a:	5c1a      	ldrb	r2, [r3, r0]
 8003a9c:	f803 2b01 	strb.w	r2, [r3], #1
 8003aa0:	e7f6      	b.n	8003a90 <lv_txt_cut+0x28>
 8003aa2:	bf00      	nop
 8003aa4:	2002da48 	.word	0x2002da48

08003aa8 <anim_task>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_task(lv_task_t * param)
{
 8003aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    (void)param;

    lv_anim_t * a;
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 8003aac:	4c42      	ldr	r4, [pc, #264]	; (8003bb8 <anim_task+0x110>)
{
 8003aae:	b08a      	sub	sp, #40	; 0x28
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 8003ab0:	4841      	ldr	r0, [pc, #260]	; (8003bb8 <anim_task+0x110>)
 8003ab2:	f00c faf5 	bl	80100a0 <lv_ll_get_head>
 8003ab6:	b988      	cbnz	r0, 8003adc <anim_task+0x34>
    {
        a->has_run = 0;
    }

    uint32_t elaps = lv_tick_elaps(last_task_run);
 8003ab8:	4d40      	ldr	r5, [pc, #256]	; (8003bbc <anim_task+0x114>)
    while(a != NULL) {
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_ready_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        anim_list_changed = false;
 8003aba:	4f41      	ldr	r7, [pc, #260]	; (8003bc0 <anim_task+0x118>)
    uint32_t elaps = lv_tick_elaps(last_task_run);
 8003abc:	6828      	ldr	r0, [r5, #0]
 8003abe:	f00b f973 	bl	800eda8 <lv_tick_elaps>
 8003ac2:	4680      	mov	r8, r0
    a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8003ac4:	483c      	ldr	r0, [pc, #240]	; (8003bb8 <anim_task+0x110>)
 8003ac6:	f00c faeb 	bl	80100a0 <lv_ll_get_head>
        /* If the linked list changed due to anim. delete then it's not safe to continue
         * the reading of the list from here -> start from the head*/
        if(anim_list_changed)
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
        else
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8003aca:	4e3b      	ldr	r6, [pc, #236]	; (8003bb8 <anim_task+0x110>)
    a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8003acc:	4604      	mov	r4, r0
    while(a != NULL) {
 8003ace:	b984      	cbnz	r4, 8003af2 <anim_task+0x4a>
    }

    last_task_run = lv_tick_get();
 8003ad0:	f7fe fe26 	bl	8002720 <lv_tick_get>
 8003ad4:	6028      	str	r0, [r5, #0]
}
 8003ad6:	b00a      	add	sp, #40	; 0x28
 8003ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        a->has_run = 0;
 8003adc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 8003ae0:	4601      	mov	r1, r0
        a->has_run = 0;
 8003ae2:	f36f 03c3 	bfc	r3, #3, #1
 8003ae6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 8003aea:	4620      	mov	r0, r4
 8003aec:	f00c fade 	bl	80100ac <lv_ll_get_next>
 8003af0:	e7e1      	b.n	8003ab6 <anim_task+0xe>
        anim_list_changed = false;
 8003af2:	2300      	movs	r3, #0
 8003af4:	703b      	strb	r3, [r7, #0]
        if(!a->has_run) {
 8003af6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003afa:	0718      	lsls	r0, r3, #28
 8003afc:	d457      	bmi.n	8003bae <anim_task+0x106>
            a->has_run = 1; /*The list readying might be reseted so need to know which anim has run already*/
 8003afe:	f043 0308 	orr.w	r3, r3, #8
 8003b02:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
            a->act_time += elaps;
 8003b06:	8b63      	ldrh	r3, [r4, #26]
 8003b08:	4443      	add	r3, r8
 8003b0a:	b21b      	sxth	r3, r3
            if(a->act_time >= 0) {
 8003b0c:	2b00      	cmp	r3, #0
            a->act_time += elaps;
 8003b0e:	8363      	strh	r3, [r4, #26]
            if(a->act_time >= 0) {
 8003b10:	db4d      	blt.n	8003bae <anim_task+0x106>
                if(a->act_time > a->time) a->act_time = a->time;
 8003b12:	8b22      	ldrh	r2, [r4, #24]
                new_value = a->path_cb(a);
 8003b14:	4620      	mov	r0, r4
                if(a->act_time > a->time) a->act_time = a->time;
 8003b16:	4293      	cmp	r3, r2
                new_value = a->path_cb(a);
 8003b18:	68a3      	ldr	r3, [r4, #8]
                if(a->act_time > a->time) a->act_time = a->time;
 8003b1a:	bfc8      	it	gt
 8003b1c:	8362      	strhgt	r2, [r4, #26]
                new_value = a->path_cb(a);
 8003b1e:	4798      	blx	r3
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 8003b20:	6863      	ldr	r3, [r4, #4]
                new_value = a->path_cb(a);
 8003b22:	4601      	mov	r1, r0
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 8003b24:	b10b      	cbz	r3, 8003b2a <anim_task+0x82>
 8003b26:	6820      	ldr	r0, [r4, #0]
 8003b28:	4798      	blx	r3
                if(a->act_time >= a->time) {
 8003b2a:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 8003b2e:	8b23      	ldrh	r3, [r4, #24]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	db19      	blt.n	8003b68 <anim_task+0xc0>
{

    /*Delete the animation if
     * - no repeat and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready */
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 8003b34:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003b38:	0799      	lsls	r1, r3, #30
 8003b3a:	d003      	beq.n	8003b44 <anim_task+0x9c>
 8003b3c:	f003 0207 	and.w	r2, r3, #7
 8003b40:	2a05      	cmp	r2, #5
 8003b42:	d118      	bne.n	8003b76 <anim_task+0xce>

        /*Create copy from the animation and delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        lv_anim_t a_tmp;
        memcpy(&a_tmp, a, sizeof(lv_anim_t));
 8003b44:	2228      	movs	r2, #40	; 0x28
 8003b46:	4621      	mov	r1, r4
 8003b48:	4668      	mov	r0, sp
 8003b4a:	f012 fe11 	bl	8016770 <memcpy>
        lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 8003b4e:	4621      	mov	r1, r4
 8003b50:	4630      	mov	r0, r6
 8003b52:	f00c fafb 	bl	801014c <lv_ll_rem>
        lv_mem_free(a);
 8003b56:	4620      	mov	r0, r4
 8003b58:	f7ff fdcc 	bl	80036f4 <lv_mem_free>
        anim_list_changed = true;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	703b      	strb	r3, [r7, #0]

        /* Call the callback function at the end*/
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
 8003b60:	9b03      	ldr	r3, [sp, #12]
 8003b62:	b10b      	cbz	r3, 8003b68 <anim_task+0xc0>
 8003b64:	4668      	mov	r0, sp
 8003b66:	4798      	blx	r3
        if(anim_list_changed)
 8003b68:	783b      	ldrb	r3, [r7, #0]
 8003b6a:	b303      	cbz	r3, 8003bae <anim_task+0x106>
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8003b6c:	4630      	mov	r0, r6
 8003b6e:	f00c fa97 	bl	80100a0 <lv_ll_get_head>
 8003b72:	4604      	mov	r4, r0
 8003b74:	e7ab      	b.n	8003ace <anim_task+0x26>
    }
    /*If the animation is not deleted then restart it*/
    else {
        a->act_time = -a->repeat_pause; /*Restart the animation*/
 8003b76:	8be2      	ldrh	r2, [r4, #30]
 8003b78:	4252      	negs	r2, r2
 8003b7a:	8362      	strh	r2, [r4, #26]
        /*Swap the start and end values in play back mode*/
        if(a->playback != 0) {
 8003b7c:	07da      	lsls	r2, r3, #31
 8003b7e:	d5f3      	bpl.n	8003b68 <anim_task+0xc0>
            /*If now turning back use the 'playback_pause*/
            if(a->playback_now == 0) a->act_time = -a->playback_pause;
 8003b80:	f013 0304 	ands.w	r3, r3, #4
 8003b84:	bf08      	it	eq
 8003b86:	8ba2      	ldrheq	r2, [r4, #28]

            /*Toggle the play back state*/
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8003b88:	fab3 f383 	clz	r3, r3
            if(a->playback_now == 0) a->act_time = -a->playback_pause;
 8003b8c:	bf08      	it	eq
 8003b8e:	4252      	negeq	r2, r2
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8003b90:	ea4f 1353 	mov.w	r3, r3, lsr #5
            if(a->playback_now == 0) a->act_time = -a->playback_pause;
 8003b94:	bf08      	it	eq
 8003b96:	8362      	strheq	r2, [r4, #26]
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8003b98:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8003b9c:	f363 0282 	bfi	r2, r3, #2, #1
 8003ba0:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
            /*Swap the start and end values*/
            int32_t tmp;
            tmp      = a->start;
            a->start = a->end;
 8003ba4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
            a->end   = tmp;
 8003ba8:	e9c4 2304 	strd	r2, r3, [r4, #16]
 8003bac:	e7dc      	b.n	8003b68 <anim_task+0xc0>
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8003bae:	4621      	mov	r1, r4
 8003bb0:	4630      	mov	r0, r6
 8003bb2:	f00c fa7b 	bl	80100ac <lv_ll_get_next>
 8003bb6:	e7dc      	b.n	8003b72 <anim_task+0xca>
 8003bb8:	20020704 	.word	0x20020704
 8003bbc:	20028770 	.word	0x20028770
 8003bc0:	2002ccdb 	.word	0x2002ccdb

08003bc4 <lv_anim_core_init>:
{
 8003bc4:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 8003bc6:	2128      	movs	r1, #40	; 0x28
 8003bc8:	4807      	ldr	r0, [pc, #28]	; (8003be8 <lv_anim_core_init+0x24>)
 8003bca:	f00c fa23 	bl	8010014 <lv_ll_init>
    last_task_run = lv_tick_get();
 8003bce:	f7fe fda7 	bl	8002720 <lv_tick_get>
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <lv_anim_core_init+0x28>)
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 8003bd4:	2203      	movs	r2, #3
 8003bd6:	211e      	movs	r1, #30
    last_task_run = lv_tick_get();
 8003bd8:	6018      	str	r0, [r3, #0]
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 8003bda:	2300      	movs	r3, #0
 8003bdc:	4804      	ldr	r0, [pc, #16]	; (8003bf0 <lv_anim_core_init+0x2c>)
}
 8003bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 8003be2:	f000 b9b3 	b.w	8003f4c <lv_task_create>
 8003be6:	bf00      	nop
 8003be8:	20020704 	.word	0x20020704
 8003bec:	20028770 	.word	0x20028770
 8003bf0:	08003aa9 	.word	0x08003aa9

08003bf4 <lv_anim_del>:
{
 8003bf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf8:	4680      	mov	r8, r0
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8003bfa:	4813      	ldr	r0, [pc, #76]	; (8003c48 <lv_anim_del+0x54>)
{
 8003bfc:	460e      	mov	r6, r1
    bool del = false;
 8003bfe:	2500      	movs	r5, #0
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8003c00:	f00c fa4e 	bl	80100a0 <lv_ll_get_head>
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8003c04:	4f10      	ldr	r7, [pc, #64]	; (8003c48 <lv_anim_del+0x54>)
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8003c06:	4604      	mov	r4, r0
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
 8003c08:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8003c4c <lv_anim_del+0x58>
 8003c0c:	f04f 0a01 	mov.w	sl, #1
    while(a != NULL) {
 8003c10:	b914      	cbnz	r4, 8003c18 <lv_anim_del+0x24>
}
 8003c12:	4628      	mov	r0, r5
 8003c14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8003c18:	4621      	mov	r1, r4
 8003c1a:	4638      	mov	r0, r7
 8003c1c:	f00c fa46 	bl	80100ac <lv_ll_get_next>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8003c20:	6823      	ldr	r3, [r4, #0]
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8003c22:	4683      	mov	fp, r0
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8003c24:	4543      	cmp	r3, r8
 8003c26:	d10d      	bne.n	8003c44 <lv_anim_del+0x50>
 8003c28:	6863      	ldr	r3, [r4, #4]
 8003c2a:	42b3      	cmp	r3, r6
 8003c2c:	d000      	beq.n	8003c30 <lv_anim_del+0x3c>
 8003c2e:	b94e      	cbnz	r6, 8003c44 <lv_anim_del+0x50>
            lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 8003c30:	4621      	mov	r1, r4
 8003c32:	4638      	mov	r0, r7
            del = true;
 8003c34:	2501      	movs	r5, #1
            lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 8003c36:	f00c fa89 	bl	801014c <lv_ll_rem>
            lv_mem_free(a);
 8003c3a:	4620      	mov	r0, r4
 8003c3c:	f7ff fd5a 	bl	80036f4 <lv_mem_free>
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
 8003c40:	f889 a000 	strb.w	sl, [r9]
            del = true;
 8003c44:	465c      	mov	r4, fp
 8003c46:	e7e3      	b.n	8003c10 <lv_anim_del+0x1c>
 8003c48:	20020704 	.word	0x20020704
 8003c4c:	2002ccdb 	.word	0x2002ccdb

08003c50 <lv_anim_create>:
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 8003c50:	6841      	ldr	r1, [r0, #4]
{
 8003c52:	b538      	push	{r3, r4, r5, lr}
 8003c54:	4604      	mov	r4, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 8003c56:	b111      	cbz	r1, 8003c5e <lv_anim_create+0xe>
 8003c58:	6800      	ldr	r0, [r0, #0]
 8003c5a:	f7ff ffcb 	bl	8003bf4 <lv_anim_del>
    lv_anim_t * new_anim = lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 8003c5e:	4810      	ldr	r0, [pc, #64]	; (8003ca0 <lv_anim_create+0x50>)
 8003c60:	f00c f9e2 	bl	8010028 <lv_ll_ins_head>
    lv_mem_assert(new_anim);
 8003c64:	4605      	mov	r5, r0
 8003c66:	b930      	cbnz	r0, 8003c76 <lv_anim_create+0x26>
 8003c68:	4b0e      	ldr	r3, [pc, #56]	; (8003ca4 <lv_anim_create+0x54>)
 8003c6a:	225c      	movs	r2, #92	; 0x5c
 8003c6c:	490e      	ldr	r1, [pc, #56]	; (8003ca8 <lv_anim_create+0x58>)
 8003c6e:	2003      	movs	r0, #3
 8003c70:	f7ff fcd0 	bl	8003614 <lv_log_add>
 8003c74:	e7fe      	b.n	8003c74 <lv_anim_create+0x24>
    a->playback_now = 0;
 8003c76:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    memcpy(new_anim, a, sizeof(lv_anim_t));
 8003c7a:	2228      	movs	r2, #40	; 0x28
 8003c7c:	4621      	mov	r1, r4
    a->playback_now = 0;
 8003c7e:	f36f 0382 	bfc	r3, #2, #1
 8003c82:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    memcpy(new_anim, a, sizeof(lv_anim_t));
 8003c86:	f012 fd73 	bl	8016770 <memcpy>
    if(new_anim->exec_cb) new_anim->exec_cb(new_anim->var, new_anim->start);
 8003c8a:	686b      	ldr	r3, [r5, #4]
 8003c8c:	b11b      	cbz	r3, 8003c96 <lv_anim_create+0x46>
 8003c8e:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
 8003c92:	6828      	ldr	r0, [r5, #0]
 8003c94:	4798      	blx	r3
    anim_list_changed = true;
 8003c96:	4b05      	ldr	r3, [pc, #20]	; (8003cac <lv_anim_create+0x5c>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	701a      	strb	r2, [r3, #0]
}
 8003c9c:	bd38      	pop	{r3, r4, r5, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20020704 	.word	0x20020704
 8003ca4:	080176f4 	.word	0x080176f4
 8003ca8:	08017b9c 	.word	0x08017b9c
 8003cac:	2002ccdb 	.word	0x2002ccdb

08003cb0 <lv_task_core_init>:

/**
 * Init the lv_task module
 */
void lv_task_core_init(void)
{
 8003cb0:	b508      	push	{r3, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 8003cb2:	2114      	movs	r1, #20
 8003cb4:	4803      	ldr	r0, [pc, #12]	; (8003cc4 <lv_task_core_init+0x14>)
 8003cb6:	f00c f9ad 	bl	8010014 <lv_ll_init>
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
 8003cba:	4b03      	ldr	r3, [pc, #12]	; (8003cc8 <lv_task_core_init+0x18>)
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	701a      	strb	r2, [r3, #0]
}
 8003cc0:	bd08      	pop	{r3, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20020758 	.word	0x20020758
 8003cc8:	2002ccdd 	.word	0x2002ccdd

08003ccc <lv_task_create_basic>:
{
 8003ccc:	b538      	push	{r3, r4, r5, lr}
    tmp = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 8003cce:	4824      	ldr	r0, [pc, #144]	; (8003d60 <lv_task_create_basic+0x94>)
 8003cd0:	f00c f9e6 	bl	80100a0 <lv_ll_get_head>
    if(NULL == tmp) {
 8003cd4:	4601      	mov	r1, r0
 8003cd6:	b188      	cbz	r0, 8003cfc <lv_task_create_basic+0x30>
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 8003cd8:	4c21      	ldr	r4, [pc, #132]	; (8003d60 <lv_task_create_basic+0x94>)
            if(tmp->prio <= DEF_PRIO) {
 8003cda:	7c0b      	ldrb	r3, [r1, #16]
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d817      	bhi.n	8003d14 <lv_task_create_basic+0x48>
                new_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 8003ce4:	481e      	ldr	r0, [pc, #120]	; (8003d60 <lv_task_create_basic+0x94>)
 8003ce6:	f00c fa00 	bl	80100ea <lv_ll_ins_prev>
                lv_mem_assert(new_task);
 8003cea:	4604      	mov	r4, r0
 8003cec:	b9e8      	cbnz	r0, 8003d2a <lv_task_create_basic+0x5e>
 8003cee:	4b1d      	ldr	r3, [pc, #116]	; (8003d64 <lv_task_create_basic+0x98>)
 8003cf0:	22b8      	movs	r2, #184	; 0xb8
 8003cf2:	491d      	ldr	r1, [pc, #116]	; (8003d68 <lv_task_create_basic+0x9c>)
 8003cf4:	2003      	movs	r0, #3
 8003cf6:	f7ff fc8d 	bl	8003614 <lv_log_add>
 8003cfa:	e7fe      	b.n	8003cfa <lv_task_create_basic+0x2e>
        new_task = lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 8003cfc:	4818      	ldr	r0, [pc, #96]	; (8003d60 <lv_task_create_basic+0x94>)
 8003cfe:	f00c f993 	bl	8010028 <lv_ll_ins_head>
        lv_mem_assert(new_task);
 8003d02:	4604      	mov	r4, r0
 8003d04:	b988      	cbnz	r0, 8003d2a <lv_task_create_basic+0x5e>
 8003d06:	4b17      	ldr	r3, [pc, #92]	; (8003d64 <lv_task_create_basic+0x98>)
 8003d08:	22b0      	movs	r2, #176	; 0xb0
 8003d0a:	4917      	ldr	r1, [pc, #92]	; (8003d68 <lv_task_create_basic+0x9c>)
 8003d0c:	2003      	movs	r0, #3
 8003d0e:	f7ff fc81 	bl	8003614 <lv_log_add>
 8003d12:	e7fe      	b.n	8003d12 <lv_task_create_basic+0x46>
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 8003d14:	4620      	mov	r0, r4
 8003d16:	f00c f9c9 	bl	80100ac <lv_ll_get_next>
        } while(tmp != NULL);
 8003d1a:	4601      	mov	r1, r0
 8003d1c:	2800      	cmp	r0, #0
 8003d1e:	d1dc      	bne.n	8003cda <lv_task_create_basic+0xe>
            new_task = lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 8003d20:	480f      	ldr	r0, [pc, #60]	; (8003d60 <lv_task_create_basic+0x94>)
 8003d22:	f00c f99f 	bl	8010064 <lv_ll_ins_tail>
            lv_mem_assert(new_task);
 8003d26:	4604      	mov	r4, r0
 8003d28:	b198      	cbz	r0, 8003d52 <lv_task_create_basic+0x86>
    new_task->period  = DEF_PERIOD;
 8003d2a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    new_task->task_cb = NULL;
 8003d2e:	2500      	movs	r5, #0
    new_task->period  = DEF_PERIOD;
 8003d30:	6023      	str	r3, [r4, #0]
    new_task->prio    = DEF_PRIO;
 8003d32:	7c23      	ldrb	r3, [r4, #16]
    new_task->task_cb = NULL;
 8003d34:	60a5      	str	r5, [r4, #8]
    new_task->prio    = DEF_PRIO;
 8003d36:	f023 030f 	bic.w	r3, r3, #15
 8003d3a:	f043 0303 	orr.w	r3, r3, #3
 8003d3e:	7423      	strb	r3, [r4, #16]
    new_task->last_run = lv_tick_get();
 8003d40:	f7fe fcee 	bl	8002720 <lv_tick_get>
    task_created = true;
 8003d44:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <lv_task_create_basic+0xa0>)
 8003d46:	2201      	movs	r2, #1
    new_task->last_run = lv_tick_get();
 8003d48:	6060      	str	r0, [r4, #4]
    new_task->user_data = NULL;
 8003d4a:	60e5      	str	r5, [r4, #12]
}
 8003d4c:	4620      	mov	r0, r4
    task_created = true;
 8003d4e:	701a      	strb	r2, [r3, #0]
}
 8003d50:	bd38      	pop	{r3, r4, r5, pc}
            lv_mem_assert(new_task);
 8003d52:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <lv_task_create_basic+0x98>)
 8003d54:	22c2      	movs	r2, #194	; 0xc2
 8003d56:	4904      	ldr	r1, [pc, #16]	; (8003d68 <lv_task_create_basic+0x9c>)
 8003d58:	2003      	movs	r0, #3
 8003d5a:	f7ff fc5b 	bl	8003614 <lv_log_add>
 8003d5e:	e7fe      	b.n	8003d5e <lv_task_create_basic+0x92>
 8003d60:	20020758 	.word	0x20020758
 8003d64:	080176f4 	.word	0x080176f4
 8003d68:	08017bfd 	.word	0x08017bfd
 8003d6c:	2002ccde 	.word	0x2002ccde

08003d70 <lv_task_del>:
{
 8003d70:	b510      	push	{r4, lr}
 8003d72:	4604      	mov	r4, r0
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
 8003d74:	4601      	mov	r1, r0
 8003d76:	4807      	ldr	r0, [pc, #28]	; (8003d94 <lv_task_del+0x24>)
 8003d78:	f00c f9e8 	bl	801014c <lv_ll_rem>
    lv_mem_free(task);
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	f7ff fcb9 	bl	80036f4 <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
 8003d82:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <lv_task_del+0x28>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	42a3      	cmp	r3, r4
 8003d88:	bf02      	ittt	eq
 8003d8a:	4b04      	ldreq	r3, [pc, #16]	; (8003d9c <lv_task_del+0x2c>)
 8003d8c:	2201      	moveq	r2, #1
 8003d8e:	701a      	strbeq	r2, [r3, #0]
}
 8003d90:	bd10      	pop	{r4, pc}
 8003d92:	bf00      	nop
 8003d94:	20020758 	.word	0x20020758
 8003d98:	20020754 	.word	0x20020754
 8003d9c:	2002ccdf 	.word	0x2002ccdf

08003da0 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
 8003da0:	b538      	push	{r3, r4, r5, lr}
 8003da2:	4604      	mov	r4, r0
    bool exec = false;

    /*Execute if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
 8003da4:	6840      	ldr	r0, [r0, #4]
 8003da6:	f00a ffff 	bl	800eda8 <lv_tick_elaps>
    if(elp >= task->period) {
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	4283      	cmp	r3, r0
 8003dae:	d817      	bhi.n	8003de0 <lv_task_exec+0x40>
        task->last_run = lv_tick_get();
 8003db0:	f7fe fcb6 	bl	8002720 <lv_tick_get>
        task_deleted   = false;
 8003db4:	4d0b      	ldr	r5, [pc, #44]	; (8003de4 <lv_task_exec+0x44>)
 8003db6:	2300      	movs	r3, #0
        task_created   = false;
 8003db8:	4a0b      	ldr	r2, [pc, #44]	; (8003de8 <lv_task_exec+0x48>)
        task->last_run = lv_tick_get();
 8003dba:	6060      	str	r0, [r4, #4]
        task_deleted   = false;
 8003dbc:	702b      	strb	r3, [r5, #0]
        task_created   = false;
 8003dbe:	7013      	strb	r3, [r2, #0]
        if(task->task_cb) task->task_cb(task);
 8003dc0:	68a3      	ldr	r3, [r4, #8]
 8003dc2:	b933      	cbnz	r3, 8003dd2 <lv_task_exec+0x32>

        /*Delete if it was a one shot lv_task*/
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
            if(task->once != 0) {
 8003dc4:	7c23      	ldrb	r3, [r4, #16]
 8003dc6:	071b      	lsls	r3, r3, #28
 8003dc8:	d508      	bpl.n	8003ddc <lv_task_exec+0x3c>
                lv_task_del(task);
 8003dca:	4620      	mov	r0, r4
 8003dcc:	f7ff ffd0 	bl	8003d70 <lv_task_del>
 8003dd0:	e004      	b.n	8003ddc <lv_task_exec+0x3c>
        if(task->task_cb) task->task_cb(task);
 8003dd2:	4620      	mov	r0, r4
 8003dd4:	4798      	blx	r3
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
 8003dd6:	782b      	ldrb	r3, [r5, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0f3      	beq.n	8003dc4 <lv_task_exec+0x24>
                lv_task_del(task);
 8003ddc:	2001      	movs	r0, #1
        }
        exec = true;
    }

    return exec;
}
 8003dde:	bd38      	pop	{r3, r4, r5, pc}
    bool exec = false;
 8003de0:	2000      	movs	r0, #0
 8003de2:	e7fc      	b.n	8003dde <lv_task_exec+0x3e>
 8003de4:	2002ccdf 	.word	0x2002ccdf
 8003de8:	2002ccde 	.word	0x2002ccde

08003dec <lv_task_handler>:
{
 8003dec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(task_handler_mutex) return;
 8003df0:	4d39      	ldr	r5, [pc, #228]	; (8003ed8 <lv_task_handler+0xec>)
 8003df2:	782c      	ldrb	r4, [r5, #0]
 8003df4:	b934      	cbnz	r4, 8003e04 <lv_task_handler+0x18>
    task_handler_mutex = true;
 8003df6:	2301      	movs	r3, #1
 8003df8:	702b      	strb	r3, [r5, #0]
    if(lv_task_run == false) {
 8003dfa:	4b38      	ldr	r3, [pc, #224]	; (8003edc <lv_task_handler+0xf0>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	b923      	cbnz	r3, 8003e0a <lv_task_handler+0x1e>
        task_handler_mutex = false; /*Release mutex*/
 8003e00:	2300      	movs	r3, #0
 8003e02:	702b      	strb	r3, [r5, #0]
}
 8003e04:	b003      	add	sp, #12
 8003e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    handler_start = lv_tick_get();
 8003e0a:	f7fe fc89 	bl	8002720 <lv_tick_get>
 8003e0e:	4b34      	ldr	r3, [pc, #208]	; (8003ee0 <lv_task_handler+0xf4>)
        task_deleted             = false;
 8003e10:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8003efc <lv_task_handler+0x110>
 8003e14:	46a1      	mov	r9, r4
 8003e16:	469b      	mov	fp, r3
    handler_start = lv_tick_get();
 8003e18:	6018      	str	r0, [r3, #0]
        task_created             = false;
 8003e1a:	4e32      	ldr	r6, [pc, #200]	; (8003ee4 <lv_task_handler+0xf8>)
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 8003e1c:	4f32      	ldr	r7, [pc, #200]	; (8003ee8 <lv_task_handler+0xfc>)
 8003e1e:	4833      	ldr	r0, [pc, #204]	; (8003eec <lv_task_handler+0x100>)
        task_created             = false;
 8003e20:	f886 9000 	strb.w	r9, [r6]
        task_deleted             = false;
 8003e24:	f888 9000 	strb.w	r9, [r8]
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 8003e28:	f00c f93a 	bl	80100a0 <lv_ll_get_head>
 8003e2c:	9601      	str	r6, [sp, #4]
 8003e2e:	463e      	mov	r6, r7
 8003e30:	6038      	str	r0, [r7, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 8003e32:	6831      	ldr	r1, [r6, #0]
 8003e34:	bb21      	cbnz	r1, 8003e80 <lv_task_handler+0x94>
    busy_time += lv_tick_elaps(handler_start);
 8003e36:	4c2e      	ldr	r4, [pc, #184]	; (8003ef0 <lv_task_handler+0x104>)
 8003e38:	f8db 0000 	ldr.w	r0, [fp]
 8003e3c:	f00a ffb4 	bl	800eda8 <lv_tick_elaps>
 8003e40:	6823      	ldr	r3, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8003e42:	4e2c      	ldr	r6, [pc, #176]	; (8003ef4 <lv_task_handler+0x108>)
    busy_time += lv_tick_elaps(handler_start);
 8003e44:	4418      	add	r0, r3
 8003e46:	6020      	str	r0, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8003e48:	6830      	ldr	r0, [r6, #0]
 8003e4a:	f00a ffad 	bl	800eda8 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 8003e4e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8003e52:	d3d5      	bcc.n	8003e00 <lv_task_handler+0x14>
        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
 8003e54:	6822      	ldr	r2, [r4, #0]
 8003e56:	2364      	movs	r3, #100	; 0x64
 8003e58:	4353      	muls	r3, r2
 8003e5a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003e5e:	fbb3 f3f2 	udiv	r3, r3, r2
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	2a64      	cmp	r2, #100	; 0x64
 8003e66:	4a24      	ldr	r2, [pc, #144]	; (8003ef8 <lv_task_handler+0x10c>)
 8003e68:	bf96      	itet	ls
 8003e6a:	f1c3 0364 	rsbls	r3, r3, #100	; 0x64
 8003e6e:	2300      	movhi	r3, #0
 8003e70:	b2db      	uxtbls	r3, r3
 8003e72:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	6023      	str	r3, [r4, #0]
        idle_period_start = lv_tick_get();
 8003e78:	f7fe fc52 	bl	8002720 <lv_tick_get>
 8003e7c:	6030      	str	r0, [r6, #0]
 8003e7e:	e7bf      	b.n	8003e00 <lv_task_handler+0x14>
            next = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 8003e80:	481a      	ldr	r0, [pc, #104]	; (8003eec <lv_task_handler+0x100>)
 8003e82:	f00c f913 	bl	80100ac <lv_ll_get_next>
 8003e86:	4682      	mov	sl, r0
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
 8003e88:	6830      	ldr	r0, [r6, #0]
 8003e8a:	7c03      	ldrb	r3, [r0, #16]
 8003e8c:	f013 0207 	ands.w	r2, r3, #7
 8003e90:	d0d1      	beq.n	8003e36 <lv_task_handler+0x4a>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
 8003e92:	42a0      	cmp	r0, r4
 8003e94:	d103      	bne.n	8003e9e <lv_task_handler+0xb2>
                LV_GC_ROOT(_lv_task_act) = next;
 8003e96:	f8c6 a000 	str.w	sl, [r6]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
 8003e9a:	2400      	movs	r4, #0
                continue; /*Load the next task*/
 8003e9c:	e7c9      	b.n	8003e32 <lv_task_handler+0x46>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
 8003e9e:	2a05      	cmp	r2, #5
 8003ea0:	d10c      	bne.n	8003ebc <lv_task_handler+0xd0>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
 8003ea2:	f7ff ff7d 	bl	8003da0 <lv_task_exec>
            if(task_deleted) break; /*If a task was deleted then this or the next item might be corrupted*/
 8003ea6:	f898 3000 	ldrb.w	r3, [r8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1c3      	bne.n	8003e36 <lv_task_handler+0x4a>
            if(task_created) break; /*If a task was created then this or the next item might be corrupted*/
 8003eae:	9b01      	ldr	r3, [sp, #4]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1bf      	bne.n	8003e36 <lv_task_handler+0x4a>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
 8003eb6:	f8c6 a000 	str.w	sl, [r6]
 8003eba:	e7ba      	b.n	8003e32 <lv_task_handler+0x46>
            else if(task_interrupter) {
 8003ebc:	b134      	cbz	r4, 8003ecc <lv_task_handler+0xe0>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
 8003ebe:	7c22      	ldrb	r2, [r4, #16]
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	f002 0207 	and.w	r2, r2, #7
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d9ec      	bls.n	8003ea6 <lv_task_handler+0xba>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 8003ecc:	f7ff ff68 	bl	8003da0 <lv_task_exec>
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	d0e8      	beq.n	8003ea6 <lv_task_handler+0xba>
                    task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
 8003ed4:	683c      	ldr	r4, [r7, #0]
                    break;
 8003ed6:	e7a0      	b.n	8003e1a <lv_task_handler+0x2e>
 8003ed8:	2002cce0 	.word	0x2002cce0
 8003edc:	2002ccdd 	.word	0x2002ccdd
 8003ee0:	20028778 	.word	0x20028778
 8003ee4:	2002ccde 	.word	0x2002ccde
 8003ee8:	20020754 	.word	0x20020754
 8003eec:	20020758 	.word	0x20020758
 8003ef0:	20028774 	.word	0x20028774
 8003ef4:	2002877c 	.word	0x2002877c
 8003ef8:	2002ccdc 	.word	0x2002ccdc
 8003efc:	2002ccdf 	.word	0x2002ccdf

08003f00 <lv_task_set_prio>:
    if(task->prio == prio) return;
 8003f00:	7c03      	ldrb	r3, [r0, #16]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	428b      	cmp	r3, r1
{
 8003f08:	b570      	push	{r4, r5, r6, lr}
 8003f0a:	4604      	mov	r4, r0
 8003f0c:	460d      	mov	r5, r1
    if(task->prio == prio) return;
 8003f0e:	d014      	beq.n	8003f3a <lv_task_set_prio+0x3a>
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 8003f10:	480d      	ldr	r0, [pc, #52]	; (8003f48 <lv_task_set_prio+0x48>)
 8003f12:	f00c f8c5 	bl	80100a0 <lv_ll_get_head>
 8003f16:	4e0c      	ldr	r6, [pc, #48]	; (8003f48 <lv_task_set_prio+0x48>)
 8003f18:	4602      	mov	r2, r0
 8003f1a:	b132      	cbz	r2, 8003f2a <lv_task_set_prio+0x2a>
        if(i->prio <= prio) {
 8003f1c:	7c13      	ldrb	r3, [r2, #16]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	429d      	cmp	r5, r3
 8003f24:	db0a      	blt.n	8003f3c <lv_task_set_prio+0x3c>
            if(i != task) lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
 8003f26:	42a2      	cmp	r2, r4
 8003f28:	d003      	beq.n	8003f32 <lv_task_set_prio+0x32>
        lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
 8003f2a:	4621      	mov	r1, r4
 8003f2c:	4806      	ldr	r0, [pc, #24]	; (8003f48 <lv_task_set_prio+0x48>)
 8003f2e:	f00c f98e 	bl	801024e <lv_ll_move_before>
    task->prio = prio;
 8003f32:	7c23      	ldrb	r3, [r4, #16]
 8003f34:	f365 0302 	bfi	r3, r5, #0, #3
 8003f38:	7423      	strb	r3, [r4, #16]
}
 8003f3a:	bd70      	pop	{r4, r5, r6, pc}
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	4630      	mov	r0, r6
 8003f40:	f00c f8b4 	bl	80100ac <lv_ll_get_next>
 8003f44:	4602      	mov	r2, r0
 8003f46:	e7e8      	b.n	8003f1a <lv_task_set_prio+0x1a>
 8003f48:	20020758 	.word	0x20020758

08003f4c <lv_task_create>:
{
 8003f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f50:	4680      	mov	r8, r0
 8003f52:	460f      	mov	r7, r1
 8003f54:	4616      	mov	r6, r2
 8003f56:	461d      	mov	r5, r3
    lv_task_t * new_task = lv_task_create_basic();
 8003f58:	f7ff feb8 	bl	8003ccc <lv_task_create_basic>
    lv_mem_assert(new_task);
 8003f5c:	4604      	mov	r4, r0
 8003f5e:	b930      	cbnz	r0, 8003f6e <lv_task_create+0x22>
 8003f60:	4b08      	ldr	r3, [pc, #32]	; (8003f84 <lv_task_create+0x38>)
 8003f62:	22e2      	movs	r2, #226	; 0xe2
 8003f64:	4908      	ldr	r1, [pc, #32]	; (8003f88 <lv_task_create+0x3c>)
 8003f66:	2003      	movs	r0, #3
 8003f68:	f7ff fb54 	bl	8003614 <lv_log_add>
 8003f6c:	e7fe      	b.n	8003f6c <lv_task_create+0x20>
    task->task_cb = task_cb;
 8003f6e:	f8c0 8008 	str.w	r8, [r0, #8]
    lv_task_set_prio(new_task, prio);
 8003f72:	4631      	mov	r1, r6
    task->period = period;
 8003f74:	6007      	str	r7, [r0, #0]
    lv_task_set_prio(new_task, prio);
 8003f76:	f7ff ffc3 	bl	8003f00 <lv_task_set_prio>
    new_task->user_data = user_data;
 8003f7a:	60e5      	str	r5, [r4, #12]
}
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f82:	bf00      	nop
 8003f84:	080176f4 	.word	0x080176f4
 8003f88:	08017bfd 	.word	0x08017bfd

08003f8c <lv_draw_get_buf>:
 * Be careful to not use the buffer while other processes are using it.
 * @param size the required size
 */
void * lv_draw_get_buf(uint32_t size)
{
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 8003f8c:	4a12      	ldr	r2, [pc, #72]	; (8003fd8 <lv_draw_get_buf+0x4c>)
{
 8003f8e:	4601      	mov	r1, r0
 8003f90:	b538      	push	{r3, r4, r5, lr}
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 8003f92:	6815      	ldr	r5, [r2, #0]
 8003f94:	4c11      	ldr	r4, [pc, #68]	; (8003fdc <lv_draw_get_buf+0x50>)
 8003f96:	4285      	cmp	r5, r0
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	d21a      	bcs.n	8003fd2 <lv_draw_get_buf+0x46>

    LV_LOG_TRACE("lv_draw_get_buf: allocate");

    draw_buf_size = size;
 8003f9c:	6010      	str	r0, [r2, #0]

    if(LV_GC_ROOT(_lv_draw_buf) == NULL) {
 8003f9e:	b95b      	cbnz	r3, 8003fb8 <lv_draw_get_buf+0x2c>
        LV_GC_ROOT(_lv_draw_buf) = lv_mem_alloc(size);
 8003fa0:	f7ff fb66 	bl	8003670 <lv_mem_alloc>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	6020      	str	r0, [r4, #0]
        lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 8003fa8:	b998      	cbnz	r0, 8003fd2 <lv_draw_get_buf+0x46>
 8003faa:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <lv_draw_get_buf+0x54>)
 8003fac:	223f      	movs	r2, #63	; 0x3f
 8003fae:	490d      	ldr	r1, [pc, #52]	; (8003fe4 <lv_draw_get_buf+0x58>)
 8003fb0:	2003      	movs	r0, #3
 8003fb2:	f7ff fb2f 	bl	8003614 <lv_log_add>
 8003fb6:	e7fe      	b.n	8003fb6 <lv_draw_get_buf+0x2a>
        return LV_GC_ROOT(_lv_draw_buf);
    }

    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff fbc5 	bl	8003748 <lv_mem_realloc>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	6020      	str	r0, [r4, #0]
    lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 8003fc2:	b930      	cbnz	r0, 8003fd2 <lv_draw_get_buf+0x46>
 8003fc4:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <lv_draw_get_buf+0x54>)
 8003fc6:	2244      	movs	r2, #68	; 0x44
 8003fc8:	4906      	ldr	r1, [pc, #24]	; (8003fe4 <lv_draw_get_buf+0x58>)
 8003fca:	2003      	movs	r0, #3
 8003fcc:	f7ff fb22 	bl	8003614 <lv_log_add>
 8003fd0:	e7fe      	b.n	8003fd0 <lv_draw_get_buf+0x44>
    return LV_GC_ROOT(_lv_draw_buf);
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	bd38      	pop	{r3, r4, r5, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20028780 	.word	0x20028780
 8003fdc:	2002071c 	.word	0x2002071c
 8003fe0:	080176f4 	.word	0x080176f4
 8003fe4:	08017c5e 	.word	0x08017c5e

08003fe8 <lv_draw_free_buf>:

/**
 * Free the draw buffer
 */
void lv_draw_free_buf(void)
{
 8003fe8:	b510      	push	{r4, lr}
    if(LV_GC_ROOT(_lv_draw_buf)) {
 8003fea:	4c05      	ldr	r4, [pc, #20]	; (8004000 <lv_draw_free_buf+0x18>)
 8003fec:	6820      	ldr	r0, [r4, #0]
 8003fee:	b128      	cbz	r0, 8003ffc <lv_draw_free_buf+0x14>
        lv_mem_free(LV_GC_ROOT(_lv_draw_buf));
 8003ff0:	f7ff fb80 	bl	80036f4 <lv_mem_free>
        LV_GC_ROOT(_lv_draw_buf) = NULL;
 8003ff4:	2300      	movs	r3, #0
        draw_buf_size = 0;
 8003ff6:	4a03      	ldr	r2, [pc, #12]	; (8004004 <lv_draw_free_buf+0x1c>)
        LV_GC_ROOT(_lv_draw_buf) = NULL;
 8003ff8:	6023      	str	r3, [r4, #0]
        draw_buf_size = 0;
 8003ffa:	6013      	str	r3, [r2, #0]
    }
}
 8003ffc:	bd10      	pop	{r4, pc}
 8003ffe:	bf00      	nop
 8004000:	2002071c 	.word	0x2002071c
 8004004:	20028780 	.word	0x20028780

08004008 <lv_draw_aa_get_opa>:
    static const lv_opa_t seg7[7] = {18, 55, 91, 128, 164, 200, 237};
    static const lv_opa_t seg8[8] = {16, 48, 80, 112, 143, 175, 207, 239};

    static const lv_opa_t * seg_map[] = {seg1, seg2, seg3, seg4, seg5, seg6, seg7, seg8};

    if(seg == 0)
 8004008:	b188      	cbz	r0, 800402e <lv_draw_aa_get_opa+0x26>
        return LV_OPA_TRANSP;
    else if(seg < 8)
 800400a:	2807      	cmp	r0, #7
 800400c:	dc08      	bgt.n	8004020 <lv_draw_aa_get_opa+0x18>
        return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 800400e:	3801      	subs	r0, #1
 8004010:	4b07      	ldr	r3, [pc, #28]	; (8004030 <lv_draw_aa_get_opa+0x28>)
 8004012:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004016:	5c58      	ldrb	r0, [r3, r1]
 8004018:	fb10 f002 	smulbb	r0, r0, r2
 800401c:	0a00      	lsrs	r0, r0, #8
 800401e:	4770      	bx	lr
    else {
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 8004020:	0049      	lsls	r1, r1, #1
 8004022:	0040      	lsls	r0, r0, #1
 8004024:	fb01 2202 	mla	r2, r1, r2, r2
 8004028:	fb92 f0f0 	sdiv	r0, r2, r0
 800402c:	b2c0      	uxtb	r0, r0
    }
}
 800402e:	4770      	bx	lr
 8004030:	08017288 	.word	0x08017288

08004034 <lv_img_color_format_get_px_size>:
 */
uint8_t lv_img_color_format_get_px_size(lv_img_cf_t cf)
{
    uint8_t px_size = 0;

    switch(cf) {
 8004034:	3804      	subs	r0, #4
 8004036:	b2c0      	uxtb	r0, r0
 8004038:	280a      	cmp	r0, #10
 800403a:	bf9a      	itte	ls
 800403c:	4b01      	ldrls	r3, [pc, #4]	; (8004044 <lv_img_color_format_get_px_size+0x10>)
 800403e:	5c18      	ldrbls	r0, [r3, r0]
{
 8004040:	2000      	movhi	r0, #0
        case LV_IMG_CF_ALPHA_8BIT: px_size = 8; break;
        default: px_size = 0; break;
    }

    return px_size;
}
 8004042:	4770      	bx	lr
 8004044:	08017ce3 	.word	0x08017ce3

08004048 <lv_draw_img>:
{
 8004048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800404c:	b091      	sub	sp, #68	; 0x44
 800404e:	4604      	mov	r4, r0
 8004050:	460f      	mov	r7, r1
 8004052:	4699      	mov	r9, r3
 8004054:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
    if(src == NULL) {
 8004058:	4615      	mov	r5, r2
 800405a:	b9a2      	cbnz	r2, 8004086 <lv_draw_img+0x3e>
        LV_LOG_WARN("Image draw: src is NULL");
 800405c:	4b6d      	ldr	r3, [pc, #436]	; (8004214 <lv_draw_img+0x1cc>)
 800405e:	2233      	movs	r2, #51	; 0x33
 8004060:	496d      	ldr	r1, [pc, #436]	; (8004218 <lv_draw_img+0x1d0>)
 8004062:	2002      	movs	r0, #2
 8004064:	f7ff fad6 	bl	8003614 <lv_log_add>
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 8004068:	23ff      	movs	r3, #255	; 0xff
 800406a:	4a6c      	ldr	r2, [pc, #432]	; (800421c <lv_draw_img+0x1d4>)
 800406c:	4639      	mov	r1, r7
 800406e:	4620      	mov	r0, r4
 8004070:	f00d faf3 	bl	801165a <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 8004074:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004078:	9505      	str	r5, [sp, #20]
 800407a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800407e:	e9cd 5501 	strd	r5, r5, [sp, #4]
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 8004082:	4b67      	ldr	r3, [pc, #412]	; (8004220 <lv_draw_img+0x1d8>)
 8004084:	e02d      	b.n	80040e2 <lv_draw_img+0x9a>
                                 const lv_style_t * style, lv_opa_t opa_scale)
{

    lv_area_t mask_com; /*Common area of mask and coords*/
    bool union_ok;
    union_ok = lv_area_intersect(&mask_com, mask, coords);
 8004086:	4602      	mov	r2, r0
 8004088:	a80c      	add	r0, sp, #48	; 0x30
 800408a:	f00c fad8 	bl	801063e <lv_area_intersect>
    if(union_ok == false) {
 800408e:	2800      	cmp	r0, #0
 8004090:	d04c      	beq.n	800412c <lv_draw_img+0xe4>
        return LV_RES_OK; /*Out of mask. There is nothing to draw so the image is drawn
                             successfully.*/
    }

    lv_opa_t opa =
 8004092:	f899 a033 	ldrb.w	sl, [r9, #51]	; 0x33
 8004096:	2eff      	cmp	r6, #255	; 0xff
        opa_scale == LV_OPA_COVER ? style->image.opa : (uint16_t)((uint16_t)style->image.opa * opa_scale) >> 8;

    lv_img_cache_entry_t * cdsc = lv_img_cache_open(src, style);
 8004098:	4649      	mov	r1, r9
 800409a:	4628      	mov	r0, r5
    lv_opa_t opa =
 800409c:	bf1c      	itt	ne
 800409e:	fb0a fa06 	mulne.w	sl, sl, r6
 80040a2:	ea4f 2a1a 	movne.w	sl, sl, lsr #8
    lv_img_cache_entry_t * cdsc = lv_img_cache_open(src, style);
 80040a6:	f000 f8eb 	bl	8004280 <lv_img_cache_open>

    if(cdsc == NULL) return LV_RES_INV;
 80040aa:	4680      	mov	r8, r0
 80040ac:	2800      	cmp	r0, #0
 80040ae:	d07e      	beq.n	80041ae <lv_draw_img+0x166>

    bool chroma_keyed = lv_img_color_format_is_chroma_keyed(cdsc->dec_dsc.header.cf);
    bool alpha_byte   = lv_img_color_format_has_alpha(cdsc->dec_dsc.header.cf);

    if(cdsc->dec_dsc.error_msg != NULL) {
 80040b0:	69c3      	ldr	r3, [r0, #28]
 80040b2:	b1f3      	cbz	r3, 80040f2 <lv_draw_img+0xaa>
        LV_LOG_WARN("Image draw error");
 80040b4:	4b5b      	ldr	r3, [pc, #364]	; (8004224 <lv_draw_img+0x1dc>)
 80040b6:	f240 12c7 	movw	r2, #455	; 0x1c7
 80040ba:	4957      	ldr	r1, [pc, #348]	; (8004218 <lv_draw_img+0x1d0>)
 80040bc:	2002      	movs	r0, #2
 80040be:	f7ff faa9 	bl	8003614 <lv_log_add>
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 80040c2:	23ff      	movs	r3, #255	; 0xff
 80040c4:	4a55      	ldr	r2, [pc, #340]	; (800421c <lv_draw_img+0x1d4>)
 80040c6:	4639      	mov	r1, r7
 80040c8:	4620      	mov	r0, r4
 80040ca:	f00d fac6 	bl	801165a <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, cdsc->dec_dsc.error_msg, LV_TXT_FLAG_NONE, NULL, -1,
 80040ce:	2300      	movs	r3, #0
 80040d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040d4:	9301      	str	r3, [sp, #4]
 80040d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80040da:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80040de:	f8d8 301c 	ldr.w	r3, [r8, #28]
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	4639      	mov	r1, r7
 80040e6:	23ff      	movs	r3, #255	; 0xff
 80040e8:	4a4c      	ldr	r2, [pc, #304]	; (800421c <lv_draw_img+0x1d4>)
 80040ea:	4620      	mov	r0, r4
 80040ec:	f000 fb6e 	bl	80047cc <lv_draw_label>
        return;
 80040f0:	e01c      	b.n	800412c <lv_draw_img+0xe4>
    bool chroma_keyed = lv_img_color_format_is_chroma_keyed(cdsc->dec_dsc.header.cf);
 80040f2:	7c02      	ldrb	r2, [r0, #16]
 80040f4:	f002 021f 	and.w	r2, r2, #31
 80040f8:	4610      	mov	r0, r2
 80040fa:	f00c fbdf 	bl	80108bc <lv_img_color_format_is_chroma_keyed>
 80040fe:	9007      	str	r0, [sp, #28]
    bool alpha_byte   = lv_img_color_format_has_alpha(cdsc->dec_dsc.header.cf);
 8004100:	4610      	mov	r0, r2
 8004102:	f00c fbe7 	bl	80108d4 <lv_img_color_format_has_alpha>
                      -1, NULL);
    }
    /* The decoder open could open the image and gave the entire uncompressed image.
     * Just draw it!*/
    else if(cdsc->dec_dsc.img_data) {
 8004106:	f8d8 2014 	ldr.w	r2, [r8, #20]
    bool alpha_byte   = lv_img_color_format_has_alpha(cdsc->dec_dsc.header.cf);
 800410a:	9008      	str	r0, [sp, #32]
    else if(cdsc->dec_dsc.img_data) {
 800410c:	b18a      	cbz	r2, 8004132 <lv_draw_img+0xea>
        lv_draw_map(coords, mask, cdsc->dec_dsc.img_data, opa, chroma_keyed, alpha_byte, style->image.color,
 800410e:	f899 3032 	ldrb.w	r3, [r9, #50]	; 0x32
 8004112:	4639      	mov	r1, r7
 8004114:	9001      	str	r0, [sp, #4]
 8004116:	4620      	mov	r0, r4
 8004118:	9303      	str	r3, [sp, #12]
 800411a:	f8b9 3030 	ldrh.w	r3, [r9, #48]	; 0x30
 800411e:	f8ad 3008 	strh.w	r3, [sp, #8]
 8004122:	9b07      	ldr	r3, [sp, #28]
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	4653      	mov	r3, sl
 8004128:	f00f fa8b 	bl	8013642 <lv_draw_map>
}
 800412c:	b011      	add	sp, #68	; 0x44
 800412e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 8004132:	f8bd 6034 	ldrh.w	r6, [sp, #52]	; 0x34
    memcpy(dest, src, sizeof(lv_area_t));
 8004136:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
    return area_p->x2 - area_p->x1 + 1;
 800413a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800413e:	3601      	adds	r6, #1
 8004140:	1af6      	subs	r6, r6, r3
 8004142:	b236      	sxth	r6, r6
    }
    /* The whole uncompressed image is not available. Try to read it line-by-line*/
    else {
        lv_coord_t width = lv_area_get_width(&mask_com);

        uint8_t  * buf = lv_draw_get_buf(lv_area_get_width(&mask_com) * ((LV_COLOR_DEPTH >> 3) + 1));  /*+1 because of the possible alpha byte*/
 8004144:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8004148:	f7ff ff20 	bl	8003f8c <lv_draw_get_buf>
    memcpy(dest, src, sizeof(lv_area_t));
 800414c:	2208      	movs	r2, #8
 800414e:	9009      	str	r0, [sp, #36]	; 0x24
 8004150:	a90c      	add	r1, sp, #48	; 0x30
 8004152:	4658      	mov	r0, fp
 8004154:	f012 fb0c 	bl	8016770 <memcpy>

        lv_area_t line;
        lv_area_copy(&line, &mask_com);
        lv_area_set_height(&line, 1);
 8004158:	2101      	movs	r1, #1
 800415a:	4658      	mov	r0, fp
 800415c:	f00c fa4a 	bl	80105f4 <lv_area_set_height>
        lv_coord_t x = mask_com.x1 - coords->x1;
 8004160:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8004164:	8821      	ldrh	r1, [r4, #0]
        lv_coord_t y = mask_com.y1 - coords->y1;
 8004166:	f9bd 5032 	ldrsh.w	r5, [sp, #50]	; 0x32
        lv_coord_t x = mask_com.x1 - coords->x1;
 800416a:	1a52      	subs	r2, r2, r1
 800416c:	b213      	sxth	r3, r2
        lv_coord_t y = mask_com.y1 - coords->y1;
 800416e:	8862      	ldrh	r2, [r4, #2]
 8004170:	1aaa      	subs	r2, r5, r2
        lv_coord_t x = mask_com.x1 - coords->x1;
 8004172:	930a      	str	r3, [sp, #40]	; 0x28
        lv_coord_t y = mask_com.y1 - coords->y1;
 8004174:	b212      	sxth	r2, r2
        lv_coord_t row;
        lv_res_t read_res;
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8004176:	1b53      	subs	r3, r2, r5
 8004178:	930b      	str	r3, [sp, #44]	; 0x2c
 800417a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800417c:	195a      	adds	r2, r3, r5
 800417e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8004182:	42ab      	cmp	r3, r5
 8004184:	b212      	sxth	r2, r2
 8004186:	dbd1      	blt.n	800412c <lv_draw_img+0xe4>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 8004188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800418a:	4640      	mov	r0, r8
 800418c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	4633      	mov	r3, r6
 8004192:	f00f fc64 	bl	8013a5e <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
 8004196:	2801      	cmp	r0, #1
 8004198:	d01e      	beq.n	80041d8 <lv_draw_img+0x190>
                lv_img_decoder_close(&cdsc->dec_dsc);
 800419a:	4640      	mov	r0, r8
 800419c:	f00f fc6f 	bl	8013a7e <lv_img_decoder_close>
                LV_LOG_WARN("Image draw can't read the line");
 80041a0:	4b21      	ldr	r3, [pc, #132]	; (8004228 <lv_draw_img+0x1e0>)
 80041a2:	f240 12e3 	movw	r2, #483	; 0x1e3
 80041a6:	491c      	ldr	r1, [pc, #112]	; (8004218 <lv_draw_img+0x1d0>)
 80041a8:	2002      	movs	r0, #2
 80041aa:	f7ff fa33 	bl	8003614 <lv_log_add>
        LV_LOG_WARN("Image draw error");
 80041ae:	4b1d      	ldr	r3, [pc, #116]	; (8004224 <lv_draw_img+0x1dc>)
 80041b0:	223d      	movs	r2, #61	; 0x3d
 80041b2:	4919      	ldr	r1, [pc, #100]	; (8004218 <lv_draw_img+0x1d0>)
 80041b4:	2002      	movs	r0, #2
 80041b6:	f7ff fa2d 	bl	8003614 <lv_log_add>
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 80041ba:	23ff      	movs	r3, #255	; 0xff
 80041bc:	4a17      	ldr	r2, [pc, #92]	; (800421c <lv_draw_img+0x1d4>)
 80041be:	4639      	mov	r1, r7
 80041c0:	4620      	mov	r0, r4
 80041c2:	f00d fa4a 	bl	801165a <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 80041c6:	2300      	movs	r3, #0
 80041c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041cc:	9301      	str	r3, [sp, #4]
 80041ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80041d2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80041d6:	e754      	b.n	8004082 <lv_draw_img+0x3a>
                return LV_RES_INV;
            }
            lv_draw_map(&line, mask, buf, opa, chroma_keyed, alpha_byte, style->image.color, style->image.intense);
 80041d8:	f899 3032 	ldrb.w	r3, [r9, #50]	; 0x32
 80041dc:	4639      	mov	r1, r7
 80041de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041e0:	4658      	mov	r0, fp
 80041e2:	9303      	str	r3, [sp, #12]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 80041e4:	3501      	adds	r5, #1
            lv_draw_map(&line, mask, buf, opa, chroma_keyed, alpha_byte, style->image.color, style->image.intense);
 80041e6:	f8b9 3030 	ldrh.w	r3, [r9, #48]	; 0x30
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 80041ea:	b22d      	sxth	r5, r5
            lv_draw_map(&line, mask, buf, opa, chroma_keyed, alpha_byte, style->image.color, style->image.intense);
 80041ec:	f8ad 3008 	strh.w	r3, [sp, #8]
 80041f0:	9b08      	ldr	r3, [sp, #32]
 80041f2:	9301      	str	r3, [sp, #4]
 80041f4:	9b07      	ldr	r3, [sp, #28]
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	4653      	mov	r3, sl
 80041fa:	f00f fa22 	bl	8013642 <lv_draw_map>
            line.y1++;
 80041fe:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8004202:	3301      	adds	r3, #1
 8004204:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            line.y2++;
 8004208:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800420c:	3301      	adds	r3, #1
 800420e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            y++;
 8004212:	e7b2      	b.n	800417a <lv_draw_img+0x132>
 8004214:	08017cee 	.word	0x08017cee
 8004218:	08017d6f 	.word	0x08017d6f
 800421c:	20020524 	.word	0x20020524
 8004220:	08017d06 	.word	0x08017d06
 8004224:	08017d0e 	.word	0x08017d0e
 8004228:	08017d1f 	.word	0x08017d1f

0800422c <antialias_get_opa_circ>:
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 1
    if(seg == 1) return 170;
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 2
    if(seg == 2) return (opa_map2[px_id] * opa) >> 8;
 800422c:	2802      	cmp	r0, #2
{
 800422e:	b570      	push	{r4, r5, r6, lr}
    if(seg == 2) return (opa_map2[px_id] * opa) >> 8;
 8004230:	d105      	bne.n	800423e <antialias_get_opa_circ+0x12>
 8004232:	4b0f      	ldr	r3, [pc, #60]	; (8004270 <antialias_get_opa_circ+0x44>)
 8004234:	5c5d      	ldrb	r5, [r3, r1]
 8004236:	fb15 f002 	smulbb	r0, r5, r2
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 4
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
#endif

    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 800423a:	0a00      	lsrs	r0, r0, #8
}
 800423c:	bd70      	pop	{r4, r5, r6, pc}
    if(seg == 3) return (opa_map3[px_id] * opa) >> 8;
 800423e:	2803      	cmp	r0, #3
 8004240:	d104      	bne.n	800424c <antialias_get_opa_circ+0x20>
 8004242:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <antialias_get_opa_circ+0x48>)
 8004244:	5c5c      	ldrb	r4, [r3, r1]
 8004246:	fb14 f002 	smulbb	r0, r4, r2
 800424a:	e7f6      	b.n	800423a <antialias_get_opa_circ+0xe>
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
 800424c:	2804      	cmp	r0, #4
 800424e:	d104      	bne.n	800425a <antialias_get_opa_circ+0x2e>
 8004250:	4b09      	ldr	r3, [pc, #36]	; (8004278 <antialias_get_opa_circ+0x4c>)
 8004252:	5c59      	ldrb	r1, [r3, r1]
 8004254:	fb11 f002 	smulbb	r0, r1, r2
 8004258:	e7ef      	b.n	800423a <antialias_get_opa_circ+0xe>
    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
 800425a:	1e46      	subs	r6, r0, #1
 800425c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 8004260:	4b06      	ldr	r3, [pc, #24]	; (800427c <antialias_get_opa_circ+0x50>)
    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
 8004262:	fbb1 f1f6 	udiv	r1, r1, r6
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 8004266:	b2c9      	uxtb	r1, r1
 8004268:	5c5b      	ldrb	r3, [r3, r1]
 800426a:	fb13 f002 	smulbb	r0, r3, r2
 800426e:	e7e4      	b.n	800423a <antialias_get_opa_circ+0xe>
 8004270:	08017e5b 	.word	0x08017e5b
 8004274:	08017e5d 	.word	0x08017e5d
 8004278:	08017e60 	.word	0x08017e60
 800427c:	08017e64 	.word	0x08017e64

08004280 <lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param style style of the image
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * lv_img_cache_open(const void * src, const lv_style_t * style)
{
 8004280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(entry_cnt == 0) {
 8004284:	4b3f      	ldr	r3, [pc, #252]	; (8004384 <lv_img_cache_open+0x104>)
{
 8004286:	4606      	mov	r6, r0
 8004288:	460f      	mov	r7, r1
    if(entry_cnt == 0) {
 800428a:	881d      	ldrh	r5, [r3, #0]
 800428c:	b93d      	cbnz	r5, 800429e <lv_img_cache_open+0x1e>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
 800428e:	4b3e      	ldr	r3, [pc, #248]	; (8004388 <lv_img_cache_open+0x108>)
 8004290:	2241      	movs	r2, #65	; 0x41
 8004292:	493e      	ldr	r1, [pc, #248]	; (800438c <lv_img_cache_open+0x10c>)
 8004294:	2002      	movs	r0, #2
 8004296:	f7ff f9bd 	bl	8003614 <lv_log_add>
            LV_LOG_WARN("Image draw cannot open the image resource");
            lv_img_decoder_close(&cached_src->dec_dsc);
            memset(&cached_src->dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
            memset(cached_src, 0, sizeof(lv_img_cache_entry_t));
            cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
            return NULL;
 800429a:	462c      	mov	r4, r5
 800429c:	e057      	b.n	800434e <lv_img_cache_open+0xce>
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 800429e:	4b3c      	ldr	r3, [pc, #240]	; (8004390 <lv_img_cache_open+0x110>)
    for(i = 0; i < entry_cnt; i++) {
 80042a0:	2000      	movs	r0, #0
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 80042a2:	4c3c      	ldr	r4, [pc, #240]	; (8004394 <lv_img_cache_open+0x114>)
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 80042a4:	681b      	ldr	r3, [r3, #0]
    for(i = 0; i < entry_cnt; i++) {
 80042a6:	469c      	mov	ip, r3
 80042a8:	461a      	mov	r2, r3
 80042aa:	b281      	uxth	r1, r0
 80042ac:	428d      	cmp	r5, r1
 80042ae:	d834      	bhi.n	800431a <lv_img_cache_open+0x9a>
 80042b0:	2200      	movs	r2, #0
    for(i = 0; i < entry_cnt; i++) {
 80042b2:	b291      	uxth	r1, r2
 80042b4:	428d      	cmp	r5, r1
 80042b6:	d83a      	bhi.n	800432e <lv_img_cache_open+0xae>
 80042b8:	f103 0228 	add.w	r2, r3, #40	; 0x28
        cached_src = &cache[0];
 80042bc:	461c      	mov	r4, r3
        for(i = 1; i < entry_cnt; i++) {
 80042be:	2301      	movs	r3, #1
 80042c0:	429d      	cmp	r5, r3
 80042c2:	d147      	bne.n	8004354 <lv_img_cache_open+0xd4>
        if(cached_src->dec_dsc.src) {
 80042c4:	6863      	ldr	r3, [r4, #4]
 80042c6:	b113      	cbz	r3, 80042ce <lv_img_cache_open+0x4e>
            lv_img_decoder_close(&cached_src->dec_dsc);
 80042c8:	4620      	mov	r0, r4
 80042ca:	f00f fbd8 	bl	8013a7e <lv_img_decoder_close>
        cached_src->dec_dsc.time_to_open = 0;
 80042ce:	f04f 0800 	mov.w	r8, #0
        t_start                          = lv_tick_get();
 80042d2:	f7fe fa25 	bl	8002720 <lv_tick_get>
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, style);
 80042d6:	463a      	mov	r2, r7
        t_start                          = lv_tick_get();
 80042d8:	4681      	mov	r9, r0
        cached_src->dec_dsc.time_to_open = 0;
 80042da:	f8c4 8018 	str.w	r8, [r4, #24]
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, style);
 80042de:	4631      	mov	r1, r6
 80042e0:	4620      	mov	r0, r4
 80042e2:	f000 ff4f 	bl	8005184 <lv_img_decoder_open>
        if(open_res == LV_RES_INV) {
 80042e6:	4605      	mov	r5, r0
 80042e8:	2800      	cmp	r0, #0
 80042ea:	d13c      	bne.n	8004366 <lv_img_cache_open+0xe6>
            LV_LOG_WARN("Image draw cannot open the image resource");
 80042ec:	4b2a      	ldr	r3, [pc, #168]	; (8004398 <lv_img_cache_open+0x118>)
 80042ee:	2276      	movs	r2, #118	; 0x76
 80042f0:	4926      	ldr	r1, [pc, #152]	; (800438c <lv_img_cache_open+0x10c>)
 80042f2:	2002      	movs	r0, #2
 80042f4:	f7ff f98e 	bl	8003614 <lv_log_add>
            lv_img_decoder_close(&cached_src->dec_dsc);
 80042f8:	4620      	mov	r0, r4
 80042fa:	f00f fbc0 	bl	8013a7e <lv_img_decoder_close>
            memset(&cached_src->dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 80042fe:	2224      	movs	r2, #36	; 0x24
 8004300:	4629      	mov	r1, r5
 8004302:	4620      	mov	r0, r4
 8004304:	f012 fa5e 	bl	80167c4 <memset>
            memset(cached_src, 0, sizeof(lv_img_cache_entry_t));
 8004308:	2228      	movs	r2, #40	; 0x28
 800430a:	4629      	mov	r1, r5
 800430c:	4620      	mov	r0, r4
 800430e:	f012 fa59 	bl	80167c4 <memset>
            cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
 8004312:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004316:	6263      	str	r3, [r4, #36]	; 0x24
 8004318:	e7bf      	b.n	800429a <lv_img_cache_open+0x1a>
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 800431a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800431c:	3001      	adds	r0, #1
 800431e:	3228      	adds	r2, #40	; 0x28
 8004320:	42a1      	cmp	r1, r4
            cache[i].life -= LV_IMG_CACHE_AGING;
 8004322:	bfa4      	itt	ge
 8004324:	f101 31ff 	addge.w	r1, r1, #4294967295	; 0xffffffff
 8004328:	f842 1c04 	strge.w	r1, [r2, #-4]
 800432c:	e7bd      	b.n	80042aa <lv_img_cache_open+0x2a>
        if(cache[i].dec_dsc.src == src) {
 800432e:	4664      	mov	r4, ip
 8004330:	3201      	adds	r2, #1
 8004332:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8004336:	6861      	ldr	r1, [r4, #4]
 8004338:	42b1      	cmp	r1, r6
 800433a:	d1ba      	bne.n	80042b2 <lv_img_cache_open+0x32>
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
 800433c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800433e:	69a2      	ldr	r2, [r4, #24]
 8004340:	4413      	add	r3, r2
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
 8004342:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004346:	bfc8      	it	gt
 8004348:	f44f 737a 	movgt.w	r3, #1000	; 0x3e8
 800434c:	6263      	str	r3, [r4, #36]	; 0x24

        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
    }

    return cached_src;
}
 800434e:	4620      	mov	r0, r4
 8004350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if(cache[i].life < cached_src->life) {
 8004354:	6a50      	ldr	r0, [r2, #36]	; 0x24
        for(i = 1; i < entry_cnt; i++) {
 8004356:	3301      	adds	r3, #1
            if(cache[i].life < cached_src->life) {
 8004358:	6a61      	ldr	r1, [r4, #36]	; 0x24
        for(i = 1; i < entry_cnt; i++) {
 800435a:	b29b      	uxth	r3, r3
            if(cache[i].life < cached_src->life) {
 800435c:	4288      	cmp	r0, r1
 800435e:	bfb8      	it	lt
 8004360:	4614      	movlt	r4, r2
 8004362:	3228      	adds	r2, #40	; 0x28
 8004364:	e7ac      	b.n	80042c0 <lv_img_cache_open+0x40>
        if(cached_src->dec_dsc.time_to_open == 0) {
 8004366:	69a3      	ldr	r3, [r4, #24]
        cached_src->life = 0;
 8004368:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
        if(cached_src->dec_dsc.time_to_open == 0) {
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1ee      	bne.n	800434e <lv_img_cache_open+0xce>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 8004370:	4648      	mov	r0, r9
 8004372:	f00a fd19 	bl	800eda8 <lv_tick_elaps>
        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 8004376:	b108      	cbz	r0, 800437c <lv_img_cache_open+0xfc>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 8004378:	61a0      	str	r0, [r4, #24]
 800437a:	e7e8      	b.n	800434e <lv_img_cache_open+0xce>
        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 800437c:	2301      	movs	r3, #1
 800437e:	61a3      	str	r3, [r4, #24]
 8004380:	e7e5      	b.n	800434e <lv_img_cache_open+0xce>
 8004382:	bf00      	nop
 8004384:	2002ccd0 	.word	0x2002ccd0
 8004388:	08017e6c 	.word	0x08017e6c
 800438c:	08017e93 	.word	0x08017e93
 8004390:	20020738 	.word	0x20020738
 8004394:	80000002 	.word	0x80000002
 8004398:	08017ef9 	.word	0x08017ef9

0800439c <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 800439c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 80043a0:	4b12      	ldr	r3, [pc, #72]	; (80043ec <lv_img_cache_invalidate_src+0x50>)
{
 80043a2:	4606      	mov	r6, r0

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 80043a4:	2500      	movs	r5, #0
 80043a6:	4f12      	ldr	r7, [pc, #72]	; (80043f0 <lv_img_cache_invalidate_src+0x54>)
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 80043a8:	f8d3 8000 	ldr.w	r8, [r3]
        if(cache[i].dec_dsc.src == src || src == NULL) {
 80043ac:	f04f 0928 	mov.w	r9, #40	; 0x28
    for(i = 0; i < entry_cnt; i++) {
 80043b0:	883a      	ldrh	r2, [r7, #0]
 80043b2:	b2ab      	uxth	r3, r5
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d801      	bhi.n	80043bc <lv_img_cache_invalidate_src+0x20>

            memset(&cache[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
        }
    }
}
 80043b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(cache[i].dec_dsc.src == src || src == NULL) {
 80043bc:	b2ac      	uxth	r4, r5
 80043be:	fb09 8404 	mla	r4, r9, r4, r8
 80043c2:	6863      	ldr	r3, [r4, #4]
 80043c4:	42b3      	cmp	r3, r6
 80043c6:	d000      	beq.n	80043ca <lv_img_cache_invalidate_src+0x2e>
 80043c8:	b96e      	cbnz	r6, 80043e6 <lv_img_cache_invalidate_src+0x4a>
            if(cache[i].dec_dsc.src != NULL) {
 80043ca:	b113      	cbz	r3, 80043d2 <lv_img_cache_invalidate_src+0x36>
                lv_img_decoder_close(&cache[i].dec_dsc);
 80043cc:	4620      	mov	r0, r4
 80043ce:	f00f fb56 	bl	8013a7e <lv_img_decoder_close>
            memset(&cache[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 80043d2:	2224      	movs	r2, #36	; 0x24
 80043d4:	2100      	movs	r1, #0
 80043d6:	4620      	mov	r0, r4
 80043d8:	f012 f9f4 	bl	80167c4 <memset>
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
 80043dc:	2228      	movs	r2, #40	; 0x28
 80043de:	2100      	movs	r1, #0
 80043e0:	4620      	mov	r0, r4
 80043e2:	f012 f9ef 	bl	80167c4 <memset>
 80043e6:	3501      	adds	r5, #1
 80043e8:	e7e2      	b.n	80043b0 <lv_img_cache_invalidate_src+0x14>
 80043ea:	bf00      	nop
 80043ec:	20020738 	.word	0x20020738
 80043f0:	2002ccd0 	.word	0x2002ccd0

080043f4 <lv_img_cache_set_size>:
{
 80043f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 80043f8:	4c19      	ldr	r4, [pc, #100]	; (8004460 <lv_img_cache_set_size+0x6c>)
{
 80043fa:	4605      	mov	r5, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	b12b      	cbz	r3, 800440c <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
 8004400:	2000      	movs	r0, #0
 8004402:	f7ff ffcb 	bl	800439c <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
 8004406:	6820      	ldr	r0, [r4, #0]
 8004408:	f7ff f974 	bl	80036f4 <lv_mem_free>
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
 800440c:	2728      	movs	r7, #40	; 0x28
 800440e:	fb07 f005 	mul.w	r0, r7, r5
 8004412:	f7ff f92d 	bl	8003670 <lv_mem_alloc>
 8004416:	6020      	str	r0, [r4, #0]
    lv_mem_assert(LV_GC_ROOT(_lv_img_cache_array));
 8004418:	b930      	cbnz	r0, 8004428 <lv_img_cache_set_size+0x34>
 800441a:	4b12      	ldr	r3, [pc, #72]	; (8004464 <lv_img_cache_set_size+0x70>)
 800441c:	229b      	movs	r2, #155	; 0x9b
 800441e:	4912      	ldr	r1, [pc, #72]	; (8004468 <lv_img_cache_set_size+0x74>)
 8004420:	2003      	movs	r0, #3
 8004422:	f7ff f8f7 	bl	8003614 <lv_log_add>
 8004426:	e7fe      	b.n	8004426 <lv_img_cache_set_size+0x32>
    entry_cnt = new_entry_cnt;
 8004428:	4b10      	ldr	r3, [pc, #64]	; (800446c <lv_img_cache_set_size+0x78>)
 800442a:	801d      	strh	r5, [r3, #0]
    for(i = 0; i < entry_cnt; i++) {
 800442c:	4698      	mov	r8, r3
 800442e:	2500      	movs	r5, #0
 8004430:	f8b8 2000 	ldrh.w	r2, [r8]
 8004434:	b2ab      	uxth	r3, r5
 8004436:	429a      	cmp	r2, r3
 8004438:	d801      	bhi.n	800443e <lv_img_cache_set_size+0x4a>
}
 800443a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 800443e:	b2ae      	uxth	r6, r5
 8004440:	6820      	ldr	r0, [r4, #0]
 8004442:	2224      	movs	r2, #36	; 0x24
 8004444:	2100      	movs	r1, #0
 8004446:	437e      	muls	r6, r7
 8004448:	3501      	adds	r5, #1
 800444a:	4430      	add	r0, r6
 800444c:	f012 f9ba 	bl	80167c4 <memset>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i], 0, sizeof(lv_img_cache_entry_t));
 8004450:	6820      	ldr	r0, [r4, #0]
 8004452:	2228      	movs	r2, #40	; 0x28
 8004454:	2100      	movs	r1, #0
 8004456:	4430      	add	r0, r6
 8004458:	f012 f9b4 	bl	80167c4 <memset>
 800445c:	e7e8      	b.n	8004430 <lv_img_cache_set_size+0x3c>
 800445e:	bf00      	nop
 8004460:	20020738 	.word	0x20020738
 8004464:	080176f4 	.word	0x080176f4
 8004468:	08017e93 	.word	0x08017e93
 800446c:	2002ccd0 	.word	0x2002ccd0

08004470 <lv_draw_letter>:
 * @param color color of letter
 * @param opa opacity of letter (0..255)
 */
void lv_draw_letter(const lv_point_t * pos_p, const lv_area_t * mask_p, const lv_font_t * font_p, uint32_t letter,
                    lv_color_t color, lv_opa_t opa)
{
 8004470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004474:	b09b      	sub	sp, #108	; 0x6c
 8004476:	4698      	mov	r8, r3
 8004478:	4616      	mov	r6, r2
 800447a:	4604      	mov	r4, r0
 800447c:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
    /*clang-format off*/
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8004480:	aa16      	add	r2, sp, #88	; 0x58
{
 8004482:	4689      	mov	r9, r1
 8004484:	9308      	str	r3, [sp, #32]
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8004486:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800448a:	4615      	mov	r5, r2
 800448c:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8004490:	f5a3 03ad 	sub.w	r3, r3, #5668864	; 0x568000
 8004494:	f5a3 5328 	sub.w	r3, r3, #10752	; 0x2a00
 8004498:	9313      	str	r3, [sp, #76]	; 0x4c
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800449a:	4bb4      	ldr	r3, [pc, #720]	; (800476c <lv_draw_letter+0x2fc>)
 800449c:	f103 0c10 	add.w	ip, r3, #16
 80044a0:	6818      	ldr	r0, [r3, #0]
 80044a2:	3308      	adds	r3, #8
 80044a4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80044a8:	4617      	mov	r7, r2
 80044aa:	4563      	cmp	r3, ip
 80044ac:	c703      	stmia	r7!, {r0, r1}
 80044ae:	463a      	mov	r2, r7
 80044b0:	d1f6      	bne.n	80044a0 <lv_draw_letter+0x30>
                                        68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255};
    /*clang-format on*/

    if(opa < LV_OPA_MIN) return;
 80044b2:	9b08      	ldr	r3, [sp, #32]
 80044b4:	2b0f      	cmp	r3, #15
 80044b6:	d90a      	bls.n	80044ce <lv_draw_letter+0x5e>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 80044b8:	2bfc      	cmp	r3, #252	; 0xfc
 80044ba:	bf28      	it	cs
 80044bc:	23ff      	movcs	r3, #255	; 0xff
 80044be:	9308      	str	r3, [sp, #32]

    if(font_p == NULL) {
 80044c0:	b946      	cbnz	r6, 80044d4 <lv_draw_letter+0x64>
        LV_LOG_WARN("Font: character's bitmap not found");
 80044c2:	4bab      	ldr	r3, [pc, #684]	; (8004770 <lv_draw_letter+0x300>)
 80044c4:	22f5      	movs	r2, #245	; 0xf5
 80044c6:	49ab      	ldr	r1, [pc, #684]	; (8004774 <lv_draw_letter+0x304>)
 80044c8:	2002      	movs	r0, #2
 80044ca:	f7ff f8a3 	bl	8003614 <lv_log_add>

        map_p += (col_bit >> 3);
        col_bit = col_bit & 0x7;
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
    }
}
 80044ce:	b01b      	add	sp, #108	; 0x6c
 80044d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 80044d4:	2300      	movs	r3, #0
 80044d6:	4642      	mov	r2, r8
 80044d8:	a914      	add	r1, sp, #80	; 0x50
 80044da:	4630      	mov	r0, r6
 80044dc:	f00f fdea 	bl	80140b4 <lv_font_get_glyph_dsc>
    if(g_ret == false) return;
 80044e0:	2800      	cmp	r0, #0
 80044e2:	d0f4      	beq.n	80044ce <lv_draw_letter+0x5e>
    switch(g.bpp) {
 80044e4:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 80044e8:	3b01      	subs	r3, #1
 80044ea:	2b07      	cmp	r3, #7
 80044ec:	d8ef      	bhi.n	80044ce <lv_draw_letter+0x5e>
 80044ee:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <lv_draw_letter+0x84>)
 80044f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f4:	080046c1 	.word	0x080046c1
 80044f8:	08004515 	.word	0x08004515
 80044fc:	080044cf 	.word	0x080044cf
 8004500:	0800451f 	.word	0x0800451f
 8004504:	080044cf 	.word	0x080044cf
 8004508:	080044cf 	.word	0x080044cf
 800450c:	080044cf 	.word	0x080044cf
 8004510:	080046b9 	.word	0x080046b9
            bitmask_init  = 0xC0;
 8004514:	23c0      	movs	r3, #192	; 0xc0
 8004516:	930a      	str	r3, [sp, #40]	; 0x28
            bpp_opa_table = bpp2_opa_table;
 8004518:	ab13      	add	r3, sp, #76	; 0x4c
            bpp_opa_table = bpp1_opa_table;
 800451a:	9309      	str	r3, [sp, #36]	; 0x24
 800451c:	e002      	b.n	8004524 <lv_draw_letter+0xb4>
            bitmask_init  = 0xF0;
 800451e:	23f0      	movs	r3, #240	; 0xf0
            bpp_opa_table = bpp4_opa_table;
 8004520:	e9cd 5309 	strd	r5, r3, [sp, #36]	; 0x24
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 8004524:	7a73      	ldrb	r3, [r6, #9]
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 8004526:	4630      	mov	r0, r6
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 8004528:	f99d 2054 	ldrsb.w	r2, [sp, #84]	; 0x54
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 800452c:	4641      	mov	r1, r8
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 800452e:	f9b4 7000 	ldrsh.w	r7, [r4]
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 8004532:	f896 a008 	ldrb.w	sl, [r6, #8]
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 8004536:	9206      	str	r2, [sp, #24]
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 8004538:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 800453c:	9305      	str	r3, [sp, #20]
 800453e:	f89d b053 	ldrb.w	fp, [sp, #83]	; 0x53
 8004542:	f99d 5055 	ldrsb.w	r5, [sp, #85]	; 0x55
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 8004546:	f00f fdb3 	bl	80140b0 <lv_font_get_glyph_bitmap>
    if(map_p == NULL) return;
 800454a:	4606      	mov	r6, r0
 800454c:	2800      	cmp	r0, #0
 800454e:	d0be      	beq.n	80044ce <lv_draw_letter+0x5e>
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 8004550:	9a06      	ldr	r2, [sp, #24]
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 8004552:	f9b9 1000 	ldrsh.w	r1, [r9]
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 8004556:	4417      	add	r7, r2
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 8004558:	f89d 2052 	ldrb.w	r2, [sp, #82]	; 0x52
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 800455c:	b23f      	sxth	r7, r7
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 800455e:	443a      	add	r2, r7
 8004560:	428a      	cmp	r2, r1
 8004562:	dbb4      	blt.n	80044ce <lv_draw_letter+0x5e>
 8004564:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8004568:	42ba      	cmp	r2, r7
 800456a:	dbb0      	blt.n	80044ce <lv_draw_letter+0x5e>
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 800456c:	9b05      	ldr	r3, [sp, #20]
 800456e:	445d      	add	r5, fp
 8004570:	ebaa 0a03 	sub.w	sl, sl, r3
 8004574:	44a2      	add	sl, r4
 8004576:	fa0f fa8a 	sxth.w	sl, sl
 800457a:	ebaa 0305 	sub.w	r3, sl, r5
 800457e:	b21b      	sxth	r3, r3
 8004580:	9307      	str	r3, [sp, #28]
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 8004582:	9a07      	ldr	r2, [sp, #28]
 8004584:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 8004588:	4413      	add	r3, r2
 800458a:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
 800458e:	4293      	cmp	r3, r2
 8004590:	db9d      	blt.n	80044ce <lv_draw_letter+0x5e>
 8004592:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8004596:	9a07      	ldr	r2, [sp, #28]
 8004598:	4293      	cmp	r3, r2
 800459a:	db98      	blt.n	80044ce <lv_draw_letter+0x5e>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 800459c:	f7fe fd02 	bl	8002fa4 <lv_refr_get_disp_refreshing>
 80045a0:	900e      	str	r0, [sp, #56]	; 0x38
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80045a2:	f00a fbe8 	bl	800ed76 <lv_disp_get_buf>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 80045a6:	8a83      	ldrh	r3, [r0, #20]
 80045a8:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 80045ac:	4683      	mov	fp, r0
 80045ae:	3301      	adds	r3, #1
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 80045b0:	f8d0 8008 	ldr.w	r8, [r0, #8]
    uint8_t width_byte_scr = g.box_w >> 3; /*Width in bytes (on the screen finally) (e.g. w = 11 -> 2 bytes wide)*/
 80045b4:	f89d 0052 	ldrb.w	r0, [sp, #82]	; 0x52
 80045b8:	1a5b      	subs	r3, r3, r1
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
 80045ba:	f89d 2056 	ldrb.w	r2, [sp, #86]	; 0x56
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 80045be:	183c      	adds	r4, r7, r0
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 80045c0:	1a79      	subs	r1, r7, r1
 80045c2:	b21b      	sxth	r3, r3
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
 80045c4:	fb00 fe02 	mul.w	lr, r0, r2
 80045c8:	930c      	str	r3, [sp, #48]	; 0x30
    lv_coord_t col_start = pos_x >= mask_p->x1 ? 0 : mask_p->x1 - pos_x;
 80045ca:	f9b9 3000 	ldrsh.w	r3, [r9]
 80045ce:	42bb      	cmp	r3, r7
 80045d0:	bfca      	itet	gt
 80045d2:	1bdb      	subgt	r3, r3, r7
 80045d4:	2300      	movle	r3, #0
 80045d6:	b21b      	sxthgt	r3, r3
 80045d8:	9306      	str	r3, [sp, #24]
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 80045da:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
 80045de:	429c      	cmp	r4, r3
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 80045e0:	f9b9 4002 	ldrsh.w	r4, [r9, #2]
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 80045e4:	f9b9 9006 	ldrsh.w	r9, [r9, #6]
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 80045e8:	bfcc      	ite	gt
 80045ea:	3301      	addgt	r3, #1
 80045ec:	b203      	sxthle	r3, r0
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 80045ee:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 80045f2:	bfc4      	itt	gt
 80045f4:	1bdb      	subgt	r3, r3, r7
 80045f6:	b21b      	sxthgt	r3, r3
 80045f8:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 80045fa:	9b07      	ldr	r3, [sp, #28]
 80045fc:	429c      	cmp	r4, r3
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 80045fe:	9b07      	ldr	r3, [sp, #28]
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 8004600:	bfc8      	it	gt
 8004602:	1964      	addgt	r4, r4, r5
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 8004604:	eb00 0c03 	add.w	ip, r0, r3
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 8004608:	bfd2      	itee	le
 800460a:	2400      	movle	r4, #0
 800460c:	eba4 040a 	subgt.w	r4, r4, sl
 8004610:	b224      	sxthgt	r4, r4
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 8004612:	45cc      	cmp	ip, r9
 8004614:	bfc9      	itett	gt
 8004616:	3501      	addgt	r5, #1
 8004618:	b203      	sxthle	r3, r0
 800461a:	444d      	addgt	r5, r9
 800461c:	eba5 050a 	subgt.w	r5, r5, sl
 8004620:	bfc8      	it	gt
 8004622:	b22b      	sxthgt	r3, r5
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 8004624:	f9bb 5012 	ldrsh.w	r5, [fp, #18]
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 8004628:	930d      	str	r3, [sp, #52]	; 0x34
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 800462a:	9b07      	ldr	r3, [sp, #28]
 800462c:	1b5d      	subs	r5, r3, r5
 800462e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004630:	fb03 1505 	mla	r5, r3, r5, r1
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 8004634:	9906      	ldr	r1, [sp, #24]
 8004636:	fb03 1104 	mla	r1, r3, r4, r1
 800463a:	440d      	add	r5, r1
 800463c:	eb08 0345 	add.w	r3, r8, r5, lsl #1
 8004640:	9305      	str	r3, [sp, #20]
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 8004642:	9b06      	ldr	r3, [sp, #24]
 8004644:	fb12 f203 	smulbb	r2, r2, r3
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 8004648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 800464a:	fb0e 2e04 	mla	lr, lr, r4, r2
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 800464e:	9a06      	ldr	r2, [sp, #24]
 8004650:	4413      	add	r3, r2
 8004652:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    map_p += bit_ofs >> 3;
 8004654:	eb06 08de 	add.w	r8, r6, lr, lsr #3
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 8004658:	f00e 0607 	and.w	r6, lr, #7
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 800465c:	1a9b      	subs	r3, r3, r2
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	9310      	str	r3, [sp, #64]	; 0x40
    for(row = row_start; row < row_end; row++) {
 8004662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004664:	429c      	cmp	r4, r3
 8004666:	f6bf af32 	bge.w	80044ce <lv_draw_letter+0x5e>
        bitmask = bitmask_init >> col_bit;
 800466a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        for(col = col_start; col < col_end; col++) {
 800466c:	f8dd 9018 	ldr.w	r9, [sp, #24]
        bitmask = bitmask_init >> col_bit;
 8004670:	fa43 fa06 	asr.w	sl, r3, r6
                } else if(vdb_buf_tmp->full != color.full) {
 8004674:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
        bitmask = bitmask_init >> col_bit;
 8004678:	fa5f fa8a 	uxtb.w	sl, sl
                } else if(vdb_buf_tmp->full != color.full) {
 800467c:	9311      	str	r3, [sp, #68]	; 0x44
 800467e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8004682:	930f      	str	r3, [sp, #60]	; 0x3c
        for(col = col_start; col < col_end; col++) {
 8004684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004686:	f89d 1056 	ldrb.w	r1, [sp, #86]	; 0x56
 800468a:	4599      	cmp	r9, r3
 800468c:	db1c      	blt.n	80046c8 <lv_draw_letter+0x258>
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
 800468e:	9a06      	ldr	r2, [sp, #24]
    for(row = row_start; row < row_end; row++) {
 8004690:	3401      	adds	r4, #1
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
 8004692:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
    for(row = row_start; row < row_end; row++) {
 8004696:	b224      	sxth	r4, r4
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
 8004698:	4413      	add	r3, r2
 800469a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800469c:	1a9b      	subs	r3, r3, r2
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 800469e:	9a05      	ldr	r2, [sp, #20]
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
 80046a0:	fb13 f301 	smulbb	r3, r3, r1
 80046a4:	441e      	add	r6, r3
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 80046a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
 80046a8:	b2b6      	uxth	r6, r6
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 80046aa:	441a      	add	r2, r3
        map_p += (col_bit >> 3);
 80046ac:	eb08 08d6 	add.w	r8, r8, r6, lsr #3
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 80046b0:	9205      	str	r2, [sp, #20]
        col_bit = col_bit & 0x7;
 80046b2:	f006 0607 	and.w	r6, r6, #7
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 80046b6:	e7d4      	b.n	8004662 <lv_draw_letter+0x1f2>
            bitmask_init  = 0xFF;
 80046b8:	23ff      	movs	r3, #255	; 0xff
 80046ba:	930a      	str	r3, [sp, #40]	; 0x28
            bpp_opa_table = NULL;
 80046bc:	2300      	movs	r3, #0
 80046be:	e72c      	b.n	800451a <lv_draw_letter+0xaa>
            bitmask_init  = 0x80;
 80046c0:	2380      	movs	r3, #128	; 0x80
 80046c2:	930a      	str	r3, [sp, #40]	; 0x28
            bpp_opa_table = bpp1_opa_table;
 80046c4:	ab12      	add	r3, sp, #72	; 0x48
 80046c6:	e728      	b.n	800451a <lv_draw_letter+0xaa>
            letter_px = (*map_p & bitmask) >> (8 - col_bit - g.bpp);
 80046c8:	f898 2000 	ldrb.w	r2, [r8]
 80046cc:	f1c1 0308 	rsb	r3, r1, #8
 80046d0:	ea0a 0202 	and.w	r2, sl, r2
 80046d4:	1b9b      	subs	r3, r3, r6
 80046d6:	411a      	asrs	r2, r3
            if(letter_px != 0) {
 80046d8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80046dc:	d021      	beq.n	8004722 <lv_draw_letter+0x2b2>
                if(opa == LV_OPA_COVER) {
 80046de:	9b08      	ldr	r3, [sp, #32]
 80046e0:	2bff      	cmp	r3, #255	; 0xff
 80046e2:	d138      	bne.n	8004756 <lv_draw_letter+0x2e6>
                    px_opa = g.bpp == 8 ? letter_px : bpp_opa_table[letter_px];
 80046e4:	2908      	cmp	r1, #8
 80046e6:	d001      	beq.n	80046ec <lv_draw_letter+0x27c>
 80046e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046ea:	5c9a      	ldrb	r2, [r3, r2]
                if(disp->driver.set_px_cb) {
 80046ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	461d      	mov	r5, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d040      	beq.n	8004778 <lv_draw_letter+0x308>
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 80046f6:	f8bb 3010 	ldrh.w	r3, [fp, #16]
 80046fa:	9202      	str	r2, [sp, #8]
 80046fc:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
 8004700:	1afb      	subs	r3, r7, r3
 8004702:	9907      	ldr	r1, [sp, #28]
 8004704:	f8ad 2004 	strh.w	r2, [sp, #4]
 8004708:	444b      	add	r3, r9
 800470a:	f8bb 2012 	ldrh.w	r2, [fp, #18]
 800470e:	b21b      	sxth	r3, r3
 8004710:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004712:	1a8a      	subs	r2, r1, r2
 8004714:	4422      	add	r2, r4
 8004716:	b212      	sxth	r2, r2
 8004718:	9200      	str	r2, [sp, #0]
 800471a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800471c:	f8db 1008 	ldr.w	r1, [fp, #8]
 8004720:	47a8      	blx	r5
            vdb_buf_tmp++;
 8004722:	9b05      	ldr	r3, [sp, #20]
        for(col = col_start; col < col_end; col++) {
 8004724:	f109 0901 	add.w	r9, r9, #1
            vdb_buf_tmp++;
 8004728:	3302      	adds	r3, #2
        for(col = col_start; col < col_end; col++) {
 800472a:	fa0f f989 	sxth.w	r9, r9
            vdb_buf_tmp++;
 800472e:	9305      	str	r3, [sp, #20]
            if(col_bit < 8 - g.bpp) {
 8004730:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8004734:	f1c3 0208 	rsb	r2, r3, #8
 8004738:	4296      	cmp	r6, r2
                col_bit += g.bpp;
 800473a:	bfb9      	ittee	lt
 800473c:	18f6      	addlt	r6, r6, r3
                bitmask = bitmask >> g.bpp;
 800473e:	fa4a fa03 	asrlt.w	sl, sl, r3
                map_p++;
 8004742:	f108 0801 	addge.w	r8, r8, #1
                bitmask = bitmask_init;
 8004746:	f8dd a028 	ldrge.w	sl, [sp, #40]	; 0x28
                col_bit += g.bpp;
 800474a:	bfb6      	itet	lt
 800474c:	b2b6      	uxthlt	r6, r6
                col_bit = 0;
 800474e:	2600      	movge	r6, #0
                bitmask = bitmask >> g.bpp;
 8004750:	fa5f fa8a 	uxtblt.w	sl, sl
                map_p++;
 8004754:	e796      	b.n	8004684 <lv_draw_letter+0x214>
                    px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
 8004756:	2908      	cmp	r1, #8
                                        : (uint16_t)((uint16_t)bpp_opa_table[letter_px] * opa) >> 8;
 8004758:	bf1c      	itt	ne
 800475a:	9b09      	ldrne	r3, [sp, #36]	; 0x24
 800475c:	5c9a      	ldrbne	r2, [r3, r2]
 800475e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004760:	fb12 f203 	smulbb	r2, r2, r3
                    px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
 8004764:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004768:	e7c0      	b.n	80046ec <lv_draw_letter+0x27c>
 800476a:	bf00      	nop
 800476c:	0801723c 	.word	0x0801723c
 8004770:	08017f23 	.word	0x08017f23
 8004774:	08017f46 	.word	0x08017f46
                } else if(vdb_buf_tmp->full != color.full) {
 8004778:	9b05      	ldr	r3, [sp, #20]
 800477a:	8819      	ldrh	r1, [r3, #0]
 800477c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800477e:	4299      	cmp	r1, r3
 8004780:	d0cf      	beq.n	8004722 <lv_draw_letter+0x2b2>
                    if(px_opa > LV_OPA_MAX)
 8004782:	2afb      	cmp	r2, #251	; 0xfb
 8004784:	d904      	bls.n	8004790 <lv_draw_letter+0x320>
                        *vdb_buf_tmp = color;
 8004786:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 800478a:	9a05      	ldr	r2, [sp, #20]
 800478c:	8013      	strh	r3, [r2, #0]
 800478e:	e7c8      	b.n	8004722 <lv_draw_letter+0x2b2>
                    else if(px_opa > LV_OPA_MIN) {
 8004790:	2a10      	cmp	r2, #16
 8004792:	d9c6      	bls.n	8004722 <lv_draw_letter+0x2b2>
                            *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
 8004794:	f8bd 0090 	ldrh.w	r0, [sp, #144]	; 0x90
 8004798:	f00e fe33 	bl	8013402 <lv_color_mix>
 800479c:	9b05      	ldr	r3, [sp, #20]
 800479e:	8018      	strh	r0, [r3, #0]
 80047a0:	e7bf      	b.n	8004722 <lv_draw_letter+0x2b2>
 80047a2:	bf00      	nop

080047a4 <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 80047a4:	4603      	mov	r3, r0
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 80047a6:	3830      	subs	r0, #48	; 0x30
 80047a8:	b2c0      	uxtb	r0, r0
 80047aa:	2809      	cmp	r0, #9
 80047ac:	d90b      	bls.n	80047c6 <hex_char_to_num+0x22>
        result = hex - '0';
    } else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 80047ae:	2b60      	cmp	r3, #96	; 0x60
 80047b0:	bf84      	itt	hi
 80047b2:	3b20      	subhi	r3, #32
 80047b4:	b2db      	uxtbhi	r3, r3

        switch(hex) {
 80047b6:	3b41      	subs	r3, #65	; 0x41
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b05      	cmp	r3, #5
 80047bc:	d802      	bhi.n	80047c4 <hex_char_to_num+0x20>
 80047be:	4a02      	ldr	r2, [pc, #8]	; (80047c8 <hex_char_to_num+0x24>)
 80047c0:	5cd0      	ldrb	r0, [r2, r3]
 80047c2:	4770      	bx	lr
{
 80047c4:	2000      	movs	r0, #0
            default: result = 0; break;
        }
    }

    return result;
}
 80047c6:	4770      	bx	lr
 80047c8:	08017fad 	.word	0x08017fad

080047cc <lv_draw_label>:
{
 80047cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d0:	b0a7      	sub	sp, #156	; 0x9c
 80047d2:	4605      	mov	r5, r0
 80047d4:	4614      	mov	r4, r2
    const lv_font_t * font = style->text.font;
 80047d6:	f8d2 a024 	ldr.w	sl, [r2, #36]	; 0x24
{
 80047da:	9308      	str	r3, [sp, #32]
 80047dc:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
 80047e0:	f89d 60c4 	ldrb.w	r6, [sp, #196]	; 0xc4
 80047e4:	930e      	str	r3, [sp, #56]	; 0x38
 80047e6:	f8bd 30d0 	ldrh.w	r3, [sp, #208]	; 0xd0
 80047ea:	9109      	str	r1, [sp, #36]	; 0x24
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 80047ec:	07b1      	lsls	r1, r6, #30
{
 80047ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	f8dd 90d4 	ldr.w	r9, [sp, #212]	; 0xd4
 80047f8:	930c      	str	r3, [sp, #48]	; 0x30
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 80047fa:	f100 8097 	bmi.w	800492c <lv_draw_label+0x160>
    return area_p->x2 - area_p->x1 + 1;
 80047fe:	8883      	ldrh	r3, [r0, #4]
 8004800:	8802      	ldrh	r2, [r0, #0]
 8004802:	3301      	adds	r3, #1
 8004804:	1a9b      	subs	r3, r3, r2
 8004806:	b21b      	sxth	r3, r3
    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
 8004808:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        w = p.x;
 800480a:	9306      	str	r3, [sp, #24]
    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
 800480c:	f89a 3008 	ldrb.w	r3, [sl, #8]
 8004810:	4413      	add	r3, r2
    pos.y = coords->y1;
 8004812:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
 8004816:	b21b      	sxth	r3, r3
    pos.y = coords->y1;
 8004818:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
 800481c:	9305      	str	r3, [sp, #20]
    pos.x = coords->x1;
 800481e:	882b      	ldrh	r3, [r5, #0]
 8004820:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    if(offset != NULL) {
 8004824:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 81fa 	beq.w	8004c20 <lv_draw_label+0x454>
        x_ofs = offset->x;
 800482c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004830:	930b      	str	r3, [sp, #44]	; 0x2c
        y_ofs = offset->y;
 8004832:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8004834:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        pos.y += y_ofs;
 8004838:	18d1      	adds	r1, r2, r3
 800483a:	f8ad 104e 	strh.w	r1, [sp, #78]	; 0x4e
    if(hint && y_ofs == 0) {
 800483e:	f1b9 0f00 	cmp.w	r9, #0
 8004842:	f000 81f3 	beq.w	8004c2c <lv_draw_label+0x460>
 8004846:	2b00      	cmp	r3, #0
 8004848:	f040 81f0 	bne.w	8004c2c <lv_draw_label+0x460>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 800484c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004850:	1a9b      	subs	r3, r3, r2
 8004852:	9a05      	ldr	r2, [sp, #20]
 8004854:	2b00      	cmp	r3, #0
 8004856:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 800485a:	bfb8      	it	lt
 800485c:	425b      	neglt	r3, r3
 800485e:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
            hint->line_start = -1;
 8004862:	bfc4      	itt	gt
 8004864:	f04f 33ff 	movgt.w	r3, #4294967295	; 0xffffffff
 8004868:	f8c9 3000 	strgt.w	r3, [r9]
        last_line_start = hint->line_start;
 800486c:	f8d9 3000 	ldr.w	r3, [r9]
    if(hint && last_line_start >= 0) {
 8004870:	2b00      	cmp	r3, #0
 8004872:	f2c0 81db 	blt.w	8004c2c <lv_draw_label+0x460>
        pos.y += hint->y;
 8004876:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
        line_start = last_line_start;
 800487a:	4698      	mov	r8, r3
        pos.y += hint->y;
 800487c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004880:	4413      	add	r3, r2
 8004882:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    uint32_t line_end = line_start + lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8004886:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8004888:	4651      	mov	r1, sl
 800488a:	9600      	str	r6, [sp, #0]
 800488c:	9b06      	ldr	r3, [sp, #24]
 800488e:	4440      	add	r0, r8
 8004890:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
 8004894:	f7fe fff0 	bl	8003878 <lv_txt_get_next_line>
 8004898:	eb00 0708 	add.w	r7, r0, r8
    while(pos.y + line_height < mask->y1) {
 800489c:	9a05      	ldr	r2, [sp, #20]
 800489e:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 80048a2:	4413      	add	r3, r2
 80048a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048a6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80048aa:	4293      	cmp	r3, r2
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 80048ac:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    while(pos.y + line_height < mask->y1) {
 80048ae:	db51      	blt.n	8004954 <lv_draw_label+0x188>
    if(flag & LV_TXT_FLAG_CENTER) {
 80048b0:	eb03 0008 	add.w	r0, r3, r8
 80048b4:	f016 0304 	ands.w	r3, r6, #4
 80048b8:	9311      	str	r3, [sp, #68]	; 0x44
 80048ba:	d075      	beq.n	80049a8 <lv_draw_label+0x1dc>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 80048bc:	eba7 0108 	sub.w	r1, r7, r8
 80048c0:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 80048c4:	4652      	mov	r2, sl
 80048c6:	9600      	str	r6, [sp, #0]
 80048c8:	b289      	uxth	r1, r1
 80048ca:	f7ff f859 	bl	8003980 <lv_txt_get_width>
 80048ce:	88ab      	ldrh	r3, [r5, #4]
 80048d0:	882a      	ldrh	r2, [r5, #0]
 80048d2:	3301      	adds	r3, #1
 80048d4:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 80048d6:	b21b      	sxth	r3, r3
 80048d8:	1a18      	subs	r0, r3, r0
 80048da:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80048de:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80048e2:	eb03 0060 	add.w	r0, r3, r0, asr #1
        pos.x += lv_area_get_width(coords) - line_width;
 80048e6:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 80048ea:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    lv_style_copy(&sel_style, &lv_style_plain_color);
 80048ee:	a817      	add	r0, sp, #92	; 0x5c
 80048f0:	49bd      	ldr	r1, [pc, #756]	; (8004be8 <lv_draw_label+0x41c>)
 80048f2:	9307      	str	r3, [sp, #28]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 80048f4:	9b08      	ldr	r3, [sp, #32]
 80048f6:	2bff      	cmp	r3, #255	; 0xff
 80048f8:	bf1f      	itttt	ne
 80048fa:	e9dd 3207 	ldrdne	r3, r2, [sp, #28]
 80048fe:	4353      	mulne	r3, r2
 8004900:	0a1b      	lsrne	r3, r3, #8
 8004902:	9307      	strne	r3, [sp, #28]
    lv_style_copy(&sel_style, &lv_style_plain_color);
 8004904:	f00b f9e1 	bl	800fcca <lv_style_copy>
    sel_style.body.main_color = sel_style.body.grad_color = style->text.sel_color;
 8004908:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800490a:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 800490e:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    uint16_t par_start = 0;
 8004912:	2300      	movs	r3, #0
 8004914:	930a      	str	r3, [sp, #40]	; 0x28
 8004916:	f006 0301 	and.w	r3, r6, #1
 800491a:	9310      	str	r3, [sp, #64]	; 0x40
    while(txt[line_start] != '\0') {
 800491c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800491e:	f813 3008 	ldrb.w	r3, [r3, r8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d154      	bne.n	80049d0 <lv_draw_label+0x204>
}
 8004926:	b027      	add	sp, #156	; 0x9c
 8004928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_txt_get_size(&p, txt, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX,
 800492c:	f647 4318 	movw	r3, #31768	; 0x7c18
 8004930:	9602      	str	r6, [sp, #8]
 8004932:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8004934:	a817      	add	r0, sp, #92	; 0x5c
 8004936:	9301      	str	r3, [sp, #4]
 8004938:	f9b2 302a 	ldrsh.w	r3, [r2, #42]	; 0x2a
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	f9b2 3028 	ldrsh.w	r3, [r2, #40]	; 0x28
 8004942:	4652      	mov	r2, sl
 8004944:	f00b fdc5 	bl	80104d2 <lv_txt_get_size>
        w = p.x;
 8004948:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 800494c:	e75c      	b.n	8004808 <lv_draw_label+0x3c>
    lv_coord_t x_ofs = 0;
 800494e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8004950:	930b      	str	r3, [sp, #44]	; 0x2c
 8004952:	e77b      	b.n	800484c <lv_draw_label+0x80>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8004954:	443b      	add	r3, r7
 8004956:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
 800495a:	9600      	str	r6, [sp, #0]
 800495c:	4651      	mov	r1, sl
 800495e:	9307      	str	r3, [sp, #28]
 8004960:	9807      	ldr	r0, [sp, #28]
 8004962:	9b06      	ldr	r3, [sp, #24]
 8004964:	f7fe ff88 	bl	8003878 <lv_txt_get_next_line>
        pos.y += line_height;
 8004968:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 800496c:	9a05      	ldr	r2, [sp, #20]
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800496e:	4438      	add	r0, r7
        pos.y += line_height;
 8004970:	4413      	add	r3, r2
 8004972:	b21b      	sxth	r3, r3
 8004974:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 8004978:	f1b9 0f00 	cmp.w	r9, #0
 800497c:	d00d      	beq.n	800499a <lv_draw_label+0x1ce>
 800497e:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8004982:	db0a      	blt.n	800499a <lv_draw_label+0x1ce>
 8004984:	f8d9 2000 	ldr.w	r2, [r9]
 8004988:	2a00      	cmp	r2, #0
            hint->y          = pos.y - coords->y1;
 800498a:	bfbf      	itttt	lt
 800498c:	f9b5 2002 	ldrshlt.w	r2, [r5, #2]
            hint->line_start = line_start;
 8004990:	f8c9 7000 	strlt.w	r7, [r9]
            hint->y          = pos.y - coords->y1;
 8004994:	1a9b      	sublt	r3, r3, r2
            hint->coord_y    = coords->y1;
 8004996:	e9c9 3201 	strdlt	r3, r2, [r9, #4]
        if(txt[line_start] == '\0') return;
 800499a:	9b07      	ldr	r3, [sp, #28]
 800499c:	46b8      	mov	r8, r7
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0c0      	beq.n	8004926 <lv_draw_label+0x15a>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 80049a4:	4607      	mov	r7, r0
 80049a6:	e779      	b.n	800489c <lv_draw_label+0xd0>
    else if(flag & LV_TXT_FLAG_RIGHT) {
 80049a8:	0732      	lsls	r2, r6, #28
 80049aa:	d59e      	bpl.n	80048ea <lv_draw_label+0x11e>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 80049ac:	eba7 0108 	sub.w	r1, r7, r8
 80049b0:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 80049b4:	4652      	mov	r2, sl
 80049b6:	9600      	str	r6, [sp, #0]
 80049b8:	b289      	uxth	r1, r1
 80049ba:	f7fe ffe1 	bl	8003980 <lv_txt_get_width>
        pos.x += lv_area_get_width(coords) - line_width;
 80049be:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80049c2:	88aa      	ldrh	r2, [r5, #4]
 80049c4:	3301      	adds	r3, #1
 80049c6:	4413      	add	r3, r2
 80049c8:	882a      	ldrh	r2, [r5, #0]
 80049ca:	1a9b      	subs	r3, r3, r2
 80049cc:	1a18      	subs	r0, r3, r0
 80049ce:	e78a      	b.n	80048e6 <lv_draw_label+0x11a>
        if(offset != NULL) {
 80049d0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80049d2:	b12b      	cbz	r3, 80049e0 <lv_draw_label+0x214>
            pos.x += x_ofs;
 80049d4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80049d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80049da:	4413      	add	r3, r2
 80049dc:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        i         = line_start;
 80049e0:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
                        cmd_state = CMD_STATE_WAIT;
 80049e4:	f04f 0800 	mov.w	r8, #0
 80049e8:	e01f      	b.n	8004a2a <lv_draw_label+0x25e>
            letter      = lv_txt_encoded_next(txt, &i);
 80049ea:	f8df 9204 	ldr.w	r9, [pc, #516]	; 8004bf0 <lv_draw_label+0x424>
 80049ee:	a914      	add	r1, sp, #80	; 0x50
 80049f0:	9830      	ldr	r0, [sp, #192]	; 0xc0
 80049f2:	f8d9 3000 	ldr.w	r3, [r9]
 80049f6:	4798      	blx	r3
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 80049f8:	9a30      	ldr	r2, [sp, #192]	; 0xc0
            letter      = lv_txt_encoded_next(txt, &i);
 80049fa:	9008      	str	r0, [sp, #32]
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 80049fc:	2100      	movs	r1, #0
 80049fe:	9814      	ldr	r0, [sp, #80]	; 0x50
 8004a00:	f8d9 3000 	ldr.w	r3, [r9]
 8004a04:	4410      	add	r0, r2
 8004a06:	4798      	blx	r3
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8004a08:	9b10      	ldr	r3, [sp, #64]	; 0x40
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8004a0a:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 80e5 	beq.w	8004bdc <lv_draw_label+0x410>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8004a12:	9b08      	ldr	r3, [sp, #32]
 8004a14:	2b23      	cmp	r3, #35	; 0x23
 8004a16:	f040 8099 	bne.w	8004b4c <lv_draw_label+0x380>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 8004a1a:	f1b8 0f00 	cmp.w	r8, #0
 8004a1e:	d141      	bne.n	8004aa4 <lv_draw_label+0x2d8>
                        par_start = i;
 8004a20:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
                        cmd_state = CMD_STATE_PAR;
 8004a24:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
                        par_start = i;
 8004a28:	930a      	str	r3, [sp, #40]	; 0x28
        while(i < line_end) {
 8004a2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004a2c:	42bb      	cmp	r3, r7
 8004a2e:	d3dc      	bcc.n	80049ea <lv_draw_label+0x21e>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8004a30:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8004a32:	4651      	mov	r1, sl
 8004a34:	9600      	str	r6, [sp, #0]
 8004a36:	eb03 0807 	add.w	r8, r3, r7
 8004a3a:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
 8004a3e:	9b06      	ldr	r3, [sp, #24]
 8004a40:	4640      	mov	r0, r8
 8004a42:	f7fe ff19 	bl	8003878 <lv_txt_get_next_line>
        pos.x = coords->x1;
 8004a46:	882b      	ldrh	r3, [r5, #0]
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8004a48:	4601      	mov	r1, r0
 8004a4a:	eb00 0907 	add.w	r9, r0, r7
        pos.x = coords->x1;
 8004a4e:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        if(flag & LV_TXT_FLAG_CENTER) {
 8004a52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 80d0 	beq.w	8004bfa <lv_draw_label+0x42e>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 8004a5a:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8004a5e:	4652      	mov	r2, sl
 8004a60:	9600      	str	r6, [sp, #0]
 8004a62:	4640      	mov	r0, r8
 8004a64:	f7fe ff8c 	bl	8003980 <lv_txt_get_width>
 8004a68:	88ab      	ldrh	r3, [r5, #4]
 8004a6a:	882a      	ldrh	r2, [r5, #0]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 8004a70:	b21b      	sxth	r3, r3
 8004a72:	1a18      	subs	r0, r3, r0
 8004a74:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8004a78:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004a7c:	eb03 0060 	add.w	r0, r3, r0, asr #1
            pos.x += lv_area_get_width(coords) - line_width;
 8004a80:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
        pos.y += line_height;
 8004a84:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8004a88:	46b8      	mov	r8, r7
 8004a8a:	9a05      	ldr	r2, [sp, #20]
 8004a8c:	4413      	add	r3, r2
        if(pos.y > mask->y2) return;
 8004a8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
        pos.y += line_height;
 8004a90:	b21b      	sxth	r3, r3
        if(pos.y > mask->y2) return;
 8004a92:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8004a96:	429a      	cmp	r2, r3
        pos.y += line_height;
 8004a98:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        if(pos.y > mask->y2) return;
 8004a9c:	f6ff af43 	blt.w	8004926 <lv_draw_label+0x15a>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8004aa0:	464f      	mov	r7, r9
 8004aa2:	e73b      	b.n	800491c <lv_draw_label+0x150>
                    } else if(cmd_state == CMD_STATE_PAR) { /*Other start char in parameter escaped cmd. char */
 8004aa4:	f1b8 0f01 	cmp.w	r8, #1
 8004aa8:	f000 80a4 	beq.w	8004bf4 <lv_draw_label+0x428>
                    } else if(cmd_state == CMD_STATE_IN) { /*Command end */
 8004aac:	f1b8 0f02 	cmp.w	r8, #2
 8004ab0:	d098      	beq.n	80049e4 <lv_draw_label+0x218>
            lv_color_t color = style->text.color;
 8004ab2:	8c23      	ldrh	r3, [r4, #32]
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8004ab4:	9908      	ldr	r1, [sp, #32]
 8004ab6:	4650      	mov	r0, sl
            if(cmd_state == CMD_STATE_IN) color = recolor;
 8004ab8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8004abc:	f00f faff 	bl	80140be <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8004ac0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ac4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8004ac6:	fa0f f980 	sxth.w	r9, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d026      	beq.n	8004b1c <lv_draw_label+0x350>
 8004ace:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d023      	beq.n	8004b1c <lv_draw_label+0x350>
                int char_ind = lv_encoded_get_char_id(txt, i);
 8004ad4:	4b45      	ldr	r3, [pc, #276]	; (8004bec <lv_draw_label+0x420>)
 8004ad6:	9914      	ldr	r1, [sp, #80]	; 0x50
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8004adc:	4798      	blx	r3
                if(char_ind > sel_start && char_ind <= sel_end) {
 8004ade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ae0:	4283      	cmp	r3, r0
 8004ae2:	da1b      	bge.n	8004b1c <lv_draw_label+0x350>
 8004ae4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ae6:	4283      	cmp	r3, r0
 8004ae8:	db18      	blt.n	8004b1c <lv_draw_label+0x350>
                    sel_coords.x1 = pos.x;
 8004aea:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
 8004aee:	a815      	add	r0, sp, #84	; 0x54
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 8004af0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
                    sel_coords.x1 = pos.x;
 8004af2:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 8004af6:	3b01      	subs	r3, #1
                    sel_coords.y1 = pos.y;
 8004af8:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 8004afc:	440b      	add	r3, r1
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
 8004afe:	9909      	ldr	r1, [sp, #36]	; 0x24
                    sel_coords.y1 = pos.y;
 8004b00:	f8ad 2056 	strh.w	r2, [sp, #86]	; 0x56
                    sel_coords.y2 = pos.y + line_height - 1;
 8004b04:	3a01      	subs	r2, #1
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 8004b06:	444b      	add	r3, r9
 8004b08:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
                    sel_coords.y2 = pos.y + line_height - 1;
 8004b0c:	9b05      	ldr	r3, [sp, #20]
 8004b0e:	441a      	add	r2, r3
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
 8004b10:	9b07      	ldr	r3, [sp, #28]
                    sel_coords.y2 = pos.y + line_height - 1;
 8004b12:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
 8004b16:	aa17      	add	r2, sp, #92	; 0x5c
 8004b18:	f00c fd9f 	bl	801165a <lv_draw_rect>
            lv_draw_letter(&pos, mask, font, letter, color, opa);
 8004b1c:	9b07      	ldr	r3, [sp, #28]
 8004b1e:	4652      	mov	r2, sl
 8004b20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b22:	a813      	add	r0, sp, #76	; 0x4c
 8004b24:	9301      	str	r3, [sp, #4]
 8004b26:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8004b2a:	f8ad 3000 	strh.w	r3, [sp]
 8004b2e:	9b08      	ldr	r3, [sp, #32]
 8004b30:	f7ff fc9e 	bl	8004470 <lv_draw_letter>
            if(letter_w > 0) {
 8004b34:	f1b9 0f00 	cmp.w	r9, #0
 8004b38:	f77f af77 	ble.w	8004a2a <lv_draw_label+0x25e>
                pos.x += letter_w + style->text.letter_space;
 8004b3c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8004b40:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004b42:	4413      	add	r3, r2
 8004b44:	4499      	add	r9, r3
 8004b46:	f8ad 904c 	strh.w	r9, [sp, #76]	; 0x4c
 8004b4a:	e76e      	b.n	8004a2a <lv_draw_label+0x25e>
                if(cmd_state == CMD_STATE_PAR) {
 8004b4c:	f1b8 0f01 	cmp.w	r8, #1
 8004b50:	d144      	bne.n	8004bdc <lv_draw_label+0x410>
                    if(letter == ' ') {
 8004b52:	9b08      	ldr	r3, [sp, #32]
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	f47f af68 	bne.w	8004a2a <lv_draw_label+0x25e>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 8004b5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004b5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b5e:	1a9b      	subs	r3, r3, r2
 8004b60:	2b07      	cmp	r3, #7
 8004b62:	d139      	bne.n	8004bd8 <lv_draw_label+0x40c>
                            memcpy(buf, &txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 8004b64:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8004b66:	2206      	movs	r2, #6
 8004b68:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004b6a:	a815      	add	r0, sp, #84	; 0x54
 8004b6c:	1859      	adds	r1, r3, r1
 8004b6e:	f011 fdff 	bl	8016770 <memcpy>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 8004b72:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 8004b76:	f7ff fe15 	bl	80047a4 <hex_char_to_num>
 8004b7a:	4601      	mov	r1, r0
 8004b7c:	f89d 0055 	ldrb.w	r0, [sp, #85]	; 0x55
 8004b80:	f7ff fe10 	bl	80047a4 <hex_char_to_num>
 8004b84:	eb00 1101 	add.w	r1, r0, r1, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 8004b88:	f89d 0056 	ldrb.w	r0, [sp, #86]	; 0x56
 8004b8c:	f7ff fe0a 	bl	80047a4 <hex_char_to_num>
 8004b90:	4680      	mov	r8, r0
 8004b92:	f89d 0057 	ldrb.w	r0, [sp, #87]	; 0x57
 8004b96:	f7ff fe05 	bl	80047a4 <hex_char_to_num>
 8004b9a:	eb00 1808 	add.w	r8, r0, r8, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 8004b9e:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 8004ba2:	f7ff fdff 	bl	80047a4 <hex_char_to_num>
 8004ba6:	4681      	mov	r9, r0
 8004ba8:	f89d 0059 	ldrb.w	r0, [sp, #89]	; 0x59
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{b8 >> 3, g8 >> 2, r8 >> 3}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
    lv_color_t color;
    color.ch.blue  = (uint16_t)(b8 >> 3);
    color.ch.green = (uint16_t)(g8 >> 2);
 8004bac:	f3c8 0885 	ubfx	r8, r8, #2, #6
 8004bb0:	f7ff fdf8 	bl	80047a4 <hex_char_to_num>
    color.ch.red   = (uint16_t)(r8 >> 3);
 8004bb4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8004bb8:	eb00 1009 	add.w	r0, r0, r9, lsl #4
    color.ch.blue  = (uint16_t)(b8 >> 3);
 8004bbc:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8004bc0:	f360 0b04 	bfi	fp, r0, #0, #5
 8004bc4:	f368 1b4a 	bfi	fp, r8, #5, #6
 8004bc8:	f361 2bcf 	bfi	fp, r1, #11, #5
 8004bcc:	fa1f f38b 	uxth.w	r3, fp
                            recolor.full = style->text.color.full;
 8004bd0:	930c      	str	r3, [sp, #48]	; 0x30
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 8004bd2:	f04f 0802 	mov.w	r8, #2
 8004bd6:	e728      	b.n	8004a2a <lv_draw_label+0x25e>
                            recolor.full = style->text.color.full;
 8004bd8:	8c23      	ldrh	r3, [r4, #32]
 8004bda:	e7f9      	b.n	8004bd0 <lv_draw_label+0x404>
            if(cmd_state == CMD_STATE_IN) color = recolor;
 8004bdc:	f1b8 0f02 	cmp.w	r8, #2
 8004be0:	f47f af67 	bne.w	8004ab2 <lv_draw_label+0x2e6>
 8004be4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004be6:	e765      	b.n	8004ab4 <lv_draw_label+0x2e8>
 8004be8:	20020560 	.word	0x20020560
 8004bec:	2002da44 	.word	0x2002da44
 8004bf0:	2002da4c 	.word	0x2002da4c
                        cmd_state = CMD_STATE_WAIT;
 8004bf4:	f04f 0800 	mov.w	r8, #0
 8004bf8:	e75b      	b.n	8004ab2 <lv_draw_label+0x2e6>
        else if(flag & LV_TXT_FLAG_RIGHT) {
 8004bfa:	0733      	lsls	r3, r6, #28
 8004bfc:	f57f af42 	bpl.w	8004a84 <lv_draw_label+0x2b8>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 8004c00:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8004c04:	4652      	mov	r2, sl
 8004c06:	9600      	str	r6, [sp, #0]
 8004c08:	4640      	mov	r0, r8
 8004c0a:	f7fe feb9 	bl	8003980 <lv_txt_get_width>
            pos.x += lv_area_get_width(coords) - line_width;
 8004c0e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8004c12:	88aa      	ldrh	r2, [r5, #4]
 8004c14:	3301      	adds	r3, #1
 8004c16:	4413      	add	r3, r2
 8004c18:	882a      	ldrh	r2, [r5, #0]
 8004c1a:	1a9b      	subs	r3, r3, r2
 8004c1c:	1a18      	subs	r0, r3, r0
 8004c1e:	e72f      	b.n	8004a80 <lv_draw_label+0x2b4>
    if(hint && y_ofs == 0) {
 8004c20:	f1b9 0f00 	cmp.w	r9, #0
 8004c24:	f47f ae93 	bne.w	800494e <lv_draw_label+0x182>
    lv_coord_t x_ofs = 0;
 8004c28:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    uint32_t line_start     = 0;
 8004c2c:	f04f 0800 	mov.w	r8, #0
 8004c30:	e629      	b.n	8004886 <lv_draw_label+0xba>
 8004c32:	bf00      	nop

08004c34 <lv_img_decoder_built_in_line_alpha>:
#endif
}

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
 8004c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c38:	469a      	mov	sl, r3
 8004c3a:	f5ad 7d4f 	sub.w	sp, sp, #828	; 0x33c

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8004c3e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
{
 8004c42:	4605      	mov	r5, r0
 8004c44:	460c      	mov	r4, r1
 8004c46:	4616      	mov	r6, r2
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8004c48:	f8ad 3000 	strh.w	r3, [sp]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8004c4c:	f5a3 03ad 	sub.w	r3, r3, #5668864	; 0x568000
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8004c50:	af02      	add	r7, sp, #8
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8004c52:	f5a3 5328 	sub.w	r3, r3, #10752	; 0x2a00
 8004c56:	9301      	str	r3, [sp, #4]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8004c58:	4b5c      	ldr	r3, [pc, #368]	; (8004dcc <lv_img_decoder_built_in_line_alpha+0x198>)
 8004c5a:	f103 0c10 	add.w	ip, r3, #16
 8004c5e:	6818      	ldr	r0, [r3, #0]
 8004c60:	3308      	adds	r3, #8
 8004c62:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8004c66:	463a      	mov	r2, r7
 8004c68:	4563      	cmp	r3, ip
 8004c6a:	c203      	stmia	r2!, {r0, r1}
 8004c6c:	4617      	mov	r7, r2
 8004c6e:	d1f6      	bne.n	8004c5e <lv_img_decoder_built_in_line_alpha+0x2a>
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255};

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->style->image.color;
 8004c70:	68ab      	ldr	r3, [r5, #8]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 8004c72:	2200      	movs	r2, #0
    lv_color_t bg_color = dsc->style->image.color;
 8004c74:	8e19      	ldrh	r1, [r3, #48]	; 0x30
    for(i = 0; i < len; i++) {
 8004c76:	9bd8      	ldr	r3, [sp, #864]	; 0x360
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 8004c78:	0a0f      	lsrs	r7, r1, #8
    for(i = 0; i < len; i++) {
 8004c7a:	b210      	sxth	r0, r2
 8004c7c:	3303      	adds	r3, #3
 8004c7e:	4582      	cmp	sl, r0
 8004c80:	dc13      	bgt.n	8004caa <lv_img_decoder_built_in_line_alpha+0x76>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 8004c82:	7c28      	ldrb	r0, [r5, #16]
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8004c84:	2701      	movs	r7, #1
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 8004c86:	f000 001f 	and.w	r0, r0, #31
 8004c8a:	f7ff f9d3 	bl	8004034 <lv_img_color_format_get_px_size>

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
 8004c8e:	7c2b      	ldrb	r3, [r5, #16]
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8004c90:	4087      	lsls	r7, r0
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 8004c92:	4680      	mov	r8, r0
    switch(dsc->header.cf) {
 8004c94:	f003 031f 	and.w	r3, r3, #31
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8004c98:	3f01      	subs	r7, #1
    switch(dsc->header.cf) {
 8004c9a:	3b0b      	subs	r3, #11
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8004c9c:	b2bf      	uxth	r7, r7
    switch(dsc->header.cf) {
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d862      	bhi.n	8004d68 <lv_img_decoder_built_in_line_alpha+0x134>
 8004ca2:	e8df f003 	tbb	[pc, r3]
 8004ca6:	3108      	.short	0x3108
 8004ca8:	5744      	.short	0x5744
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 8004caa:	f803 1c03 	strb.w	r1, [r3, #-3]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 8004cae:	3201      	adds	r2, #1
 8004cb0:	f803 7c02 	strb.w	r7, [r3, #-2]
 8004cb4:	e7e1      	b.n	8004c7a <lv_img_decoder_built_in_line_alpha+0x46>
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 8004cb6:	692b      	ldr	r3, [r5, #16]
 8004cb8:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8004cbc:	ea4f 09d3 	mov.w	r9, r3, lsr #3
            if(dsc->header.w & 0x7) w++;
 8004cc0:	0759      	lsls	r1, r3, #29
            ofs += w * y + (x >> 3); /*First pixel*/
 8004cc2:	ea4f 01e4 	mov.w	r1, r4, asr #3
            pos       = 7 - (x & 0x7);
 8004cc6:	ea6f 0404 	mvn.w	r4, r4
            if(dsc->header.w & 0x7) w++;
 8004cca:	bf18      	it	ne
 8004ccc:	f109 0901 	addne.w	r9, r9, #1
            pos       = 7 - (x & 0x7);
 8004cd0:	f004 0407 	and.w	r4, r4, #7
            ofs += w * y + (x >> 3); /*First pixel*/
 8004cd4:	fb09 1106 	mla	r1, r9, r6, r1
            opa_table = alpha1_opa_table;
 8004cd8:	466e      	mov	r6, sp
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8004cda:	7b2b      	ldrb	r3, [r5, #12]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d147      	bne.n	8004d70 <lv_img_decoder_built_in_line_alpha+0x13c>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
 8004ce0:	686b      	ldr	r3, [r5, #4]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	4411      	add	r1, r2
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
 8004ce6:	fa4f f888 	sxtb.w	r8, r8
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8004cea:	9bd8      	ldr	r3, [sp, #864]	; 0x360
        data_tmp = fs_buf;
 8004cec:	2200      	movs	r2, #0
        if(pos < 0) {
            pos = 8 - px_size;
 8004cee:	f1c8 0008 	rsb	r0, r8, #8
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8004cf2:	f103 0902 	add.w	r9, r3, #2
            pos = 8 - px_size;
 8004cf6:	b240      	sxtb	r0, r0
    for(i = 0; i < len; i++) {
 8004cf8:	b213      	sxth	r3, r2
 8004cfa:	459a      	cmp	sl, r3
 8004cfc:	dc48      	bgt.n	8004d90 <lv_img_decoder_built_in_line_alpha+0x15c>

#else
    LV_LOG_WARN("Image built-in alpha line reader failed because LV_IMG_CF_ALPHA is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
 8004cfe:	2001      	movs	r0, #1
 8004d00:	f50d 7d4f 	add.w	sp, sp, #828	; 0x33c
 8004d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8004d08:	692b      	ldr	r3, [r5, #16]
            ofs += w * y + (x >> 2); /*First pixel*/
 8004d0a:	10a1      	asrs	r1, r4, #2
            pos       = 6 - ((x & 0x3) * 2);
 8004d0c:	43e4      	mvns	r4, r4
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8004d0e:	f3c3 238a 	ubfx	r3, r3, #10, #11
            pos       = 6 - ((x & 0x3) * 2);
 8004d12:	f004 0403 	and.w	r4, r4, #3
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8004d16:	ea4f 0993 	mov.w	r9, r3, lsr #2
            if(dsc->header.w & 0x3) w++;
 8004d1a:	079a      	lsls	r2, r3, #30
            pos       = 6 - ((x & 0x3) * 2);
 8004d1c:	ea4f 0444 	mov.w	r4, r4, lsl #1
            if(dsc->header.w & 0x3) w++;
 8004d20:	bf18      	it	ne
 8004d22:	f109 0901 	addne.w	r9, r9, #1
            ofs += w * y + (x >> 2); /*First pixel*/
 8004d26:	fb09 1106 	mla	r1, r9, r6, r1
            opa_table = alpha2_opa_table;
 8004d2a:	ae01      	add	r6, sp, #4
            break;
 8004d2c:	e7d5      	b.n	8004cda <lv_img_decoder_built_in_line_alpha+0xa6>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8004d2e:	692b      	ldr	r3, [r5, #16]
            ofs += w * y + (x >> 1); /*First pixel*/
 8004d30:	1061      	asrs	r1, r4, #1
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8004d32:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8004d36:	ea4f 0953 	mov.w	r9, r3, lsr #1
            if(dsc->header.w & 0x1) w++;
 8004d3a:	07db      	lsls	r3, r3, #31
 8004d3c:	bf48      	it	mi
 8004d3e:	f109 0901 	addmi.w	r9, r9, #1
            pos       = 4 - ((x & 0x1) * 4);
 8004d42:	f014 0f01 	tst.w	r4, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 8004d46:	fb09 1106 	mla	r1, r9, r6, r1
            pos       = 4 - ((x & 0x1) * 4);
 8004d4a:	bf0c      	ite	eq
 8004d4c:	2404      	moveq	r4, #4
 8004d4e:	2400      	movne	r4, #0
 8004d50:	ae02      	add	r6, sp, #8
 8004d52:	e7c2      	b.n	8004cda <lv_img_decoder_built_in_line_alpha+0xa6>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8004d54:	6929      	ldr	r1, [r5, #16]
 8004d56:	f3c1 218a 	ubfx	r1, r1, #10, #11
 8004d5a:	fa0f f981 	sxth.w	r9, r1
            ofs += w * y + x;  /*First pixel*/
 8004d5e:	fb16 4101 	smlabb	r1, r6, r1, r4
            pos = 0;
 8004d62:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
 8004d64:	4626      	mov	r6, r4
 8004d66:	e7b8      	b.n	8004cda <lv_img_decoder_built_in_line_alpha+0xa6>
    int8_t pos   = 0;
 8004d68:	2400      	movs	r4, #0
    uint32_t ofs = 0;
 8004d6a:	4621      	mov	r1, r4
    lv_coord_t w = 0;
 8004d6c:	46a1      	mov	r9, r4
 8004d6e:	e7f9      	b.n	8004d64 <lv_img_decoder_built_in_line_alpha+0x130>
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8004d70:	f8d5 b020 	ldr.w	fp, [r5, #32]
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 8004d74:	3104      	adds	r1, #4
 8004d76:	f8db 0000 	ldr.w	r0, [fp]
 8004d7a:	f00b f916 	bl	800ffaa <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 8004d7e:	a906      	add	r1, sp, #24
 8004d80:	2300      	movs	r3, #0
 8004d82:	464a      	mov	r2, r9
 8004d84:	f8db 0000 	ldr.w	r0, [fp]
 8004d88:	f00b f8f4 	bl	800ff74 <lv_fs_read>
        data_tmp = fs_buf;
 8004d8c:	a906      	add	r1, sp, #24
 8004d8e:	e7aa      	b.n	8004ce6 <lv_img_decoder_built_in_line_alpha+0xb2>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 8004d90:	780b      	ldrb	r3, [r1, #0]
 8004d92:	fa07 fc04 	lsl.w	ip, r7, r4
 8004d96:	ea03 030c 	and.w	r3, r3, ip
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8004d9a:	f895 c010 	ldrb.w	ip, [r5, #16]
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 8004d9e:	4123      	asrs	r3, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8004da0:	f00c 0c1f 	and.w	ip, ip, #31
        pos -= px_size;
 8004da4:	eba4 0408 	sub.w	r4, r4, r8
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8004da8:	f1bc 0f0e 	cmp.w	ip, #14
 8004dac:	b2db      	uxtb	r3, r3
        pos -= px_size;
 8004dae:	b264      	sxtb	r4, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8004db0:	bf18      	it	ne
 8004db2:	5cf3      	ldrbne	r3, [r6, r3]
 8004db4:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
        if(pos < 0) {
 8004db8:	2c00      	cmp	r4, #0
 8004dba:	f102 0201 	add.w	r2, r2, #1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8004dbe:	f809 300c 	strb.w	r3, [r9, ip]
            pos = 8 - px_size;
 8004dc2:	bfbc      	itt	lt
 8004dc4:	4604      	movlt	r4, r0
            data_tmp++;
 8004dc6:	3101      	addlt	r1, #1
 8004dc8:	e796      	b.n	8004cf8 <lv_img_decoder_built_in_line_alpha+0xc4>
 8004dca:	bf00      	nop
 8004dcc:	0801724c 	.word	0x0801724c

08004dd0 <lv_img_decoder_built_in_read_line>:
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8004dd0:	7c08      	ldrb	r0, [r1, #16]
{
 8004dd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dd6:	469b      	mov	fp, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8004dd8:	f000 031e 	and.w	r3, r0, #30
{
 8004ddc:	b085      	sub	sp, #20
 8004dde:	4689      	mov	r9, r1
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8004de0:	2b04      	cmp	r3, #4
{
 8004de2:	4692      	mov	sl, r2
 8004de4:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8004de8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8004dea:	d003      	beq.n	8004df4 <lv_img_decoder_built_in_read_line+0x24>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8004dec:	f000 031f 	and.w	r3, r0, #31
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8004df0:	2b06      	cmp	r3, #6
 8004df2:	d132      	bne.n	8004e5a <lv_img_decoder_built_in_read_line+0x8a>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8004df4:	f899 400c 	ldrb.w	r4, [r9, #12]
 8004df8:	2c01      	cmp	r4, #1
 8004dfa:	d11a      	bne.n	8004e32 <lv_img_decoder_built_in_read_line+0x62>
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 8004dfc:	f000 001f 	and.w	r0, r0, #31
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8004e00:	f8d9 6020 	ldr.w	r6, [r9, #32]
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 8004e04:	f7ff f916 	bl	8004034 <lv_img_color_format_get_px_size>
 8004e08:	4607      	mov	r7, r0
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8004e0a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8004e0e:	f3c0 208a 	ubfx	r0, r0, #10, #11
 8004e12:	fb1b a100 	smlabb	r1, fp, r0, sl
    res = lv_fs_seek(user_data->f, pos);
 8004e16:	6830      	ldr	r0, [r6, #0]
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8004e18:	4379      	muls	r1, r7
 8004e1a:	10c9      	asrs	r1, r1, #3
    res = lv_fs_seek(user_data->f, pos);
 8004e1c:	3104      	adds	r1, #4
 8004e1e:	f00b f8c4 	bl	800ffaa <lv_fs_seek>
    if(res != LV_FS_RES_OK) {
 8004e22:	b140      	cbz	r0, 8004e36 <lv_img_decoder_built_in_read_line+0x66>
        LV_LOG_WARN("Built-in image decoder seek failed");
 8004e24:	4b1c      	ldr	r3, [pc, #112]	; (8004e98 <lv_img_decoder_built_in_read_line+0xc8>)
 8004e26:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
 8004e2a:	491c      	ldr	r1, [pc, #112]	; (8004e9c <lv_img_decoder_built_in_read_line+0xcc>)
 8004e2c:	2002      	movs	r0, #2
 8004e2e:	f7fe fbf1 	bl	8003614 <lv_log_add>
    lv_res_t res = LV_RES_INV;
 8004e32:	2400      	movs	r4, #0
 8004e34:	e01d      	b.n	8004e72 <lv_img_decoder_built_in_read_line+0xa2>
    uint32_t btr = len * (px_size >> 3);
 8004e36:	f3c7 07c7 	ubfx	r7, r7, #3, #8
    uint32_t br  = 0;
 8004e3a:	9003      	str	r0, [sp, #12]
    lv_fs_read(user_data->f, buf, btr, &br);
 8004e3c:	ab03      	add	r3, sp, #12
 8004e3e:	4629      	mov	r1, r5
    uint32_t btr = len * (px_size >> 3);
 8004e40:	fb17 f708 	smulbb	r7, r7, r8
    lv_fs_read(user_data->f, buf, btr, &br);
 8004e44:	6830      	ldr	r0, [r6, #0]
 8004e46:	463a      	mov	r2, r7
 8004e48:	f00b f894 	bl	800ff74 <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 8004e4c:	9b03      	ldr	r3, [sp, #12]
 8004e4e:	429f      	cmp	r7, r3
 8004e50:	d00f      	beq.n	8004e72 <lv_img_decoder_built_in_read_line+0xa2>
        LV_LOG_WARN("Built-in image decoder read failed");
 8004e52:	4b13      	ldr	r3, [pc, #76]	; (8004ea0 <lv_img_decoder_built_in_read_line+0xd0>)
 8004e54:	f240 12ef 	movw	r2, #495	; 0x1ef
 8004e58:	e7e7      	b.n	8004e2a <lv_img_decoder_built_in_read_line+0x5a>
    } else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8004e5a:	f1a3 020b 	sub.w	r2, r3, #11
 8004e5e:	2a03      	cmp	r2, #3
 8004e60:	d80b      	bhi.n	8004e7a <lv_img_decoder_built_in_read_line+0xaa>
        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
 8004e62:	9500      	str	r5, [sp, #0]
 8004e64:	4643      	mov	r3, r8
 8004e66:	465a      	mov	r2, fp
 8004e68:	4651      	mov	r1, sl
 8004e6a:	4648      	mov	r0, r9
 8004e6c:	f7ff fee2 	bl	8004c34 <lv_img_decoder_built_in_line_alpha>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 8004e70:	4604      	mov	r4, r0
}
 8004e72:	4620      	mov	r0, r4
 8004e74:	b005      	add	sp, #20
 8004e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 8004e7a:	3b07      	subs	r3, #7
 8004e7c:	2b03      	cmp	r3, #3
 8004e7e:	d807      	bhi.n	8004e90 <lv_img_decoder_built_in_read_line+0xc0>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 8004e80:	9500      	str	r5, [sp, #0]
 8004e82:	4643      	mov	r3, r8
 8004e84:	465a      	mov	r2, fp
 8004e86:	4651      	mov	r1, sl
 8004e88:	4648      	mov	r0, r9
 8004e8a:	f00e fd4c 	bl	8013926 <lv_img_decoder_built_in_line_indexed>
 8004e8e:	e7ef      	b.n	8004e70 <lv_img_decoder_built_in_read_line+0xa0>
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
 8004e90:	4b04      	ldr	r3, [pc, #16]	; (8004ea4 <lv_img_decoder_built_in_read_line+0xd4>)
 8004e92:	f240 12c1 	movw	r2, #449	; 0x1c1
 8004e96:	e7c8      	b.n	8004e2a <lv_img_decoder_built_in_read_line+0x5a>
 8004e98:	0801805a 	.word	0x0801805a
 8004e9c:	0801807d 	.word	0x0801807d
 8004ea0:	080180e5 	.word	0x080180e5
 8004ea4:	08018108 	.word	0x08018108

08004ea8 <lv_img_decoder_built_in_open>:
{
 8004ea8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8004eac:	7b0b      	ldrb	r3, [r1, #12]
{
 8004eae:	4606      	mov	r6, r0
 8004eb0:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d14e      	bne.n	8004f54 <lv_img_decoder_built_in_open+0xac>
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 8004eb6:	6848      	ldr	r0, [r1, #4]
 8004eb8:	f7fe fb96 	bl	80035e8 <lv_fs_get_ext>
 8004ebc:	496d      	ldr	r1, [pc, #436]	; (8005074 <lv_img_decoder_built_in_open+0x1cc>)
 8004ebe:	f011 fc4b 	bl	8016758 <strcmp>
 8004ec2:	b960      	cbnz	r0, 8004ede <lv_img_decoder_built_in_open+0x36>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 8004ec4:	2202      	movs	r2, #2
 8004ec6:	6861      	ldr	r1, [r4, #4]
 8004ec8:	4668      	mov	r0, sp
 8004eca:	f7fe fb47 	bl	800355c <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 8004ece:	b140      	cbz	r0, 8004ee2 <lv_img_decoder_built_in_open+0x3a>
            LV_LOG_WARN("Built-in image decoder can't open the file");
 8004ed0:	4b69      	ldr	r3, [pc, #420]	; (8005078 <lv_img_decoder_built_in_open+0x1d0>)
 8004ed2:	f44f 729b 	mov.w	r2, #310	; 0x136
        LV_LOG_WARN("Image decoder open: unknown color format")
 8004ed6:	4969      	ldr	r1, [pc, #420]	; (800507c <lv_img_decoder_built_in_open+0x1d4>)
 8004ed8:	2002      	movs	r0, #2
 8004eda:	f7fe fb9b 	bl	8003614 <lv_log_add>
        return LV_RES_INV;
 8004ede:	2000      	movs	r0, #0
 8004ee0:	e045      	b.n	8004f6e <lv_img_decoder_built_in_open+0xc6>
        if(dsc->user_data == NULL) {
 8004ee2:	6a23      	ldr	r3, [r4, #32]
 8004ee4:	b9d3      	cbnz	r3, 8004f1c <lv_img_decoder_built_in_open+0x74>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8004ee6:	2008      	movs	r0, #8
 8004ee8:	f7fe fbc2 	bl	8003670 <lv_mem_alloc>
 8004eec:	6220      	str	r0, [r4, #32]
            if(dsc->user_data == NULL) {
 8004eee:	b980      	cbnz	r0, 8004f12 <lv_img_decoder_built_in_open+0x6a>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
 8004ef0:	4b63      	ldr	r3, [pc, #396]	; (8005080 <lv_img_decoder_built_in_open+0x1d8>)
 8004ef2:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8004ef6:	4961      	ldr	r1, [pc, #388]	; (800507c <lv_img_decoder_built_in_open+0x1d4>)
 8004ef8:	2003      	movs	r0, #3
 8004efa:	f7fe fb8b 	bl	8003614 <lv_log_add>
                lv_mem_assert(dsc->user_data);
 8004efe:	6a23      	ldr	r3, [r4, #32]
 8004f00:	b93b      	cbnz	r3, 8004f12 <lv_img_decoder_built_in_open+0x6a>
 8004f02:	4b60      	ldr	r3, [pc, #384]	; (8005084 <lv_img_decoder_built_in_open+0x1dc>)
 8004f04:	f240 123f 	movw	r2, #319	; 0x13f
 8004f08:	495c      	ldr	r1, [pc, #368]	; (800507c <lv_img_decoder_built_in_open+0x1d4>)
 8004f0a:	2003      	movs	r0, #3
 8004f0c:	f7fe fb82 	bl	8003614 <lv_log_add>
 8004f10:	e7fe      	b.n	8004f10 <lv_img_decoder_built_in_open+0x68>
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 8004f12:	2208      	movs	r2, #8
 8004f14:	2100      	movs	r1, #0
 8004f16:	6a20      	ldr	r0, [r4, #32]
 8004f18:	f011 fc54 	bl	80167c4 <memset>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8004f1c:	6a25      	ldr	r5, [r4, #32]
        user_data->f                               = lv_mem_alloc(sizeof(f));
 8004f1e:	2008      	movs	r0, #8
 8004f20:	f7fe fba6 	bl	8003670 <lv_mem_alloc>
 8004f24:	6028      	str	r0, [r5, #0]
        if(user_data->f == NULL) {
 8004f26:	b980      	cbnz	r0, 8004f4a <lv_img_decoder_built_in_open+0xa2>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
 8004f28:	4b55      	ldr	r3, [pc, #340]	; (8005080 <lv_img_decoder_built_in_open+0x1d8>)
 8004f2a:	f240 1247 	movw	r2, #327	; 0x147
 8004f2e:	4953      	ldr	r1, [pc, #332]	; (800507c <lv_img_decoder_built_in_open+0x1d4>)
 8004f30:	2003      	movs	r0, #3
 8004f32:	f7fe fb6f 	bl	8003614 <lv_log_add>
            lv_mem_assert(user_data->f);
 8004f36:	682b      	ldr	r3, [r5, #0]
 8004f38:	b93b      	cbnz	r3, 8004f4a <lv_img_decoder_built_in_open+0xa2>
 8004f3a:	4b52      	ldr	r3, [pc, #328]	; (8005084 <lv_img_decoder_built_in_open+0x1dc>)
 8004f3c:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8004f40:	494e      	ldr	r1, [pc, #312]	; (800507c <lv_img_decoder_built_in_open+0x1d4>)
 8004f42:	2003      	movs	r0, #3
 8004f44:	f7fe fb66 	bl	8003614 <lv_log_add>
 8004f48:	e7fe      	b.n	8004f48 <lv_img_decoder_built_in_open+0xa0>
        memcpy(user_data->f, &f, sizeof(f));
 8004f4a:	2208      	movs	r2, #8
 8004f4c:	4669      	mov	r1, sp
 8004f4e:	6828      	ldr	r0, [r5, #0]
 8004f50:	f011 fc0e 	bl	8016770 <memcpy>
    lv_img_cf_t cf = dsc->header.cf;
 8004f54:	7c20      	ldrb	r0, [r4, #16]
 8004f56:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8004f5a:	1f03      	subs	r3, r0, #4
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d809      	bhi.n	8004f74 <lv_img_decoder_built_in_open+0xcc>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8004f60:	7b23      	ldrb	r3, [r4, #12]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d14f      	bne.n	8005006 <lv_img_decoder_built_in_open+0x15e>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 8004f66:	6863      	ldr	r3, [r4, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
            return LV_RES_OK;
 8004f6a:	2001      	movs	r0, #1
            dsc->img_data = NULL;
 8004f6c:	6163      	str	r3, [r4, #20]
}
 8004f6e:	b002      	add	sp, #8
 8004f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 8004f74:	1fc3      	subs	r3, r0, #7
 8004f76:	2b03      	cmp	r3, #3
 8004f78:	d871      	bhi.n	800505e <lv_img_decoder_built_in_open+0x1b6>
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 8004f7a:	f7ff f85b 	bl	8004034 <lv_img_color_format_get_px_size>
        if(dsc->user_data == NULL) {
 8004f7e:	6a23      	ldr	r3, [r4, #32]
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 8004f80:	4607      	mov	r7, r0
        if(dsc->user_data == NULL) {
 8004f82:	b9d3      	cbnz	r3, 8004fba <lv_img_decoder_built_in_open+0x112>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8004f84:	2008      	movs	r0, #8
 8004f86:	f7fe fb73 	bl	8003670 <lv_mem_alloc>
 8004f8a:	6220      	str	r0, [r4, #32]
            if(dsc->user_data == NULL) {
 8004f8c:	b980      	cbnz	r0, 8004fb0 <lv_img_decoder_built_in_open+0x108>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
 8004f8e:	4b3c      	ldr	r3, [pc, #240]	; (8005080 <lv_img_decoder_built_in_open+0x1d8>)
 8004f90:	f240 126d 	movw	r2, #365	; 0x16d
 8004f94:	4939      	ldr	r1, [pc, #228]	; (800507c <lv_img_decoder_built_in_open+0x1d4>)
 8004f96:	2003      	movs	r0, #3
 8004f98:	f7fe fb3c 	bl	8003614 <lv_log_add>
                lv_mem_assert(dsc->user_data);
 8004f9c:	6a23      	ldr	r3, [r4, #32]
 8004f9e:	b93b      	cbnz	r3, 8004fb0 <lv_img_decoder_built_in_open+0x108>
 8004fa0:	4b38      	ldr	r3, [pc, #224]	; (8005084 <lv_img_decoder_built_in_open+0x1dc>)
 8004fa2:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8004fa6:	4935      	ldr	r1, [pc, #212]	; (800507c <lv_img_decoder_built_in_open+0x1d4>)
 8004fa8:	2003      	movs	r0, #3
 8004faa:	f7fe fb33 	bl	8003614 <lv_log_add>
 8004fae:	e7fe      	b.n	8004fae <lv_img_decoder_built_in_open+0x106>
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 8004fb0:	2208      	movs	r2, #8
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	6a20      	ldr	r0, [r4, #32]
 8004fb6:	f011 fc05 	bl	80167c4 <memset>
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 8004fba:	2602      	movs	r6, #2
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8004fbc:	6a25      	ldr	r5, [r4, #32]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 8004fbe:	40be      	lsls	r6, r7
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	f7fe fb55 	bl	8003670 <lv_mem_alloc>
 8004fc6:	6068      	str	r0, [r5, #4]
        if(user_data->palette == NULL) {
 8004fc8:	b980      	cbnz	r0, 8004fec <lv_img_decoder_built_in_open+0x144>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
 8004fca:	4b2d      	ldr	r3, [pc, #180]	; (8005080 <lv_img_decoder_built_in_open+0x1d8>)
 8004fcc:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8004fd0:	492a      	ldr	r1, [pc, #168]	; (800507c <lv_img_decoder_built_in_open+0x1d4>)
 8004fd2:	2003      	movs	r0, #3
 8004fd4:	f7fe fb1e 	bl	8003614 <lv_log_add>
            lv_mem_assert(user_data->f);
 8004fd8:	682b      	ldr	r3, [r5, #0]
 8004fda:	b93b      	cbnz	r3, 8004fec <lv_img_decoder_built_in_open+0x144>
 8004fdc:	4b29      	ldr	r3, [pc, #164]	; (8005084 <lv_img_decoder_built_in_open+0x1dc>)
 8004fde:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8004fe2:	4926      	ldr	r1, [pc, #152]	; (800507c <lv_img_decoder_built_in_open+0x1d4>)
 8004fe4:	2003      	movs	r0, #3
 8004fe6:	f7fe fb15 	bl	8003614 <lv_log_add>
 8004fea:	e7fe      	b.n	8004fea <lv_img_decoder_built_in_open+0x142>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8004fec:	7b23      	ldrb	r3, [r4, #12]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d10b      	bne.n	800500a <lv_img_decoder_built_in_open+0x162>
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
 8004ff2:	2104      	movs	r1, #4
 8004ff4:	6828      	ldr	r0, [r5, #0]
 8004ff6:	f00a ffd8 	bl	800ffaa <lv_fs_seek>
            lv_fs_read(user_data->f, user_data->palette, palette_size * sizeof(lv_color_t), NULL);
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	4632      	mov	r2, r6
 8004ffe:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005002:	f00a ffb7 	bl	800ff74 <lv_fs_read>
            dsc->img_data = NULL;
 8005006:	2300      	movs	r3, #0
 8005008:	e7af      	b.n	8004f6a <lv_img_decoder_built_in_open+0xc2>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 800500a:	6863      	ldr	r3, [r4, #4]
        uint32_t palette_size = 1 << px_size;
 800500c:	2001      	movs	r0, #1
 800500e:	6899      	ldr	r1, [r3, #8]
 8005010:	40b8      	lsls	r0, r7
            for(i = 0; i < palette_size; i++) {
 8005012:	2300      	movs	r3, #0
 8005014:	4283      	cmp	r3, r0
 8005016:	f101 0104 	add.w	r1, r1, #4
 800501a:	d2f4      	bcs.n	8005006 <lv_img_decoder_built_in_open+0x15e>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 800501c:	686e      	ldr	r6, [r5, #4]
 800501e:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8005022:	f816 8013 	ldrb.w	r8, [r6, r3, lsl #1]
 8005026:	eb06 0e43 	add.w	lr, r6, r3, lsl #1
 800502a:	08d2      	lsrs	r2, r2, #3
    color.ch.green = (uint16_t)(g8 >> 2);
 800502c:	f811 cc03 	ldrb.w	ip, [r1, #-3]
    color.ch.red   = (uint16_t)(r8 >> 3);
 8005030:	f811 7c02 	ldrb.w	r7, [r1, #-2]
 8005034:	f362 0804 	bfi	r8, r2, #0, #5
    color.ch.green = (uint16_t)(g8 >> 2);
 8005038:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
    color.ch.red   = (uint16_t)(r8 >> 3);
 800503c:	08ff      	lsrs	r7, r7, #3
 800503e:	f806 8013 	strb.w	r8, [r6, r3, lsl #1]
 8005042:	f836 2013 	ldrh.w	r2, [r6, r3, lsl #1]
 8005046:	f36c 124a 	bfi	r2, ip, #5, #6
 800504a:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 800504e:	f3c2 2207 	ubfx	r2, r2, #8, #8
            for(i = 0; i < palette_size; i++) {
 8005052:	3301      	adds	r3, #1
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 8005054:	f367 02c7 	bfi	r2, r7, #3, #5
 8005058:	f88e 2001 	strb.w	r2, [lr, #1]
 800505c:	e7da      	b.n	8005014 <lv_img_decoder_built_in_open+0x16c>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 800505e:	380b      	subs	r0, #11
 8005060:	2803      	cmp	r0, #3
 8005062:	d9d0      	bls.n	8005006 <lv_img_decoder_built_in_open+0x15e>
        lv_img_decoder_built_in_close(decoder, dsc);
 8005064:	4621      	mov	r1, r4
 8005066:	4630      	mov	r0, r6
 8005068:	f00e fc48 	bl	80138fc <lv_img_decoder_built_in_close>
        LV_LOG_WARN("Image decoder open: unknown color format")
 800506c:	4b06      	ldr	r3, [pc, #24]	; (8005088 <lv_img_decoder_built_in_open+0x1e0>)
 800506e:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8005072:	e730      	b.n	8004ed6 <lv_img_decoder_built_in_open+0x2e>
 8005074:	08017fd9 	.word	0x08017fd9
 8005078:	08017fdd 	.word	0x08017fdd
 800507c:	0801807d 	.word	0x0801807d
 8005080:	08018008 	.word	0x08018008
 8005084:	080176f4 	.word	0x080176f4
 8005088:	08018031 	.word	0x08018031

0800508c <lv_img_decoder_built_in_info>:
{
 800508c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800508e:	4608      	mov	r0, r1
{
 8005090:	460e      	mov	r6, r1
 8005092:	4614      	mov	r4, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8005094:	f00b fc2e 	bl	80108f4 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8005098:	4605      	mov	r5, r0
 800509a:	b998      	cbnz	r0, 80050c4 <lv_img_decoder_built_in_info+0x38>
        header->w  = ((lv_img_dsc_t *)src)->header.w;
 800509c:	6833      	ldr	r3, [r6, #0]
 800509e:	6822      	ldr	r2, [r4, #0]
 80050a0:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80050a4:	f363 2294 	bfi	r2, r3, #10, #11
 80050a8:	6022      	str	r2, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 80050aa:	8873      	ldrh	r3, [r6, #2]
 80050ac:	8862      	ldrh	r2, [r4, #2]
 80050ae:	095b      	lsrs	r3, r3, #5
 80050b0:	f363 124f 	bfi	r2, r3, #5, #11
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 80050b4:	7823      	ldrb	r3, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 80050b6:	8062      	strh	r2, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 80050b8:	7832      	ldrb	r2, [r6, #0]
 80050ba:	f362 0304 	bfi	r3, r2, #0, #5
 80050be:	7023      	strb	r3, [r4, #0]
    return LV_RES_OK;
 80050c0:	2501      	movs	r5, #1
 80050c2:	e020      	b.n	8005106 <lv_img_decoder_built_in_info+0x7a>
    else if(src_type == LV_IMG_SRC_FILE) {
 80050c4:	2801      	cmp	r0, #1
 80050c6:	d121      	bne.n	800510c <lv_img_decoder_built_in_info+0x80>
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
 80050c8:	2202      	movs	r2, #2
 80050ca:	4631      	mov	r1, r6
 80050cc:	a802      	add	r0, sp, #8
 80050ce:	f7fe fa45 	bl	800355c <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 80050d2:	b148      	cbz	r0, 80050e8 <lv_img_decoder_built_in_info+0x5c>
            header->cf = LV_IMG_CF_UNKNOWN;
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
 80050da:	f043 6348 	orr.w	r3, r3, #209715200	; 0xc800000
 80050de:	f443 33c8 	orr.w	r3, r3, #102400	; 0x19000
 80050e2:	6023      	str	r3, [r4, #0]
        return LV_RES_INV;
 80050e4:	2500      	movs	r5, #0
 80050e6:	e00e      	b.n	8005106 <lv_img_decoder_built_in_info+0x7a>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
 80050e8:	ab01      	add	r3, sp, #4
 80050ea:	2204      	movs	r2, #4
 80050ec:	4621      	mov	r1, r4
 80050ee:	a802      	add	r0, sp, #8
 80050f0:	f00a ff40 	bl	800ff74 <lv_fs_read>
 80050f4:	4606      	mov	r6, r0
            lv_fs_close(&file);
 80050f6:	a802      	add	r0, sp, #8
 80050f8:	f00a ff27 	bl	800ff4a <lv_fs_close>
        if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 80050fc:	2e00      	cmp	r6, #0
 80050fe:	d1e9      	bne.n	80050d4 <lv_img_decoder_built_in_info+0x48>
 8005100:	9b01      	ldr	r3, [sp, #4]
 8005102:	2b04      	cmp	r3, #4
 8005104:	d1e6      	bne.n	80050d4 <lv_img_decoder_built_in_info+0x48>
}
 8005106:	4628      	mov	r0, r5
 8005108:	b004      	add	sp, #16
 800510a:	bd70      	pop	{r4, r5, r6, pc}
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 800510c:	2802      	cmp	r0, #2
 800510e:	d106      	bne.n	800511e <lv_img_decoder_built_in_info+0x92>
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 8005110:	6823      	ldr	r3, [r4, #0]
 8005112:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8005116:	4b06      	ldr	r3, [pc, #24]	; (8005130 <lv_img_decoder_built_in_info+0xa4>)
 8005118:	4313      	orrs	r3, r2
 800511a:	6023      	str	r3, [r4, #0]
 800511c:	e7d0      	b.n	80050c0 <lv_img_decoder_built_in_info+0x34>
        LV_LOG_WARN("Image get info found unknown src type");
 800511e:	4b05      	ldr	r3, [pc, #20]	; (8005134 <lv_img_decoder_built_in_info+0xa8>)
 8005120:	f44f 7292 	mov.w	r2, #292	; 0x124
 8005124:	4904      	ldr	r1, [pc, #16]	; (8005138 <lv_img_decoder_built_in_info+0xac>)
 8005126:	2002      	movs	r0, #2
 8005128:	f7fe fa74 	bl	8003614 <lv_log_add>
 800512c:	e7da      	b.n	80050e4 <lv_img_decoder_built_in_info+0x58>
 800512e:	bf00      	nop
 8005130:	0020040b 	.word	0x0020040b
 8005134:	08017fb3 	.word	0x08017fb3
 8005138:	0801807d 	.word	0x0801807d

0800513c <lv_img_decoder_get_info>:
    header->always_zero = 0;
 800513c:	780b      	ldrb	r3, [r1, #0]
 800513e:	f36f 1347 	bfc	r3, #5, #3
{
 8005142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005146:	4607      	mov	r7, r0
    header->always_zero = 0;
 8005148:	700b      	strb	r3, [r1, #0]
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 800514a:	480d      	ldr	r0, [pc, #52]	; (8005180 <lv_img_decoder_get_info+0x44>)
{
 800514c:	460e      	mov	r6, r1
    lv_res_t res = LV_RES_INV;
 800514e:	2400      	movs	r4, #0
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8005150:	f00a ffa6 	bl	80100a0 <lv_ll_get_head>
 8005154:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8005180 <lv_img_decoder_get_info+0x44>
 8005158:	4605      	mov	r5, r0
 800515a:	b915      	cbnz	r5, 8005162 <lv_img_decoder_get_info+0x26>
}
 800515c:	4620      	mov	r0, r4
 800515e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(d->info_cb) {
 8005162:	682c      	ldr	r4, [r5, #0]
 8005164:	b134      	cbz	r4, 8005174 <lv_img_decoder_get_info+0x38>
            res = d->info_cb(d, src, header);
 8005166:	4632      	mov	r2, r6
 8005168:	4639      	mov	r1, r7
 800516a:	4628      	mov	r0, r5
 800516c:	47a0      	blx	r4
            if(res == LV_RES_OK) break;
 800516e:	2801      	cmp	r0, #1
            res = d->info_cb(d, src, header);
 8005170:	4604      	mov	r4, r0
            if(res == LV_RES_OK) break;
 8005172:	d0f3      	beq.n	800515c <lv_img_decoder_get_info+0x20>
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 8005174:	4629      	mov	r1, r5
 8005176:	4640      	mov	r0, r8
 8005178:	f00a ff98 	bl	80100ac <lv_ll_get_next>
 800517c:	4605      	mov	r5, r0
 800517e:	e7ec      	b.n	800515a <lv_img_decoder_get_info+0x1e>
 8005180:	2002073c 	.word	0x2002073c

08005184 <lv_img_decoder_open>:
{
 8005184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005188:	4605      	mov	r5, r0
    dsc->user_data = NULL;
 800518a:	2400      	movs	r4, #0
{
 800518c:	460f      	mov	r7, r1
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 800518e:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80051fc <lv_img_decoder_open+0x78>
        res = d->info_cb(d, src, &dsc->header);
 8005192:	f105 0910 	add.w	r9, r5, #16
        dsc->error_msg = NULL;
 8005196:	46a0      	mov	r8, r4
    dsc->src       = src;
 8005198:	e9c0 1201 	strd	r1, r2, [r0, #4]
    dsc->src_type  = lv_img_src_get_type(src);
 800519c:	4608      	mov	r0, r1
 800519e:	f00b fba9 	bl	80108f4 <lv_img_src_get_type>
    dsc->user_data = NULL;
 80051a2:	622c      	str	r4, [r5, #32]
    dsc->src_type  = lv_img_src_get_type(src);
 80051a4:	7328      	strb	r0, [r5, #12]
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 80051a6:	4815      	ldr	r0, [pc, #84]	; (80051fc <lv_img_decoder_open+0x78>)
 80051a8:	f00a ff7a 	bl	80100a0 <lv_ll_get_head>
 80051ac:	4606      	mov	r6, r0
 80051ae:	b946      	cbnz	r6, 80051c2 <lv_img_decoder_open+0x3e>
    if(res == LV_RES_INV) {
 80051b0:	b924      	cbnz	r4, 80051bc <lv_img_decoder_open+0x38>
        memset(dsc, 0, sizeof(lv_img_decoder_dsc_t));
 80051b2:	2224      	movs	r2, #36	; 0x24
 80051b4:	4621      	mov	r1, r4
 80051b6:	4628      	mov	r0, r5
 80051b8:	f011 fb04 	bl	80167c4 <memset>
}
 80051bc:	4620      	mov	r0, r4
 80051be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
 80051c2:	6833      	ldr	r3, [r6, #0]
 80051c4:	b1a3      	cbz	r3, 80051f0 <lv_img_decoder_open+0x6c>
 80051c6:	6872      	ldr	r2, [r6, #4]
 80051c8:	b192      	cbz	r2, 80051f0 <lv_img_decoder_open+0x6c>
        res = d->info_cb(d, src, &dsc->header);
 80051ca:	464a      	mov	r2, r9
 80051cc:	4639      	mov	r1, r7
 80051ce:	4630      	mov	r0, r6
 80051d0:	4798      	blx	r3
        if(res != LV_RES_OK) continue;
 80051d2:	2801      	cmp	r0, #1
        res = d->info_cb(d, src, &dsc->header);
 80051d4:	4604      	mov	r4, r0
        if(res != LV_RES_OK) continue;
 80051d6:	d10b      	bne.n	80051f0 <lv_img_decoder_open+0x6c>
        dsc->error_msg = NULL;
 80051d8:	f8c5 801c 	str.w	r8, [r5, #28]
        res = d->open_cb(d, dsc);
 80051dc:	4629      	mov	r1, r5
        dsc->img_data  = NULL;
 80051de:	f8c5 8014 	str.w	r8, [r5, #20]
        res = d->open_cb(d, dsc);
 80051e2:	4630      	mov	r0, r6
        dsc->decoder   = d;
 80051e4:	602e      	str	r6, [r5, #0]
        res = d->open_cb(d, dsc);
 80051e6:	6873      	ldr	r3, [r6, #4]
 80051e8:	4798      	blx	r3
        if(res == LV_RES_OK) break;
 80051ea:	2801      	cmp	r0, #1
        res = d->open_cb(d, dsc);
 80051ec:	4604      	mov	r4, r0
        if(res == LV_RES_OK) break;
 80051ee:	d0e5      	beq.n	80051bc <lv_img_decoder_open+0x38>
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 80051f0:	4631      	mov	r1, r6
 80051f2:	4650      	mov	r0, sl
 80051f4:	f00a ff5a 	bl	80100ac <lv_ll_get_next>
 80051f8:	4606      	mov	r6, r0
 80051fa:	e7d8      	b.n	80051ae <lv_img_decoder_open+0x2a>
 80051fc:	2002073c 	.word	0x2002073c

08005200 <lv_img_decoder_create>:
{
 8005200:	b510      	push	{r4, lr}
    decoder = lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
 8005202:	4809      	ldr	r0, [pc, #36]	; (8005228 <lv_img_decoder_create+0x28>)
 8005204:	f00a ff10 	bl	8010028 <lv_ll_ins_head>
    lv_mem_assert(decoder);
 8005208:	4604      	mov	r4, r0
 800520a:	b930      	cbnz	r0, 800521a <lv_img_decoder_create+0x1a>
 800520c:	4b07      	ldr	r3, [pc, #28]	; (800522c <lv_img_decoder_create+0x2c>)
 800520e:	22bf      	movs	r2, #191	; 0xbf
 8005210:	4907      	ldr	r1, [pc, #28]	; (8005230 <lv_img_decoder_create+0x30>)
 8005212:	2003      	movs	r0, #3
 8005214:	f7fe f9fe 	bl	8003614 <lv_log_add>
 8005218:	e7fe      	b.n	8005218 <lv_img_decoder_create+0x18>
    memset(decoder, 0, sizeof(lv_img_decoder_t));
 800521a:	2214      	movs	r2, #20
 800521c:	2100      	movs	r1, #0
 800521e:	f011 fad1 	bl	80167c4 <memset>
}
 8005222:	4620      	mov	r0, r4
 8005224:	bd10      	pop	{r4, pc}
 8005226:	bf00      	nop
 8005228:	2002073c 	.word	0x2002073c
 800522c:	080176f4 	.word	0x080176f4
 8005230:	0801807d 	.word	0x0801807d

08005234 <lv_img_decoder_init>:
{
 8005234:	b508      	push	{r3, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
 8005236:	2114      	movs	r1, #20
 8005238:	480d      	ldr	r0, [pc, #52]	; (8005270 <lv_img_decoder_init+0x3c>)
 800523a:	f00a feeb 	bl	8010014 <lv_ll_init>
    decoder = lv_img_decoder_create();
 800523e:	f7ff ffdf 	bl	8005200 <lv_img_decoder_create>
    if(decoder == NULL) {
 8005242:	b960      	cbnz	r0, 800525e <lv_img_decoder_init+0x2a>
        LV_LOG_WARN("lv_img_decoder_init: out of memory");
 8005244:	4b0b      	ldr	r3, [pc, #44]	; (8005274 <lv_img_decoder_init+0x40>)
 8005246:	224a      	movs	r2, #74	; 0x4a
 8005248:	490b      	ldr	r1, [pc, #44]	; (8005278 <lv_img_decoder_init+0x44>)
 800524a:	2002      	movs	r0, #2
 800524c:	f7fe f9e2 	bl	8003614 <lv_log_add>
        lv_mem_assert(decoder);
 8005250:	4b0a      	ldr	r3, [pc, #40]	; (800527c <lv_img_decoder_init+0x48>)
 8005252:	224b      	movs	r2, #75	; 0x4b
 8005254:	4908      	ldr	r1, [pc, #32]	; (8005278 <lv_img_decoder_init+0x44>)
 8005256:	2003      	movs	r0, #3
 8005258:	f7fe f9dc 	bl	8003614 <lv_log_add>
 800525c:	e7fe      	b.n	800525c <lv_img_decoder_init+0x28>
    decoder->info_cb = info_cb;
 800525e:	4b08      	ldr	r3, [pc, #32]	; (8005280 <lv_img_decoder_init+0x4c>)
 8005260:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
 8005262:	4b08      	ldr	r3, [pc, #32]	; (8005284 <lv_img_decoder_init+0x50>)
 8005264:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
 8005266:	4b08      	ldr	r3, [pc, #32]	; (8005288 <lv_img_decoder_init+0x54>)
 8005268:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
 800526a:	4b08      	ldr	r3, [pc, #32]	; (800528c <lv_img_decoder_init+0x58>)
 800526c:	60c3      	str	r3, [r0, #12]
}
 800526e:	bd08      	pop	{r3, pc}
 8005270:	2002073c 	.word	0x2002073c
 8005274:	08018142 	.word	0x08018142
 8005278:	0801807d 	.word	0x0801807d
 800527c:	080176f4 	.word	0x080176f4
 8005280:	0800508d 	.word	0x0800508d
 8005284:	08004ea9 	.word	0x08004ea9
 8005288:	08004dd1 	.word	0x08004dd1
 800528c:	080138fd 	.word	0x080138fd

08005290 <get_glyph_dsc_id.isra.0.part.1>:

/**********************
 *   STATIC FUNCTIONS
 **********************/

static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 8005290:	b5f0      	push	{r4, r5, r6, r7, lr}
{
    if(letter == '\0') return 0;

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8005292:	6804      	ldr	r4, [r0, #0]
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 8005294:	b085      	sub	sp, #20
 8005296:	460d      	mov	r5, r1

    /*Check the chacge first*/
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 8005298:	6963      	ldr	r3, [r4, #20]
 800529a:	428b      	cmp	r3, r1
 800529c:	d140      	bne.n	8005320 <get_glyph_dsc_id.isra.0.part.1+0x90>
 800529e:	69a0      	ldr	r0, [r4, #24]

    fdsc->last_letter = letter;
    fdsc->last_glyph_id = 0;
    return 0;

}
 80052a0:	b005      	add	sp, #20
 80052a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 80052a4:	fb07 f603 	mul.w	r6, r7, r3
 80052a8:	68a1      	ldr	r1, [r4, #8]
 80052aa:	3301      	adds	r3, #1
 80052ac:	198a      	adds	r2, r1, r6
 80052ae:	5989      	ldr	r1, [r1, r6]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 80052b0:	8890      	ldrh	r0, [r2, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 80052b2:	1a69      	subs	r1, r5, r1
        if(rcp > fdsc->cmaps[i].range_length) continue;
 80052b4:	4281      	cmp	r1, r0
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 80052b6:	9103      	str	r1, [sp, #12]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 80052b8:	d834      	bhi.n	8005324 <get_glyph_dsc_id.isra.0.part.1+0x94>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 80052ba:	7c93      	ldrb	r3, [r2, #18]
 80052bc:	f013 0303 	ands.w	r3, r3, #3
 80052c0:	d104      	bne.n	80052cc <get_glyph_dsc_id.isra.0.part.1+0x3c>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 80052c2:	88d0      	ldrh	r0, [r2, #6]
 80052c4:	4408      	add	r0, r1
        fdsc->last_letter = letter;
 80052c6:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
 80052c8:	61a0      	str	r0, [r4, #24]
    return 0;
 80052ca:	e7e9      	b.n	80052a0 <get_glyph_dsc_id.isra.0.part.1+0x10>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d104      	bne.n	80052da <get_glyph_dsc_id.isra.0.part.1+0x4a>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 80052d0:	68d3      	ldr	r3, [r2, #12]
 80052d2:	5c58      	ldrb	r0, [r3, r1]
 80052d4:	88d3      	ldrh	r3, [r2, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 80052d6:	4418      	add	r0, r3
 80052d8:	e7f5      	b.n	80052c6 <get_glyph_dsc_id.isra.0.part.1+0x36>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 80052da:	4817      	ldr	r0, [pc, #92]	; (8005338 <get_glyph_dsc_id.isra.0.part.1+0xa8>)
 80052dc:	2b02      	cmp	r3, #2
 80052de:	6891      	ldr	r1, [r2, #8]
 80052e0:	8a12      	ldrh	r2, [r2, #16]
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 80052e2:	9000      	str	r0, [sp, #0]
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 80052e4:	d10d      	bne.n	8005302 <get_glyph_dsc_id.isra.0.part.1+0x72>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 80052e6:	a803      	add	r0, sp, #12
 80052e8:	f00b fa76 	bl	80107d8 <lv_utils_bsearch>
            if(p) {
 80052ec:	b908      	cbnz	r0, 80052f2 <get_glyph_dsc_id.isra.0.part.1+0x62>
        uint32_t glyph_id = 0;
 80052ee:	2000      	movs	r0, #0
 80052f0:	e7e9      	b.n	80052c6 <get_glyph_dsc_id.isra.0.part.1+0x36>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 80052f2:	68a3      	ldr	r3, [r4, #8]
 80052f4:	441e      	add	r6, r3
 80052f6:	68b3      	ldr	r3, [r6, #8]
 80052f8:	1ac3      	subs	r3, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 80052fa:	88f0      	ldrh	r0, [r6, #6]
 80052fc:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005300:	e7e1      	b.n	80052c6 <get_glyph_dsc_id.isra.0.part.1+0x36>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 8005302:	2302      	movs	r3, #2
 8005304:	a803      	add	r0, sp, #12
 8005306:	f00b fa67 	bl	80107d8 <lv_utils_bsearch>
            if(p) {
 800530a:	2800      	cmp	r0, #0
 800530c:	d0ef      	beq.n	80052ee <get_glyph_dsc_id.isra.0.part.1+0x5e>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 800530e:	68a3      	ldr	r3, [r4, #8]
 8005310:	441e      	add	r6, r3
 8005312:	68b3      	ldr	r3, [r6, #8]
 8005314:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 8005316:	68f3      	ldr	r3, [r6, #12]
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 8005318:	0840      	lsrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800531a:	5c18      	ldrb	r0, [r3, r0]
 800531c:	88f3      	ldrh	r3, [r6, #6]
 800531e:	e7da      	b.n	80052d6 <get_glyph_dsc_id.isra.0.part.1+0x46>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 8005320:	2300      	movs	r3, #0
 8005322:	2714      	movs	r7, #20
    for(i = 0; i < fdsc->cmap_num; i++) {
 8005324:	8a62      	ldrh	r2, [r4, #18]
 8005326:	b299      	uxth	r1, r3
 8005328:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800532c:	428a      	cmp	r2, r1
 800532e:	d8b9      	bhi.n	80052a4 <get_glyph_dsc_id.isra.0.part.1+0x14>
    fdsc->last_letter = letter;
 8005330:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
 8005332:	2000      	movs	r0, #0
 8005334:	e7c8      	b.n	80052c8 <get_glyph_dsc_id.isra.0.part.1+0x38>
 8005336:	bf00      	nop
 8005338:	0801407d 	.word	0x0801407d

0800533c <lv_font_get_glyph_dsc_fmt_txt>:
{
 800533c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005340:	4680      	mov	r8, r0
 8005342:	b085      	sub	sp, #20
 8005344:	460c      	mov	r4, r1
 8005346:	4699      	mov	r9, r3
    if(letter == '\0') return 0;
 8005348:	b91a      	cbnz	r2, 8005352 <lv_font_get_glyph_dsc_fmt_txt+0x16>
    if(!gid) return false;
 800534a:	2000      	movs	r0, #0
}
 800534c:	b005      	add	sp, #20
 800534e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8005352:	4607      	mov	r7, r0
 8005354:	4611      	mov	r1, r2
 8005356:	f857 5f0c 	ldr.w	r5, [r7, #12]!
 800535a:	4638      	mov	r0, r7
 800535c:	f7ff ff98 	bl	8005290 <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return false;
 8005360:	4606      	mov	r6, r0
 8005362:	2800      	cmp	r0, #0
 8005364:	d0f1      	beq.n	800534a <lv_font_get_glyph_dsc_fmt_txt+0xe>
    if(fdsc->kern_dsc) {
 8005366:	68eb      	ldr	r3, [r5, #12]
 8005368:	b9d3      	cbnz	r3, 80053a0 <lv_font_get_glyph_dsc_fmt_txt+0x64>
    int8_t kvalue = 0;
 800536a:	2000      	movs	r0, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800536c:	686b      	ldr	r3, [r5, #4]
 800536e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    uint32_t adv_w = gdsc->adv_w + ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8005372:	8a2b      	ldrh	r3, [r5, #16]
 8005374:	4358      	muls	r0, r3
 8005376:	8873      	ldrh	r3, [r6, #2]
 8005378:	091b      	lsrs	r3, r3, #4
 800537a:	eb03 1020 	add.w	r0, r3, r0, asr #4
    adv_w  = (adv_w + (1 << 3)) >> 4;
 800537e:	3008      	adds	r0, #8
 8005380:	0900      	lsrs	r0, r0, #4
    dsc_out->adv_w = adv_w;
 8005382:	8020      	strh	r0, [r4, #0]
    return true;
 8005384:	2001      	movs	r0, #1
    dsc_out->box_h = gdsc->box_h;
 8005386:	7973      	ldrb	r3, [r6, #5]
 8005388:	70e3      	strb	r3, [r4, #3]
    dsc_out->box_w = gdsc->box_w;
 800538a:	7933      	ldrb	r3, [r6, #4]
 800538c:	70a3      	strb	r3, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 800538e:	79b3      	ldrb	r3, [r6, #6]
 8005390:	7123      	strb	r3, [r4, #4]
    dsc_out->ofs_y = gdsc->ofs_y;
 8005392:	79f3      	ldrb	r3, [r6, #7]
 8005394:	7163      	strb	r3, [r4, #5]
    dsc_out->bpp   = fdsc->bpp;
 8005396:	7ceb      	ldrb	r3, [r5, #19]
 8005398:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800539c:	71a3      	strb	r3, [r4, #6]
    return true;
 800539e:	e7d5      	b.n	800534c <lv_font_get_glyph_dsc_fmt_txt+0x10>
    if(letter == '\0') return 0;
 80053a0:	f1b9 0f00 	cmp.w	r9, #0
 80053a4:	d0e1      	beq.n	800536a <lv_font_get_glyph_dsc_fmt_txt+0x2e>
 80053a6:	4649      	mov	r1, r9
 80053a8:	4638      	mov	r0, r7
 80053aa:	f7ff ff71 	bl	8005290 <get_glyph_dsc_id.isra.0.part.1>
        if(gid_next) {
 80053ae:	2800      	cmp	r0, #0
 80053b0:	d0db      	beq.n	800536a <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            kvalue = get_kern_value(font, gid, gid_next);
 80053b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
{
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;

    int8_t value = 0;

    if(fdsc->kern_classes == 0) {
 80053b6:	68df      	ldr	r7, [r3, #12]
 80053b8:	7cdb      	ldrb	r3, [r3, #19]
 80053ba:	069b      	lsls	r3, r3, #26
 80053bc:	d432      	bmi.n	8005424 <lv_font_get_glyph_dsc_fmt_txt+0xe8>
        /*Kern pairs*/
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
        if(kdsc->glyph_ids_size == 0) {
 80053be:	7afb      	ldrb	r3, [r7, #11]
 80053c0:	f013 0303 	ands.w	r3, r3, #3
 80053c4:	d117      	bne.n	80053f6 <lv_font_get_glyph_dsc_fmt_txt+0xba>
            /* Use binary search to find the kern value.
             * The pairs are ordered left_id first, then right_id secondly. */
            const uint8_t * g_ids = kdsc->glyph_ids;
 80053c6:	f8d7 8000 	ldr.w	r8, [r7]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 80053ca:	eb06 2000 	add.w	r0, r6, r0, lsl #8
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	4b1c      	ldr	r3, [pc, #112]	; (8005444 <lv_font_get_glyph_dsc_fmt_txt+0x108>)
 80053d2:	4641      	mov	r1, r8
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 80053d4:	f8ad 000c 	strh.w	r0, [sp, #12]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 80053d8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	a803      	add	r0, sp, #12
 80053e0:	2302      	movs	r3, #2
 80053e2:	f00b f9f9 	bl	80107d8 <lv_utils_bsearch>

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 80053e6:	2800      	cmp	r0, #0
 80053e8:	d0c0      	beq.n	800536c <lv_font_get_glyph_dsc_fmt_txt+0x30>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 80053ea:	eba0 0008 	sub.w	r0, r0, r8
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
 80053ee:	0840      	lsrs	r0, r0, #1

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
                value = kdsc->values[ofs];
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	5618      	ldrsb	r0, [r3, r0]
 80053f4:	e7ba      	b.n	800536c <lv_font_get_glyph_dsc_fmt_txt+0x30>
        } else if(kdsc->glyph_ids_size == 1) {
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d1b7      	bne.n	800536a <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            const uint16_t * g_ids = kdsc->glyph_ids;
 80053fa:	f8d7 8000 	ldr.w	r8, [r7]
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 80053fe:	eb06 2000 	add.w	r0, r6, r0, lsl #8
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	4b10      	ldr	r3, [pc, #64]	; (8005448 <lv_font_get_glyph_dsc_fmt_txt+0x10c>)
 8005406:	4641      	mov	r1, r8
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 8005408:	9003      	str	r0, [sp, #12]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800540a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	a803      	add	r0, sp, #12
 8005412:	2304      	movs	r3, #4
 8005414:	f00b f9e0 	bl	80107d8 <lv_utils_bsearch>
            if(kid_p) {
 8005418:	2800      	cmp	r0, #0
 800541a:	d0a7      	beq.n	800536c <lv_font_get_glyph_dsc_fmt_txt+0x30>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 800541c:	eba0 0008 	sub.w	r0, r0, r8
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
 8005420:	0900      	lsrs	r0, r0, #4
 8005422:	e7e5      	b.n	80053f0 <lv_font_get_glyph_dsc_fmt_txt+0xb4>
            /*Invalid value*/
        }
    } else {
        /*Kern classes*/
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	5d93      	ldrb	r3, [r2, r6]
        uint8_t right_class = kdsc->left_class_mapping[gid_right];

        /* If class = 0, kerning not exist for that glyph
         * else got the value form `class_pair_values` 2D array*/
        if(left_class > 0 && right_class > 0) {
 8005428:	2b00      	cmp	r3, #0
 800542a:	d09e      	beq.n	800536a <lv_font_get_glyph_dsc_fmt_txt+0x2e>
        uint8_t right_class = kdsc->left_class_mapping[gid_right];
 800542c:	5c11      	ldrb	r1, [r2, r0]
        if(left_class > 0 && right_class > 0) {
 800542e:	2900      	cmp	r1, #0
 8005430:	d09b      	beq.n	800536a <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            value = kdsc->class_pair_values[(left_class-1)* kdsc->right_class_cnt + (right_class-1)];
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	3b01      	subs	r3, #1
 8005436:	7b78      	ldrb	r0, [r7, #13]
 8005438:	440a      	add	r2, r1
 800543a:	fb00 2303 	mla	r3, r0, r3, r2
 800543e:	f913 0c01 	ldrsb.w	r0, [r3, #-1]
 8005442:	e793      	b.n	800536c <lv_font_get_glyph_dsc_fmt_txt+0x30>
 8005444:	08014059 	.word	0x08014059
 8005448:	0801406b 	.word	0x0801406b

0800544c <lv_theme_get_current>:
lv_theme_t * lv_theme_get_current(void)
{
#if LV_THEME_LIVE_UPDATE == 0
    return current_theme;
#else
    if(!inited)
 800544c:	4b03      	ldr	r3, [pc, #12]	; (800545c <lv_theme_get_current+0x10>)
        return NULL;
    else
        return &current_theme;
#endif
}
 800544e:	4804      	ldr	r0, [pc, #16]	; (8005460 <lv_theme_get_current+0x14>)
    if(!inited)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
}
 8005454:	bf08      	it	eq
 8005456:	2000      	moveq	r0, #0
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	2002cce1 	.word	0x2002cce1
 8005460:	20028784 	.word	0x20028784

08005464 <lv_kb_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_kb_signal(lv_obj_t * kb, lv_signal_t sign, void * param)
{
 8005464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(kb, sign, param);
 8005466:	4b20      	ldr	r3, [pc, #128]	; (80054e8 <lv_kb_signal+0x84>)
{
 8005468:	4607      	mov	r7, r0
 800546a:	460c      	mov	r4, r1
 800546c:	4616      	mov	r6, r2
    res = ancestor_signal(kb, sign, param);
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8005472:	2801      	cmp	r0, #1
    res = ancestor_signal(kb, sign, param);
 8005474:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 8005476:	d113      	bne.n	80054a0 <lv_kb_signal+0x3c>

    if(sign == LV_SIGNAL_CLEANUP) {
 8005478:	b194      	cbz	r4, 80054a0 <lv_kb_signal+0x3c>
        /*Nothing to cleanup. (No dynamically allocated memory in 'ext')*/
    } else if(sign == LV_SIGNAL_FOCUS) {
 800547a:	2c0f      	cmp	r4, #15
 800547c:	d112      	bne.n	80054a4 <lv_kb_signal+0x40>
        lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
 800547e:	4638      	mov	r0, r7
 8005480:	f00a fb1e 	bl	800fac0 <lv_obj_get_ext_attr>
 8005484:	4604      	mov	r4, r0
        /*Show the cursor of the new Text area if cursor management is enabled*/
        if(ext->ta && ext->cursor_mng) {
 8005486:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005488:	b150      	cbz	r0, 80054a0 <lv_kb_signal+0x3c>
 800548a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800548e:	07da      	lsls	r2, r3, #31
 8005490:	d506      	bpl.n	80054a0 <lv_kb_signal+0x3c>
            lv_cursor_type_t cur_type = lv_ta_get_cursor_type(ext->ta);
 8005492:	f00f f821 	bl	80144d8 <lv_ta_get_cursor_type>
            lv_ta_set_cursor_type(ext->ta, cur_type & (~LV_CURSOR_HIDDEN));
 8005496:	f000 01f7 	and.w	r1, r0, #247	; 0xf7
    } else if(sign == LV_SIGNAL_DEFOCUS) {
        lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
        /*Show the cursor of the new Text area if cursor management is enabled*/
        if(ext->ta && ext->cursor_mng) {
            lv_cursor_type_t cur_type = lv_ta_get_cursor_type(ext->ta);
            lv_ta_set_cursor_type(ext->ta, cur_type | LV_CURSOR_HIDDEN);
 800549a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800549c:	f00e ff64 	bl	8014368 <lv_ta_set_cursor_type>
        }
        buf->type[i] = "lv_kb";
    }

    return res;
}
 80054a0:	4628      	mov	r0, r5
 80054a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_DEFOCUS) {
 80054a4:	2c10      	cmp	r4, #16
 80054a6:	d110      	bne.n	80054ca <lv_kb_signal+0x66>
        lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
 80054a8:	4638      	mov	r0, r7
 80054aa:	f00a fb09 	bl	800fac0 <lv_obj_get_ext_attr>
 80054ae:	4604      	mov	r4, r0
        if(ext->ta && ext->cursor_mng) {
 80054b0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80054b2:	2800      	cmp	r0, #0
 80054b4:	d0f4      	beq.n	80054a0 <lv_kb_signal+0x3c>
 80054b6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80054ba:	07db      	lsls	r3, r3, #31
 80054bc:	d5f0      	bpl.n	80054a0 <lv_kb_signal+0x3c>
            lv_cursor_type_t cur_type = lv_ta_get_cursor_type(ext->ta);
 80054be:	f00f f80b 	bl	80144d8 <lv_ta_get_cursor_type>
            lv_ta_set_cursor_type(ext->ta, cur_type | LV_CURSOR_HIDDEN);
 80054c2:	f040 0108 	orr.w	r1, r0, #8
 80054c6:	b2c9      	uxtb	r1, r1
 80054c8:	e7e7      	b.n	800549a <lv_kb_signal+0x36>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 80054ca:	2c06      	cmp	r4, #6
 80054cc:	d1e8      	bne.n	80054a0 <lv_kb_signal+0x3c>
 80054ce:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 80054d0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80054d4:	b2da      	uxtb	r2, r3
 80054d6:	b119      	cbz	r1, 80054e0 <lv_kb_signal+0x7c>
 80054d8:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 80054da:	2b07      	cmp	r3, #7
 80054dc:	d1f8      	bne.n	80054d0 <lv_kb_signal+0x6c>
 80054de:	461a      	mov	r2, r3
        buf->type[i] = "lv_kb";
 80054e0:	4b02      	ldr	r3, [pc, #8]	; (80054ec <lv_kb_signal+0x88>)
 80054e2:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 80054e6:	e7db      	b.n	80054a0 <lv_kb_signal+0x3c>
 80054e8:	20028934 	.word	0x20028934
 80054ec:	0801c23a 	.word	0x0801c23a

080054f0 <lv_kb_create>:
{
 80054f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054f2:	460e      	mov	r6, r1
    lv_obj_t * new_kb = lv_btnm_create(par, copy);
 80054f4:	f002 fc3e 	bl	8007d74 <lv_btnm_create>
    lv_mem_assert(new_kb);
 80054f8:	4604      	mov	r4, r0
 80054fa:	b930      	cbnz	r0, 800550a <lv_kb_create+0x1a>
 80054fc:	4b46      	ldr	r3, [pc, #280]	; (8005618 <lv_kb_create+0x128>)
 80054fe:	2264      	movs	r2, #100	; 0x64
 8005500:	4946      	ldr	r1, [pc, #280]	; (800561c <lv_kb_create+0x12c>)
 8005502:	2003      	movs	r0, #3
 8005504:	f7fe f886 	bl	8003614 <lv_log_add>
 8005508:	e7fe      	b.n	8005508 <lv_kb_create+0x18>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_kb);
 800550a:	4d45      	ldr	r5, [pc, #276]	; (8005620 <lv_kb_create+0x130>)
 800550c:	682b      	ldr	r3, [r5, #0]
 800550e:	b913      	cbnz	r3, 8005516 <lv_kb_create+0x26>
 8005510:	f00a fad2 	bl	800fab8 <lv_obj_get_signal_cb>
 8005514:	6028      	str	r0, [r5, #0]
    lv_kb_ext_t * ext = lv_obj_allocate_ext_attr(new_kb, sizeof(lv_kb_ext_t));
 8005516:	2130      	movs	r1, #48	; 0x30
 8005518:	4620      	mov	r0, r4
 800551a:	f009 fe62 	bl	800f1e2 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 800551e:	4605      	mov	r5, r0
 8005520:	b930      	cbnz	r0, 8005530 <lv_kb_create+0x40>
 8005522:	4b3d      	ldr	r3, [pc, #244]	; (8005618 <lv_kb_create+0x128>)
 8005524:	226b      	movs	r2, #107	; 0x6b
 8005526:	493d      	ldr	r1, [pc, #244]	; (800561c <lv_kb_create+0x12c>)
 8005528:	2003      	movs	r0, #3
 800552a:	f7fe f873 	bl	8003614 <lv_log_add>
 800552e:	e7fe      	b.n	800552e <lv_kb_create+0x3e>
    ext->mode       = LV_KB_MODE_TEXT;
 8005530:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    ext->ta         = NULL;
 8005532:	2700      	movs	r7, #0
    lv_obj_set_signal_cb(new_kb, lv_kb_signal);
 8005534:	493b      	ldr	r1, [pc, #236]	; (8005624 <lv_kb_create+0x134>)
    ext->mode       = LV_KB_MODE_TEXT;
 8005536:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
    ext->ta         = NULL;
 800553a:	6287      	str	r7, [r0, #40]	; 0x28
    ext->mode       = LV_KB_MODE_TEXT;
 800553c:	8583      	strh	r3, [r0, #44]	; 0x2c
    lv_obj_set_signal_cb(new_kb, lv_kb_signal);
 800553e:	4620      	mov	r0, r4
 8005540:	f009 fe4b 	bl	800f1da <lv_obj_set_signal_cb>
    if(copy == NULL) {
 8005544:	2e00      	cmp	r6, #0
 8005546:	d150      	bne.n	80055ea <lv_kb_create+0xfa>
        lv_obj_set_size(new_kb, lv_obj_get_width_fit(lv_obj_get_parent(new_kb)),
 8005548:	4620      	mov	r0, r4
 800554a:	f00a f9d7 	bl	800f8fc <lv_obj_get_parent>
 800554e:	f00a fa2d 	bl	800f9ac <lv_obj_get_width_fit>
 8005552:	4605      	mov	r5, r0
                        lv_obj_get_height_fit(lv_obj_get_parent(new_kb)) / 2);
 8005554:	4620      	mov	r0, r4
 8005556:	f00a f9d1 	bl	800f8fc <lv_obj_get_parent>
 800555a:	f00a fa35 	bl	800f9c8 <lv_obj_get_height_fit>
        lv_obj_set_size(new_kb, lv_obj_get_width_fit(lv_obj_get_parent(new_kb)),
 800555e:	4629      	mov	r1, r5
 8005560:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005564:	f340 024f 	sbfx	r2, r0, #1, #16
 8005568:	4620      	mov	r0, r4
 800556a:	f00a f8cf 	bl	800f70c <lv_obj_set_size>
        lv_obj_align(new_kb, NULL, LV_ALIGN_IN_BOTTOM_MID, 0, 0);
 800556e:	4633      	mov	r3, r6
 8005570:	2205      	movs	r2, #5
 8005572:	4631      	mov	r1, r6
 8005574:	4620      	mov	r0, r4
 8005576:	9600      	str	r6, [sp, #0]
 8005578:	f009 fef0 	bl	800f35c <lv_obj_align>
        lv_obj_set_event_cb(new_kb, lv_kb_def_event_cb);
 800557c:	492a      	ldr	r1, [pc, #168]	; (8005628 <lv_kb_create+0x138>)
 800557e:	4620      	mov	r0, r4
 8005580:	f009 fdcc 	bl	800f11c <lv_obj_set_event_cb>
        lv_btnm_set_map(new_kb, kb_map_lc);
 8005584:	4929      	ldr	r1, [pc, #164]	; (800562c <lv_kb_create+0x13c>)
 8005586:	4620      	mov	r0, r4
 8005588:	f00f fa62 	bl	8014a50 <lv_btnm_set_map>
        lv_btnm_set_ctrl_map(new_kb, kb_ctrl_lc_map);
 800558c:	4928      	ldr	r1, [pc, #160]	; (8005630 <lv_kb_create+0x140>)
 800558e:	4620      	mov	r0, r4
 8005590:	f00f fa62 	bl	8014a58 <lv_btnm_set_ctrl_map>
        lv_theme_t * th = lv_theme_get_current();
 8005594:	f7ff ff5a 	bl	800544c <lv_theme_get_current>
        if(th) {
 8005598:	4605      	mov	r5, r0
 800559a:	b318      	cbz	r0, 80055e4 <lv_kb_create+0xf4>
        case LV_KB_STYLE_BG: lv_btnm_set_style(kb, LV_BTNM_STYLE_BG, style); break;
 800559c:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
 80055a0:	4631      	mov	r1, r6
 80055a2:	4620      	mov	r0, r4
 80055a4:	f00f f984 	bl	80148b0 <lv_btnm_set_style>
        case LV_KB_STYLE_BTN_REL: lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_REL, style); break;
 80055a8:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 80055ac:	2101      	movs	r1, #1
 80055ae:	4620      	mov	r0, r4
 80055b0:	f00f f97e 	bl	80148b0 <lv_btnm_set_style>
        case LV_KB_STYLE_BTN_PR: lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_PR, style); break;
 80055b4:	f8d5 20e4 	ldr.w	r2, [r5, #228]	; 0xe4
 80055b8:	2102      	movs	r1, #2
 80055ba:	4620      	mov	r0, r4
 80055bc:	f00f f978 	bl	80148b0 <lv_btnm_set_style>
        case LV_KB_STYLE_BTN_TGL_REL: lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_TGL_REL, style); break;
 80055c0:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
 80055c4:	2103      	movs	r1, #3
 80055c6:	4620      	mov	r0, r4
 80055c8:	f00f f972 	bl	80148b0 <lv_btnm_set_style>
        case LV_KB_STYLE_BTN_TGL_PR: lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_TGL_PR, style); break;
 80055cc:	f8d5 20ec 	ldr.w	r2, [r5, #236]	; 0xec
 80055d0:	2104      	movs	r1, #4
 80055d2:	4620      	mov	r0, r4
 80055d4:	f00f f96c 	bl	80148b0 <lv_btnm_set_style>
        case LV_KB_STYLE_BTN_INA: lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_INA, style); break;
 80055d8:	f8d5 20f0 	ldr.w	r2, [r5, #240]	; 0xf0
 80055dc:	2105      	movs	r1, #5
 80055de:	4620      	mov	r0, r4
 80055e0:	f00f f966 	bl	80148b0 <lv_btnm_set_style>
}
 80055e4:	4620      	mov	r0, r4
 80055e6:	b003      	add	sp, #12
 80055e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_kb_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 80055ea:	4630      	mov	r0, r6
 80055ec:	f00a fa68 	bl	800fac0 <lv_obj_get_ext_attr>
        ext->ta                = NULL;
 80055f0:	62af      	str	r7, [r5, #40]	; 0x28
        ext->ta                = copy_ext->ta;
 80055f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80055f4:	62ab      	str	r3, [r5, #40]	; 0x28
        ext->mode              = copy_ext->mode;
 80055f6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80055fa:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
        ext->cursor_mng        = copy_ext->cursor_mng;
 80055fe:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8005602:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
        lv_obj_refresh_style(new_kb);
 8005606:	4620      	mov	r0, r4
        ext->cursor_mng        = copy_ext->cursor_mng;
 8005608:	f362 0300 	bfi	r3, r2, #0, #1
 800560c:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        lv_obj_refresh_style(new_kb);
 8005610:	f00a f8d5 	bl	800f7be <lv_obj_refresh_style>
    return new_kb;
 8005614:	e7e6      	b.n	80055e4 <lv_kb_create+0xf4>
 8005616:	bf00      	nop
 8005618:	080176f4 	.word	0x080176f4
 800561c:	0801c1b1 	.word	0x0801c1b1
 8005620:	20028934 	.word	0x20028934
 8005624:	08005465 	.word	0x08005465
 8005628:	08005635 	.word	0x08005635
 800562c:	2002df30 	.word	0x2002df30
 8005630:	08017414 	.word	0x08017414

08005634 <lv_kb_def_event_cb>:
    if(event != LV_EVENT_VALUE_CHANGED && event != LV_EVENT_LONG_PRESSED_REPEAT) return;
 8005634:	290e      	cmp	r1, #14
{
 8005636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005638:	4605      	mov	r5, r0
 800563a:	460e      	mov	r6, r1
    if(event != LV_EVENT_VALUE_CHANGED && event != LV_EVENT_LONG_PRESSED_REPEAT) return;
 800563c:	d002      	beq.n	8005644 <lv_kb_def_event_cb+0x10>
 800563e:	2905      	cmp	r1, #5
 8005640:	f040 80dd 	bne.w	80057fe <lv_kb_def_event_cb+0x1ca>
    lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
 8005644:	4628      	mov	r0, r5
 8005646:	f00a fa3b 	bl	800fac0 <lv_obj_get_ext_attr>
 800564a:	4604      	mov	r4, r0
    uint16_t btn_id   = lv_btnm_get_active_btn(kb);
 800564c:	4628      	mov	r0, r5
 800564e:	f00f f9a7 	bl	80149a0 <lv_btnm_get_active_btn>
    if(btn_id == LV_BTNM_BTN_NONE) return;
 8005652:	f64f 73ff 	movw	r3, #65535	; 0xffff
    uint16_t btn_id   = lv_btnm_get_active_btn(kb);
 8005656:	4607      	mov	r7, r0
    if(btn_id == LV_BTNM_BTN_NONE) return;
 8005658:	4298      	cmp	r0, r3
 800565a:	f000 80d0 	beq.w	80057fe <lv_kb_def_event_cb+0x1ca>
    if(lv_btnm_get_btn_ctrl(kb, btn_id, LV_BTNM_CTRL_HIDDEN | LV_BTNM_CTRL_INACTIVE)) return;
 800565e:	4601      	mov	r1, r0
 8005660:	2228      	movs	r2, #40	; 0x28
 8005662:	4628      	mov	r0, r5
 8005664:	f00f f9b1 	bl	80149ca <lv_btnm_get_btn_ctrl>
 8005668:	2800      	cmp	r0, #0
 800566a:	f040 80c8 	bne.w	80057fe <lv_kb_def_event_cb+0x1ca>
    if(lv_btnm_get_btn_ctrl(kb, btn_id, LV_BTNM_CTRL_NO_REPEAT) && event == LV_EVENT_LONG_PRESSED_REPEAT) return;
 800566e:	2210      	movs	r2, #16
 8005670:	4639      	mov	r1, r7
 8005672:	4628      	mov	r0, r5
 8005674:	f00f f9a9 	bl	80149ca <lv_btnm_get_btn_ctrl>
 8005678:	b110      	cbz	r0, 8005680 <lv_kb_def_event_cb+0x4c>
 800567a:	2e05      	cmp	r6, #5
 800567c:	f000 80bf 	beq.w	80057fe <lv_kb_def_event_cb+0x1ca>
    const char * txt = lv_btnm_get_active_btn_text(kb);
 8005680:	4628      	mov	r0, r5
 8005682:	f00f f992 	bl	80149aa <lv_btnm_get_active_btn_text>
    if(txt == NULL) return;
 8005686:	4606      	mov	r6, r0
 8005688:	2800      	cmp	r0, #0
 800568a:	f000 80b8 	beq.w	80057fe <lv_kb_def_event_cb+0x1ca>
    if(strcmp(txt, "abc") == 0) {
 800568e:	495c      	ldr	r1, [pc, #368]	; (8005800 <lv_kb_def_event_cb+0x1cc>)
 8005690:	f011 f862 	bl	8016758 <strcmp>
 8005694:	b948      	cbnz	r0, 80056aa <lv_kb_def_event_cb+0x76>
        lv_btnm_set_map(kb, kb_map_lc);
 8005696:	495b      	ldr	r1, [pc, #364]	; (8005804 <lv_kb_def_event_cb+0x1d0>)
 8005698:	4628      	mov	r0, r5
 800569a:	f00f f9d9 	bl	8014a50 <lv_btnm_set_map>
        lv_btnm_set_ctrl_map(kb, kb_ctrl_lc_map);
 800569e:	495a      	ldr	r1, [pc, #360]	; (8005808 <lv_kb_def_event_cb+0x1d4>)
        lv_btnm_set_ctrl_map(kb, kb_ctrl_uc_map);
 80056a0:	4628      	mov	r0, r5
}
 80056a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_btnm_set_ctrl_map(kb, kb_ctrl_uc_map);
 80056a6:	f00f b9d7 	b.w	8014a58 <lv_btnm_set_ctrl_map>
    } else if(strcmp(txt, "ABC") == 0) {
 80056aa:	4958      	ldr	r1, [pc, #352]	; (800580c <lv_kb_def_event_cb+0x1d8>)
 80056ac:	4630      	mov	r0, r6
 80056ae:	f011 f853 	bl	8016758 <strcmp>
 80056b2:	b928      	cbnz	r0, 80056c0 <lv_kb_def_event_cb+0x8c>
        lv_btnm_set_map(kb, kb_map_uc);
 80056b4:	4956      	ldr	r1, [pc, #344]	; (8005810 <lv_kb_def_event_cb+0x1dc>)
 80056b6:	4628      	mov	r0, r5
 80056b8:	f00f f9ca 	bl	8014a50 <lv_btnm_set_map>
        lv_btnm_set_ctrl_map(kb, kb_ctrl_uc_map);
 80056bc:	4955      	ldr	r1, [pc, #340]	; (8005814 <lv_kb_def_event_cb+0x1e0>)
 80056be:	e7ef      	b.n	80056a0 <lv_kb_def_event_cb+0x6c>
    } else if(strcmp(txt, "1#") == 0) {
 80056c0:	4955      	ldr	r1, [pc, #340]	; (8005818 <lv_kb_def_event_cb+0x1e4>)
 80056c2:	4630      	mov	r0, r6
 80056c4:	f011 f848 	bl	8016758 <strcmp>
 80056c8:	b928      	cbnz	r0, 80056d6 <lv_kb_def_event_cb+0xa2>
        lv_btnm_set_map(kb, kb_map_spec);
 80056ca:	4954      	ldr	r1, [pc, #336]	; (800581c <lv_kb_def_event_cb+0x1e8>)
 80056cc:	4628      	mov	r0, r5
 80056ce:	f00f f9bf 	bl	8014a50 <lv_btnm_set_map>
        lv_btnm_set_ctrl_map(kb, kb_ctrl_spec_map);
 80056d2:	4953      	ldr	r1, [pc, #332]	; (8005820 <lv_kb_def_event_cb+0x1ec>)
 80056d4:	e7e4      	b.n	80056a0 <lv_kb_def_event_cb+0x6c>
    } else if(strcmp(txt, LV_SYMBOL_CLOSE) == 0) {
 80056d6:	4953      	ldr	r1, [pc, #332]	; (8005824 <lv_kb_def_event_cb+0x1f0>)
 80056d8:	4630      	mov	r0, r6
 80056da:	f011 f83d 	bl	8016758 <strcmp>
 80056de:	4602      	mov	r2, r0
 80056e0:	b990      	cbnz	r0, 8005708 <lv_kb_def_event_cb+0xd4>
        if(kb->event_cb != lv_kb_def_event_cb) {
 80056e2:	69a9      	ldr	r1, [r5, #24]
 80056e4:	4b50      	ldr	r3, [pc, #320]	; (8005828 <lv_kb_def_event_cb+0x1f4>)
 80056e6:	4299      	cmp	r1, r3
 80056e8:	d005      	beq.n	80056f6 <lv_kb_def_event_cb+0xc2>
            lv_res_t res = lv_event_send(kb, LV_EVENT_CANCEL, NULL);
 80056ea:	2112      	movs	r1, #18
            lv_res_t res = lv_event_send(kb, LV_EVENT_APPLY, NULL);
 80056ec:	4628      	mov	r0, r5
}
 80056ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_res_t res = lv_event_send(kb, LV_EVENT_APPLY, NULL);
 80056f2:	f009 bd15 	b.w	800f120 <lv_event_send>
            lv_kb_set_ta(kb, NULL); /*De-assign the text area  to hide it cursor if needed*/
 80056f6:	4601      	mov	r1, r0
 80056f8:	4628      	mov	r0, r5
 80056fa:	f00e fcec 	bl	80140d6 <lv_kb_set_ta>
            lv_obj_del(kb);
 80056fe:	4628      	mov	r0, r5
}
 8005700:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_obj_del(kb);
 8005704:	f00a b890 	b.w	800f828 <lv_obj_del>
    } else if(strcmp(txt, LV_SYMBOL_OK) == 0) {
 8005708:	4948      	ldr	r1, [pc, #288]	; (800582c <lv_kb_def_event_cb+0x1f8>)
 800570a:	4630      	mov	r0, r6
 800570c:	f011 f824 	bl	8016758 <strcmp>
 8005710:	4602      	mov	r2, r0
 8005712:	b958      	cbnz	r0, 800572c <lv_kb_def_event_cb+0xf8>
        if(kb->event_cb != lv_kb_def_event_cb) {
 8005714:	69a9      	ldr	r1, [r5, #24]
 8005716:	4b44      	ldr	r3, [pc, #272]	; (8005828 <lv_kb_def_event_cb+0x1f4>)
 8005718:	4299      	cmp	r1, r3
 800571a:	d001      	beq.n	8005720 <lv_kb_def_event_cb+0xec>
            lv_res_t res = lv_event_send(kb, LV_EVENT_APPLY, NULL);
 800571c:	2111      	movs	r1, #17
 800571e:	e7e5      	b.n	80056ec <lv_kb_def_event_cb+0xb8>
            lv_kb_set_ta(kb, NULL); /*De-assign the text area to hide it cursor if needed*/
 8005720:	4601      	mov	r1, r0
 8005722:	4628      	mov	r0, r5
}
 8005724:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_kb_set_ta(kb, NULL); /*De-assign the text area to hide it cursor if needed*/
 8005728:	f00e bcd5 	b.w	80140d6 <lv_kb_set_ta>
    if(ext->ta == NULL) return;
 800572c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800572e:	2b00      	cmp	r3, #0
 8005730:	d065      	beq.n	80057fe <lv_kb_def_event_cb+0x1ca>
    if(strcmp(txt, "Enter") == 0)
 8005732:	493f      	ldr	r1, [pc, #252]	; (8005830 <lv_kb_def_event_cb+0x1fc>)
 8005734:	4630      	mov	r0, r6
 8005736:	f011 f80f 	bl	8016758 <strcmp>
 800573a:	b928      	cbnz	r0, 8005748 <lv_kb_def_event_cb+0x114>
        lv_ta_add_char(ext->ta, '\n');
 800573c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800573e:	210a      	movs	r1, #10
}
 8005740:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_ta_add_char(ext->ta, '\n');
 8005744:	f000 bdb6 	b.w	80062b4 <lv_ta_add_char>
    else if(strcmp(txt, LV_SYMBOL_LEFT) == 0)
 8005748:	493a      	ldr	r1, [pc, #232]	; (8005834 <lv_kb_def_event_cb+0x200>)
 800574a:	4630      	mov	r0, r6
 800574c:	f011 f804 	bl	8016758 <strcmp>
 8005750:	b920      	cbnz	r0, 800575c <lv_kb_def_event_cb+0x128>
        lv_ta_cursor_left(ext->ta);
 8005752:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
 8005754:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_ta_cursor_left(ext->ta);
 8005758:	f00e bef1 	b.w	801453e <lv_ta_cursor_left>
    else if(strcmp(txt, LV_SYMBOL_RIGHT) == 0)
 800575c:	4936      	ldr	r1, [pc, #216]	; (8005838 <lv_kb_def_event_cb+0x204>)
 800575e:	4630      	mov	r0, r6
 8005760:	f010 fffa 	bl	8016758 <strcmp>
 8005764:	b920      	cbnz	r0, 8005770 <lv_kb_def_event_cb+0x13c>
        lv_ta_cursor_right(ext->ta);
 8005766:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
 8005768:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_ta_cursor_right(ext->ta);
 800576c:	f00e bedc 	b.w	8014528 <lv_ta_cursor_right>
    else if(strcmp(txt, "Bksp") == 0)
 8005770:	4932      	ldr	r1, [pc, #200]	; (800583c <lv_kb_def_event_cb+0x208>)
 8005772:	4630      	mov	r0, r6
 8005774:	f010 fff0 	bl	8016758 <strcmp>
 8005778:	b920      	cbnz	r0, 8005784 <lv_kb_def_event_cb+0x150>
        lv_ta_del_char(ext->ta);
 800577a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
 800577c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_ta_del_char(ext->ta);
 8005780:	f000 be5e 	b.w	8006440 <lv_ta_del_char>
    else if(strcmp(txt, "+/-") == 0) {
 8005784:	492e      	ldr	r1, [pc, #184]	; (8005840 <lv_kb_def_event_cb+0x20c>)
 8005786:	4630      	mov	r0, r6
 8005788:	f010 ffe6 	bl	8016758 <strcmp>
 800578c:	4607      	mov	r7, r0
 800578e:	bb80      	cbnz	r0, 80057f2 <lv_kb_def_event_cb+0x1be>
        uint16_t cur        = lv_ta_get_cursor_pos(ext->ta);
 8005790:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005792:	f00e fd91 	bl	80142b8 <lv_ta_get_cursor_pos>
 8005796:	4605      	mov	r5, r0
        const char * ta_txt = lv_ta_get_text(ext->ta);
 8005798:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800579a:	f00e fd4e 	bl	801423a <lv_ta_get_text>
        if(ta_txt[0] == '-') {
 800579e:	7803      	ldrb	r3, [r0, #0]
 80057a0:	b22d      	sxth	r5, r5
 80057a2:	2b2d      	cmp	r3, #45	; 0x2d
 80057a4:	d110      	bne.n	80057c8 <lv_kb_def_event_cb+0x194>
            lv_ta_set_cursor_pos(ext->ta, 1);
 80057a6:	2101      	movs	r1, #1
 80057a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80057aa:	f000 fa7d 	bl	8005ca8 <lv_ta_set_cursor_pos>
            lv_ta_del_char(ext->ta);
 80057ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80057b0:	f000 fe46 	bl	8006440 <lv_ta_del_char>
            lv_ta_add_char(ext->ta, '+');
 80057b4:	212b      	movs	r1, #43	; 0x2b
            lv_ta_add_char(ext->ta, '-');
 80057b6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80057b8:	f000 fd7c 	bl	80062b4 <lv_ta_add_char>
            lv_ta_set_cursor_pos(ext->ta, cur);
 80057bc:	4629      	mov	r1, r5
            lv_ta_set_cursor_pos(ext->ta, cur + 1);
 80057be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
 80057c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_ta_set_cursor_pos(ext->ta, cur + 1);
 80057c4:	f000 ba70 	b.w	8005ca8 <lv_ta_set_cursor_pos>
        } else if(ta_txt[0] == '+') {
 80057c8:	2b2b      	cmp	r3, #43	; 0x2b
 80057ca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80057cc:	d107      	bne.n	80057de <lv_kb_def_event_cb+0x1aa>
            lv_ta_set_cursor_pos(ext->ta, 1);
 80057ce:	2101      	movs	r1, #1
 80057d0:	f000 fa6a 	bl	8005ca8 <lv_ta_set_cursor_pos>
            lv_ta_del_char(ext->ta);
 80057d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80057d6:	f000 fe33 	bl	8006440 <lv_ta_del_char>
            lv_ta_add_char(ext->ta, '-');
 80057da:	212d      	movs	r1, #45	; 0x2d
 80057dc:	e7eb      	b.n	80057b6 <lv_kb_def_event_cb+0x182>
            lv_ta_set_cursor_pos(ext->ta, 0);
 80057de:	4639      	mov	r1, r7
 80057e0:	f000 fa62 	bl	8005ca8 <lv_ta_set_cursor_pos>
            lv_ta_add_char(ext->ta, '-');
 80057e4:	212d      	movs	r1, #45	; 0x2d
 80057e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80057e8:	f000 fd64 	bl	80062b4 <lv_ta_add_char>
            lv_ta_set_cursor_pos(ext->ta, cur + 1);
 80057ec:	1c69      	adds	r1, r5, #1
 80057ee:	b209      	sxth	r1, r1
 80057f0:	e7e5      	b.n	80057be <lv_kb_def_event_cb+0x18a>
        lv_ta_add_text(ext->ta, txt);
 80057f2:	4631      	mov	r1, r6
 80057f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
 80057f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_ta_add_text(ext->ta, txt);
 80057fa:	f000 bca1 	b.w	8006140 <lv_ta_add_text>
}
 80057fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005800:	0801c210 	.word	0x0801c210
 8005804:	2002df30 	.word	0x2002df30
 8005808:	08017414 	.word	0x08017414
 800580c:	0801c214 	.word	0x0801c214
 8005810:	2002e090 	.word	0x2002e090
 8005814:	080174b4 	.word	0x080174b4
 8005818:	0801c218 	.word	0x0801c218
 800581c:	2002dfe0 	.word	0x2002dfe0
 8005820:	08017464 	.word	0x08017464
 8005824:	0801c21b 	.word	0x0801c21b
 8005828:	08005635 	.word	0x08005635
 800582c:	0801c21f 	.word	0x0801c21f
 8005830:	0801c223 	.word	0x0801c223
 8005834:	0801c229 	.word	0x0801c229
 8005838:	0801c22d 	.word	0x0801c22d
 800583c:	0801c231 	.word	0x0801c231
 8005840:	0801c236 	.word	0x0801c236

08005844 <pwd_char_hider>:
/**
 * Hide all characters (convert them to '*')
 * @param ta: pointer to text area object
 */
static void pwd_char_hider(lv_obj_t * ta)
{
 8005844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8005846:	f00a f93b 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->pwd_mode != 0) {
 800584a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 800584e:	4604      	mov	r4, r0
    if(ext->pwd_mode != 0) {
 8005850:	07db      	lsls	r3, r3, #31
 8005852:	d51c      	bpl.n	800588e <pwd_char_hider+0x4a>
        char * txt  = lv_label_get_text(ext->label);
 8005854:	6b00      	ldr	r0, [r0, #48]	; 0x30
        int16_t len = lv_txt_get_encoded_length(txt);
        bool refr   = false;
        uint16_t i;
        for(i = 0; i < len; i++) {
            txt[i] = '*';
 8005856:	272a      	movs	r7, #42	; 0x2a
        char * txt  = lv_label_get_text(ext->label);
 8005858:	f010 fac1 	bl	8015dde <lv_label_get_text>
        int16_t len = lv_txt_get_encoded_length(txt);
 800585c:	4b0c      	ldr	r3, [pc, #48]	; (8005890 <pwd_char_hider+0x4c>)
        char * txt  = lv_label_get_text(ext->label);
 800585e:	4605      	mov	r5, r0
        int16_t len = lv_txt_get_encoded_length(txt);
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4798      	blx	r3
        for(i = 0; i < len; i++) {
 8005864:	2300      	movs	r3, #0
        int16_t len = lv_txt_get_encoded_length(txt);
 8005866:	b200      	sxth	r0, r0
        bool refr   = false;
 8005868:	4619      	mov	r1, r3
        for(i = 0; i < len; i++) {
 800586a:	b29a      	uxth	r2, r3
 800586c:	3301      	adds	r3, #1
 800586e:	4282      	cmp	r2, r0
 8005870:	eb05 0602 	add.w	r6, r5, r2
 8005874:	db08      	blt.n	8005888 <pwd_char_hider+0x44>
            refr   = true;
        }

        txt[i] = '\0';
 8005876:	2300      	movs	r3, #0
 8005878:	7033      	strb	r3, [r6, #0]

        if(refr != false) lv_label_set_text(ext->label, txt);
 800587a:	b141      	cbz	r1, 800588e <pwd_char_hider+0x4a>
 800587c:	4629      	mov	r1, r5
 800587e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    }
}
 8005880:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        if(refr != false) lv_label_set_text(ext->label, txt);
 8005884:	f005 bda4 	b.w	800b3d0 <lv_label_set_text>
            txt[i] = '*';
 8005888:	54af      	strb	r7, [r5, r2]
            refr   = true;
 800588a:	2101      	movs	r1, #1
 800588c:	e7ed      	b.n	800586a <pwd_char_hider+0x26>
}
 800588e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005890:	2002da58 	.word	0x2002da58

08005894 <lv_ta_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 8005894:	2a02      	cmp	r2, #2
{
 8005896:	b510      	push	{r4, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 8005898:	d104      	bne.n	80058a4 <lv_ta_design+0x10>
        return ancestor_design(ta, mask, mode);
 800589a:	4b07      	ldr	r3, [pc, #28]	; (80058b8 <lv_ta_design+0x24>)
}
 800589c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return ancestor_design(ta, mask, mode);
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4718      	bx	r3
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 80058a4:	b91a      	cbnz	r2, 80058ae <lv_ta_design+0x1a>
        ancestor_design(ta, mask, mode);
 80058a6:	4b04      	ldr	r3, [pc, #16]	; (80058b8 <lv_ta_design+0x24>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4798      	blx	r3
 80058ac:	e001      	b.n	80058b2 <lv_ta_design+0x1e>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 80058ae:	2a01      	cmp	r2, #1
 80058b0:	d0f9      	beq.n	80058a6 <lv_ta_design+0x12>
}
 80058b2:	2001      	movs	r0, #1
 80058b4:	bd10      	pop	{r4, pc}
 80058b6:	bf00      	nop
 80058b8:	20028938 	.word	0x20028938

080058bc <lv_ta_scrollable_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 80058bc:	2a02      	cmp	r2, #2
{
 80058be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058c2:	4604      	mov	r4, r0
 80058c4:	b09b      	sub	sp, #108	; 0x6c
 80058c6:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 80058c8:	d105      	bne.n	80058d6 <lv_ta_scrollable_design+0x1a>
        return scrl_design(scrl, mask, mode);
 80058ca:	4b4f      	ldr	r3, [pc, #316]	; (8005a08 <lv_ta_scrollable_design+0x14c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4798      	blx	r3
}
 80058d0:	b01b      	add	sp, #108	; 0x6c
 80058d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 80058d6:	b922      	cbnz	r2, 80058e2 <lv_ta_scrollable_design+0x26>
        scrl_design(scrl, mask, mode);
 80058d8:	4b4b      	ldr	r3, [pc, #300]	; (8005a08 <lv_ta_scrollable_design+0x14c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4798      	blx	r3
    return true;
 80058de:	2001      	movs	r0, #1
 80058e0:	e7f6      	b.n	80058d0 <lv_ta_scrollable_design+0x14>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 80058e2:	2a01      	cmp	r2, #1
 80058e4:	d1fb      	bne.n	80058de <lv_ta_scrollable_design+0x22>
        scrl_design(scrl, mask, mode);
 80058e6:	4b48      	ldr	r3, [pc, #288]	; (8005a08 <lv_ta_scrollable_design+0x14c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4798      	blx	r3
        lv_obj_t * ta     = lv_obj_get_parent(scrl);
 80058ec:	4620      	mov	r0, r4
 80058ee:	f00a f805 	bl	800f8fc <lv_obj_get_parent>
 80058f2:	4607      	mov	r7, r0
        lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80058f4:	f00a f8e4 	bl	800fac0 <lv_obj_get_ext_attr>
        if(ext->cursor.type == LV_CURSOR_NONE || (ext->cursor.type & LV_CURSOR_HIDDEN) || ext->cursor.state == 0) {
 80058f8:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
        lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80058fc:	4605      	mov	r5, r0
        if(ext->cursor.type == LV_CURSOR_NONE || (ext->cursor.type & LV_CURSOR_HIDDEN) || ext->cursor.state == 0) {
 80058fe:	071a      	lsls	r2, r3, #28
 8005900:	d0ed      	beq.n	80058de <lv_ta_scrollable_design+0x22>
 8005902:	f013 0408 	ands.w	r4, r3, #8
 8005906:	d1ea      	bne.n	80058de <lv_ta_scrollable_design+0x22>
 8005908:	06db      	lsls	r3, r3, #27
 800590a:	d5e8      	bpl.n	80058de <lv_ta_scrollable_design+0x22>
        get_cursor_style(ta, &cur_style);
 800590c:	a90b      	add	r1, sp, #44	; 0x2c
 800590e:	4638      	mov	r0, r7
 8005910:	f00e fc1e 	bl	8014150 <get_cursor_style>
        const char * txt = lv_label_get_text(ext->label);
 8005914:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8005916:	f010 fa62 	bl	8015dde <lv_label_get_text>
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 800591a:	2208      	movs	r2, #8
 800591c:	f105 014e 	add.w	r1, r5, #78	; 0x4e
 8005920:	4680      	mov	r8, r0
 8005922:	a807      	add	r0, sp, #28
 8005924:	f010 ff24 	bl	8016770 <memcpy>
        cur_area.x1 += ext->label->coords.x1;
 8005928:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800592a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        lv_opa_t opa_scale = lv_obj_get_opa_scale(ta);
 800592e:	4638      	mov	r0, r7
        cur_area.x1 += ext->label->coords.x1;
 8005930:	f9b1 2010 	ldrsh.w	r2, [r1, #16]
 8005934:	4413      	add	r3, r2
 8005936:	f8ad 301c 	strh.w	r3, [sp, #28]
        cur_area.y1 += ext->label->coords.y1;
 800593a:	f9b1 3012 	ldrsh.w	r3, [r1, #18]
 800593e:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8005942:	4419      	add	r1, r3
 8005944:	f8ad 101e 	strh.w	r1, [sp, #30]
        cur_area.x2 += ext->label->coords.x1;
 8005948:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 800594c:	440a      	add	r2, r1
 800594e:	f8ad 2020 	strh.w	r2, [sp, #32]
        cur_area.y2 += ext->label->coords.y1;
 8005952:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8005956:	4413      	add	r3, r2
 8005958:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        lv_opa_t opa_scale = lv_obj_get_opa_scale(ta);
 800595c:	f00a f847 	bl	800f9ee <lv_obj_get_opa_scale>
        if(ext->cursor.type == LV_CURSOR_LINE) {
 8005960:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
        lv_opa_t opa_scale = lv_obj_get_opa_scale(ta);
 8005964:	4607      	mov	r7, r0
        if(ext->cursor.type == LV_CURSOR_LINE) {
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	2b01      	cmp	r3, #1
 800596c:	d106      	bne.n	800597c <lv_ta_scrollable_design+0xc0>
            lv_draw_rect(&cur_area, mask, &cur_style, opa_scale);
 800596e:	463b      	mov	r3, r7
 8005970:	aa0b      	add	r2, sp, #44	; 0x2c
 8005972:	4631      	mov	r1, r6
 8005974:	a807      	add	r0, sp, #28
 8005976:	f00b fe70 	bl	801165a <lv_draw_rect>
 800597a:	e7b0      	b.n	80058de <lv_ta_scrollable_design+0x22>
        } else if(ext->cursor.type == LV_CURSOR_BLOCK) {
 800597c:	2b02      	cmp	r3, #2
 800597e:	d133      	bne.n	80059e8 <lv_ta_scrollable_design+0x12c>
            lv_draw_rect(&cur_area, mask, &cur_style, opa_scale);
 8005980:	aa0b      	add	r2, sp, #44	; 0x2c
 8005982:	4631      	mov	r1, r6
 8005984:	4603      	mov	r3, r0
 8005986:	a807      	add	r0, sp, #28
 8005988:	f00b fe67 	bl	801165a <lv_draw_rect>
            memcpy(letter_buf, &txt[ext->cursor.txt_byte_pos], lv_txt_encoded_size(&txt[ext->cursor.txt_byte_pos]));
 800598c:	f8b5 5056 	ldrh.w	r5, [r5, #86]	; 0x56
 8005990:	4b1e      	ldr	r3, [pc, #120]	; (8005a0c <lv_ta_scrollable_design+0x150>)
            char letter_buf[8] = {0};
 8005992:	f10d 0924 	add.w	r9, sp, #36	; 0x24
            memcpy(letter_buf, &txt[ext->cursor.txt_byte_pos], lv_txt_encoded_size(&txt[ext->cursor.txt_byte_pos]));
 8005996:	4445      	add	r5, r8
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4628      	mov	r0, r5
            char letter_buf[8] = {0};
 800599c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
            memcpy(letter_buf, &txt[ext->cursor.txt_byte_pos], lv_txt_encoded_size(&txt[ext->cursor.txt_byte_pos]));
 80059a0:	4798      	blx	r3
 80059a2:	4629      	mov	r1, r5
 80059a4:	4602      	mov	r2, r0
 80059a6:	4648      	mov	r0, r9
 80059a8:	f010 fee2 	bl	8016770 <memcpy>
            cur_area.x1 += cur_style.body.padding.left;
 80059ac:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80059b0:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
            lv_draw_label(&cur_area, mask, &cur_style, opa_scale, letter_buf, LV_TXT_FLAG_NONE, 0,
 80059b4:	4631      	mov	r1, r6
 80059b6:	9405      	str	r4, [sp, #20]
 80059b8:	a807      	add	r0, sp, #28
            cur_area.x1 += cur_style.body.padding.left;
 80059ba:	4413      	add	r3, r2
            cur_area.y1 += cur_style.body.padding.top;
 80059bc:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
            lv_draw_label(&cur_area, mask, &cur_style, opa_scale, letter_buf, LV_TXT_FLAG_NONE, 0,
 80059c0:	f8cd 9000 	str.w	r9, [sp]
            cur_area.x1 += cur_style.body.padding.left;
 80059c4:	f8ad 301c 	strh.w	r3, [sp, #28]
            cur_area.y1 += cur_style.body.padding.top;
 80059c8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80059cc:	4413      	add	r3, r2
            lv_draw_label(&cur_area, mask, &cur_style, opa_scale, letter_buf, LV_TXT_FLAG_NONE, 0,
 80059ce:	aa0b      	add	r2, sp, #44	; 0x2c
            cur_area.y1 += cur_style.body.padding.top;
 80059d0:	f8ad 301e 	strh.w	r3, [sp, #30]
            lv_draw_label(&cur_area, mask, &cur_style, opa_scale, letter_buf, LV_TXT_FLAG_NONE, 0,
 80059d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059d8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80059dc:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80059e0:	463b      	mov	r3, r7
 80059e2:	f7fe fef3 	bl	80047cc <lv_draw_label>
 80059e6:	e77a      	b.n	80058de <lv_ta_scrollable_design+0x22>
        } else if(ext->cursor.type == LV_CURSOR_OUTLINE) {
 80059e8:	2b03      	cmp	r3, #3
 80059ea:	d109      	bne.n	8005a00 <lv_ta_scrollable_design+0x144>
            if(cur_style.body.border.width == 0) cur_style.body.border.width = 1; /*Be sure the border will be drawn*/
 80059ec:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
            cur_style.body.opa = LV_OPA_TRANSP;
 80059f0:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
            if(cur_style.body.border.width == 0) cur_style.body.border.width = 1; /*Be sure the border will be drawn*/
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1ba      	bne.n	800596e <lv_ta_scrollable_design+0xb2>
 80059f8:	2301      	movs	r3, #1
 80059fa:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
            lv_draw_rect(&cur_area, mask, &cur_style, opa_scale);
 80059fe:	e7b6      	b.n	800596e <lv_ta_scrollable_design+0xb2>
        } else if(ext->cursor.type == LV_CURSOR_UNDERLINE) {
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	f47f af6c 	bne.w	80058de <lv_ta_scrollable_design+0x22>
 8005a06:	e7b2      	b.n	800596e <lv_ta_scrollable_design+0xb2>
 8005a08:	20028940 	.word	0x20028940
 8005a0c:	2002da54 	.word	0x2002da54

08005a10 <refr_cursor_area>:
        style_res->body.opa            = LV_OPA_COVER;
    }
}

static void refr_cursor_area(lv_obj_t * ta)
{
 8005a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a14:	4682      	mov	sl, r0
 8005a16:	b099      	sub	sp, #100	; 0x64
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8005a18:	f00a f852 	bl	800fac0 <lv_obj_get_ext_attr>
 8005a1c:	4604      	mov	r4, r0

    const lv_style_t * label_style = lv_obj_get_style(ext->label);
 8005a1e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8005a20:	f7fd f98e 	bl	8002d40 <lv_obj_get_style>

    lv_style_t cur_style;
    get_cursor_style(ta, &cur_style);
 8005a24:	a909      	add	r1, sp, #36	; 0x24
    const lv_style_t * label_style = lv_obj_get_style(ext->label);
 8005a26:	4680      	mov	r8, r0
    get_cursor_style(ta, &cur_style);
 8005a28:	4650      	mov	r0, sl
 8005a2a:	f00e fb91 	bl	8014150 <get_cursor_style>

    uint16_t cur_pos = lv_ta_get_cursor_pos(ta);
 8005a2e:	4650      	mov	r0, sl
 8005a30:	f00e fc42 	bl	80142b8 <lv_ta_get_cursor_pos>
 8005a34:	4607      	mov	r7, r0
    const char * txt = lv_label_get_text(ext->label);
 8005a36:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005a38:	f010 f9d1 	bl	8015dde <lv_label_get_text>

    uint32_t byte_pos;
    byte_pos = lv_txt_encoded_get_byte_id(txt, cur_pos);
 8005a3c:	4b97      	ldr	r3, [pc, #604]	; (8005c9c <refr_cursor_area+0x28c>)
 8005a3e:	4639      	mov	r1, r7
    const char * txt = lv_label_get_text(ext->label);
 8005a40:	9002      	str	r0, [sp, #8]
    byte_pos = lv_txt_encoded_get_byte_id(txt, cur_pos);
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4798      	blx	r3

    uint32_t letter = lv_txt_encoded_next(&txt[byte_pos], NULL);
 8005a46:	9b02      	ldr	r3, [sp, #8]
 8005a48:	f8df b258 	ldr.w	fp, [pc, #600]	; 8005ca4 <refr_cursor_area+0x294>
    byte_pos = lv_txt_encoded_get_byte_id(txt, cur_pos);
 8005a4c:	4606      	mov	r6, r0
    uint32_t letter = lv_txt_encoded_next(&txt[byte_pos], NULL);
 8005a4e:	4403      	add	r3, r0
 8005a50:	2100      	movs	r1, #0
 8005a52:	f8db 2000 	ldr.w	r2, [fp]
 8005a56:	4618      	mov	r0, r3
 8005a58:	9301      	str	r3, [sp, #4]
 8005a5a:	4790      	blx	r2
 8005a5c:	4681      	mov	r9, r0

    lv_coord_t letter_h = lv_font_get_line_height(label_style->text.font);
 8005a5e:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24

    /*Set letter_w (set not 0 on non printable but valid chars)*/
    lv_coord_t letter_w;
    if(letter == '\0' || letter == '\n' || letter == '\r') {
 8005a62:	f1b9 0f0d 	cmp.w	r9, #13
 8005a66:	f8cd b00c 	str.w	fp, [sp, #12]
    lv_coord_t letter_h = lv_font_get_line_height(label_style->text.font);
 8005a6a:	7a05      	ldrb	r5, [r0, #8]
    if(letter == '\0' || letter == '\n' || letter == '\r') {
 8005a6c:	f200 80cd 	bhi.w	8005c0a <refr_cursor_area+0x1fa>
 8005a70:	f242 4201 	movw	r2, #9217	; 0x2401
 8005a74:	fa22 f209 	lsr.w	r2, r2, r9
 8005a78:	43d2      	mvns	r2, r2
 8005a7a:	f012 0201 	ands.w	r2, r2, #1
 8005a7e:	f040 80c4 	bne.w	8005c0a <refr_cursor_area+0x1fa>
        letter_w = lv_font_get_glyph_width(label_style->text.font, ' ', '\0');
 8005a82:	2120      	movs	r1, #32
    } else {
        /*`letter_next` parameter is '\0' to ignore kerning*/
        letter_w = lv_font_get_glyph_width(label_style->text.font, letter, '\0');
 8005a84:	f00e fb1b 	bl	80140be <lv_font_get_glyph_width>
    }

    lv_point_t letter_pos;
    lv_label_get_letter_pos(ext->label, cur_pos, &letter_pos);
 8005a88:	aa04      	add	r2, sp, #16
        letter_w = lv_font_get_glyph_width(label_style->text.font, letter, '\0');
 8005a8a:	fa0f fb80 	sxth.w	fp, r0
    lv_label_get_letter_pos(ext->label, cur_pos, &letter_pos);
 8005a8e:	4639      	mov	r1, r7
 8005a90:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005a92:	f005 f923 	bl	800acdc <lv_label_get_letter_pos>

    /*If the cursor is out of the text (most right) draw it to the next line*/
    if(letter_pos.x + ext->label->coords.x1 + letter_w > ext->label->coords.x2 && ext->one_line == 0 &&
 8005a96:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005a98:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8005a9c:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 8005aa0:	440a      	add	r2, r1
 8005aa2:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 8005aa6:	445a      	add	r2, fp
 8005aa8:	428a      	cmp	r2, r1
 8005aaa:	dd33      	ble.n	8005b14 <refr_cursor_area+0x104>
 8005aac:	f894 705c 	ldrb.w	r7, [r4, #92]	; 0x5c
 8005ab0:	f017 0702 	ands.w	r7, r7, #2
 8005ab4:	d12e      	bne.n	8005b14 <refr_cursor_area+0x104>
       lv_label_get_align(ext->label) != LV_LABEL_ALIGN_RIGHT) {
 8005ab6:	f010 f99e 	bl	8015df6 <lv_label_get_align>
    if(letter_pos.x + ext->label->coords.x1 + letter_w > ext->label->coords.x2 && ext->one_line == 0 &&
 8005aba:	2802      	cmp	r0, #2
 8005abc:	d02a      	beq.n	8005b14 <refr_cursor_area+0x104>
        letter_pos.x = 0;
        letter_pos.y += letter_h + label_style->text.line_space;
 8005abe:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8005ac2:	f8b8 202a 	ldrh.w	r2, [r8, #42]	; 0x2a
        letter_pos.x = 0;
 8005ac6:	f8ad 7010 	strh.w	r7, [sp, #16]
        letter_pos.y += letter_h + label_style->text.line_space;
 8005aca:	4413      	add	r3, r2
 8005acc:	442b      	add	r3, r5
 8005ace:	f8ad 3012 	strh.w	r3, [sp, #18]

        if(letter != '\0') {
 8005ad2:	f1b9 0f00 	cmp.w	r9, #0
 8005ad6:	d015      	beq.n	8005b04 <refr_cursor_area+0xf4>
            byte_pos += lv_txt_encoded_size(&txt[byte_pos]);
 8005ad8:	4b71      	ldr	r3, [pc, #452]	; (8005ca0 <refr_cursor_area+0x290>)
 8005ada:	9801      	ldr	r0, [sp, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4798      	blx	r3
            letter = lv_txt_encoded_next(&txt[byte_pos], NULL);
 8005ae0:	9a02      	ldr	r2, [sp, #8]
            byte_pos += lv_txt_encoded_size(&txt[byte_pos]);
 8005ae2:	4406      	add	r6, r0
            letter = lv_txt_encoded_next(&txt[byte_pos], NULL);
 8005ae4:	9b03      	ldr	r3, [sp, #12]
 8005ae6:	4639      	mov	r1, r7
 8005ae8:	4432      	add	r2, r6
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4610      	mov	r0, r2
 8005aee:	4798      	blx	r3
        }

        if(letter == '\0' || letter == '\n' || letter == '\r') {
 8005af0:	280d      	cmp	r0, #13
            letter = lv_txt_encoded_next(&txt[byte_pos], NULL);
 8005af2:	4601      	mov	r1, r0
        if(letter == '\0' || letter == '\n' || letter == '\r') {
 8005af4:	f200 808c 	bhi.w	8005c10 <refr_cursor_area+0x200>
 8005af8:	f242 4301 	movw	r3, #9217	; 0x2401
 8005afc:	40c3      	lsrs	r3, r0
 8005afe:	07db      	lsls	r3, r3, #31
 8005b00:	f140 8086 	bpl.w	8005c10 <refr_cursor_area+0x200>
            letter_w = lv_font_get_glyph_width(label_style->text.font, ' ', '\0');
 8005b04:	2200      	movs	r2, #0
 8005b06:	2120      	movs	r1, #32
        } else {
            letter_w = lv_font_get_glyph_width(label_style->text.font, letter, '\0');
 8005b08:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
 8005b0c:	f00e fad7 	bl	80140be <lv_font_get_glyph_width>
 8005b10:	fa0f fb80 	sxth.w	fp, r0
    ext->cursor.txt_byte_pos = byte_pos;

    /*Draw he cursor according to the type*/
    lv_area_t cur_area;

    if(ext->cursor.type == LV_CURSOR_LINE) {
 8005b14:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
    ext->cursor.txt_byte_pos = byte_pos;
 8005b18:	f8a4 6056 	strh.w	r6, [r4, #86]	; 0x56
    if(ext->cursor.type == LV_CURSOR_LINE) {
 8005b1c:	f002 020f 	and.w	r2, r2, #15
 8005b20:	2a01      	cmp	r2, #1
 8005b22:	d177      	bne.n	8005c14 <refr_cursor_area+0x204>
        cur_area.x1 =
            letter_pos.x + cur_style.body.padding.left - (cur_style.line.width >> 1) - (cur_style.line.width & 0x1);
 8005b24:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8005b28:	f9bd 005a 	ldrsh.w	r0, [sp, #90]	; 0x5a
 8005b2c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8005b30:	1042      	asrs	r2, r0, #1
 8005b32:	f000 0001 	and.w	r0, r0, #1
 8005b36:	440b      	add	r3, r1
 8005b38:	1a9b      	subs	r3, r3, r2
 8005b3a:	1a1b      	subs	r3, r3, r0
        cur_area.y1 = letter_pos.y + cur_style.body.padding.top;
 8005b3c:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
        cur_area.x1 =
 8005b40:	f8ad 3014 	strh.w	r3, [sp, #20]
        cur_area.y1 = letter_pos.y + cur_style.body.padding.top;
 8005b44:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8005b48:	4418      	add	r0, r3
 8005b4a:	f8ad 0016 	strh.w	r0, [sp, #22]
        cur_area.x2 = letter_pos.x + cur_style.body.padding.right + (cur_style.line.width >> 1);
 8005b4e:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8005b52:	4401      	add	r1, r0
 8005b54:	440a      	add	r2, r1
 8005b56:	f8ad 2018 	strh.w	r2, [sp, #24]
        cur_area.y2 = letter_pos.y + cur_style.body.padding.bottom + letter_h;
 8005b5a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8005b5e:	4413      	add	r3, r2
 8005b60:	441d      	add	r5, r3
        cur_area.y2 = letter_pos.y + cur_style.body.padding.bottom + letter_h;
    } else if(ext->cursor.type == LV_CURSOR_UNDERLINE) {
        cur_area.x1 = letter_pos.x + cur_style.body.padding.left;
        cur_area.y1 = letter_pos.y + cur_style.body.padding.top + letter_h - (cur_style.line.width >> 1);
        cur_area.x2 = letter_pos.x + cur_style.body.padding.right + letter_w;
        cur_area.y2 = letter_pos.y + cur_style.body.padding.bottom + letter_h + (cur_style.line.width >> 1) +
 8005b62:	f8ad 501a 	strh.w	r5, [sp, #26]
    }

    /*Save the new area*/
    lv_disp_t * disp = lv_obj_get_disp(ta);
    lv_area_t area_tmp;
    lv_area_copy(&area_tmp, &ext->cursor.area);
 8005b66:	f104 064e 	add.w	r6, r4, #78	; 0x4e
    lv_disp_t * disp = lv_obj_get_disp(ta);
 8005b6a:	4650      	mov	r0, sl
 8005b6c:	f7fc ff24 	bl	80029b8 <lv_obj_get_disp>
 8005b70:	2208      	movs	r2, #8
 8005b72:	4605      	mov	r5, r0
 8005b74:	4631      	mov	r1, r6
 8005b76:	a807      	add	r0, sp, #28
 8005b78:	f010 fdfa 	bl	8016770 <memcpy>
    area_tmp.x1 += ext->label->coords.x1;
 8005b7c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005b7e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    area_tmp.y1 += ext->label->coords.y1;
    area_tmp.x2 += ext->label->coords.x1;
    area_tmp.y2 += ext->label->coords.y1;
    lv_inv_area(disp, &area_tmp);
 8005b82:	4628      	mov	r0, r5
    area_tmp.x1 += ext->label->coords.x1;
 8005b84:	f9b1 2010 	ldrsh.w	r2, [r1, #16]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f8ad 301c 	strh.w	r3, [sp, #28]
    area_tmp.y1 += ext->label->coords.y1;
 8005b8e:	f9b1 3012 	ldrsh.w	r3, [r1, #18]
 8005b92:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8005b96:	4419      	add	r1, r3
 8005b98:	f8ad 101e 	strh.w	r1, [sp, #30]
    area_tmp.x2 += ext->label->coords.x1;
 8005b9c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8005ba0:	440a      	add	r2, r1
    lv_inv_area(disp, &area_tmp);
 8005ba2:	a907      	add	r1, sp, #28
    area_tmp.x2 += ext->label->coords.x1;
 8005ba4:	f8ad 2020 	strh.w	r2, [sp, #32]
    area_tmp.y2 += ext->label->coords.y1;
 8005ba8:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8005bac:	4413      	add	r3, r2
 8005bae:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    lv_inv_area(disp, &area_tmp);
 8005bb2:	f7fd f99b 	bl	8002eec <lv_inv_area>
 8005bb6:	a905      	add	r1, sp, #20
 8005bb8:	2208      	movs	r2, #8
 8005bba:	4630      	mov	r0, r6
 8005bbc:	f010 fdd8 	bl	8016770 <memcpy>
 8005bc0:	4631      	mov	r1, r6
 8005bc2:	2208      	movs	r2, #8
 8005bc4:	a807      	add	r0, sp, #28
 8005bc6:	f010 fdd3 	bl	8016770 <memcpy>

    lv_area_copy(&ext->cursor.area, &cur_area);

    lv_area_copy(&area_tmp, &ext->cursor.area);
    area_tmp.x1 += ext->label->coords.x1;
 8005bca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005bcc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    area_tmp.y1 += ext->label->coords.y1;
    area_tmp.x2 += ext->label->coords.x1;
    area_tmp.y2 += ext->label->coords.y1;
    lv_inv_area(disp, &area_tmp);
 8005bd0:	4628      	mov	r0, r5
    area_tmp.x1 += ext->label->coords.x1;
 8005bd2:	f9b1 2010 	ldrsh.w	r2, [r1, #16]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f8ad 301c 	strh.w	r3, [sp, #28]
    area_tmp.y1 += ext->label->coords.y1;
 8005bdc:	f9b1 3012 	ldrsh.w	r3, [r1, #18]
 8005be0:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8005be4:	4419      	add	r1, r3
 8005be6:	f8ad 101e 	strh.w	r1, [sp, #30]
    area_tmp.x2 += ext->label->coords.x1;
 8005bea:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8005bee:	440a      	add	r2, r1
    lv_inv_area(disp, &area_tmp);
 8005bf0:	a907      	add	r1, sp, #28
    area_tmp.x2 += ext->label->coords.x1;
 8005bf2:	f8ad 2020 	strh.w	r2, [sp, #32]
    area_tmp.y2 += ext->label->coords.y1;
 8005bf6:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    lv_inv_area(disp, &area_tmp);
 8005c00:	f7fd f974 	bl	8002eec <lv_inv_area>
}
 8005c04:	b019      	add	sp, #100	; 0x64
 8005c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        letter_w = lv_font_get_glyph_width(label_style->text.font, letter, '\0');
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	4649      	mov	r1, r9
 8005c0e:	e739      	b.n	8005a84 <refr_cursor_area+0x74>
            letter_w = lv_font_get_glyph_width(label_style->text.font, letter, '\0');
 8005c10:	2200      	movs	r2, #0
 8005c12:	e779      	b.n	8005b08 <refr_cursor_area+0xf8>
    } else if(ext->cursor.type == LV_CURSOR_BLOCK) {
 8005c14:	2a02      	cmp	r2, #2
 8005c16:	d119      	bne.n	8005c4c <refr_cursor_area+0x23c>
        cur_area.x1 = letter_pos.x - cur_style.body.padding.left;
 8005c18:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8005c1c:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
        cur_area.y1 = letter_pos.y - cur_style.body.padding.top;
 8005c20:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
        cur_area.x1 = letter_pos.x - cur_style.body.padding.left;
 8005c24:	1a8a      	subs	r2, r1, r2
 8005c26:	f8ad 2014 	strh.w	r2, [sp, #20]
        cur_area.y1 = letter_pos.y - cur_style.body.padding.top;
 8005c2a:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8005c2e:	1a10      	subs	r0, r2, r0
 8005c30:	f8ad 0016 	strh.w	r0, [sp, #22]
        cur_area.x2 = letter_pos.x + cur_style.body.padding.right + letter_w;
 8005c34:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8005c38:	4401      	add	r1, r0
 8005c3a:	eb0b 0301 	add.w	r3, fp, r1
 8005c3e:	f8ad 3018 	strh.w	r3, [sp, #24]
        cur_area.y2 = letter_pos.y + cur_style.body.padding.bottom + letter_h;
 8005c42:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8005c46:	441a      	add	r2, r3
 8005c48:	4415      	add	r5, r2
 8005c4a:	e78a      	b.n	8005b62 <refr_cursor_area+0x152>
    } else if(ext->cursor.type == LV_CURSOR_OUTLINE) {
 8005c4c:	2a03      	cmp	r2, #3
 8005c4e:	d0e3      	beq.n	8005c18 <refr_cursor_area+0x208>
    } else if(ext->cursor.type == LV_CURSOR_UNDERLINE) {
 8005c50:	2a04      	cmp	r2, #4
 8005c52:	d188      	bne.n	8005b66 <refr_cursor_area+0x156>
        cur_area.x1 = letter_pos.x + cur_style.body.padding.left;
 8005c54:	f9bd 7010 	ldrsh.w	r7, [sp, #16]
 8005c58:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
        cur_area.y1 = letter_pos.y + cur_style.body.padding.top + letter_h - (cur_style.line.width >> 1);
 8005c5c:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
        cur_area.x1 = letter_pos.x + cur_style.body.padding.left;
 8005c60:	443a      	add	r2, r7
        cur_area.y1 = letter_pos.y + cur_style.body.padding.top + letter_h - (cur_style.line.width >> 1);
 8005c62:	f9bd 005a 	ldrsh.w	r0, [sp, #90]	; 0x5a
        cur_area.x1 = letter_pos.x + cur_style.body.padding.left;
 8005c66:	f8ad 2014 	strh.w	r2, [sp, #20]
        cur_area.y1 = letter_pos.y + cur_style.body.padding.top + letter_h - (cur_style.line.width >> 1);
 8005c6a:	1041      	asrs	r1, r0, #1
 8005c6c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
                      (cur_style.line.width & 0x1);
 8005c70:	f000 0001 	and.w	r0, r0, #1
        cur_area.y1 = letter_pos.y + cur_style.body.padding.top + letter_h - (cur_style.line.width >> 1);
 8005c74:	4432      	add	r2, r6
 8005c76:	1a52      	subs	r2, r2, r1
 8005c78:	442a      	add	r2, r5
 8005c7a:	f8ad 2016 	strh.w	r2, [sp, #22]
        cur_area.x2 = letter_pos.x + cur_style.body.padding.right + letter_w;
 8005c7e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8005c82:	4417      	add	r7, r2
 8005c84:	eb0b 0307 	add.w	r3, fp, r7
 8005c88:	f8ad 3018 	strh.w	r3, [sp, #24]
        cur_area.y2 = letter_pos.y + cur_style.body.padding.bottom + letter_h + (cur_style.line.width >> 1) +
 8005c8c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8005c90:	441e      	add	r6, r3
 8005c92:	4431      	add	r1, r6
 8005c94:	4401      	add	r1, r0
 8005c96:	440d      	add	r5, r1
 8005c98:	e763      	b.n	8005b62 <refr_cursor_area+0x152>
 8005c9a:	bf00      	nop
 8005c9c:	2002da48 	.word	0x2002da48
 8005ca0:	2002da54 	.word	0x2002da54
 8005ca4:	2002da4c 	.word	0x2002da4c

08005ca8 <lv_ta_set_cursor_pos>:
{
 8005ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005cac:	b091      	sub	sp, #68	; 0x44
 8005cae:	460c      	mov	r4, r1
 8005cb0:	4607      	mov	r7, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8005cb2:	f009 ff05 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->cursor.pos == pos) return;
 8005cb6:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8005cba:	4605      	mov	r5, r0
    if(ext->cursor.pos == pos) return;
 8005cbc:	42a3      	cmp	r3, r4
 8005cbe:	f000 80a6 	beq.w	8005e0e <lv_ta_set_cursor_pos+0x166>
    uint16_t len = lv_txt_get_encoded_length(lv_label_get_text(ext->label));
 8005cc2:	4b54      	ldr	r3, [pc, #336]	; (8005e14 <lv_ta_set_cursor_pos+0x16c>)
 8005cc4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8005cc6:	681e      	ldr	r6, [r3, #0]
 8005cc8:	f010 f889 	bl	8015dde <lv_label_get_text>
 8005ccc:	47b0      	blx	r6
    if(pos < 0) pos = len + pos;
 8005cce:	2c00      	cmp	r4, #0
    if(pos > len || pos == LV_TA_CURSOR_LAST) pos = len;
 8005cd0:	b283      	uxth	r3, r0
    if(pos < 0) pos = len + pos;
 8005cd2:	bfbc      	itt	lt
 8005cd4:	1824      	addlt	r4, r4, r0
 8005cd6:	b224      	sxthlt	r4, r4
    if(pos > len || pos == LV_TA_CURSOR_LAST) pos = len;
 8005cd8:	429c      	cmp	r4, r3
 8005cda:	dc03      	bgt.n	8005ce4 <lv_ta_set_cursor_pos+0x3c>
 8005cdc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005ce0:	429c      	cmp	r4, r3
 8005ce2:	d100      	bne.n	8005ce6 <lv_ta_set_cursor_pos+0x3e>
 8005ce4:	b204      	sxth	r4, r0
    ext->cursor.pos = pos;
 8005ce6:	b2a4      	uxth	r4, r4
    lv_obj_t * label_par = lv_obj_get_parent(ext->label);
 8005ce8:	6b28      	ldr	r0, [r5, #48]	; 0x30
    ext->cursor.pos = pos;
 8005cea:	f8a5 404a 	strh.w	r4, [r5, #74]	; 0x4a
    lv_obj_t * label_par = lv_obj_get_parent(ext->label);
 8005cee:	f009 fe05 	bl	800f8fc <lv_obj_get_parent>
 8005cf2:	4680      	mov	r8, r0
    const lv_style_t * style = lv_obj_get_style(ta);
 8005cf4:	4638      	mov	r0, r7
 8005cf6:	f7fd f823 	bl	8002d40 <lv_obj_get_style>
    lv_label_get_letter_pos(ext->label, pos, &cur_pos);
 8005cfa:	aa01      	add	r2, sp, #4
    const lv_font_t * font_p = style->text.font;
 8005cfc:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
    lv_label_get_letter_pos(ext->label, pos, &cur_pos);
 8005d00:	4621      	mov	r1, r4
    const lv_style_t * style = lv_obj_get_style(ta);
 8005d02:	4606      	mov	r6, r0
    lv_label_get_letter_pos(ext->label, pos, &cur_pos);
 8005d04:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8005d06:	f004 ffe9 	bl	800acdc <lv_label_get_letter_pos>
    lv_obj_get_coords(ta, &ta_cords);
 8005d0a:	a904      	add	r1, sp, #16
 8005d0c:	4638      	mov	r0, r7
 8005d0e:	f009 fe29 	bl	800f964 <lv_obj_get_coords>
    lv_obj_get_coords(ext->label, &label_cords);
 8005d12:	a902      	add	r1, sp, #8
 8005d14:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8005d16:	f009 fe25 	bl	800f964 <lv_obj_get_coords>
    if(lv_obj_get_y(label_par) + cur_pos.y < 0) {
 8005d1a:	4640      	mov	r0, r8
    lv_coord_t font_h = lv_font_get_line_height(font_p);
 8005d1c:	f899 9008 	ldrb.w	r9, [r9, #8]
    if(lv_obj_get_y(label_par) + cur_pos.y < 0) {
 8005d20:	f009 fe2d 	bl	800f97e <lv_obj_get_y>
 8005d24:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
    lv_coord_t font_h = lv_font_get_line_height(font_p);
 8005d28:	fa0f f489 	sxth.w	r4, r9
    if(lv_obj_get_y(label_par) + cur_pos.y < 0) {
 8005d2c:	42d8      	cmn	r0, r3
 8005d2e:	d505      	bpl.n	8005d3c <lv_ta_set_cursor_pos+0x94>
        lv_obj_set_y(label_par, -cur_pos.y + style->body.padding.top);
 8005d30:	8af1      	ldrh	r1, [r6, #22]
 8005d32:	4640      	mov	r0, r8
 8005d34:	1ac9      	subs	r1, r1, r3
 8005d36:	b209      	sxth	r1, r1
 8005d38:	f009 fb08 	bl	800f34c <lv_obj_set_y>
    if(label_cords.y1 + cur_pos.y + font_h + style->body.padding.bottom > ta_cords.y2) {
 8005d3c:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8005d40:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8005d44:	4413      	add	r3, r2
 8005d46:	f9b6 2018 	ldrsh.w	r2, [r6, #24]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 8005d50:	444b      	add	r3, r9
 8005d52:	4293      	cmp	r3, r2
 8005d54:	dd0e      	ble.n	8005d74 <lv_ta_set_cursor_pos+0xcc>
        lv_obj_set_y(label_par, -(cur_pos.y - lv_obj_get_height(ta) + font_h + style->body.padding.top +
 8005d56:	4638      	mov	r0, r7
 8005d58:	f009 fe1d 	bl	800f996 <lv_obj_get_height>
 8005d5c:	8b33      	ldrh	r3, [r6, #24]
 8005d5e:	8af1      	ldrh	r1, [r6, #22]
 8005d60:	4419      	add	r1, r3
 8005d62:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005d66:	4419      	add	r1, r3
 8005d68:	4421      	add	r1, r4
 8005d6a:	1a41      	subs	r1, r0, r1
 8005d6c:	4640      	mov	r0, r8
 8005d6e:	b209      	sxth	r1, r1
 8005d70:	f009 faec 	bl	800f34c <lv_obj_set_y>
    if(lv_obj_get_x(label_par) + cur_pos.x < font_h) {
 8005d74:	4640      	mov	r0, r8
 8005d76:	f009 fdfc 	bl	800f972 <lv_obj_get_x>
 8005d7a:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8005d7e:	4408      	add	r0, r1
 8005d80:	4581      	cmp	r9, r0
 8005d82:	dd04      	ble.n	8005d8e <lv_ta_set_cursor_pos+0xe6>
        lv_obj_set_x(label_par, -cur_pos.x + font_h);
 8005d84:	1a61      	subs	r1, r4, r1
 8005d86:	4640      	mov	r0, r8
 8005d88:	b209      	sxth	r1, r1
 8005d8a:	f009 fad6 	bl	800f33a <lv_obj_set_x>
    if(label_cords.x1 + cur_pos.x + font_h + style->body.padding.right > ta_cords.x2) {
 8005d8e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8005d92:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8005d96:	4413      	add	r3, r2
 8005d98:	f9b6 201c 	ldrsh.w	r2, [r6, #28]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	4499      	add	r9, r3
 8005da0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8005da4:	4599      	cmp	r9, r3
 8005da6:	dd0e      	ble.n	8005dc6 <lv_ta_set_cursor_pos+0x11e>
        lv_obj_set_x(label_par, -(cur_pos.x - lv_obj_get_width(ta) + font_h + style->body.padding.left +
 8005da8:	4638      	mov	r0, r7
 8005daa:	f009 fdee 	bl	800f98a <lv_obj_get_width>
 8005dae:	8bb3      	ldrh	r3, [r6, #28]
 8005db0:	8b71      	ldrh	r1, [r6, #26]
 8005db2:	4419      	add	r1, r3
 8005db4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005db8:	4419      	add	r1, r3
 8005dba:	440c      	add	r4, r1
 8005dbc:	1b04      	subs	r4, r0, r4
 8005dbe:	4640      	mov	r0, r8
 8005dc0:	b221      	sxth	r1, r4
 8005dc2:	f009 faba 	bl	800f33a <lv_obj_set_x>
    ext->cursor.valid_x = cur_pos.x;
 8005dc6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005dca:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
    if(ext->cursor.blink_time) {
 8005dce:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
 8005dd2:	b1cb      	cbz	r3, 8005e08 <lv_ta_set_cursor_pos+0x160>
        a.exec_cb        = (lv_anim_exec_xcb_t)cursor_blink_anim;
 8005dd4:	4a10      	ldr	r2, [pc, #64]	; (8005e18 <lv_ta_set_cursor_pos+0x170>)
        lv_anim_create(&a);
 8005dd6:	a806      	add	r0, sp, #24
        a.time           = ext->cursor.blink_time;
 8005dd8:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
        a.start          = 1;
 8005ddc:	2301      	movs	r3, #1
        a.exec_cb        = (lv_anim_exec_xcb_t)cursor_blink_anim;
 8005dde:	9207      	str	r2, [sp, #28]
        a.start          = 1;
 8005de0:	2200      	movs	r2, #0
        a.var            = ta;
 8005de2:	9706      	str	r7, [sp, #24]
        a.end            = 0;
 8005de4:	920b      	str	r2, [sp, #44]	; 0x2c
        a.act_time       = 0;
 8005de6:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
        a.playback_pause = 0;
 8005dea:	920d      	str	r2, [sp, #52]	; 0x34
        a.start          = 1;
 8005dec:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
        a.playback       = 1;
 8005df0:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8005df4:	f023 0303 	bic.w	r3, r3, #3
 8005df8:	f043 0303 	orr.w	r3, r3, #3
 8005dfc:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
        a.path_cb        = lv_anim_path_step;
 8005e00:	4b06      	ldr	r3, [pc, #24]	; (8005e1c <lv_ta_set_cursor_pos+0x174>)
 8005e02:	9308      	str	r3, [sp, #32]
        lv_anim_create(&a);
 8005e04:	f7fd ff24 	bl	8003c50 <lv_anim_create>
    refr_cursor_area(ta);
 8005e08:	4638      	mov	r0, r7
 8005e0a:	f7ff fe01 	bl	8005a10 <refr_cursor_area>
}
 8005e0e:	b011      	add	sp, #68	; 0x44
 8005e10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e14:	2002da58 	.word	0x2002da58
 8005e18:	080141b7 	.word	0x080141b7
 8005e1c:	080105c9 	.word	0x080105c9

08005e20 <lv_ta_scrollable_signal>:
{
 8005e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    res = scrl_signal(scrl, sign, param);
 8005e24:	4b34      	ldr	r3, [pc, #208]	; (8005ef8 <lv_ta_scrollable_signal+0xd8>)
{
 8005e26:	4604      	mov	r4, r0
 8005e28:	4689      	mov	r9, r1
 8005e2a:	4690      	mov	r8, r2
    res = scrl_signal(scrl, sign, param);
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8005e30:	2801      	cmp	r0, #1
    res = scrl_signal(scrl, sign, param);
 8005e32:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return res;
 8005e34:	d117      	bne.n	8005e66 <lv_ta_scrollable_signal+0x46>
    lv_obj_t * ta     = lv_obj_get_parent(scrl);
 8005e36:	4620      	mov	r0, r4
 8005e38:	f009 fd60 	bl	800f8fc <lv_obj_get_parent>
 8005e3c:	4606      	mov	r6, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8005e3e:	f009 fe3f 	bl	800fac0 <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8005e42:	f1b9 0f05 	cmp.w	r9, #5
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8005e46:	4605      	mov	r5, r0
    if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8005e48:	d110      	bne.n	8005e6c <lv_ta_scrollable_signal+0x4c>
        const lv_style_t * style_label = lv_obj_get_style(ext->label);
 8005e4a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8005e4c:	f7fc ff78 	bl	8002d40 <lv_obj_get_style>
        lv_coord_t font_h              = lv_font_get_line_height(style_label->text.font);
 8005e50:	6a43      	ldr	r3, [r0, #36]	; 0x24
        scrl->ext_draw_pad             = LV_MATH_MAX(scrl->ext_draw_pad, style_label->text.line_space + font_h);
 8005e52:	f9b0 202a 	ldrsh.w	r2, [r0, #42]	; 0x2a
 8005e56:	7a1b      	ldrb	r3, [r3, #8]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	bfb8      	it	lt
 8005e62:	4613      	movlt	r3, r2
 8005e64:	86a3      	strh	r3, [r4, #52]	; 0x34
}
 8005e66:	4638      	mov	r0, r7
 8005e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 8005e6c:	f1b9 0f02 	cmp.w	r9, #2
 8005e70:	d137      	bne.n	8005ee2 <lv_ta_scrollable_signal+0xc2>
        if(ext->label) {
 8005e72:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d0f6      	beq.n	8005e66 <lv_ta_scrollable_signal+0x46>
            if(lv_obj_get_width(scrl) != lv_area_get_width(param) ||
 8005e78:	4620      	mov	r0, r4
 8005e7a:	f009 fd86 	bl	800f98a <lv_obj_get_width>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 8005e7e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8005e82:	f8b8 2000 	ldrh.w	r2, [r8]
 8005e86:	3301      	adds	r3, #1
 8005e88:	1a9b      	subs	r3, r3, r2
 8005e8a:	b21b      	sxth	r3, r3
 8005e8c:	4298      	cmp	r0, r3
 8005e8e:	d01b      	beq.n	8005ec8 <lv_ta_scrollable_signal+0xa8>
                const lv_style_t * style_scrl = lv_obj_get_style(scrl);
 8005e90:	4620      	mov	r0, r4
 8005e92:	f7fc ff55 	bl	8002d40 <lv_obj_get_style>
                lv_obj_set_width(ext->label, lv_page_get_fit_width(ta));
 8005e96:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
                const lv_style_t * style_scrl = lv_obj_get_style(scrl);
 8005e9a:	4604      	mov	r4, r0
                lv_obj_set_width(ext->label, lv_page_get_fit_width(ta));
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	f00f fcc0 	bl	8015822 <lv_page_get_fit_width>
 8005ea2:	4601      	mov	r1, r0
 8005ea4:	4640      	mov	r0, r8
 8005ea6:	f009 fc7b 	bl	800f7a0 <lv_obj_set_width>
                lv_obj_set_pos(ext->label, style_scrl->body.padding.left, style_scrl->body.padding.top);
 8005eaa:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8005eae:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
 8005eb2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8005eb4:	f009 fa09 	bl	800f2ca <lv_obj_set_pos>
                lv_label_set_text(ext->label, NULL); /*Refresh the label*/
 8005eb8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8005eba:	2100      	movs	r1, #0
 8005ebc:	f005 fa88 	bl	800b3d0 <lv_label_set_text>
                refr_cursor_area(ta);
 8005ec0:	4630      	mov	r0, r6
 8005ec2:	f7ff fda5 	bl	8005a10 <refr_cursor_area>
 8005ec6:	e7ce      	b.n	8005e66 <lv_ta_scrollable_signal+0x46>
               lv_obj_get_height(scrl) != lv_area_get_height(param)) {
 8005ec8:	4620      	mov	r0, r4
 8005eca:	f009 fd64 	bl	800f996 <lv_obj_get_height>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 8005ece:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8005ed2:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	1a9b      	subs	r3, r3, r2
            if(lv_obj_get_width(scrl) != lv_area_get_width(param) ||
 8005eda:	b21b      	sxth	r3, r3
 8005edc:	4298      	cmp	r0, r3
 8005ede:	d1d7      	bne.n	8005e90 <lv_ta_scrollable_signal+0x70>
 8005ee0:	e7c1      	b.n	8005e66 <lv_ta_scrollable_signal+0x46>
    } else if(sign == LV_SIGNAL_PRESSING || sign == LV_SIGNAL_PRESSED || sign == LV_SIGNAL_PRESS_LOST ||
 8005ee2:	f1a9 0307 	sub.w	r3, r9, #7
 8005ee6:	2b03      	cmp	r3, #3
 8005ee8:	d8bd      	bhi.n	8005e66 <lv_ta_scrollable_signal+0x46>
        update_cursor_position_on_click(ta, sign, (lv_indev_t *)param);
 8005eea:	4642      	mov	r2, r8
 8005eec:	4649      	mov	r1, r9
 8005eee:	4630      	mov	r0, r6
 8005ef0:	f00e f9e8 	bl	80142c4 <update_cursor_position_on_click>
 8005ef4:	e7b7      	b.n	8005e66 <lv_ta_scrollable_signal+0x46>
 8005ef6:	bf00      	nop
 8005ef8:	20028944 	.word	0x20028944

08005efc <lv_ta_create>:
{
 8005efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005efe:	b08b      	sub	sp, #44	; 0x2c
 8005f00:	460f      	mov	r7, r1
    lv_obj_t * new_ta = lv_page_create(par, copy);
 8005f02:	f003 f8e9 	bl	80090d8 <lv_page_create>
    lv_mem_assert(new_ta);
 8005f06:	4605      	mov	r5, r0
 8005f08:	b930      	cbnz	r0, 8005f18 <lv_ta_create+0x1c>
 8005f0a:	4b7d      	ldr	r3, [pc, #500]	; (8006100 <lv_ta_create+0x204>)
 8005f0c:	2258      	movs	r2, #88	; 0x58
 8005f0e:	497d      	ldr	r1, [pc, #500]	; (8006104 <lv_ta_create+0x208>)
 8005f10:	2003      	movs	r0, #3
 8005f12:	f7fd fb7f 	bl	8003614 <lv_log_add>
 8005f16:	e7fe      	b.n	8005f16 <lv_ta_create+0x1a>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_ta);
 8005f18:	4c7b      	ldr	r4, [pc, #492]	; (8006108 <lv_ta_create+0x20c>)
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	b913      	cbnz	r3, 8005f24 <lv_ta_create+0x28>
 8005f1e:	f009 fdcb 	bl	800fab8 <lv_obj_get_signal_cb>
 8005f22:	6020      	str	r0, [r4, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_ta);
 8005f24:	4c79      	ldr	r4, [pc, #484]	; (800610c <lv_ta_create+0x210>)
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	b91b      	cbnz	r3, 8005f32 <lv_ta_create+0x36>
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	f009 fdc6 	bl	800fabc <lv_obj_get_design_cb>
 8005f30:	6020      	str	r0, [r4, #0]
    if(scrl_signal == NULL) scrl_signal = lv_obj_get_signal_cb(lv_page_get_scrl(new_ta));
 8005f32:	4c77      	ldr	r4, [pc, #476]	; (8006110 <lv_ta_create+0x214>)
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	b92b      	cbnz	r3, 8005f44 <lv_ta_create+0x48>
 8005f38:	4628      	mov	r0, r5
 8005f3a:	f00f fc48 	bl	80157ce <lv_page_get_scrl>
 8005f3e:	f009 fdbb 	bl	800fab8 <lv_obj_get_signal_cb>
 8005f42:	6020      	str	r0, [r4, #0]
    if(scrl_design == NULL) scrl_design = lv_obj_get_design_cb(lv_page_get_scrl(new_ta));
 8005f44:	4c73      	ldr	r4, [pc, #460]	; (8006114 <lv_ta_create+0x218>)
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	b92b      	cbnz	r3, 8005f56 <lv_ta_create+0x5a>
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	f00f fc3f 	bl	80157ce <lv_page_get_scrl>
 8005f50:	f009 fdb4 	bl	800fabc <lv_obj_get_design_cb>
 8005f54:	6020      	str	r0, [r4, #0]
    lv_ta_ext_t * ext = lv_obj_allocate_ext_attr(new_ta, sizeof(lv_ta_ext_t));
 8005f56:	2160      	movs	r1, #96	; 0x60
 8005f58:	4628      	mov	r0, r5
 8005f5a:	f009 f942 	bl	800f1e2 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8005f5e:	4604      	mov	r4, r0
 8005f60:	b930      	cbnz	r0, 8005f70 <lv_ta_create+0x74>
 8005f62:	4b67      	ldr	r3, [pc, #412]	; (8006100 <lv_ta_create+0x204>)
 8005f64:	2262      	movs	r2, #98	; 0x62
 8005f66:	4967      	ldr	r1, [pc, #412]	; (8006104 <lv_ta_create+0x208>)
 8005f68:	2003      	movs	r0, #3
 8005f6a:	f7fd fb53 	bl	8003614 <lv_log_add>
 8005f6e:	e7fe      	b.n	8005f6e <lv_ta_create+0x72>
    ext->cursor.type       = LV_CURSOR_LINE;
 8005f70:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
    ext->max_length        = 0;
 8005f74:	4a68      	ldr	r2, [pc, #416]	; (8006118 <lv_ta_create+0x21c>)
    ext->cursor.type       = LV_CURSOR_LINE;
 8005f76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    lv_obj_set_signal_cb(new_ta, lv_ta_signal);
 8005f7a:	4968      	ldr	r1, [pc, #416]	; (800611c <lv_ta_create+0x220>)
    ext->cursor.type       = LV_CURSOR_LINE;
 8005f7c:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 8005f80:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
    ext->pwd_mode          = 0;
 8005f84:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8005f88:	f023 0303 	bic.w	r3, r3, #3
 8005f8c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    ext->label       = NULL;
 8005f90:	2300      	movs	r3, #0
    ext->cursor.style      = NULL;
 8005f92:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    ext->placeholder = NULL;
 8005f96:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
    ext->accapted_chars    = NULL;
 8005f9a:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
    ext->cursor.valid_x    = 0;
 8005f9e:	6483      	str	r3, [r0, #72]	; 0x48
    ext->cursor.blink_time = LV_TA_DEF_CURSOR_BLINK_TIME;
 8005fa0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8005fa4:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
    lv_obj_set_signal_cb(new_ta, lv_ta_signal);
 8005fa8:	4628      	mov	r0, r5
 8005faa:	f009 f916 	bl	800f1da <lv_obj_set_signal_cb>
    lv_obj_set_signal_cb(lv_page_get_scrl(new_ta), lv_ta_scrollable_signal);
 8005fae:	4628      	mov	r0, r5
 8005fb0:	f00f fc0d 	bl	80157ce <lv_page_get_scrl>
 8005fb4:	495a      	ldr	r1, [pc, #360]	; (8006120 <lv_ta_create+0x224>)
 8005fb6:	f009 f910 	bl	800f1da <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_ta, lv_ta_design);
 8005fba:	495a      	ldr	r1, [pc, #360]	; (8006124 <lv_ta_create+0x228>)
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	f009 f90e 	bl	800f1de <lv_obj_set_design_cb>
    if(copy == NULL) {
 8005fc2:	2f00      	cmp	r7, #0
 8005fc4:	d15a      	bne.n	800607c <lv_ta_create+0x180>
        lv_page_set_scrl_fit2(new_ta, LV_FIT_FLOOD, LV_FIT_TIGHT);
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	2102      	movs	r1, #2
 8005fca:	4628      	mov	r0, r5
 8005fcc:	f00e f8e6 	bl	801419c <lv_page_set_scrl_fit2>
        ext->label = lv_label_create(new_ta, NULL);
 8005fd0:	4639      	mov	r1, r7
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	f005 fa86 	bl	800b4e4 <lv_label_create>
        lv_obj_set_design_cb(ext->page.scrl, lv_ta_scrollable_design);
 8005fd8:	4953      	ldr	r1, [pc, #332]	; (8006128 <lv_ta_create+0x22c>)
        ext->label = lv_label_create(new_ta, NULL);
 8005fda:	6320      	str	r0, [r4, #48]	; 0x30
        lv_obj_set_design_cb(ext->page.scrl, lv_ta_scrollable_design);
 8005fdc:	6860      	ldr	r0, [r4, #4]
 8005fde:	f009 f8fe 	bl	800f1de <lv_obj_set_design_cb>
        lv_label_set_long_mode(ext->label, LV_LABEL_LONG_BREAK);
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005fe6:	f005 fa3d 	bl	800b464 <lv_label_set_long_mode>
        lv_label_set_text(ext->label, "Text area");
 8005fea:	4950      	ldr	r1, [pc, #320]	; (800612c <lv_ta_create+0x230>)
 8005fec:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005fee:	f005 f9ef 	bl	800b3d0 <lv_label_set_text>
        lv_obj_set_click(ext->label, false);
 8005ff2:	4639      	mov	r1, r7
 8005ff4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005ff6:	f009 f85a 	bl	800f0ae <lv_obj_set_click>
        lv_obj_set_size(new_ta, LV_TA_DEF_WIDTH, LV_TA_DEF_HEIGHT);
 8005ffa:	2264      	movs	r2, #100	; 0x64
 8005ffc:	21c8      	movs	r1, #200	; 0xc8
 8005ffe:	4628      	mov	r0, r5
 8006000:	f009 fb84 	bl	800f70c <lv_obj_set_size>
 * @param ta pointer to a text area object
 * @param sb_mode the new mode from 'lv_page_sb_mode_t' enum
 */
static inline void lv_ta_set_sb_mode(lv_obj_t * ta, lv_sb_mode_t mode)
{
    lv_page_set_sb_mode(ta, mode);
 8006004:	2102      	movs	r1, #2
 8006006:	4628      	mov	r0, r5
 8006008:	f00f fb75 	bl	80156f6 <lv_page_set_sb_mode>
        lv_page_set_style(new_ta, LV_PAGE_STYLE_SCRL, &lv_style_transp_tight);
 800600c:	4a48      	ldr	r2, [pc, #288]	; (8006130 <lv_ta_create+0x234>)
 800600e:	2101      	movs	r1, #1
 8006010:	4628      	mov	r0, r5
 8006012:	f00f fbac 	bl	801576e <lv_page_set_style>
        lv_theme_t * th = lv_theme_get_current();
 8006016:	f7ff fa19 	bl	800544c <lv_theme_get_current>
        if(th) {
 800601a:	4606      	mov	r6, r0
 800601c:	b358      	cbz	r0, 8006076 <lv_ta_create+0x17a>
            lv_ta_set_style(new_ta, LV_TA_STYLE_BG, th->style.ta.area);
 800601e:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8006022:	4639      	mov	r1, r7
 8006024:	4628      	mov	r0, r5
 8006026:	f00e fa2a 	bl	801447e <lv_ta_set_style>
            lv_ta_set_style(new_ta, LV_TA_STYLE_SB, th->style.ta.sb);
 800602a:	f8d6 211c 	ldr.w	r2, [r6, #284]	; 0x11c
 800602e:	2101      	movs	r1, #1
            lv_ta_set_style(new_ta, LV_TA_STYLE_BG, &lv_style_pretty);
 8006030:	4628      	mov	r0, r5
 8006032:	f00e fa24 	bl	801447e <lv_ta_set_style>
    if(ext->cursor.blink_time) {
 8006036:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 800603a:	b1cb      	cbz	r3, 8006070 <lv_ta_create+0x174>
        a.exec_cb        = (lv_anim_exec_xcb_t)cursor_blink_anim;
 800603c:	4a3d      	ldr	r2, [pc, #244]	; (8006134 <lv_ta_create+0x238>)
        lv_anim_create(&a);
 800603e:	4668      	mov	r0, sp
        a.time           = ext->cursor.blink_time;
 8006040:	f8ad 3018 	strh.w	r3, [sp, #24]
        a.start          = 1;
 8006044:	2301      	movs	r3, #1
        a.exec_cb        = (lv_anim_exec_xcb_t)cursor_blink_anim;
 8006046:	9201      	str	r2, [sp, #4]
        a.start          = 1;
 8006048:	2200      	movs	r2, #0
        a.var            = new_ta;
 800604a:	9500      	str	r5, [sp, #0]
        a.end            = 0;
 800604c:	9205      	str	r2, [sp, #20]
        a.act_time       = 0;
 800604e:	f8ad 201a 	strh.w	r2, [sp, #26]
        a.playback_pause = 0;
 8006052:	9207      	str	r2, [sp, #28]
        a.start          = 1;
 8006054:	e9cd 2303 	strd	r2, r3, [sp, #12]
        a.playback       = 1;
 8006058:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800605c:	f023 0303 	bic.w	r3, r3, #3
 8006060:	f043 0303 	orr.w	r3, r3, #3
 8006064:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        a.path_cb        = lv_anim_path_step;
 8006068:	4b33      	ldr	r3, [pc, #204]	; (8006138 <lv_ta_create+0x23c>)
 800606a:	9302      	str	r3, [sp, #8]
        lv_anim_create(&a);
 800606c:	f7fd fdf0 	bl	8003c50 <lv_anim_create>
}
 8006070:	4628      	mov	r0, r5
 8006072:	b00b      	add	sp, #44	; 0x2c
 8006074:	bdf0      	pop	{r4, r5, r6, r7, pc}
            lv_ta_set_style(new_ta, LV_TA_STYLE_BG, &lv_style_pretty);
 8006076:	4a31      	ldr	r2, [pc, #196]	; (800613c <lv_ta_create+0x240>)
 8006078:	4639      	mov	r1, r7
 800607a:	e7d9      	b.n	8006030 <lv_ta_create+0x134>
        lv_obj_set_design_cb(ext->page.scrl, lv_ta_scrollable_design);
 800607c:	492a      	ldr	r1, [pc, #168]	; (8006128 <lv_ta_create+0x22c>)
 800607e:	6860      	ldr	r0, [r4, #4]
 8006080:	f009 f8ad 	bl	800f1de <lv_obj_set_design_cb>
        lv_ta_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8006084:	4638      	mov	r0, r7
 8006086:	f009 fd1b 	bl	800fac0 <lv_obj_get_ext_attr>
 800608a:	4606      	mov	r6, r0
        ext->label             = lv_label_create(new_ta, copy_ext->label);
 800608c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800608e:	4628      	mov	r0, r5
 8006090:	f005 fa28 	bl	800b4e4 <lv_label_create>
        ext->pwd_mode          = copy_ext->pwd_mode;
 8006094:	f896 205c 	ldrb.w	r2, [r6, #92]	; 0x5c
 8006098:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
        ext->label             = lv_label_create(new_ta, copy_ext->label);
 800609c:	6320      	str	r0, [r4, #48]	; 0x30
        ext->pwd_mode          = copy_ext->pwd_mode;
 800609e:	f362 0300 	bfi	r3, r2, #0, #1
 80060a2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        ext->accapted_chars    = copy_ext->accapted_chars;
 80060a6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ext->cursor.type       = copy_ext->cursor.type;
 80060a8:	f896 2058 	ldrb.w	r2, [r6, #88]	; 0x58
        ext->accapted_chars    = copy_ext->accapted_chars;
 80060ac:	63e3      	str	r3, [r4, #60]	; 0x3c
        ext->max_length        = copy_ext->max_length;
 80060ae:	f8b6 3040 	ldrh.w	r3, [r6, #64]	; 0x40
 80060b2:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
        ext->cursor.style      = copy_ext->cursor.style;
 80060b6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80060b8:	6463      	str	r3, [r4, #68]	; 0x44
        ext->cursor.pos        = copy_ext->cursor.pos;
 80060ba:	f8b6 304a 	ldrh.w	r3, [r6, #74]	; 0x4a
 80060be:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
        ext->cursor.valid_x    = copy_ext->cursor.valid_x;
 80060c2:	f9b6 3048 	ldrsh.w	r3, [r6, #72]	; 0x48
 80060c6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        ext->cursor.type       = copy_ext->cursor.type;
 80060ca:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80060ce:	f362 0303 	bfi	r3, r2, #0, #4
 80060d2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if(copy_ext->one_line) lv_ta_set_one_line(new_ta, true);
 80060d6:	f896 305c 	ldrb.w	r3, [r6, #92]	; 0x5c
 80060da:	079b      	lsls	r3, r3, #30
 80060dc:	d503      	bpl.n	80060e6 <lv_ta_create+0x1ea>
 80060de:	2101      	movs	r1, #1
 80060e0:	4628      	mov	r0, r5
 80060e2:	f00e f956 	bl	8014392 <lv_ta_set_one_line>
    lv_ta_ext_t * ext        = lv_obj_get_ext_attr(ta);
 80060e6:	4638      	mov	r0, r7
 80060e8:	f009 fcea 	bl	800fac0 <lv_obj_get_ext_attr>
        lv_ta_set_style(new_ta, LV_TA_STYLE_CURSOR, lv_ta_get_style(copy, LV_TA_STYLE_CURSOR));
 80060ec:	2102      	movs	r1, #2
 80060ee:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80060f0:	4628      	mov	r0, r5
 80060f2:	f00e f9c4 	bl	801447e <lv_ta_set_style>
        lv_obj_refresh_style(new_ta);
 80060f6:	4628      	mov	r0, r5
 80060f8:	f009 fb61 	bl	800f7be <lv_obj_refresh_style>
 80060fc:	e79b      	b.n	8006036 <lv_ta_create+0x13a>
 80060fe:	bf00      	nop
 8006100:	080176f4 	.word	0x080176f4
 8006104:	0801c298 	.word	0x0801c298
 8006108:	2002893c 	.word	0x2002893c
 800610c:	20028938 	.word	0x20028938
 8006110:	20028944 	.word	0x20028944
 8006114:	20028940 	.word	0x20028940
 8006118:	05dc0000 	.word	0x05dc0000
 800611c:	0800667d 	.word	0x0800667d
 8006120:	08005e21 	.word	0x08005e21
 8006124:	08005895 	.word	0x08005895
 8006128:	080058bd 	.word	0x080058bd
 800612c:	0801c2f7 	.word	0x0801c2f7
 8006130:	200206c8 	.word	0x200206c8
 8006134:	080141b7 	.word	0x080141b7
 8006138:	080105c9 	.word	0x080105c9
 800613c:	2002059c 	.word	0x2002059c

08006140 <lv_ta_add_text>:
{
 8006140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006144:	460d      	mov	r5, r1
 8006146:	b08a      	sub	sp, #40	; 0x28
 8006148:	4604      	mov	r4, r0
    ta_insert_replace = NULL;
 800614a:	4f51      	ldr	r7, [pc, #324]	; (8006290 <lv_ta_add_text+0x150>)
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 800614c:	f009 fcb8 	bl	800fac0 <lv_obj_get_ext_attr>
    ta_insert_replace = NULL;
 8006150:	2300      	movs	r3, #0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8006152:	4606      	mov	r6, r0
    lv_event_send(ta, LV_EVENT_INSERT, txt);
 8006154:	462a      	mov	r2, r5
 8006156:	210f      	movs	r1, #15
 8006158:	4620      	mov	r0, r4
    ta_insert_replace = NULL;
 800615a:	603b      	str	r3, [r7, #0]
    lv_event_send(ta, LV_EVENT_INSERT, txt);
 800615c:	f008 ffe0 	bl	800f120 <lv_event_send>
    if(ta_insert_replace) {
 8006160:	6838      	ldr	r0, [r7, #0]
 8006162:	b160      	cbz	r0, 800617e <lv_ta_add_text+0x3e>
        if(ta_insert_replace[0] == '\0') return; /*Drop this text*/
 8006164:	7803      	ldrb	r3, [r0, #0]
 8006166:	b13b      	cbz	r3, 8006178 <lv_ta_add_text+0x38>
        if(strcmp(ta_insert_replace, txt)) {
 8006168:	4629      	mov	r1, r5
 800616a:	f010 faf5 	bl	8016758 <strcmp>
 800616e:	b130      	cbz	r0, 800617e <lv_ta_add_text+0x3e>
            lv_ta_add_text(ta, ta_insert_replace);
 8006170:	6839      	ldr	r1, [r7, #0]
 8006172:	4620      	mov	r0, r4
 8006174:	f7ff ffe4 	bl	8006140 <lv_ta_add_text>
}
 8006178:	b00a      	add	sp, #40	; 0x28
 800617a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(ext->pwd_mode != 0) pwd_char_hider(ta); /*Make sure all the current text contains only '*'*/
 800617e:	f896 305c 	ldrb.w	r3, [r6, #92]	; 0x5c
 8006182:	07da      	lsls	r2, r3, #31
 8006184:	d502      	bpl.n	800618c <lv_ta_add_text+0x4c>
 8006186:	4620      	mov	r0, r4
 8006188:	f7ff fb5c 	bl	8005844 <pwd_char_hider>
    if(lv_ta_get_accepted_chars(ta) || lv_ta_get_max_length(ta)) {
 800618c:	4620      	mov	r0, r4
 800618e:	f00e f9ab 	bl	80144e8 <lv_ta_get_accepted_chars>
 8006192:	b190      	cbz	r0, 80061ba <lv_ta_add_text+0x7a>
        uint32_t i = 0;
 8006194:	2300      	movs	r3, #0
            uint32_t c = lv_txt_encoded_next(txt, &i);
 8006196:	4e3f      	ldr	r6, [pc, #252]	; (8006294 <lv_ta_add_text+0x154>)
            lv_ta_add_char(ta, lv_txt_unicode_to_encoded(c));
 8006198:	4f3f      	ldr	r7, [pc, #252]	; (8006298 <lv_ta_add_text+0x158>)
        uint32_t i = 0;
 800619a:	9300      	str	r3, [sp, #0]
        while(txt[i] != '\0') {
 800619c:	9b00      	ldr	r3, [sp, #0]
 800619e:	5ceb      	ldrb	r3, [r5, r3]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d0e9      	beq.n	8006178 <lv_ta_add_text+0x38>
            uint32_t c = lv_txt_encoded_next(txt, &i);
 80061a4:	4669      	mov	r1, sp
 80061a6:	6833      	ldr	r3, [r6, #0]
 80061a8:	4628      	mov	r0, r5
 80061aa:	4798      	blx	r3
            lv_ta_add_char(ta, lv_txt_unicode_to_encoded(c));
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	4798      	blx	r3
 80061b0:	4601      	mov	r1, r0
 80061b2:	4620      	mov	r0, r4
 80061b4:	f000 f87e 	bl	80062b4 <lv_ta_add_char>
 80061b8:	e7f0      	b.n	800619c <lv_ta_add_text+0x5c>
    if(lv_ta_get_accepted_chars(ta) || lv_ta_get_max_length(ta)) {
 80061ba:	4620      	mov	r0, r4
 80061bc:	f00e f999 	bl	80144f2 <lv_ta_get_max_length>
 80061c0:	4607      	mov	r7, r0
 80061c2:	2800      	cmp	r0, #0
 80061c4:	d1e6      	bne.n	8006194 <lv_ta_add_text+0x54>
 * @param ta pointer to a Text area
 * @return true or false
 */
static inline bool lv_ta_get_edge_flash(lv_obj_t * ta)
{
    return lv_page_get_edge_flash(ta);
 80061c6:	4620      	mov	r0, r4
 80061c8:	f00f fb0b 	bl	80157e2 <lv_page_get_edge_flash>
    lv_page_set_edge_flash(ta, en);
 80061cc:	4639      	mov	r1, r7
    return lv_page_get_edge_flash(ta);
 80061ce:	4680      	mov	r8, r0
    lv_page_set_edge_flash(ta, en);
 80061d0:	4620      	mov	r0, r4
 80061d2:	f00f fac1 	bl	8015758 <lv_page_set_edge_flash>
    lv_label_ins_text(ext->label, ext->cursor.pos, txt);
 80061d6:	462a      	mov	r2, r5
 80061d8:	f8b6 104a 	ldrh.w	r1, [r6, #74]	; 0x4a
 80061dc:	6b30      	ldr	r0, [r6, #48]	; 0x30
 80061de:	f005 fa51 	bl	800b684 <lv_label_ins_text>
    if(ext->pwd_mode != 0) {
 80061e2:	f896 305c 	ldrb.w	r3, [r6, #92]	; 0x5c
 80061e6:	07db      	lsls	r3, r3, #31
 80061e8:	d537      	bpl.n	800625a <lv_ta_add_text+0x11a>
        ext->pwd_tmp = lv_mem_realloc(ext->pwd_tmp, strlen(ext->pwd_tmp) + strlen(txt) + 1);
 80061ea:	f8d6 a038 	ldr.w	sl, [r6, #56]	; 0x38
 80061ee:	4650      	mov	r0, sl
 80061f0:	f010 faab 	bl	801674a <strlen>
 80061f4:	4681      	mov	r9, r0
 80061f6:	4628      	mov	r0, r5
 80061f8:	f010 faa7 	bl	801674a <strlen>
 80061fc:	eb09 0100 	add.w	r1, r9, r0
 8006200:	4650      	mov	r0, sl
 8006202:	3101      	adds	r1, #1
 8006204:	f7fd faa0 	bl	8003748 <lv_mem_realloc>
 8006208:	63b0      	str	r0, [r6, #56]	; 0x38
        lv_mem_assert(ext->pwd_tmp);
 800620a:	b938      	cbnz	r0, 800621c <lv_ta_add_text+0xdc>
 800620c:	4b23      	ldr	r3, [pc, #140]	; (800629c <lv_ta_add_text+0x15c>)
 800620e:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 8006212:	4923      	ldr	r1, [pc, #140]	; (80062a0 <lv_ta_add_text+0x160>)
 8006214:	2003      	movs	r0, #3
 8006216:	f7fd f9fd 	bl	8003614 <lv_log_add>
 800621a:	e7fe      	b.n	800621a <lv_ta_add_text+0xda>
        lv_txt_ins(ext->pwd_tmp, ext->cursor.pos, txt);
 800621c:	462a      	mov	r2, r5
 800621e:	f8b6 104a 	ldrh.w	r1, [r6, #74]	; 0x4a
 8006222:	f7fd fbfd 	bl	8003a20 <lv_txt_ins>
        a.exec_cb        = (lv_anim_exec_xcb_t)pwd_char_hider_anim;
 8006226:	4b1f      	ldr	r3, [pc, #124]	; (80062a4 <lv_ta_add_text+0x164>)
        lv_anim_create(&a);
 8006228:	4668      	mov	r0, sp
        a.var            = ta;
 800622a:	9400      	str	r4, [sp, #0]
        a.exec_cb        = (lv_anim_exec_xcb_t)pwd_char_hider_anim;
 800622c:	9301      	str	r3, [sp, #4]
        a.time           = ext->pwd_show_time;
 800622e:	f8b6 3042 	ldrh.w	r3, [r6, #66]	; 0x42
        a.act_time       = 0;
 8006232:	f8ad 701a 	strh.w	r7, [sp, #26]
        a.time           = ext->pwd_show_time;
 8006236:	f8ad 3018 	strh.w	r3, [sp, #24]
        a.ready_cb       = pwd_char_hider_anim_ready;
 800623a:	4b1b      	ldr	r3, [pc, #108]	; (80062a8 <lv_ta_add_text+0x168>)
        a.playback_pause = 0;
 800623c:	9707      	str	r7, [sp, #28]
        a.start          = 0;
 800623e:	e9cd 3703 	strd	r3, r7, [sp, #12]
        a.end            = 1;
 8006242:	2301      	movs	r3, #1
 8006244:	9305      	str	r3, [sp, #20]
        a.playback       = 0;
 8006246:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800624a:	f023 0303 	bic.w	r3, r3, #3
 800624e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        a.path_cb        = lv_anim_path_step;
 8006252:	4b16      	ldr	r3, [pc, #88]	; (80062ac <lv_ta_add_text+0x16c>)
 8006254:	9302      	str	r3, [sp, #8]
        lv_anim_create(&a);
 8006256:	f7fd fcfb 	bl	8003c50 <lv_anim_create>
    lv_ta_set_cursor_pos(ta, lv_ta_get_cursor_pos(ta) + lv_txt_get_encoded_length(txt));
 800625a:	4620      	mov	r0, r4
 800625c:	f00e f82c 	bl	80142b8 <lv_ta_get_cursor_pos>
 8006260:	4b13      	ldr	r3, [pc, #76]	; (80062b0 <lv_ta_add_text+0x170>)
 8006262:	4606      	mov	r6, r0
 8006264:	4628      	mov	r0, r5
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4798      	blx	r3
 800626a:	1831      	adds	r1, r6, r0
 800626c:	4620      	mov	r0, r4
 800626e:	b209      	sxth	r1, r1
 8006270:	f7ff fd1a 	bl	8005ca8 <lv_ta_set_cursor_pos>
 8006274:	4641      	mov	r1, r8
 8006276:	4620      	mov	r0, r4
 8006278:	f00f fa6e 	bl	8015758 <lv_page_set_edge_flash>
    placeholder_update(ta);
 800627c:	4620      	mov	r0, r4
 800627e:	f00d ffea 	bl	8014256 <placeholder_update>
    lv_event_send(ta, LV_EVENT_VALUE_CHANGED, NULL);
 8006282:	2200      	movs	r2, #0
 8006284:	210e      	movs	r1, #14
 8006286:	4620      	mov	r0, r4
 8006288:	f008 ff4a 	bl	800f120 <lv_event_send>
 800628c:	e774      	b.n	8006178 <lv_ta_add_text+0x38>
 800628e:	bf00      	nop
 8006290:	20028948 	.word	0x20028948
 8006294:	2002da4c 	.word	0x2002da4c
 8006298:	2002da5c 	.word	0x2002da5c
 800629c:	080176f4 	.word	0x080176f4
 80062a0:	0801c298 	.word	0x0801c298
 80062a4:	08014149 	.word	0x08014149
 80062a8:	0801414b 	.word	0x0801414b
 80062ac:	080105c9 	.word	0x080105c9
 80062b0:	2002da58 	.word	0x2002da58

080062b4 <lv_ta_add_char>:
{
 80062b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062b8:	b08f      	sub	sp, #60	; 0x3c
 80062ba:	4604      	mov	r4, r0
    ta_insert_replace = NULL;
 80062bc:	4e58      	ldr	r6, [pc, #352]	; (8006420 <lv_ta_add_char+0x16c>)
{
 80062be:	9101      	str	r1, [sp, #4]
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80062c0:	f009 fbfe 	bl	800fac0 <lv_obj_get_ext_attr>
    letter_buf[0] = c;
 80062c4:	9b01      	ldr	r3, [sp, #4]
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80062c6:	4605      	mov	r5, r0
    lv_event_send(ta, LV_EVENT_INSERT, letter_buf);
 80062c8:	aa02      	add	r2, sp, #8
 80062ca:	210f      	movs	r1, #15
    letter_buf[0] = c;
 80062cc:	9302      	str	r3, [sp, #8]
    letter_buf[1] = '\0';
 80062ce:	2300      	movs	r3, #0
    lv_event_send(ta, LV_EVENT_INSERT, letter_buf);
 80062d0:	4620      	mov	r0, r4
    letter_buf[1] = '\0';
 80062d2:	9303      	str	r3, [sp, #12]
    ta_insert_replace = NULL;
 80062d4:	6033      	str	r3, [r6, #0]
    lv_event_send(ta, LV_EVENT_INSERT, letter_buf);
 80062d6:	f008 ff23 	bl	800f120 <lv_event_send>
    if(ta_insert_replace) {
 80062da:	6830      	ldr	r0, [r6, #0]
 80062dc:	b160      	cbz	r0, 80062f8 <lv_ta_add_char+0x44>
        if(ta_insert_replace[0] == '\0') return; /*Drop this text*/
 80062de:	7803      	ldrb	r3, [r0, #0]
 80062e0:	b13b      	cbz	r3, 80062f2 <lv_ta_add_char+0x3e>
        if(strcmp(ta_insert_replace, (char *)letter_buf)) {
 80062e2:	a902      	add	r1, sp, #8
 80062e4:	f010 fa38 	bl	8016758 <strcmp>
 80062e8:	b130      	cbz	r0, 80062f8 <lv_ta_add_char+0x44>
            lv_ta_add_text(ta, ta_insert_replace);
 80062ea:	6831      	ldr	r1, [r6, #0]
 80062ec:	4620      	mov	r0, r4
 80062ee:	f7ff ff27 	bl	8006140 <lv_ta_add_text>
}
 80062f2:	b00f      	add	sp, #60	; 0x3c
 80062f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(ext->one_line && (c == '\n' || c == '\r')) {
 80062f8:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
 80062fc:	0799      	lsls	r1, r3, #30
 80062fe:	d504      	bpl.n	800630a <lv_ta_add_char+0x56>
 8006300:	9b01      	ldr	r3, [sp, #4]
 8006302:	2b0a      	cmp	r3, #10
 8006304:	d0f5      	beq.n	80062f2 <lv_ta_add_char+0x3e>
 8006306:	2b0d      	cmp	r3, #13
 8006308:	d0f3      	beq.n	80062f2 <lv_ta_add_char+0x3e>
    uint32_t c_uni = lv_txt_encoded_next((const char *)&c, NULL);
 800630a:	4f46      	ldr	r7, [pc, #280]	; (8006424 <lv_ta_add_char+0x170>)
 800630c:	2100      	movs	r1, #0
 800630e:	a801      	add	r0, sp, #4
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	4798      	blx	r3
 8006314:	4680      	mov	r8, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8006316:	4620      	mov	r0, r4
 8006318:	f009 fbd2 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->accapted_chars == NULL && ext->max_length == 0) return true;
 800631c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 800631e:	4606      	mov	r6, r0
    if(ext->accapted_chars == NULL && ext->max_length == 0) return true;
 8006320:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8006324:	bb52      	cbnz	r2, 800637c <lv_ta_add_char+0xc8>
 8006326:	bb53      	cbnz	r3, 800637e <lv_ta_add_char+0xca>
    return lv_page_get_edge_flash(ta);
 8006328:	4620      	mov	r0, r4
 800632a:	f00f fa5a 	bl	80157e2 <lv_page_get_edge_flash>
    lv_page_set_edge_flash(ta, en);
 800632e:	2100      	movs	r1, #0
    return lv_page_get_edge_flash(ta);
 8006330:	4607      	mov	r7, r0
    lv_page_set_edge_flash(ta, en);
 8006332:	4620      	mov	r0, r4
 8006334:	f00f fa10 	bl	8015758 <lv_page_set_edge_flash>
    if(ext->pwd_mode != 0) pwd_char_hider(ta); /*Make sure all the current text contains only '*'*/
 8006338:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
 800633c:	07da      	lsls	r2, r3, #31
 800633e:	d502      	bpl.n	8006346 <lv_ta_add_char+0x92>
 8006340:	4620      	mov	r0, r4
 8006342:	f7ff fa7f 	bl	8005844 <pwd_char_hider>
    lv_label_ins_text(ext->label, ext->cursor.pos, (const char *)letter_buf); /*Insert the character*/
 8006346:	aa02      	add	r2, sp, #8
 8006348:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
 800634c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800634e:	f005 f999 	bl	800b684 <lv_label_ins_text>
    if(ext->pwd_mode != 0) {
 8006352:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
 8006356:	07db      	lsls	r3, r3, #31
 8006358:	d54c      	bpl.n	80063f4 <lv_ta_add_char+0x140>
        ext->pwd_tmp = lv_mem_realloc(ext->pwd_tmp, strlen(ext->pwd_tmp) + 2); /*+2: the new char + \0 */
 800635a:	6bae      	ldr	r6, [r5, #56]	; 0x38
 800635c:	4630      	mov	r0, r6
 800635e:	f010 f9f4 	bl	801674a <strlen>
 8006362:	1c81      	adds	r1, r0, #2
 8006364:	4630      	mov	r0, r6
 8006366:	f7fd f9ef 	bl	8003748 <lv_mem_realloc>
 800636a:	63a8      	str	r0, [r5, #56]	; 0x38
        lv_mem_assert(ext->pwd_tmp);
 800636c:	bb10      	cbnz	r0, 80063b4 <lv_ta_add_char+0x100>
 800636e:	4b2e      	ldr	r3, [pc, #184]	; (8006428 <lv_ta_add_char+0x174>)
 8006370:	22fd      	movs	r2, #253	; 0xfd
 8006372:	492e      	ldr	r1, [pc, #184]	; (800642c <lv_ta_add_char+0x178>)
 8006374:	2003      	movs	r0, #3
 8006376:	f7fd f94d 	bl	8003614 <lv_log_add>
 800637a:	e7fe      	b.n	800637a <lv_ta_add_char+0xc6>
    if(ext->max_length > 0 && lv_txt_get_encoded_length(lv_ta_get_text(ta)) >= ext->max_length) {
 800637c:	b16b      	cbz	r3, 800639a <lv_ta_add_char+0xe6>
 800637e:	4b2c      	ldr	r3, [pc, #176]	; (8006430 <lv_ta_add_char+0x17c>)
 8006380:	4620      	mov	r0, r4
 8006382:	f8d3 9000 	ldr.w	r9, [r3]
 8006386:	f00d ff58 	bl	801423a <lv_ta_get_text>
 800638a:	47c8      	blx	r9
 800638c:	f8b6 3040 	ldrh.w	r3, [r6, #64]	; 0x40
 8006390:	4298      	cmp	r0, r3
 8006392:	d2ae      	bcs.n	80062f2 <lv_ta_add_char+0x3e>
    if(ext->accapted_chars) {
 8006394:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8006396:	2b00      	cmp	r3, #0
 8006398:	d0c6      	beq.n	8006328 <lv_ta_add_char+0x74>
        uint32_t i = 0;
 800639a:	2300      	movs	r3, #0
 800639c:	9304      	str	r3, [sp, #16]
        while(ext->accapted_chars[i] != '\0') {
 800639e:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 80063a0:	9b04      	ldr	r3, [sp, #16]
 80063a2:	5cc3      	ldrb	r3, [r0, r3]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d0a4      	beq.n	80062f2 <lv_ta_add_char+0x3e>
            a = lv_txt_encoded_next(ext->accapted_chars, &i);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	a904      	add	r1, sp, #16
 80063ac:	4798      	blx	r3
            if(a == c) return true; /*Accepted*/
 80063ae:	4580      	cmp	r8, r0
 80063b0:	d1f5      	bne.n	800639e <lv_ta_add_char+0xea>
 80063b2:	e7b9      	b.n	8006328 <lv_ta_add_char+0x74>
        lv_txt_ins(ext->pwd_tmp, ext->cursor.pos, (const char *)letter_buf);
 80063b4:	aa02      	add	r2, sp, #8
 80063b6:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
 80063ba:	f7fd fb31 	bl	8003a20 <lv_txt_ins>
        a.exec_cb        = (lv_anim_exec_xcb_t)pwd_char_hider_anim;
 80063be:	4b1d      	ldr	r3, [pc, #116]	; (8006434 <lv_ta_add_char+0x180>)
        a.end            = 1;
 80063c0:	2201      	movs	r2, #1
        lv_anim_create(&a);
 80063c2:	a804      	add	r0, sp, #16
        a.exec_cb        = (lv_anim_exec_xcb_t)pwd_char_hider_anim;
 80063c4:	9305      	str	r3, [sp, #20]
        a.time           = ext->pwd_show_time;
 80063c6:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
        a.var            = ta;
 80063ca:	9404      	str	r4, [sp, #16]
        a.time           = ext->pwd_show_time;
 80063cc:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        a.ready_cb       = pwd_char_hider_anim_ready;
 80063d0:	4b19      	ldr	r3, [pc, #100]	; (8006438 <lv_ta_add_char+0x184>)
 80063d2:	9307      	str	r3, [sp, #28]
        a.end            = 1;
 80063d4:	2300      	movs	r3, #0
 80063d6:	e9cd 3208 	strd	r3, r2, [sp, #32]
        a.playback       = 0;
 80063da:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
        a.act_time       = 0;
 80063de:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
        a.playback       = 0;
 80063e2:	f022 0203 	bic.w	r2, r2, #3
        a.playback_pause = 0;
 80063e6:	930b      	str	r3, [sp, #44]	; 0x2c
        a.path_cb        = lv_anim_path_step;
 80063e8:	4b14      	ldr	r3, [pc, #80]	; (800643c <lv_ta_add_char+0x188>)
        a.playback       = 0;
 80063ea:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
        a.path_cb        = lv_anim_path_step;
 80063ee:	9306      	str	r3, [sp, #24]
        lv_anim_create(&a);
 80063f0:	f7fd fc2e 	bl	8003c50 <lv_anim_create>
    lv_ta_set_cursor_pos(ta, lv_ta_get_cursor_pos(ta) + 1);
 80063f4:	4620      	mov	r0, r4
 80063f6:	f00d ff5f 	bl	80142b8 <lv_ta_get_cursor_pos>
 80063fa:	1c41      	adds	r1, r0, #1
 80063fc:	4620      	mov	r0, r4
 80063fe:	b209      	sxth	r1, r1
 8006400:	f7ff fc52 	bl	8005ca8 <lv_ta_set_cursor_pos>
 8006404:	4639      	mov	r1, r7
 8006406:	4620      	mov	r0, r4
 8006408:	f00f f9a6 	bl	8015758 <lv_page_set_edge_flash>
    placeholder_update(ta);
 800640c:	4620      	mov	r0, r4
 800640e:	f00d ff22 	bl	8014256 <placeholder_update>
    lv_event_send(ta, LV_EVENT_VALUE_CHANGED, NULL);
 8006412:	2200      	movs	r2, #0
 8006414:	210e      	movs	r1, #14
 8006416:	4620      	mov	r0, r4
 8006418:	f008 fe82 	bl	800f120 <lv_event_send>
 800641c:	e769      	b.n	80062f2 <lv_ta_add_char+0x3e>
 800641e:	bf00      	nop
 8006420:	20028948 	.word	0x20028948
 8006424:	2002da4c 	.word	0x2002da4c
 8006428:	080176f4 	.word	0x080176f4
 800642c:	0801c298 	.word	0x0801c298
 8006430:	2002da58 	.word	0x2002da58
 8006434:	08014149 	.word	0x08014149
 8006438:	0801414b 	.word	0x0801414b
 800643c:	080105c9 	.word	0x080105c9

08006440 <lv_ta_del_char>:
{
 8006440:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006444:	4605      	mov	r5, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8006446:	f009 fb3b 	bl	800fac0 <lv_obj_get_ext_attr>
    if(cur_pos == 0) return;
 800644a:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 800644e:	4604      	mov	r4, r0
    if(cur_pos == 0) return;
 8006450:	b1b3      	cbz	r3, 8006480 <lv_ta_del_char+0x40>
    ta_insert_replace = NULL;
 8006452:	4e37      	ldr	r6, [pc, #220]	; (8006530 <lv_ta_del_char+0xf0>)
 8006454:	2300      	movs	r3, #0
    lv_event_send(ta, LV_EVENT_INSERT, del_buf);
 8006456:	aa01      	add	r2, sp, #4
 8006458:	210f      	movs	r1, #15
    ta_insert_replace = NULL;
 800645a:	6033      	str	r3, [r6, #0]
    char del_buf[2]   = {LV_KEY_DEL, '\0'};
 800645c:	237f      	movs	r3, #127	; 0x7f
    lv_event_send(ta, LV_EVENT_INSERT, del_buf);
 800645e:	4628      	mov	r0, r5
    char del_buf[2]   = {LV_KEY_DEL, '\0'};
 8006460:	f8ad 3004 	strh.w	r3, [sp, #4]
    lv_event_send(ta, LV_EVENT_INSERT, del_buf);
 8006464:	f008 fe5c 	bl	800f120 <lv_event_send>
    if(ta_insert_replace) {
 8006468:	6830      	ldr	r0, [r6, #0]
 800646a:	b160      	cbz	r0, 8006486 <lv_ta_del_char+0x46>
        if(ta_insert_replace[0] == '\0') return; /*Drop this text*/
 800646c:	7803      	ldrb	r3, [r0, #0]
 800646e:	b13b      	cbz	r3, 8006480 <lv_ta_del_char+0x40>
        if(strcmp(ta_insert_replace, del_buf)) {
 8006470:	a901      	add	r1, sp, #4
 8006472:	f010 f971 	bl	8016758 <strcmp>
 8006476:	b130      	cbz	r0, 8006486 <lv_ta_del_char+0x46>
            lv_ta_add_text(ta, ta_insert_replace);
 8006478:	6831      	ldr	r1, [r6, #0]
 800647a:	4628      	mov	r0, r5
 800647c:	f7ff fe60 	bl	8006140 <lv_ta_add_text>
}
 8006480:	b002      	add	sp, #8
 8006482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    char * label_txt = lv_label_get_text(ext->label);
 8006486:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006488:	f00f fca9 	bl	8015dde <lv_label_get_text>
    lv_txt_cut(label_txt, ext->cursor.pos - 1, 1);
 800648c:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
    char * label_txt = lv_label_get_text(ext->label);
 8006490:	4607      	mov	r7, r0
    lv_txt_cut(label_txt, ext->cursor.pos - 1, 1);
 8006492:	2201      	movs	r2, #1
 8006494:	3901      	subs	r1, #1
 8006496:	f7fd fae7 	bl	8003a68 <lv_txt_cut>
    lv_label_set_text(ext->label, label_txt);
 800649a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800649c:	4639      	mov	r1, r7
 800649e:	f004 ff97 	bl	800b3d0 <lv_label_set_text>
    if(lv_obj_get_width(ext->label) == 0) {
 80064a2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80064a4:	f009 fa71 	bl	800f98a <lv_obj_get_width>
 80064a8:	b938      	cbnz	r0, 80064ba <lv_ta_del_char+0x7a>
        const lv_style_t * style = lv_obj_get_style(ext->label);
 80064aa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80064ac:	f7fc fc48 	bl	8002d40 <lv_obj_get_style>
        lv_obj_set_width(ext->label, style->line.width);
 80064b0:	f9b0 1036 	ldrsh.w	r1, [r0, #54]	; 0x36
 80064b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80064b6:	f009 f973 	bl	800f7a0 <lv_obj_set_width>
    if(ext->pwd_mode != 0) {
 80064ba:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80064be:	07db      	lsls	r3, r3, #31
 80064c0:	d526      	bpl.n	8006510 <lv_ta_del_char+0xd0>
        uint32_t byte_pos = lv_txt_encoded_get_byte_id(ext->pwd_tmp, ext->cursor.pos - 1);
 80064c2:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 80064c6:	4b1b      	ldr	r3, [pc, #108]	; (8006534 <lv_ta_del_char+0xf4>)
 80064c8:	3901      	subs	r1, #1
 80064ca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4798      	blx	r3
        lv_txt_cut(ext->pwd_tmp, ext->cursor.pos - 1, lv_txt_encoded_size(&label_txt[byte_pos]));
 80064d0:	f8b4 604a 	ldrh.w	r6, [r4, #74]	; 0x4a
 80064d4:	4b18      	ldr	r3, [pc, #96]	; (8006538 <lv_ta_del_char+0xf8>)
 80064d6:	4438      	add	r0, r7
 80064d8:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 80064dc:	3e01      	subs	r6, #1
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4798      	blx	r3
 80064e2:	4631      	mov	r1, r6
 80064e4:	4602      	mov	r2, r0
 80064e6:	4640      	mov	r0, r8
 80064e8:	f7fd fabe 	bl	8003a68 <lv_txt_cut>
        ext->pwd_tmp = lv_mem_realloc(ext->pwd_tmp, strlen(ext->pwd_tmp) + 1);
 80064ec:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80064ee:	4630      	mov	r0, r6
 80064f0:	f010 f92b 	bl	801674a <strlen>
 80064f4:	1c41      	adds	r1, r0, #1
 80064f6:	4630      	mov	r0, r6
 80064f8:	f7fd f926 	bl	8003748 <lv_mem_realloc>
 80064fc:	63a0      	str	r0, [r4, #56]	; 0x38
        lv_mem_assert(ext->pwd_tmp);
 80064fe:	b938      	cbnz	r0, 8006510 <lv_ta_del_char+0xd0>
 8006500:	4b0e      	ldr	r3, [pc, #56]	; (800653c <lv_ta_del_char+0xfc>)
 8006502:	f240 129d 	movw	r2, #413	; 0x19d
 8006506:	490e      	ldr	r1, [pc, #56]	; (8006540 <lv_ta_del_char+0x100>)
 8006508:	2003      	movs	r0, #3
 800650a:	f7fd f883 	bl	8003614 <lv_log_add>
 800650e:	e7fe      	b.n	800650e <lv_ta_del_char+0xce>
    lv_ta_set_cursor_pos(ta, ext->cursor.pos - 1);
 8006510:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 8006514:	4628      	mov	r0, r5
 8006516:	3901      	subs	r1, #1
 8006518:	b209      	sxth	r1, r1
 800651a:	f7ff fbc5 	bl	8005ca8 <lv_ta_set_cursor_pos>
    placeholder_update(ta);
 800651e:	4628      	mov	r0, r5
 8006520:	f00d fe99 	bl	8014256 <placeholder_update>
    lv_event_send(ta, LV_EVENT_VALUE_CHANGED, NULL);
 8006524:	2200      	movs	r2, #0
 8006526:	210e      	movs	r1, #14
 8006528:	4628      	mov	r0, r5
 800652a:	f008 fdf9 	bl	800f120 <lv_event_send>
 800652e:	e7a7      	b.n	8006480 <lv_ta_del_char+0x40>
 8006530:	20028948 	.word	0x20028948
 8006534:	2002da48 	.word	0x2002da48
 8006538:	2002da54 	.word	0x2002da54
 800653c:	080176f4 	.word	0x080176f4
 8006540:	0801c298 	.word	0x0801c298

08006544 <lv_ta_set_text>:
{
 8006544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006548:	4605      	mov	r5, r0
 800654a:	b08a      	sub	sp, #40	; 0x28
 800654c:	460e      	mov	r6, r1
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 800654e:	f009 fab7 	bl	800fac0 <lv_obj_get_ext_attr>
 8006552:	4604      	mov	r4, r0
    if(lv_ta_get_accepted_chars(ta) || lv_ta_get_max_length(ta)) {
 8006554:	4628      	mov	r0, r5
 8006556:	f00d ffc7 	bl	80144e8 <lv_ta_get_accepted_chars>
 800655a:	2800      	cmp	r0, #0
 800655c:	d03a      	beq.n	80065d4 <lv_ta_set_text+0x90>
        lv_label_set_text(ext->label, "");
 800655e:	493f      	ldr	r1, [pc, #252]	; (800665c <lv_ta_set_text+0x118>)
 8006560:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006562:	f004 ff35 	bl	800b3d0 <lv_label_set_text>
        lv_ta_set_cursor_pos(ta, LV_TA_CURSOR_LAST);
 8006566:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800656a:	4628      	mov	r0, r5
            uint32_t c = lv_txt_encoded_next(txt, &i);
 800656c:	4f3c      	ldr	r7, [pc, #240]	; (8006660 <lv_ta_set_text+0x11c>)
        lv_ta_set_cursor_pos(ta, LV_TA_CURSOR_LAST);
 800656e:	f7ff fb9b 	bl	8005ca8 <lv_ta_set_cursor_pos>
            lv_ta_add_char(ta, lv_txt_unicode_to_encoded(c));
 8006572:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8006678 <lv_ta_set_text+0x134>
        uint32_t i = 0;
 8006576:	2300      	movs	r3, #0
 8006578:	9300      	str	r3, [sp, #0]
        while(txt[i] != '\0') {
 800657a:	9b00      	ldr	r3, [sp, #0]
 800657c:	5cf3      	ldrb	r3, [r6, r3]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d137      	bne.n	80065f2 <lv_ta_set_text+0xae>
    if(lv_obj_get_width(ext->label) == 0) {
 8006582:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006584:	f009 fa01 	bl	800f98a <lv_obj_get_width>
 8006588:	4607      	mov	r7, r0
 800658a:	b968      	cbnz	r0, 80065a8 <lv_ta_set_text+0x64>
        const lv_style_t * style = lv_obj_get_style(ext->label);
 800658c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800658e:	f7fc fbd7 	bl	8002d40 <lv_obj_get_style>
        lv_obj_set_width(ext->label, lv_font_get_glyph_width(style->text.font, ' ', '\0'));
 8006592:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8006596:	2120      	movs	r1, #32
 8006598:	463a      	mov	r2, r7
 800659a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800659c:	f00d fd8f 	bl	80140be <lv_font_get_glyph_width>
 80065a0:	b201      	sxth	r1, r0
 80065a2:	4640      	mov	r0, r8
 80065a4:	f009 f8fc 	bl	800f7a0 <lv_obj_set_width>
    if(ext->pwd_mode != 0) {
 80065a8:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80065ac:	07db      	lsls	r3, r3, #31
 80065ae:	d54a      	bpl.n	8006646 <lv_ta_set_text+0x102>
        ext->pwd_tmp = lv_mem_realloc(ext->pwd_tmp, strlen(txt) + 1);
 80065b0:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 80065b2:	4630      	mov	r0, r6
 80065b4:	f010 f8c9 	bl	801674a <strlen>
 80065b8:	1c41      	adds	r1, r0, #1
 80065ba:	4638      	mov	r0, r7
 80065bc:	f7fd f8c4 	bl	8003748 <lv_mem_realloc>
 80065c0:	63a0      	str	r0, [r4, #56]	; 0x38
        lv_mem_assert(ext->pwd_tmp);
 80065c2:	bb10      	cbnz	r0, 800660a <lv_ta_set_text+0xc6>
 80065c4:	4b27      	ldr	r3, [pc, #156]	; (8006664 <lv_ta_set_text+0x120>)
 80065c6:	f240 12db 	movw	r2, #475	; 0x1db
 80065ca:	4927      	ldr	r1, [pc, #156]	; (8006668 <lv_ta_set_text+0x124>)
 80065cc:	2003      	movs	r0, #3
 80065ce:	f7fd f821 	bl	8003614 <lv_log_add>
 80065d2:	e7fe      	b.n	80065d2 <lv_ta_set_text+0x8e>
    if(lv_ta_get_accepted_chars(ta) || lv_ta_get_max_length(ta)) {
 80065d4:	4628      	mov	r0, r5
 80065d6:	f00d ff8c 	bl	80144f2 <lv_ta_get_max_length>
 80065da:	2800      	cmp	r0, #0
 80065dc:	d1bf      	bne.n	800655e <lv_ta_set_text+0x1a>
        lv_label_set_text(ext->label, txt);
 80065de:	4631      	mov	r1, r6
 80065e0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80065e2:	f004 fef5 	bl	800b3d0 <lv_label_set_text>
        lv_ta_set_cursor_pos(ta, LV_TA_CURSOR_LAST);
 80065e6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80065ea:	4628      	mov	r0, r5
 80065ec:	f7ff fb5c 	bl	8005ca8 <lv_ta_set_cursor_pos>
 80065f0:	e7c7      	b.n	8006582 <lv_ta_set_text+0x3e>
            uint32_t c = lv_txt_encoded_next(txt, &i);
 80065f2:	4669      	mov	r1, sp
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	4630      	mov	r0, r6
 80065f8:	4798      	blx	r3
            lv_ta_add_char(ta, lv_txt_unicode_to_encoded(c));
 80065fa:	f8d8 3000 	ldr.w	r3, [r8]
 80065fe:	4798      	blx	r3
 8006600:	4601      	mov	r1, r0
 8006602:	4628      	mov	r0, r5
 8006604:	f7ff fe56 	bl	80062b4 <lv_ta_add_char>
 8006608:	e7b7      	b.n	800657a <lv_ta_set_text+0x36>
        strcpy(ext->pwd_tmp, txt);
 800660a:	4631      	mov	r1, r6
 800660c:	f010 f893 	bl	8016736 <strcpy>
        a.exec_cb        = (lv_anim_exec_xcb_t)pwd_char_hider_anim;
 8006610:	4b16      	ldr	r3, [pc, #88]	; (800666c <lv_ta_set_text+0x128>)
        a.end            = 1;
 8006612:	2201      	movs	r2, #1
        lv_anim_create(&a);
 8006614:	4668      	mov	r0, sp
        a.exec_cb        = (lv_anim_exec_xcb_t)pwd_char_hider_anim;
 8006616:	9301      	str	r3, [sp, #4]
        a.time           = ext->pwd_show_time;
 8006618:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
        a.var            = ta;
 800661c:	9500      	str	r5, [sp, #0]
        a.time           = ext->pwd_show_time;
 800661e:	f8ad 3018 	strh.w	r3, [sp, #24]
        a.ready_cb       = pwd_char_hider_anim_ready;
 8006622:	4b13      	ldr	r3, [pc, #76]	; (8006670 <lv_ta_set_text+0x12c>)
 8006624:	9303      	str	r3, [sp, #12]
        a.end            = 1;
 8006626:	2300      	movs	r3, #0
 8006628:	e9cd 3204 	strd	r3, r2, [sp, #16]
        a.playback       = 0;
 800662c:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
        a.act_time       = 0;
 8006630:	f8ad 301a 	strh.w	r3, [sp, #26]
        a.playback       = 0;
 8006634:	f022 0203 	bic.w	r2, r2, #3
        a.playback_pause = 0;
 8006638:	9307      	str	r3, [sp, #28]
        a.path_cb        = lv_anim_path_step;
 800663a:	4b0e      	ldr	r3, [pc, #56]	; (8006674 <lv_ta_set_text+0x130>)
        a.playback       = 0;
 800663c:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        a.path_cb        = lv_anim_path_step;
 8006640:	9302      	str	r3, [sp, #8]
        lv_anim_create(&a);
 8006642:	f7fd fb05 	bl	8003c50 <lv_anim_create>
    placeholder_update(ta);
 8006646:	4628      	mov	r0, r5
 8006648:	f00d fe05 	bl	8014256 <placeholder_update>
    lv_event_send(ta, LV_EVENT_VALUE_CHANGED, NULL);
 800664c:	2200      	movs	r2, #0
 800664e:	210e      	movs	r1, #14
 8006650:	4628      	mov	r0, r5
 8006652:	f008 fd65 	bl	800f120 <lv_event_send>
}
 8006656:	b00a      	add	sp, #40	; 0x28
 8006658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800665c:	0801ca18 	.word	0x0801ca18
 8006660:	2002da4c 	.word	0x2002da4c
 8006664:	080176f4 	.word	0x080176f4
 8006668:	0801c298 	.word	0x0801c298
 800666c:	08014149 	.word	0x08014149
 8006670:	0801414b 	.word	0x0801414b
 8006674:	080105c9 	.word	0x080105c9
 8006678:	2002da5c 	.word	0x2002da5c

0800667c <lv_ta_signal>:
{
 800667c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    res = ancestor_signal(ta, sign, param);
 8006680:	4ba2      	ldr	r3, [pc, #648]	; (800690c <lv_ta_signal+0x290>)
{
 8006682:	4604      	mov	r4, r0
 8006684:	460f      	mov	r7, r1
 8006686:	4616      	mov	r6, r2
    res = ancestor_signal(ta, sign, param);
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 800668c:	2801      	cmp	r0, #1
    res = ancestor_signal(ta, sign, param);
 800668e:	4680      	mov	r8, r0
    if(res != LV_RES_OK) return res;
 8006690:	d108      	bne.n	80066a4 <lv_ta_signal+0x28>
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8006692:	4620      	mov	r0, r4
 8006694:	f009 fa14 	bl	800fac0 <lv_obj_get_ext_attr>
 8006698:	4605      	mov	r5, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 800669a:	b937      	cbnz	r7, 80066aa <lv_ta_signal+0x2e>
        if(ext->pwd_tmp != NULL) lv_mem_free(ext->pwd_tmp);
 800669c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800669e:	b108      	cbz	r0, 80066a4 <lv_ta_signal+0x28>
 80066a0:	f7fd f828 	bl	80036f4 <lv_mem_free>
}
 80066a4:	4640      	mov	r0, r8
 80066a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 80066aa:	2f04      	cmp	r7, #4
 80066ac:	d149      	bne.n	8006742 <lv_ta_signal+0xc6>
        if(ext->label) {
 80066ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0f7      	beq.n	80066a4 <lv_ta_signal+0x28>
            lv_obj_t * scrl               = lv_page_get_scrl(ta);
 80066b4:	4620      	mov	r0, r4
 80066b6:	f00f f88a 	bl	80157ce <lv_page_get_scrl>
 80066ba:	4606      	mov	r6, r0
            const lv_style_t * style_ta   = lv_obj_get_style(ta);
 80066bc:	4620      	mov	r0, r4
 80066be:	f7fc fb3f 	bl	8002d40 <lv_obj_get_style>
 80066c2:	4607      	mov	r7, r0
            const lv_style_t * style_scrl = lv_obj_get_style(scrl);
 80066c4:	4630      	mov	r0, r6
 80066c6:	f7fc fb3b 	bl	8002d40 <lv_obj_get_style>
            if(ext->one_line) {
 80066ca:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
            const lv_style_t * style_scrl = lv_obj_get_style(scrl);
 80066ce:	4606      	mov	r6, r0
            if(ext->one_line) {
 80066d0:	079b      	lsls	r3, r3, #30
 80066d2:	d515      	bpl.n	8006700 <lv_ta_signal+0x84>
                const lv_style_t * style_label = lv_obj_get_style(ext->label);
 80066d4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80066d6:	f7fc fb33 	bl	8002d40 <lv_obj_get_style>
                lv_obj_set_height(ta, font_h + style_ta->body.padding.top + style_ta->body.padding.bottom +
 80066da:	8b3b      	ldrh	r3, [r7, #24]
 80066dc:	8af9      	ldrh	r1, [r7, #22]
 80066de:	4419      	add	r1, r3
 80066e0:	8af3      	ldrh	r3, [r6, #22]
 80066e2:	4419      	add	r1, r3
 80066e4:	8b33      	ldrh	r3, [r6, #24]
 80066e6:	4419      	add	r1, r3
                lv_coord_t font_h              = lv_font_get_line_height(style_label->text.font);
 80066e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
                lv_obj_set_height(ta, font_h + style_ta->body.padding.top + style_ta->body.padding.bottom +
 80066ea:	4620      	mov	r0, r4
                lv_coord_t font_h              = lv_font_get_line_height(style_label->text.font);
 80066ec:	7a1b      	ldrb	r3, [r3, #8]
                lv_obj_set_height(ta, font_h + style_ta->body.padding.top + style_ta->body.padding.bottom +
 80066ee:	4419      	add	r1, r3
 80066f0:	b209      	sxth	r1, r1
 80066f2:	f009 f85c 	bl	800f7ae <lv_obj_set_height>
            lv_label_set_text(ext->label, NULL);
 80066f6:	2100      	movs	r1, #0
 80066f8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80066fa:	f004 fe69 	bl	800b3d0 <lv_label_set_text>
 80066fe:	e7d1      	b.n	80066a4 <lv_ta_signal+0x28>
                lv_obj_set_width(ext->label, lv_page_get_fit_width(ta));
 8006700:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8006702:	4620      	mov	r0, r4
 8006704:	f00f f88d 	bl	8015822 <lv_page_get_fit_width>
 8006708:	4601      	mov	r1, r0
 800670a:	4638      	mov	r0, r7
 800670c:	f009 f848 	bl	800f7a0 <lv_obj_set_width>
                lv_obj_set_pos(ext->label, style_scrl->body.padding.left,
 8006710:	f9b6 201c 	ldrsh.w	r2, [r6, #28]
 8006714:	f9b6 101a 	ldrsh.w	r1, [r6, #26]
 8006718:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800671a:	f008 fdd6 	bl	800f2ca <lv_obj_set_pos>
                if(ext->placeholder) {
 800671e:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8006720:	2f00      	cmp	r7, #0
 8006722:	d0e8      	beq.n	80066f6 <lv_ta_signal+0x7a>
                    lv_obj_set_width(ext->placeholder, lv_page_get_fit_width(ta));
 8006724:	4620      	mov	r0, r4
 8006726:	f00f f87c 	bl	8015822 <lv_page_get_fit_width>
 800672a:	4601      	mov	r1, r0
 800672c:	4638      	mov	r0, r7
 800672e:	f009 f837 	bl	800f7a0 <lv_obj_set_width>
                    lv_obj_set_pos(ext->placeholder, style_scrl->body.padding.left,
 8006732:	f9b6 2016 	ldrsh.w	r2, [r6, #22]
 8006736:	f9b6 101a 	ldrsh.w	r1, [r6, #26]
 800673a:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800673c:	f008 fdc5 	bl	800f2ca <lv_obj_set_pos>
 8006740:	e7d9      	b.n	80066f6 <lv_ta_signal+0x7a>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 8006742:	2f02      	cmp	r7, #2
 8006744:	d168      	bne.n	8006818 <lv_ta_signal+0x19c>
        if(ext->label) {
 8006746:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006748:	b333      	cbz	r3, 8006798 <lv_ta_signal+0x11c>
            if(lv_obj_get_width(ta) != lv_area_get_width(param) || lv_obj_get_height(ta) != lv_area_get_height(param)) {
 800674a:	4620      	mov	r0, r4
 800674c:	f009 f91d 	bl	800f98a <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 8006750:	88b3      	ldrh	r3, [r6, #4]
 8006752:	8832      	ldrh	r2, [r6, #0]
 8006754:	3301      	adds	r3, #1
 8006756:	1a9b      	subs	r3, r3, r2
 8006758:	b21b      	sxth	r3, r3
 800675a:	4298      	cmp	r0, r3
 800675c:	d046      	beq.n	80067ec <lv_ta_signal+0x170>
                lv_obj_t * scrl               = lv_page_get_scrl(ta);
 800675e:	4620      	mov	r0, r4
 8006760:	f00f f835 	bl	80157ce <lv_page_get_scrl>
                const lv_style_t * style_scrl = lv_obj_get_style(scrl);
 8006764:	f7fc faec 	bl	8002d40 <lv_obj_get_style>
                lv_obj_set_width(ext->label, lv_page_get_fit_width(ta));
 8006768:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
                const lv_style_t * style_scrl = lv_obj_get_style(scrl);
 800676c:	4607      	mov	r7, r0
                lv_obj_set_width(ext->label, lv_page_get_fit_width(ta));
 800676e:	4620      	mov	r0, r4
 8006770:	f00f f857 	bl	8015822 <lv_page_get_fit_width>
 8006774:	4601      	mov	r1, r0
 8006776:	4648      	mov	r0, r9
 8006778:	f009 f812 	bl	800f7a0 <lv_obj_set_width>
                lv_obj_set_pos(ext->label, style_scrl->body.padding.left, style_scrl->body.padding.top);
 800677c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006780:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8006784:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8006786:	f008 fda0 	bl	800f2ca <lv_obj_set_pos>
                lv_label_set_text(ext->label, NULL); /*Refresh the label*/
 800678a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800678c:	2100      	movs	r1, #0
 800678e:	f004 fe1f 	bl	800b3d0 <lv_label_set_text>
                refr_cursor_area(ta);
 8006792:	4620      	mov	r0, r4
 8006794:	f7ff f93c 	bl	8005a10 <refr_cursor_area>
        if(ext->placeholder) {
 8006798:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800679a:	2b00      	cmp	r3, #0
 800679c:	d082      	beq.n	80066a4 <lv_ta_signal+0x28>
            if(lv_obj_get_width(ta) != lv_area_get_width(param) || lv_obj_get_height(ta) != lv_area_get_height(param)) {
 800679e:	4620      	mov	r0, r4
 80067a0:	f009 f8f3 	bl	800f98a <lv_obj_get_width>
 80067a4:	88b3      	ldrh	r3, [r6, #4]
 80067a6:	8832      	ldrh	r2, [r6, #0]
 80067a8:	3301      	adds	r3, #1
 80067aa:	1a9b      	subs	r3, r3, r2
 80067ac:	b21b      	sxth	r3, r3
 80067ae:	4298      	cmp	r0, r3
 80067b0:	d027      	beq.n	8006802 <lv_ta_signal+0x186>
                lv_obj_t * scrl               = lv_page_get_scrl(ta);
 80067b2:	4620      	mov	r0, r4
 80067b4:	f00f f80b 	bl	80157ce <lv_page_get_scrl>
                const lv_style_t * style_scrl = lv_obj_get_style(scrl);
 80067b8:	f7fc fac2 	bl	8002d40 <lv_obj_get_style>
                lv_obj_set_width(ext->placeholder, lv_page_get_fit_width(ta));
 80067bc:	6b6f      	ldr	r7, [r5, #52]	; 0x34
                const lv_style_t * style_scrl = lv_obj_get_style(scrl);
 80067be:	4606      	mov	r6, r0
                lv_obj_set_width(ext->placeholder, lv_page_get_fit_width(ta));
 80067c0:	4620      	mov	r0, r4
 80067c2:	f00f f82e 	bl	8015822 <lv_page_get_fit_width>
 80067c6:	4601      	mov	r1, r0
 80067c8:	4638      	mov	r0, r7
 80067ca:	f008 ffe9 	bl	800f7a0 <lv_obj_set_width>
                lv_obj_set_pos(ext->placeholder, style_scrl->body.padding.left, style_scrl->body.padding.top);
 80067ce:	f9b6 2016 	ldrsh.w	r2, [r6, #22]
 80067d2:	f9b6 101a 	ldrsh.w	r1, [r6, #26]
 80067d6:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80067d8:	f008 fd77 	bl	800f2ca <lv_obj_set_pos>
                lv_label_set_text(ext->placeholder, NULL); /*Refresh the label*/
 80067dc:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80067de:	2100      	movs	r1, #0
 80067e0:	f004 fdf6 	bl	800b3d0 <lv_label_set_text>
                refr_cursor_area(ta);
 80067e4:	4620      	mov	r0, r4
 80067e6:	f7ff f913 	bl	8005a10 <refr_cursor_area>
 80067ea:	e75b      	b.n	80066a4 <lv_ta_signal+0x28>
            if(lv_obj_get_width(ta) != lv_area_get_width(param) || lv_obj_get_height(ta) != lv_area_get_height(param)) {
 80067ec:	4620      	mov	r0, r4
 80067ee:	f009 f8d2 	bl	800f996 <lv_obj_get_height>
    return area_p->y2 - area_p->y1 + 1;
 80067f2:	88f3      	ldrh	r3, [r6, #6]
 80067f4:	8872      	ldrh	r2, [r6, #2]
 80067f6:	3301      	adds	r3, #1
 80067f8:	1a9b      	subs	r3, r3, r2
 80067fa:	b21b      	sxth	r3, r3
 80067fc:	4298      	cmp	r0, r3
 80067fe:	d1ae      	bne.n	800675e <lv_ta_signal+0xe2>
 8006800:	e7ca      	b.n	8006798 <lv_ta_signal+0x11c>
            if(lv_obj_get_width(ta) != lv_area_get_width(param) || lv_obj_get_height(ta) != lv_area_get_height(param)) {
 8006802:	4620      	mov	r0, r4
 8006804:	f009 f8c7 	bl	800f996 <lv_obj_get_height>
 8006808:	88f3      	ldrh	r3, [r6, #6]
 800680a:	8872      	ldrh	r2, [r6, #2]
 800680c:	3301      	adds	r3, #1
 800680e:	1a9b      	subs	r3, r3, r2
 8006810:	b21b      	sxth	r3, r3
 8006812:	4298      	cmp	r0, r3
 8006814:	d1cd      	bne.n	80067b2 <lv_ta_signal+0x136>
 8006816:	e745      	b.n	80066a4 <lv_ta_signal+0x28>
    } else if(sign == LV_SIGNAL_CONTROL) {
 8006818:	2f11      	cmp	r7, #17
 800681a:	d134      	bne.n	8006886 <lv_ta_signal+0x20a>
        uint32_t c = *((uint32_t *)param); /*uint32_t because can be UTF-8*/
 800681c:	6831      	ldr	r1, [r6, #0]
        if(c == LV_KEY_RIGHT)
 800681e:	2913      	cmp	r1, #19
 8006820:	d103      	bne.n	800682a <lv_ta_signal+0x1ae>
            lv_ta_cursor_right(ta);
 8006822:	4620      	mov	r0, r4
 8006824:	f00d fe80 	bl	8014528 <lv_ta_cursor_right>
 8006828:	e73c      	b.n	80066a4 <lv_ta_signal+0x28>
        else if(c == LV_KEY_LEFT)
 800682a:	2914      	cmp	r1, #20
 800682c:	d103      	bne.n	8006836 <lv_ta_signal+0x1ba>
            lv_ta_cursor_left(ta);
 800682e:	4620      	mov	r0, r4
 8006830:	f00d fe85 	bl	801453e <lv_ta_cursor_left>
 8006834:	e736      	b.n	80066a4 <lv_ta_signal+0x28>
        else if(c == LV_KEY_UP)
 8006836:	2911      	cmp	r1, #17
 8006838:	d103      	bne.n	8006842 <lv_ta_signal+0x1c6>
            lv_ta_cursor_up(ta);
 800683a:	4620      	mov	r0, r4
 800683c:	f00d febf 	bl	80145be <lv_ta_cursor_up>
 8006840:	e730      	b.n	80066a4 <lv_ta_signal+0x28>
        else if(c == LV_KEY_DOWN)
 8006842:	2912      	cmp	r1, #18
 8006844:	d103      	bne.n	800684e <lv_ta_signal+0x1d2>
            lv_ta_cursor_down(ta);
 8006846:	4620      	mov	r0, r4
 8006848:	f00d fe86 	bl	8014558 <lv_ta_cursor_down>
 800684c:	e72a      	b.n	80066a4 <lv_ta_signal+0x28>
        else if(c == LV_KEY_BACKSPACE)
 800684e:	2908      	cmp	r1, #8
 8006850:	d103      	bne.n	800685a <lv_ta_signal+0x1de>
            lv_ta_del_char(ta);
 8006852:	4620      	mov	r0, r4
 8006854:	f7ff fdf4 	bl	8006440 <lv_ta_del_char>
 8006858:	e724      	b.n	80066a4 <lv_ta_signal+0x28>
        else if(c == LV_KEY_DEL)
 800685a:	297f      	cmp	r1, #127	; 0x7f
 800685c:	d103      	bne.n	8006866 <lv_ta_signal+0x1ea>
            lv_ta_del_char_forward(ta);
 800685e:	4620      	mov	r0, r4
 8006860:	f00d fe4d 	bl	80144fe <lv_ta_del_char_forward>
 8006864:	e71e      	b.n	80066a4 <lv_ta_signal+0x28>
        else if(c == LV_KEY_HOME)
 8006866:	2902      	cmp	r1, #2
 8006868:	d104      	bne.n	8006874 <lv_ta_signal+0x1f8>
            lv_ta_set_cursor_pos(ta, 0);
 800686a:	2100      	movs	r1, #0
            lv_ta_set_cursor_pos(ta, LV_TA_CURSOR_LAST);
 800686c:	4620      	mov	r0, r4
 800686e:	f7ff fa1b 	bl	8005ca8 <lv_ta_set_cursor_pos>
 8006872:	e717      	b.n	80066a4 <lv_ta_signal+0x28>
        else if(c == LV_KEY_END)
 8006874:	2903      	cmp	r1, #3
 8006876:	d102      	bne.n	800687e <lv_ta_signal+0x202>
            lv_ta_set_cursor_pos(ta, LV_TA_CURSOR_LAST);
 8006878:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800687c:	e7f6      	b.n	800686c <lv_ta_signal+0x1f0>
            lv_ta_add_char(ta, c);
 800687e:	4620      	mov	r0, r4
 8006880:	f7ff fd18 	bl	80062b4 <lv_ta_add_char>
 8006884:	e70e      	b.n	80066a4 <lv_ta_signal+0x28>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 8006886:	2f12      	cmp	r7, #18
 8006888:	d102      	bne.n	8006890 <lv_ta_signal+0x214>
        *editable       = true;
 800688a:	f886 8000 	strb.w	r8, [r6]
 800688e:	e709      	b.n	80066a4 <lv_ta_signal+0x28>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8006890:	2f06      	cmp	r7, #6
 8006892:	d10c      	bne.n	80068ae <lv_ta_signal+0x232>
 8006894:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8006896:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800689a:	b2da      	uxtb	r2, r3
 800689c:	b119      	cbz	r1, 80068a6 <lv_ta_signal+0x22a>
 800689e:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 80068a0:	2b07      	cmp	r3, #7
 80068a2:	d1f8      	bne.n	8006896 <lv_ta_signal+0x21a>
 80068a4:	461a      	mov	r2, r3
        buf->type[i] = "lv_ta";
 80068a6:	4b1a      	ldr	r3, [pc, #104]	; (8006910 <lv_ta_signal+0x294>)
 80068a8:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 80068ac:	e6fa      	b.n	80066a4 <lv_ta_signal+0x28>
    } else if(sign == LV_SIGNAL_DEFOCUS) {
 80068ae:	2f10      	cmp	r7, #16
 80068b0:	d109      	bne.n	80068c6 <lv_ta_signal+0x24a>
        cur_type = lv_ta_get_cursor_type(ta);
 80068b2:	4620      	mov	r0, r4
 80068b4:	f00d fe10 	bl	80144d8 <lv_ta_get_cursor_type>
        lv_ta_set_cursor_type(ta, cur_type | LV_CURSOR_HIDDEN);
 80068b8:	f040 0108 	orr.w	r1, r0, #8
                lv_ta_set_cursor_type(ta, cur_type | LV_CURSOR_HIDDEN);
 80068bc:	b2c9      	uxtb	r1, r1
            lv_ta_set_cursor_type(ta, cur_type & (~LV_CURSOR_HIDDEN));
 80068be:	4620      	mov	r0, r4
 80068c0:	f00d fd52 	bl	8014368 <lv_ta_set_cursor_type>
 80068c4:	e6ee      	b.n	80066a4 <lv_ta_signal+0x28>
    } else if(sign == LV_SIGNAL_FOCUS) {
 80068c6:	2f0f      	cmp	r7, #15
 80068c8:	d116      	bne.n	80068f8 <lv_ta_signal+0x27c>
        cur_type                   = lv_ta_get_cursor_type(ta);
 80068ca:	4620      	mov	r0, r4
 80068cc:	f00d fe04 	bl	80144d8 <lv_ta_get_cursor_type>
 80068d0:	4605      	mov	r5, r0
        lv_group_t * g             = lv_obj_get_group(ta);
 80068d2:	4620      	mov	r0, r4
 80068d4:	f009 f922 	bl	800fb1c <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 80068d8:	f008 fb6b 	bl	800efb2 <lv_group_get_editing>
 80068dc:	4606      	mov	r6, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 80068de:	f7fb ffd1 	bl	8002884 <lv_indev_get_act>
 80068e2:	f008 fb7b 	bl	800efdc <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 80068e6:	2804      	cmp	r0, #4
 80068e8:	d100      	bne.n	80068ec <lv_ta_signal+0x270>
            if(editing)
 80068ea:	b116      	cbz	r6, 80068f2 <lv_ta_signal+0x276>
            lv_ta_set_cursor_type(ta, cur_type & (~LV_CURSOR_HIDDEN));
 80068ec:	f005 01f7 	and.w	r1, r5, #247	; 0xf7
 80068f0:	e7e5      	b.n	80068be <lv_ta_signal+0x242>
                lv_ta_set_cursor_type(ta, cur_type | LV_CURSOR_HIDDEN);
 80068f2:	f045 0108 	orr.w	r1, r5, #8
 80068f6:	e7e1      	b.n	80068bc <lv_ta_signal+0x240>
    } else if(sign == LV_SIGNAL_PRESSED || sign == LV_SIGNAL_PRESSING || sign == LV_SIGNAL_PRESS_LOST ||
 80068f8:	1ffb      	subs	r3, r7, #7
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	f63f aed2 	bhi.w	80066a4 <lv_ta_signal+0x28>
        update_cursor_position_on_click(ta, sign, (lv_indev_t *)param);
 8006900:	4632      	mov	r2, r6
 8006902:	4639      	mov	r1, r7
 8006904:	4620      	mov	r0, r4
 8006906:	f00d fcdd 	bl	80142c4 <update_cursor_position_on_click>
 800690a:	e6cb      	b.n	80066a4 <lv_ta_signal+0x28>
 800690c:	2002893c 	.word	0x2002893c
 8006910:	0801c301 	.word	0x0801c301

08006914 <lv_bar_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_bar_signal(lv_obj_t * bar, lv_signal_t sign, void * param)
{
 8006914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(bar, sign, param);
 8006916:	4b13      	ldr	r3, [pc, #76]	; (8006964 <lv_bar_signal+0x50>)
{
 8006918:	4604      	mov	r4, r0
 800691a:	460f      	mov	r7, r1
 800691c:	4616      	mov	r6, r2
    res = ancestor_signal(bar, sign, param);
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8006922:	2801      	cmp	r0, #1
    res = ancestor_signal(bar, sign, param);
 8006924:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 8006926:	d10c      	bne.n	8006942 <lv_bar_signal+0x2e>

    if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8006928:	2f05      	cmp	r7, #5
 800692a:	d10c      	bne.n	8006946 <lv_bar_signal+0x32>
    lv_bar_ext_t * ext       = lv_obj_get_ext_attr(bar);
 800692c:	4620      	mov	r0, r4
 800692e:	f009 f8c7 	bl	800fac0 <lv_obj_get_ext_attr>
        const lv_style_t * style_indic = lv_bar_get_style(bar, LV_BAR_STYLE_INDIC);
        if(style_indic->body.shadow.width > bar->ext_draw_pad) bar->ext_draw_pad = style_indic->body.shadow.width;
 8006932:	6903      	ldr	r3, [r0, #16]
 8006934:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8006938:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800693c:	429a      	cmp	r2, r3
 800693e:	da00      	bge.n	8006942 <lv_bar_signal+0x2e>
 8006940:	86a3      	strh	r3, [r4, #52]	; 0x34
        }
        buf->type[i] = "lv_bar";
    }

    return res;
}
 8006942:	4628      	mov	r0, r5
 8006944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8006946:	2f06      	cmp	r7, #6
 8006948:	d1fb      	bne.n	8006942 <lv_bar_signal+0x2e>
 800694a:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 800694c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8006950:	b2da      	uxtb	r2, r3
 8006952:	b119      	cbz	r1, 800695c <lv_bar_signal+0x48>
 8006954:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8006956:	2b07      	cmp	r3, #7
 8006958:	d1f8      	bne.n	800694c <lv_bar_signal+0x38>
 800695a:	461a      	mov	r2, r3
        buf->type[i] = "lv_bar";
 800695c:	4b02      	ldr	r3, [pc, #8]	; (8006968 <lv_bar_signal+0x54>)
 800695e:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 8006962:	e7ee      	b.n	8006942 <lv_bar_signal+0x2e>
 8006964:	20028950 	.word	0x20028950
 8006968:	0801c367 	.word	0x0801c367

0800696c <lv_bar_set_value>:
{
 800696c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800696e:	b08b      	sub	sp, #44	; 0x2c
 8006970:	460e      	mov	r6, r1
 8006972:	4605      	mov	r5, r0
 8006974:	4617      	mov	r7, r2
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8006976:	f009 f8a3 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->cur_value == value) return;
 800697a:	f9b0 3000 	ldrsh.w	r3, [r0]
 800697e:	42b3      	cmp	r3, r6
 8006980:	d010      	beq.n	80069a4 <lv_bar_set_value+0x38>
    new_value = value > ext->max_value ? ext->max_value : value;
 8006982:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
    new_value = new_value < ext->min_value ? ext->min_value : new_value;
 8006986:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
    new_value = value > ext->max_value ? ext->max_value : value;
 800698a:	42b4      	cmp	r4, r6
 800698c:	bfa8      	it	ge
 800698e:	4634      	movge	r4, r6
    new_value = new_value < ext->min_value ? ext->min_value : new_value;
 8006990:	42a1      	cmp	r1, r4
 8006992:	bfb8      	it	lt
 8006994:	4621      	movlt	r1, r4
    if(ext->cur_value == new_value) return;
 8006996:	428b      	cmp	r3, r1
 8006998:	d004      	beq.n	80069a4 <lv_bar_set_value+0x38>
    if(anim == LV_ANIM_OFF) {
 800699a:	b92f      	cbnz	r7, 80069a8 <lv_bar_set_value+0x3c>
        ext->cur_value = new_value;
 800699c:	8001      	strh	r1, [r0, #0]
        lv_obj_invalidate(bar);
 800699e:	4628      	mov	r0, r5
 80069a0:	f008 fc26 	bl	800f1f0 <lv_obj_invalidate>
}
 80069a4:	b00b      	add	sp, #44	; 0x2c
 80069a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(ext->anim_state == LV_BAR_ANIM_STATE_INV) {
 80069a8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
        a.var            = bar;
 80069ac:	9500      	str	r5, [sp, #0]
        if(ext->anim_state == LV_BAR_ANIM_STATE_INV) {
 80069ae:	3201      	adds	r2, #1
        a.end            = LV_BAR_ANIM_STATE_END;
 80069b0:	f44f 7280 	mov.w	r2, #256	; 0x100
            ext->anim_start = ext->anim_end;
 80069b4:	bf18      	it	ne
 80069b6:	8903      	ldrhne	r3, [r0, #8]
            ext->anim_end   = new_value;
 80069b8:	8101      	strh	r1, [r0, #8]
            ext->anim_start = ext->anim_end;
 80069ba:	80c3      	strh	r3, [r0, #6]
        a.end            = LV_BAR_ANIM_STATE_END;
 80069bc:	2300      	movs	r3, #0
 80069be:	e9cd 3204 	strd	r3, r2, [sp, #16]
        a.exec_cb        = (lv_anim_exec_xcb_t)lv_bar_anim;
 80069c2:	4a0b      	ldr	r2, [pc, #44]	; (80069f0 <lv_bar_set_value+0x84>)
 80069c4:	9201      	str	r2, [sp, #4]
        a.path_cb        = lv_anim_path_linear;
 80069c6:	4a0b      	ldr	r2, [pc, #44]	; (80069f4 <lv_bar_set_value+0x88>)
 80069c8:	9202      	str	r2, [sp, #8]
        a.ready_cb       = lv_bar_anim_ready;
 80069ca:	4a0b      	ldr	r2, [pc, #44]	; (80069f8 <lv_bar_set_value+0x8c>)
 80069cc:	9203      	str	r2, [sp, #12]
        a.time           = ext->anim_time;
 80069ce:	8982      	ldrh	r2, [r0, #12]
        lv_anim_create(&a);
 80069d0:	4668      	mov	r0, sp
        a.act_time       = 0;
 80069d2:	f8ad 301a 	strh.w	r3, [sp, #26]
        a.time           = ext->anim_time;
 80069d6:	f8ad 2018 	strh.w	r2, [sp, #24]
        a.playback       = 0;
 80069da:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
        a.playback_pause = 0;
 80069de:	9307      	str	r3, [sp, #28]
        a.playback       = 0;
 80069e0:	f022 0203 	bic.w	r2, r2, #3
 80069e4:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        lv_anim_create(&a);
 80069e8:	f7fd f932 	bl	8003c50 <lv_anim_create>
 80069ec:	e7da      	b.n	80069a4 <lv_bar_set_value+0x38>
 80069ee:	bf00      	nop
 80069f0:	08014619 	.word	0x08014619
 80069f4:	0801057d 	.word	0x0801057d
 80069f8:	0801462f 	.word	0x0801462f

080069fc <lv_bar_create>:
{
 80069fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a00:	460e      	mov	r6, r1
    lv_obj_t * new_bar = lv_obj_create(par, copy);
 8006a02:	f7fc f80b 	bl	8002a1c <lv_obj_create>
    lv_mem_assert(new_bar);
 8006a06:	4605      	mov	r5, r0
 8006a08:	b930      	cbnz	r0, 8006a18 <lv_bar_create+0x1c>
 8006a0a:	4b3e      	ldr	r3, [pc, #248]	; (8006b04 <lv_bar_create+0x108>)
 8006a0c:	2240      	movs	r2, #64	; 0x40
 8006a0e:	493e      	ldr	r1, [pc, #248]	; (8006b08 <lv_bar_create+0x10c>)
 8006a10:	2003      	movs	r0, #3
 8006a12:	f7fc fdff 	bl	8003614 <lv_log_add>
 8006a16:	e7fe      	b.n	8006a16 <lv_bar_create+0x1a>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_bar);
 8006a18:	4c3c      	ldr	r4, [pc, #240]	; (8006b0c <lv_bar_create+0x110>)
 8006a1a:	6823      	ldr	r3, [r4, #0]
 8006a1c:	b913      	cbnz	r3, 8006a24 <lv_bar_create+0x28>
 8006a1e:	f009 f84b 	bl	800fab8 <lv_obj_get_signal_cb>
 8006a22:	6020      	str	r0, [r4, #0]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_bar);
 8006a24:	4c3a      	ldr	r4, [pc, #232]	; (8006b10 <lv_bar_create+0x114>)
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	b91b      	cbnz	r3, 8006a32 <lv_bar_create+0x36>
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f009 f846 	bl	800fabc <lv_obj_get_design_cb>
 8006a30:	6020      	str	r0, [r4, #0]
    lv_bar_ext_t * ext = lv_obj_allocate_ext_attr(new_bar, sizeof(lv_bar_ext_t));
 8006a32:	2114      	movs	r1, #20
 8006a34:	4628      	mov	r0, r5
 8006a36:	f008 fbd4 	bl	800f1e2 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	b930      	cbnz	r0, 8006a4c <lv_bar_create+0x50>
 8006a3e:	4b31      	ldr	r3, [pc, #196]	; (8006b04 <lv_bar_create+0x108>)
 8006a40:	2248      	movs	r2, #72	; 0x48
 8006a42:	4931      	ldr	r1, [pc, #196]	; (8006b08 <lv_bar_create+0x10c>)
 8006a44:	2003      	movs	r0, #3
 8006a46:	f7fc fde5 	bl	8003614 <lv_log_add>
 8006a4a:	e7fe      	b.n	8006a4a <lv_bar_create+0x4e>
    ext->max_value = 100;
 8006a4c:	2700      	movs	r7, #0
 8006a4e:	2364      	movs	r3, #100	; 0x64
    ext->anim_time  = 200;
 8006a50:	f04f 08c8 	mov.w	r8, #200	; 0xc8
    lv_obj_set_signal_cb(new_bar, lv_bar_signal);
 8006a54:	492f      	ldr	r1, [pc, #188]	; (8006b14 <lv_bar_create+0x118>)
    ext->max_value = 100;
 8006a56:	e9c0 7300 	strd	r7, r3, [r0]
    ext->anim_end   = 0;
 8006a5a:	4b2f      	ldr	r3, [pc, #188]	; (8006b18 <lv_bar_create+0x11c>)
    ext->anim_time  = 200;
 8006a5c:	f8a0 800c 	strh.w	r8, [r0, #12]
    ext->anim_end   = 0;
 8006a60:	6083      	str	r3, [r0, #8]
    ext->sym         = 0;
 8006a62:	7b83      	ldrb	r3, [r0, #14]
 8006a64:	f367 0300 	bfi	r3, r7, #0, #1
 8006a68:	7383      	strb	r3, [r0, #14]
    ext->style_indic = &lv_style_pretty_color;
 8006a6a:	4b2c      	ldr	r3, [pc, #176]	; (8006b1c <lv_bar_create+0x120>)
 8006a6c:	6103      	str	r3, [r0, #16]
    lv_obj_set_signal_cb(new_bar, lv_bar_signal);
 8006a6e:	4628      	mov	r0, r5
 8006a70:	f008 fbb3 	bl	800f1da <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_bar, lv_bar_design);
 8006a74:	492a      	ldr	r1, [pc, #168]	; (8006b20 <lv_bar_create+0x124>)
 8006a76:	4628      	mov	r0, r5
 8006a78:	f008 fbb1 	bl	800f1de <lv_obj_set_design_cb>
    if(copy == NULL) {
 8006a7c:	bb26      	cbnz	r6, 8006ac8 <lv_bar_create+0xcc>
        lv_obj_set_click(new_bar, false);
 8006a7e:	4631      	mov	r1, r6
 8006a80:	4628      	mov	r0, r5
 8006a82:	f008 fb14 	bl	800f0ae <lv_obj_set_click>
        lv_obj_set_size(new_bar, LV_DPI * 2, LV_DPI / 3);
 8006a86:	2221      	movs	r2, #33	; 0x21
 8006a88:	4641      	mov	r1, r8
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	f008 fe3e 	bl	800f70c <lv_obj_set_size>
        lv_bar_set_value(new_bar, ext->cur_value, false);
 8006a90:	f9b4 1000 	ldrsh.w	r1, [r4]
 8006a94:	4632      	mov	r2, r6
 8006a96:	4628      	mov	r0, r5
 8006a98:	f7ff ff68 	bl	800696c <lv_bar_set_value>
        lv_theme_t * th = lv_theme_get_current();
 8006a9c:	f7fe fcd6 	bl	800544c <lv_theme_get_current>
        if(th) {
 8006aa0:	4604      	mov	r4, r0
 8006aa2:	b160      	cbz	r0, 8006abe <lv_bar_create+0xc2>
            lv_bar_set_style(new_bar, LV_BAR_STYLE_BG, th->style.bar.bg);
 8006aa4:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	f00d fdfb 	bl	80146a4 <lv_bar_set_style>
            lv_bar_set_style(new_bar, LV_BAR_STYLE_INDIC, th->style.bar.indic);
 8006aae:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006ab0:	2101      	movs	r1, #1
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	f00d fdf6 	bl	80146a4 <lv_bar_set_style>
}
 8006ab8:	4628      	mov	r0, r5
 8006aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            lv_obj_set_style(new_bar, &lv_style_pretty);
 8006abe:	4919      	ldr	r1, [pc, #100]	; (8006b24 <lv_bar_create+0x128>)
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	f008 ff3f 	bl	800f944 <lv_obj_set_style>
 8006ac6:	e7f7      	b.n	8006ab8 <lv_bar_create+0xbc>
        lv_bar_ext_t * ext_copy = lv_obj_get_ext_attr(copy);
 8006ac8:	4630      	mov	r0, r6
 8006aca:	f008 fff9 	bl	800fac0 <lv_obj_get_ext_attr>
        ext->min_value          = ext_copy->min_value;
 8006ace:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8006ad2:	8063      	strh	r3, [r4, #2]
        ext->max_value          = ext_copy->max_value;
 8006ad4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8006ad8:	80a3      	strh	r3, [r4, #4]
        ext->cur_value          = ext_copy->cur_value;
 8006ada:	f9b0 3000 	ldrsh.w	r3, [r0]
 8006ade:	8023      	strh	r3, [r4, #0]
        ext->style_indic        = ext_copy->style_indic;
 8006ae0:	6903      	ldr	r3, [r0, #16]
 8006ae2:	6123      	str	r3, [r4, #16]
        ext->sym                = ext_copy->sym;
 8006ae4:	7ba3      	ldrb	r3, [r4, #14]
 8006ae6:	7b82      	ldrb	r2, [r0, #14]
        lv_obj_refresh_style(new_bar);
 8006ae8:	4628      	mov	r0, r5
        ext->sym                = ext_copy->sym;
 8006aea:	f362 0300 	bfi	r3, r2, #0, #1
 8006aee:	73a3      	strb	r3, [r4, #14]
        lv_obj_refresh_style(new_bar);
 8006af0:	f008 fe65 	bl	800f7be <lv_obj_refresh_style>
        lv_bar_set_value(new_bar, ext->cur_value, false);
 8006af4:	463a      	mov	r2, r7
 8006af6:	f9b4 1000 	ldrsh.w	r1, [r4]
 8006afa:	4628      	mov	r0, r5
 8006afc:	f7ff ff36 	bl	800696c <lv_bar_set_value>
    return new_bar;
 8006b00:	e7da      	b.n	8006ab8 <lv_bar_create+0xbc>
 8006b02:	bf00      	nop
 8006b04:	080176f4 	.word	0x080176f4
 8006b08:	0801c307 	.word	0x0801c307
 8006b0c:	20028950 	.word	0x20028950
 8006b10:	2002894c 	.word	0x2002894c
 8006b14:	08006915 	.word	0x08006915
 8006b18:	ffff0000 	.word	0xffff0000
 8006b1c:	200205d8 	.word	0x200205d8
 8006b20:	08006b29 	.word	0x08006b29
 8006b24:	2002059c 	.word	0x2002059c

08006b28 <lv_bar_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 8006b28:	2a02      	cmp	r2, #2
{
 8006b2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b2e:	4680      	mov	r8, r0
 8006b30:	b090      	sub	sp, #64	; 0x40
 8006b32:	460d      	mov	r5, r1
 8006b34:	4614      	mov	r4, r2
    if(mode == LV_DESIGN_COVER_CHK) {
 8006b36:	d107      	bne.n	8006b48 <lv_bar_design+0x20>
        return ancestor_design_f(bar, mask, mode);
 8006b38:	4b92      	ldr	r3, [pc, #584]	; (8006d84 <lv_bar_design+0x25c>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4798      	blx	r3
 8006b3e:	4604      	mov	r4, r0
}
 8006b40:	4620      	mov	r0, r4
 8006b42:	b010      	add	sp, #64	; 0x40
 8006b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8006b48:	2a00      	cmp	r2, #0
 8006b4a:	f040 80f9 	bne.w	8006d40 <lv_bar_design+0x218>
        lv_opa_t opa_scale = lv_obj_get_opa_scale(bar);
 8006b4e:	f008 ff4e 	bl	800f9ee <lv_obj_get_opa_scale>
 8006b52:	4606      	mov	r6, r0
        if(lv_obj_is_focused(bar)) {
 8006b54:	4640      	mov	r0, r8
 8006b56:	f008 ffe3 	bl	800fb20 <lv_obj_is_focused>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	b318      	cbz	r0, 8006ba6 <lv_bar_design+0x7e>
            const lv_style_t * style_bg = lv_bar_get_style(bar, LV_BAR_STYLE_BG);
 8006b5e:	4621      	mov	r1, r4
 8006b60:	4640      	mov	r0, r8
 8006b62:	f00d fdcd 	bl	8014700 <lv_bar_get_style>
            lv_style_copy(&style_tmp, style_bg);
 8006b66:	4601      	mov	r1, r0
 8006b68:	a801      	add	r0, sp, #4
 8006b6a:	f009 f8ae 	bl	800fcca <lv_style_copy>
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 8006b6e:	4633      	mov	r3, r6
 8006b70:	aa01      	add	r2, sp, #4
 8006b72:	4629      	mov	r1, r5
 8006b74:	f108 0010 	add.w	r0, r8, #16
            style_tmp.body.border.width = 0;
 8006b78:	f8ad 4010 	strh.w	r4, [sp, #16]
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 8006b7c:	f00a fd6d 	bl	801165a <lv_draw_rect>
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8006b80:	4640      	mov	r0, r8
 8006b82:	f008 ff9d 	bl	800fac0 <lv_obj_get_ext_attr>
        if(ext->cur_value != ext->min_value || ext->sym
 8006b86:	f9b0 2000 	ldrsh.w	r2, [r0]
 8006b8a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8006b8e:	4607      	mov	r7, r0
        if(ext->cur_value != ext->min_value || ext->sym
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d10e      	bne.n	8006bb2 <lv_bar_design+0x8a>
 8006b94:	7b83      	ldrb	r3, [r0, #14]
 8006b96:	07db      	lsls	r3, r3, #31
 8006b98:	d40b      	bmi.n	8006bb2 <lv_bar_design+0x8a>
           || ext->anim_start != LV_BAR_ANIM_STATE_INV
 8006b9a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	d107      	bne.n	8006bb2 <lv_bar_design+0x8a>
    return true;
 8006ba2:	2401      	movs	r4, #1
 8006ba4:	e7cc      	b.n	8006b40 <lv_bar_design+0x18>
            ancestor_design_f(bar, mask, mode);
 8006ba6:	4b77      	ldr	r3, [pc, #476]	; (8006d84 <lv_bar_design+0x25c>)
 8006ba8:	4629      	mov	r1, r5
 8006baa:	4640      	mov	r0, r8
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4798      	blx	r3
 8006bb0:	e7e6      	b.n	8006b80 <lv_bar_design+0x58>
    lv_bar_ext_t * ext       = lv_obj_get_ext_attr(bar);
 8006bb2:	4640      	mov	r0, r8
 8006bb4:	f008 ff84 	bl	800fac0 <lv_obj_get_ext_attr>
        case LV_BAR_STYLE_INDIC: style = ext->style_indic; break;
 8006bb8:	6904      	ldr	r4, [r0, #16]
    memcpy(dest, src, sizeof(lv_area_t));
 8006bba:	f108 0110 	add.w	r1, r8, #16
 8006bbe:	2208      	movs	r2, #8
 8006bc0:	a801      	add	r0, sp, #4
 8006bc2:	f00f fdd5 	bl	8016770 <memcpy>
            indic_area.x1 += style_indic->body.padding.left;
 8006bc6:	8b63      	ldrh	r3, [r4, #26]
            indic_area.y2 -= style_indic->body.padding.bottom;
 8006bc8:	8b21      	ldrh	r1, [r4, #24]
            indic_area.x1 += style_indic->body.padding.left;
 8006bca:	f8bd 0004 	ldrh.w	r0, [sp, #4]
            indic_area.y2 -= style_indic->body.padding.bottom;
 8006bce:	f8bd 800a 	ldrh.w	r8, [sp, #10]
            indic_area.x1 += style_indic->body.padding.left;
 8006bd2:	4418      	add	r0, r3
            indic_area.x2 -= style_indic->body.padding.right;
 8006bd4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8006bd8:	8ba3      	ldrh	r3, [r4, #28]
            indic_area.y2 -= style_indic->body.padding.bottom;
 8006bda:	eba8 0801 	sub.w	r8, r8, r1
            indic_area.y1 += style_indic->body.padding.top;
 8006bde:	f8bd e006 	ldrh.w	lr, [sp, #6]
            indic_area.x1 += style_indic->body.padding.left;
 8006be2:	b200      	sxth	r0, r0
            indic_area.x2 -= style_indic->body.padding.right;
 8006be4:	1ad2      	subs	r2, r2, r3
            indic_area.y2 -= style_indic->body.padding.bottom;
 8006be6:	fa0f f888 	sxth.w	r8, r8
            indic_area.y1 += style_indic->body.padding.top;
 8006bea:	8ae3      	ldrh	r3, [r4, #22]
            indic_area.x2 -= style_indic->body.padding.right;
 8006bec:	b212      	sxth	r2, r2
 8006bee:	f108 0a01 	add.w	sl, r8, #1
            indic_area.y1 += style_indic->body.padding.top;
 8006bf2:	449e      	add	lr, r3
            indic_area.x1 += style_indic->body.padding.left;
 8006bf4:	f8ad 0004 	strh.w	r0, [sp, #4]
            indic_area.x2 -= style_indic->body.padding.right;
 8006bf8:	f8ad 2008 	strh.w	r2, [sp, #8]
            indic_area.y1 += style_indic->body.padding.top;
 8006bfc:	fa0f fa8a 	sxth.w	sl, sl
 8006c00:	fa0f fe8e 	sxth.w	lr, lr
    return area_p->x2 - area_p->x1 + 1;
 8006c04:	3201      	adds	r2, #1
            indic_area.y2 -= style_indic->body.padding.bottom;
 8006c06:	f8ad 800a 	strh.w	r8, [sp, #10]
            indic_area.y1 += style_indic->body.padding.top;
 8006c0a:	f8ad e006 	strh.w	lr, [sp, #6]
 8006c0e:	1a12      	subs	r2, r2, r0
    return area_p->y2 - area_p->y1 + 1;
 8006c10:	ebaa 0e0e 	sub.w	lr, sl, lr
 8006c14:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
    return area_p->x2 - area_p->x1 + 1;
 8006c18:	b212      	sxth	r2, r2
    return area_p->y2 - area_p->y1 + 1;
 8006c1a:	f9b7 900a 	ldrsh.w	r9, [r7, #10]
 8006c1e:	fa0f fe8e 	sxth.w	lr, lr
            if(w >= h) {
 8006c22:	f9b7 c004 	ldrsh.w	ip, [r7, #4]
 8006c26:	4596      	cmp	lr, r2
 8006c28:	dc47      	bgt.n	8006cba <lv_bar_design+0x192>
                if(ext->anim_state != LV_BAR_ANIM_STATE_INV) {
 8006c2a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8006c2e:	ebac 0e01 	sub.w	lr, ip, r1
 8006c32:	d03b      	beq.n	8006cac <lv_bar_design+0x184>
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8006c34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8006c38:	f9b7 8008 	ldrsh.w	r8, [r7, #8]
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8006c3c:	1a5b      	subs	r3, r3, r1
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8006c3e:	eba8 0801 	sub.w	r8, r8, r1
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8006c42:	4353      	muls	r3, r2
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8006c44:	fb02 f808 	mul.w	r8, r2, r8
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8006c48:	fb93 f3fe 	sdiv	r3, r3, lr
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8006c4c:	fb98 f8fe 	sdiv	r8, r8, lr
                    lv_coord_t anim_start_x =
 8006c50:	b21b      	sxth	r3, r3
                        anim_start_x + (((anim_end_x - anim_start_x) * ext->anim_state) >> LV_BAR_ANIM_STATE_NORM);
 8006c52:	fa0f f888 	sxth.w	r8, r8
 8006c56:	eba8 0803 	sub.w	r8, r8, r3
 8006c5a:	fb09 f908 	mul.w	r9, r9, r8
 8006c5e:	eb03 2329 	add.w	r3, r3, r9, asr #8
                    indic_area.x2 =
 8006c62:	b21b      	sxth	r3, r3
                indic_area.x2 = indic_area.x1 + indic_area.x2 - 1;
 8006c64:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 8006c68:	7bbf      	ldrb	r7, [r7, #14]
                indic_area.x2 = indic_area.x1 + indic_area.x2 - 1;
 8006c6a:	4443      	add	r3, r8
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 8006c6c:	07ff      	lsls	r7, r7, #31
                indic_area.x2 = indic_area.x1 + indic_area.x2 - 1;
 8006c6e:	b21b      	sxth	r3, r3
 8006c70:	f8ad 3008 	strh.w	r3, [sp, #8]
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 8006c74:	d513      	bpl.n	8006c9e <lv_bar_design+0x176>
 8006c76:	2900      	cmp	r1, #0
 8006c78:	da11      	bge.n	8006c9e <lv_bar_design+0x176>
 8006c7a:	f1bc 0f00 	cmp.w	ip, #0
 8006c7e:	dd0e      	ble.n	8006c9e <lv_bar_design+0x176>
                    zero = indic_area.x1 + (-ext->min_value * w) / (ext->max_value - ext->min_value);
 8006c80:	434a      	muls	r2, r1
 8006c82:	4252      	negs	r2, r2
 8006c84:	fb92 fefe 	sdiv	lr, r2, lr
 8006c88:	4486      	add	lr, r0
 8006c8a:	fa0f fe8e 	sxth.w	lr, lr
                    if(indic_area.x2 > zero)
 8006c8e:	4573      	cmp	r3, lr
                        indic_area.x1 = zero;
 8006c90:	bfce      	itee	gt
 8006c92:	f8ad e004 	strhgt.w	lr, [sp, #4]
                        indic_area.x1 = indic_area.x2;
 8006c96:	f8ad 3004 	strhle.w	r3, [sp, #4]
                        indic_area.x2 = zero;
 8006c9a:	f8ad e008 	strhle.w	lr, [sp, #8]
            lv_draw_rect(&indic_area, mask, style_indic, opa_scale);
 8006c9e:	4633      	mov	r3, r6
 8006ca0:	4622      	mov	r2, r4
 8006ca2:	4629      	mov	r1, r5
 8006ca4:	a801      	add	r0, sp, #4
 8006ca6:	f00a fcd8 	bl	801165a <lv_draw_rect>
 8006caa:	e77a      	b.n	8006ba2 <lv_bar_design+0x7a>
                        (int32_t)((int32_t)w * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 8006cac:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006cb0:	1a5b      	subs	r3, r3, r1
 8006cb2:	4353      	muls	r3, r2
 8006cb4:	fb93 f3fe 	sdiv	r3, r3, lr
 8006cb8:	e7d3      	b.n	8006c62 <lv_bar_design+0x13a>
                if(ext->anim_state != LV_BAR_ANIM_STATE_INV) {
 8006cba:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8006cbe:	ebac 0001 	sub.w	r0, ip, r1
 8006cc2:	d035      	beq.n	8006d30 <lv_bar_design+0x208>
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8006cc4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8006cc8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8006ccc:	1a52      	subs	r2, r2, r1
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8006cce:	1a5b      	subs	r3, r3, r1
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8006cd0:	fb0e f202 	mul.w	r2, lr, r2
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8006cd4:	fb0e f303 	mul.w	r3, lr, r3
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 8006cd8:	fb92 f2f0 	sdiv	r2, r2, r0
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 8006cdc:	fb93 f3f0 	sdiv	r3, r3, r0
                    lv_coord_t anim_start_y =
 8006ce0:	b212      	sxth	r2, r2
                        anim_start_y + (((anim_end_y - anim_start_y) * ext->anim_state) >> LV_BAR_ANIM_STATE_NORM);
 8006ce2:	b21b      	sxth	r3, r3
 8006ce4:	1a9b      	subs	r3, r3, r2
 8006ce6:	fb09 f303 	mul.w	r3, r9, r3
 8006cea:	eb02 2323 	add.w	r3, r2, r3, asr #8
                    indic_area.y1 =
 8006cee:	b21b      	sxth	r3, r3
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 8006cf0:	7bba      	ldrb	r2, [r7, #14]
                indic_area.y1 = indic_area.y2 - indic_area.y1 + 1;
 8006cf2:	ebaa 0303 	sub.w	r3, sl, r3
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 8006cf6:	07d2      	lsls	r2, r2, #31
                indic_area.y1 = indic_area.y2 - indic_area.y1 + 1;
 8006cf8:	b21b      	sxth	r3, r3
 8006cfa:	f8ad 3006 	strh.w	r3, [sp, #6]
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 8006cfe:	d5ce      	bpl.n	8006c9e <lv_bar_design+0x176>
 8006d00:	2900      	cmp	r1, #0
 8006d02:	dacc      	bge.n	8006c9e <lv_bar_design+0x176>
 8006d04:	f1bc 0f00 	cmp.w	ip, #0
 8006d08:	ddc9      	ble.n	8006c9e <lv_bar_design+0x176>
                    zero = indic_area.y2 - (-ext->min_value * h) / (ext->max_value - ext->min_value);
 8006d0a:	fb01 fe0e 	mul.w	lr, r1, lr
 8006d0e:	eba1 010c 	sub.w	r1, r1, ip
 8006d12:	f1ce 0e00 	rsb	lr, lr, #0
 8006d16:	fb9e f1f1 	sdiv	r1, lr, r1
 8006d1a:	4441      	add	r1, r8
 8006d1c:	b209      	sxth	r1, r1
                    if(indic_area.y1 < zero)
 8006d1e:	428b      	cmp	r3, r1
                        indic_area.y2 = zero;
 8006d20:	bfb2      	itee	lt
 8006d22:	f8ad 100a 	strhlt.w	r1, [sp, #10]
                        indic_area.y2 = indic_area.y1;
 8006d26:	f8ad 300a 	strhge.w	r3, [sp, #10]
                        indic_area.y1 = zero;
 8006d2a:	f8ad 1006 	strhge.w	r1, [sp, #6]
 8006d2e:	e7b6      	b.n	8006c9e <lv_bar_design+0x176>
                        (int32_t)((int32_t)h * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 8006d30:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006d34:	1a5b      	subs	r3, r3, r1
 8006d36:	fb0e f303 	mul.w	r3, lr, r3
 8006d3a:	fb93 f3f0 	sdiv	r3, r3, r0
 8006d3e:	e7d6      	b.n	8006cee <lv_bar_design+0x1c6>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8006d40:	2a01      	cmp	r2, #1
 8006d42:	f47f af2e 	bne.w	8006ba2 <lv_bar_design+0x7a>
        if(lv_obj_is_focused(bar)) {
 8006d46:	f008 feeb 	bl	800fb20 <lv_obj_is_focused>
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	f43f af28 	beq.w	8006ba2 <lv_bar_design+0x7a>
            lv_opa_t opa_scale          = lv_obj_get_opa_scale(bar);
 8006d52:	4640      	mov	r0, r8
 8006d54:	f008 fe4b 	bl	800f9ee <lv_obj_get_opa_scale>
            const lv_style_t * style_bg = lv_bar_get_style(bar, LV_BAR_STYLE_BG);
 8006d58:	2100      	movs	r1, #0
            lv_opa_t opa_scale          = lv_obj_get_opa_scale(bar);
 8006d5a:	4606      	mov	r6, r0
            const lv_style_t * style_bg = lv_bar_get_style(bar, LV_BAR_STYLE_BG);
 8006d5c:	4640      	mov	r0, r8
 8006d5e:	f00d fccf 	bl	8014700 <lv_bar_get_style>
            lv_style_copy(&style_tmp, style_bg);
 8006d62:	4601      	mov	r1, r0
 8006d64:	a801      	add	r0, sp, #4
 8006d66:	f008 ffb0 	bl	800fcca <lv_style_copy>
            style_tmp.body.opa          = LV_OPA_TRANSP;
 8006d6a:	2200      	movs	r2, #0
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 8006d6c:	4633      	mov	r3, r6
 8006d6e:	4629      	mov	r1, r5
            style_tmp.body.opa          = LV_OPA_TRANSP;
 8006d70:	f88d 200c 	strb.w	r2, [sp, #12]
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 8006d74:	f108 0010 	add.w	r0, r8, #16
            style_tmp.body.shadow.width = 0;
 8006d78:	f8ad 2016 	strh.w	r2, [sp, #22]
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 8006d7c:	aa01      	add	r2, sp, #4
 8006d7e:	f00a fc6c 	bl	801165a <lv_draw_rect>
 8006d82:	e6dd      	b.n	8006b40 <lv_bar_design+0x18>
 8006d84:	2002894c 	.word	0x2002894c

08006d88 <lv_btn_ink_effect_anim>:
 * @param btn pointer to the animated button
 * @param val the new radius
 */
static void lv_btn_ink_effect_anim(lv_obj_t * btn, lv_anim_value_t val)
{
    if(btn) {
 8006d88:	b118      	cbz	r0, 8006d92 <lv_btn_ink_effect_anim+0xa>
        ink_act_value = val;
 8006d8a:	4b02      	ldr	r3, [pc, #8]	; (8006d94 <lv_btn_ink_effect_anim+0xc>)
 8006d8c:	8019      	strh	r1, [r3, #0]
        lv_obj_invalidate(btn);
 8006d8e:	f008 ba2f 	b.w	800f1f0 <lv_obj_invalidate>
    }
}
 8006d92:	4770      	bx	lr
 8006d94:	2002ccd2 	.word	0x2002ccd2

08006d98 <lv_btn_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 8006d98:	2a02      	cmp	r2, #2
{
 8006d9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d9e:	468a      	mov	sl, r1
 8006da0:	b095      	sub	sp, #84	; 0x54
 8006da2:	4615      	mov	r5, r2
    if(mode == LV_DESIGN_COVER_CHK) {
 8006da4:	f000 80cf 	beq.w	8006f46 <lv_btn_design+0x1ae>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8006da8:	2a00      	cmp	r2, #0
 8006daa:	f040 80c5 	bne.w	8006f38 <lv_btn_design+0x1a0>
        if(btn != ink_obj) {
 8006dae:	4c67      	ldr	r4, [pc, #412]	; (8006f4c <lv_btn_design+0x1b4>)
 8006db0:	6827      	ldr	r7, [r4, #0]
 8006db2:	4287      	cmp	r7, r0
 8006db4:	d004      	beq.n	8006dc0 <lv_btn_design+0x28>
            ancestor_design(btn, mask, mode);
 8006db6:	4b66      	ldr	r3, [pc, #408]	; (8006f50 <lv_btn_design+0x1b8>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4798      	blx	r3
    return true;
 8006dbc:	2501      	movs	r5, #1
 8006dbe:	e0b7      	b.n	8006f30 <lv_btn_design+0x198>
            lv_opa_t opa_scale = lv_obj_get_opa_scale(btn);
 8006dc0:	f008 fe15 	bl	800f9ee <lv_obj_get_opa_scale>
 8006dc4:	4683      	mov	fp, r0
            lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8006f64 <lv_btn_design+0x1cc>
 8006dcc:	f008 fe78 	bl	800fac0 <lv_obj_get_ext_attr>
            if(ink_playback == false) {
 8006dd0:	4b60      	ldr	r3, [pc, #384]	; (8006f54 <lv_btn_design+0x1bc>)
            lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8006dd2:	4606      	mov	r6, r0
            if(ink_playback == false) {
 8006dd4:	f107 0910 	add.w	r9, r7, #16
 8006dd8:	781d      	ldrb	r5, [r3, #0]
                lv_style_copy(&style_tmp, ext->styles[ink_bg_state]);
 8006dda:	f898 3000 	ldrb.w	r3, [r8]
 8006dde:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006de2:	a805      	add	r0, sp, #20
 8006de4:	6859      	ldr	r1, [r3, #4]
            if(ink_playback == false) {
 8006de6:	2d00      	cmp	r5, #0
 8006de8:	f040 808b 	bne.w	8006f02 <lv_btn_design+0x16a>
                lv_style_copy(&style_tmp, ext->styles[ink_bg_state]);
 8006dec:	f008 ff6d 	bl	800fcca <lv_style_copy>
                style_tmp.body.shadow.width = ext->styles[ink_top_state]->body.shadow.width;
 8006df0:	4b59      	ldr	r3, [pc, #356]	; (8006f58 <lv_btn_design+0x1c0>)
                lv_draw_rect(&btn->coords, mask, &style_tmp, opa_scale);
 8006df2:	aa05      	add	r2, sp, #20
 8006df4:	4651      	mov	r1, sl
                style_tmp.body.shadow.width = ext->styles[ink_top_state]->body.shadow.width;
 8006df6:	781b      	ldrb	r3, [r3, #0]
                lv_draw_rect(&btn->coords, mask, &style_tmp, opa_scale);
 8006df8:	4648      	mov	r0, r9
                style_tmp.body.shadow.width = ext->styles[ink_top_state]->body.shadow.width;
 8006dfa:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006e04:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                lv_draw_rect(&btn->coords, mask, &style_tmp, opa_scale);
 8006e08:	465b      	mov	r3, fp
 8006e0a:	f00a fc26 	bl	801165a <lv_draw_rect>
                lv_coord_t w     = lv_obj_get_width(btn);
 8006e0e:	4638      	mov	r0, r7
 8006e10:	f008 fdbb 	bl	800f98a <lv_obj_get_width>
 8006e14:	4604      	mov	r4, r0
                lv_coord_t h     = lv_obj_get_height(btn);
 8006e16:	4638      	mov	r0, r7
 8006e18:	f008 fdbd 	bl	800f996 <lv_obj_get_height>
                lv_coord_t r_max = LV_MATH_MIN(w, h) / 2;
 8006e1c:	4284      	cmp	r4, r0
 8006e1e:	4622      	mov	r2, r4
                lv_coord_t x_err = (btn->coords.x1 + w / 2) - p_act.x;
 8006e20:	8a39      	ldrh	r1, [r7, #16]
                lv_coord_t r_max = LV_MATH_MIN(w, h) / 2;
 8006e22:	bfa8      	it	ge
 8006e24:	4602      	movge	r2, r0
                lv_coord_t x_err = (btn->coords.x1 + w / 2) - p_act.x;
 8006e26:	eb04 7ed4 	add.w	lr, r4, r4, lsr #31
                lv_coord_t r_max = LV_MATH_MIN(w, h) / 2;
 8006e2a:	b213      	sxth	r3, r2
 8006e2c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8006e30:	105a      	asrs	r2, r3, #1
                p_act.x          = ink_point.x;
 8006e32:	4b4a      	ldr	r3, [pc, #296]	; (8006f5c <lv_btn_design+0x1c4>)
                lv_coord_t r_max = LV_MATH_MIN(w, h) / 2;
 8006e34:	9201      	str	r2, [sp, #4]
                lv_coord_t coord_state =
 8006e36:	4a4a      	ldr	r2, [pc, #296]	; (8006f60 <lv_btn_design+0x1c8>)
 8006e38:	f9b2 c000 	ldrsh.w	ip, [r2]
                p_act.x          = ink_point.x;
 8006e3c:	f9b3 2000 	ldrsh.w	r2, [r3]
                lv_coord_t coord_state =
 8006e40:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
                p_act.y          = ink_point.y;
 8006e44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
                lv_coord_t x_err = (btn->coords.x1 + w / 2) - p_act.x;
 8006e48:	eba1 0102 	sub.w	r1, r1, r2
                lv_coord_t coord_state =
 8006e4c:	bfa8      	it	ge
 8006e4e:	f04f 0c80 	movge.w	ip, #128	; 0x80
                lv_coord_t half_side = LV_MATH_MAX(w, h) / 2;
 8006e52:	4284      	cmp	r4, r0
                lv_coord_t x_err = (btn->coords.x1 + w / 2) - p_act.x;
 8006e54:	eb01 016e 	add.w	r1, r1, lr, asr #1
                lv_coord_t half_side = LV_MATH_MAX(w, h) / 2;
 8006e58:	bfb8      	it	lt
 8006e5a:	4604      	movlt	r4, r0
                p_act.x += (x_err * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1);
 8006e5c:	fb11 f10c 	smulbb	r1, r1, ip
                lv_coord_t half_side = LV_MATH_MAX(w, h) / 2;
 8006e60:	b224      	sxth	r4, r4
                p_act.x += (x_err * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1);
 8006e62:	eb02 12e1 	add.w	r2, r2, r1, asr #7
                lv_coord_t y_err = (btn->coords.y1 + h / 2) - p_act.y;
 8006e66:	8a79      	ldrh	r1, [r7, #18]
                lv_coord_t half_side = LV_MATH_MAX(w, h) / 2;
 8006e68:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
                lv_coord_t y_err = (btn->coords.y1 + h / 2) - p_act.y;
 8006e6c:	eb00 77d0 	add.w	r7, r0, r0, lsr #31
 8006e70:	1ac9      	subs	r1, r1, r3
                lv_coord_t half_side = LV_MATH_MAX(w, h) / 2;
 8006e72:	1064      	asrs	r4, r4, #1
                lv_coord_t y_err = (btn->coords.y1 + h / 2) - p_act.y;
 8006e74:	eb01 0167 	add.w	r1, r1, r7, asr #1
                p_act.x += (x_err * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1);
 8006e78:	b212      	sxth	r2, r2
                p_act.y += (y_err * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1);
 8006e7a:	fb11 f10c 	smulbb	r1, r1, ip
                cir_area.x1          = p_act.x - ((half_side * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1));
 8006e7e:	fb14 fc0c 	smulbb	ip, r4, ip
                p_act.y += (y_err * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1);
 8006e82:	eb03 13e1 	add.w	r3, r3, r1, asr #7
                cir_area.x1          = p_act.x - ((half_side * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1));
 8006e86:	f34c 1ccf 	sbfx	ip, ip, #7, #16
                p_act.y += (y_err * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1);
 8006e8a:	b21b      	sxth	r3, r3
                cir_area.x1          = p_act.x - ((half_side * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1));
 8006e8c:	eba2 010c 	sub.w	r1, r2, ip
                cir_area.x2          = p_act.x + ((half_side * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1));
 8006e90:	4462      	add	r2, ip
                cir_area.x1          = p_act.x - ((half_side * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1));
 8006e92:	f8ad 100c 	strh.w	r1, [sp, #12]
                cir_area.y1          = p_act.y - ((half_side * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1));
 8006e96:	eba3 010c 	sub.w	r1, r3, ip
                cir_area.x2          = p_act.x + ((half_side * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1));
 8006e9a:	f8ad 2010 	strh.w	r2, [sp, #16]
                cir_area.y2          = p_act.y + ((half_side * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1));
 8006e9e:	4463      	add	r3, ip
                cir_area.y1          = p_act.y - ((half_side * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1));
 8006ea0:	f8ad 100e 	strh.w	r1, [sp, #14]
                lv_area_intersect(&cir_area, &btn->coords,
 8006ea4:	a903      	add	r1, sp, #12
                cir_area.y2          = p_act.y + ((half_side * coord_state) >> (LV_BTN_INK_VALUE_MAX_SHIFT - 1));
 8006ea6:	f8ad 3012 	strh.w	r3, [sp, #18]
                lv_area_intersect(&cir_area, &btn->coords,
 8006eaa:	460a      	mov	r2, r1
 8006eac:	4649      	mov	r1, r9
 8006eae:	4610      	mov	r0, r2
 8006eb0:	f009 fbc5 	bl	801063e <lv_area_intersect>
                lv_style_copy(&style_tmp, ext->styles[ink_top_state]);
 8006eb4:	4b28      	ldr	r3, [pc, #160]	; (8006f58 <lv_btn_design+0x1c0>)
                lv_coord_t r_state =
 8006eb6:	4a2a      	ldr	r2, [pc, #168]	; (8006f60 <lv_btn_design+0x1c8>)
                lv_style_copy(&style_tmp, ext->styles[ink_top_state]);
 8006eb8:	a805      	add	r0, sp, #20
 8006eba:	781b      	ldrb	r3, [r3, #0]
                lv_coord_t r_state =
 8006ebc:	f9b2 4000 	ldrsh.w	r4, [r2]
                lv_style_copy(&style_tmp, ext->styles[ink_top_state]);
 8006ec0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
                lv_coord_t r_state =
 8006ec4:	2c80      	cmp	r4, #128	; 0x80
                lv_style_copy(&style_tmp, ext->styles[ink_top_state]);
 8006ec6:	6859      	ldr	r1, [r3, #4]
                lv_coord_t r_state =
 8006ec8:	bfb8      	it	lt
 8006eca:	2480      	movlt	r4, #128	; 0x80
                lv_style_copy(&style_tmp, ext->styles[ink_top_state]);
 8006ecc:	f008 fefd 	bl	800fcca <lv_style_copy>
                style_tmp.body.radius       = r_max + (((ext->styles[ink_bg_state]->body.radius - r_max) * r_state) >>
 8006ed0:	f898 3000 	ldrb.w	r3, [r8]
                lv_draw_rect(&cir_area, mask, &style_tmp, opa_scale);
 8006ed4:	4651      	mov	r1, sl
                style_tmp.body.radius       = r_max + (((ext->styles[ink_bg_state]->body.radius - r_max) * r_state) >>
 8006ed6:	9a01      	ldr	r2, [sp, #4]
                lv_coord_t r_state =
 8006ed8:	3c80      	subs	r4, #128	; 0x80
                style_tmp.body.radius       = r_max + (((ext->styles[ink_bg_state]->body.radius - r_max) * r_state) >>
 8006eda:	eb06 0683 	add.w	r6, r6, r3, lsl #2
                lv_draw_rect(&cir_area, mask, &style_tmp, opa_scale);
 8006ede:	a803      	add	r0, sp, #12
                lv_coord_t r_state =
 8006ee0:	b224      	sxth	r4, r4
                style_tmp.body.radius       = r_max + (((ext->styles[ink_bg_state]->body.radius - r_max) * r_state) >>
 8006ee2:	6873      	ldr	r3, [r6, #4]
 8006ee4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
                style_tmp.body.border.width = 0;
 8006ee8:	f8ad 5020 	strh.w	r5, [sp, #32]
                style_tmp.body.radius       = r_max + (((ext->styles[ink_bg_state]->body.radius - r_max) * r_state) >>
 8006eec:	1a9b      	subs	r3, r3, r2
 8006eee:	435c      	muls	r4, r3
                lv_draw_rect(&cir_area, mask, &style_tmp, opa_scale);
 8006ef0:	465b      	mov	r3, fp
                style_tmp.body.radius       = r_max + (((ext->styles[ink_bg_state]->body.radius - r_max) * r_state) >>
 8006ef2:	eb02 14e4 	add.w	r4, r2, r4, asr #7
                lv_draw_rect(&cir_area, mask, &style_tmp, opa_scale);
 8006ef6:	aa05      	add	r2, sp, #20
                style_tmp.body.radius       = r_max + (((ext->styles[ink_bg_state]->body.radius - r_max) * r_state) >>
 8006ef8:	f8ad 401a 	strh.w	r4, [sp, #26]
                lv_draw_rect(&cir_area, mask, &style_tmp, opa_scale);
 8006efc:	f00a fbad 	bl	801165a <lv_draw_rect>
 8006f00:	e75c      	b.n	8006dbc <lv_btn_design+0x24>
                lv_style_copy(&res, ext->styles[ink_bg_state]);
 8006f02:	f008 fee2 	bl	800fcca <lv_style_copy>
                lv_style_mix(ext->styles[ink_bg_state], ext->styles[ink_top_state], &res, ink_act_value);
 8006f06:	4b14      	ldr	r3, [pc, #80]	; (8006f58 <lv_btn_design+0x1c0>)
 8006f08:	aa05      	add	r2, sp, #20
 8006f0a:	7819      	ldrb	r1, [r3, #0]
 8006f0c:	f898 3000 	ldrb.w	r3, [r8]
 8006f10:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8006f14:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8006f18:	4b11      	ldr	r3, [pc, #68]	; (8006f60 <lv_btn_design+0x1c8>)
 8006f1a:	6849      	ldr	r1, [r1, #4]
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	6870      	ldr	r0, [r6, #4]
 8006f20:	f008 fed6 	bl	800fcd0 <lv_style_mix>
                lv_draw_rect(&btn->coords, mask, &res, opa_scale);
 8006f24:	465b      	mov	r3, fp
 8006f26:	aa05      	add	r2, sp, #20
 8006f28:	4651      	mov	r1, sl
 8006f2a:	4648      	mov	r0, r9
 8006f2c:	f00a fb95 	bl	801165a <lv_draw_rect>
}
 8006f30:	4628      	mov	r0, r5
 8006f32:	b015      	add	sp, #84	; 0x54
 8006f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8006f38:	2a01      	cmp	r2, #1
 8006f3a:	f47f af3f 	bne.w	8006dbc <lv_btn_design+0x24>
        ancestor_design(btn, mask, mode);
 8006f3e:	4b04      	ldr	r3, [pc, #16]	; (8006f50 <lv_btn_design+0x1b8>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4798      	blx	r3
 8006f44:	e7f4      	b.n	8006f30 <lv_btn_design+0x198>
        return false;
 8006f46:	2500      	movs	r5, #0
 8006f48:	e7f2      	b.n	8006f30 <lv_btn_design+0x198>
 8006f4a:	bf00      	nop
 8006f4c:	2002895c 	.word	0x2002895c
 8006f50:	20028954 	.word	0x20028954
 8006f54:	2002cce3 	.word	0x2002cce3
 8006f58:	2002cce5 	.word	0x2002cce5
 8006f5c:	2002ccd4 	.word	0x2002ccd4
 8006f60:	2002ccd2 	.word	0x2002ccd2
 8006f64:	2002cce2 	.word	0x2002cce2

08006f68 <lv_btn_create>:
{
 8006f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6a:	4607      	mov	r7, r0
 8006f6c:	460e      	mov	r6, r1
    new_btn = lv_cont_create(par, copy);
 8006f6e:	f001 fab9 	bl	80084e4 <lv_cont_create>
    lv_mem_assert(new_btn);
 8006f72:	4605      	mov	r5, r0
 8006f74:	b930      	cbnz	r0, 8006f84 <lv_btn_create+0x1c>
 8006f76:	4b43      	ldr	r3, [pc, #268]	; (8007084 <lv_btn_create+0x11c>)
 8006f78:	224f      	movs	r2, #79	; 0x4f
 8006f7a:	4943      	ldr	r1, [pc, #268]	; (8007088 <lv_btn_create+0x120>)
 8006f7c:	2003      	movs	r0, #3
 8006f7e:	f7fc fb49 	bl	8003614 <lv_log_add>
 8006f82:	e7fe      	b.n	8006f82 <lv_btn_create+0x1a>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_btn);
 8006f84:	4c41      	ldr	r4, [pc, #260]	; (800708c <lv_btn_create+0x124>)
 8006f86:	6823      	ldr	r3, [r4, #0]
 8006f88:	b913      	cbnz	r3, 8006f90 <lv_btn_create+0x28>
 8006f8a:	f008 fd95 	bl	800fab8 <lv_obj_get_signal_cb>
 8006f8e:	6020      	str	r0, [r4, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_btn);
 8006f90:	4c3f      	ldr	r4, [pc, #252]	; (8007090 <lv_btn_create+0x128>)
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	b91b      	cbnz	r3, 8006f9e <lv_btn_create+0x36>
 8006f96:	4628      	mov	r0, r5
 8006f98:	f008 fd90 	bl	800fabc <lv_obj_get_design_cb>
 8006f9c:	6020      	str	r0, [r4, #0]
    lv_btn_ext_t * ext = lv_obj_allocate_ext_attr(new_btn, sizeof(lv_btn_ext_t));
 8006f9e:	2120      	movs	r1, #32
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	f008 f91e 	bl	800f1e2 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	b930      	cbnz	r0, 8006fb8 <lv_btn_create+0x50>
 8006faa:	4b36      	ldr	r3, [pc, #216]	; (8007084 <lv_btn_create+0x11c>)
 8006fac:	2257      	movs	r2, #87	; 0x57
 8006fae:	4936      	ldr	r1, [pc, #216]	; (8007088 <lv_btn_create+0x120>)
 8006fb0:	2003      	movs	r0, #3
 8006fb2:	f7fc fb2f 	bl	8003614 <lv_log_add>
 8006fb6:	e7fe      	b.n	8006fb6 <lv_btn_create+0x4e>
    ext->styles[LV_BTN_STATE_REL]     = &lv_style_btn_rel;
 8006fb8:	4b36      	ldr	r3, [pc, #216]	; (8007094 <lv_btn_create+0x12c>)
    lv_obj_set_signal_cb(new_btn, lv_btn_signal);
 8006fba:	4937      	ldr	r1, [pc, #220]	; (8007098 <lv_btn_create+0x130>)
    ext->styles[LV_BTN_STATE_REL]     = &lv_style_btn_rel;
 8006fbc:	6043      	str	r3, [r0, #4]
    ext->styles[LV_BTN_STATE_PR]      = &lv_style_btn_pr;
 8006fbe:	4b37      	ldr	r3, [pc, #220]	; (800709c <lv_btn_create+0x134>)
 8006fc0:	6083      	str	r3, [r0, #8]
    ext->styles[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 8006fc2:	4b37      	ldr	r3, [pc, #220]	; (80070a0 <lv_btn_create+0x138>)
 8006fc4:	60c3      	str	r3, [r0, #12]
    ext->styles[LV_BTN_STATE_TGL_PR]  = &lv_style_btn_tgl_pr;
 8006fc6:	4b37      	ldr	r3, [pc, #220]	; (80070a4 <lv_btn_create+0x13c>)
 8006fc8:	6103      	str	r3, [r0, #16]
    ext->styles[LV_BTN_STATE_INA]     = &lv_style_btn_ina;
 8006fca:	4b37      	ldr	r3, [pc, #220]	; (80070a8 <lv_btn_create+0x140>)
 8006fcc:	6143      	str	r3, [r0, #20]
    ext->ink_in_time   = 0;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	6183      	str	r3, [r0, #24]
    ext->ink_out_time  = 0;
 8006fd2:	8383      	strh	r3, [r0, #28]
    ext->state = LV_BTN_STATE_REL;
 8006fd4:	7f83      	ldrb	r3, [r0, #30]
 8006fd6:	f023 030f 	bic.w	r3, r3, #15
 8006fda:	7783      	strb	r3, [r0, #30]
    lv_obj_set_signal_cb(new_btn, lv_btn_signal);
 8006fdc:	4628      	mov	r0, r5
 8006fde:	f008 f8fc 	bl	800f1da <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_btn, lv_btn_design);
 8006fe2:	4932      	ldr	r1, [pc, #200]	; (80070ac <lv_btn_create+0x144>)
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	f008 f8fa 	bl	800f1de <lv_obj_set_design_cb>
    if(copy == NULL) {
 8006fea:	bb66      	cbnz	r6, 8007046 <lv_btn_create+0xde>
        if(par != NULL) {
 8006fec:	b11f      	cbz	r7, 8006ff6 <lv_btn_create+0x8e>
 * @param btn pointer to a button object
 * @param layout a layout from 'lv_cont_layout_t'
 */
static inline void lv_btn_set_layout(lv_obj_t * btn, lv_layout_t layout)
{
    lv_cont_set_layout(btn, layout);
 8006fee:	2101      	movs	r1, #1
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	f00d fd43 	bl	8014a7c <lv_cont_set_layout>
        lv_obj_set_click(new_btn, true); /*Be sure the button is clickable*/
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	f008 f858 	bl	800f0ae <lv_obj_set_click>
        lv_theme_t * th = lv_theme_get_current();
 8006ffe:	f7fe fa25 	bl	800544c <lv_theme_get_current>
        if(th) {
 8007002:	4606      	mov	r6, r0
 8007004:	b1d0      	cbz	r0, 800703c <lv_btn_create+0xd4>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_REL, th->style.btn.rel);
 8007006:	6902      	ldr	r2, [r0, #16]
 8007008:	2100      	movs	r1, #0
 800700a:	4628      	mov	r0, r5
 800700c:	f00d fb9f 	bl	801474e <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_PR, th->style.btn.pr);
 8007010:	6972      	ldr	r2, [r6, #20]
 8007012:	2101      	movs	r1, #1
 8007014:	4628      	mov	r0, r5
 8007016:	f00d fb9a 	bl	801474e <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_REL, th->style.btn.tgl_rel);
 800701a:	69b2      	ldr	r2, [r6, #24]
 800701c:	2102      	movs	r1, #2
 800701e:	4628      	mov	r0, r5
 8007020:	f00d fb95 	bl	801474e <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_PR, th->style.btn.tgl_pr);
 8007024:	69f2      	ldr	r2, [r6, #28]
 8007026:	2103      	movs	r1, #3
 8007028:	4628      	mov	r0, r5
 800702a:	f00d fb90 	bl	801474e <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_INA, th->style.btn.ina);
 800702e:	6a32      	ldr	r2, [r6, #32]
 8007030:	2104      	movs	r1, #4
 8007032:	4628      	mov	r0, r5
 8007034:	f00d fb8b 	bl	801474e <lv_btn_set_style>
}
 8007038:	4628      	mov	r0, r5
 800703a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_obj_set_style(new_btn, ext->styles[LV_BTN_STATE_REL]);
 800703c:	6861      	ldr	r1, [r4, #4]
 800703e:	4628      	mov	r0, r5
 8007040:	f008 fc80 	bl	800f944 <lv_obj_set_style>
 8007044:	e7f8      	b.n	8007038 <lv_btn_create+0xd0>
        lv_btn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8007046:	4630      	mov	r0, r6
 8007048:	f008 fd3a 	bl	800fac0 <lv_obj_get_ext_attr>
        ext->state              = copy_ext->state;
 800704c:	7fa3      	ldrb	r3, [r4, #30]
 800704e:	7f82      	ldrb	r2, [r0, #30]
        memcpy(ext->styles, copy_ext->styles, sizeof(ext->styles));
 8007050:	1d01      	adds	r1, r0, #4
        ext->state              = copy_ext->state;
 8007052:	f362 0302 	bfi	r3, r2, #0, #3
 8007056:	77a3      	strb	r3, [r4, #30]
        ext->toggle             = copy_ext->toggle;
 8007058:	7f83      	ldrb	r3, [r0, #30]
 800705a:	7fa2      	ldrb	r2, [r4, #30]
 800705c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007060:	f363 02c3 	bfi	r2, r3, #3, #1
 8007064:	77a2      	strb	r2, [r4, #30]
        memcpy(ext->styles, copy_ext->styles, sizeof(ext->styles));
 8007066:	2214      	movs	r2, #20
        ext->ink_in_time   = copy_ext->ink_in_time;
 8007068:	8b03      	ldrh	r3, [r0, #24]
 800706a:	8323      	strh	r3, [r4, #24]
        ext->ink_wait_time = copy_ext->ink_wait_time;
 800706c:	8b43      	ldrh	r3, [r0, #26]
 800706e:	8363      	strh	r3, [r4, #26]
        ext->ink_out_time  = copy_ext->ink_out_time;
 8007070:	8b83      	ldrh	r3, [r0, #28]
        memcpy(ext->styles, copy_ext->styles, sizeof(ext->styles));
 8007072:	1d20      	adds	r0, r4, #4
        ext->ink_out_time  = copy_ext->ink_out_time;
 8007074:	83a3      	strh	r3, [r4, #28]
        memcpy(ext->styles, copy_ext->styles, sizeof(ext->styles));
 8007076:	f00f fb7b 	bl	8016770 <memcpy>
        lv_obj_refresh_style(new_btn);
 800707a:	4628      	mov	r0, r5
 800707c:	f008 fb9f 	bl	800f7be <lv_obj_refresh_style>
    return new_btn;
 8007080:	e7da      	b.n	8007038 <lv_btn_create+0xd0>
 8007082:	bf00      	nop
 8007084:	080176f4 	.word	0x080176f4
 8007088:	0801c36e 	.word	0x0801c36e
 800708c:	20028958 	.word	0x20028958
 8007090:	20028954 	.word	0x20028954
 8007094:	20020470 	.word	0x20020470
 8007098:	08007145 	.word	0x08007145
 800709c:	20020434 	.word	0x20020434
 80070a0:	200204e8 	.word	0x200204e8
 80070a4:	200204ac 	.word	0x200204ac
 80070a8:	200203f8 	.word	0x200203f8
 80070ac:	08006d99 	.word	0x08006d99

080070b0 <lv_btn_ink_effect_anim_ready>:
/**
 * Called to clean up when the ink animation is ready
 * @param a unused
 */
static void lv_btn_ink_effect_anim_ready(lv_anim_t * a)
{
 80070b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    (void)a; /*Unused*/

    lv_btn_ext_t * ext   = lv_obj_get_ext_attr(ink_obj);
 80070b2:	4c1e      	ldr	r4, [pc, #120]	; (800712c <lv_btn_ink_effect_anim_ready+0x7c>)
{
 80070b4:	b08b      	sub	sp, #44	; 0x2c
    lv_btn_state_t state = lv_btn_get_state(ink_obj);

    lv_obj_invalidate(ink_obj);
    ink_ready = true;
 80070b6:	2701      	movs	r7, #1
    lv_btn_ext_t * ext   = lv_obj_get_ext_attr(ink_obj);
 80070b8:	6820      	ldr	r0, [r4, #0]
 80070ba:	f008 fd01 	bl	800fac0 <lv_obj_get_ext_attr>
 80070be:	4605      	mov	r5, r0
    lv_btn_state_t state = lv_btn_get_state(ink_obj);
 80070c0:	6820      	ldr	r0, [r4, #0]
 80070c2:	f00d fb65 	bl	8014790 <lv_btn_get_state>
 80070c6:	4606      	mov	r6, r0
    lv_obj_invalidate(ink_obj);
 80070c8:	6820      	ldr	r0, [r4, #0]
 80070ca:	f008 f891 	bl	800f1f0 <lv_obj_invalidate>
    ink_ready = true;
 80070ce:	4b18      	ldr	r3, [pc, #96]	; (8007130 <lv_btn_ink_effect_anim_ready+0x80>)

    if((state == LV_BTN_STATE_REL || state == LV_BTN_STATE_TGL_REL) && ext->toggle == 0 && ink_playback == false) {
 80070d0:	f016 0ffd 	tst.w	r6, #253	; 0xfd
 80070d4:	4622      	mov	r2, r4
    ink_ready = true;
 80070d6:	701f      	strb	r7, [r3, #0]
    if((state == LV_BTN_STATE_REL || state == LV_BTN_STATE_TGL_REL) && ext->toggle == 0 && ink_playback == false) {
 80070d8:	d125      	bne.n	8007126 <lv_btn_ink_effect_anim_ready+0x76>
 80070da:	7fab      	ldrb	r3, [r5, #30]
 80070dc:	071b      	lsls	r3, r3, #28
 80070de:	d422      	bmi.n	8007126 <lv_btn_ink_effect_anim_ready+0x76>
 80070e0:	4e14      	ldr	r6, [pc, #80]	; (8007134 <lv_btn_ink_effect_anim_ready+0x84>)
 80070e2:	7833      	ldrb	r3, [r6, #0]
 80070e4:	b9fb      	cbnz	r3, 8007126 <lv_btn_ink_effect_anim_ready+0x76>
        lv_anim_t new_a;
        new_a.var            = ink_obj;
 80070e6:	6822      	ldr	r2, [r4, #0]
        new_a.time           = ext->ink_out_time;
        new_a.playback       = 0;
        new_a.playback_pause = 0;
        new_a.repeat         = 0;
        new_a.repeat_pause   = 0;
        lv_anim_create(&new_a);
 80070e8:	4668      	mov	r0, sp
        new_a.var            = ink_obj;
 80070ea:	9200      	str	r2, [sp, #0]
        new_a.start          = LV_BTN_INK_VALUE_MAX;
 80070ec:	f44f 7280 	mov.w	r2, #256	; 0x100
        new_a.end            = 0;
 80070f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
        new_a.exec_cb        = (lv_anim_exec_xcb_t)lv_btn_ink_effect_anim;
 80070f4:	4a10      	ldr	r2, [pc, #64]	; (8007138 <lv_btn_ink_effect_anim_ready+0x88>)
 80070f6:	9201      	str	r2, [sp, #4]
        new_a.path_cb        = lv_anim_path_linear;
 80070f8:	4a10      	ldr	r2, [pc, #64]	; (800713c <lv_btn_ink_effect_anim_ready+0x8c>)
 80070fa:	9202      	str	r2, [sp, #8]
        new_a.ready_cb       = lv_btn_ink_effect_anim_ready;
 80070fc:	4a10      	ldr	r2, [pc, #64]	; (8007140 <lv_btn_ink_effect_anim_ready+0x90>)
 80070fe:	9203      	str	r2, [sp, #12]
        new_a.act_time       = -ext->ink_wait_time;
 8007100:	8b6a      	ldrh	r2, [r5, #26]
 8007102:	4252      	negs	r2, r2
 8007104:	f8ad 201a 	strh.w	r2, [sp, #26]
        new_a.time           = ext->ink_out_time;
 8007108:	8baa      	ldrh	r2, [r5, #28]
        new_a.playback_pause = 0;
 800710a:	9307      	str	r3, [sp, #28]
        new_a.time           = ext->ink_out_time;
 800710c:	f8ad 2018 	strh.w	r2, [sp, #24]
        new_a.playback       = 0;
 8007110:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 8007114:	f022 0203 	bic.w	r2, r2, #3
 8007118:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        lv_anim_create(&new_a);
 800711c:	f7fc fd98 	bl	8003c50 <lv_anim_create>

        ink_playback = true;
 8007120:	7037      	strb	r7, [r6, #0]
    } else {
        ink_obj = NULL;
    }
}
 8007122:	b00b      	add	sp, #44	; 0x2c
 8007124:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ink_obj = NULL;
 8007126:	2300      	movs	r3, #0
 8007128:	6013      	str	r3, [r2, #0]
}
 800712a:	e7fa      	b.n	8007122 <lv_btn_ink_effect_anim_ready+0x72>
 800712c:	2002895c 	.word	0x2002895c
 8007130:	2002cce4 	.word	0x2002cce4
 8007134:	2002cce3 	.word	0x2002cce3
 8007138:	08006d89 	.word	0x08006d89
 800713c:	0801057d 	.word	0x0801057d
 8007140:	080070b1 	.word	0x080070b1

08007144 <lv_btn_signal>:
    res = ancestor_signal(btn, sign, param);
 8007144:	4b95      	ldr	r3, [pc, #596]	; (800739c <lv_btn_signal+0x258>)
{
 8007146:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    res = ancestor_signal(btn, sign, param);
 800714a:	681b      	ldr	r3, [r3, #0]
{
 800714c:	b08b      	sub	sp, #44	; 0x2c
 800714e:	4604      	mov	r4, r0
 8007150:	460f      	mov	r7, r1
 8007152:	4690      	mov	r8, r2
    res = ancestor_signal(btn, sign, param);
 8007154:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8007156:	2801      	cmp	r0, #1
    res = ancestor_signal(btn, sign, param);
 8007158:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 800715a:	d162      	bne.n	8007222 <lv_btn_signal+0xde>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 800715c:	4620      	mov	r0, r4
 800715e:	f008 fcaf 	bl	800fac0 <lv_obj_get_ext_attr>
 8007162:	4606      	mov	r6, r0
    bool tgl           = lv_btn_get_toggle(btn);
 8007164:	4620      	mov	r0, r4
 8007166:	f00d fb1a 	bl	801479e <lv_btn_get_toggle>
    if(sign == LV_SIGNAL_PRESSED) {
 800716a:	2f07      	cmp	r7, #7
    bool tgl           = lv_btn_get_toggle(btn);
 800716c:	4681      	mov	r9, r0
    if(sign == LV_SIGNAL_PRESSED) {
 800716e:	d14d      	bne.n	800720c <lv_btn_signal+0xc8>
        if(ext->state == LV_BTN_STATE_REL) {
 8007170:	7fb7      	ldrb	r7, [r6, #30]
 8007172:	f017 0707 	ands.w	r7, r7, #7
 8007176:	d13d      	bne.n	80071f4 <lv_btn_signal+0xb0>
            lv_btn_set_state(btn, LV_BTN_STATE_PR);
 8007178:	4629      	mov	r1, r5
 800717a:	4620      	mov	r0, r4
 800717c:	f00d fad1 	bl	8014722 <lv_btn_set_state>
            ink_bg_state  = LV_BTN_STATE_REL;
 8007180:	4b87      	ldr	r3, [pc, #540]	; (80073a0 <lv_btn_signal+0x25c>)
 8007182:	701f      	strb	r7, [r3, #0]
            ink_top_state = LV_BTN_STATE_PR;
 8007184:	4b87      	ldr	r3, [pc, #540]	; (80073a4 <lv_btn_signal+0x260>)
 8007186:	701d      	strb	r5, [r3, #0]
        if(ink_obj != NULL && ink_obj != btn) {
 8007188:	4f87      	ldr	r7, [pc, #540]	; (80073a8 <lv_btn_signal+0x264>)
 800718a:	6838      	ldr	r0, [r7, #0]
 800718c:	b148      	cbz	r0, 80071a2 <lv_btn_signal+0x5e>
 800718e:	4284      	cmp	r4, r0
 8007190:	d007      	beq.n	80071a2 <lv_btn_signal+0x5e>
            lv_anim_del(ink_obj, (lv_anim_exec_xcb_t)lv_btn_ink_effect_anim);
 8007192:	4986      	ldr	r1, [pc, #536]	; (80073ac <lv_btn_signal+0x268>)
 8007194:	f7fc fd2e 	bl	8003bf4 <lv_anim_del>
            lv_obj_invalidate(ink_obj);
 8007198:	6838      	ldr	r0, [r7, #0]
 800719a:	f008 f829 	bl	800f1f0 <lv_obj_invalidate>
            ink_obj = NULL;
 800719e:	2300      	movs	r3, #0
 80071a0:	603b      	str	r3, [r7, #0]
        if(ext->ink_in_time > 0) {
 80071a2:	8b33      	ldrh	r3, [r6, #24]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d03c      	beq.n	8007222 <lv_btn_signal+0xde>
            ink_obj      = btn;
 80071a8:	603c      	str	r4, [r7, #0]
            ink_playback = false;
 80071aa:	2700      	movs	r7, #0
 80071ac:	4b80      	ldr	r3, [pc, #512]	; (80073b0 <lv_btn_signal+0x26c>)
 80071ae:	701f      	strb	r7, [r3, #0]
            ink_ready    = false;
 80071b0:	4b80      	ldr	r3, [pc, #512]	; (80073b4 <lv_btn_signal+0x270>)
 80071b2:	701f      	strb	r7, [r3, #0]
            lv_indev_get_point(lv_indev_get_act(), &ink_point);
 80071b4:	f7fb fb66 	bl	8002884 <lv_indev_get_act>
 80071b8:	497f      	ldr	r1, [pc, #508]	; (80073b8 <lv_btn_signal+0x274>)
 80071ba:	f007 ff2b 	bl	800f014 <lv_indev_get_point>
            a.end            = LV_BTN_INK_VALUE_MAX;
 80071be:	f44f 7380 	mov.w	r3, #256	; 0x100
            a.var            = btn;
 80071c2:	9400      	str	r4, [sp, #0]
            a.end            = LV_BTN_INK_VALUE_MAX;
 80071c4:	9305      	str	r3, [sp, #20]
            a.exec_cb        = (lv_anim_exec_xcb_t)lv_btn_ink_effect_anim;
 80071c6:	4b79      	ldr	r3, [pc, #484]	; (80073ac <lv_btn_signal+0x268>)
            a.start          = 0;
 80071c8:	9704      	str	r7, [sp, #16]
            a.exec_cb        = (lv_anim_exec_xcb_t)lv_btn_ink_effect_anim;
 80071ca:	9301      	str	r3, [sp, #4]
            a.path_cb        = lv_anim_path_linear;
 80071cc:	4b7b      	ldr	r3, [pc, #492]	; (80073bc <lv_btn_signal+0x278>)
 80071ce:	9302      	str	r3, [sp, #8]
            a.ready_cb       = lv_btn_ink_effect_anim_ready;
 80071d0:	4b7b      	ldr	r3, [pc, #492]	; (80073c0 <lv_btn_signal+0x27c>)
 80071d2:	9303      	str	r3, [sp, #12]
            a.time           = ext->ink_in_time;
 80071d4:	8b33      	ldrh	r3, [r6, #24]
            a.time           = ext->ink_out_time;
 80071d6:	f8ad 3018 	strh.w	r3, [sp, #24]
            lv_anim_create(&a);
 80071da:	4668      	mov	r0, sp
            a.playback       = 0;
 80071dc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
            a.act_time       = 0;
 80071e0:	f8ad 701a 	strh.w	r7, [sp, #26]
            a.playback       = 0;
 80071e4:	f023 0303 	bic.w	r3, r3, #3
            a.playback_pause = 0;
 80071e8:	9707      	str	r7, [sp, #28]
            a.playback       = 0;
 80071ea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            lv_anim_create(&a);
 80071ee:	f7fc fd2f 	bl	8003c50 <lv_anim_create>
 80071f2:	e016      	b.n	8007222 <lv_btn_signal+0xde>
        } else if(ext->state == LV_BTN_STATE_TGL_REL) {
 80071f4:	2f02      	cmp	r7, #2
 80071f6:	d1c7      	bne.n	8007188 <lv_btn_signal+0x44>
            lv_btn_set_state(btn, LV_BTN_STATE_TGL_PR);
 80071f8:	2103      	movs	r1, #3
 80071fa:	4620      	mov	r0, r4
 80071fc:	f00d fa91 	bl	8014722 <lv_btn_set_state>
            ink_bg_state  = LV_BTN_STATE_TGL_REL;
 8007200:	4b67      	ldr	r3, [pc, #412]	; (80073a0 <lv_btn_signal+0x25c>)
            ink_top_state = LV_BTN_STATE_TGL_PR;
 8007202:	2203      	movs	r2, #3
            ink_bg_state  = LV_BTN_STATE_TGL_REL;
 8007204:	701f      	strb	r7, [r3, #0]
            ink_top_state = LV_BTN_STATE_TGL_PR;
 8007206:	4b67      	ldr	r3, [pc, #412]	; (80073a4 <lv_btn_signal+0x260>)
 8007208:	701a      	strb	r2, [r3, #0]
 800720a:	e7bd      	b.n	8007188 <lv_btn_signal+0x44>
    } else if(sign == LV_SIGNAL_PRESS_LOST) {
 800720c:	2f09      	cmp	r7, #9
 800720e:	d110      	bne.n	8007232 <lv_btn_signal+0xee>
        if(ext->state == LV_BTN_STATE_PR)
 8007210:	7fb3      	ldrb	r3, [r6, #30]
 8007212:	f003 0307 	and.w	r3, r3, #7
 8007216:	2b01      	cmp	r3, #1
 8007218:	d107      	bne.n	800722a <lv_btn_signal+0xe6>
            lv_btn_set_state(btn, LV_BTN_STATE_REL);
 800721a:	2100      	movs	r1, #0
            lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 800721c:	4620      	mov	r0, r4
 800721e:	f00d fa80 	bl	8014722 <lv_btn_set_state>
}
 8007222:	4628      	mov	r0, r5
 8007224:	b00b      	add	sp, #44	; 0x2c
 8007226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(ext->state == LV_BTN_STATE_TGL_PR)
 800722a:	2b03      	cmp	r3, #3
 800722c:	d1f9      	bne.n	8007222 <lv_btn_signal+0xde>
            lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 800722e:	2102      	movs	r1, #2
 8007230:	e7f4      	b.n	800721c <lv_btn_signal+0xd8>
    } else if(sign == LV_SIGNAL_PRESSING) {
 8007232:	2f08      	cmp	r7, #8
 8007234:	d105      	bne.n	8007242 <lv_btn_signal+0xfe>
        if(lv_indev_is_dragging(param) != false) {
 8007236:	4640      	mov	r0, r8
 8007238:	f007 fefc 	bl	800f034 <lv_indev_is_dragging>
 800723c:	2800      	cmp	r0, #0
 800723e:	d0f0      	beq.n	8007222 <lv_btn_signal+0xde>
 8007240:	e7e6      	b.n	8007210 <lv_btn_signal+0xcc>
    } else if(sign == LV_SIGNAL_RELEASED) {
 8007242:	2f0a      	cmp	r7, #10
 8007244:	d162      	bne.n	800730c <lv_btn_signal+0x1c8>
        if(lv_indev_is_dragging(param) == false) {
 8007246:	4640      	mov	r0, r8
 8007248:	f007 fef4 	bl	800f034 <lv_indev_is_dragging>
 800724c:	7fb3      	ldrb	r3, [r6, #30]
 800724e:	4607      	mov	r7, r0
 8007250:	bb98      	cbnz	r0, 80072ba <lv_btn_signal+0x176>
            if(ext->state == LV_BTN_STATE_PR && tgl == false) {
 8007252:	f003 0307 	and.w	r3, r3, #7
            uint32_t toggled = 0;
 8007256:	9000      	str	r0, [sp, #0]
            if(ext->state == LV_BTN_STATE_PR && tgl == false) {
 8007258:	2b01      	cmp	r3, #1
 800725a:	d107      	bne.n	800726c <lv_btn_signal+0x128>
 800725c:	f1b9 0f00 	cmp.w	r9, #0
 8007260:	d10b      	bne.n	800727a <lv_btn_signal+0x136>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8007262:	2100      	movs	r1, #0
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8007264:	4620      	mov	r0, r4
 8007266:	f00d fa5c 	bl	8014722 <lv_btn_set_state>
 800726a:	e01d      	b.n	80072a8 <lv_btn_signal+0x164>
            } else if(ext->state == LV_BTN_STATE_TGL_PR && tgl == false) {
 800726c:	2b03      	cmp	r3, #3
 800726e:	d118      	bne.n	80072a2 <lv_btn_signal+0x15e>
 8007270:	f1b9 0f00 	cmp.w	r9, #0
 8007274:	d10f      	bne.n	8007296 <lv_btn_signal+0x152>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8007276:	2102      	movs	r1, #2
 8007278:	e7f4      	b.n	8007264 <lv_btn_signal+0x120>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 800727a:	2102      	movs	r1, #2
 800727c:	4620      	mov	r0, r4
 800727e:	f00d fa50 	bl	8014722 <lv_btn_set_state>
                toggled = 1;
 8007282:	9500      	str	r5, [sp, #0]
                res = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &toggled);
 8007284:	466a      	mov	r2, sp
 8007286:	210e      	movs	r1, #14
 8007288:	4620      	mov	r0, r4
 800728a:	f007 ff49 	bl	800f120 <lv_event_send>
                if(res != LV_RES_OK) return res;
 800728e:	2801      	cmp	r0, #1
 8007290:	d00a      	beq.n	80072a8 <lv_btn_signal+0x164>
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
 8007292:	4605      	mov	r5, r0
                if(res != LV_RES_OK) return res;
 8007294:	e7c5      	b.n	8007222 <lv_btn_signal+0xde>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8007296:	4601      	mov	r1, r0
 8007298:	4620      	mov	r0, r4
 800729a:	f00d fa42 	bl	8014722 <lv_btn_set_state>
                toggled = 0;
 800729e:	9700      	str	r7, [sp, #0]
 80072a0:	e7f0      	b.n	8007284 <lv_btn_signal+0x140>
            if(tgl) {
 80072a2:	f1b9 0f00 	cmp.w	r9, #0
 80072a6:	d1ed      	bne.n	8007284 <lv_btn_signal+0x140>
        if(ext->toggle) {
 80072a8:	7fb3      	ldrb	r3, [r6, #30]
 80072aa:	f013 0708 	ands.w	r7, r3, #8
 80072ae:	d00b      	beq.n	80072c8 <lv_btn_signal+0x184>
            ink_top_state = ext->state;
 80072b0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80072b4:	4a3b      	ldr	r2, [pc, #236]	; (80073a4 <lv_btn_signal+0x260>)
 80072b6:	7013      	strb	r3, [r2, #0]
 80072b8:	e7b3      	b.n	8007222 <lv_btn_signal+0xde>
            if(ext->state == LV_BTN_STATE_PR) {
 80072ba:	f003 0307 	and.w	r3, r3, #7
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d0cf      	beq.n	8007262 <lv_btn_signal+0x11e>
            } else if(ext->state == LV_BTN_STATE_TGL_PR) {
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d1f0      	bne.n	80072a8 <lv_btn_signal+0x164>
 80072c6:	e7d6      	b.n	8007276 <lv_btn_signal+0x132>
        else if(ink_ready && ext->ink_out_time > 0) {
 80072c8:	4b3a      	ldr	r3, [pc, #232]	; (80073b4 <lv_btn_signal+0x270>)
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d0a8      	beq.n	8007222 <lv_btn_signal+0xde>
 80072d0:	8bb3      	ldrh	r3, [r6, #28]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d0a5      	beq.n	8007222 <lv_btn_signal+0xde>
            ink_playback = true; /*It is the playback. If not set `lv_btn_ink_effect_anim_ready`
 80072d6:	4b36      	ldr	r3, [pc, #216]	; (80073b0 <lv_btn_signal+0x26c>)
 80072d8:	2201      	movs	r2, #1
            ink_obj      = btn;
 80072da:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80073a8 <lv_btn_signal+0x264>
            ink_playback = true; /*It is the playback. If not set `lv_btn_ink_effect_anim_ready`
 80072de:	701a      	strb	r2, [r3, #0]
            ink_obj      = btn;
 80072e0:	f8c8 4000 	str.w	r4, [r8]
            lv_indev_get_point(lv_indev_get_act(), &ink_point);
 80072e4:	f7fb face 	bl	8002884 <lv_indev_get_act>
 80072e8:	4933      	ldr	r1, [pc, #204]	; (80073b8 <lv_btn_signal+0x274>)
 80072ea:	f007 fe93 	bl	800f014 <lv_indev_get_point>
            a.var            = ink_obj;
 80072ee:	f8d8 3000 	ldr.w	r3, [r8]
 80072f2:	9300      	str	r3, [sp, #0]
            a.start          = LV_BTN_INK_VALUE_MAX;
 80072f4:	f44f 7380 	mov.w	r3, #256	; 0x100
            a.end            = 0;
 80072f8:	e9cd 3704 	strd	r3, r7, [sp, #16]
            a.exec_cb        = (lv_anim_exec_xcb_t)lv_btn_ink_effect_anim;
 80072fc:	4b2b      	ldr	r3, [pc, #172]	; (80073ac <lv_btn_signal+0x268>)
 80072fe:	9301      	str	r3, [sp, #4]
            a.path_cb        = lv_anim_path_linear;
 8007300:	4b2e      	ldr	r3, [pc, #184]	; (80073bc <lv_btn_signal+0x278>)
 8007302:	9302      	str	r3, [sp, #8]
            a.ready_cb       = lv_btn_ink_effect_anim_ready;
 8007304:	4b2e      	ldr	r3, [pc, #184]	; (80073c0 <lv_btn_signal+0x27c>)
 8007306:	9303      	str	r3, [sp, #12]
            a.time           = ext->ink_out_time;
 8007308:	8bb3      	ldrh	r3, [r6, #28]
 800730a:	e764      	b.n	80071d6 <lv_btn_signal+0x92>
    } else if(sign == LV_SIGNAL_CONTROL) {
 800730c:	2f11      	cmp	r7, #17
 800730e:	d128      	bne.n	8007362 <lv_btn_signal+0x21e>
        char c = *((char *)param);
 8007310:	f898 3000 	ldrb.w	r3, [r8]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8007314:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8007318:	2a11      	cmp	r2, #17
 800731a:	d110      	bne.n	800733e <lv_btn_signal+0x1fa>
            if(lv_btn_get_toggle(btn)) {
 800731c:	4620      	mov	r0, r4
 800731e:	f00d fa3e 	bl	801479e <lv_btn_get_toggle>
 8007322:	2800      	cmp	r0, #0
 8007324:	f43f af7d 	beq.w	8007222 <lv_btn_signal+0xde>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 8007328:	2102      	movs	r1, #2
 800732a:	4620      	mov	r0, r4
 800732c:	f00d f9f9 	bl	8014722 <lv_btn_set_state>
                uint32_t state = 1;
 8007330:	9500      	str	r5, [sp, #0]
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
 8007332:	466a      	mov	r2, sp
 8007334:	210e      	movs	r1, #14
 8007336:	4620      	mov	r0, r4
 8007338:	f007 fef2 	bl	800f120 <lv_event_send>
 800733c:	e7a9      	b.n	8007292 <lv_btn_signal+0x14e>
        } else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 800733e:	2b14      	cmp	r3, #20
 8007340:	d002      	beq.n	8007348 <lv_btn_signal+0x204>
 8007342:	2b12      	cmp	r3, #18
 8007344:	f47f af6d 	bne.w	8007222 <lv_btn_signal+0xde>
            if(lv_btn_get_toggle(btn)) {
 8007348:	4620      	mov	r0, r4
 800734a:	f00d fa28 	bl	801479e <lv_btn_get_toggle>
 800734e:	2800      	cmp	r0, #0
 8007350:	f43f af67 	beq.w	8007222 <lv_btn_signal+0xde>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 8007354:	2100      	movs	r1, #0
 8007356:	4620      	mov	r0, r4
 8007358:	f00d f9e3 	bl	8014722 <lv_btn_set_state>
                uint32_t state = 0;
 800735c:	2300      	movs	r3, #0
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	e7e7      	b.n	8007332 <lv_btn_signal+0x1ee>
    } else if(sign == LV_SIGNAL_CLEANUP) {
 8007362:	b957      	cbnz	r7, 800737a <lv_btn_signal+0x236>
        if(btn == ink_obj) {
 8007364:	4e10      	ldr	r6, [pc, #64]	; (80073a8 <lv_btn_signal+0x264>)
 8007366:	6833      	ldr	r3, [r6, #0]
 8007368:	429c      	cmp	r4, r3
 800736a:	f47f af5a 	bne.w	8007222 <lv_btn_signal+0xde>
            lv_anim_del(ink_obj, (lv_anim_exec_xcb_t)lv_btn_ink_effect_anim);
 800736e:	490f      	ldr	r1, [pc, #60]	; (80073ac <lv_btn_signal+0x268>)
 8007370:	4620      	mov	r0, r4
 8007372:	f7fc fc3f 	bl	8003bf4 <lv_anim_del>
            ink_obj = NULL;
 8007376:	6037      	str	r7, [r6, #0]
 8007378:	e753      	b.n	8007222 <lv_btn_signal+0xde>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800737a:	2f06      	cmp	r7, #6
 800737c:	f47f af51 	bne.w	8007222 <lv_btn_signal+0xde>
 8007380:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8007382:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
 8007386:	b2da      	uxtb	r2, r3
 8007388:	b119      	cbz	r1, 8007392 <lv_btn_signal+0x24e>
 800738a:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 800738c:	2b07      	cmp	r3, #7
 800738e:	d1f8      	bne.n	8007382 <lv_btn_signal+0x23e>
 8007390:	461a      	mov	r2, r3
        buf->type[i] = "lv_btn";
 8007392:	4b0c      	ldr	r3, [pc, #48]	; (80073c4 <lv_btn_signal+0x280>)
 8007394:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
 8007398:	e743      	b.n	8007222 <lv_btn_signal+0xde>
 800739a:	bf00      	nop
 800739c:	20028958 	.word	0x20028958
 80073a0:	2002cce2 	.word	0x2002cce2
 80073a4:	2002cce5 	.word	0x2002cce5
 80073a8:	2002895c 	.word	0x2002895c
 80073ac:	08006d89 	.word	0x08006d89
 80073b0:	2002cce3 	.word	0x2002cce3
 80073b4:	2002cce4 	.word	0x2002cce4
 80073b8:	2002ccd4 	.word	0x2002ccd4
 80073bc:	0801057d 	.word	0x0801057d
 80073c0:	080070b1 	.word	0x080070b1
 80073c4:	0801c3ce 	.word	0x0801c3ce

080073c8 <lv_img_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_img_design(lv_obj_t * img, const lv_area_t * mask, lv_design_mode_t mode)
{
 80073c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073cc:	4681      	mov	r9, r0
 80073ce:	4690      	mov	r8, r2
 80073d0:	b099      	sub	sp, #100	; 0x64
 80073d2:	460d      	mov	r5, r1
    const lv_style_t * style = lv_obj_get_style(img);
 80073d4:	f7fb fcb4 	bl	8002d40 <lv_obj_get_style>
 80073d8:	4606      	mov	r6, r0
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
 80073da:	4648      	mov	r0, r9
 80073dc:	f008 fb70 	bl	800fac0 <lv_obj_get_ext_attr>

    if(mode == LV_DESIGN_COVER_CHK) {
 80073e0:	f1b8 0f02 	cmp.w	r8, #2
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
 80073e4:	4604      	mov	r4, r0
    if(mode == LV_DESIGN_COVER_CHK) {
 80073e6:	d112      	bne.n	800740e <lv_img_design+0x46>
        bool cover = false;
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return false;
 80073e8:	7b03      	ldrb	r3, [r0, #12]
 80073ea:	f013 0002 	ands.w	r0, r3, #2
 80073ee:	f040 8094 	bne.w	800751a <lv_img_design+0x152>

        if(ext->cf == LV_IMG_CF_TRUE_COLOR || ext->cf == LV_IMG_CF_RAW) cover = lv_area_is_in(mask, &img->coords);
 80073f2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80073f6:	2b20      	cmp	r3, #32
 80073f8:	d001      	beq.n	80073fe <lv_img_design+0x36>
 80073fa:	2b08      	cmp	r3, #8
 80073fc:	d104      	bne.n	8007408 <lv_img_design+0x40>
 80073fe:	f109 0110 	add.w	r1, r9, #16
 8007402:	4628      	mov	r0, r5
 8007404:	f009 f99d 	bl	8010742 <lv_area_is_in>
            lv_draw_img(&img->coords, mask, NULL, style, opa_scale);
        }
    }

    return true;
}
 8007408:	b019      	add	sp, #100	; 0x64
 800740a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 800740e:	f1b8 0f00 	cmp.w	r8, #0
 8007412:	d105      	bne.n	8007420 <lv_img_design+0x58>
        if(ext->h == 0 || ext->w == 0) return true;
 8007414:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8007418:	b113      	cbz	r3, 8007420 <lv_img_design+0x58>
 800741a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800741e:	b90b      	cbnz	r3, 8007424 <lv_img_design+0x5c>
    return true;
 8007420:	2001      	movs	r0, #1
 8007422:	e7f1      	b.n	8007408 <lv_img_design+0x40>
        lv_opa_t opa_scale = lv_obj_get_opa_scale(img);
 8007424:	4648      	mov	r0, r9
 8007426:	f008 fae2 	bl	800f9ee <lv_obj_get_opa_scale>
        lv_obj_get_coords(img, &coords);
 800742a:	a907      	add	r1, sp, #28
        lv_opa_t opa_scale = lv_obj_get_opa_scale(img);
 800742c:	4607      	mov	r7, r0
        lv_obj_get_coords(img, &coords);
 800742e:	4648      	mov	r0, r9
 8007430:	f008 fa98 	bl	800f964 <lv_obj_get_coords>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_VARIABLE) {
 8007434:	7b23      	ldrb	r3, [r4, #12]
 8007436:	079a      	lsls	r2, r3, #30
 8007438:	d443      	bmi.n	80074c2 <lv_img_design+0xfa>
            coords.x1 -= ext->offset.x;
 800743a:	88a2      	ldrh	r2, [r4, #4]
 800743c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8007440:	1a9b      	subs	r3, r3, r2
            coords.y1 -= ext->offset.y;
 8007442:	88e2      	ldrh	r2, [r4, #6]
            coords.x1 -= ext->offset.x;
 8007444:	f8ad 301c 	strh.w	r3, [sp, #28]
            coords.y1 -= ext->offset.y;
 8007448:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800744c:	1a9b      	subs	r3, r3, r2
            cords_tmp.y2 = coords.y1 + ext->h - 1;
 800744e:	8962      	ldrh	r2, [r4, #10]
            coords.y1 -= ext->offset.y;
 8007450:	b21b      	sxth	r3, r3
            cords_tmp.y2 = coords.y1 + ext->h - 1;
 8007452:	3a01      	subs	r2, #1
            coords.y1 -= ext->offset.y;
 8007454:	f8ad 301e 	strh.w	r3, [sp, #30]
            cords_tmp.y1 = coords.y1;
 8007458:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 800745c:	4413      	add	r3, r2
 800745e:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 8007462:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8007466:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 800746a:	429a      	cmp	r2, r3
 800746c:	dad8      	bge.n	8007420 <lv_img_design+0x58>
                cords_tmp.x1 = coords.x1;
 800746e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
                cords_tmp.x2 = coords.x1 + ext->w - 1;
 8007472:	8922      	ldrh	r2, [r4, #8]
                cords_tmp.x1 = coords.x1;
 8007474:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
                cords_tmp.x2 = coords.x1 + ext->w - 1;
 8007478:	3b01      	subs	r3, #1
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 800747a:	4413      	add	r3, r2
 800747c:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 8007480:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8007484:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8007488:	429a      	cmp	r2, r3
 800748a:	db09      	blt.n	80074a0 <lv_img_design+0xd8>
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 800748c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8007490:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8007494:	441a      	add	r2, r3
 8007496:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800749a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 800749e:	e7dd      	b.n	800745c <lv_img_design+0x94>
                    lv_draw_img(&cords_tmp, mask, ext->src, style, opa_scale);
 80074a0:	9700      	str	r7, [sp, #0]
 80074a2:	4633      	mov	r3, r6
 80074a4:	6822      	ldr	r2, [r4, #0]
 80074a6:	4629      	mov	r1, r5
 80074a8:	a809      	add	r0, sp, #36	; 0x24
 80074aa:	f7fc fdcd 	bl	8004048 <lv_draw_img>
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 80074ae:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80074b2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80074b6:	441a      	add	r2, r3
 80074b8:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 80074bc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80074c0:	e7db      	b.n	800747a <lv_img_design+0xb2>
        } else if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 80074c2:	f003 0303 	and.w	r3, r3, #3
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d117      	bne.n	80074fa <lv_img_design+0x132>
            lv_style_copy(&style_mod, style);
 80074ca:	4631      	mov	r1, r6
 80074cc:	a809      	add	r0, sp, #36	; 0x24
 80074ce:	f008 fbfc 	bl	800fcca <lv_style_copy>
            style_mod.text.color = style->image.color;
 80074d2:	8e33      	ldrh	r3, [r6, #48]	; 0x30
            lv_draw_label(&coords, mask, &style_mod, opa_scale, ext->src, LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 80074d4:	f8cd 8014 	str.w	r8, [sp, #20]
 80074d8:	aa09      	add	r2, sp, #36	; 0x24
            style_mod.text.color = style->image.color;
 80074da:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            lv_draw_label(&coords, mask, &style_mod, opa_scale, ext->src, LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 80074de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80074e2:	4629      	mov	r1, r5
 80074e4:	a807      	add	r0, sp, #28
 80074e6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80074ea:	e9cd 8801 	strd	r8, r8, [sp, #4]
 80074ee:	6823      	ldr	r3, [r4, #0]
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	463b      	mov	r3, r7
 80074f4:	f7fd f96a 	bl	80047cc <lv_draw_label>
 80074f8:	e792      	b.n	8007420 <lv_img_design+0x58>
            LV_LOG_WARN("lv_img_design: image source type is unknown");
 80074fa:	4b09      	ldr	r3, [pc, #36]	; (8007520 <lv_img_design+0x158>)
 80074fc:	f240 126d 	movw	r2, #365	; 0x16d
 8007500:	4908      	ldr	r1, [pc, #32]	; (8007524 <lv_img_design+0x15c>)
 8007502:	2002      	movs	r0, #2
 8007504:	f7fc f886 	bl	8003614 <lv_log_add>
            lv_draw_img(&img->coords, mask, NULL, style, opa_scale);
 8007508:	9700      	str	r7, [sp, #0]
 800750a:	4633      	mov	r3, r6
 800750c:	4642      	mov	r2, r8
 800750e:	4629      	mov	r1, r5
 8007510:	f109 0010 	add.w	r0, r9, #16
 8007514:	f7fc fd98 	bl	8004048 <lv_draw_img>
 8007518:	e782      	b.n	8007420 <lv_img_design+0x58>
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return false;
 800751a:	2000      	movs	r0, #0
 800751c:	e774      	b.n	8007408 <lv_img_design+0x40>
 800751e:	bf00      	nop
 8007520:	0801c3d5 	.word	0x0801c3d5
 8007524:	0801c401 	.word	0x0801c401

08007528 <lv_img_set_src>:
{
 8007528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800752c:	4607      	mov	r7, r0
 800752e:	b086      	sub	sp, #24
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
 8007530:	4608      	mov	r0, r1
{
 8007532:	460d      	mov	r5, r1
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
 8007534:	f009 f9de 	bl	80108f4 <lv_img_src_get_type>
 8007538:	4606      	mov	r6, r0
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
 800753a:	4638      	mov	r0, r7
 800753c:	f008 fac0 	bl	800fac0 <lv_obj_get_ext_attr>
    switch(src_type) {
 8007540:	2e02      	cmp	r6, #2
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
 8007542:	4604      	mov	r4, r0
    switch(src_type) {
 8007544:	d91f      	bls.n	8007586 <lv_img_set_src+0x5e>
        default: LV_LOG_WARN("lv_img_set_src: unknown type");
 8007546:	4b4b      	ldr	r3, [pc, #300]	; (8007674 <lv_img_set_src+0x14c>)
 8007548:	2284      	movs	r2, #132	; 0x84
 800754a:	494b      	ldr	r1, [pc, #300]	; (8007678 <lv_img_set_src+0x150>)
 800754c:	2002      	movs	r0, #2
 800754e:	f7fc f861 	bl	8003614 <lv_log_add>
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 8007552:	2e03      	cmp	r6, #3
 8007554:	d117      	bne.n	8007586 <lv_img_set_src+0x5e>
        LV_LOG_WARN("lv_img_set_src: unknown image type");
 8007556:	4b49      	ldr	r3, [pc, #292]	; (800767c <lv_img_set_src+0x154>)
 8007558:	228a      	movs	r2, #138	; 0x8a
 800755a:	4947      	ldr	r1, [pc, #284]	; (8007678 <lv_img_set_src+0x150>)
 800755c:	2002      	movs	r0, #2
 800755e:	f7fc f859 	bl	8003614 <lv_log_add>
        if(ext->src_type == LV_IMG_SRC_SYMBOL || ext->src_type == LV_IMG_SRC_FILE) {
 8007562:	7b23      	ldrb	r3, [r4, #12]
 8007564:	f003 0303 	and.w	r3, r3, #3
 8007568:	3b01      	subs	r3, #1
 800756a:	2b01      	cmp	r3, #1
 800756c:	d802      	bhi.n	8007574 <lv_img_set_src+0x4c>
            lv_mem_free(ext->src);
 800756e:	6820      	ldr	r0, [r4, #0]
 8007570:	f7fc f8c0 	bl	80036f4 <lv_mem_free>
        ext->src      = NULL;
 8007574:	2300      	movs	r3, #0
 8007576:	6023      	str	r3, [r4, #0]
        ext->src_type = LV_IMG_SRC_UNKNOWN;
 8007578:	7b23      	ldrb	r3, [r4, #12]
 800757a:	f043 0303 	orr.w	r3, r3, #3
 800757e:	7323      	strb	r3, [r4, #12]
}
 8007580:	b006      	add	sp, #24
 8007582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_img_decoder_get_info(src_img, &header);
 8007586:	a904      	add	r1, sp, #16
 8007588:	4628      	mov	r0, r5
 800758a:	f7fd fdd7 	bl	800513c <lv_img_decoder_get_info>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800758e:	bb5e      	cbnz	r6, 80075e8 <lv_img_set_src+0xc0>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 8007590:	7b23      	ldrb	r3, [r4, #12]
 8007592:	f003 0303 	and.w	r3, r3, #3
 8007596:	3b01      	subs	r3, #1
 8007598:	2b01      	cmp	r3, #1
 800759a:	d802      	bhi.n	80075a2 <lv_img_set_src+0x7a>
            lv_mem_free(ext->src);
 800759c:	6820      	ldr	r0, [r4, #0]
 800759e:	f7fc f8a9 	bl	80036f4 <lv_mem_free>
        ext->src = src_img;
 80075a2:	6025      	str	r5, [r4, #0]
    ext->w        = header.w;
 80075a4:	9a04      	ldr	r2, [sp, #16]
    if(lv_img_get_auto_size(img) != false) {
 80075a6:	4638      	mov	r0, r7
    ext->src_type = src_type;
 80075a8:	7b23      	ldrb	r3, [r4, #12]
    ext->w        = header.w;
 80075aa:	f3c2 228a 	ubfx	r2, r2, #10, #11
    ext->src_type = src_type;
 80075ae:	f366 0301 	bfi	r3, r6, #0, #2
    ext->w        = header.w;
 80075b2:	8122      	strh	r2, [r4, #8]
    ext->h        = header.h;
 80075b4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80075b8:	f3c2 124a 	ubfx	r2, r2, #5, #11
 80075bc:	8162      	strh	r2, [r4, #10]
    ext->cf       = header.cf;
 80075be:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80075c2:	f3c2 0204 	ubfx	r2, r2, #0, #5
 80075c6:	f362 03c7 	bfi	r3, r2, #3, #5
 80075ca:	7323      	strb	r3, [r4, #12]
    if(lv_img_get_auto_size(img) != false) {
 80075cc:	f00d f8f3 	bl	80147b6 <lv_img_get_auto_size>
 80075d0:	b130      	cbz	r0, 80075e0 <lv_img_set_src+0xb8>
        lv_obj_set_size(img, ext->w, ext->h);
 80075d2:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80075d6:	4638      	mov	r0, r7
 80075d8:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80075dc:	f008 f896 	bl	800f70c <lv_obj_set_size>
    lv_obj_invalidate(img);
 80075e0:	4638      	mov	r0, r7
 80075e2:	f007 fe05 	bl	800f1f0 <lv_obj_invalidate>
 80075e6:	e7cb      	b.n	8007580 <lv_img_set_src+0x58>
    } else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
 80075e8:	1e73      	subs	r3, r6, #1
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d81e      	bhi.n	800762e <lv_img_set_src+0x106>
        if(ext->src != src_img) {
 80075f0:	6820      	ldr	r0, [r4, #0]
 80075f2:	42a8      	cmp	r0, r5
 80075f4:	d01b      	beq.n	800762e <lv_img_set_src+0x106>
            if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 80075f6:	7b23      	ldrb	r3, [r4, #12]
 80075f8:	f003 0303 	and.w	r3, r3, #3
 80075fc:	3b01      	subs	r3, #1
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d801      	bhi.n	8007606 <lv_img_set_src+0xde>
                lv_mem_free(ext->src);
 8007602:	f7fc f877 	bl	80036f4 <lv_mem_free>
            char * new_str = lv_mem_alloc(strlen(src_img) + 1);
 8007606:	4628      	mov	r0, r5
 8007608:	f00f f89f 	bl	801674a <strlen>
 800760c:	3001      	adds	r0, #1
 800760e:	f7fc f82f 	bl	8003670 <lv_mem_alloc>
            lv_mem_assert(new_str);
 8007612:	4680      	mov	r8, r0
 8007614:	b930      	cbnz	r0, 8007624 <lv_img_set_src+0xfc>
 8007616:	4b1a      	ldr	r3, [pc, #104]	; (8007680 <lv_img_set_src+0x158>)
 8007618:	22a7      	movs	r2, #167	; 0xa7
 800761a:	4917      	ldr	r1, [pc, #92]	; (8007678 <lv_img_set_src+0x150>)
 800761c:	2003      	movs	r0, #3
 800761e:	f7fb fff9 	bl	8003614 <lv_log_add>
 8007622:	e7fe      	b.n	8007622 <lv_img_set_src+0xfa>
            strcpy(new_str, src_img);
 8007624:	4629      	mov	r1, r5
 8007626:	f00f f886 	bl	8016736 <strcpy>
            ext->src = new_str;
 800762a:	f8c4 8000 	str.w	r8, [r4]
    if(src_type == LV_IMG_SRC_SYMBOL) {
 800762e:	2e02      	cmp	r6, #2
 8007630:	d1b8      	bne.n	80075a4 <lv_img_set_src+0x7c>
 * @return pointer to the image's style
 */
static inline const lv_style_t * lv_img_get_style(const lv_obj_t * img, lv_img_style_t type)
{
    (void)type; /*Unused*/
    return lv_obj_get_style(img);
 8007632:	4638      	mov	r0, r7
 8007634:	f7fb fb84 	bl	8002d40 <lv_obj_get_style>
        lv_txt_get_size(&size, src_img, style->text.font, style->text.letter_space, style->text.line_space,
 8007638:	f647 4218 	movw	r2, #31768	; 0x7c18
 800763c:	2100      	movs	r1, #0
 800763e:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	; 0x28
 8007642:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8007646:	f9b0 202a 	ldrsh.w	r2, [r0, #42]	; 0x2a
 800764a:	4629      	mov	r1, r5
 800764c:	9200      	str	r2, [sp, #0]
 800764e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007650:	a805      	add	r0, sp, #20
 8007652:	f008 ff3e 	bl	80104d2 <lv_txt_get_size>
        header.w = size.x;
 8007656:	9b04      	ldr	r3, [sp, #16]
 8007658:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800765c:	f362 2394 	bfi	r3, r2, #10, #11
        header.h = size.y;
 8007660:	f8bd 2016 	ldrh.w	r2, [sp, #22]
        header.w = size.x;
 8007664:	9304      	str	r3, [sp, #16]
        header.h = size.y;
 8007666:	f3c3 430f 	ubfx	r3, r3, #16, #16
 800766a:	f362 134f 	bfi	r3, r2, #5, #11
 800766e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8007672:	e797      	b.n	80075a4 <lv_img_set_src+0x7c>
 8007674:	0801c461 	.word	0x0801c461
 8007678:	0801c401 	.word	0x0801c401
 800767c:	0801c47e 	.word	0x0801c47e
 8007680:	080176f4 	.word	0x080176f4

08007684 <lv_img_create>:
{
 8007684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007688:	4607      	mov	r7, r0
 800768a:	460e      	mov	r6, r1
    new_img = lv_obj_create(par, copy);
 800768c:	f7fb f9c6 	bl	8002a1c <lv_obj_create>
    lv_mem_assert(new_img);
 8007690:	4605      	mov	r5, r0
 8007692:	b930      	cbnz	r0, 80076a2 <lv_img_create+0x1e>
 8007694:	4b30      	ldr	r3, [pc, #192]	; (8007758 <lv_img_create+0xd4>)
 8007696:	2240      	movs	r2, #64	; 0x40
 8007698:	4930      	ldr	r1, [pc, #192]	; (800775c <lv_img_create+0xd8>)
 800769a:	2003      	movs	r0, #3
 800769c:	f7fb ffba 	bl	8003614 <lv_log_add>
 80076a0:	e7fe      	b.n	80076a0 <lv_img_create+0x1c>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_img);
 80076a2:	4c2f      	ldr	r4, [pc, #188]	; (8007760 <lv_img_create+0xdc>)
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	b913      	cbnz	r3, 80076ae <lv_img_create+0x2a>
 80076a8:	f008 fa06 	bl	800fab8 <lv_obj_get_signal_cb>
 80076ac:	6020      	str	r0, [r4, #0]
    lv_img_ext_t * ext = lv_obj_allocate_ext_attr(new_img, sizeof(lv_img_ext_t));
 80076ae:	2110      	movs	r1, #16
 80076b0:	4628      	mov	r0, r5
 80076b2:	f007 fd96 	bl	800f1e2 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 80076b6:	4604      	mov	r4, r0
 80076b8:	b930      	cbnz	r0, 80076c8 <lv_img_create+0x44>
 80076ba:	4b27      	ldr	r3, [pc, #156]	; (8007758 <lv_img_create+0xd4>)
 80076bc:	2247      	movs	r2, #71	; 0x47
 80076be:	4927      	ldr	r1, [pc, #156]	; (800775c <lv_img_create+0xd8>)
 80076c0:	2003      	movs	r0, #3
 80076c2:	f7fb ffa7 	bl	8003614 <lv_log_add>
 80076c6:	e7fe      	b.n	80076c6 <lv_img_create+0x42>
    ext->src_type  = LV_IMG_SRC_UNKNOWN;
 80076c8:	7b03      	ldrb	r3, [r0, #12]
    ext->src       = NULL;
 80076ca:	f04f 0800 	mov.w	r8, #0
    ext->src_type  = LV_IMG_SRC_UNKNOWN;
 80076ce:	f003 0304 	and.w	r3, r3, #4
    ext->src       = NULL;
 80076d2:	f8c0 8000 	str.w	r8, [r0]
    ext->src_type  = LV_IMG_SRC_UNKNOWN;
 80076d6:	f043 0303 	orr.w	r3, r3, #3
 80076da:	7303      	strb	r3, [r0, #12]
    ext->w         = lv_obj_get_width(new_img);
 80076dc:	4628      	mov	r0, r5
 80076de:	f008 f954 	bl	800f98a <lv_obj_get_width>
 80076e2:	8120      	strh	r0, [r4, #8]
    ext->h         = lv_obj_get_height(new_img);
 80076e4:	4628      	mov	r0, r5
 80076e6:	f008 f956 	bl	800f996 <lv_obj_get_height>
    ext->auto_size = 1;
 80076ea:	7b23      	ldrb	r3, [r4, #12]
    ext->h         = lv_obj_get_height(new_img);
 80076ec:	8160      	strh	r0, [r4, #10]
    lv_obj_set_signal_cb(new_img, lv_img_signal);
 80076ee:	4628      	mov	r0, r5
    ext->auto_size = 1;
 80076f0:	f043 0304 	orr.w	r3, r3, #4
    lv_obj_set_signal_cb(new_img, lv_img_signal);
 80076f4:	491b      	ldr	r1, [pc, #108]	; (8007764 <lv_img_create+0xe0>)
    ext->offset.x  = 0;
 80076f6:	f8c4 8004 	str.w	r8, [r4, #4]
    ext->auto_size = 1;
 80076fa:	7323      	strb	r3, [r4, #12]
    lv_obj_set_signal_cb(new_img, lv_img_signal);
 80076fc:	f007 fd6d 	bl	800f1da <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_img, lv_img_design);
 8007700:	4919      	ldr	r1, [pc, #100]	; (8007768 <lv_img_create+0xe4>)
 8007702:	4628      	mov	r0, r5
 8007704:	f007 fd6b 	bl	800f1de <lv_obj_set_design_cb>
    if(copy == NULL) {
 8007708:	b9a6      	cbnz	r6, 8007734 <lv_img_create+0xb0>
        lv_obj_set_click(new_img, false);
 800770a:	4631      	mov	r1, r6
 800770c:	4628      	mov	r0, r5
 800770e:	f007 fcce 	bl	800f0ae <lv_obj_set_click>
        if(par != NULL) {
 8007712:	7b23      	ldrb	r3, [r4, #12]
 8007714:	b14f      	cbz	r7, 800772a <lv_img_create+0xa6>
            ext->auto_size = 1;
 8007716:	f043 0304 	orr.w	r3, r3, #4
            lv_obj_set_style(new_img, NULL); /*Inherit the style  by default*/
 800771a:	4631      	mov	r1, r6
            ext->auto_size = 1;
 800771c:	7323      	strb	r3, [r4, #12]
            lv_obj_set_style(new_img, &lv_style_plain); /*Set a style for screens*/
 800771e:	4628      	mov	r0, r5
 8007720:	f008 f910 	bl	800f944 <lv_obj_set_style>
}
 8007724:	4628      	mov	r0, r5
 8007726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ext->auto_size = 0;
 800772a:	f367 0382 	bfi	r3, r7, #2, #1
            lv_obj_set_style(new_img, &lv_style_plain); /*Set a style for screens*/
 800772e:	490f      	ldr	r1, [pc, #60]	; (800776c <lv_img_create+0xe8>)
            ext->auto_size = 0;
 8007730:	7323      	strb	r3, [r4, #12]
            lv_obj_set_style(new_img, &lv_style_plain); /*Set a style for screens*/
 8007732:	e7f4      	b.n	800771e <lv_img_create+0x9a>
        lv_img_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8007734:	4630      	mov	r0, r6
 8007736:	f008 f9c3 	bl	800fac0 <lv_obj_get_ext_attr>
        ext->auto_size          = copy_ext->auto_size;
 800773a:	7b03      	ldrb	r3, [r0, #12]
 800773c:	7b22      	ldrb	r2, [r4, #12]
 800773e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007742:	f363 0282 	bfi	r2, r3, #2, #1
 8007746:	7322      	strb	r2, [r4, #12]
        lv_img_set_src(new_img, copy_ext->src);
 8007748:	6801      	ldr	r1, [r0, #0]
 800774a:	4628      	mov	r0, r5
 800774c:	f7ff feec 	bl	8007528 <lv_img_set_src>
        lv_obj_refresh_style(new_img);
 8007750:	4628      	mov	r0, r5
 8007752:	f008 f834 	bl	800f7be <lv_obj_refresh_style>
    return new_img;
 8007756:	e7e5      	b.n	8007724 <lv_img_create+0xa0>
 8007758:	080176f4 	.word	0x080176f4
 800775c:	0801c401 	.word	0x0801c401
 8007760:	20028960 	.word	0x20028960
 8007764:	08007771 	.word	0x08007771
 8007768:	080073c9 	.word	0x080073c9
 800776c:	20020524 	.word	0x20020524

08007770 <lv_img_signal>:
static lv_res_t lv_img_signal(lv_obj_t * img, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(img, sign, param);
 8007770:	4b1d      	ldr	r3, [pc, #116]	; (80077e8 <lv_img_signal+0x78>)
{
 8007772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(img, sign, param);
 8007776:	681b      	ldr	r3, [r3, #0]
{
 8007778:	4680      	mov	r8, r0
 800777a:	460d      	mov	r5, r1
 800777c:	4617      	mov	r7, r2
    res = ancestor_signal(img, sign, param);
 800777e:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8007780:	2801      	cmp	r0, #1
    res = ancestor_signal(img, sign, param);
 8007782:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
 8007784:	d112      	bne.n	80077ac <lv_img_signal+0x3c>

    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 8007786:	4640      	mov	r0, r8
 8007788:	f008 f99a 	bl	800fac0 <lv_obj_get_ext_attr>
 800778c:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 800778e:	b985      	cbnz	r5, 80077b2 <lv_img_signal+0x42>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 8007790:	7b03      	ldrb	r3, [r0, #12]
 8007792:	f003 0303 	and.w	r3, r3, #3
 8007796:	3b01      	subs	r3, #1
 8007798:	2b01      	cmp	r3, #1
 800779a:	d807      	bhi.n	80077ac <lv_img_signal+0x3c>
            lv_mem_free(ext->src);
 800779c:	6800      	ldr	r0, [r0, #0]
 800779e:	f7fb ffa9 	bl	80036f4 <lv_mem_free>
            ext->src      = NULL;
            ext->src_type = LV_IMG_SRC_UNKNOWN;
 80077a2:	7b23      	ldrb	r3, [r4, #12]
            ext->src      = NULL;
 80077a4:	6025      	str	r5, [r4, #0]
            ext->src_type = LV_IMG_SRC_UNKNOWN;
 80077a6:	f043 0303 	orr.w	r3, r3, #3
 80077aa:	7323      	strb	r3, [r4, #12]
        }
        buf->type[i] = "lv_img";
    }

    return res;
}
 80077ac:	4630      	mov	r0, r6
 80077ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 80077b2:	2d04      	cmp	r5, #4
 80077b4:	d109      	bne.n	80077ca <lv_img_signal+0x5a>
        if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 80077b6:	7b03      	ldrb	r3, [r0, #12]
 80077b8:	f003 0303 	and.w	r3, r3, #3
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d1f5      	bne.n	80077ac <lv_img_signal+0x3c>
            lv_img_set_src(img, ext->src);
 80077c0:	6801      	ldr	r1, [r0, #0]
 80077c2:	4640      	mov	r0, r8
 80077c4:	f7ff feb0 	bl	8007528 <lv_img_set_src>
 80077c8:	e7f0      	b.n	80077ac <lv_img_signal+0x3c>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 80077ca:	2d06      	cmp	r5, #6
 80077cc:	d1ee      	bne.n	80077ac <lv_img_signal+0x3c>
 80077ce:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 80077d0:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 80077d4:	b2da      	uxtb	r2, r3
 80077d6:	b119      	cbz	r1, 80077e0 <lv_img_signal+0x70>
 80077d8:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 80077da:	2b07      	cmp	r3, #7
 80077dc:	d1f8      	bne.n	80077d0 <lv_img_signal+0x60>
 80077de:	461a      	mov	r2, r3
        buf->type[i] = "lv_img";
 80077e0:	4b02      	ldr	r3, [pc, #8]	; (80077ec <lv_img_signal+0x7c>)
 80077e2:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
 80077e6:	e7e1      	b.n	80077ac <lv_img_signal+0x3c>
 80077e8:	20028960 	.word	0x20028960
 80077ec:	0801c4a1 	.word	0x0801c4a1

080077f0 <lv_btnm_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_btnm_design(lv_obj_t * btnm, const lv_area_t * mask, lv_design_mode_t mode)
{
 80077f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 80077f4:	2a02      	cmp	r2, #2
{
 80077f6:	b0a3      	sub	sp, #140	; 0x8c
 80077f8:	4606      	mov	r6, r0
 80077fa:	4614      	mov	r4, r2
 80077fc:	910a      	str	r1, [sp, #40]	; 0x28
    if(mode == LV_DESIGN_COVER_CHK) {
 80077fe:	d105      	bne.n	800780c <lv_btnm_design+0x1c>
        return ancestor_design_f(btnm, mask, mode);
 8007800:	4b97      	ldr	r3, [pc, #604]	; (8007a60 <lv_btnm_design+0x270>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4798      	blx	r3

            lv_draw_label(&area_tmp, mask, btn_style, opa_scale, ext->map_p[txt_i], txt_flag, NULL, -1, -1, NULL);
        }
    }
    return true;
}
 8007806:	b023      	add	sp, #140	; 0x8c
 8007808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 800780c:	bb02      	cbnz	r2, 8007850 <lv_btnm_design+0x60>
        ancestor_design_f(btnm, mask, mode);
 800780e:	4b94      	ldr	r3, [pc, #592]	; (8007a60 <lv_btnm_design+0x270>)
        lv_txt_flag_t txt_flag = LV_TXT_FLAG_NONE;
 8007810:	46a0      	mov	r8, r4
        uint16_t txt_i = 0;
 8007812:	4627      	mov	r7, r4
            while(strcmp(ext->map_p[txt_i], "\n") == 0) {
 8007814:	f8df a24c 	ldr.w	sl, [pc, #588]	; 8007a64 <lv_btnm_design+0x274>
        ancestor_design_f(btnm, mask, mode);
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4798      	blx	r3
        lv_btnm_ext_t * ext         = lv_obj_get_ext_attr(btnm);
 800781c:	4630      	mov	r0, r6
 800781e:	f008 f94f 	bl	800fac0 <lv_obj_get_ext_attr>
 8007822:	4605      	mov	r5, r0
        const lv_style_t * bg_style = lv_obj_get_style(btnm);
 8007824:	4630      	mov	r0, r6
 8007826:	f7fb fa8b 	bl	8002d40 <lv_obj_get_style>
 800782a:	4681      	mov	r9, r0
        lv_opa_t opa_scale = lv_obj_get_opa_scale(btnm);
 800782c:	4630      	mov	r0, r6
 800782e:	f008 f8de 	bl	800f9ee <lv_obj_get_opa_scale>
        lv_obj_get_coords(btnm, &area_btnm);
 8007832:	a90f      	add	r1, sp, #60	; 0x3c
        lv_opa_t opa_scale = lv_obj_get_opa_scale(btnm);
 8007834:	9007      	str	r0, [sp, #28]
        lv_obj_get_coords(btnm, &area_btnm);
 8007836:	4630      	mov	r0, r6
 8007838:	f008 f894 	bl	800f964 <lv_obj_get_coords>
        lv_txt_flag_t txt_flag = LV_TXT_FLAG_NONE;
 800783c:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	9308      	str	r3, [sp, #32]
        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i++, txt_i++) {
 8007846:	fa1f f488 	uxth.w	r4, r8
 800784a:	8c2b      	ldrh	r3, [r5, #32]
 800784c:	42a3      	cmp	r3, r4
 800784e:	d802      	bhi.n	8007856 <lv_btnm_design+0x66>
    return true;
 8007850:	2001      	movs	r0, #1
 8007852:	e7d8      	b.n	8007806 <lv_btnm_design+0x16>
            while(strcmp(ext->map_p[txt_i], "\n") == 0) {
 8007854:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007856:	682b      	ldr	r3, [r5, #0]
 8007858:	4651      	mov	r1, sl
 800785a:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 800785e:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8007862:	f00e ff79 	bl	8016758 <strcmp>
 8007866:	1c7b      	adds	r3, r7, #1
 8007868:	b29b      	uxth	r3, r3
 800786a:	9309      	str	r3, [sp, #36]	; 0x24
 800786c:	2800      	cmp	r0, #0
 800786e:	d0f1      	beq.n	8007854 <lv_btnm_design+0x64>
            if(button_is_hidden(ext->ctrl_bits[btn_i])) continue;
 8007870:	fa1f f388 	uxth.w	r3, r8
 8007874:	68aa      	ldr	r2, [r5, #8]
 8007876:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800787a:	0710      	lsls	r0, r2, #28
 800787c:	f100 80e5 	bmi.w	8007a4a <lv_btnm_design+0x25a>
            lv_area_copy(&area_tmp, &ext->button_areas[btn_i]);
 8007880:	6869      	ldr	r1, [r5, #4]
    memcpy(dest, src, sizeof(lv_area_t));
 8007882:	2208      	movs	r2, #8
 8007884:	a811      	add	r0, sp, #68	; 0x44
 8007886:	930d      	str	r3, [sp, #52]	; 0x34
 8007888:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800788c:	f00e ff70 	bl	8016770 <memcpy>
            area_tmp.x1 += area_btnm.x1;
 8007890:	f9bd c044 	ldrsh.w	ip, [sp, #68]	; 0x44
 8007894:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
            area_tmp.y1 += area_btnm.y1;
 8007898:	f9bd 0046 	ldrsh.w	r0, [sp, #70]	; 0x46
            area_tmp.x1 += area_btnm.x1;
 800789c:	eb0c 0102 	add.w	r1, ip, r2
            area_tmp.y1 += area_btnm.y1;
 80078a0:	f9bd e03e 	ldrsh.w	lr, [sp, #62]	; 0x3e
            area_tmp.x1 += area_btnm.x1;
 80078a4:	f8ad 1044 	strh.w	r1, [sp, #68]	; 0x44
            area_tmp.y1 += area_btnm.y1;
 80078a8:	eb00 010e 	add.w	r1, r0, lr
 80078ac:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
            area_tmp.x2 += area_btnm.x1;
 80078b0:	f9bd 1048 	ldrsh.w	r1, [sp, #72]	; 0x48
 80078b4:	440a      	add	r2, r1
    return area_p->x2 - area_p->x1 + 1;
 80078b6:	3101      	adds	r1, #1
 80078b8:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 80078bc:	eba1 010c 	sub.w	r1, r1, ip
            area_tmp.y2 += area_btnm.y1;
 80078c0:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	; 0x4a
 80078c4:	b20b      	sxth	r3, r1
 80078c6:	4496      	add	lr, r2
    return area_p->y2 - area_p->y1 + 1;
 80078c8:	3201      	adds	r2, #1
    return area_p->x2 - area_p->x1 + 1;
 80078ca:	930b      	str	r3, [sp, #44]	; 0x2c
    return area_p->y2 - area_p->y1 + 1;
 80078cc:	1a12      	subs	r2, r2, r0
 80078ce:	f8ad e04a 	strh.w	lr, [sp, #74]	; 0x4a
 80078d2:	b213      	sxth	r3, r2
            bool tgl_state = button_get_tgl_state(ext->ctrl_bits[btn_i]);
 80078d4:	68aa      	ldr	r2, [r5, #8]
 80078d6:	930c      	str	r3, [sp, #48]	; 0x30
 80078d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
            if(button_is_inactive(ext->ctrl_bits[btn_i]))
 80078de:	0699      	lsls	r1, r3, #26
 80078e0:	d52f      	bpl.n	8007942 <lv_btnm_design+0x152>
    lv_btnm_ext_t * ext      = lv_obj_get_ext_attr(btnm);
 80078e2:	4630      	mov	r0, r6
 80078e4:	f008 f8ec 	bl	800fac0 <lv_obj_get_ext_attr>
        case LV_BTNM_STYLE_BTN_INA: style = ext->styles_btn[LV_BTN_STATE_INA]; break;
 80078e8:	69c4      	ldr	r4, [r0, #28]
            lv_style_copy(&style_tmp, btn_style);
 80078ea:	4621      	mov	r1, r4
 80078ec:	a813      	add	r0, sp, #76	; 0x4c
 80078ee:	f008 f9ec 	bl	800fcca <lv_style_copy>
            if(style_tmp.body.border.part & LV_BORDER_INTERNAL) {
 80078f2:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 80078f6:	06da      	lsls	r2, r3, #27
 80078f8:	d553      	bpl.n	80079a2 <lv_btnm_design+0x1b2>
                if(area_tmp.y1 == btnm->coords.y1 + bg_style->body.padding.top) {
 80078fa:	f9b6 2012 	ldrsh.w	r2, [r6, #18]
 80078fe:	f9b9 0016 	ldrsh.w	r0, [r9, #22]
 8007902:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
 8007906:	4402      	add	r2, r0
 8007908:	4291      	cmp	r1, r2
                if(area_tmp.y2 == btnm->coords.y2 - bg_style->body.padding.bottom) {
 800790a:	f9b9 1018 	ldrsh.w	r1, [r9, #24]
 800790e:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	; 0x4a
                    style_tmp.body.border.part &= ~LV_BORDER_TOP;
 8007912:	bf04      	itt	eq
 8007914:	f023 0302 	biceq.w	r3, r3, #2
 8007918:	f88d 305a 	strbeq.w	r3, [sp, #90]	; 0x5a
                if(area_tmp.y2 == btnm->coords.y2 - bg_style->body.padding.bottom) {
 800791c:	f9b6 3016 	ldrsh.w	r3, [r6, #22]
 8007920:	1a5b      	subs	r3, r3, r1
 8007922:	429a      	cmp	r2, r3
                    style_tmp.body.border.part &= ~LV_BORDER_BOTTOM;
 8007924:	bf02      	ittt	eq
 8007926:	f89d 305a 	ldrbeq.w	r3, [sp, #90]	; 0x5a
 800792a:	f023 0301 	biceq.w	r3, r3, #1
 800792e:	f88d 305a 	strbeq.w	r3, [sp, #90]	; 0x5a
                if(txt_i == 0) {
 8007932:	b9f7      	cbnz	r7, 8007972 <lv_btnm_design+0x182>
                    style_tmp.body.border.part &= ~LV_BORDER_LEFT;
 8007934:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 8007938:	f023 0304 	bic.w	r3, r3, #4
 800793c:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
 8007940:	e022      	b.n	8007988 <lv_btnm_design+0x198>
            else if(btn_i != ext->btn_id_pr && tgl_state == false)
 8007942:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    return ctrl_bits & LV_BTNM_CTRL_TGL_ENABLE ? true : false;
}

static bool button_get_tgl_state(lv_btnm_ctrl_t ctrl_bits)
{
    return ctrl_bits & LV_BTNM_CTRL_TGL_STATE ? true : false;
 8007944:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    lv_btnm_ext_t * ext      = lv_obj_get_ext_attr(btnm);
 8007948:	4630      	mov	r0, r6
            else if(btn_i != ext->btn_id_pr && tgl_state == false)
 800794a:	42a2      	cmp	r2, r4
 800794c:	d004      	beq.n	8007958 <lv_btnm_design+0x168>
 800794e:	b943      	cbnz	r3, 8007962 <lv_btnm_design+0x172>
    lv_btnm_ext_t * ext      = lv_obj_get_ext_attr(btnm);
 8007950:	f008 f8b6 	bl	800fac0 <lv_obj_get_ext_attr>
        case LV_BTNM_STYLE_BTN_REL: style = ext->styles_btn[LV_BTN_STATE_REL]; break;
 8007954:	68c4      	ldr	r4, [r0, #12]
    return style;
 8007956:	e7c8      	b.n	80078ea <lv_btnm_design+0xfa>
            else if(btn_i == ext->btn_id_pr && tgl_state == false)
 8007958:	b93b      	cbnz	r3, 800796a <lv_btnm_design+0x17a>
    lv_btnm_ext_t * ext      = lv_obj_get_ext_attr(btnm);
 800795a:	f008 f8b1 	bl	800fac0 <lv_obj_get_ext_attr>
        case LV_BTNM_STYLE_BTN_PR: style = ext->styles_btn[LV_BTN_STATE_PR]; break;
 800795e:	6904      	ldr	r4, [r0, #16]
    return style;
 8007960:	e7c3      	b.n	80078ea <lv_btnm_design+0xfa>
    lv_btnm_ext_t * ext      = lv_obj_get_ext_attr(btnm);
 8007962:	f008 f8ad 	bl	800fac0 <lv_obj_get_ext_attr>
        case LV_BTNM_STYLE_BTN_TGL_REL: style = ext->styles_btn[LV_BTN_STATE_TGL_REL]; break;
 8007966:	6944      	ldr	r4, [r0, #20]
    return style;
 8007968:	e7bf      	b.n	80078ea <lv_btnm_design+0xfa>
    lv_btnm_ext_t * ext      = lv_obj_get_ext_attr(btnm);
 800796a:	f008 f8a9 	bl	800fac0 <lv_obj_get_ext_attr>
        case LV_BTNM_STYLE_BTN_TGL_PR: style = ext->styles_btn[LV_BTN_STATE_TGL_PR]; break;
 800796e:	6984      	ldr	r4, [r0, #24]
    return style;
 8007970:	e7bb      	b.n	80078ea <lv_btnm_design+0xfa>
                } else if(strcmp(ext->map_p[txt_i - 1], "\n") == 0) {
 8007972:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 8007976:	682a      	ldr	r2, [r5, #0]
 8007978:	4651      	mov	r1, sl
 800797a:	3b01      	subs	r3, #1
 800797c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007980:	f00e feea 	bl	8016758 <strcmp>
 8007984:	2800      	cmp	r0, #0
 8007986:	d0d5      	beq.n	8007934 <lv_btnm_design+0x144>
                if(ext->map_p[txt_i + 1][0] == '\0' || strcmp(ext->map_p[txt_i + 1], "\n") == 0) {
 8007988:	682b      	ldr	r3, [r5, #0]
 800798a:	3701      	adds	r7, #1
 800798c:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8007990:	7803      	ldrb	r3, [r0, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d15d      	bne.n	8007a52 <lv_btnm_design+0x262>
                    style_tmp.body.border.part &= ~LV_BORDER_RIGHT;
 8007996:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 800799a:	f023 0308 	bic.w	r3, r3, #8
 800799e:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
            lv_draw_rect(&area_tmp, mask, &style_tmp, opa_scale);
 80079a2:	9b07      	ldr	r3, [sp, #28]
 80079a4:	aa13      	add	r2, sp, #76	; 0x4c
 80079a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80079a8:	a811      	add	r0, sp, #68	; 0x44
 80079aa:	f009 fe56 	bl	801165a <lv_draw_rect>
            if(btn_style->glass) btn_style = bg_style;
 80079ae:	7823      	ldrb	r3, [r4, #0]
            lv_txt_get_size(&txt_size, ext->map_p[txt_i], font, btn_style->text.letter_space,
 80079b0:	9a08      	ldr	r2, [sp, #32]
        const lv_style_t * bg_style = lv_obj_get_style(btnm);
 80079b2:	f013 0f01 	tst.w	r3, #1
            lv_txt_get_size(&txt_size, ext->map_p[txt_i], font, btn_style->text.letter_space,
 80079b6:	6829      	ldr	r1, [r5, #0]
    return area_p->x2 - area_p->x1 + 1;
 80079b8:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
        const lv_style_t * bg_style = lv_obj_get_style(btnm);
 80079bc:	bf18      	it	ne
 80079be:	464c      	movne	r4, r9
            lv_txt_get_size(&txt_size, ext->map_p[txt_i], font, btn_style->text.letter_space,
 80079c0:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 80079c4:	9202      	str	r2, [sp, #8]
 80079c6:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80079ca:	3201      	adds	r2, #1
 80079cc:	1a12      	subs	r2, r2, r0
 80079ce:	a80e      	add	r0, sp, #56	; 0x38
 80079d0:	b212      	sxth	r2, r2
 80079d2:	9201      	str	r2, [sp, #4]
 80079d4:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 80079d8:	9200      	str	r2, [sp, #0]
 80079da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80079dc:	f851 100b 	ldr.w	r1, [r1, fp]
 80079e0:	f008 fd77 	bl	80104d2 <lv_txt_get_size>
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 80079e4:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 80079e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 80079ea:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 80079ee:	1a1a      	subs	r2, r3, r0
 80079f0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80079f4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80079f8:	eb03 0262 	add.w	r2, r3, r2, asr #1
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 80079fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079fe:	1a5b      	subs	r3, r3, r1
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 8007a00:	b212      	sxth	r2, r2
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 8007a02:	eb03 77d3 	add.w	r7, r3, r3, lsr #31
 8007a06:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 8007a0a:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
            area_tmp.x2 = area_tmp.x1 + txt_size.x;
 8007a0e:	4402      	add	r2, r0
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 8007a10:	eb03 0367 	add.w	r3, r3, r7, asr #1
            lv_draw_label(&area_tmp, mask, btn_style, opa_scale, ext->map_p[txt_i], txt_flag, NULL, -1, -1, NULL);
 8007a14:	a811      	add	r0, sp, #68	; 0x44
            area_tmp.x2 = area_tmp.x1 + txt_size.x;
 8007a16:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
            lv_draw_label(&area_tmp, mask, btn_style, opa_scale, ext->map_p[txt_i], txt_flag, NULL, -1, -1, NULL);
 8007a1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 8007a1e:	b21b      	sxth	r3, r3
 8007a20:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            area_tmp.y2 = area_tmp.y1 + txt_size.y;
 8007a24:	440b      	add	r3, r1
            lv_draw_label(&area_tmp, mask, btn_style, opa_scale, ext->map_p[txt_i], txt_flag, NULL, -1, -1, NULL);
 8007a26:	990a      	ldr	r1, [sp, #40]	; 0x28
            area_tmp.y2 = area_tmp.y1 + txt_size.y;
 8007a28:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            lv_draw_label(&area_tmp, mask, btn_style, opa_scale, ext->map_p[txt_i], txt_flag, NULL, -1, -1, NULL);
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a32:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8007a36:	9b08      	ldr	r3, [sp, #32]
 8007a38:	4622      	mov	r2, r4
 8007a3a:	9301      	str	r3, [sp, #4]
 8007a3c:	682b      	ldr	r3, [r5, #0]
 8007a3e:	f853 300b 	ldr.w	r3, [r3, fp]
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	9b07      	ldr	r3, [sp, #28]
 8007a46:	f7fc fec1 	bl	80047cc <lv_draw_label>
 8007a4a:	f108 0801 	add.w	r8, r8, #1
        uint16_t txt_i = 0;
 8007a4e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007a50:	e6f9      	b.n	8007846 <lv_btnm_design+0x56>
                if(ext->map_p[txt_i + 1][0] == '\0' || strcmp(ext->map_p[txt_i + 1], "\n") == 0) {
 8007a52:	4651      	mov	r1, sl
 8007a54:	f00e fe80 	bl	8016758 <strcmp>
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d09c      	beq.n	8007996 <lv_btnm_design+0x1a6>
 8007a5c:	e7a1      	b.n	80079a2 <lv_btnm_design+0x1b2>
 8007a5e:	bf00      	nop
 8007a60:	20028964 	.word	0x20028964
 8007a64:	0801ca17 	.word	0x0801ca17

08007a68 <lv_btnm_get_btn_text>:
{
 8007a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a6c:	4688      	mov	r8, r1
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8007a6e:	f008 f827 	bl	800fac0 <lv_obj_get_ext_attr>
    if(btn_id > ext->btn_cnt) return NULL;
 8007a72:	8c03      	ldrh	r3, [r0, #32]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8007a74:	4607      	mov	r7, r0
    if(btn_id > ext->btn_cnt) return NULL;
 8007a76:	4543      	cmp	r3, r8
 8007a78:	d202      	bcs.n	8007a80 <lv_btnm_get_btn_text+0x18>
 8007a7a:	2000      	movs	r0, #0
}
 8007a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(btn_id > ext->btn_cnt) return NULL;
 8007a80:	2500      	movs	r5, #0
        if(strcmp(ext->map_p[txt_i], "\n") == 0) txt_i++;
 8007a82:	f8df 9034 	ldr.w	r9, [pc, #52]	; 8007ab8 <lv_btnm_get_btn_text+0x50>
    uint16_t txt_i = 0;
 8007a86:	462c      	mov	r4, r5
    while(btn_i != btn_id) {
 8007a88:	4545      	cmp	r5, r8
 8007a8a:	d106      	bne.n	8007a9a <lv_btnm_get_btn_text+0x32>
    if(btn_i == ext->btn_cnt) return NULL;
 8007a8c:	8c3b      	ldrh	r3, [r7, #32]
 8007a8e:	42ab      	cmp	r3, r5
 8007a90:	d0f3      	beq.n	8007a7a <lv_btnm_get_btn_text+0x12>
    return ext->map_p[txt_i];
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007a98:	e7f0      	b.n	8007a7c <lv_btnm_get_btn_text+0x14>
        txt_i++;
 8007a9a:	1c66      	adds	r6, r4, #1
        if(strcmp(ext->map_p[txt_i], "\n") == 0) txt_i++;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	4649      	mov	r1, r9
        txt_i++;
 8007aa0:	b2b6      	uxth	r6, r6
        if(strcmp(ext->map_p[txt_i], "\n") == 0) txt_i++;
 8007aa2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007aa6:	f00e fe57 	bl	8016758 <strcmp>
 8007aaa:	b908      	cbnz	r0, 8007ab0 <lv_btnm_get_btn_text+0x48>
 8007aac:	3402      	adds	r4, #2
 8007aae:	b2a6      	uxth	r6, r4
 8007ab0:	3501      	adds	r5, #1
{
 8007ab2:	4634      	mov	r4, r6
 8007ab4:	e7e8      	b.n	8007a88 <lv_btnm_get_btn_text+0x20>
 8007ab6:	bf00      	nop
 8007ab8:	0801ca17 	.word	0x0801ca17

08007abc <lv_btnm_set_map.part.2>:
void lv_btnm_set_map(const lv_obj_t * btnm, const char * map[])
 8007abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac0:	b08f      	sub	sp, #60	; 0x3c
 8007ac2:	460c      	mov	r4, r1
 8007ac4:	4681      	mov	r9, r0
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8007ac6:	f007 fffb 	bl	800fac0 <lv_obj_get_ext_attr>
    if(!maps_are_identical(ext->map_p, map)) {
 8007aca:	6805      	ldr	r5, [r0, #0]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8007acc:	4680      	mov	r8, r0
 * @param map2 map to compare
 * @return true if maps are identical in length and content
 */
static bool maps_are_identical(const char ** map1, const char ** map2)
{
    if(map1 == map2) return true;
 8007ace:	42a5      	cmp	r5, r4
 8007ad0:	d05b      	beq.n	8007b8a <lv_btnm_set_map.part.2+0xce>
    if(map1 == NULL || map2 == NULL) return map1 == map2;
 8007ad2:	b18d      	cbz	r5, 8007af8 <lv_btnm_set_map.part.2+0x3c>
 8007ad4:	b184      	cbz	r4, 8007af8 <lv_btnm_set_map.part.2+0x3c>
 8007ad6:	2600      	movs	r6, #0

    uint16_t i = 0;
    while(map1[i][0] != '\0' && map2[i][0] != '\0') {
 8007ad8:	b2b3      	uxth	r3, r6
 8007ada:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8007ade:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8007ae2:	7802      	ldrb	r2, [r0, #0]
 8007ae4:	780b      	ldrb	r3, [r1, #0]
 8007ae6:	2a00      	cmp	r2, #0
 8007ae8:	f000 8139 	beq.w	8007d5e <lv_btnm_set_map.part.2+0x2a2>
 8007aec:	b123      	cbz	r3, 8007af8 <lv_btnm_set_map.part.2+0x3c>
        if(strcmp(map1[i], map2[i]) != 0) return false;
 8007aee:	f00e fe33 	bl	8016758 <strcmp>
 8007af2:	3601      	adds	r6, #1
 8007af4:	2800      	cmp	r0, #0
 8007af6:	d0ef      	beq.n	8007ad8 <lv_btnm_set_map.part.2+0x1c>
    if(map1 == NULL || map2 == NULL) return map1 == map2;
 8007af8:	2600      	movs	r6, #0
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 8007afa:	f8df b274 	ldr.w	fp, [pc, #628]	; 8007d70 <lv_btnm_set_map.part.2+0x2b4>
    if(map1 == NULL || map2 == NULL) return map1 == map2;
 8007afe:	4635      	mov	r5, r6
 8007b00:	e008      	b.n	8007b14 <lv_btnm_set_map.part.2+0x58>
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 8007b02:	4659      	mov	r1, fp
 8007b04:	f854 002a 	ldr.w	r0, [r4, sl, lsl #2]
 8007b08:	f00e fe26 	bl	8016758 <strcmp>
 8007b0c:	b108      	cbz	r0, 8007b12 <lv_btnm_set_map.part.2+0x56>
            btn_cnt++;
 8007b0e:	3501      	adds	r5, #1
 8007b10:	b2ad      	uxth	r5, r5
        i++;
 8007b12:	3601      	adds	r6, #1
    while(strlen(map[i]) != 0) {
 8007b14:	fa1f fa86 	uxth.w	sl, r6
 8007b18:	f854 002a 	ldr.w	r0, [r4, sl, lsl #2]
 8007b1c:	f00e fe15 	bl	801674a <strlen>
 8007b20:	4607      	mov	r7, r0
 8007b22:	2800      	cmp	r0, #0
 8007b24:	d1ed      	bne.n	8007b02 <lv_btnm_set_map.part.2+0x46>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8007b26:	4648      	mov	r0, r9
 8007b28:	f007 ffca 	bl	800fac0 <lv_obj_get_ext_attr>
 8007b2c:	4606      	mov	r6, r0
    if(ext->button_areas != NULL) {
 8007b2e:	6840      	ldr	r0, [r0, #4]
 8007b30:	b110      	cbz	r0, 8007b38 <lv_btnm_set_map.part.2+0x7c>
        lv_mem_free(ext->button_areas);
 8007b32:	f7fb fddf 	bl	80036f4 <lv_mem_free>
        ext->button_areas = NULL;
 8007b36:	6077      	str	r7, [r6, #4]
    if(ext->ctrl_bits != NULL) {
 8007b38:	68b0      	ldr	r0, [r6, #8]
 8007b3a:	b118      	cbz	r0, 8007b44 <lv_btnm_set_map.part.2+0x88>
        lv_mem_free(ext->ctrl_bits);
 8007b3c:	f7fb fdda 	bl	80036f4 <lv_mem_free>
        ext->ctrl_bits = NULL;
 8007b40:	2300      	movs	r3, #0
 8007b42:	60b3      	str	r3, [r6, #8]
    ext->button_areas = lv_mem_alloc(sizeof(lv_area_t) * btn_cnt);
 8007b44:	00e8      	lsls	r0, r5, #3
 8007b46:	f7fb fd93 	bl	8003670 <lv_mem_alloc>
 8007b4a:	6070      	str	r0, [r6, #4]
    lv_mem_assert(ext->button_areas);
 8007b4c:	b938      	cbnz	r0, 8007b5e <lv_btnm_set_map.part.2+0xa2>
 8007b4e:	4b86      	ldr	r3, [pc, #536]	; (8007d68 <lv_btnm_set_map.part.2+0x2ac>)
 8007b50:	f240 32ad 	movw	r2, #941	; 0x3ad
 8007b54:	4985      	ldr	r1, [pc, #532]	; (8007d6c <lv_btnm_set_map.part.2+0x2b0>)
 8007b56:	2003      	movs	r0, #3
 8007b58:	f7fb fd5c 	bl	8003614 <lv_log_add>
 8007b5c:	e7fe      	b.n	8007b5c <lv_btnm_set_map.part.2+0xa0>
    ext->ctrl_bits = lv_mem_alloc(sizeof(lv_btnm_ctrl_t) * btn_cnt);
 8007b5e:	0068      	lsls	r0, r5, #1
 8007b60:	f7fb fd86 	bl	8003670 <lv_mem_alloc>
 8007b64:	60b0      	str	r0, [r6, #8]
    lv_mem_assert(ext->ctrl_bits);
 8007b66:	b938      	cbnz	r0, 8007b78 <lv_btnm_set_map.part.2+0xbc>
 8007b68:	4b7f      	ldr	r3, [pc, #508]	; (8007d68 <lv_btnm_set_map.part.2+0x2ac>)
 8007b6a:	f240 32af 	movw	r2, #943	; 0x3af
 8007b6e:	497f      	ldr	r1, [pc, #508]	; (8007d6c <lv_btnm_set_map.part.2+0x2b0>)
 8007b70:	2003      	movs	r0, #3
 8007b72:	f7fb fd4f 	bl	8003614 <lv_log_add>
 8007b76:	e7fe      	b.n	8007b76 <lv_btnm_set_map.part.2+0xba>
    if(ext->button_areas == NULL || ext->ctrl_bits == NULL) btn_cnt = 0;
 8007b78:	6873      	ldr	r3, [r6, #4]
    memset(ext->ctrl_bits, 0, sizeof(lv_btnm_ctrl_t) * btn_cnt);
 8007b7a:	2100      	movs	r1, #0
    if(ext->button_areas == NULL || ext->ctrl_bits == NULL) btn_cnt = 0;
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	bf08      	it	eq
 8007b80:	2500      	moveq	r5, #0
    memset(ext->ctrl_bits, 0, sizeof(lv_btnm_ctrl_t) * btn_cnt);
 8007b82:	006a      	lsls	r2, r5, #1
 8007b84:	f00e fe1e 	bl	80167c4 <memset>
    ext->btn_cnt = btn_cnt;
 8007b88:	8435      	strh	r5, [r6, #32]
    const lv_style_t * style_bg = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BG);
 8007b8a:	2100      	movs	r1, #0
    ext->map_p = map;
 8007b8c:	f8c8 4000 	str.w	r4, [r8]
    const lv_style_t * style_bg = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BG);
 8007b90:	4648      	mov	r0, r9
    lv_coord_t max_h            = lv_obj_get_height(btnm) - style_bg->body.padding.top - style_bg->body.padding.bottom;
 8007b92:	f04f 0b00 	mov.w	fp, #0
    const lv_style_t * style_bg = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BG);
 8007b96:	f00c ff3e 	bl	8014a16 <lv_btnm_get_style>
 8007b9a:	4606      	mov	r6, r0
    lv_coord_t max_w            = lv_obj_get_width(btnm) - style_bg->body.padding.left - style_bg->body.padding.right;
 8007b9c:	4648      	mov	r0, r9
    uint8_t line_cnt = 1;
 8007b9e:	2501      	movs	r5, #1
    lv_coord_t max_w            = lv_obj_get_width(btnm) - style_bg->body.padding.left - style_bg->body.padding.right;
 8007ba0:	f007 fef3 	bl	800f98a <lv_obj_get_width>
 8007ba4:	8b73      	ldrh	r3, [r6, #26]
 8007ba6:	8bb2      	ldrh	r2, [r6, #28]
 8007ba8:	4413      	add	r3, r2
 8007baa:	1ac0      	subs	r0, r0, r3
 8007bac:	b203      	sxth	r3, r0
    lv_coord_t max_h            = lv_obj_get_height(btnm) - style_bg->body.padding.top - style_bg->body.padding.bottom;
 8007bae:	4648      	mov	r0, r9
    lv_coord_t max_w            = lv_obj_get_width(btnm) - style_bg->body.padding.left - style_bg->body.padding.right;
 8007bb0:	930d      	str	r3, [sp, #52]	; 0x34
    lv_coord_t max_h            = lv_obj_get_height(btnm) - style_bg->body.padding.top - style_bg->body.padding.bottom;
 8007bb2:	f007 fef0 	bl	800f996 <lv_obj_get_height>
 8007bb6:	f9b6 7016 	ldrsh.w	r7, [r6, #22]
 8007bba:	8b33      	ldrh	r3, [r6, #24]
 8007bbc:	443b      	add	r3, r7
 8007bbe:	1ac0      	subs	r0, r0, r3
 8007bc0:	b203      	sxth	r3, r0
 8007bc2:	9308      	str	r3, [sp, #32]
    for(li = 0; strlen(map[li]) != 0; li++) {
 8007bc4:	fa5f fa8b 	uxtb.w	sl, fp
 8007bc8:	f854 002a 	ldr.w	r0, [r4, sl, lsl #2]
 8007bcc:	f00e fdbd 	bl	801674a <strlen>
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	d152      	bne.n	8007c7a <lv_btnm_set_map.part.2+0x1be>
    lv_coord_t btn_h = max_h - ((line_cnt - 1) * style_bg->body.padding.inner);
 8007bd4:	f1c5 0201 	rsb	r2, r5, #1
 8007bd8:	8bf3      	ldrh	r3, [r6, #30]
 8007bda:	9908      	ldr	r1, [sp, #32]
    uint16_t btn_i          = 0; /*Act. index of button areas*/
 8007bdc:	9003      	str	r0, [sp, #12]
    lv_coord_t btn_h = max_h - ((line_cnt - 1) * style_bg->body.padding.inner);
 8007bde:	fb13 1302 	smlabb	r3, r3, r2, r1
    btn_h            = btn_h / line_cnt;
 8007be2:	b21b      	sxth	r3, r3
 8007be4:	fb93 f5f5 	sdiv	r5, r3, r5
    btn_h--; /*-1 because e.g. height = 100 means 101 pixels (0..100)*/
 8007be8:	3d01      	subs	r5, #1
 8007bea:	b22b      	sxth	r3, r5
 8007bec:	9306      	str	r3, [sp, #24]
    return w != 0 ? w : 1;
 8007bee:	f04f 0a00 	mov.w	sl, #0
        unit_cnt = 0;
 8007bf2:	f8cd a010 	str.w	sl, [sp, #16]
 8007bf6:	fa1f f38a 	uxth.w	r3, sl
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 && strlen(map_p_tmp[btn_cnt]) != 0) { /*Check a line*/
 8007bfa:	495d      	ldr	r1, [pc, #372]	; (8007d70 <lv_btnm_set_map.part.2+0x2b4>)
 8007bfc:	461d      	mov	r5, r3
 8007bfe:	9307      	str	r3, [sp, #28]
 8007c00:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c04:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8007c08:	9309      	str	r3, [sp, #36]	; 0x24
 8007c0a:	f00e fda5 	bl	8016758 <strcmp>
 8007c0e:	2800      	cmp	r0, #0
 8007c10:	d13e      	bne.n	8007c90 <lv_btnm_set_map.part.2+0x1d4>
        if(map_p_tmp[btn_cnt][0] == '\0') { /*Last row?*/
 8007c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d050      	beq.n	8007cbe <lv_btnm_set_map.part.2+0x202>
        if(btn_cnt != 0) {
 8007c1c:	9b07      	ldr	r3, [sp, #28]
 8007c1e:	b1eb      	cbz	r3, 8007c5c <lv_btnm_set_map.part.2+0x1a0>
            lv_coord_t all_unit_w = max_w - ((btn_cnt - 1) * style_bg->body.padding.inner);
 8007c20:	f1c5 0301 	rsb	r3, r5, #1
 8007c24:	8bf2      	ldrh	r2, [r6, #30]
 8007c26:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007c28:	f04f 0b00 	mov.w	fp, #0
 8007c2c:	fb12 1303 	smlabb	r3, r2, r3, r1
            unit_act_cnt = 0;
 8007c30:	f8cd b014 	str.w	fp, [sp, #20]
            lv_coord_t all_unit_w = max_w - ((btn_cnt - 1) * style_bg->body.padding.inner);
 8007c34:	b21b      	sxth	r3, r3
 8007c36:	930a      	str	r3, [sp, #40]	; 0x28
            for(i = 0; i < btn_cnt; i++) {
 8007c38:	9b06      	ldr	r3, [sp, #24]
 8007c3a:	18fb      	adds	r3, r7, r3
 8007c3c:	b21b      	sxth	r3, r3
 8007c3e:	930c      	str	r3, [sp, #48]	; 0x30
 8007c40:	fa1f f38b 	uxth.w	r3, fp
 8007c44:	9a03      	ldr	r2, [sp, #12]
 8007c46:	eb02 0a03 	add.w	sl, r2, r3
 8007c4a:	9a07      	ldr	r2, [sp, #28]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	fa1f fa8a 	uxth.w	sl, sl
 8007c52:	d83c      	bhi.n	8007cce <lv_btnm_set_map.part.2+0x212>
 8007c54:	9b03      	ldr	r3, [sp, #12]
 8007c56:	4413      	add	r3, r2
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	9303      	str	r3, [sp, #12]
        act_y += btn_h + style_bg->body.padding.inner;
 8007c5c:	8bf3      	ldrh	r3, [r6, #30]
 8007c5e:	9a06      	ldr	r2, [sp, #24]
 8007c60:	4413      	add	r3, r2
 8007c62:	441f      	add	r7, r3
        if(strlen(map_p_tmp[btn_cnt]) == 0) break; /*Break on end of map*/
 8007c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c66:	6818      	ldr	r0, [r3, #0]
        act_y += btn_h + style_bg->body.padding.inner;
 8007c68:	b23f      	sxth	r7, r7
        if(strlen(map_p_tmp[btn_cnt]) == 0) break; /*Break on end of map*/
 8007c6a:	f00e fd6e 	bl	801674a <strlen>
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	d06f      	beq.n	8007d52 <lv_btnm_set_map.part.2+0x296>
        map_p_tmp = &map_p_tmp[btn_cnt + 1];       /*Set the map to the next line*/
 8007c72:	3501      	adds	r5, #1
 8007c74:	eb04 0485 	add.w	r4, r4, r5, lsl #2
        i_tot++;                                   /*Skip the '\n'*/
 8007c78:	e7b9      	b.n	8007bee <lv_btnm_set_map.part.2+0x132>
        if(strcmp(map[li], "\n") == 0) line_cnt++;
 8007c7a:	493d      	ldr	r1, [pc, #244]	; (8007d70 <lv_btnm_set_map.part.2+0x2b4>)
 8007c7c:	f854 002a 	ldr.w	r0, [r4, sl, lsl #2]
 8007c80:	f00e fd6a 	bl	8016758 <strcmp>
 8007c84:	b908      	cbnz	r0, 8007c8a <lv_btnm_set_map.part.2+0x1ce>
 8007c86:	3501      	adds	r5, #1
 8007c88:	b2ed      	uxtb	r5, r5
 8007c8a:	f10b 0b01 	add.w	fp, fp, #1
 8007c8e:	e799      	b.n	8007bc4 <lv_btnm_set_map.part.2+0x108>
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 && strlen(map_p_tmp[btn_cnt]) != 0) { /*Check a line*/
 8007c90:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8007c94:	f00e fd59 	bl	801674a <strlen>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	d0ba      	beq.n	8007c12 <lv_btnm_set_map.part.2+0x156>
            unit_cnt += get_button_width(ext->ctrl_bits[btn_i + btn_cnt]);
 8007c9c:	9b03      	ldr	r3, [sp, #12]
 8007c9e:	f10a 0a01 	add.w	sl, sl, #1
 8007ca2:	9a04      	ldr	r2, [sp, #16]
 8007ca4:	441d      	add	r5, r3
 8007ca6:	f8d8 3008 	ldr.w	r3, [r8, #8]
    uint8_t w = ctrl_bits & LV_BTNM_WIDTH_MASK;
 8007caa:	f813 3015 	ldrb.w	r3, [r3, r5, lsl #1]
    return w != 0 ? w : 1;
 8007cae:	f013 0307 	ands.w	r3, r3, #7
 8007cb2:	bf08      	it	eq
 8007cb4:	2301      	moveq	r3, #1
            unit_cnt += get_button_width(ext->ctrl_bits[btn_i + btn_cnt]);
 8007cb6:	441a      	add	r2, r3
 8007cb8:	b293      	uxth	r3, r2
 8007cba:	9304      	str	r3, [sp, #16]
            btn_cnt++;
 8007cbc:	e79b      	b.n	8007bf6 <lv_btnm_set_map.part.2+0x13a>
            btn_h = max_h - act_y + style_bg->body.padding.bottom - 1;
 8007cbe:	8b33      	ldrh	r3, [r6, #24]
 8007cc0:	9a08      	ldr	r2, [sp, #32]
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	4413      	add	r3, r2
 8007cc6:	1bdb      	subs	r3, r3, r7
 8007cc8:	b21b      	sxth	r3, r3
 8007cca:	9306      	str	r3, [sp, #24]
 8007ccc:	e7a6      	b.n	8007c1c <lv_btnm_set_map.part.2+0x160>
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner +
 8007cce:	9805      	ldr	r0, [sp, #20]
                act_unit_w = (all_unit_w * get_button_width(ext->ctrl_bits[btn_i])) / unit_cnt;
 8007cd0:	f8d8 3008 	ldr.w	r3, [r8, #8]
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner +
 8007cd4:	990a      	ldr	r1, [sp, #40]	; 0x28
    uint8_t w = ctrl_bits & LV_BTNM_WIDTH_MASK;
 8007cd6:	f813 301a 	ldrb.w	r3, [r3, sl, lsl #1]
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner +
 8007cda:	4341      	muls	r1, r0
 8007cdc:	f9b6 c01e 	ldrsh.w	ip, [r6, #30]
 8007ce0:	9804      	ldr	r0, [sp, #16]
    return w != 0 ? w : 1;
 8007ce2:	f013 0307 	ands.w	r3, r3, #7
                        style_bg->body.padding.left;
 8007ce6:	f9b6 201a 	ldrsh.w	r2, [r6, #26]
    return w != 0 ? w : 1;
 8007cea:	bf08      	it	eq
 8007cec:	2301      	moveq	r3, #1
                        style_bg->body.padding.left;
 8007cee:	920b      	str	r2, [sp, #44]	; 0x2c
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner +
 8007cf0:	fb91 f1f0 	sdiv	r1, r1, r0
 8007cf4:	fb1b f00c 	smulbb	r0, fp, ip
 8007cf8:	4410      	add	r0, r2
                act_unit_w = (all_unit_w * get_button_width(ext->ctrl_bits[btn_i])) / unit_cnt;
 8007cfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cfc:	fb13 f302 	smulbb	r3, r3, r2
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner +
 8007d00:	4401      	add	r1, r0
                act_unit_w = (all_unit_w * get_button_width(ext->ctrl_bits[btn_i])) / unit_cnt;
 8007d02:	9a04      	ldr	r2, [sp, #16]
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner +
 8007d04:	b209      	sxth	r1, r1
                if(style_bg->body.padding.inner == 0 && act_x != style_bg->body.padding.left) {
 8007d06:	f8d8 0004 	ldr.w	r0, [r8, #4]
                act_unit_w = (all_unit_w * get_button_width(ext->ctrl_bits[btn_i])) / unit_cnt;
 8007d0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d0e:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8007d12:	eb00 00ca 	add.w	r0, r0, sl, lsl #3
 8007d16:	4473      	add	r3, lr
 8007d18:	b21b      	sxth	r3, r3
                if(style_bg->body.padding.inner == 0 && act_x != style_bg->body.padding.left) {
 8007d1a:	f1bc 0f00 	cmp.w	ip, #0
 8007d1e:	d104      	bne.n	8007d2a <lv_btnm_set_map.part.2+0x26e>
 8007d20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d22:	428a      	cmp	r2, r1
                    lv_area_set(&ext->button_areas[btn_i], ext->button_areas[btn_i - 1].x2, act_y, act_x + act_unit_w,
 8007d24:	bf18      	it	ne
 8007d26:	f930 1c04 	ldrshne.w	r1, [r0, #-4]
                    lv_area_set(&ext->button_areas[btn_i], act_x, act_y, act_x + act_unit_w, act_y + btn_h);
 8007d2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d2c:	f10b 0b01 	add.w	fp, fp, #1
 8007d30:	9200      	str	r2, [sp, #0]
 8007d32:	463a      	mov	r2, r7
 8007d34:	f008 fc52 	bl	80105dc <lv_area_set>
                unit_act_cnt += get_button_width(ext->ctrl_bits[btn_i]);
 8007d38:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d3c:	9a05      	ldr	r2, [sp, #20]
    uint8_t w = ctrl_bits & LV_BTNM_WIDTH_MASK;
 8007d3e:	f813 301a 	ldrb.w	r3, [r3, sl, lsl #1]
    return w != 0 ? w : 1;
 8007d42:	f013 0307 	ands.w	r3, r3, #7
 8007d46:	bf08      	it	eq
 8007d48:	2301      	moveq	r3, #1
                unit_act_cnt += get_button_width(ext->ctrl_bits[btn_i]);
 8007d4a:	441a      	add	r2, r3
 8007d4c:	b293      	uxth	r3, r2
 8007d4e:	9305      	str	r3, [sp, #20]
                btn_i++;
 8007d50:	e776      	b.n	8007c40 <lv_btnm_set_map.part.2+0x184>
    lv_obj_invalidate(btnm);
 8007d52:	4648      	mov	r0, r9
}
 8007d54:	b00f      	add	sp, #60	; 0x3c
 8007d56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_invalidate(btnm);
 8007d5a:	f007 ba49 	b.w	800f1f0 <lv_obj_invalidate>
    if(!maps_are_identical(ext->map_p, map)) {
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f43f af13 	beq.w	8007b8a <lv_btnm_set_map.part.2+0xce>
 8007d64:	e6c8      	b.n	8007af8 <lv_btnm_set_map.part.2+0x3c>
 8007d66:	bf00      	nop
 8007d68:	080176f4 	.word	0x080176f4
 8007d6c:	0801c4a8 	.word	0x0801c4a8
 8007d70:	0801ca17 	.word	0x0801ca17

08007d74 <lv_btnm_create>:
{
 8007d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d76:	460e      	mov	r6, r1
    lv_obj_t * new_btnm = lv_obj_create(par, copy);
 8007d78:	f7fa fe50 	bl	8002a1c <lv_obj_create>
    lv_mem_assert(new_btnm);
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	b930      	cbnz	r0, 8007d8e <lv_btnm_create+0x1a>
 8007d80:	4b47      	ldr	r3, [pc, #284]	; (8007ea0 <lv_btnm_create+0x12c>)
 8007d82:	2249      	movs	r2, #73	; 0x49
 8007d84:	4947      	ldr	r1, [pc, #284]	; (8007ea4 <lv_btnm_create+0x130>)
 8007d86:	2003      	movs	r0, #3
 8007d88:	f7fb fc44 	bl	8003614 <lv_log_add>
 8007d8c:	e7fe      	b.n	8007d8c <lv_btnm_create+0x18>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_btnm);
 8007d8e:	4d46      	ldr	r5, [pc, #280]	; (8007ea8 <lv_btnm_create+0x134>)
 8007d90:	682b      	ldr	r3, [r5, #0]
 8007d92:	b913      	cbnz	r3, 8007d9a <lv_btnm_create+0x26>
 8007d94:	f007 fe90 	bl	800fab8 <lv_obj_get_signal_cb>
 8007d98:	6028      	str	r0, [r5, #0]
    lv_btnm_ext_t * ext = lv_obj_allocate_ext_attr(new_btnm, sizeof(lv_btnm_ext_t));
 8007d9a:	2128      	movs	r1, #40	; 0x28
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f007 fa20 	bl	800f1e2 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8007da2:	4605      	mov	r5, r0
 8007da4:	b930      	cbnz	r0, 8007db4 <lv_btnm_create+0x40>
 8007da6:	4b3e      	ldr	r3, [pc, #248]	; (8007ea0 <lv_btnm_create+0x12c>)
 8007da8:	2250      	movs	r2, #80	; 0x50
 8007daa:	493e      	ldr	r1, [pc, #248]	; (8007ea4 <lv_btnm_create+0x130>)
 8007dac:	2003      	movs	r0, #3
 8007dae:	f7fb fc31 	bl	8003614 <lv_log_add>
 8007db2:	e7fe      	b.n	8007db2 <lv_btnm_create+0x3e>
    ext->button_areas                     = NULL;
 8007db4:	2300      	movs	r3, #0
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_btnm);
 8007db6:	4f3d      	ldr	r7, [pc, #244]	; (8007eac <lv_btnm_create+0x138>)
    ext->ctrl_bits                        = NULL;
 8007db8:	e9c0 3301 	strd	r3, r3, [r0, #4]
    ext->map_p                            = NULL;
 8007dbc:	6003      	str	r3, [r0, #0]
    ext->btn_cnt                          = 0;
 8007dbe:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8007dc2:	6203      	str	r3, [r0, #32]
    ext->btn_id_act                       = LV_BTNM_BTN_NONE;
 8007dc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007dc8:	8483      	strh	r3, [r0, #36]	; 0x24
    ext->recolor                          = 0;
 8007dca:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8007dce:	f023 0303 	bic.w	r3, r3, #3
 8007dd2:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
    ext->styles_btn[LV_BTN_STATE_REL]     = &lv_style_btn_rel;
 8007dd6:	4b36      	ldr	r3, [pc, #216]	; (8007eb0 <lv_btnm_create+0x13c>)
 8007dd8:	60c3      	str	r3, [r0, #12]
    ext->styles_btn[LV_BTN_STATE_PR]      = &lv_style_btn_pr;
 8007dda:	4b36      	ldr	r3, [pc, #216]	; (8007eb4 <lv_btnm_create+0x140>)
 8007ddc:	6103      	str	r3, [r0, #16]
    ext->styles_btn[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 8007dde:	4b36      	ldr	r3, [pc, #216]	; (8007eb8 <lv_btnm_create+0x144>)
 8007de0:	6143      	str	r3, [r0, #20]
    ext->styles_btn[LV_BTN_STATE_TGL_PR]  = &lv_style_btn_tgl_pr;
 8007de2:	4b36      	ldr	r3, [pc, #216]	; (8007ebc <lv_btnm_create+0x148>)
 8007de4:	6183      	str	r3, [r0, #24]
    ext->styles_btn[LV_BTN_STATE_INA]     = &lv_style_btn_ina;
 8007de6:	4b36      	ldr	r3, [pc, #216]	; (8007ec0 <lv_btnm_create+0x14c>)
 8007de8:	61c3      	str	r3, [r0, #28]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_btnm);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	b91b      	cbnz	r3, 8007df6 <lv_btnm_create+0x82>
 8007dee:	4620      	mov	r0, r4
 8007df0:	f007 fe64 	bl	800fabc <lv_obj_get_design_cb>
 8007df4:	6038      	str	r0, [r7, #0]
    lv_obj_set_signal_cb(new_btnm, lv_btnm_signal);
 8007df6:	4933      	ldr	r1, [pc, #204]	; (8007ec4 <lv_btnm_create+0x150>)
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f007 f9ee 	bl	800f1da <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_btnm, lv_btnm_design);
 8007dfe:	4932      	ldr	r1, [pc, #200]	; (8007ec8 <lv_btnm_create+0x154>)
 8007e00:	4620      	mov	r0, r4
 8007e02:	f007 f9ec 	bl	800f1de <lv_obj_set_design_cb>
    if(copy == NULL) {
 8007e06:	bbc6      	cbnz	r6, 8007e7a <lv_btnm_create+0x106>
        lv_obj_set_size(new_btnm, LV_DPI * 3, LV_DPI * 2);
 8007e08:	22c8      	movs	r2, #200	; 0xc8
 8007e0a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f007 fc7c 	bl	800f70c <lv_obj_set_size>
    if(map == NULL) return;
 8007e14:	492d      	ldr	r1, [pc, #180]	; (8007ecc <lv_btnm_create+0x158>)
 8007e16:	4620      	mov	r0, r4
 8007e18:	f7ff fe50 	bl	8007abc <lv_btnm_set_map.part.2>
        lv_theme_t * th = lv_theme_get_current();
 8007e1c:	f7fd fb16 	bl	800544c <lv_theme_get_current>
        if(th) {
 8007e20:	4605      	mov	r5, r0
 8007e22:	b328      	cbz	r0, 8007e70 <lv_btnm_create+0xfc>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BG, th->style.btnm.bg);
 8007e24:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
 8007e28:	4631      	mov	r1, r6
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	f00c fd40 	bl	80148b0 <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_REL, th->style.btnm.btn.rel);
 8007e30:	f8d5 20c8 	ldr.w	r2, [r5, #200]	; 0xc8
 8007e34:	2101      	movs	r1, #1
 8007e36:	4620      	mov	r0, r4
 8007e38:	f00c fd3a 	bl	80148b0 <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_PR, th->style.btnm.btn.pr);
 8007e3c:	f8d5 20cc 	ldr.w	r2, [r5, #204]	; 0xcc
 8007e40:	2102      	movs	r1, #2
 8007e42:	4620      	mov	r0, r4
 8007e44:	f00c fd34 	bl	80148b0 <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_TGL_REL, th->style.btnm.btn.tgl_rel);
 8007e48:	f8d5 20d0 	ldr.w	r2, [r5, #208]	; 0xd0
 8007e4c:	2103      	movs	r1, #3
 8007e4e:	4620      	mov	r0, r4
 8007e50:	f00c fd2e 	bl	80148b0 <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_TGL_PR, th->style.btnm.btn.tgl_pr);
 8007e54:	f8d5 20d4 	ldr.w	r2, [r5, #212]	; 0xd4
 8007e58:	2104      	movs	r1, #4
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f00c fd28 	bl	80148b0 <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_INA, th->style.btnm.btn.ina);
 8007e60:	f8d5 20d8 	ldr.w	r2, [r5, #216]	; 0xd8
 8007e64:	2105      	movs	r1, #5
 8007e66:	4620      	mov	r0, r4
 8007e68:	f00c fd22 	bl	80148b0 <lv_btnm_set_style>
}
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_obj_set_style(new_btnm, &lv_style_pretty);
 8007e70:	4917      	ldr	r1, [pc, #92]	; (8007ed0 <lv_btnm_create+0x15c>)
 8007e72:	4620      	mov	r0, r4
 8007e74:	f007 fd66 	bl	800f944 <lv_obj_set_style>
 8007e78:	e7f8      	b.n	8007e6c <lv_btnm_create+0xf8>
        lv_btnm_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	f007 fe20 	bl	800fac0 <lv_obj_get_ext_attr>
        memcpy(ext->styles_btn, copy_ext->styles_btn, sizeof(ext->styles_btn));
 8007e80:	2214      	movs	r2, #20
 8007e82:	f100 010c 	add.w	r1, r0, #12
 8007e86:	f105 000c 	add.w	r0, r5, #12
 8007e8a:	f00e fc71 	bl	8016770 <memcpy>
        lv_btnm_set_map(new_btnm, lv_btnm_get_map_array(copy));
 8007e8e:	4630      	mov	r0, r6
 8007e90:	f00c fd81 	bl	8014996 <lv_btnm_get_map_array>
 8007e94:	4601      	mov	r1, r0
 8007e96:	4620      	mov	r0, r4
 8007e98:	f00c fdda 	bl	8014a50 <lv_btnm_set_map>
    return new_btnm;
 8007e9c:	e7e6      	b.n	8007e6c <lv_btnm_create+0xf8>
 8007e9e:	bf00      	nop
 8007ea0:	080176f4 	.word	0x080176f4
 8007ea4:	0801c4a8 	.word	0x0801c4a8
 8007ea8:	20028968 	.word	0x20028968
 8007eac:	20028964 	.word	0x20028964
 8007eb0:	20020470 	.word	0x20020470
 8007eb4:	20020434 	.word	0x20020434
 8007eb8:	200204e8 	.word	0x200204e8
 8007ebc:	200204ac 	.word	0x200204ac
 8007ec0:	200203f8 	.word	0x200203f8
 8007ec4:	08007ed5 	.word	0x08007ed5
 8007ec8:	080077f1 	.word	0x080077f1
 8007ecc:	2002e140 	.word	0x2002e140
 8007ed0:	2002059c 	.word	0x2002059c

08007ed4 <lv_btnm_signal>:
    res = ancestor_signal(btnm, sign, param);
 8007ed4:	4baa      	ldr	r3, [pc, #680]	; (8008180 <lv_btnm_signal+0x2ac>)
{
 8007ed6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(btnm, sign, param);
 8007eda:	681b      	ldr	r3, [r3, #0]
{
 8007edc:	4605      	mov	r5, r0
 8007ede:	460e      	mov	r6, r1
 8007ee0:	4690      	mov	r8, r2
    res = ancestor_signal(btnm, sign, param);
 8007ee2:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8007ee4:	2801      	cmp	r0, #1
    res = ancestor_signal(btnm, sign, param);
 8007ee6:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return res;
 8007ee8:	d10a      	bne.n	8007f00 <lv_btnm_signal+0x2c>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8007eea:	4628      	mov	r0, r5
 8007eec:	f007 fde8 	bl	800fac0 <lv_obj_get_ext_attr>
 8007ef0:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 8007ef2:	b94e      	cbnz	r6, 8007f08 <lv_btnm_signal+0x34>
        lv_mem_free(ext->button_areas);
 8007ef4:	6840      	ldr	r0, [r0, #4]
 8007ef6:	f7fb fbfd 	bl	80036f4 <lv_mem_free>
        lv_mem_free(ext->ctrl_bits);
 8007efa:	68a0      	ldr	r0, [r4, #8]
 8007efc:	f7fb fbfa 	bl	80036f4 <lv_mem_free>
}
 8007f00:	4638      	mov	r0, r7
 8007f02:	b002      	add	sp, #8
 8007f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG || sign == LV_SIGNAL_CORD_CHG) {
 8007f08:	2e04      	cmp	r6, #4
 8007f0a:	d001      	beq.n	8007f10 <lv_btnm_signal+0x3c>
 8007f0c:	2e02      	cmp	r6, #2
 8007f0e:	d104      	bne.n	8007f1a <lv_btnm_signal+0x46>
        lv_btnm_set_map(btnm, ext->map_p);
 8007f10:	6821      	ldr	r1, [r4, #0]
 8007f12:	4628      	mov	r0, r5
 8007f14:	f00c fd9c 	bl	8014a50 <lv_btnm_set_map>
 8007f18:	e7f2      	b.n	8007f00 <lv_btnm_signal+0x2c>
    } else if(sign == LV_SIGNAL_PRESSED) {
 8007f1a:	2e07      	cmp	r6, #7
 8007f1c:	d130      	bne.n	8007f80 <lv_btnm_signal+0xac>
        lv_indev_t * indev = lv_indev_get_act();
 8007f1e:	f7fa fcb1 	bl	8002884 <lv_indev_get_act>
 8007f22:	4606      	mov	r6, r0
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 8007f24:	f007 f85a 	bl	800efdc <lv_indev_get_type>
 8007f28:	2801      	cmp	r0, #1
 8007f2a:	d123      	bne.n	8007f74 <lv_btnm_signal+0xa0>
            lv_indev_get_point(param, &p);
 8007f2c:	4669      	mov	r1, sp
 8007f2e:	4640      	mov	r0, r8
 8007f30:	f007 f870 	bl	800f014 <lv_indev_get_point>
            btn_pr = get_button_from_point(btnm, &p);
 8007f34:	4669      	mov	r1, sp
 8007f36:	4628      	mov	r0, r5
 8007f38:	f00c fc44 	bl	80147c4 <get_button_from_point>
 8007f3c:	4606      	mov	r6, r0
            invalidate_button_area(btnm, ext->btn_id_pr) /*Invalidate the old area*/;
 8007f3e:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 8007f40:	4628      	mov	r0, r5
 8007f42:	f00c fc80 	bl	8014846 <invalidate_button_area>
            ext->btn_id_pr  = btn_pr;
 8007f46:	8466      	strh	r6, [r4, #34]	; 0x22
            ext->btn_id_act = btn_pr;
 8007f48:	84a6      	strh	r6, [r4, #36]	; 0x24
            invalidate_button_area(btnm, ext->btn_id_pr); /*Invalidate the new area*/
 8007f4a:	4631      	mov	r1, r6
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	f00c fc7a 	bl	8014846 <invalidate_button_area>
        if(ext->btn_id_act != LV_BTNM_BTN_NONE) {
 8007f52:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 8007f54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d0d1      	beq.n	8007f00 <lv_btnm_signal+0x2c>
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8007f5c:	68a3      	ldr	r3, [r4, #8]
    return ctrl_bits & LV_BTNM_CTRL_CLICK_TRIG ? true : false;
 8007f5e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8007f62:	120b      	asrs	r3, r1, #8
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8007f64:	ea43 1351 	orr.w	r3, r3, r1, lsr #5
    return ctrl_bits & LV_BTNM_CTRL_HIDDEN ? true : false;
 8007f68:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8007f6c:	07db      	lsls	r3, r3, #31
 8007f6e:	d4c7      	bmi.n	8007f00 <lv_btnm_signal+0x2c>
                uint32_t b = ext->btn_id_act;
 8007f70:	9201      	str	r2, [sp, #4]
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 8007f72:	e06b      	b.n	800804c <lv_btnm_signal+0x178>
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 8007f74:	4630      	mov	r0, r6
 8007f76:	f007 f831 	bl	800efdc <lv_indev_get_type>
 8007f7a:	2803      	cmp	r0, #3
 8007f7c:	d1e9      	bne.n	8007f52 <lv_btnm_signal+0x7e>
 8007f7e:	e7d5      	b.n	8007f2c <lv_btnm_signal+0x58>
    } else if(sign == LV_SIGNAL_PRESSING) {
 8007f80:	2e08      	cmp	r6, #8
 8007f82:	d12a      	bne.n	8007fda <lv_btnm_signal+0x106>
        lv_indev_get_point(param, &p);
 8007f84:	4669      	mov	r1, sp
 8007f86:	4640      	mov	r0, r8
 8007f88:	f007 f844 	bl	800f014 <lv_indev_get_point>
        btn_pr = get_button_from_point(btnm, &p);
 8007f8c:	4669      	mov	r1, sp
 8007f8e:	4628      	mov	r0, r5
 8007f90:	f00c fc18 	bl	80147c4 <get_button_from_point>
        if(btn_pr != ext->btn_id_pr) {
 8007f94:	8c63      	ldrh	r3, [r4, #34]	; 0x22
        btn_pr = get_button_from_point(btnm, &p);
 8007f96:	4606      	mov	r6, r0
        if(btn_pr != ext->btn_id_pr) {
 8007f98:	4283      	cmp	r3, r0
 8007f9a:	d01b      	beq.n	8007fd4 <lv_btnm_signal+0x100>
            lv_indev_reset_long_press(param); /*Start the log press time again on the new button*/
 8007f9c:	4640      	mov	r0, r8
 8007f9e:	f007 f82a 	bl	800eff6 <lv_indev_reset_long_press>
            if(ext->btn_id_pr != LV_BTNM_BTN_NONE) {
 8007fa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007fa6:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 8007fa8:	4698      	mov	r8, r3
 8007faa:	4299      	cmp	r1, r3
 8007fac:	d002      	beq.n	8007fb4 <lv_btnm_signal+0xe0>
                invalidate_button_area(btnm, ext->btn_id_pr);
 8007fae:	4628      	mov	r0, r5
 8007fb0:	f00c fc49 	bl	8014846 <invalidate_button_area>
            if(btn_pr != LV_BTNM_BTN_NONE) {
 8007fb4:	4546      	cmp	r6, r8
 8007fb6:	d00d      	beq.n	8007fd4 <lv_btnm_signal+0x100>
                uint32_t b = ext->btn_id_act;
 8007fb8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 8007fba:	aa01      	add	r2, sp, #4
 8007fbc:	210e      	movs	r1, #14
 8007fbe:	4628      	mov	r0, r5
                uint32_t b = ext->btn_id_act;
 8007fc0:	9301      	str	r3, [sp, #4]
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 8007fc2:	f007 f8ad 	bl	800f120 <lv_event_send>
                if(res == LV_RES_OK) {
 8007fc6:	2801      	cmp	r0, #1
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 8007fc8:	4607      	mov	r7, r0
                if(res == LV_RES_OK) {
 8007fca:	d103      	bne.n	8007fd4 <lv_btnm_signal+0x100>
                    invalidate_button_area(btnm, btn_pr);
 8007fcc:	4631      	mov	r1, r6
 8007fce:	4628      	mov	r0, r5
 8007fd0:	f00c fc39 	bl	8014846 <invalidate_button_area>
        ext->btn_id_pr  = btn_pr;
 8007fd4:	8466      	strh	r6, [r4, #34]	; 0x22
        ext->btn_id_act = btn_pr;
 8007fd6:	84a6      	strh	r6, [r4, #36]	; 0x24
 8007fd8:	e792      	b.n	8007f00 <lv_btnm_signal+0x2c>
    } else if(sign == LV_SIGNAL_RELEASED) {
 8007fda:	2e0a      	cmp	r6, #10
 8007fdc:	d13d      	bne.n	800805a <lv_btnm_signal+0x186>
        if(ext->btn_id_pr != LV_BTNM_BTN_NONE) {
 8007fde:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 8007fe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d08b      	beq.n	8007f00 <lv_btnm_signal+0x2c>
            if(button_is_tgl_enabled(ext->ctrl_bits[ext->btn_id_pr])) {
 8007fe8:	6881      	ldr	r1, [r0, #8]
 8007fea:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8007fee:	065e      	lsls	r6, r3, #25
 8007ff0:	d510      	bpl.n	8008014 <lv_btnm_signal+0x140>
                if(button_get_tgl_state(ext->ctrl_bits[ext->btn_id_pr])) {
 8007ff2:	0618      	lsls	r0, r3, #24
                    ext->ctrl_bits[ext->btn_id_pr] &= (~LV_BTNM_CTRL_TGL_STATE);
 8007ff4:	bf4a      	itet	mi
 8007ff6:	f023 0380 	bicmi.w	r3, r3, #128	; 0x80
                    ext->ctrl_bits[ext->btn_id_pr] |= LV_BTNM_CTRL_TGL_STATE;
 8007ffa:	f043 0380 	orrpl.w	r3, r3, #128	; 0x80
                    ext->ctrl_bits[ext->btn_id_pr] &= (~LV_BTNM_CTRL_TGL_STATE);
 8007ffe:	b29b      	uxthmi	r3, r3
                    ext->ctrl_bits[ext->btn_id_pr] |= LV_BTNM_CTRL_TGL_STATE;
 8008000:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
                if(ext->one_toggle) make_one_button_toggled(btnm, ext->btn_id_pr);
 8008004:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8008008:	079e      	lsls	r6, r3, #30
 800800a:	d503      	bpl.n	8008014 <lv_btnm_signal+0x140>
 800800c:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 800800e:	4628      	mov	r0, r5
 8008010:	f00c fced 	bl	80149ee <make_one_button_toggled>
            invalidate_button_area(btnm, ext->btn_id_pr);
 8008014:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 8008016:	4628      	mov	r0, r5
 8008018:	f00c fc15 	bl	8014846 <invalidate_button_area>
            lv_group_t * g = lv_obj_get_group(btnm);
 800801c:	4628      	mov	r0, r5
 800801e:	f007 fd7d 	bl	800fb1c <lv_obj_get_group>
            if(lv_group_get_focused(g) != btnm) {
 8008022:	f006 ff9f 	bl	800ef64 <lv_group_get_focused>
 8008026:	4285      	cmp	r5, r0
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == true &&
 8008028:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
                ext->btn_id_pr = LV_BTNM_BTN_NONE;
 800802a:	bf1c      	itt	ne
 800802c:	f64f 73ff 	movwne	r3, #65535	; 0xffff
 8008030:	8463      	strhne	r3, [r4, #34]	; 0x22
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == true &&
 8008032:	68a3      	ldr	r3, [r4, #8]
    return ctrl_bits & LV_BTNM_CTRL_CLICK_TRIG ? true : false;
 8008034:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == true &&
 8008038:	05d0      	lsls	r0, r2, #23
 800803a:	f57f af61 	bpl.w	8007f00 <lv_btnm_signal+0x2c>
    return ctrl_bits & LV_BTNM_CTRL_HIDDEN ? true : false;
 800803e:	10d3      	asrs	r3, r2, #3
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8008040:	ea43 1352 	orr.w	r3, r3, r2, lsr #5
 8008044:	07da      	lsls	r2, r3, #31
 8008046:	f53f af5b 	bmi.w	8007f00 <lv_btnm_signal+0x2c>
                uint32_t b = ext->btn_id_act;
 800804a:	9101      	str	r1, [sp, #4]
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 800804c:	aa01      	add	r2, sp, #4
 800804e:	210e      	movs	r1, #14
 8008050:	4628      	mov	r0, r5
 8008052:	f007 f865 	bl	800f120 <lv_event_send>
 8008056:	4607      	mov	r7, r0
 8008058:	e752      	b.n	8007f00 <lv_btnm_signal+0x2c>
    } else if(sign == LV_SIGNAL_LONG_PRESS_REP) {
 800805a:	2e0c      	cmp	r6, #12
 800805c:	d10a      	bne.n	8008074 <lv_btnm_signal+0x1a0>
        if(ext->btn_id_act != LV_BTNM_BTN_NONE) {
 800805e:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 8008060:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008064:	429a      	cmp	r2, r3
 8008066:	f43f af4b 	beq.w	8007f00 <lv_btnm_signal+0x2c>
            if(button_is_repeat_disabled(ext->ctrl_bits[ext->btn_id_act]) == false &&
 800806a:	6883      	ldr	r3, [r0, #8]
    return ctrl_bits & LV_BTNM_CTRL_NO_REPEAT ? true : false;
 800806c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8008070:	110b      	asrs	r3, r1, #4
 8008072:	e777      	b.n	8007f64 <lv_btnm_signal+0x90>
    } else if(sign == LV_SIGNAL_PRESS_LOST || sign == LV_SIGNAL_DEFOCUS) {
 8008074:	2e09      	cmp	r6, #9
 8008076:	d001      	beq.n	800807c <lv_btnm_signal+0x1a8>
 8008078:	2e10      	cmp	r6, #16
 800807a:	d107      	bne.n	800808c <lv_btnm_signal+0x1b8>
        ext->btn_id_pr  = LV_BTNM_BTN_NONE;
 800807c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008080:	8463      	strh	r3, [r4, #34]	; 0x22
            ext->btn_id_act = ext->btn_id_pr;
 8008082:	84a3      	strh	r3, [r4, #36]	; 0x24
            lv_obj_invalidate(btnm);
 8008084:	4628      	mov	r0, r5
 8008086:	f007 f8b3 	bl	800f1f0 <lv_obj_invalidate>
 800808a:	e739      	b.n	8007f00 <lv_btnm_signal+0x2c>
    } else if(sign == LV_SIGNAL_FOCUS) {
 800808c:	2e0f      	cmp	r6, #15
 800808e:	d11f      	bne.n	80080d0 <lv_btnm_signal+0x1fc>
        lv_indev_t * indev         = lv_indev_get_act();
 8008090:	f7fa fbf8 	bl	8002884 <lv_indev_get_act>
 8008094:	4606      	mov	r6, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8008096:	f006 ffa1 	bl	800efdc <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_POINTER) {
 800809a:	2801      	cmp	r0, #1
 800809c:	d10a      	bne.n	80080b4 <lv_btnm_signal+0x1e0>
            lv_indev_get_point(indev, &p1);
 800809e:	a901      	add	r1, sp, #4
 80080a0:	4630      	mov	r0, r6
 80080a2:	f006 ffb7 	bl	800f014 <lv_indev_get_point>
            uint16_t btn_i = get_button_from_point(btnm, &p1);
 80080a6:	a901      	add	r1, sp, #4
 80080a8:	4628      	mov	r0, r5
 80080aa:	f00c fb8b 	bl	80147c4 <get_button_from_point>
            ext->btn_id_pr = btn_i;
 80080ae:	8460      	strh	r0, [r4, #34]	; 0x22
            ext->btn_id_act = ext->btn_id_pr;
 80080b0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80080b2:	e7e6      	b.n	8008082 <lv_btnm_signal+0x1ae>
        } else if(indev_type == LV_INDEV_TYPE_ENCODER) {
 80080b4:	2804      	cmp	r0, #4
 80080b6:	d105      	bne.n	80080c4 <lv_btnm_signal+0x1f0>
            if(lv_group_get_editing(lv_obj_get_group(btnm)))
 80080b8:	4628      	mov	r0, r5
 80080ba:	f007 fd2f 	bl	800fb1c <lv_obj_get_group>
 80080be:	f006 ff78 	bl	800efb2 <lv_group_get_editing>
 80080c2:	b108      	cbz	r0, 80080c8 <lv_btnm_signal+0x1f4>
            ext->btn_id_pr = 0;
 80080c4:	2300      	movs	r3, #0
 80080c6:	e001      	b.n	80080cc <lv_btnm_signal+0x1f8>
                ext->btn_id_pr = LV_BTNM_BTN_NONE;
 80080c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
            ext->btn_id_pr = 0;
 80080cc:	8463      	strh	r3, [r4, #34]	; 0x22
        ext->btn_id_act = ext->btn_id_pr;
 80080ce:	e7ef      	b.n	80080b0 <lv_btnm_signal+0x1dc>
    } else if(sign == LV_SIGNAL_CONTROL) {
 80080d0:	2e11      	cmp	r6, #17
 80080d2:	f040 808d 	bne.w	80081f0 <lv_btnm_signal+0x31c>
        char c = *((char *)param);
 80080d6:	f898 3000 	ldrb.w	r3, [r8]
        if(c == LV_KEY_RIGHT) {
 80080da:	2b13      	cmp	r3, #19
 80080dc:	d110      	bne.n	8008100 <lv_btnm_signal+0x22c>
            if(ext->btn_id_pr == LV_BTNM_BTN_NONE)
 80080de:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80080e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080e4:	4293      	cmp	r3, r2
            if(ext->btn_id_pr >= ext->btn_cnt - 1) ext->btn_id_pr = ext->btn_cnt - 1;
 80080e6:	8c02      	ldrh	r2, [r0, #32]
                ext->btn_id_pr++;
 80080e8:	bf14      	ite	ne
 80080ea:	3301      	addne	r3, #1
                ext->btn_id_pr = 0;
 80080ec:	2300      	moveq	r3, #0
            if(ext->btn_id_pr >= ext->btn_cnt - 1) ext->btn_id_pr = ext->btn_cnt - 1;
 80080ee:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
                ext->btn_id_pr++;
 80080f2:	bf18      	it	ne
 80080f4:	b29b      	uxthne	r3, r3
            if(ext->btn_id_pr >= ext->btn_cnt - 1) ext->btn_id_pr = ext->btn_cnt - 1;
 80080f6:	4293      	cmp	r3, r2
 80080f8:	8443      	strh	r3, [r0, #34]	; 0x22
 80080fa:	dbd9      	blt.n	80080b0 <lv_btnm_signal+0x1dc>
 80080fc:	8442      	strh	r2, [r0, #34]	; 0x22
            ext->btn_id_act = ext->btn_id_pr;
 80080fe:	e7d7      	b.n	80080b0 <lv_btnm_signal+0x1dc>
        } else if(c == LV_KEY_LEFT) {
 8008100:	2b14      	cmp	r3, #20
 8008102:	d10b      	bne.n	800811c <lv_btnm_signal+0x248>
            if(ext->btn_id_pr == LV_BTNM_BTN_NONE) ext->btn_id_pr = 0;
 8008104:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008108:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 800810a:	429a      	cmp	r2, r3
 800810c:	bf04      	itt	eq
 800810e:	2300      	moveq	r3, #0
 8008110:	8443      	strheq	r3, [r0, #34]	; 0x22
            if(ext->btn_id_pr > 0) ext->btn_id_pr--;
 8008112:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8008114:	2b00      	cmp	r3, #0
 8008116:	d0cb      	beq.n	80080b0 <lv_btnm_signal+0x1dc>
 8008118:	3b01      	subs	r3, #1
 800811a:	e7d7      	b.n	80080cc <lv_btnm_signal+0x1f8>
        } else if(c == LV_KEY_DOWN) {
 800811c:	2b12      	cmp	r3, #18
 800811e:	d131      	bne.n	8008184 <lv_btnm_signal+0x2b0>
            const lv_style_t * style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BG);
 8008120:	2100      	movs	r1, #0
 8008122:	4628      	mov	r0, r5
 8008124:	f00c fc77 	bl	8014a16 <lv_btnm_get_style>
            if(ext->btn_id_pr == LV_BTNM_BTN_NONE) {
 8008128:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 800812a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800812e:	4299      	cmp	r1, r3
 8008130:	d0c8      	beq.n	80080c4 <lv_btnm_signal+0x1f0>
                    ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 8008132:	6863      	ldr	r3, [r4, #4]
                for(area_below = ext->btn_id_pr; area_below < ext->btn_cnt; area_below++) {
 8008134:	f8b4 e020 	ldrh.w	lr, [r4, #32]
                    ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 8008138:	eb03 06c1 	add.w	r6, r3, r1, lsl #3
 800813c:	f933 2031 	ldrsh.w	r2, [r3, r1, lsl #3]
 8008140:	88b3      	ldrh	r3, [r6, #4]
 8008142:	3301      	adds	r3, #1
 8008144:	1a9b      	subs	r3, r3, r2
 8008146:	f343 034e 	sbfx	r3, r3, #1, #15
                lv_coord_t pr_center =
 800814a:	4413      	add	r3, r2
 800814c:	4632      	mov	r2, r6
 800814e:	b21b      	sxth	r3, r3
                for(area_below = ext->btn_id_pr; area_below < ext->btn_cnt; area_below++) {
 8008150:	4571      	cmp	r1, lr
 8008152:	d2ad      	bcs.n	80080b0 <lv_btnm_signal+0x1dc>
                    if(ext->button_areas[area_below].y1 > ext->button_areas[ext->btn_id_pr].y1 &&
 8008154:	f9b2 8002 	ldrsh.w	r8, [r2, #2]
 8008158:	f9b6 c002 	ldrsh.w	ip, [r6, #2]
 800815c:	45e0      	cmp	r8, ip
 800815e:	dd0a      	ble.n	8008176 <lv_btnm_signal+0x2a2>
 8008160:	f9b2 c000 	ldrsh.w	ip, [r2]
 8008164:	459c      	cmp	ip, r3
 8008166:	dc06      	bgt.n	8008176 <lv_btnm_signal+0x2a2>
                       pr_center <= ext->button_areas[area_below].x2 + style->body.padding.left) {
 8008168:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 800816c:	f9b0 801a 	ldrsh.w	r8, [r0, #26]
 8008170:	44c4      	add	ip, r8
                       pr_center >= ext->button_areas[area_below].x1 &&
 8008172:	4563      	cmp	r3, ip
 8008174:	dd52      	ble.n	800821c <lv_btnm_signal+0x348>
                for(area_below = ext->btn_id_pr; area_below < ext->btn_cnt; area_below++) {
 8008176:	3101      	adds	r1, #1
 8008178:	3208      	adds	r2, #8
 800817a:	b289      	uxth	r1, r1
 800817c:	e7e8      	b.n	8008150 <lv_btnm_signal+0x27c>
 800817e:	bf00      	nop
 8008180:	20028968 	.word	0x20028968
        } else if(c == LV_KEY_UP) {
 8008184:	2b11      	cmp	r3, #17
 8008186:	f47f aebb 	bne.w	8007f00 <lv_btnm_signal+0x2c>
            const lv_style_t * style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BG);
 800818a:	2100      	movs	r1, #0
 800818c:	4628      	mov	r0, r5
 800818e:	f00c fc42 	bl	8014a16 <lv_btnm_get_style>
            if(ext->btn_id_pr == LV_BTNM_BTN_NONE) {
 8008192:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8008194:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008198:	4293      	cmp	r3, r2
 800819a:	d093      	beq.n	80080c4 <lv_btnm_signal+0x1f0>
                    ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 800819c:	6866      	ldr	r6, [r4, #4]
 800819e:	eb06 0cc3 	add.w	ip, r6, r3, lsl #3
 80081a2:	f936 1033 	ldrsh.w	r1, [r6, r3, lsl #3]
                for(area_above = ext->btn_id_pr; area_above >= 0; area_above--) {
 80081a6:	b21b      	sxth	r3, r3
 80081a8:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 80081ac:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 80081b0:	3201      	adds	r2, #1
 80081b2:	1a52      	subs	r2, r2, r1
                    ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 80081b4:	f342 024e 	sbfx	r2, r2, #1, #15
                lv_coord_t pr_center =
 80081b8:	440a      	add	r2, r1
 80081ba:	b212      	sxth	r2, r2
                for(area_above = ext->btn_id_pr; area_above >= 0; area_above--) {
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f6ff af77 	blt.w	80080b0 <lv_btnm_signal+0x1dc>
                    if(ext->button_areas[area_above].y1 < ext->button_areas[ext->btn_id_pr].y1 &&
 80081c2:	f9b6 e002 	ldrsh.w	lr, [r6, #2]
 80081c6:	f9bc 1002 	ldrsh.w	r1, [ip, #2]
 80081ca:	458e      	cmp	lr, r1
 80081cc:	da0c      	bge.n	80081e8 <lv_btnm_signal+0x314>
                       pr_center >= ext->button_areas[area_above].x1 - style->body.padding.left &&
 80081ce:	f9b6 e000 	ldrsh.w	lr, [r6]
 80081d2:	f9b0 101a 	ldrsh.w	r1, [r0, #26]
 80081d6:	ebae 0e01 	sub.w	lr, lr, r1
                    if(ext->button_areas[area_above].y1 < ext->button_areas[ext->btn_id_pr].y1 &&
 80081da:	4572      	cmp	r2, lr
 80081dc:	db04      	blt.n	80081e8 <lv_btnm_signal+0x314>
                       pr_center >= ext->button_areas[area_above].x1 - style->body.padding.left &&
 80081de:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 80081e2:	4291      	cmp	r1, r2
 80081e4:	f6bf af72 	bge.w	80080cc <lv_btnm_signal+0x1f8>
                for(area_above = ext->btn_id_pr; area_above >= 0; area_above--) {
 80081e8:	3b01      	subs	r3, #1
 80081ea:	3e08      	subs	r6, #8
 80081ec:	b21b      	sxth	r3, r3
 80081ee:	e7e5      	b.n	80081bc <lv_btnm_signal+0x2e8>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 80081f0:	2e12      	cmp	r6, #18
 80081f2:	d103      	bne.n	80081fc <lv_btnm_signal+0x328>
        *editable       = true;
 80081f4:	2301      	movs	r3, #1
 80081f6:	f888 3000 	strb.w	r3, [r8]
 80081fa:	e681      	b.n	8007f00 <lv_btnm_signal+0x2c>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 80081fc:	2e06      	cmp	r6, #6
 80081fe:	f47f ae7f 	bne.w	8007f00 <lv_btnm_signal+0x2c>
 8008202:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8008204:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
 8008208:	b2da      	uxtb	r2, r3
 800820a:	b119      	cbz	r1, 8008214 <lv_btnm_signal+0x340>
 800820c:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 800820e:	2b07      	cmp	r3, #7
 8008210:	d1f8      	bne.n	8008204 <lv_btnm_signal+0x330>
 8008212:	461a      	mov	r2, r3
        buf->type[i] = "lv_btnm";
 8008214:	4b02      	ldr	r3, [pc, #8]	; (8008220 <lv_btnm_signal+0x34c>)
 8008216:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
 800821a:	e671      	b.n	8007f00 <lv_btnm_signal+0x2c>
                if(area_below < ext->btn_cnt) ext->btn_id_pr = area_below;
 800821c:	8461      	strh	r1, [r4, #34]	; 0x22
 800821e:	e747      	b.n	80080b0 <lv_btnm_signal+0x1dc>
 8008220:	0801c509 	.word	0x0801c509

08008224 <lv_cont_refr_autofit>:
/**
 * Handle auto fit. Set the size of the object to involve all children.
 * @param cont pointer to an object which size will be modified
 */
static void lv_cont_refr_autofit(lv_obj_t * cont)
{
 8008224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008228:	b088      	sub	sp, #32
 800822a:	4604      	mov	r4, r0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 800822c:	f007 fc48 	bl	800fac0 <lv_obj_get_ext_attr>

    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 8008230:	7803      	ldrb	r3, [r0, #0]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8008232:	4681      	mov	r9, r0
    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 8008234:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8008238:	d103      	bne.n	8008242 <lv_cont_refr_autofit+0x1e>
 800823a:	7843      	ldrb	r3, [r0, #1]
 800823c:	0719      	lsls	r1, r3, #28
 800823e:	f000 80da 	beq.w	80083f6 <lv_cont_refr_autofit+0x1d2>
        return;
    }

    lv_area_t tight_area;
    lv_area_t ori;
    const lv_style_t * style = lv_obj_get_style(cont);
 8008242:	4620      	mov	r0, r4

    /*Search the side coordinates of the children*/
    lv_obj_get_coords(cont, &ori);
    lv_obj_get_coords(cont, &tight_area);

    bool has_children = lv_ll_is_empty(&cont->child_ll) ? false : true;
 8008244:	1d27      	adds	r7, r4, #4
    const lv_style_t * style = lv_obj_get_style(cont);
 8008246:	f7fa fd7b 	bl	8002d40 <lv_obj_get_style>
 800824a:	4682      	mov	sl, r0
    lv_obj_t * par               = lv_obj_get_parent(cont);
 800824c:	4620      	mov	r0, r4
 800824e:	f007 fb55 	bl	800f8fc <lv_obj_get_parent>
 8008252:	4680      	mov	r8, r0
    const lv_style_t * par_style = lv_obj_get_style(par);
 8008254:	f7fa fd74 	bl	8002d40 <lv_obj_get_style>
 8008258:	4605      	mov	r5, r0
    memcpy(dest, src, sizeof(lv_area_t));
 800825a:	2208      	movs	r2, #8
 800825c:	f108 0110 	add.w	r1, r8, #16
 8008260:	a804      	add	r0, sp, #16
 8008262:	f00e fa85 	bl	8016770 <memcpy>
    flood_area.x1 += par_style->body.padding.left;
 8008266:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800826a:	8b6a      	ldrh	r2, [r5, #26]
    lv_obj_get_coords(cont, &ori);
 800826c:	a902      	add	r1, sp, #8
 800826e:	4620      	mov	r0, r4
    flood_area.x1 += par_style->body.padding.left;
 8008270:	4413      	add	r3, r2
    flood_area.x2 -= par_style->body.padding.right;
 8008272:	8baa      	ldrh	r2, [r5, #28]
    flood_area.x1 += par_style->body.padding.left;
 8008274:	f8ad 3010 	strh.w	r3, [sp, #16]
    flood_area.x2 -= par_style->body.padding.right;
 8008278:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800827c:	1a9b      	subs	r3, r3, r2
    flood_area.y1 += par_style->body.padding.top;
 800827e:	8aea      	ldrh	r2, [r5, #22]
    flood_area.x2 -= par_style->body.padding.right;
 8008280:	f8ad 3014 	strh.w	r3, [sp, #20]
    flood_area.y1 += par_style->body.padding.top;
 8008284:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8008288:	4413      	add	r3, r2
    flood_area.y2 -= par_style->body.padding.bottom;
 800828a:	8b2a      	ldrh	r2, [r5, #24]
    flood_area.y1 += par_style->body.padding.top;
 800828c:	f8ad 3012 	strh.w	r3, [sp, #18]
    flood_area.y2 -= par_style->body.padding.bottom;
 8008290:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8008294:	1a9b      	subs	r3, r3, r2
 8008296:	f8ad 3016 	strh.w	r3, [sp, #22]
    lv_obj_get_coords(cont, &ori);
 800829a:	f007 fb63 	bl	800f964 <lv_obj_get_coords>
    lv_obj_get_coords(cont, &tight_area);
 800829e:	4669      	mov	r1, sp
 80082a0:	4620      	mov	r0, r4
 80082a2:	f007 fb5f 	bl	800f964 <lv_obj_get_coords>
    bool has_children = lv_ll_is_empty(&cont->child_ll) ? false : true;
 80082a6:	4638      	mov	r0, r7
 80082a8:	f008 f800 	bl	80102ac <lv_ll_is_empty>
 80082ac:	f080 0001 	eor.w	r0, r0, #1

    if(has_children) {
 80082b0:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
 80082b4:	d026      	beq.n	8008304 <lv_cont_refr_autofit+0xe0>
        tight_area.x1 = LV_COORD_MAX;
        tight_area.y1 = LV_COORD_MAX;
        tight_area.x2 = LV_COORD_MIN;
 80082b6:	4a89      	ldr	r2, [pc, #548]	; (80084dc <lv_cont_refr_autofit+0x2b8>)
        tight_area.y2 = LV_COORD_MIN;

        LV_LL_READ(cont->child_ll, child_i)
 80082b8:	4638      	mov	r0, r7
        tight_area.x2 = LV_COORD_MIN;
 80082ba:	4b89      	ldr	r3, [pc, #548]	; (80084e0 <lv_cont_refr_autofit+0x2bc>)
 80082bc:	e9cd 2300 	strd	r2, r3, [sp]
        LV_LL_READ(cont->child_ll, child_i)
 80082c0:	f007 feee 	bl	80100a0 <lv_ll_get_head>
 80082c4:	4605      	mov	r5, r0
 80082c6:	2800      	cmp	r0, #0
 80082c8:	f040 8098 	bne.w	80083fc <lv_cont_refr_autofit+0x1d8>
            tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1);
            tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2);
            tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2);
        }

        tight_area.x1 -= style->body.padding.left;
 80082cc:	f8bd 3000 	ldrh.w	r3, [sp]
 80082d0:	f8ba 201a 	ldrh.w	r2, [sl, #26]
 80082d4:	1a9b      	subs	r3, r3, r2
        tight_area.x2 += style->body.padding.right;
 80082d6:	f8ba 201c 	ldrh.w	r2, [sl, #28]
        tight_area.x1 -= style->body.padding.left;
 80082da:	f8ad 3000 	strh.w	r3, [sp]
        tight_area.x2 += style->body.padding.right;
 80082de:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80082e2:	4413      	add	r3, r2
        tight_area.y1 -= style->body.padding.top;
 80082e4:	f8ba 2016 	ldrh.w	r2, [sl, #22]
        tight_area.x2 += style->body.padding.right;
 80082e8:	f8ad 3004 	strh.w	r3, [sp, #4]
        tight_area.y1 -= style->body.padding.top;
 80082ec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80082f0:	1a9b      	subs	r3, r3, r2
        tight_area.y2 += style->body.padding.bottom;
 80082f2:	f8ba 2018 	ldrh.w	r2, [sl, #24]
        tight_area.y1 -= style->body.padding.top;
 80082f6:	f8ad 3002 	strh.w	r3, [sp, #2]
        tight_area.y2 += style->body.padding.bottom;
 80082fa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80082fe:	4413      	add	r3, r2
 8008300:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008304:	2208      	movs	r2, #8
 8008306:	a806      	add	r0, sp, #24
 8008308:	eb0d 0102 	add.w	r1, sp, r2
 800830c:	f00e fa30 	bl	8016770 <memcpy>
    }

    lv_area_t new_area;
    lv_area_copy(&new_area, &ori);

    switch(ext->fit_left) {
 8008310:	f899 3000 	ldrb.w	r3, [r9]
 8008314:	f3c3 1201 	ubfx	r2, r3, #4, #2
 8008318:	2a02      	cmp	r2, #2
 800831a:	f000 809c 	beq.w	8008456 <lv_cont_refr_autofit+0x232>
 800831e:	f200 809d 	bhi.w	800845c <lv_cont_refr_autofit+0x238>
 8008322:	2a01      	cmp	r2, #1
 8008324:	d103      	bne.n	800832e <lv_cont_refr_autofit+0x10a>
        case LV_FIT_TIGHT: new_area.x1 = tight_area.x1; break;
 8008326:	f8bd 2000 	ldrh.w	r2, [sp]
        case LV_FIT_FLOOD: new_area.x1 = flood_area.x1; break;
        case LV_FIT_FILL: new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, flood_area.x1) : flood_area.x1; break;
 800832a:	f8ad 2018 	strh.w	r2, [sp, #24]
        default: break;
    }

    switch(ext->fit_right) {
 800832e:	099b      	lsrs	r3, r3, #6
 8008330:	2b02      	cmp	r3, #2
 8008332:	f000 809e 	beq.w	8008472 <lv_cont_refr_autofit+0x24e>
 8008336:	f200 809f 	bhi.w	8008478 <lv_cont_refr_autofit+0x254>
 800833a:	2b01      	cmp	r3, #1
 800833c:	d103      	bne.n	8008346 <lv_cont_refr_autofit+0x122>
        case LV_FIT_TIGHT: new_area.x2 = tight_area.x2; break;
 800833e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        case LV_FIT_FLOOD: new_area.x2 = flood_area.x2; break;
        case LV_FIT_FILL: new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, flood_area.x2) : flood_area.x2; break;
 8008342:	f8ad 301c 	strh.w	r3, [sp, #28]
        default: break;
    }

    switch(ext->fit_top) {
 8008346:	f899 3001 	ldrb.w	r3, [r9, #1]
 800834a:	f003 0203 	and.w	r2, r3, #3
 800834e:	2a02      	cmp	r2, #2
 8008350:	f000 809d 	beq.w	800848e <lv_cont_refr_autofit+0x26a>
 8008354:	f200 809e 	bhi.w	8008494 <lv_cont_refr_autofit+0x270>
 8008358:	2a01      	cmp	r2, #1
 800835a:	d103      	bne.n	8008364 <lv_cont_refr_autofit+0x140>
        case LV_FIT_TIGHT: new_area.y1 = tight_area.y1; break;
 800835c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
        case LV_FIT_FLOOD: new_area.y1 = flood_area.y1; break;
        case LV_FIT_FILL: new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, flood_area.y1) : flood_area.y1; break;
 8008360:	f8ad 201a 	strh.w	r2, [sp, #26]
        default: break;
    }

    switch(ext->fit_bottom) {
 8008364:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008368:	2b02      	cmp	r3, #2
 800836a:	f000 809e 	beq.w	80084aa <lv_cont_refr_autofit+0x286>
 800836e:	f200 809f 	bhi.w	80084b0 <lv_cont_refr_autofit+0x28c>
 8008372:	2b01      	cmp	r3, #1
 8008374:	d103      	bne.n	800837e <lv_cont_refr_autofit+0x15a>
        case LV_FIT_TIGHT: new_area.y2 = tight_area.y2; break;
 8008376:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        case LV_FIT_FLOOD: new_area.y2 = flood_area.y2; break;
        case LV_FIT_FILL: new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, flood_area.y2) : flood_area.y2; break;
 800837a:	f8ad 301e 	strh.w	r3, [sp, #30]
        default: break;
    }

    /*Do nothing if the coordinates are not changed*/
    if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
 800837e:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8008382:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8008386:	429a      	cmp	r2, r3
 8008388:	d111      	bne.n	80083ae <lv_cont_refr_autofit+0x18a>
 800838a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 800838e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8008392:	429a      	cmp	r2, r3
 8008394:	d10b      	bne.n	80083ae <lv_cont_refr_autofit+0x18a>
 8008396:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800839a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d105      	bne.n	80083ae <lv_cont_refr_autofit+0x18a>
 80083a2:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 80083a6:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d023      	beq.n	80083f6 <lv_cont_refr_autofit+0x1d2>
       cont->coords.y2 != new_area.y2) {

        lv_obj_invalidate(cont);
 80083ae:	4620      	mov	r0, r4
 80083b0:	f006 ff1e 	bl	800f1f0 <lv_obj_invalidate>
 80083b4:	2208      	movs	r2, #8
 80083b6:	a906      	add	r1, sp, #24
 80083b8:	f104 0010 	add.w	r0, r4, #16
 80083bc:	f00e f9d8 	bl	8016770 <memcpy>
        lv_area_copy(&cont->coords, &new_area);
        lv_obj_invalidate(cont);
 80083c0:	4620      	mov	r0, r4
 80083c2:	f006 ff15 	bl	800f1f0 <lv_obj_invalidate>

        /*Notify the object about its new coordinates*/
        cont->signal_cb(cont, LV_SIGNAL_CORD_CHG, &ori);
 80083c6:	69e3      	ldr	r3, [r4, #28]
 80083c8:	aa02      	add	r2, sp, #8
 80083ca:	2102      	movs	r1, #2
 80083cc:	4620      	mov	r0, r4
 80083ce:	4798      	blx	r3

        /*Inform the parent about the new coordinates*/
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, cont);
 80083d0:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80083d4:	4622      	mov	r2, r4
 80083d6:	2101      	movs	r1, #1
 80083d8:	4640      	mov	r0, r8
 80083da:	4798      	blx	r3

        if(lv_obj_get_auto_realign(cont)) {
 80083dc:	4620      	mov	r0, r4
 80083de:	f007 fae0 	bl	800f9a2 <lv_obj_get_auto_realign>
 80083e2:	b110      	cbz	r0, 80083ea <lv_cont_refr_autofit+0x1c6>
            lv_obj_realign(cont);
 80083e4:	4620      	mov	r0, r4
 80083e6:	f007 f97d 	bl	800f6e4 <lv_obj_realign>
        }

        /*Tell the children the parent's size has changed*/
        LV_LL_READ(cont->child_ll, child_i)
 80083ea:	4638      	mov	r0, r7
 80083ec:	f007 fe58 	bl	80100a0 <lv_ll_get_head>
 80083f0:	4604      	mov	r4, r0
 80083f2:	2800      	cmp	r0, #0
 80083f4:	d167      	bne.n	80084c6 <lv_cont_refr_autofit+0x2a2>
        {
            child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
        }
    }
}
 80083f6:	b008      	add	sp, #32
 80083f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if(lv_obj_get_hidden(child_i) != false) continue;
 80083fc:	4628      	mov	r0, r5
 80083fe:	f007 faf1 	bl	800f9e4 <lv_obj_get_hidden>
 8008402:	bb18      	cbnz	r0, 800844c <lv_cont_refr_autofit+0x228>
            tight_area.x1 = LV_MATH_MIN(tight_area.x1, child_i->coords.x1);
 8008404:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 8008408:	f9bd 2000 	ldrsh.w	r2, [sp]
 800840c:	4293      	cmp	r3, r2
 800840e:	bfa8      	it	ge
 8008410:	4613      	movge	r3, r2
            tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1);
 8008412:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
            tight_area.x1 = LV_MATH_MIN(tight_area.x1, child_i->coords.x1);
 8008416:	f8ad 3000 	strh.w	r3, [sp]
            tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1);
 800841a:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 800841e:	4293      	cmp	r3, r2
 8008420:	bfa8      	it	ge
 8008422:	4613      	movge	r3, r2
            tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2);
 8008424:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
            tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1);
 8008428:	f8ad 3002 	strh.w	r3, [sp, #2]
            tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2);
 800842c:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 8008430:	4293      	cmp	r3, r2
 8008432:	bfb8      	it	lt
 8008434:	4613      	movlt	r3, r2
            tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2);
 8008436:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
            tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2);
 800843a:	f8ad 3004 	strh.w	r3, [sp, #4]
            tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2);
 800843e:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 8008442:	4293      	cmp	r3, r2
 8008444:	bfb8      	it	lt
 8008446:	4613      	movlt	r3, r2
 8008448:	f8ad 3006 	strh.w	r3, [sp, #6]
        LV_LL_READ(cont->child_ll, child_i)
 800844c:	4629      	mov	r1, r5
 800844e:	4638      	mov	r0, r7
 8008450:	f007 fe2c 	bl	80100ac <lv_ll_get_next>
 8008454:	e736      	b.n	80082c4 <lv_cont_refr_autofit+0xa0>
        case LV_FIT_FLOOD: new_area.x1 = flood_area.x1; break;
 8008456:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800845a:	e766      	b.n	800832a <lv_cont_refr_autofit+0x106>
        case LV_FIT_FILL: new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, flood_area.x1) : flood_area.x1; break;
 800845c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8008460:	2e00      	cmp	r6, #0
 8008462:	f43f af62 	beq.w	800832a <lv_cont_refr_autofit+0x106>
 8008466:	f9bd 1000 	ldrsh.w	r1, [sp]
 800846a:	428a      	cmp	r2, r1
 800846c:	bfa8      	it	ge
 800846e:	460a      	movge	r2, r1
 8008470:	e75b      	b.n	800832a <lv_cont_refr_autofit+0x106>
        case LV_FIT_FLOOD: new_area.x2 = flood_area.x2; break;
 8008472:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8008476:	e764      	b.n	8008342 <lv_cont_refr_autofit+0x11e>
        case LV_FIT_FILL: new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, flood_area.x2) : flood_area.x2; break;
 8008478:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800847c:	2e00      	cmp	r6, #0
 800847e:	f43f af60 	beq.w	8008342 <lv_cont_refr_autofit+0x11e>
 8008482:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8008486:	4293      	cmp	r3, r2
 8008488:	bfb8      	it	lt
 800848a:	4613      	movlt	r3, r2
 800848c:	e759      	b.n	8008342 <lv_cont_refr_autofit+0x11e>
        case LV_FIT_FLOOD: new_area.y1 = flood_area.y1; break;
 800848e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8008492:	e765      	b.n	8008360 <lv_cont_refr_autofit+0x13c>
        case LV_FIT_FILL: new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, flood_area.y1) : flood_area.y1; break;
 8008494:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8008498:	2e00      	cmp	r6, #0
 800849a:	f43f af61 	beq.w	8008360 <lv_cont_refr_autofit+0x13c>
 800849e:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 80084a2:	428a      	cmp	r2, r1
 80084a4:	bfa8      	it	ge
 80084a6:	460a      	movge	r2, r1
 80084a8:	e75a      	b.n	8008360 <lv_cont_refr_autofit+0x13c>
        case LV_FIT_FLOOD: new_area.y2 = flood_area.y2; break;
 80084aa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80084ae:	e764      	b.n	800837a <lv_cont_refr_autofit+0x156>
        case LV_FIT_FILL: new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, flood_area.y2) : flood_area.y2; break;
 80084b0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80084b4:	2e00      	cmp	r6, #0
 80084b6:	f43f af60 	beq.w	800837a <lv_cont_refr_autofit+0x156>
 80084ba:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80084be:	4293      	cmp	r3, r2
 80084c0:	bfb8      	it	lt
 80084c2:	4613      	movlt	r3, r2
 80084c4:	e759      	b.n	800837a <lv_cont_refr_autofit+0x156>
            child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
 80084c6:	69e3      	ldr	r3, [r4, #28]
 80084c8:	2200      	movs	r2, #0
 80084ca:	2103      	movs	r1, #3
 80084cc:	4620      	mov	r0, r4
 80084ce:	4798      	blx	r3
        LV_LL_READ(cont->child_ll, child_i)
 80084d0:	4621      	mov	r1, r4
 80084d2:	4638      	mov	r0, r7
 80084d4:	f007 fdea 	bl	80100ac <lv_ll_get_next>
 80084d8:	e78a      	b.n	80083f0 <lv_cont_refr_autofit+0x1cc>
 80084da:	bf00      	nop
 80084dc:	7c187c18 	.word	0x7c187c18
 80084e0:	83e883e8 	.word	0x83e883e8

080084e4 <lv_cont_create>:
{
 80084e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084e6:	4607      	mov	r7, r0
 80084e8:	460e      	mov	r6, r1
    lv_obj_t * new_cont = lv_obj_create(par, copy);
 80084ea:	f7fa fa97 	bl	8002a1c <lv_obj_create>
    lv_mem_assert(new_cont);
 80084ee:	4605      	mov	r5, r0
 80084f0:	b930      	cbnz	r0, 8008500 <lv_cont_create+0x1c>
 80084f2:	4b2a      	ldr	r3, [pc, #168]	; (800859c <lv_cont_create+0xb8>)
 80084f4:	2246      	movs	r2, #70	; 0x46
 80084f6:	492a      	ldr	r1, [pc, #168]	; (80085a0 <lv_cont_create+0xbc>)
 80084f8:	2003      	movs	r0, #3
 80084fa:	f7fb f88b 	bl	8003614 <lv_log_add>
 80084fe:	e7fe      	b.n	80084fe <lv_cont_create+0x1a>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_cont);
 8008500:	4c28      	ldr	r4, [pc, #160]	; (80085a4 <lv_cont_create+0xc0>)
 8008502:	6823      	ldr	r3, [r4, #0]
 8008504:	b913      	cbnz	r3, 800850c <lv_cont_create+0x28>
 8008506:	f007 fad7 	bl	800fab8 <lv_obj_get_signal_cb>
 800850a:	6020      	str	r0, [r4, #0]
    lv_obj_allocate_ext_attr(new_cont, sizeof(lv_cont_ext_t));
 800850c:	2102      	movs	r1, #2
 800850e:	4628      	mov	r0, r5
 8008510:	f006 fe67 	bl	800f1e2 <lv_obj_allocate_ext_attr>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(new_cont);
 8008514:	4628      	mov	r0, r5
 8008516:	f007 fad3 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext == NULL) return NULL;
 800851a:	4604      	mov	r4, r0
 800851c:	2800      	cmp	r0, #0
 800851e:	d03b      	beq.n	8008598 <lv_cont_create+0xb4>
    ext->layout     = LV_LAYOUT_OFF;
 8008520:	2300      	movs	r3, #0
    lv_obj_set_signal_cb(new_cont, lv_cont_signal);
 8008522:	4921      	ldr	r1, [pc, #132]	; (80085a8 <lv_cont_create+0xc4>)
    ext->layout     = LV_LAYOUT_OFF;
 8008524:	7003      	strb	r3, [r0, #0]
    ext->fit_top    = LV_FIT_NONE;
 8008526:	7843      	ldrb	r3, [r0, #1]
 8008528:	f023 030f 	bic.w	r3, r3, #15
 800852c:	7043      	strb	r3, [r0, #1]
    lv_obj_set_signal_cb(new_cont, lv_cont_signal);
 800852e:	4628      	mov	r0, r5
 8008530:	f006 fe53 	bl	800f1da <lv_obj_set_signal_cb>
    if(copy == NULL) {
 8008534:	b95e      	cbnz	r6, 800854e <lv_cont_create+0x6a>
        if(par != NULL) {
 8008536:	b137      	cbz	r7, 8008546 <lv_cont_create+0x62>
            lv_theme_t * th = lv_theme_get_current();
 8008538:	f7fc ff88 	bl	800544c <lv_theme_get_current>
            if(th) {
 800853c:	b128      	cbz	r0, 800854a <lv_cont_create+0x66>
 * @param style pointer to the new style
 */
static inline void lv_cont_set_style(lv_obj_t * cont, lv_cont_style_t type, const lv_style_t * style)
{
    (void)type; /*Unused*/
    lv_obj_set_style(cont, style);
 800853e:	68c1      	ldr	r1, [r0, #12]
 8008540:	4628      	mov	r0, r5
 8008542:	f007 f9ff 	bl	800f944 <lv_obj_set_style>
}
 8008546:	4628      	mov	r0, r5
 8008548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800854a:	4918      	ldr	r1, [pc, #96]	; (80085ac <lv_cont_create+0xc8>)
 800854c:	e7f8      	b.n	8008540 <lv_cont_create+0x5c>
        lv_cont_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 800854e:	4630      	mov	r0, r6
 8008550:	f007 fab6 	bl	800fac0 <lv_obj_get_ext_attr>
        ext->fit_left            = copy_ext->fit_left;
 8008554:	7803      	ldrb	r3, [r0, #0]
 8008556:	7822      	ldrb	r2, [r4, #0]
 8008558:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800855c:	f363 1205 	bfi	r2, r3, #4, #2
 8008560:	7022      	strb	r2, [r4, #0]
        ext->fit_right           = copy_ext->fit_right;
 8008562:	b2d2      	uxtb	r2, r2
 8008564:	7803      	ldrb	r3, [r0, #0]
 8008566:	099b      	lsrs	r3, r3, #6
 8008568:	f363 1287 	bfi	r2, r3, #6, #2
        ext->fit_top             = copy_ext->fit_top;
 800856c:	7863      	ldrb	r3, [r4, #1]
        ext->fit_right           = copy_ext->fit_right;
 800856e:	7022      	strb	r2, [r4, #0]
        ext->fit_top             = copy_ext->fit_top;
 8008570:	7842      	ldrb	r2, [r0, #1]
 8008572:	f362 0301 	bfi	r3, r2, #0, #2
 8008576:	7063      	strb	r3, [r4, #1]
        ext->fit_bottom          = copy_ext->fit_bottom;
 8008578:	7843      	ldrb	r3, [r0, #1]
 800857a:	7862      	ldrb	r2, [r4, #1]
 800857c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008580:	f363 0283 	bfi	r2, r3, #2, #2
        ext->layout              = copy_ext->layout;
 8008584:	7823      	ldrb	r3, [r4, #0]
        ext->fit_bottom          = copy_ext->fit_bottom;
 8008586:	7062      	strb	r2, [r4, #1]
        ext->layout              = copy_ext->layout;
 8008588:	7802      	ldrb	r2, [r0, #0]
        lv_obj_refresh_style(new_cont);
 800858a:	4628      	mov	r0, r5
        ext->layout              = copy_ext->layout;
 800858c:	f362 0303 	bfi	r3, r2, #0, #4
 8008590:	7023      	strb	r3, [r4, #0]
        lv_obj_refresh_style(new_cont);
 8008592:	f007 f914 	bl	800f7be <lv_obj_refresh_style>
 8008596:	e7d6      	b.n	8008546 <lv_cont_create+0x62>
    if(ext == NULL) return NULL;
 8008598:	4605      	mov	r5, r0
 800859a:	e7d4      	b.n	8008546 <lv_cont_create+0x62>
 800859c:	080176f4 	.word	0x080176f4
 80085a0:	0801c52a 	.word	0x0801c52a
 80085a4:	2002896c 	.word	0x2002896c
 80085a8:	080085b1 	.word	0x080085b1
 80085ac:	2002059c 	.word	0x2002059c

080085b0 <lv_cont_signal>:
{
 80085b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = ancestor_signal(cont, sign, param);
 80085b2:	4b1e      	ldr	r3, [pc, #120]	; (800862c <lv_cont_signal+0x7c>)
{
 80085b4:	4604      	mov	r4, r0
 80085b6:	460f      	mov	r7, r1
 80085b8:	4616      	mov	r6, r2
    res = ancestor_signal(cont, sign, param);
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 80085be:	2801      	cmp	r0, #1
    res = ancestor_signal(cont, sign, param);
 80085c0:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 80085c2:	d120      	bne.n	8008606 <lv_cont_signal+0x56>
    if(sign == LV_SIGNAL_STYLE_CHG) { /*Recalculate the padding if the style changed*/
 80085c4:	2f04      	cmp	r7, #4
 80085c6:	d106      	bne.n	80085d6 <lv_cont_signal+0x26>
        lv_cont_refr_layout(cont);
 80085c8:	4620      	mov	r0, r4
 80085ca:	f00c faa6 	bl	8014b1a <lv_cont_refr_layout>
        lv_cont_refr_autofit(cont);
 80085ce:	4620      	mov	r0, r4
 80085d0:	f7ff fe28 	bl	8008224 <lv_cont_refr_autofit>
 80085d4:	e017      	b.n	8008606 <lv_cont_signal+0x56>
    } else if(sign == LV_SIGNAL_CHILD_CHG) {
 80085d6:	2f01      	cmp	r7, #1
 80085d8:	d0f6      	beq.n	80085c8 <lv_cont_signal+0x18>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 80085da:	2f02      	cmp	r7, #2
 80085dc:	d115      	bne.n	800860a <lv_cont_signal+0x5a>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
 80085de:	4620      	mov	r0, r4
 80085e0:	f007 f9d3 	bl	800f98a <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 80085e4:	88b3      	ldrh	r3, [r6, #4]
 80085e6:	8832      	ldrh	r2, [r6, #0]
 80085e8:	3301      	adds	r3, #1
 80085ea:	1a9b      	subs	r3, r3, r2
 80085ec:	b21b      	sxth	r3, r3
 80085ee:	4298      	cmp	r0, r3
 80085f0:	d1ea      	bne.n	80085c8 <lv_cont_signal+0x18>
 80085f2:	4620      	mov	r0, r4
 80085f4:	f007 f9cf 	bl	800f996 <lv_obj_get_height>
    return area_p->y2 - area_p->y1 + 1;
 80085f8:	88f3      	ldrh	r3, [r6, #6]
 80085fa:	8872      	ldrh	r2, [r6, #2]
 80085fc:	3301      	adds	r3, #1
 80085fe:	1a9b      	subs	r3, r3, r2
 8008600:	b21b      	sxth	r3, r3
 8008602:	4298      	cmp	r0, r3
 8008604:	d1e0      	bne.n	80085c8 <lv_cont_signal+0x18>
}
 8008606:	4628      	mov	r0, r5
 8008608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
 800860a:	2f03      	cmp	r7, #3
 800860c:	d0df      	beq.n	80085ce <lv_cont_signal+0x1e>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800860e:	2f06      	cmp	r7, #6
 8008610:	d1f9      	bne.n	8008606 <lv_cont_signal+0x56>
 8008612:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8008614:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8008618:	b2da      	uxtb	r2, r3
 800861a:	b119      	cbz	r1, 8008624 <lv_cont_signal+0x74>
 800861c:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 800861e:	2b07      	cmp	r3, #7
 8008620:	d1f8      	bne.n	8008614 <lv_cont_signal+0x64>
 8008622:	461a      	mov	r2, r3
        buf->type[i] = "lv_cont";
 8008624:	4b02      	ldr	r3, [pc, #8]	; (8008630 <lv_cont_signal+0x80>)
 8008626:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 800862a:	e7ec      	b.n	8008606 <lv_cont_signal+0x56>
 800862c:	2002896c 	.word	0x2002896c
 8008630:	0801c58b 	.word	0x0801c58b

08008634 <lv_list_is_list_btn>:
/**
 * Check if this is really a list button or another object.
 * @param list_btn List button
 */
static bool lv_list_is_list_btn(lv_obj_t * list_btn)
{
 8008634:	b570      	push	{r4, r5, r6, lr}
 8008636:	b088      	sub	sp, #32
    lv_obj_type_t type;

    lv_obj_get_type(list_btn, &type);
 8008638:	2408      	movs	r4, #8
    uint8_t cnt;
    for(cnt = 0; cnt < LV_MAX_ANCESTOR_NUM; cnt++) {
        if(type.type[cnt] == NULL) break;
        if(!strcmp(type.type[cnt], "lv_btn")) return true;
 800863a:	4e0a      	ldr	r6, [pc, #40]	; (8008664 <lv_list_is_list_btn+0x30>)
 800863c:	466d      	mov	r5, sp
    lv_obj_get_type(list_btn, &type);
 800863e:	4669      	mov	r1, sp
 8008640:	f007 fa40 	bl	800fac4 <lv_obj_get_type>
        if(type.type[cnt] == NULL) break;
 8008644:	f855 0b04 	ldr.w	r0, [r5], #4
 8008648:	b138      	cbz	r0, 800865a <lv_list_is_list_btn+0x26>
        if(!strcmp(type.type[cnt], "lv_btn")) return true;
 800864a:	4631      	mov	r1, r6
 800864c:	f00e f884 	bl	8016758 <strcmp>
 8008650:	b130      	cbz	r0, 8008660 <lv_list_is_list_btn+0x2c>
 8008652:	3c01      	subs	r4, #1
    for(cnt = 0; cnt < LV_MAX_ANCESTOR_NUM; cnt++) {
 8008654:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8008658:	d1f4      	bne.n	8008644 <lv_list_is_list_btn+0x10>
    }
    return false;
 800865a:	2000      	movs	r0, #0
}
 800865c:	b008      	add	sp, #32
 800865e:	bd70      	pop	{r4, r5, r6, pc}
        if(!strcmp(type.type[cnt], "lv_btn")) return true;
 8008660:	2001      	movs	r0, #1
 8008662:	e7fb      	b.n	800865c <lv_list_is_list_btn+0x28>
 8008664:	0801c3ce 	.word	0x0801c3ce

08008668 <lv_list_add_btn>:
{
 8008668:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800866c:	4680      	mov	r8, r0
 800866e:	460f      	mov	r7, r1
 8008670:	4691      	mov	r9, r2
    lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8008672:	f007 fa25 	bl	800fac0 <lv_obj_get_ext_attr>
    ext->size++;
 8008676:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
    lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 800867a:	4605      	mov	r5, r0
    if(ancestor_btn_signal == NULL) ancestor_btn_signal = lv_obj_get_signal_cb(liste);
 800867c:	4e48      	ldr	r6, [pc, #288]	; (80087a0 <lv_list_add_btn+0x138>)
    liste = lv_btn_create(list, NULL);
 800867e:	2100      	movs	r1, #0
    ext->size++;
 8008680:	3301      	adds	r3, #1
 8008682:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    liste = lv_btn_create(list, NULL);
 8008686:	4640      	mov	r0, r8
 8008688:	f7fe fc6e 	bl	8006f68 <lv_btn_create>
    if(ancestor_btn_signal == NULL) ancestor_btn_signal = lv_obj_get_signal_cb(liste);
 800868c:	6833      	ldr	r3, [r6, #0]
    liste = lv_btn_create(list, NULL);
 800868e:	4604      	mov	r4, r0
    if(ancestor_btn_signal == NULL) ancestor_btn_signal = lv_obj_get_signal_cb(liste);
 8008690:	b913      	cbnz	r3, 8008698 <lv_list_add_btn+0x30>
 8008692:	f007 fa11 	bl	800fab8 <lv_obj_get_signal_cb>
 8008696:	6030      	str	r0, [r6, #0]
    lv_btn_set_style(liste, LV_BTN_STYLE_REL, ext->styles_btn[LV_BTN_STATE_REL]);
 8008698:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800869a:	2100      	movs	r1, #0
 800869c:	4620      	mov	r0, r4
 800869e:	f00c f856 	bl	801474e <lv_btn_set_style>
    lv_btn_set_style(liste, LV_BTN_STYLE_PR, ext->styles_btn[LV_BTN_STATE_PR]);
 80086a2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80086a4:	2101      	movs	r1, #1
 80086a6:	4620      	mov	r0, r4
 80086a8:	f00c f851 	bl	801474e <lv_btn_set_style>
    lv_btn_set_style(liste, LV_BTN_STYLE_TGL_REL, ext->styles_btn[LV_BTN_STATE_TGL_REL]);
 80086ac:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80086ae:	2102      	movs	r1, #2
 80086b0:	4620      	mov	r0, r4
 80086b2:	f00c f84c 	bl	801474e <lv_btn_set_style>
    lv_btn_set_style(liste, LV_BTN_STYLE_TGL_PR, ext->styles_btn[LV_BTN_STATE_TGL_PR]);
 80086b6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80086b8:	2103      	movs	r1, #3
 80086ba:	4620      	mov	r0, r4
 80086bc:	f00c f847 	bl	801474e <lv_btn_set_style>
    lv_btn_set_style(liste, LV_BTN_STYLE_INA, ext->styles_btn[LV_BTN_STATE_INA]);
 80086c0:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80086c2:	2104      	movs	r1, #4
 80086c4:	4620      	mov	r0, r4
 80086c6:	f00c f842 	bl	801474e <lv_btn_set_style>
    lv_page_glue_obj(liste, true);
 80086ca:	2101      	movs	r1, #1
 80086cc:	4620      	mov	r0, r4
 80086ce:	f00d f902 	bl	80158d6 <lv_page_glue_obj>
 80086d2:	2106      	movs	r1, #6
 80086d4:	4620      	mov	r0, r4
 80086d6:	f00c f9d1 	bl	8014a7c <lv_cont_set_layout>
    lv_cont_set_fit4(cont, hor, hor, ver, ver);
 80086da:	2301      	movs	r3, #1
 80086dc:	2202      	movs	r2, #2
 80086de:	4620      	mov	r0, r4
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	4611      	mov	r1, r2
 80086e4:	f00c f9df 	bl	8014aa6 <lv_cont_set_fit4>
    lv_obj_set_protect(liste, LV_PROTECT_PRESS_LOST);
 80086e8:	2110      	movs	r1, #16
 80086ea:	4620      	mov	r0, r4
 80086ec:	f006 fd09 	bl	800f102 <lv_obj_set_protect>
    lv_obj_set_signal_cb(liste, lv_list_btn_signal);
 80086f0:	492c      	ldr	r1, [pc, #176]	; (80087a4 <lv_list_add_btn+0x13c>)
 80086f2:	4620      	mov	r0, r4
 80086f4:	f006 fd71 	bl	800f1da <lv_obj_set_signal_cb>
    if(img_src) {
 80086f8:	b1b7      	cbz	r7, 8008728 <lv_list_add_btn+0xc0>
        img = lv_img_create(liste, NULL);
 80086fa:	2100      	movs	r1, #0
 80086fc:	4620      	mov	r0, r4
 80086fe:	f7fe ffc1 	bl	8007684 <lv_img_create>
 8008702:	4606      	mov	r6, r0
        lv_img_set_src(img, img_src);
 8008704:	4639      	mov	r1, r7
        if(img_signal == NULL) img_signal = lv_obj_get_signal_cb(img);
 8008706:	4f28      	ldr	r7, [pc, #160]	; (80087a8 <lv_list_add_btn+0x140>)
        lv_img_set_src(img, img_src);
 8008708:	f7fe ff0e 	bl	8007528 <lv_img_set_src>
        lv_obj_set_style(img, ext->style_img);
 800870c:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800870e:	4630      	mov	r0, r6
 8008710:	f007 f918 	bl	800f944 <lv_obj_set_style>
        lv_obj_set_click(img, false);
 8008714:	2100      	movs	r1, #0
 8008716:	4630      	mov	r0, r6
 8008718:	f006 fcc9 	bl	800f0ae <lv_obj_set_click>
        if(img_signal == NULL) img_signal = lv_obj_get_signal_cb(img);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	b91b      	cbnz	r3, 8008728 <lv_list_add_btn+0xc0>
 8008720:	4630      	mov	r0, r6
 8008722:	f007 f9c9 	bl	800fab8 <lv_obj_get_signal_cb>
 8008726:	6038      	str	r0, [r7, #0]
    if(txt != NULL) {
 8008728:	f1b9 0f00 	cmp.w	r9, #0
 800872c:	d025      	beq.n	800877a <lv_list_add_btn+0x112>
        lv_coord_t btn_hor_pad = ext->styles_btn[LV_BTN_STYLE_REL]->body.padding.left -
 800872e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        lv_obj_t * label = lv_label_create(liste, NULL);
 8008730:	2100      	movs	r1, #0
 8008732:	4620      	mov	r0, r4
                                 ext->styles_btn[LV_BTN_STYLE_REL]->body.padding.right;
 8008734:	f9b3 601c 	ldrsh.w	r6, [r3, #28]
        lv_coord_t btn_hor_pad = ext->styles_btn[LV_BTN_STYLE_REL]->body.padding.left -
 8008738:	f9b3 a01a 	ldrsh.w	sl, [r3, #26]
        lv_obj_t * label = lv_label_create(liste, NULL);
 800873c:	f002 fed2 	bl	800b4e4 <lv_label_create>
 8008740:	4607      	mov	r7, r0
        lv_label_set_text(label, txt);
 8008742:	4649      	mov	r1, r9
 8008744:	f002 fe44 	bl	800b3d0 <lv_label_set_text>
        lv_obj_set_click(label, false);
 8008748:	2100      	movs	r1, #0
 800874a:	4638      	mov	r0, r7
 800874c:	f006 fcaf 	bl	800f0ae <lv_obj_set_click>
        lv_label_set_long_mode(label, LV_LABEL_LONG_SROLL_CIRC);
 8008750:	2104      	movs	r1, #4
 8008752:	4638      	mov	r0, r7
 8008754:	f002 fe86 	bl	800b464 <lv_label_set_long_mode>
        lv_obj_set_width(label, liste->coords.x2 - label->coords.x1 - btn_hor_pad);
 8008758:	8aa1      	ldrh	r1, [r4, #20]
 800875a:	4638      	mov	r0, r7
 800875c:	4431      	add	r1, r6
 800875e:	8a3e      	ldrh	r6, [r7, #16]
 8008760:	eba1 010a 	sub.w	r1, r1, sl
 8008764:	1b89      	subs	r1, r1, r6
        if(label_signal == NULL) label_signal = lv_obj_get_signal_cb(label);
 8008766:	4e11      	ldr	r6, [pc, #68]	; (80087ac <lv_list_add_btn+0x144>)
        lv_obj_set_width(label, liste->coords.x2 - label->coords.x1 - btn_hor_pad);
 8008768:	b209      	sxth	r1, r1
 800876a:	f007 f819 	bl	800f7a0 <lv_obj_set_width>
        if(label_signal == NULL) label_signal = lv_obj_get_signal_cb(label);
 800876e:	6833      	ldr	r3, [r6, #0]
 8008770:	b91b      	cbnz	r3, 800877a <lv_list_add_btn+0x112>
 8008772:	4638      	mov	r0, r7
 8008774:	f007 f9a0 	bl	800fab8 <lv_obj_get_signal_cb>
 8008778:	6030      	str	r0, [r6, #0]
        lv_group_t * g = lv_obj_get_group(list);
 800877a:	4640      	mov	r0, r8
 800877c:	f007 f9ce 	bl	800fb1c <lv_obj_get_group>
        if(ext->size == 1 && lv_group_get_focused(g) == list) {
 8008780:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 8008784:	2b01      	cmp	r3, #1
 8008786:	d106      	bne.n	8008796 <lv_list_add_btn+0x12e>
 8008788:	f006 fbec 	bl	800ef64 <lv_group_get_focused>
 800878c:	4580      	cmp	r8, r0
 800878e:	d102      	bne.n	8008796 <lv_list_add_btn+0x12e>
            lv_list_set_btn_selected(list, liste);
 8008790:	4621      	mov	r1, r4
 8008792:	f00c fc75 	bl	8015080 <lv_list_set_btn_selected>
}
 8008796:	4620      	mov	r0, r4
 8008798:	b002      	add	sp, #8
 800879a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800879e:	bf00      	nop
 80087a0:	20028970 	.word	0x20028970
 80087a4:	08008bf1 	.word	0x08008bf1
 80087a8:	20028978 	.word	0x20028978
 80087ac:	2002897c 	.word	0x2002897c

080087b0 <lv_list_get_btn_label>:
{
 80087b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_t * label = lv_obj_get_child(btn, NULL);
 80087b4:	2100      	movs	r1, #0
{
 80087b6:	b088      	sub	sp, #32
 80087b8:	4607      	mov	r7, r0
    lv_obj_t * label = lv_obj_get_child(btn, NULL);
 80087ba:	f007 f8a1 	bl	800f900 <lv_obj_get_child>
    if(label == NULL) return NULL;
 80087be:	4604      	mov	r4, r0
 80087c0:	b1c8      	cbz	r0, 80087f6 <lv_list_get_btn_label+0x46>

    lv_obj_get_type(list_label, &type);
    uint8_t cnt;
    for(cnt = 0; cnt < LV_MAX_ANCESTOR_NUM; cnt++) {
        if(type.type[cnt] == NULL) break;
        if(!strcmp(type.type[cnt], "lv_label")) return true;
 80087c2:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8008800 <lv_list_get_btn_label+0x50>
    lv_obj_get_type(list_label, &type);
 80087c6:	466e      	mov	r6, sp
 80087c8:	2508      	movs	r5, #8
 80087ca:	4669      	mov	r1, sp
 80087cc:	4620      	mov	r0, r4
 80087ce:	f007 f979 	bl	800fac4 <lv_obj_get_type>
        if(type.type[cnt] == NULL) break;
 80087d2:	f856 0b04 	ldr.w	r0, [r6], #4
 80087d6:	b138      	cbz	r0, 80087e8 <lv_list_get_btn_label+0x38>
        if(!strcmp(type.type[cnt], "lv_label")) return true;
 80087d8:	4641      	mov	r1, r8
 80087da:	f00d ffbd 	bl	8016758 <strcmp>
 80087de:	b158      	cbz	r0, 80087f8 <lv_list_get_btn_label+0x48>
 80087e0:	3d01      	subs	r5, #1
    for(cnt = 0; cnt < LV_MAX_ANCESTOR_NUM; cnt++) {
 80087e2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80087e6:	d1f4      	bne.n	80087d2 <lv_list_get_btn_label+0x22>
        label = lv_obj_get_child(btn, label);
 80087e8:	4621      	mov	r1, r4
 80087ea:	4638      	mov	r0, r7
 80087ec:	f007 f888 	bl	800f900 <lv_obj_get_child>
        if(label == NULL) break;
 80087f0:	4604      	mov	r4, r0
 80087f2:	2800      	cmp	r0, #0
 80087f4:	d1e7      	bne.n	80087c6 <lv_list_get_btn_label+0x16>
    if(label == NULL) return NULL;
 80087f6:	2400      	movs	r4, #0
}
 80087f8:	4620      	mov	r0, r4
 80087fa:	b008      	add	sp, #32
 80087fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008800:	0801c5f4 	.word	0x0801c5f4

08008804 <lv_list_get_btn_text>:
{
 8008804:	b508      	push	{r3, lr}
    lv_obj_t * label = lv_list_get_btn_label(btn);
 8008806:	f7ff ffd3 	bl	80087b0 <lv_list_get_btn_label>
    if(label == NULL) return "";
 800880a:	b118      	cbz	r0, 8008814 <lv_list_get_btn_text+0x10>
}
 800880c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return lv_label_get_text(label);
 8008810:	f00d bae5 	b.w	8015dde <lv_label_get_text>
}
 8008814:	4800      	ldr	r0, [pc, #0]	; (8008818 <lv_list_get_btn_text+0x14>)
 8008816:	bd08      	pop	{r3, pc}
 8008818:	0801ca18 	.word	0x0801ca18

0800881c <lv_list_get_btn_img>:
{
 800881c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_t * img = lv_obj_get_child(btn, NULL);
 8008820:	2100      	movs	r1, #0
{
 8008822:	b088      	sub	sp, #32
 8008824:	4607      	mov	r7, r0
    lv_obj_t * img = lv_obj_get_child(btn, NULL);
 8008826:	f007 f86b 	bl	800f900 <lv_obj_get_child>
    if(img == NULL) return NULL;
 800882a:	4604      	mov	r4, r0
 800882c:	b1c8      	cbz	r0, 8008862 <lv_list_get_btn_img+0x46>

    lv_obj_get_type(list_img, &type);
    uint8_t cnt;
    for(cnt = 0; cnt < LV_MAX_ANCESTOR_NUM; cnt++) {
        if(type.type[cnt] == NULL) break;
        if(!strcmp(type.type[cnt], "lv_img")) return true;
 800882e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 800886c <lv_list_get_btn_img+0x50>
    lv_obj_get_type(list_img, &type);
 8008832:	466e      	mov	r6, sp
 8008834:	2508      	movs	r5, #8
 8008836:	4669      	mov	r1, sp
 8008838:	4620      	mov	r0, r4
 800883a:	f007 f943 	bl	800fac4 <lv_obj_get_type>
        if(type.type[cnt] == NULL) break;
 800883e:	f856 0b04 	ldr.w	r0, [r6], #4
 8008842:	b138      	cbz	r0, 8008854 <lv_list_get_btn_img+0x38>
        if(!strcmp(type.type[cnt], "lv_img")) return true;
 8008844:	4641      	mov	r1, r8
 8008846:	f00d ff87 	bl	8016758 <strcmp>
 800884a:	b158      	cbz	r0, 8008864 <lv_list_get_btn_img+0x48>
 800884c:	3d01      	subs	r5, #1
    for(cnt = 0; cnt < LV_MAX_ANCESTOR_NUM; cnt++) {
 800884e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8008852:	d1f4      	bne.n	800883e <lv_list_get_btn_img+0x22>
        img = lv_obj_get_child(btn, img);
 8008854:	4621      	mov	r1, r4
 8008856:	4638      	mov	r0, r7
 8008858:	f007 f852 	bl	800f900 <lv_obj_get_child>
        if(img == NULL) break;
 800885c:	4604      	mov	r4, r0
 800885e:	2800      	cmp	r0, #0
 8008860:	d1e7      	bne.n	8008832 <lv_list_get_btn_img+0x16>
    if(img == NULL) return NULL;
 8008862:	2400      	movs	r4, #0
}
 8008864:	4620      	mov	r0, r4
 8008866:	b008      	add	sp, #32
 8008868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800886c:	0801c4a1 	.word	0x0801c4a1

08008870 <lv_list_create>:
{
 8008870:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008874:	460e      	mov	r6, r1
    lv_obj_t * new_list = lv_page_create(par, copy);
 8008876:	f000 fc2f 	bl	80090d8 <lv_page_create>
    lv_mem_assert(new_list);
 800887a:	4604      	mov	r4, r0
 800887c:	b930      	cbnz	r0, 800888c <lv_list_create+0x1c>
 800887e:	4b65      	ldr	r3, [pc, #404]	; (8008a14 <lv_list_create+0x1a4>)
 8008880:	224c      	movs	r2, #76	; 0x4c
 8008882:	4965      	ldr	r1, [pc, #404]	; (8008a18 <lv_list_create+0x1a8>)
 8008884:	2003      	movs	r0, #3
 8008886:	f7fa fec5 	bl	8003614 <lv_log_add>
 800888a:	e7fe      	b.n	800888a <lv_list_create+0x1a>
    if(ancestor_page_signal == NULL) ancestor_page_signal = lv_obj_get_signal_cb(new_list);
 800888c:	4d63      	ldr	r5, [pc, #396]	; (8008a1c <lv_list_create+0x1ac>)
 800888e:	682b      	ldr	r3, [r5, #0]
 8008890:	b913      	cbnz	r3, 8008898 <lv_list_create+0x28>
 8008892:	f007 f911 	bl	800fab8 <lv_obj_get_signal_cb>
 8008896:	6028      	str	r0, [r5, #0]
    lv_list_ext_t * ext = lv_obj_allocate_ext_attr(new_list, sizeof(lv_list_ext_t));
 8008898:	2154      	movs	r1, #84	; 0x54
 800889a:	4620      	mov	r0, r4
 800889c:	f006 fca1 	bl	800f1e2 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 80088a0:	b930      	cbnz	r0, 80088b0 <lv_list_create+0x40>
 80088a2:	4b5c      	ldr	r3, [pc, #368]	; (8008a14 <lv_list_create+0x1a4>)
 80088a4:	2252      	movs	r2, #82	; 0x52
 80088a6:	495c      	ldr	r1, [pc, #368]	; (8008a18 <lv_list_create+0x1a8>)
 80088a8:	2003      	movs	r0, #3
 80088aa:	f7fa feb3 	bl	8003614 <lv_log_add>
 80088ae:	e7fe      	b.n	80088ae <lv_list_create+0x3e>
    ext->styles_btn[LV_BTN_STATE_REL]     = &lv_style_btn_rel;
 80088b0:	4b5b      	ldr	r3, [pc, #364]	; (8008a20 <lv_list_create+0x1b0>)
    ext->style_img                        = NULL;
 80088b2:	2500      	movs	r5, #0
    lv_obj_set_signal_cb(new_list, lv_list_signal);
 80088b4:	495b      	ldr	r1, [pc, #364]	; (8008a24 <lv_list_create+0x1b4>)
    ext->styles_btn[LV_BTN_STATE_REL]     = &lv_style_btn_rel;
 80088b6:	6303      	str	r3, [r0, #48]	; 0x30
    ext->styles_btn[LV_BTN_STATE_PR]      = &lv_style_btn_pr;
 80088b8:	4b5b      	ldr	r3, [pc, #364]	; (8008a28 <lv_list_create+0x1b8>)
    ext->style_img                        = NULL;
 80088ba:	6445      	str	r5, [r0, #68]	; 0x44
    ext->styles_btn[LV_BTN_STATE_PR]      = &lv_style_btn_pr;
 80088bc:	6343      	str	r3, [r0, #52]	; 0x34
    ext->styles_btn[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 80088be:	4b5b      	ldr	r3, [pc, #364]	; (8008a2c <lv_list_create+0x1bc>)
    ext->size                             = 0;
 80088c0:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
    ext->styles_btn[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 80088c4:	6383      	str	r3, [r0, #56]	; 0x38
    ext->styles_btn[LV_BTN_STATE_TGL_PR]  = &lv_style_btn_tgl_pr;
 80088c6:	4b5a      	ldr	r3, [pc, #360]	; (8008a30 <lv_list_create+0x1c0>)
 80088c8:	63c3      	str	r3, [r0, #60]	; 0x3c
    ext->styles_btn[LV_BTN_STATE_INA]     = &lv_style_btn_ina;
 80088ca:	4b5a      	ldr	r3, [pc, #360]	; (8008a34 <lv_list_create+0x1c4>)
 80088cc:	6403      	str	r3, [r0, #64]	; 0x40
    ext->single_mode                      = false;
 80088ce:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
 80088d2:	f365 0300 	bfi	r3, r5, #0, #1
    ext->selected_btn = NULL;
 80088d6:	e9c0 5513 	strd	r5, r5, [r0, #76]	; 0x4c
    ext->single_mode                      = false;
 80088da:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
    lv_obj_set_signal_cb(new_list, lv_list_signal);
 80088de:	4620      	mov	r0, r4
 80088e0:	f006 fc7b 	bl	800f1da <lv_obj_set_signal_cb>
    if(copy == NULL) {
 80088e4:	2e00      	cmp	r6, #0
 80088e6:	d15d      	bne.n	80089a4 <lv_list_create+0x134>
        lv_page_set_anim_time(new_list, LV_LIST_DEF_ANIM_TIME);
 80088e8:	2164      	movs	r1, #100	; 0x64
 80088ea:	4620      	mov	r0, r4
 80088ec:	f00c ff2e 	bl	801574c <lv_page_set_anim_time>
 * @param hot horizontal fit policy from `lv_fit_t`
 * @param ver vertical fit policy from `lv_fit_t`
 */
static inline void lv_page_set_scrl_fit2(lv_obj_t * page, lv_fit_t hor, lv_fit_t ver)
{
    lv_cont_set_fit2(lv_page_get_scrl(page), hor, ver);
 80088f0:	4620      	mov	r0, r4
 80088f2:	f00c ff6c 	bl	80157ce <lv_page_get_scrl>
 80088f6:	2701      	movs	r7, #1
 80088f8:	2202      	movs	r2, #2
 80088fa:	463b      	mov	r3, r7
 80088fc:	9700      	str	r7, [sp, #0]
 80088fe:	4611      	mov	r1, r2
 8008900:	f00c f8d1 	bl	8014aa6 <lv_cont_set_fit4>
        lv_obj_set_size(new_list, 2 * LV_DPI, 3 * LV_DPI);
 8008904:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008908:	21c8      	movs	r1, #200	; 0xc8
 800890a:	4620      	mov	r0, r4
 800890c:	f006 fefe 	bl	800f70c <lv_obj_set_size>
 * @param page pointer to a page object
 * @param layout a layout from 'lv_cont_layout_t'
 */
static inline void lv_page_set_scrl_layout(lv_obj_t * page, lv_layout_t layout)
{
    lv_cont_set_layout(lv_page_get_scrl(page), layout);
 8008910:	4620      	mov	r0, r4
 8008912:	f00c ff5c 	bl	80157ce <lv_page_get_scrl>
 8008916:	2103      	movs	r1, #3
 8008918:	f00c f8b0 	bl	8014a7c <lv_cont_set_layout>
 * @param list pointer to a list object
 * @param sb_mode the new mode from 'lv_page_sb_mode_t' enum
 */
static inline void lv_list_set_sb_mode(lv_obj_t * list, lv_sb_mode_t mode)
{
    lv_page_set_sb_mode(list, mode);
 800891c:	2102      	movs	r1, #2
 800891e:	4620      	mov	r0, r4
 8008920:	f00c fee9 	bl	80156f6 <lv_page_set_sb_mode>
        lv_theme_t * th = lv_theme_get_current();
 8008924:	f7fc fd92 	bl	800544c <lv_theme_get_current>
        if(th) {
 8008928:	4605      	mov	r5, r0
 800892a:	b398      	cbz	r0, 8008994 <lv_list_create+0x124>
            lv_list_set_style(new_list, LV_LIST_STYLE_BG, th->style.list.bg);
 800892c:	f8d0 212c 	ldr.w	r2, [r0, #300]	; 0x12c
 8008930:	4631      	mov	r1, r6
 8008932:	4620      	mov	r0, r4
 8008934:	f00c fbe7 	bl	8015106 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_SCRL, th->style.list.scrl);
 8008938:	f8d5 2130 	ldr.w	r2, [r5, #304]	; 0x130
 800893c:	4639      	mov	r1, r7
 800893e:	4620      	mov	r0, r4
 8008940:	f00c fbe1 	bl	8015106 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_SB, th->style.list.sb);
 8008944:	f8d5 2134 	ldr.w	r2, [r5, #308]	; 0x134
 8008948:	2102      	movs	r1, #2
 800894a:	4620      	mov	r0, r4
 800894c:	f00c fbdb 	bl	8015106 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_BTN_REL, th->style.list.btn.rel);
 8008950:	f8d5 2138 	ldr.w	r2, [r5, #312]	; 0x138
 8008954:	2104      	movs	r1, #4
 8008956:	4620      	mov	r0, r4
 8008958:	f00c fbd5 	bl	8015106 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_BTN_PR, th->style.list.btn.pr);
 800895c:	f8d5 213c 	ldr.w	r2, [r5, #316]	; 0x13c
 8008960:	2105      	movs	r1, #5
 8008962:	4620      	mov	r0, r4
 8008964:	f00c fbcf 	bl	8015106 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_BTN_TGL_REL, th->style.list.btn.tgl_rel);
 8008968:	f8d5 2140 	ldr.w	r2, [r5, #320]	; 0x140
 800896c:	2106      	movs	r1, #6
 800896e:	4620      	mov	r0, r4
 8008970:	f00c fbc9 	bl	8015106 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_BTN_TGL_PR, th->style.list.btn.tgl_pr);
 8008974:	f8d5 2144 	ldr.w	r2, [r5, #324]	; 0x144
 8008978:	2107      	movs	r1, #7
 800897a:	4620      	mov	r0, r4
 800897c:	f00c fbc3 	bl	8015106 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_BTN_INA, th->style.list.btn.ina);
 8008980:	f8d5 2148 	ldr.w	r2, [r5, #328]	; 0x148
 8008984:	2108      	movs	r1, #8
            lv_list_set_style(new_list, LV_LIST_STYLE_SCRL, &lv_style_pretty);
 8008986:	4620      	mov	r0, r4
 8008988:	f00c fbbd 	bl	8015106 <lv_list_set_style>
}
 800898c:	4620      	mov	r0, r4
 800898e:	b002      	add	sp, #8
 8008990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            lv_list_set_style(new_list, LV_LIST_STYLE_BG, &lv_style_transp_fit);
 8008994:	4a28      	ldr	r2, [pc, #160]	; (8008a38 <lv_list_create+0x1c8>)
 8008996:	4631      	mov	r1, r6
 8008998:	4620      	mov	r0, r4
 800899a:	f00c fbb4 	bl	8015106 <lv_list_set_style>
            lv_list_set_style(new_list, LV_LIST_STYLE_SCRL, &lv_style_pretty);
 800899e:	4a27      	ldr	r2, [pc, #156]	; (8008a3c <lv_list_create+0x1cc>)
 80089a0:	4639      	mov	r1, r7
 80089a2:	e7f0      	b.n	8008986 <lv_list_create+0x116>
        lv_list_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 80089a4:	4630      	mov	r0, r6
 80089a6:	f007 f88b 	bl	800fac0 <lv_obj_get_ext_attr>
 80089aa:	4607      	mov	r7, r0
            copy_btn = lv_list_get_next_btn(copy, copy_btn);
 80089ac:	4629      	mov	r1, r5
 80089ae:	4630      	mov	r0, r6
 80089b0:	f00c fbf2 	bl	8015198 <lv_list_get_next_btn>
 80089b4:	4605      	mov	r5, r0
        while(copy_btn) {
 80089b6:	b9e0      	cbnz	r0, 80089f2 <lv_list_create+0x182>
        lv_list_set_style(new_list, LV_LIST_STYLE_BTN_REL, copy_ext->styles_btn[LV_BTN_STATE_REL]);
 80089b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089ba:	4620      	mov	r0, r4
 80089bc:	2104      	movs	r1, #4
 80089be:	f00c fba2 	bl	8015106 <lv_list_set_style>
        lv_list_set_style(new_list, LV_LIST_STYLE_BTN_PR, copy_ext->styles_btn[LV_BTN_STATE_PR]);
 80089c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089c4:	4620      	mov	r0, r4
 80089c6:	2105      	movs	r1, #5
 80089c8:	f00c fb9d 	bl	8015106 <lv_list_set_style>
        lv_list_set_style(new_list, LV_LIST_STYLE_BTN_TGL_REL, copy_ext->styles_btn[LV_BTN_STATE_TGL_REL]);
 80089cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089ce:	4620      	mov	r0, r4
 80089d0:	2106      	movs	r1, #6
 80089d2:	f00c fb98 	bl	8015106 <lv_list_set_style>
        lv_list_set_style(new_list, LV_LIST_STYLE_BTN_TGL_PR, copy_ext->styles_btn[LV_BTN_STATE_TGL_REL]);
 80089d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089d8:	4620      	mov	r0, r4
 80089da:	2107      	movs	r1, #7
 80089dc:	f00c fb93 	bl	8015106 <lv_list_set_style>
        lv_list_set_style(new_list, LV_LIST_STYLE_BTN_INA, copy_ext->styles_btn[LV_BTN_STATE_INA]);
 80089e0:	4620      	mov	r0, r4
 80089e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089e4:	2108      	movs	r1, #8
 80089e6:	f00c fb8e 	bl	8015106 <lv_list_set_style>
        lv_obj_refresh_style(new_list);
 80089ea:	4620      	mov	r0, r4
 80089ec:	f006 fee7 	bl	800f7be <lv_obj_refresh_style>
    return new_list;
 80089f0:	e7cc      	b.n	800898c <lv_list_create+0x11c>
            lv_obj_t * copy_img = lv_list_get_btn_img(copy_btn);
 80089f2:	4628      	mov	r0, r5
 80089f4:	f7ff ff12 	bl	800881c <lv_list_get_btn_img>
            if(copy_img) img_src = lv_img_get_src(copy_img);
 80089f8:	4680      	mov	r8, r0
 80089fa:	b110      	cbz	r0, 8008a02 <lv_list_create+0x192>
 80089fc:	f00b fed6 	bl	80147ac <lv_img_get_src>
 8008a00:	4680      	mov	r8, r0
            lv_list_add_btn(new_list, img_src, lv_list_get_btn_text(copy_btn));
 8008a02:	4628      	mov	r0, r5
 8008a04:	f7ff fefe 	bl	8008804 <lv_list_get_btn_text>
 8008a08:	4641      	mov	r1, r8
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	f7ff fe2b 	bl	8008668 <lv_list_add_btn>
 8008a12:	e7cb      	b.n	80089ac <lv_list_create+0x13c>
 8008a14:	080176f4 	.word	0x080176f4
 8008a18:	0801c593 	.word	0x0801c593
 8008a1c:	20028974 	.word	0x20028974
 8008a20:	20020470 	.word	0x20020470
 8008a24:	08008a41 	.word	0x08008a41
 8008a28:	20020434 	.word	0x20020434
 8008a2c:	200204e8 	.word	0x200204e8
 8008a30:	200204ac 	.word	0x200204ac
 8008a34:	200203f8 	.word	0x200203f8
 8008a38:	2002068c 	.word	0x2002068c
 8008a3c:	2002059c 	.word	0x2002059c

08008a40 <lv_list_signal>:
    res = ancestor_page_signal(list, sign, param);
 8008a40:	4b68      	ldr	r3, [pc, #416]	; (8008be4 <lv_list_signal+0x1a4>)
{
 8008a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_page_signal(list, sign, param);
 8008a46:	681b      	ldr	r3, [r3, #0]
{
 8008a48:	4604      	mov	r4, r0
 8008a4a:	460f      	mov	r7, r1
 8008a4c:	4615      	mov	r5, r2
    res = ancestor_page_signal(list, sign, param);
 8008a4e:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8008a50:	2801      	cmp	r0, #1
    res = ancestor_page_signal(list, sign, param);
 8008a52:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
 8008a54:	d129      	bne.n	8008aaa <lv_list_signal+0x6a>
    if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESSED || sign == LV_SIGNAL_PRESSING ||
 8008a56:	f1a7 030a 	sub.w	r3, r7, #10
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	d902      	bls.n	8008a64 <lv_list_signal+0x24>
 8008a5e:	1ffb      	subs	r3, r7, #7
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d85a      	bhi.n	8008b1a <lv_list_signal+0xda>
        lv_indev_t * indev         = lv_indev_get_act();
 8008a64:	f7f9 ff0e 	bl	8002884 <lv_indev_get_act>
 8008a68:	4680      	mov	r8, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8008a6a:	f006 fab7 	bl	800efdc <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_KEYPAD ||
 8008a6e:	2802      	cmp	r0, #2
 8008a70:	d112      	bne.n	8008a98 <lv_list_signal+0x58>
            btn            = lv_list_get_prev_btn(list, btn);
 8008a72:	2100      	movs	r1, #0
                btn = lv_list_get_prev_btn(list, btn);
 8008a74:	4620      	mov	r0, r4
 8008a76:	f00c fb32 	bl	80150de <lv_list_get_prev_btn>
 8008a7a:	4605      	mov	r5, r0
            while(btn != NULL) {
 8008a7c:	b9c0      	cbnz	r0, 8008ab0 <lv_list_signal+0x70>
            lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8008a7e:	4620      	mov	r0, r4
 8008a80:	f007 f81e 	bl	800fac0 <lv_obj_get_ext_attr>
            if(btn) {
 8008a84:	b18d      	cbz	r5, 8008aaa <lv_list_signal+0x6a>
                if(sign == LV_SIGNAL_PRESSED) {
 8008a86:	2f07      	cmp	r7, #7
 8008a88:	d119      	bne.n	8008abe <lv_list_signal+0x7e>
                    res = lv_event_send(btn, LV_EVENT_PRESSED, NULL);
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	4611      	mov	r1, r2
                        res = lv_event_send(btn, LV_EVENT_RELEASED, NULL);
 8008a8e:	4628      	mov	r0, r5
}
 8008a90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                        res = lv_event_send(btn, LV_EVENT_RELEASED, NULL);
 8008a94:	f006 bb44 	b.w	800f120 <lv_event_send>
        if(indev_type == LV_INDEV_TYPE_KEYPAD ||
 8008a98:	2804      	cmp	r0, #4
 8008a9a:	d106      	bne.n	8008aaa <lv_list_signal+0x6a>
           (indev_type == LV_INDEV_TYPE_ENCODER && lv_group_get_editing(lv_obj_get_group(list)))) {
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	f007 f83d 	bl	800fb1c <lv_obj_get_group>
 8008aa2:	f006 fa86 	bl	800efb2 <lv_group_get_editing>
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	d1e3      	bne.n	8008a72 <lv_list_signal+0x32>
}
 8008aaa:	4630      	mov	r0, r6
 8008aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if(lv_btn_get_state(btn) == LV_BTN_STATE_PR) break;
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	f00b fe6d 	bl	8014790 <lv_btn_get_state>
 8008ab6:	2801      	cmp	r0, #1
 8008ab8:	d0e1      	beq.n	8008a7e <lv_list_signal+0x3e>
                btn = lv_list_get_prev_btn(list, btn);
 8008aba:	4629      	mov	r1, r5
 8008abc:	e7da      	b.n	8008a74 <lv_list_signal+0x34>
                } else if(sign == LV_SIGNAL_PRESSING) {
 8008abe:	2f08      	cmp	r7, #8
 8008ac0:	d102      	bne.n	8008ac8 <lv_list_signal+0x88>
                    res = lv_event_send(btn, LV_EVENT_PRESSING, NULL);
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	e7e2      	b.n	8008a8e <lv_list_signal+0x4e>
                } else if(sign == LV_SIGNAL_LONG_PRESS) {
 8008ac8:	2f0b      	cmp	r7, #11
 8008aca:	d102      	bne.n	8008ad2 <lv_list_signal+0x92>
                    res = lv_event_send(btn, LV_EVENT_LONG_PRESSED, NULL);
 8008acc:	2200      	movs	r2, #0
 8008ace:	2104      	movs	r1, #4
 8008ad0:	e7dd      	b.n	8008a8e <lv_list_signal+0x4e>
                } else if(sign == LV_SIGNAL_LONG_PRESS_REP) {
 8008ad2:	2f0c      	cmp	r7, #12
 8008ad4:	d102      	bne.n	8008adc <lv_list_signal+0x9c>
                    res = lv_event_send(btn, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	2105      	movs	r1, #5
 8008ada:	e7d8      	b.n	8008a8e <lv_list_signal+0x4e>
                } else if(sign == LV_SIGNAL_RELEASED) {
 8008adc:	2f0a      	cmp	r7, #10
 8008ade:	d1e4      	bne.n	8008aaa <lv_list_signal+0x6a>
                    if(indev->proc.long_pr_sent == 0) {
 8008ae0:	f898 6050 	ldrb.w	r6, [r8, #80]	; 0x50
                    ext->last_sel = btn;
 8008ae4:	64c5      	str	r5, [r0, #76]	; 0x4c
                    if(indev->proc.long_pr_sent == 0) {
 8008ae6:	f016 0601 	ands.w	r6, r6, #1
 8008aea:	d105      	bne.n	8008af8 <lv_list_signal+0xb8>
                        res = lv_event_send(btn, LV_EVENT_SHORT_CLICKED, NULL);
 8008aec:	4632      	mov	r2, r6
 8008aee:	2103      	movs	r1, #3
 8008af0:	4628      	mov	r0, r5
 8008af2:	f006 fb15 	bl	800f120 <lv_event_send>
 8008af6:	4606      	mov	r6, r0
                    if(lv_indev_is_dragging(indev) == false && res == LV_RES_OK) {
 8008af8:	4640      	mov	r0, r8
 8008afa:	f006 fa9b 	bl	800f034 <lv_indev_is_dragging>
 8008afe:	4602      	mov	r2, r0
 8008b00:	b930      	cbnz	r0, 8008b10 <lv_list_signal+0xd0>
 8008b02:	2e01      	cmp	r6, #1
 8008b04:	d1d1      	bne.n	8008aaa <lv_list_signal+0x6a>
                        res = lv_event_send(btn, LV_EVENT_CLICKED, NULL);
 8008b06:	2106      	movs	r1, #6
 8008b08:	4628      	mov	r0, r5
 8008b0a:	f006 fb09 	bl	800f120 <lv_event_send>
 8008b0e:	4606      	mov	r6, r0
                    if(res == LV_RES_OK) {
 8008b10:	2e01      	cmp	r6, #1
 8008b12:	d1ca      	bne.n	8008aaa <lv_list_signal+0x6a>
                        res = lv_event_send(btn, LV_EVENT_RELEASED, NULL);
 8008b14:	2200      	movs	r2, #0
 8008b16:	2107      	movs	r1, #7
 8008b18:	e7b9      	b.n	8008a8e <lv_list_signal+0x4e>
    } else if(sign == LV_SIGNAL_FOCUS) {
 8008b1a:	2f0f      	cmp	r7, #15
 8008b1c:	d11f      	bne.n	8008b5e <lv_list_signal+0x11e>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8008b1e:	f7f9 feb1 	bl	8002884 <lv_indev_get_act>
 8008b22:	f006 fa5b 	bl	800efdc <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8008b26:	2804      	cmp	r0, #4
 8008b28:	d111      	bne.n	8008b4e <lv_list_signal+0x10e>
            lv_group_t * g = lv_obj_get_group(list);
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f006 fff6 	bl	800fb1c <lv_obj_get_group>
            if(lv_group_get_editing(g)) {
 8008b30:	f006 fa3f 	bl	800efb2 <lv_group_get_editing>
 8008b34:	4601      	mov	r1, r0
                lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8008b36:	4620      	mov	r0, r4
            if(lv_group_get_editing(g)) {
 8008b38:	b171      	cbz	r1, 8008b58 <lv_list_signal+0x118>
                lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8008b3a:	f006 ffc1 	bl	800fac0 <lv_obj_get_ext_attr>
                if(ext->last_sel) {
 8008b3e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
                    lv_list_set_btn_selected(list, ext->last_sel);
 8008b40:	4620      	mov	r0, r4
                if(ext->last_sel) {
 8008b42:	b949      	cbnz	r1, 8008b58 <lv_list_signal+0x118>
                    lv_list_set_btn_selected(list, lv_list_get_next_btn(list, NULL));
 8008b44:	f00c fb28 	bl	8015198 <lv_list_get_next_btn>
 8008b48:	4601      	mov	r1, r0
                if(btn_next) lv_list_set_btn_selected(list, btn_next);
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	e004      	b.n	8008b58 <lv_list_signal+0x118>
            if(last_clicked_btn) {
 8008b4e:	4b26      	ldr	r3, [pc, #152]	; (8008be8 <lv_list_signal+0x1a8>)
                lv_list_set_btn_selected(list, last_clicked_btn);
 8008b50:	4620      	mov	r0, r4
            if(last_clicked_btn) {
 8008b52:	6819      	ldr	r1, [r3, #0]
 8008b54:	2900      	cmp	r1, #0
 8008b56:	d0f0      	beq.n	8008b3a <lv_list_signal+0xfa>
                if(btn_next) lv_list_set_btn_selected(list, btn_next);
 8008b58:	f00c fa92 	bl	8015080 <lv_list_set_btn_selected>
 8008b5c:	e7a5      	b.n	8008aaa <lv_list_signal+0x6a>
    } else if(sign == LV_SIGNAL_DEFOCUS) {
 8008b5e:	2f10      	cmp	r7, #16
 8008b60:	d10b      	bne.n	8008b7a <lv_list_signal+0x13a>
        lv_list_set_btn_selected(list, NULL);
 8008b62:	2100      	movs	r1, #0
 8008b64:	4620      	mov	r0, r4
 8008b66:	f00c fa8b 	bl	8015080 <lv_list_set_btn_selected>
        last_clicked_btn    = NULL; /*button click will be set if click happens before focus*/
 8008b6a:	2500      	movs	r5, #0
 8008b6c:	4b1e      	ldr	r3, [pc, #120]	; (8008be8 <lv_list_signal+0x1a8>)
        lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8008b6e:	4620      	mov	r0, r4
        last_clicked_btn    = NULL; /*button click will be set if click happens before focus*/
 8008b70:	601d      	str	r5, [r3, #0]
        lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8008b72:	f006 ffa5 	bl	800fac0 <lv_obj_get_ext_attr>
        ext->selected_btn   = NULL;
 8008b76:	6505      	str	r5, [r0, #80]	; 0x50
 8008b78:	e797      	b.n	8008aaa <lv_list_signal+0x6a>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 8008b7a:	2f12      	cmp	r7, #18
 8008b7c:	d101      	bne.n	8008b82 <lv_list_signal+0x142>
        *editable       = true;
 8008b7e:	7028      	strb	r0, [r5, #0]
 8008b80:	e793      	b.n	8008aaa <lv_list_signal+0x6a>
    } else if(sign == LV_SIGNAL_CONTROL) {
 8008b82:	2f11      	cmp	r7, #17
 8008b84:	d11d      	bne.n	8008bc2 <lv_list_signal+0x182>
        char c = *((char *)param);
 8008b86:	782b      	ldrb	r3, [r5, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 8008b88:	f1a3 0212 	sub.w	r2, r3, #18
 8008b8c:	2a01      	cmp	r2, #1
 8008b8e:	d807      	bhi.n	8008ba0 <lv_list_signal+0x160>
            lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8008b90:	4620      	mov	r0, r4
 8008b92:	f006 ff95 	bl	800fac0 <lv_obj_get_ext_attr>
            if(ext->selected_btn) {
 8008b96:	6d01      	ldr	r1, [r0, #80]	; 0x50
                lv_obj_t * btn_prev = lv_list_get_next_btn(list, ext->selected_btn);
 8008b98:	4620      	mov	r0, r4
                lv_obj_t * btn = lv_list_get_next_btn(list, NULL);
 8008b9a:	f00c fafd 	bl	8015198 <lv_list_get_next_btn>
 8008b9e:	e00c      	b.n	8008bba <lv_list_signal+0x17a>
        } else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 8008ba0:	2b14      	cmp	r3, #20
 8008ba2:	d001      	beq.n	8008ba8 <lv_list_signal+0x168>
 8008ba4:	2b11      	cmp	r3, #17
 8008ba6:	d180      	bne.n	8008aaa <lv_list_signal+0x6a>
            lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8008ba8:	4620      	mov	r0, r4
 8008baa:	f006 ff89 	bl	800fac0 <lv_obj_get_ext_attr>
            if(ext->selected_btn != NULL) {
 8008bae:	6d01      	ldr	r1, [r0, #80]	; 0x50
                lv_obj_t * btn_next = lv_list_get_prev_btn(list, ext->selected_btn);
 8008bb0:	4620      	mov	r0, r4
            if(ext->selected_btn != NULL) {
 8008bb2:	2900      	cmp	r1, #0
 8008bb4:	d0f1      	beq.n	8008b9a <lv_list_signal+0x15a>
                lv_obj_t * btn_next = lv_list_get_prev_btn(list, ext->selected_btn);
 8008bb6:	f00c fa92 	bl	80150de <lv_list_get_prev_btn>
                if(btn_next) lv_list_set_btn_selected(list, btn_next);
 8008bba:	4601      	mov	r1, r0
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	d1c4      	bne.n	8008b4a <lv_list_signal+0x10a>
 8008bc0:	e773      	b.n	8008aaa <lv_list_signal+0x6a>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8008bc2:	2f06      	cmp	r7, #6
 8008bc4:	f47f af71 	bne.w	8008aaa <lv_list_signal+0x6a>
 8008bc8:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8008bca:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8008bce:	b2da      	uxtb	r2, r3
 8008bd0:	b119      	cbz	r1, 8008bda <lv_list_signal+0x19a>
 8008bd2:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8008bd4:	2b07      	cmp	r3, #7
 8008bd6:	d1f8      	bne.n	8008bca <lv_list_signal+0x18a>
 8008bd8:	461a      	mov	r2, r3
        buf->type[i] = "lv_list";
 8008bda:	4b04      	ldr	r3, [pc, #16]	; (8008bec <lv_list_signal+0x1ac>)
 8008bdc:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 8008be0:	e763      	b.n	8008aaa <lv_list_signal+0x6a>
 8008be2:	bf00      	nop
 8008be4:	20028974 	.word	0x20028974
 8008be8:	20028980 	.word	0x20028980
 8008bec:	0801c5fd 	.word	0x0801c5fd

08008bf0 <lv_list_btn_signal>:
    res = ancestor_btn_signal(btn, sign, param);
 8008bf0:	4b46      	ldr	r3, [pc, #280]	; (8008d0c <lv_list_btn_signal+0x11c>)
{
 8008bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_btn_signal(btn, sign, param);
 8008bf6:	681b      	ldr	r3, [r3, #0]
{
 8008bf8:	4604      	mov	r4, r0
 8008bfa:	460d      	mov	r5, r1
    res = ancestor_btn_signal(btn, sign, param);
 8008bfc:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8008bfe:	2801      	cmp	r0, #1
    res = ancestor_btn_signal(btn, sign, param);
 8008c00:	4680      	mov	r8, r0
    if(res != LV_RES_OK) return res;
 8008c02:	d14b      	bne.n	8008c9c <lv_list_btn_signal+0xac>
    if(sign == LV_SIGNAL_RELEASED) {
 8008c04:	2d0a      	cmp	r5, #10
 8008c06:	d15b      	bne.n	8008cc0 <lv_list_btn_signal+0xd0>
        lv_obj_t * list          = lv_obj_get_parent(lv_obj_get_parent(btn));
 8008c08:	4620      	mov	r0, r4
 8008c0a:	f006 fe77 	bl	800f8fc <lv_obj_get_parent>
 8008c0e:	f006 fe75 	bl	800f8fc <lv_obj_get_parent>
 8008c12:	4606      	mov	r6, r0
        lv_list_ext_t * ext      = lv_obj_get_ext_attr(list);
 8008c14:	f006 ff54 	bl	800fac0 <lv_obj_get_ext_attr>
        ext->page.scroll_prop_ip = 0;
 8008c18:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
        lv_list_ext_t * ext      = lv_obj_get_ext_attr(list);
 8008c1c:	4607      	mov	r7, r0
        ext->page.scroll_prop_ip = 0;
 8008c1e:	f36f 0341 	bfc	r3, #1, #1
 8008c22:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
        lv_group_t * g = lv_obj_get_group(list);
 8008c26:	4630      	mov	r0, r6
 8008c28:	f006 ff78 	bl	800fb1c <lv_obj_get_group>
        if(lv_group_get_focused(g) == list && lv_indev_is_dragging(lv_indev_get_act()) == false) {
 8008c2c:	f006 f99a 	bl	800ef64 <lv_group_get_focused>
 8008c30:	4286      	cmp	r6, r0
 8008c32:	d10e      	bne.n	8008c52 <lv_list_btn_signal+0x62>
 8008c34:	f7f9 fe26 	bl	8002884 <lv_indev_get_act>
 8008c38:	f006 f9fc 	bl	800f034 <lv_indev_is_dragging>
 8008c3c:	4601      	mov	r1, r0
 8008c3e:	b940      	cbnz	r0, 8008c52 <lv_list_btn_signal+0x62>
                btn_i = lv_list_get_prev_btn(list, btn_i);
 8008c40:	4630      	mov	r0, r6
 8008c42:	f00c fa4c 	bl	80150de <lv_list_get_prev_btn>
 8008c46:	4605      	mov	r5, r0
            while(btn_i) {
 8008c48:	bb58      	cbnz	r0, 8008ca2 <lv_list_btn_signal+0xb2>
            lv_list_set_btn_selected(list, btn);
 8008c4a:	4621      	mov	r1, r4
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	f00c fa17 	bl	8015080 <lv_list_set_btn_selected>
        last_clicked_btn = btn;
 8008c52:	4b2f      	ldr	r3, [pc, #188]	; (8008d10 <lv_list_btn_signal+0x120>)
 8008c54:	601c      	str	r4, [r3, #0]
        if(lv_indev_is_dragging(lv_indev_get_act()) == false && ext->single_mode) {
 8008c56:	f7f9 fe15 	bl	8002884 <lv_indev_get_act>
 8008c5a:	f006 f9eb 	bl	800f034 <lv_indev_is_dragging>
 8008c5e:	4605      	mov	r5, r0
 8008c60:	b9e0      	cbnz	r0, 8008c9c <lv_list_btn_signal+0xac>
 8008c62:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8008c66:	07db      	lsls	r3, r3, #31
 8008c68:	d518      	bpl.n	8008c9c <lv_list_btn_signal+0xac>
    lv_obj_t * list = lv_obj_get_parent(lv_obj_get_parent(btn));
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f006 fe46 	bl	800f8fc <lv_obj_get_parent>
 8008c70:	f006 fe44 	bl	800f8fc <lv_obj_get_parent>
    lv_obj_t * e = lv_list_get_next_btn(list, NULL);
 8008c74:	4629      	mov	r1, r5
    lv_obj_t * list = lv_obj_get_parent(lv_obj_get_parent(btn));
 8008c76:	4606      	mov	r6, r0
    lv_obj_t * e = lv_list_get_next_btn(list, NULL);
 8008c78:	f00c fa8e 	bl	8015198 <lv_list_get_next_btn>
 8008c7c:	4605      	mov	r5, r0
        if(e == btn) {
 8008c7e:	42ac      	cmp	r4, r5
            lv_btn_set_state(e, LV_BTN_STATE_REL);
 8008c80:	bf13      	iteet	ne
 8008c82:	4628      	movne	r0, r5
            lv_btn_set_state(e, LV_BTN_STATE_TGL_REL);
 8008c84:	2102      	moveq	r1, #2
 8008c86:	4620      	moveq	r0, r4
            lv_btn_set_state(e, LV_BTN_STATE_REL);
 8008c88:	2100      	movne	r1, #0
 8008c8a:	f00b fd4a 	bl	8014722 <lv_btn_set_state>
        e = lv_list_get_next_btn(list, e);
 8008c8e:	4629      	mov	r1, r5
 8008c90:	4630      	mov	r0, r6
 8008c92:	f00c fa81 	bl	8015198 <lv_list_get_next_btn>
    } while(e != NULL);
 8008c96:	4605      	mov	r5, r0
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	d1f0      	bne.n	8008c7e <lv_list_btn_signal+0x8e>
}
 8008c9c:	4640      	mov	r0, r8
 8008c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                lv_btn_state_t s = lv_btn_get_state(btn_i);
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	f00b fd74 	bl	8014790 <lv_btn_get_state>
                if(s == LV_BTN_STATE_PR)
 8008ca8:	2801      	cmp	r0, #1
 8008caa:	d105      	bne.n	8008cb8 <lv_list_btn_signal+0xc8>
                    lv_btn_set_state(btn_i, LV_BTN_STATE_REL);
 8008cac:	2100      	movs	r1, #0
                    lv_btn_set_state(btn_i, LV_BTN_STATE_TGL_REL);
 8008cae:	4628      	mov	r0, r5
 8008cb0:	f00b fd37 	bl	8014722 <lv_btn_set_state>
                btn_i = lv_list_get_prev_btn(list, btn_i);
 8008cb4:	4629      	mov	r1, r5
 8008cb6:	e7c3      	b.n	8008c40 <lv_list_btn_signal+0x50>
                else if(s == LV_BTN_STATE_TGL_PR)
 8008cb8:	2803      	cmp	r0, #3
 8008cba:	d1fb      	bne.n	8008cb4 <lv_list_btn_signal+0xc4>
                    lv_btn_set_state(btn_i, LV_BTN_STATE_TGL_REL);
 8008cbc:	2102      	movs	r1, #2
 8008cbe:	e7f6      	b.n	8008cae <lv_list_btn_signal+0xbe>
    } else if(sign == LV_SIGNAL_PRESS_LOST) {
 8008cc0:	2d09      	cmp	r5, #9
 8008cc2:	d10d      	bne.n	8008ce0 <lv_list_btn_signal+0xf0>
        lv_obj_t * list          = lv_obj_get_parent(lv_obj_get_parent(btn));
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	f006 fe19 	bl	800f8fc <lv_obj_get_parent>
 8008cca:	f006 fe17 	bl	800f8fc <lv_obj_get_parent>
        lv_list_ext_t * ext      = lv_obj_get_ext_attr(list);
 8008cce:	f006 fef7 	bl	800fac0 <lv_obj_get_ext_attr>
        ext->page.scroll_prop_ip = 0;
 8008cd2:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8008cd6:	f36f 0341 	bfc	r3, #1, #1
 8008cda:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
 8008cde:	e7dd      	b.n	8008c9c <lv_list_btn_signal+0xac>
    } else if(sign == LV_SIGNAL_CLEANUP) {
 8008ce0:	2d00      	cmp	r5, #0
 8008ce2:	d1db      	bne.n	8008c9c <lv_list_btn_signal+0xac>
        lv_obj_t * list = lv_obj_get_parent(lv_obj_get_parent(btn));
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	f006 fe09 	bl	800f8fc <lv_obj_get_parent>
 8008cea:	f006 fe07 	bl	800f8fc <lv_obj_get_parent>
 8008cee:	4605      	mov	r5, r0
        lv_obj_t * sel  = lv_list_get_btn_selected(list);
 8008cf0:	f00c fa66 	bl	80151c0 <lv_list_get_btn_selected>
        if(sel == btn) lv_list_set_btn_selected(list, lv_list_get_next_btn(list, btn));
 8008cf4:	4284      	cmp	r4, r0
 8008cf6:	d1d1      	bne.n	8008c9c <lv_list_btn_signal+0xac>
 8008cf8:	4621      	mov	r1, r4
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	f00c fa4c 	bl	8015198 <lv_list_get_next_btn>
 8008d00:	4601      	mov	r1, r0
 8008d02:	4628      	mov	r0, r5
 8008d04:	f00c f9bc 	bl	8015080 <lv_list_set_btn_selected>
 8008d08:	e7c8      	b.n	8008c9c <lv_list_btn_signal+0xac>
 8008d0a:	bf00      	nop
 8008d0c:	20028970 	.word	0x20028970
 8008d10:	20028980 	.word	0x20028980

08008d14 <lv_mbox_start_auto_close>:
 * Automatically delete the message box after a given time
 * @param mbox pointer to a message box object
 * @param delay a time (in milliseconds) to wait before delete the message box
 */
void lv_mbox_start_auto_close(lv_obj_t * mbox, uint16_t delay)
{
 8008d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d18:	460c      	mov	r4, r1
 8008d1a:	b08c      	sub	sp, #48	; 0x30
 8008d1c:	4605      	mov	r5, r0
#if LV_USE_ANIMATION
    if(lv_mbox_get_anim_time(mbox) != 0) {
 8008d1e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8008dc4 <lv_mbox_start_auto_close+0xb0>
 8008d22:	4264      	negs	r4, r4
 8008d24:	f00c fa60 	bl	80151e8 <lv_mbox_get_anim_time>
 8008d28:	4f23      	ldr	r7, [pc, #140]	; (8008db8 <lv_mbox_start_auto_close+0xa4>)
 8008d2a:	b224      	sxth	r4, r4
        /*Add shrinking animations*/
        lv_anim_t a;
        a.var            = mbox;
 8008d2c:	9502      	str	r5, [sp, #8]
    if(lv_mbox_get_anim_time(mbox) != 0) {
 8008d2e:	b370      	cbz	r0, 8008d8e <lv_mbox_start_auto_close+0x7a>
        a.start          = lv_obj_get_height(mbox);
 8008d30:	4628      	mov	r0, r5
        a.end            = 0;
 8008d32:	2600      	movs	r6, #0
        a.start          = lv_obj_get_height(mbox);
 8008d34:	f006 fe2f 	bl	800f996 <lv_obj_get_height>
        a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_height;
 8008d38:	4b20      	ldr	r3, [pc, #128]	; (8008dbc <lv_mbox_start_auto_close+0xa8>)
        a.start          = lv_obj_get_height(mbox);
 8008d3a:	9006      	str	r0, [sp, #24]
        a.path_cb        = lv_anim_path_linear;
        a.ready_cb       = NULL;
        a.act_time       = -delay;
        a.time           = lv_mbox_get_anim_time(mbox);
 8008d3c:	4628      	mov	r0, r5
        a.end            = 0;
 8008d3e:	9607      	str	r6, [sp, #28]
        a.ready_cb       = NULL;
 8008d40:	9605      	str	r6, [sp, #20]
        a.act_time       = -delay;
 8008d42:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
        a.path_cb        = lv_anim_path_linear;
 8008d46:	e9cd 3803 	strd	r3, r8, [sp, #12]
        a.time           = lv_mbox_get_anim_time(mbox);
 8008d4a:	f00c fa4d 	bl	80151e8 <lv_mbox_get_anim_time>
        a.playback       = 0;
 8008d4e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
        a.time           = lv_mbox_get_anim_time(mbox);
 8008d52:	f8ad 0020 	strh.w	r0, [sp, #32]
        a.playback_pause = 0;
        a.repeat         = 0;
        a.repeat_pause   = 0;
        lv_anim_create(&a);
 8008d56:	a802      	add	r0, sp, #8
        a.playback       = 0;
 8008d58:	f023 0303 	bic.w	r3, r3, #3
        a.playback_pause = 0;
 8008d5c:	9609      	str	r6, [sp, #36]	; 0x24
        a.playback       = 0;
 8008d5e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        lv_anim_create(&a);
 8008d62:	f7fa ff75 	bl	8003c50 <lv_anim_create>

        a.start    = lv_obj_get_width(mbox);
 8008d66:	4628      	mov	r0, r5
 8008d68:	f006 fe0f 	bl	800f98a <lv_obj_get_width>
        a.exec_cb  = (lv_anim_exec_xcb_t)lv_obj_set_width;
 8008d6c:	4b14      	ldr	r3, [pc, #80]	; (8008dc0 <lv_mbox_start_auto_close+0xac>)
        a.start    = lv_obj_get_width(mbox);
 8008d6e:	9006      	str	r0, [sp, #24]
        a.ready_cb = lv_mbox_close_ready_cb;
        lv_anim_create(&a);
 8008d70:	a802      	add	r0, sp, #8
        a.exec_cb  = (lv_anim_exec_xcb_t)lv_obj_set_width;
 8008d72:	9303      	str	r3, [sp, #12]
        a.ready_cb = lv_mbox_close_ready_cb;
 8008d74:	9705      	str	r7, [sp, #20]
        lv_anim_create(&a);
 8008d76:	f7fa ff6b 	bl	8003c50 <lv_anim_create>
    lv_cont_set_fit4(cont, fit, fit, fit, fit);
 8008d7a:	9600      	str	r6, [sp, #0]
 8008d7c:	4633      	mov	r3, r6
 8008d7e:	4632      	mov	r2, r6
 8008d80:	4631      	mov	r1, r6
 8008d82:	4628      	mov	r0, r5
 8008d84:	f00b fe8f 	bl	8014aa6 <lv_cont_set_fit4>
    }
#else
    (void)delay; /*Unused*/
    lv_obj_del(mbox);
#endif
}
 8008d88:	b00c      	add	sp, #48	; 0x30
 8008d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        a.end            = 1;
 8008d8e:	2301      	movs	r3, #1
        a.start          = 0;
 8008d90:	9006      	str	r0, [sp, #24]
        a.time           = 0;
 8008d92:	f8ad 0020 	strh.w	r0, [sp, #32]
        a.end            = 1;
 8008d96:	9307      	str	r3, [sp, #28]
        a.playback       = 0;
 8008d98:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
        a.playback_pause = 0;
 8008d9c:	9009      	str	r0, [sp, #36]	; 0x24
        a.playback       = 0;
 8008d9e:	f023 0303 	bic.w	r3, r3, #3
        a.ready_cb       = lv_mbox_close_ready_cb;
 8008da2:	9705      	str	r7, [sp, #20]
        a.act_time       = -delay;
 8008da4:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
        a.playback       = 0;
 8008da8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        a.path_cb        = lv_anim_path_linear;
 8008dac:	e9cd 0803 	strd	r0, r8, [sp, #12]
        lv_anim_create(&a);
 8008db0:	a802      	add	r0, sp, #8
 8008db2:	f7fa ff4d 	bl	8003c50 <lv_anim_create>
}
 8008db6:	e7e7      	b.n	8008d88 <lv_mbox_start_auto_close+0x74>
 8008db8:	080151cb 	.word	0x080151cb
 8008dbc:	0800f7af 	.word	0x0800f7af
 8008dc0:	0800f7a1 	.word	0x0800f7a1
 8008dc4:	0801057d 	.word	0x0801057d

08008dc8 <lv_mbox_signal>:
static lv_res_t lv_mbox_signal(lv_obj_t * mbox, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /*Translate LV_KEY_UP/DOWN to LV_KEY_LEFT/RIGHT */
    char c_trans = 0;
 8008dc8:	2300      	movs	r3, #0
    if(sign == LV_SIGNAL_CONTROL) {
 8008dca:	2911      	cmp	r1, #17
{
 8008dcc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008dd0:	4607      	mov	r7, r0
 8008dd2:	460d      	mov	r5, r1
 8008dd4:	4614      	mov	r4, r2
    char c_trans = 0;
 8008dd6:	f88d 3003 	strb.w	r3, [sp, #3]
    if(sign == LV_SIGNAL_CONTROL) {
 8008dda:	d107      	bne.n	8008dec <lv_mbox_signal+0x24>
        c_trans = *((char *)param);
 8008ddc:	7813      	ldrb	r3, [r2, #0]
        if(c_trans == LV_KEY_DOWN) c_trans = LV_KEY_LEFT;
 8008dde:	2b12      	cmp	r3, #18
 8008de0:	d124      	bne.n	8008e2c <lv_mbox_signal+0x64>
 8008de2:	2314      	movs	r3, #20
        if(c_trans == LV_KEY_UP) c_trans = LV_KEY_RIGHT;

        param = &c_trans;
 8008de4:	f10d 0403 	add.w	r4, sp, #3
        if(c_trans == LV_KEY_UP) c_trans = LV_KEY_RIGHT;
 8008de8:	f88d 3003 	strb.w	r3, [sp, #3]
    }

    /* Include the ancient signal function */
    res = ancestor_signal(mbox, sign, param);
 8008dec:	4b34      	ldr	r3, [pc, #208]	; (8008ec0 <lv_mbox_signal+0xf8>)
 8008dee:	4622      	mov	r2, r4
 8008df0:	4629      	mov	r1, r5
 8008df2:	4638      	mov	r0, r7
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8008df8:	2801      	cmp	r0, #1
    res = ancestor_signal(mbox, sign, param);
 8008dfa:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
 8008dfc:	d112      	bne.n	8008e24 <lv_mbox_signal+0x5c>

    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 8008dfe:	4638      	mov	r0, r7
 8008e00:	f006 fe5e 	bl	800fac0 <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_CORD_CHG) {
 8008e04:	2d02      	cmp	r5, #2
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 8008e06:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CORD_CHG) {
 8008e08:	d114      	bne.n	8008e34 <lv_mbox_signal+0x6c>
        if(lv_obj_get_width(mbox) != lv_area_get_width(param)) {
 8008e0a:	4638      	mov	r0, r7
 8008e0c:	f006 fdbd 	bl	800f98a <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 8008e10:	88a3      	ldrh	r3, [r4, #4]
 8008e12:	8822      	ldrh	r2, [r4, #0]
 8008e14:	3301      	adds	r3, #1
 8008e16:	1a9b      	subs	r3, r3, r2
 8008e18:	b21b      	sxth	r3, r3
 8008e1a:	4298      	cmp	r0, r3
 8008e1c:	d002      	beq.n	8008e24 <lv_mbox_signal+0x5c>
            mbox_realign(mbox);
 8008e1e:	4638      	mov	r0, r7
 8008e20:	f00c fa1c 	bl	801525c <mbox_realign>
        }
        buf->type[i] = "lv_mbox";
    }

    return res;
}
 8008e24:	4630      	mov	r0, r6
 8008e26:	b002      	add	sp, #8
 8008e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(c_trans == LV_KEY_UP) c_trans = LV_KEY_RIGHT;
 8008e2c:	2b11      	cmp	r3, #17
 8008e2e:	bf08      	it	eq
 8008e30:	2313      	moveq	r3, #19
 8008e32:	e7d7      	b.n	8008de4 <lv_mbox_signal+0x1c>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 8008e34:	2d04      	cmp	r5, #4
 8008e36:	d0f2      	beq.n	8008e1e <lv_mbox_signal+0x56>
    } else if(sign == LV_SIGNAL_RELEASED) {
 8008e38:	2d0a      	cmp	r5, #10
 8008e3a:	d10f      	bne.n	8008e5c <lv_mbox_signal+0x94>
        if(ext->btnm) {
 8008e3c:	6880      	ldr	r0, [r0, #8]
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	d0f0      	beq.n	8008e24 <lv_mbox_signal+0x5c>
            uint32_t btn_id = lv_btnm_get_active_btn(ext->btnm);
 8008e42:	f00b fdad 	bl	80149a0 <lv_btnm_get_active_btn>
            if(btn_id != LV_BTNM_BTN_NONE) lv_event_send(mbox, LV_EVENT_VALUE_CHANGED, &btn_id);
 8008e46:	f64f 73ff 	movw	r3, #65535	; 0xffff
            uint32_t btn_id = lv_btnm_get_active_btn(ext->btnm);
 8008e4a:	9001      	str	r0, [sp, #4]
            if(btn_id != LV_BTNM_BTN_NONE) lv_event_send(mbox, LV_EVENT_VALUE_CHANGED, &btn_id);
 8008e4c:	4298      	cmp	r0, r3
 8008e4e:	d0e9      	beq.n	8008e24 <lv_mbox_signal+0x5c>
 8008e50:	aa01      	add	r2, sp, #4
 8008e52:	210e      	movs	r1, #14
 8008e54:	4638      	mov	r0, r7
 8008e56:	f006 f963 	bl	800f120 <lv_event_send>
 8008e5a:	e7e3      	b.n	8008e24 <lv_mbox_signal+0x5c>
    } else if(sign == LV_SIGNAL_FOCUS || sign == LV_SIGNAL_DEFOCUS || sign == LV_SIGNAL_CONTROL ||
 8008e5c:	f1a5 030f 	sub.w	r3, r5, #15
 8008e60:	2b03      	cmp	r3, #3
 8008e62:	d81e      	bhi.n	8008ea2 <lv_mbox_signal+0xda>
        if(ext->btnm) {
 8008e64:	6880      	ldr	r0, [r0, #8]
 8008e66:	b118      	cbz	r0, 8008e70 <lv_mbox_signal+0xa8>
            ext->btnm->signal_cb(ext->btnm, sign, param);
 8008e68:	69c3      	ldr	r3, [r0, #28]
 8008e6a:	4622      	mov	r2, r4
 8008e6c:	4629      	mov	r1, r5
 8008e6e:	4798      	blx	r3
        if(sign == LV_SIGNAL_FOCUS) {
 8008e70:	2d0f      	cmp	r5, #15
 8008e72:	d1d7      	bne.n	8008e24 <lv_mbox_signal+0x5c>
            lv_indev_t * indev         = lv_indev_get_act();
 8008e74:	f7f9 fd06 	bl	8002884 <lv_indev_get_act>
            lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8008e78:	f006 f8b0 	bl	800efdc <lv_indev_get_type>
            if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8008e7c:	2804      	cmp	r0, #4
 8008e7e:	d1d1      	bne.n	8008e24 <lv_mbox_signal+0x5c>
                lv_btnm_ext_t * btnm_ext = lv_obj_get_ext_attr(ext->btnm);
 8008e80:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8008e84:	f006 fe1c 	bl	800fac0 <lv_obj_get_ext_attr>
 8008e88:	4604      	mov	r4, r0
                if(lv_group_get_editing(lv_obj_get_group(mbox)))
 8008e8a:	4638      	mov	r0, r7
 8008e8c:	f006 fe46 	bl	800fb1c <lv_obj_get_group>
 8008e90:	f006 f88f 	bl	800efb2 <lv_group_get_editing>
 8008e94:	b110      	cbz	r0, 8008e9c <lv_mbox_signal+0xd4>
                    btnm_ext->btn_id_pr = 0;
 8008e96:	2300      	movs	r3, #0
                    btnm_ext->btn_id_pr = LV_BTNM_BTN_NONE;
 8008e98:	8463      	strh	r3, [r4, #34]	; 0x22
 8008e9a:	e7c3      	b.n	8008e24 <lv_mbox_signal+0x5c>
 8008e9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ea0:	e7fa      	b.n	8008e98 <lv_mbox_signal+0xd0>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8008ea2:	2d06      	cmp	r5, #6
 8008ea4:	d1be      	bne.n	8008e24 <lv_mbox_signal+0x5c>
 8008ea6:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8008ea8:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8008eac:	b2da      	uxtb	r2, r3
 8008eae:	b119      	cbz	r1, 8008eb8 <lv_mbox_signal+0xf0>
 8008eb0:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8008eb2:	2b07      	cmp	r3, #7
 8008eb4:	d1f8      	bne.n	8008ea8 <lv_mbox_signal+0xe0>
 8008eb6:	461a      	mov	r2, r3
        buf->type[i] = "lv_mbox";
 8008eb8:	4b02      	ldr	r3, [pc, #8]	; (8008ec4 <lv_mbox_signal+0xfc>)
 8008eba:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
 8008ebe:	e7b1      	b.n	8008e24 <lv_mbox_signal+0x5c>
 8008ec0:	20028984 	.word	0x20028984
 8008ec4:	0801c66e 	.word	0x0801c66e

08008ec8 <lv_mbox_create>:
{
 8008ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008eca:	460d      	mov	r5, r1
    lv_obj_t * new_mbox = lv_cont_create(par, copy);
 8008ecc:	f7ff fb0a 	bl	80084e4 <lv_cont_create>
    lv_mem_assert(new_mbox);
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	b930      	cbnz	r0, 8008ee2 <lv_mbox_create+0x1a>
 8008ed4:	4b37      	ldr	r3, [pc, #220]	; (8008fb4 <lv_mbox_create+0xec>)
 8008ed6:	2246      	movs	r2, #70	; 0x46
 8008ed8:	4937      	ldr	r1, [pc, #220]	; (8008fb8 <lv_mbox_create+0xf0>)
 8008eda:	2003      	movs	r0, #3
 8008edc:	f7fa fb9a 	bl	8003614 <lv_log_add>
 8008ee0:	e7fe      	b.n	8008ee0 <lv_mbox_create+0x18>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_mbox);
 8008ee2:	4e36      	ldr	r6, [pc, #216]	; (8008fbc <lv_mbox_create+0xf4>)
 8008ee4:	6833      	ldr	r3, [r6, #0]
 8008ee6:	b913      	cbnz	r3, 8008eee <lv_mbox_create+0x26>
 8008ee8:	f006 fde6 	bl	800fab8 <lv_obj_get_signal_cb>
 8008eec:	6030      	str	r0, [r6, #0]
    lv_mbox_ext_t * ext = lv_obj_allocate_ext_attr(new_mbox, sizeof(lv_mbox_ext_t));
 8008eee:	2110      	movs	r1, #16
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f006 f976 	bl	800f1e2 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	b930      	cbnz	r0, 8008f08 <lv_mbox_create+0x40>
 8008efa:	4b2e      	ldr	r3, [pc, #184]	; (8008fb4 <lv_mbox_create+0xec>)
 8008efc:	224d      	movs	r2, #77	; 0x4d
 8008efe:	492e      	ldr	r1, [pc, #184]	; (8008fb8 <lv_mbox_create+0xf0>)
 8008f00:	2003      	movs	r0, #3
 8008f02:	f7fa fb87 	bl	8003614 <lv_log_add>
 8008f06:	e7fe      	b.n	8008f06 <lv_mbox_create+0x3e>
    ext->text = NULL;
 8008f08:	2300      	movs	r3, #0
    ext->anim_time = LV_MBOX_CLOSE_ANIM_TIME;
 8008f0a:	27c8      	movs	r7, #200	; 0xc8
    lv_obj_set_signal_cb(new_mbox, lv_mbox_signal);
 8008f0c:	492c      	ldr	r1, [pc, #176]	; (8008fc0 <lv_mbox_create+0xf8>)
    ext->anim_time = LV_MBOX_CLOSE_ANIM_TIME;
 8008f0e:	8187      	strh	r7, [r0, #12]
    ext->btnm = NULL;
 8008f10:	e9c0 3301 	strd	r3, r3, [r0, #4]
    lv_obj_set_signal_cb(new_mbox, lv_mbox_signal);
 8008f14:	4620      	mov	r0, r4
 8008f16:	f006 f960 	bl	800f1da <lv_obj_set_signal_cb>
    if(copy == NULL) {
 8008f1a:	2d00      	cmp	r5, #0
 8008f1c:	d137      	bne.n	8008f8e <lv_mbox_create+0xc6>
        ext->text = lv_label_create(new_mbox, NULL);
 8008f1e:	4629      	mov	r1, r5
 8008f20:	4620      	mov	r0, r4
 8008f22:	f002 fadf 	bl	800b4e4 <lv_label_create>
        lv_label_set_align(ext->text, LV_LABEL_ALIGN_CENTER);
 8008f26:	2101      	movs	r1, #1
        ext->text = lv_label_create(new_mbox, NULL);
 8008f28:	6070      	str	r0, [r6, #4]
        lv_label_set_align(ext->text, LV_LABEL_ALIGN_CENTER);
 8008f2a:	f00c ff2f 	bl	8015d8c <lv_label_set_align>
        lv_label_set_long_mode(ext->text, LV_LABEL_LONG_BREAK);
 8008f2e:	2101      	movs	r1, #1
 8008f30:	6870      	ldr	r0, [r6, #4]
 8008f32:	f002 fa97 	bl	800b464 <lv_label_set_long_mode>
        lv_label_set_text(ext->text, "Message");
 8008f36:	4923      	ldr	r1, [pc, #140]	; (8008fc4 <lv_mbox_create+0xfc>)
 8008f38:	6870      	ldr	r0, [r6, #4]
 8008f3a:	f002 fa49 	bl	800b3d0 <lv_label_set_text>
        lv_cont_set_layout(new_mbox, LV_LAYOUT_COL_M);
 8008f3e:	2103      	movs	r1, #3
 8008f40:	4620      	mov	r0, r4
 8008f42:	f00b fd9b 	bl	8014a7c <lv_cont_set_layout>
    lv_cont_set_fit4(cont, hor, hor, ver, ver);
 8008f46:	2301      	movs	r3, #1
 8008f48:	462a      	mov	r2, r5
 8008f4a:	4629      	mov	r1, r5
 8008f4c:	9300      	str	r3, [sp, #0]
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f00b fda9 	bl	8014aa6 <lv_cont_set_fit4>
        lv_obj_set_width(new_mbox, LV_DPI * 2);
 8008f54:	4639      	mov	r1, r7
 8008f56:	4620      	mov	r0, r4
 8008f58:	f006 fc22 	bl	800f7a0 <lv_obj_set_width>
        lv_obj_align(new_mbox, NULL, LV_ALIGN_CENTER, 0, 0);
 8008f5c:	462b      	mov	r3, r5
 8008f5e:	462a      	mov	r2, r5
 8008f60:	4629      	mov	r1, r5
 8008f62:	4620      	mov	r0, r4
 8008f64:	9500      	str	r5, [sp, #0]
 8008f66:	f006 f9f9 	bl	800f35c <lv_obj_align>
        lv_obj_set_event_cb(new_mbox, lv_mbox_default_event_cb);
 8008f6a:	4917      	ldr	r1, [pc, #92]	; (8008fc8 <lv_mbox_create+0x100>)
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	f006 f8d5 	bl	800f11c <lv_obj_set_event_cb>
        lv_theme_t * th = lv_theme_get_current();
 8008f72:	f7fc fa6b 	bl	800544c <lv_theme_get_current>
        if(th) {
 8008f76:	b140      	cbz	r0, 8008f8a <lv_mbox_create+0xc2>
            lv_mbox_set_style(new_mbox, LV_MBOX_STYLE_BG, th->style.mbox.bg);
 8008f78:	f8d0 20f4 	ldr.w	r2, [r0, #244]	; 0xf4
            lv_mbox_set_style(new_mbox, LV_MBOX_STYLE_BG, &lv_style_pretty);
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	4620      	mov	r0, r4
 8008f80:	f00c f9ae 	bl	80152e0 <lv_mbox_set_style>
}
 8008f84:	4620      	mov	r0, r4
 8008f86:	b003      	add	sp, #12
 8008f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
            lv_mbox_set_style(new_mbox, LV_MBOX_STYLE_BG, &lv_style_pretty);
 8008f8a:	4a10      	ldr	r2, [pc, #64]	; (8008fcc <lv_mbox_create+0x104>)
 8008f8c:	e7f6      	b.n	8008f7c <lv_mbox_create+0xb4>
        lv_mbox_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8008f8e:	4628      	mov	r0, r5
 8008f90:	f006 fd96 	bl	800fac0 <lv_obj_get_ext_attr>
 8008f94:	4605      	mov	r5, r0
        ext->text = lv_label_create(new_mbox, copy_ext->text);
 8008f96:	6841      	ldr	r1, [r0, #4]
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f002 faa3 	bl	800b4e4 <lv_label_create>
        if(copy_ext->btnm) ext->btnm = lv_btnm_create(new_mbox, copy_ext->btnm);
 8008f9e:	68a9      	ldr	r1, [r5, #8]
        ext->text = lv_label_create(new_mbox, copy_ext->text);
 8008fa0:	6070      	str	r0, [r6, #4]
        if(copy_ext->btnm) ext->btnm = lv_btnm_create(new_mbox, copy_ext->btnm);
 8008fa2:	b119      	cbz	r1, 8008fac <lv_mbox_create+0xe4>
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	f7fe fee5 	bl	8007d74 <lv_btnm_create>
 8008faa:	60b0      	str	r0, [r6, #8]
        lv_obj_refresh_style(new_mbox);
 8008fac:	4620      	mov	r0, r4
 8008fae:	f006 fc06 	bl	800f7be <lv_obj_refresh_style>
    return new_mbox;
 8008fb2:	e7e7      	b.n	8008f84 <lv_mbox_create+0xbc>
 8008fb4:	080176f4 	.word	0x080176f4
 8008fb8:	0801c605 	.word	0x0801c605
 8008fbc:	20028984 	.word	0x20028984
 8008fc0:	08008dc9 	.word	0x08008dc9
 8008fc4:	0801c666 	.word	0x0801c666
 8008fc8:	080151f3 	.word	0x080151f3
 8008fcc:	2002059c 	.word	0x2002059c

08008fd0 <lv_mbox_add_btns>:
{
 8008fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd2:	460f      	mov	r7, r1
 8008fd4:	4605      	mov	r5, r0
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 8008fd6:	f006 fd73 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->btnm == NULL) {
 8008fda:	6881      	ldr	r1, [r0, #8]
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 8008fdc:	4604      	mov	r4, r0
    if(ext->btnm == NULL) {
 8008fde:	b9c9      	cbnz	r1, 8009014 <lv_mbox_add_btns+0x44>
        ext->btnm = lv_btnm_create(mbox, NULL);
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	f7fe fec7 	bl	8007d74 <lv_btnm_create>
 8008fe6:	60a0      	str	r0, [r4, #8]
        lv_theme_t * th = lv_theme_get_current();
 8008fe8:	f7fc fa30 	bl	800544c <lv_theme_get_current>
        if(th) {
 8008fec:	4606      	mov	r6, r0
 8008fee:	b318      	cbz	r0, 8009038 <lv_mbox_add_btns+0x68>
            lv_mbox_set_style(mbox, LV_MBOX_STYLE_BTN_BG, th->style.mbox.btn.bg);
 8008ff0:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
 8008ff4:	2101      	movs	r1, #1
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	f00c f972 	bl	80152e0 <lv_mbox_set_style>
            lv_mbox_set_style(mbox, LV_MBOX_STYLE_BTN_REL, th->style.mbox.btn.rel);
 8008ffc:	f8d6 20fc 	ldr.w	r2, [r6, #252]	; 0xfc
 8009000:	2102      	movs	r1, #2
 8009002:	4628      	mov	r0, r5
 8009004:	f00c f96c 	bl	80152e0 <lv_mbox_set_style>
            lv_mbox_set_style(mbox, LV_MBOX_STYLE_BTN_PR, th->style.mbox.btn.pr);
 8009008:	f8d6 2100 	ldr.w	r2, [r6, #256]	; 0x100
 800900c:	2103      	movs	r1, #3
 800900e:	4628      	mov	r0, r5
 8009010:	f00c f966 	bl	80152e0 <lv_mbox_set_style>
    lv_btnm_set_map(ext->btnm, btn_map);
 8009014:	4639      	mov	r1, r7
 8009016:	68a0      	ldr	r0, [r4, #8]
 8009018:	f00b fd1a 	bl	8014a50 <lv_btnm_set_map>
    lv_btnm_set_btn_ctrl_all(ext->btnm, LV_BTNM_CTRL_CLICK_TRIG | LV_BTNM_CTRL_NO_REPEAT);
 800901c:	68a0      	ldr	r0, [r4, #8]
 800901e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8009022:	f00b fc94 	bl	801494e <lv_btnm_set_btn_ctrl_all>
    lv_obj_set_parent_event(ext->btnm, true);
 8009026:	68a0      	ldr	r0, [r4, #8]
 8009028:	2101      	movs	r1, #1
 800902a:	f006 f863 	bl	800f0f4 <lv_obj_set_parent_event>
    mbox_realign(mbox);
 800902e:	4628      	mov	r0, r5
}
 8009030:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    mbox_realign(mbox);
 8009034:	f00c b912 	b.w	801525c <mbox_realign>
            lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BG, &lv_style_transp_fit);
 8009038:	4601      	mov	r1, r0
 800903a:	4a02      	ldr	r2, [pc, #8]	; (8009044 <lv_mbox_add_btns+0x74>)
 800903c:	68a0      	ldr	r0, [r4, #8]
 800903e:	f00b fc37 	bl	80148b0 <lv_btnm_set_style>
 8009042:	e7e7      	b.n	8009014 <lv_mbox_add_btns+0x44>
 8009044:	2002068c 	.word	0x2002068c

08009048 <lv_scrl_design>:
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_scrl_design(lv_obj_t * scrl, const lv_area_t * mask, lv_design_mode_t mode)
{
    if(mode == LV_DESIGN_COVER_CHK) {
 8009048:	2a02      	cmp	r2, #2
{
 800904a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800904e:	4604      	mov	r4, r0
 8009050:	4689      	mov	r9, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 8009052:	d104      	bne.n	800905e <lv_scrl_design+0x16>
        return ancestor_design(scrl, mask, mode);
 8009054:	4b1f      	ldr	r3, [pc, #124]	; (80090d4 <lv_scrl_design+0x8c>)
    } else if(mode == LV_DESIGN_DRAW_POST) {
        ancestor_design(scrl, mask, mode);
    }

    return true;
}
 8009056:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return ancestor_design(scrl, mask, mode);
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4718      	bx	r3
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 800905e:	bb9a      	cbnz	r2, 80090c8 <lv_scrl_design+0x80>
        const lv_style_t * style_scrl_ori = lv_obj_get_style(scrl);
 8009060:	f7f9 fe6e 	bl	8002d40 <lv_obj_get_style>
 8009064:	4605      	mov	r5, r0
        lv_obj_t * page                   = lv_obj_get_parent(scrl);
 8009066:	4620      	mov	r0, r4
 8009068:	f006 fc48 	bl	800f8fc <lv_obj_get_parent>
 800906c:	4607      	mov	r7, r0
        const lv_style_t * style_page     = lv_obj_get_style(page);
 800906e:	f7f9 fe67 	bl	8002d40 <lv_obj_get_style>
 8009072:	4680      	mov	r8, r0
        lv_group_t * g                    = lv_obj_get_group(page);
 8009074:	4638      	mov	r0, r7
 8009076:	f006 fd51 	bl	800fb1c <lv_obj_get_group>
        if((style_page->body.opa == LV_OPA_TRANSP) &&
 800907a:	f898 3008 	ldrb.w	r3, [r8, #8]
        lv_group_t * g                    = lv_obj_get_group(page);
 800907e:	4606      	mov	r6, r0
        if((style_page->body.opa == LV_OPA_TRANSP) &&
 8009080:	b9c3      	cbnz	r3, 80090b4 <lv_scrl_design+0x6c>
 8009082:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 8009086:	b9ab      	cbnz	r3, 80090b4 <lv_scrl_design+0x6c>
            if(lv_group_get_focused(g) == page) {
 8009088:	f005 ff6c 	bl	800ef64 <lv_group_get_focused>
 800908c:	4287      	cmp	r7, r0
 800908e:	d111      	bne.n	80090b4 <lv_scrl_design+0x6c>
                style_mod = lv_group_mod_style(g, style_scrl_ori);
 8009090:	4629      	mov	r1, r5
 8009092:	4630      	mov	r0, r6
 8009094:	f005 ff53 	bl	800ef3e <lv_group_mod_style>
                if((style_mod->body.opa == LV_OPA_TRANSP) && style_mod->body.border.width == 0) {
 8009098:	7a03      	ldrb	r3, [r0, #8]
 800909a:	b953      	cbnz	r3, 80090b2 <lv_scrl_design+0x6a>
 800909c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80090a0:	b93b      	cbnz	r3, 80090b2 <lv_scrl_design+0x6a>
                    style_mod->body.opa          = LV_OPA_50;
 80090a2:	237f      	movs	r3, #127	; 0x7f
                    style_mod                    = lv_group_mod_style(g, style_mod);
 80090a4:	4601      	mov	r1, r0
                    style_mod->body.opa          = LV_OPA_50;
 80090a6:	7203      	strb	r3, [r0, #8]
                    style_mod->body.border.width = 1;
 80090a8:	2301      	movs	r3, #1
 80090aa:	8183      	strh	r3, [r0, #12]
                    style_mod                    = lv_group_mod_style(g, style_mod);
 80090ac:	4630      	mov	r0, r6
 80090ae:	f005 ff46 	bl	800ef3e <lv_group_mod_style>
                scrl->style_p = style_mod; /*Temporally change the style to the activated */
 80090b2:	62a0      	str	r0, [r4, #40]	; 0x28
        ancestor_design(scrl, mask, mode);
 80090b4:	4b07      	ldr	r3, [pc, #28]	; (80090d4 <lv_scrl_design+0x8c>)
 80090b6:	2200      	movs	r2, #0
 80090b8:	4649      	mov	r1, r9
 80090ba:	4620      	mov	r0, r4
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4798      	blx	r3
        scrl->style_p = style_scrl_ori; /*Revert the style*/
 80090c0:	62a5      	str	r5, [r4, #40]	; 0x28
}
 80090c2:	2001      	movs	r0, #1
 80090c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if(mode == LV_DESIGN_DRAW_POST) {
 80090c8:	2a01      	cmp	r2, #1
 80090ca:	d1fa      	bne.n	80090c2 <lv_scrl_design+0x7a>
        ancestor_design(scrl, mask, mode);
 80090cc:	4b01      	ldr	r3, [pc, #4]	; (80090d4 <lv_scrl_design+0x8c>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4798      	blx	r3
 80090d2:	e7f6      	b.n	80090c2 <lv_scrl_design+0x7a>
 80090d4:	20028988 	.word	0x20028988

080090d8 <lv_page_create>:
{
 80090d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80090dc:	4680      	mov	r8, r0
 80090de:	460e      	mov	r6, r1
    lv_obj_t * new_page = lv_cont_create(par, copy);
 80090e0:	f7ff fa00 	bl	80084e4 <lv_cont_create>
    lv_mem_assert(new_page);
 80090e4:	4604      	mov	r4, r0
 80090e6:	b930      	cbnz	r0, 80090f6 <lv_page_create+0x1e>
 80090e8:	4b6e      	ldr	r3, [pc, #440]	; (80092a4 <lv_page_create+0x1cc>)
 80090ea:	2250      	movs	r2, #80	; 0x50
 80090ec:	496e      	ldr	r1, [pc, #440]	; (80092a8 <lv_page_create+0x1d0>)
 80090ee:	2003      	movs	r0, #3
 80090f0:	f7fa fa90 	bl	8003614 <lv_log_add>
 80090f4:	e7fe      	b.n	80090f4 <lv_page_create+0x1c>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_page);
 80090f6:	4d6d      	ldr	r5, [pc, #436]	; (80092ac <lv_page_create+0x1d4>)
 80090f8:	682b      	ldr	r3, [r5, #0]
 80090fa:	b913      	cbnz	r3, 8009102 <lv_page_create+0x2a>
 80090fc:	f006 fcdc 	bl	800fab8 <lv_obj_get_signal_cb>
 8009100:	6028      	str	r0, [r5, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_page);
 8009102:	4d6b      	ldr	r5, [pc, #428]	; (80092b0 <lv_page_create+0x1d8>)
 8009104:	682b      	ldr	r3, [r5, #0]
 8009106:	b91b      	cbnz	r3, 8009110 <lv_page_create+0x38>
 8009108:	4620      	mov	r0, r4
 800910a:	f006 fcd7 	bl	800fabc <lv_obj_get_design_cb>
 800910e:	6028      	str	r0, [r5, #0]
    lv_page_ext_t * ext = lv_obj_allocate_ext_attr(new_page, sizeof(lv_page_ext_t));
 8009110:	2130      	movs	r1, #48	; 0x30
 8009112:	4620      	mov	r0, r4
 8009114:	f006 f865 	bl	800f1e2 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 8009118:	4605      	mov	r5, r0
 800911a:	b930      	cbnz	r0, 800912a <lv_page_create+0x52>
 800911c:	4b61      	ldr	r3, [pc, #388]	; (80092a4 <lv_page_create+0x1cc>)
 800911e:	2258      	movs	r2, #88	; 0x58
 8009120:	4961      	ldr	r1, [pc, #388]	; (80092a8 <lv_page_create+0x1d0>)
 8009122:	2003      	movs	r0, #3
 8009124:	f7fa fa76 	bl	8003614 <lv_log_add>
 8009128:	e7fe      	b.n	8009128 <lv_page_create+0x50>
    ext->sb.hor_draw = 0;
 800912a:	7f03      	ldrb	r3, [r0, #28]
    ext->scrl        = NULL;
 800912c:	f04f 0900 	mov.w	r9, #0
    ext->sb.style    = &lv_style_pretty;
 8009130:	4f60      	ldr	r7, [pc, #384]	; (80092b4 <lv_page_create+0x1dc>)
    ext->sb.hor_draw = 0;
 8009132:	f023 031f 	bic.w	r3, r3, #31
    ext->scrl        = NULL;
 8009136:	f8c0 9004 	str.w	r9, [r0, #4]
    ext->sb.style    = &lv_style_pretty;
 800913a:	6087      	str	r7, [r0, #8]
    ext->sb.hor_draw = 0;
 800913c:	f043 030c 	orr.w	r3, r3, #12
    ext->edge_flash.state     = 0;
 8009140:	f8a0 9020 	strh.w	r9, [r0, #32]
    ext->sb.hor_draw = 0;
 8009144:	7703      	strb	r3, [r0, #28]
    ext->edge_flash.enabled   = 0;
 8009146:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800914a:	f023 031f 	bic.w	r3, r3, #31
 800914e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    ext->edge_flash.style     = &lv_style_plain_color;
 8009152:	4b59      	ldr	r3, [pc, #356]	; (80092b8 <lv_page_create+0x1e0>)
 8009154:	6243      	str	r3, [r0, #36]	; 0x24
    ext->anim_time            = LV_PAGE_DEF_ANIM_TIME;
 8009156:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800915a:	8583      	strh	r3, [r0, #44]	; 0x2c
    ext->scroll_prop    = 0;
 800915c:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8009160:	f023 0303 	bic.w	r3, r3, #3
 8009164:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
    if(copy == NULL) {
 8009168:	2e00      	cmp	r6, #0
 800916a:	d163      	bne.n	8009234 <lv_page_create+0x15c>
        ext->scrl = lv_cont_create(new_page, NULL);
 800916c:	4631      	mov	r1, r6
 800916e:	4620      	mov	r0, r4
 8009170:	f7ff f9b8 	bl	80084e4 <lv_cont_create>
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 8009174:	4951      	ldr	r1, [pc, #324]	; (80092bc <lv_page_create+0x1e4>)
        ext->scrl = lv_cont_create(new_page, NULL);
 8009176:	6068      	str	r0, [r5, #4]
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 8009178:	f006 f82f 	bl	800f1da <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(ext->scrl, lv_scrl_design);
 800917c:	6868      	ldr	r0, [r5, #4]
 800917e:	4950      	ldr	r1, [pc, #320]	; (80092c0 <lv_page_create+0x1e8>)
 8009180:	f006 f82d 	bl	800f1de <lv_obj_set_design_cb>
        lv_obj_set_drag(ext->scrl, true);
 8009184:	6868      	ldr	r0, [r5, #4]
 8009186:	2101      	movs	r1, #1
 8009188:	f005 ff98 	bl	800f0bc <lv_obj_set_drag>
        lv_obj_set_drag_throw(ext->scrl, true);
 800918c:	6868      	ldr	r0, [r5, #4]
 800918e:	2101      	movs	r1, #1
 8009190:	f005 ffa2 	bl	800f0d8 <lv_obj_set_drag_throw>
        lv_obj_set_protect(ext->scrl, LV_PROTECT_PARENT | LV_PROTECT_PRESS_LOST);
 8009194:	6868      	ldr	r0, [r5, #4]
 8009196:	2112      	movs	r1, #18
 8009198:	f005 ffb3 	bl	800f102 <lv_obj_set_protect>
        lv_cont_set_fit4(ext->scrl, LV_FIT_FILL, LV_FIT_FILL, LV_FIT_FILL, LV_FIT_FILL);
 800919c:	2303      	movs	r3, #3
 800919e:	9300      	str	r3, [sp, #0]
 80091a0:	4619      	mov	r1, r3
 80091a2:	461a      	mov	r2, r3
 80091a4:	6868      	ldr	r0, [r5, #4]
 80091a6:	f00b fc7e 	bl	8014aa6 <lv_cont_set_fit4>
        lv_obj_set_event_cb(ext->scrl, scrl_def_event_cb); /*Propagate some event to the background
 80091aa:	6868      	ldr	r0, [r5, #4]
 80091ac:	4945      	ldr	r1, [pc, #276]	; (80092c4 <lv_page_create+0x1ec>)
 80091ae:	f005 ffb5 	bl	800f11c <lv_obj_set_event_cb>
        lv_obj_set_signal_cb(new_page, lv_page_signal);
 80091b2:	4945      	ldr	r1, [pc, #276]	; (80092c8 <lv_page_create+0x1f0>)
 80091b4:	4620      	mov	r0, r4
 80091b6:	f006 f810 	bl	800f1da <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_page, lv_page_design);
 80091ba:	4944      	ldr	r1, [pc, #272]	; (80092cc <lv_page_create+0x1f4>)
 80091bc:	4620      	mov	r0, r4
 80091be:	f006 f80e 	bl	800f1de <lv_obj_set_design_cb>
        lv_page_set_sb_mode(new_page, ext->sb.mode);
 80091c2:	7f29      	ldrb	r1, [r5, #28]
 80091c4:	4620      	mov	r0, r4
 80091c6:	f3c1 0182 	ubfx	r1, r1, #2, #3
 80091ca:	f00c fa94 	bl	80156f6 <lv_page_set_sb_mode>
        lv_theme_t * th = lv_theme_get_current();
 80091ce:	f7fc f93d 	bl	800544c <lv_theme_get_current>
        if(th) {
 80091d2:	4605      	mov	r5, r0
 80091d4:	b310      	cbz	r0, 800921c <lv_page_create+0x144>
            if(par == NULL) { /*Different styles if it is screen*/
 80091d6:	f1b8 0f00 	cmp.w	r8, #0
 80091da:	d116      	bne.n	800920a <lv_page_create+0x132>
                lv_page_set_style(new_page, LV_PAGE_STYLE_BG, th->style.bg);
 80091dc:	6842      	ldr	r2, [r0, #4]
 80091de:	4641      	mov	r1, r8
 80091e0:	4620      	mov	r0, r4
 80091e2:	f00c fac4 	bl	801576e <lv_page_set_style>
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, &lv_style_transp);
 80091e6:	4a3a      	ldr	r2, [pc, #232]	; (80092d0 <lv_page_create+0x1f8>)
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, th->style.page.scrl);
 80091e8:	2101      	movs	r1, #1
 80091ea:	4620      	mov	r0, r4
 80091ec:	f00c fabf 	bl	801576e <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, th->style.page.sb);
 80091f0:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, &lv_style_pretty_color);
 80091f4:	2102      	movs	r1, #2
 80091f6:	4620      	mov	r0, r4
 80091f8:	f00c fab9 	bl	801576e <lv_page_set_style>
    lv_page_sb_refresh(new_page);
 80091fc:	4620      	mov	r0, r4
 80091fe:	f00c f8ab 	bl	8015358 <lv_page_sb_refresh>
}
 8009202:	4620      	mov	r0, r4
 8009204:	b003      	add	sp, #12
 8009206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                lv_page_set_style(new_page, LV_PAGE_STYLE_BG, th->style.page.bg);
 800920a:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
 800920e:	4631      	mov	r1, r6
 8009210:	4620      	mov	r0, r4
 8009212:	f00c faac 	bl	801576e <lv_page_set_style>
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, th->style.page.scrl);
 8009216:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
 800921a:	e7e5      	b.n	80091e8 <lv_page_create+0x110>
            lv_page_set_style(new_page, LV_PAGE_STYLE_BG, &lv_style_pretty_color);
 800921c:	4a2d      	ldr	r2, [pc, #180]	; (80092d4 <lv_page_create+0x1fc>)
 800921e:	4631      	mov	r1, r6
 8009220:	4620      	mov	r0, r4
 8009222:	f00c faa4 	bl	801576e <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, &lv_style_pretty);
 8009226:	463a      	mov	r2, r7
 8009228:	2101      	movs	r1, #1
 800922a:	4620      	mov	r0, r4
 800922c:	f00c fa9f 	bl	801576e <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, &lv_style_pretty_color);
 8009230:	4a28      	ldr	r2, [pc, #160]	; (80092d4 <lv_page_create+0x1fc>)
 8009232:	e7df      	b.n	80091f4 <lv_page_create+0x11c>
        lv_page_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8009234:	4630      	mov	r0, r6
 8009236:	f006 fc43 	bl	800fac0 <lv_obj_get_ext_attr>
 800923a:	4607      	mov	r7, r0
        ext->scrl                = lv_cont_create(new_page, copy_ext->scrl);
 800923c:	6841      	ldr	r1, [r0, #4]
 800923e:	4620      	mov	r0, r4
 8009240:	f7ff f950 	bl	80084e4 <lv_cont_create>
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 8009244:	491d      	ldr	r1, [pc, #116]	; (80092bc <lv_page_create+0x1e4>)
        ext->scrl                = lv_cont_create(new_page, copy_ext->scrl);
 8009246:	6068      	str	r0, [r5, #4]
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 8009248:	f005 ffc7 	bl	800f1da <lv_obj_set_signal_cb>
        lv_page_set_sb_mode(new_page, copy_ext->sb.mode);
 800924c:	7f39      	ldrb	r1, [r7, #28]
 800924e:	4620      	mov	r0, r4
 8009250:	f3c1 0182 	ubfx	r1, r1, #2, #3
 8009254:	f00c fa4f 	bl	80156f6 <lv_page_set_sb_mode>
        lv_page_set_style(new_page, LV_PAGE_STYLE_BG, lv_page_get_style(copy, LV_PAGE_STYLE_BG));
 8009258:	4649      	mov	r1, r9
 800925a:	4630      	mov	r0, r6
 800925c:	f00c fac9 	bl	80157f2 <lv_page_get_style>
 8009260:	4649      	mov	r1, r9
 8009262:	4602      	mov	r2, r0
 8009264:	4620      	mov	r0, r4
 8009266:	f00c fa82 	bl	801576e <lv_page_set_style>
        lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, lv_page_get_style(copy, LV_PAGE_STYLE_SCRL));
 800926a:	2101      	movs	r1, #1
 800926c:	4630      	mov	r0, r6
 800926e:	f00c fac0 	bl	80157f2 <lv_page_get_style>
 8009272:	2101      	movs	r1, #1
 8009274:	4602      	mov	r2, r0
 8009276:	4620      	mov	r0, r4
 8009278:	f00c fa79 	bl	801576e <lv_page_set_style>
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
 800927c:	4630      	mov	r0, r6
 800927e:	f006 fc1f 	bl	800fac0 <lv_obj_get_ext_attr>
        lv_page_set_style(new_page, LV_PAGE_STYLE_SB, lv_page_get_style(copy, LV_PAGE_STYLE_SB));
 8009282:	2102      	movs	r1, #2
 8009284:	6882      	ldr	r2, [r0, #8]
 8009286:	4620      	mov	r0, r4
 8009288:	f00c fa71 	bl	801576e <lv_page_set_style>
        lv_obj_set_signal_cb(new_page, lv_page_signal);
 800928c:	4620      	mov	r0, r4
 800928e:	490e      	ldr	r1, [pc, #56]	; (80092c8 <lv_page_create+0x1f0>)
 8009290:	f005 ffa3 	bl	800f1da <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_page, lv_page_design);
 8009294:	4620      	mov	r0, r4
 8009296:	490d      	ldr	r1, [pc, #52]	; (80092cc <lv_page_create+0x1f4>)
 8009298:	f005 ffa1 	bl	800f1de <lv_obj_set_design_cb>
        lv_obj_refresh_style(new_page);
 800929c:	4620      	mov	r0, r4
 800929e:	f006 fa8e 	bl	800f7be <lv_obj_refresh_style>
 80092a2:	e7ab      	b.n	80091fc <lv_page_create+0x124>
 80092a4:	080176f4 	.word	0x080176f4
 80092a8:	0801c676 	.word	0x0801c676
 80092ac:	2002898c 	.word	0x2002898c
 80092b0:	20028988 	.word	0x20028988
 80092b4:	2002059c 	.word	0x2002059c
 80092b8:	20020560 	.word	0x20020560
 80092bc:	080099bd 	.word	0x080099bd
 80092c0:	08009049 	.word	0x08009049
 80092c4:	08015337 	.word	0x08015337
 80092c8:	08009745 	.word	0x08009745
 80092cc:	080092d9 	.word	0x080092d9
 80092d0:	20020650 	.word	0x20020650
 80092d4:	200205d8 	.word	0x200205d8

080092d8 <lv_page_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 80092d8:	2a02      	cmp	r2, #2
{
 80092da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092dc:	4604      	mov	r4, r0
 80092de:	b0a3      	sub	sp, #140	; 0x8c
 80092e0:	460f      	mov	r7, r1
 80092e2:	4615      	mov	r5, r2
    if(mode == LV_DESIGN_COVER_CHK) {
 80092e4:	d104      	bne.n	80092f0 <lv_page_design+0x18>
        return ancestor_design(page, mask, mode);
 80092e6:	4b80      	ldr	r3, [pc, #512]	; (80094e8 <lv_page_design+0x210>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4798      	blx	r3
}
 80092ec:	b023      	add	sp, #140	; 0x8c
 80092ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    const lv_style_t * style = lv_page_get_style(page, LV_PAGE_STYLE_BG);
 80092f0:	2100      	movs	r1, #0
 80092f2:	f00c fa7e 	bl	80157f2 <lv_page_get_style>
    lv_style_copy(&style_tmp, style);
 80092f6:	4601      	mov	r1, r0
 80092f8:	a804      	add	r0, sp, #16
 80092fa:	f006 fce6 	bl	800fcca <lv_style_copy>
    if(mode == LV_DESIGN_DRAW_MAIN) {
 80092fe:	b96d      	cbnz	r5, 800931c <lv_page_design+0x44>
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
 8009300:	4620      	mov	r0, r4
        style_tmp.body.border.width = 0;
 8009302:	f8ad 501c 	strh.w	r5, [sp, #28]
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
 8009306:	f006 fb72 	bl	800f9ee <lv_obj_get_opa_scale>
 800930a:	aa04      	add	r2, sp, #16
 800930c:	4603      	mov	r3, r0
 800930e:	4639      	mov	r1, r7
 8009310:	f104 0010 	add.w	r0, r4, #16
                lv_draw_rect(&flash_area, mask, &flash_style, lv_obj_get_opa_scale(page));
 8009314:	f008 f9a1 	bl	801165a <lv_draw_rect>
 8009318:	2001      	movs	r0, #1
 800931a:	e7e7      	b.n	80092ec <lv_page_design+0x14>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 800931c:	2d01      	cmp	r5, #1
 800931e:	d1fb      	bne.n	8009318 <lv_page_design+0x40>
        style_tmp.body.shadow.width = 0;
 8009320:	2300      	movs	r3, #0
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
 8009322:	4620      	mov	r0, r4
        style_tmp.body.shadow.width = 0;
 8009324:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        style_tmp.body.opa          = LV_OPA_TRANSP;
 8009328:	f88d 3018 	strb.w	r3, [sp, #24]
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
 800932c:	f006 fb5f 	bl	800f9ee <lv_obj_get_opa_scale>
 8009330:	aa04      	add	r2, sp, #16
 8009332:	4603      	mov	r3, r0
 8009334:	4639      	mov	r1, r7
 8009336:	f104 0010 	add.w	r0, r4, #16
 800933a:	f008 f98e 	bl	801165a <lv_draw_rect>
        lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 800933e:	4620      	mov	r0, r4
 8009340:	f006 fbbe 	bl	800fac0 <lv_obj_get_ext_attr>
        if(ext->sb.hor_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 8009344:	7f03      	ldrb	r3, [r0, #28]
        lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8009346:	4606      	mov	r6, r0
        if(ext->sb.hor_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 8009348:	07da      	lsls	r2, r3, #31
 800934a:	d52a      	bpl.n	80093a2 <lv_page_design+0xca>
 800934c:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8009350:	075b      	lsls	r3, r3, #29
 8009352:	d426      	bmi.n	80093a2 <lv_page_design+0xca>
            lv_area_copy(&sb_area, &ext->sb.hor_area);
 8009354:	f100 010c 	add.w	r1, r0, #12
 8009358:	4668      	mov	r0, sp
 800935a:	f00b ffe9 	bl	8015330 <lv_area_copy>
            sb_area.x1 += page->coords.x1;
 800935e:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8009362:	f8bd 3000 	ldrh.w	r3, [sp]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 8009366:	4620      	mov	r0, r4
            sb_area.y1 += page->coords.y1;
 8009368:	f8bd 1002 	ldrh.w	r1, [sp, #2]
            sb_area.x1 += page->coords.x1;
 800936c:	4413      	add	r3, r2
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 800936e:	68b5      	ldr	r5, [r6, #8]
            sb_area.x1 += page->coords.x1;
 8009370:	f8ad 3000 	strh.w	r3, [sp]
            sb_area.y1 += page->coords.y1;
 8009374:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8009378:	4419      	add	r1, r3
 800937a:	f8ad 1002 	strh.w	r1, [sp, #2]
            sb_area.x2 += page->coords.x1;
 800937e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8009382:	440a      	add	r2, r1
 8009384:	f8ad 2004 	strh.w	r2, [sp, #4]
            sb_area.y2 += page->coords.y1;
 8009388:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800938c:	4413      	add	r3, r2
 800938e:	f8ad 3006 	strh.w	r3, [sp, #6]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 8009392:	f006 fb2c 	bl	800f9ee <lv_obj_get_opa_scale>
 8009396:	462a      	mov	r2, r5
 8009398:	4603      	mov	r3, r0
 800939a:	4639      	mov	r1, r7
 800939c:	4668      	mov	r0, sp
 800939e:	f008 f95c 	bl	801165a <lv_draw_rect>
        if(ext->sb.ver_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 80093a2:	7f33      	ldrb	r3, [r6, #28]
 80093a4:	079d      	lsls	r5, r3, #30
 80093a6:	d52a      	bpl.n	80093fe <lv_page_design+0x126>
 80093a8:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80093ac:	0758      	lsls	r0, r3, #29
 80093ae:	d426      	bmi.n	80093fe <lv_page_design+0x126>
            lv_area_copy(&sb_area, &ext->sb.ver_area);
 80093b0:	f106 0114 	add.w	r1, r6, #20
 80093b4:	4668      	mov	r0, sp
 80093b6:	f00b ffbb 	bl	8015330 <lv_area_copy>
            sb_area.x1 += page->coords.x1;
 80093ba:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 80093be:	f8bd 3000 	ldrh.w	r3, [sp]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 80093c2:	4620      	mov	r0, r4
            sb_area.y1 += page->coords.y1;
 80093c4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
            sb_area.x1 += page->coords.x1;
 80093c8:	4413      	add	r3, r2
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 80093ca:	68b5      	ldr	r5, [r6, #8]
            sb_area.x1 += page->coords.x1;
 80093cc:	f8ad 3000 	strh.w	r3, [sp]
            sb_area.y1 += page->coords.y1;
 80093d0:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 80093d4:	4419      	add	r1, r3
 80093d6:	f8ad 1002 	strh.w	r1, [sp, #2]
            sb_area.x2 += page->coords.x1;
 80093da:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80093de:	440a      	add	r2, r1
 80093e0:	f8ad 2004 	strh.w	r2, [sp, #4]
            sb_area.y2 += page->coords.y1;
 80093e4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80093e8:	4413      	add	r3, r2
 80093ea:	f8ad 3006 	strh.w	r3, [sp, #6]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 80093ee:	f006 fafe 	bl	800f9ee <lv_obj_get_opa_scale>
 80093f2:	462a      	mov	r2, r5
 80093f4:	4603      	mov	r3, r0
 80093f6:	4639      	mov	r1, r7
 80093f8:	4668      	mov	r0, sp
 80093fa:	f008 f92e 	bl	801165a <lv_draw_rect>
            lv_coord_t page_w = lv_obj_get_width(page);
 80093fe:	4620      	mov	r0, r4
 8009400:	f006 fac3 	bl	800f98a <lv_obj_get_width>
 8009404:	4605      	mov	r5, r0
            lv_coord_t page_h = lv_obj_get_height(page);
 8009406:	4620      	mov	r0, r4
 8009408:	f006 fac5 	bl	800f996 <lv_obj_get_height>
            if(ext->edge_flash.top_ip) {
 800940c:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 8009410:	0791      	lsls	r1, r2, #30
 8009412:	d530      	bpl.n	8009476 <lv_page_design+0x19e>
                flash_area.x1 = page->coords.x1 - page_w;
 8009414:	8a23      	ldrh	r3, [r4, #16]
 8009416:	8c31      	ldrh	r1, [r6, #32]
 8009418:	1b5b      	subs	r3, r3, r5
 800941a:	f8ad 3008 	strh.w	r3, [sp, #8]
                flash_area.x2 = page->coords.x2 + page_w;
 800941e:	8aa3      	ldrh	r3, [r4, #20]
 8009420:	442b      	add	r3, r5
                flash_area.y1 = page->coords.y1 - 3 * page_w + ext->edge_flash.state;
 8009422:	eba5 0585 	sub.w	r5, r5, r5, lsl #2
                flash_area.x2 = page->coords.x2 + page_w;
 8009426:	f8ad 300c 	strh.w	r3, [sp, #12]
                flash_area.y1 = page->coords.y1 - 3 * page_w + ext->edge_flash.state;
 800942a:	8a63      	ldrh	r3, [r4, #18]
 800942c:	440b      	add	r3, r1
 800942e:	b21b      	sxth	r3, r3
 8009430:	441d      	add	r5, r3
                flash_area.y2 = page->coords.y1 + ext->edge_flash.state;
 8009432:	f8ad 300e 	strh.w	r3, [sp, #14]
                flash_area.y1 = page->coords.y1 - 3 * page_w + ext->edge_flash.state;
 8009436:	f8ad 500a 	strh.w	r5, [sp, #10]
            if(ext->edge_flash.left_ip || ext->edge_flash.right_ip || ext->edge_flash.top_ip ||
 800943a:	f012 0f1e 	tst.w	r2, #30
 800943e:	f43f af6b 	beq.w	8009318 <lv_page_design+0x40>
                lv_style_copy(&flash_style, ext->edge_flash.style);
 8009442:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8009444:	a813      	add	r0, sp, #76	; 0x4c
 8009446:	f006 fc40 	bl	800fcca <lv_style_copy>
                flash_style.body.radius = LV_RADIUS_CIRCLE;
 800944a:	f647 4318 	movw	r3, #31768	; 0x7c18
                uint32_t opa            = (flash_style.body.opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
 800944e:	8c32      	ldrh	r2, [r6, #32]
                lv_draw_rect(&flash_area, mask, &flash_style, lv_obj_get_opa_scale(page));
 8009450:	4620      	mov	r0, r4
                flash_style.body.radius = LV_RADIUS_CIRCLE;
 8009452:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
                uint32_t opa            = (flash_style.body.opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
 8009456:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800945a:	fb13 f302 	smulbb	r3, r3, r2
 800945e:	2219      	movs	r2, #25
 8009460:	fb93 f3f2 	sdiv	r3, r3, r2
                flash_style.body.opa    = opa;
 8009464:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
                lv_draw_rect(&flash_area, mask, &flash_style, lv_obj_get_opa_scale(page));
 8009468:	f006 fac1 	bl	800f9ee <lv_obj_get_opa_scale>
 800946c:	aa13      	add	r2, sp, #76	; 0x4c
 800946e:	4603      	mov	r3, r0
 8009470:	4639      	mov	r1, r7
 8009472:	a802      	add	r0, sp, #8
 8009474:	e74e      	b.n	8009314 <lv_page_design+0x3c>
            } else if(ext->edge_flash.bottom_ip) {
 8009476:	0753      	lsls	r3, r2, #29
 8009478:	d513      	bpl.n	80094a2 <lv_page_design+0x1ca>
                flash_area.x1 = page->coords.x1 - page_w;
 800947a:	8a23      	ldrh	r3, [r4, #16]
                flash_area.y1 = page->coords.y2 - ext->edge_flash.state;
 800947c:	8c31      	ldrh	r1, [r6, #32]
                flash_area.x1 = page->coords.x1 - page_w;
 800947e:	1b5b      	subs	r3, r3, r5
 8009480:	f8ad 3008 	strh.w	r3, [sp, #8]
                flash_area.x2 = page->coords.x2 + page_w;
 8009484:	8aa3      	ldrh	r3, [r4, #20]
 8009486:	442b      	add	r3, r5
                flash_area.y2 = page->coords.y2 + 3 * page_w - ext->edge_flash.state;
 8009488:	eb05 0545 	add.w	r5, r5, r5, lsl #1
                flash_area.x2 = page->coords.x2 + page_w;
 800948c:	f8ad 300c 	strh.w	r3, [sp, #12]
                flash_area.y1 = page->coords.y2 - ext->edge_flash.state;
 8009490:	8ae3      	ldrh	r3, [r4, #22]
 8009492:	1a5b      	subs	r3, r3, r1
 8009494:	b21b      	sxth	r3, r3
                flash_area.y2 = page->coords.y2 + 3 * page_w - ext->edge_flash.state;
 8009496:	441d      	add	r5, r3
                flash_area.y1 = page->coords.y2 - ext->edge_flash.state;
 8009498:	f8ad 300a 	strh.w	r3, [sp, #10]
                flash_area.y2 = page->coords.y2 + 3 * page_w - ext->edge_flash.state;
 800949c:	f8ad 500e 	strh.w	r5, [sp, #14]
 80094a0:	e7cb      	b.n	800943a <lv_page_design+0x162>
            } else if(ext->edge_flash.right_ip) {
 80094a2:	0711      	lsls	r1, r2, #28
 80094a4:	d513      	bpl.n	80094ce <lv_page_design+0x1f6>
                flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
 80094a6:	8c31      	ldrh	r1, [r6, #32]
 80094a8:	8aa3      	ldrh	r3, [r4, #20]
 80094aa:	1a5b      	subs	r3, r3, r1
                flash_area.x2 = page->coords.x2 + 3 * page_h - ext->edge_flash.state;
 80094ac:	eb00 0140 	add.w	r1, r0, r0, lsl #1
                flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
 80094b0:	b21b      	sxth	r3, r3
 80094b2:	f8ad 3008 	strh.w	r3, [sp, #8]
                flash_area.x2 = page->coords.x2 + 3 * page_h - ext->edge_flash.state;
 80094b6:	440b      	add	r3, r1
                flash_area.x2 = page->coords.x1 + ext->edge_flash.state;
 80094b8:	f8ad 300c 	strh.w	r3, [sp, #12]
                flash_area.y1 = page->coords.y1 - page_h;
 80094bc:	8a63      	ldrh	r3, [r4, #18]
 80094be:	1a1b      	subs	r3, r3, r0
 80094c0:	f8ad 300a 	strh.w	r3, [sp, #10]
                flash_area.y2 = page->coords.y2 + page_h;
 80094c4:	8ae3      	ldrh	r3, [r4, #22]
 80094c6:	4418      	add	r0, r3
 80094c8:	f8ad 000e 	strh.w	r0, [sp, #14]
 80094cc:	e7b5      	b.n	800943a <lv_page_design+0x162>
            } else if(ext->edge_flash.left_ip) {
 80094ce:	06d3      	lsls	r3, r2, #27
 80094d0:	d5b3      	bpl.n	800943a <lv_page_design+0x162>
                flash_area.x1 = page->coords.x1 - 3 * page_h + ext->edge_flash.state;
 80094d2:	8c31      	ldrh	r1, [r6, #32]
 80094d4:	8a23      	ldrh	r3, [r4, #16]
 80094d6:	440b      	add	r3, r1
 80094d8:	eba0 0180 	sub.w	r1, r0, r0, lsl #2
 80094dc:	b21b      	sxth	r3, r3
 80094de:	4419      	add	r1, r3
 80094e0:	f8ad 1008 	strh.w	r1, [sp, #8]
 80094e4:	e7e8      	b.n	80094b8 <lv_page_design+0x1e0>
 80094e6:	bf00      	nop
 80094e8:	20028988 	.word	0x20028988

080094ec <lv_page_focus>:
{
 80094ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f0:	4607      	mov	r7, r0
 80094f2:	b08f      	sub	sp, #60	; 0x3c
 80094f4:	468b      	mov	fp, r1
 80094f6:	9201      	str	r2, [sp, #4]
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80094f8:	f006 fae2 	bl	800fac0 <lv_obj_get_ext_attr>
    lv_anim_del(page, (lv_anim_exec_xcb_t)lv_obj_set_x);
 80094fc:	496a      	ldr	r1, [pc, #424]	; (80096a8 <lv_page_focus+0x1bc>)
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80094fe:	4606      	mov	r6, r0
    lv_anim_del(page, (lv_anim_exec_xcb_t)lv_obj_set_x);
 8009500:	4638      	mov	r0, r7
 8009502:	f7fa fb77 	bl	8003bf4 <lv_anim_del>
    lv_anim_del(page, (lv_anim_exec_xcb_t)lv_obj_set_y);
 8009506:	4969      	ldr	r1, [pc, #420]	; (80096ac <lv_page_focus+0x1c0>)
 8009508:	4638      	mov	r0, r7
 800950a:	f7fa fb73 	bl	8003bf4 <lv_anim_del>
    lv_anim_del(ext->scrl, (lv_anim_exec_xcb_t)lv_obj_set_x);
 800950e:	4966      	ldr	r1, [pc, #408]	; (80096a8 <lv_page_focus+0x1bc>)
 8009510:	6870      	ldr	r0, [r6, #4]
 8009512:	f7fa fb6f 	bl	8003bf4 <lv_anim_del>
    lv_anim_del(ext->scrl, (lv_anim_exec_xcb_t)lv_obj_set_y);
 8009516:	4965      	ldr	r1, [pc, #404]	; (80096ac <lv_page_focus+0x1c0>)
 8009518:	6870      	ldr	r0, [r6, #4]
 800951a:	f7fa fb6b 	bl	8003bf4 <lv_anim_del>
    const lv_style_t * style      = lv_page_get_style(page, LV_PAGE_STYLE_BG);
 800951e:	2100      	movs	r1, #0
 8009520:	4638      	mov	r0, r7
 8009522:	f00c f966 	bl	80157f2 <lv_page_get_style>
    const lv_style_t * style_scrl = lv_page_get_style(page, LV_PAGE_STYLE_SCRL);
 8009526:	2101      	movs	r1, #1
    const lv_style_t * style      = lv_page_get_style(page, LV_PAGE_STYLE_BG);
 8009528:	4681      	mov	r9, r0
    const lv_style_t * style_scrl = lv_page_get_style(page, LV_PAGE_STYLE_SCRL);
 800952a:	4638      	mov	r0, r7
 800952c:	f00c f961 	bl	80157f2 <lv_page_get_style>
    lv_coord_t obj_y      = obj->coords.y1 - ext->scrl->coords.y1;
 8009530:	6871      	ldr	r1, [r6, #4]
 8009532:	f9bb 2012 	ldrsh.w	r2, [fp, #18]
    const lv_style_t * style_scrl = lv_page_get_style(page, LV_PAGE_STYLE_SCRL);
 8009536:	4682      	mov	sl, r0
    lv_coord_t obj_y      = obj->coords.y1 - ext->scrl->coords.y1;
 8009538:	f9b1 8012 	ldrsh.w	r8, [r1, #18]
    lv_coord_t obj_h      = lv_obj_get_height(obj);
 800953c:	4658      	mov	r0, fp
    lv_coord_t obj_y      = obj->coords.y1 - ext->scrl->coords.y1;
 800953e:	9203      	str	r2, [sp, #12]
 8009540:	eba2 0508 	sub.w	r5, r2, r8
    lv_coord_t obj_h      = lv_obj_get_height(obj);
 8009544:	f006 fa27 	bl	800f996 <lv_obj_get_height>
 8009548:	9002      	str	r0, [sp, #8]
    lv_coord_t scrlable_y = lv_obj_get_y(ext->scrl);
 800954a:	6870      	ldr	r0, [r6, #4]
    lv_coord_t obj_y      = obj->coords.y1 - ext->scrl->coords.y1;
 800954c:	b22d      	sxth	r5, r5
    lv_coord_t scrlable_y = lv_obj_get_y(ext->scrl);
 800954e:	f006 fa16 	bl	800f97e <lv_obj_get_y>
 8009552:	4604      	mov	r4, r0
    lv_coord_t page_h     = lv_obj_get_height(page);
 8009554:	4638      	mov	r0, r7
 8009556:	f006 fa1e 	bl	800f996 <lv_obj_get_height>
    lv_coord_t top_err = -(scrlable_y + obj_y);
 800955a:	4425      	add	r5, r4
    lv_coord_t bot_err = scrlable_y + obj_y + obj_h - page_h;
 800955c:	9902      	ldr	r1, [sp, #8]
    lv_coord_t top_err = -(scrlable_y + obj_y);
 800955e:	b22d      	sxth	r5, r5
    if((obj_h <= page_h && top_err > 0) || (obj_h > page_h && top_err < bot_err)) {
 8009560:	9a03      	ldr	r2, [sp, #12]
    lv_coord_t bot_err = scrlable_y + obj_y + obj_h - page_h;
 8009562:	eba1 0e00 	sub.w	lr, r1, r0
    if((obj_h <= page_h && top_err > 0) || (obj_h > page_h && top_err < bot_err)) {
 8009566:	4281      	cmp	r1, r0
    lv_coord_t top_err = -(scrlable_y + obj_y);
 8009568:	f1c5 0c00 	rsb	ip, r5, #0
    lv_coord_t bot_err = scrlable_y + obj_y + obj_h - page_h;
 800956c:	4475      	add	r5, lr
    lv_coord_t top_err = -(scrlable_y + obj_y);
 800956e:	fa0f fc8c 	sxth.w	ip, ip
    lv_coord_t bot_err = scrlable_y + obj_y + obj_h - page_h;
 8009572:	b22d      	sxth	r5, r5
    if((obj_h <= page_h && top_err > 0) || (obj_h > page_h && top_err < bot_err)) {
 8009574:	dc10      	bgt.n	8009598 <lv_page_focus+0xac>
 8009576:	f1bc 0f00 	cmp.w	ip, #0
 800957a:	dc0f      	bgt.n	800959c <lv_page_focus+0xb0>
    else if((obj_h <= page_h && bot_err > 0) || (obj_h > page_h && top_err >= bot_err)) {
 800957c:	2d00      	cmp	r5, #0
 800957e:	dd16      	ble.n	80095ae <lv_page_focus+0xc2>
        scrlable_y = -(obj_y + style_scrl->body.padding.bottom + style->body.padding.bottom);
 8009580:	f9ba 5018 	ldrsh.w	r5, [sl, #24]
        scrlable_y += page_h - obj_h;
 8009584:	1a44      	subs	r4, r0, r1
 8009586:	f8b9 0018 	ldrh.w	r0, [r9, #24]
 800958a:	eba8 0802 	sub.w	r8, r8, r2
 800958e:	1b64      	subs	r4, r4, r5
 8009590:	1a24      	subs	r4, r4, r0
 8009592:	1b64      	subs	r4, r4, r5
 8009594:	4444      	add	r4, r8
 8009596:	e009      	b.n	80095ac <lv_page_focus+0xc0>
    if((obj_h <= page_h && top_err > 0) || (obj_h > page_h && top_err < bot_err)) {
 8009598:	45ac      	cmp	ip, r5
 800959a:	daf1      	bge.n	8009580 <lv_page_focus+0x94>
        scrlable_y += style_scrl->body.padding.top;
 800959c:	f8b9 4016 	ldrh.w	r4, [r9, #22]
 80095a0:	1aa4      	subs	r4, r4, r2
 80095a2:	4444      	add	r4, r8
 80095a4:	f8ba 8016 	ldrh.w	r8, [sl, #22]
 80095a8:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 80095ac:	b224      	sxth	r4, r4
    lv_coord_t obj_x      = obj->coords.x1 - ext->scrl->coords.x1;
 80095ae:	6872      	ldr	r2, [r6, #4]
    lv_coord_t obj_w      = lv_obj_get_width(obj);
 80095b0:	4658      	mov	r0, fp
    lv_coord_t obj_x      = obj->coords.x1 - ext->scrl->coords.x1;
 80095b2:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
 80095b6:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80095ba:	1a8d      	subs	r5, r1, r2
 80095bc:	e9cd 1202 	strd	r1, r2, [sp, #8]
    lv_coord_t obj_w      = lv_obj_get_width(obj);
 80095c0:	f006 f9e3 	bl	800f98a <lv_obj_get_width>
 80095c4:	4683      	mov	fp, r0
    lv_coord_t scrlable_x = lv_obj_get_x(ext->scrl);
 80095c6:	6870      	ldr	r0, [r6, #4]
    lv_coord_t obj_x      = obj->coords.x1 - ext->scrl->coords.x1;
 80095c8:	b22d      	sxth	r5, r5
    lv_coord_t scrlable_x = lv_obj_get_x(ext->scrl);
 80095ca:	f006 f9d2 	bl	800f972 <lv_obj_get_x>
 80095ce:	4680      	mov	r8, r0
    lv_coord_t page_w     = lv_obj_get_width(page);
 80095d0:	4638      	mov	r0, r7
 80095d2:	f006 f9da 	bl	800f98a <lv_obj_get_width>
    lv_coord_t left_err  = -(scrlable_x + obj_x);
 80095d6:	eb05 0c08 	add.w	ip, r5, r8
    if((obj_w <= page_w && left_err > 0) || (obj_w > page_w && left_err < right_err)) {
 80095da:	4583      	cmp	fp, r0
    lv_coord_t left_err  = -(scrlable_x + obj_x);
 80095dc:	fa0f fc8c 	sxth.w	ip, ip
 80095e0:	f1cc 0e00 	rsb	lr, ip, #0
    lv_coord_t right_err = scrlable_x + obj_x + obj_w - page_w;
 80095e4:	ebac 0c00 	sub.w	ip, ip, r0
 80095e8:	44dc      	add	ip, fp
    lv_coord_t left_err  = -(scrlable_x + obj_x);
 80095ea:	fa0f fe8e 	sxth.w	lr, lr
    lv_coord_t right_err = scrlable_x + obj_x + obj_w - page_w;
 80095ee:	fa0f fc8c 	sxth.w	ip, ip
    if((obj_w <= page_w && left_err > 0) || (obj_w > page_w && left_err < right_err)) {
 80095f2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80095f6:	dc10      	bgt.n	800961a <lv_page_focus+0x12e>
 80095f8:	f1be 0f00 	cmp.w	lr, #0
 80095fc:	dc0f      	bgt.n	800961e <lv_page_focus+0x132>
    else if((obj_w <= page_w && right_err > 0) || (obj_w > page_w && left_err >= right_err)) {
 80095fe:	f1bc 0f00 	cmp.w	ip, #0
 8009602:	dd16      	ble.n	8009632 <lv_page_focus+0x146>
        scrlable_x = -(obj_x + style_scrl->body.padding.right + style->body.padding.right);
 8009604:	f9ba 101c 	ldrsh.w	r1, [sl, #28]
 8009608:	f8b9 201c 	ldrh.w	r2, [r9, #28]
 800960c:	1a40      	subs	r0, r0, r1
 800960e:	440a      	add	r2, r1
 8009610:	4415      	add	r5, r2
 8009612:	1b40      	subs	r0, r0, r5
        scrlable_x += page_w - obj_w;
 8009614:	eba0 000b 	sub.w	r0, r0, fp
 8009618:	e009      	b.n	800962e <lv_page_focus+0x142>
    if((obj_w <= page_w && left_err > 0) || (obj_w > page_w && left_err < right_err)) {
 800961a:	45e6      	cmp	lr, ip
 800961c:	daf2      	bge.n	8009604 <lv_page_focus+0x118>
        scrlable_x += style_scrl->body.padding.left;
 800961e:	f8b9 001a 	ldrh.w	r0, [r9, #26]
 8009622:	1a40      	subs	r0, r0, r1
 8009624:	4402      	add	r2, r0
 8009626:	f8ba 001a 	ldrh.w	r0, [sl, #26]
 800962a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
        scrlable_x += page_w - obj_w;
 800962e:	fa0f f880 	sxth.w	r8, r0
    if(anim_en == LV_ANIM_OFF || lv_page_get_anim_time(page) == 0) {
 8009632:	9b01      	ldr	r3, [sp, #4]
 8009634:	b953      	cbnz	r3, 800964c <lv_page_focus+0x160>
        lv_obj_set_y(ext->scrl, scrlable_y);
 8009636:	4621      	mov	r1, r4
 8009638:	6870      	ldr	r0, [r6, #4]
 800963a:	f005 fe87 	bl	800f34c <lv_obj_set_y>
        lv_obj_set_x(ext->scrl, scrlable_x);
 800963e:	4641      	mov	r1, r8
 8009640:	6870      	ldr	r0, [r6, #4]
 8009642:	f005 fe7a 	bl	800f33a <lv_obj_set_x>
}
 8009646:	b00f      	add	sp, #60	; 0x3c
 8009648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(anim_en == LV_ANIM_OFF || lv_page_get_anim_time(page) == 0) {
 800964c:	4638      	mov	r0, r7
 800964e:	f00c f8c3 	bl	80157d8 <lv_page_get_anim_time>
 8009652:	2800      	cmp	r0, #0
 8009654:	d0ef      	beq.n	8009636 <lv_page_focus+0x14a>
        a.act_time = 0;
 8009656:	2500      	movs	r5, #0
        a.start    = lv_obj_get_y(ext->scrl);
 8009658:	6870      	ldr	r0, [r6, #4]
        a.act_time = 0;
 800965a:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
        a.start    = lv_obj_get_y(ext->scrl);
 800965e:	f006 f98e 	bl	800f97e <lv_obj_get_y>
        a.end      = scrlable_y;
 8009662:	e9cd 0408 	strd	r0, r4, [sp, #32]
        a.time     = lv_page_get_anim_time(page);
 8009666:	4638      	mov	r0, r7
 8009668:	f00c f8b6 	bl	80157d8 <lv_page_get_anim_time>
        a.playback = 0;
 800966c:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
        a.time     = lv_page_get_anim_time(page);
 8009670:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
        lv_anim_create(&a);
 8009674:	a804      	add	r0, sp, #16
        a.playback = 0;
 8009676:	f023 0303 	bic.w	r3, r3, #3
        a.ready_cb = NULL;
 800967a:	9507      	str	r5, [sp, #28]
        a.playback = 0;
 800967c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
        a.var      = ext->scrl;
 8009680:	6873      	ldr	r3, [r6, #4]
 8009682:	9304      	str	r3, [sp, #16]
        a.path_cb  = lv_anim_path_linear;
 8009684:	4b0a      	ldr	r3, [pc, #40]	; (80096b0 <lv_page_focus+0x1c4>)
 8009686:	9306      	str	r3, [sp, #24]
        a.exec_cb  = (lv_anim_exec_xcb_t)lv_obj_set_y;
 8009688:	4b08      	ldr	r3, [pc, #32]	; (80096ac <lv_page_focus+0x1c0>)
 800968a:	9305      	str	r3, [sp, #20]
        lv_anim_create(&a);
 800968c:	f7fa fae0 	bl	8003c50 <lv_anim_create>
        a.start   = lv_obj_get_x(ext->scrl);
 8009690:	6870      	ldr	r0, [r6, #4]
 8009692:	f006 f96e 	bl	800f972 <lv_obj_get_x>
        a.exec_cb = (lv_anim_exec_xcb_t)lv_obj_set_x;
 8009696:	4b04      	ldr	r3, [pc, #16]	; (80096a8 <lv_page_focus+0x1bc>)
        a.end     = scrlable_x;
 8009698:	e9cd 0808 	strd	r0, r8, [sp, #32]
        lv_anim_create(&a);
 800969c:	a804      	add	r0, sp, #16
        a.exec_cb = (lv_anim_exec_xcb_t)lv_obj_set_x;
 800969e:	9305      	str	r3, [sp, #20]
        lv_anim_create(&a);
 80096a0:	f7fa fad6 	bl	8003c50 <lv_anim_create>
}
 80096a4:	e7cf      	b.n	8009646 <lv_page_focus+0x15a>
 80096a6:	bf00      	nop
 80096a8:	0800f33b 	.word	0x0800f33b
 80096ac:	0800f34d 	.word	0x0800f34d
 80096b0:	0801057d 	.word	0x0801057d

080096b4 <lv_page_scroll_hor>:
{
 80096b4:	b510      	push	{r4, lr}
 80096b6:	b08a      	sub	sp, #40	; 0x28
 80096b8:	460c      	mov	r4, r1
    lv_obj_t * scrl = lv_page_get_scrl(page);
 80096ba:	f00c f888 	bl	80157ce <lv_page_get_scrl>
    a.var            = scrl;
 80096be:	9000      	str	r0, [sp, #0]
    a.start          = lv_obj_get_x(scrl);
 80096c0:	f006 f957 	bl	800f972 <lv_obj_get_x>
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_x;
 80096c4:	4b0b      	ldr	r3, [pc, #44]	; (80096f4 <lv_page_scroll_hor+0x40>)
    a.ready_cb       = NULL;
 80096c6:	2200      	movs	r2, #0
    a.start          = lv_obj_get_x(scrl);
 80096c8:	9004      	str	r0, [sp, #16]
    a.end            = a.start + dist;
 80096ca:	4404      	add	r4, r0
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_x;
 80096cc:	9301      	str	r3, [sp, #4]
    lv_anim_create(&a);
 80096ce:	4668      	mov	r0, sp
    a.path_cb        = lv_anim_path_linear;
 80096d0:	4b09      	ldr	r3, [pc, #36]	; (80096f8 <lv_page_scroll_hor+0x44>)
    a.end            = a.start + dist;
 80096d2:	9405      	str	r4, [sp, #20]
    a.path_cb        = lv_anim_path_linear;
 80096d4:	9302      	str	r3, [sp, #8]
    a.playback       = 0;
 80096d6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    a.ready_cb       = NULL;
 80096da:	9203      	str	r2, [sp, #12]
    a.playback       = 0;
 80096dc:	f023 0303 	bic.w	r3, r3, #3
 80096e0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    a.time           = LV_PAGE_SCROLL_ANIM_TIME;
 80096e4:	23c8      	movs	r3, #200	; 0xc8
    a.playback_pause = 0;
 80096e6:	e9cd 3206 	strd	r3, r2, [sp, #24]
    lv_anim_create(&a);
 80096ea:	f7fa fab1 	bl	8003c50 <lv_anim_create>
}
 80096ee:	b00a      	add	sp, #40	; 0x28
 80096f0:	bd10      	pop	{r4, pc}
 80096f2:	bf00      	nop
 80096f4:	0800f33b 	.word	0x0800f33b
 80096f8:	0801057d 	.word	0x0801057d

080096fc <lv_page_scroll_ver>:
{
 80096fc:	b510      	push	{r4, lr}
 80096fe:	b08a      	sub	sp, #40	; 0x28
 8009700:	460c      	mov	r4, r1
    lv_obj_t * scrl = lv_page_get_scrl(page);
 8009702:	f00c f864 	bl	80157ce <lv_page_get_scrl>
    a.var            = scrl;
 8009706:	9000      	str	r0, [sp, #0]
    a.start          = lv_obj_get_y(scrl);
 8009708:	f006 f939 	bl	800f97e <lv_obj_get_y>
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_y;
 800970c:	4b0b      	ldr	r3, [pc, #44]	; (800973c <lv_page_scroll_ver+0x40>)
    a.ready_cb       = NULL;
 800970e:	2200      	movs	r2, #0
    a.start          = lv_obj_get_y(scrl);
 8009710:	9004      	str	r0, [sp, #16]
    a.end            = a.start + dist;
 8009712:	4404      	add	r4, r0
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_y;
 8009714:	9301      	str	r3, [sp, #4]
    lv_anim_create(&a);
 8009716:	4668      	mov	r0, sp
    a.path_cb        = lv_anim_path_linear;
 8009718:	4b09      	ldr	r3, [pc, #36]	; (8009740 <lv_page_scroll_ver+0x44>)
    a.end            = a.start + dist;
 800971a:	9405      	str	r4, [sp, #20]
    a.path_cb        = lv_anim_path_linear;
 800971c:	9302      	str	r3, [sp, #8]
    a.playback       = 0;
 800971e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    a.ready_cb       = NULL;
 8009722:	9203      	str	r2, [sp, #12]
    a.playback       = 0;
 8009724:	f023 0303 	bic.w	r3, r3, #3
 8009728:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    a.time           = LV_PAGE_SCROLL_ANIM_TIME;
 800972c:	23c8      	movs	r3, #200	; 0xc8
    a.playback_pause = 0;
 800972e:	e9cd 3206 	strd	r3, r2, [sp, #24]
    lv_anim_create(&a);
 8009732:	f7fa fa8d 	bl	8003c50 <lv_anim_create>
}
 8009736:	b00a      	add	sp, #40	; 0x28
 8009738:	bd10      	pop	{r4, pc}
 800973a:	bf00      	nop
 800973c:	0800f34d 	.word	0x0800f34d
 8009740:	0801057d 	.word	0x0801057d

08009744 <lv_page_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_page_signal(lv_obj_t * page, lv_signal_t sign, void * param)
{
 8009744:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(page, sign, param);
 8009748:	4b84      	ldr	r3, [pc, #528]	; (800995c <lv_page_signal+0x218>)
{
 800974a:	4604      	mov	r4, r0
 800974c:	460e      	mov	r6, r1
 800974e:	4615      	mov	r5, r2
    res = ancestor_signal(page, sign, param);
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8009754:	2801      	cmp	r0, #1
    res = ancestor_signal(page, sign, param);
 8009756:	4680      	mov	r8, r0
    if(res != LV_RES_OK) return res;
 8009758:	d11e      	bne.n	8009798 <lv_page_signal+0x54>

    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 800975a:	4620      	mov	r0, r4
 800975c:	f006 f9b0 	bl	800fac0 <lv_obj_get_ext_attr>
    lv_obj_t * child;
    if(sign == LV_SIGNAL_CHILD_CHG) { /*Automatically move children to the scrollable object*/
 8009760:	2e01      	cmp	r6, #1
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8009762:	4607      	mov	r7, r0
    if(sign == LV_SIGNAL_CHILD_CHG) { /*Automatically move children to the scrollable object*/
 8009764:	d150      	bne.n	8009808 <lv_page_signal+0xc4>
        const lv_style_t * style = lv_page_get_style(page, LV_PAGE_STYLE_SCRL);
 8009766:	4641      	mov	r1, r8
 8009768:	4620      	mov	r0, r4
 800976a:	f00c f842 	bl	80157f2 <lv_page_get_style>
 800976e:	4681      	mov	r9, r0
 * @param page pointer to a page object
 * @return an element of `lv_fit_t`
 */
static inline lv_fit_t lv_page_get_scrl_fit_left(const lv_obj_t * page)
{
    return lv_cont_get_fit_left(lv_page_get_scrl(page));
 8009770:	4620      	mov	r0, r4
 8009772:	f00c f82c 	bl	80157ce <lv_page_get_scrl>
 8009776:	f00b fc75 	bl	8015064 <lv_cont_get_fit_left>
 800977a:	4682      	mov	sl, r0
 * @param page pointer to a page object
 * @return an element of `lv_fit_t`
 */
static inline lv_fit_t lv_page_get_scrl_fit_top(const lv_obj_t * page)
{
    return lv_cont_get_fit_top(lv_page_get_scrl(page));
 800977c:	4620      	mov	r0, r4
 800977e:	f00c f826 	bl	80157ce <lv_page_get_scrl>
 8009782:	f00b fc76 	bl	8015072 <lv_cont_get_fit_top>
 8009786:	4606      	mov	r6, r0
        lv_fit_t fit_left        = lv_page_get_scrl_fit_left(page);
        lv_fit_t fit_top         = lv_page_get_scrl_fit_top(page);
        child                    = lv_obj_get_child(page, NULL);
 8009788:	2100      	movs	r1, #0
 800978a:	4620      	mov	r0, r4
 800978c:	f006 f8b8 	bl	800f900 <lv_obj_get_child>
                 * It's required to keep new the object on the same coordinate if FIT is enabled.*/
                if((tmp->coords.x1 == page->coords.x1) && (fit_left == LV_FIT_TIGHT || fit_left == LV_FIT_FILL)) {
                    tmp->coords.x1 += style->body.padding.left;
                    tmp->coords.x2 += style->body.padding.left;
                }
                if((tmp->coords.y1 == page->coords.y1) && (fit_top == LV_FIT_TIGHT || fit_top == LV_FIT_FILL)) {
 8009790:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
        child                    = lv_obj_get_child(page, NULL);
 8009794:	4605      	mov	r5, r0
        while(child != NULL) {
 8009796:	b915      	cbnz	r5, 800979e <lv_page_signal+0x5a>
        }
        buf->type[i] = "lv_page";
    }

    return res;
}
 8009798:	4640      	mov	r0, r8
 800979a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(lv_obj_is_protected(child, LV_PROTECT_PARENT) == false) {
 800979e:	2102      	movs	r1, #2
 80097a0:	4628      	mov	r0, r5
 80097a2:	f006 f982 	bl	800faaa <lv_obj_is_protected>
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
 80097a6:	4629      	mov	r1, r5
            if(lv_obj_is_protected(child, LV_PROTECT_PARENT) == false) {
 80097a8:	bb48      	cbnz	r0, 80097fe <lv_page_signal+0xba>
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
 80097aa:	4620      	mov	r0, r4
 80097ac:	f006 f8a8 	bl	800f900 <lv_obj_get_child>
                if((tmp->coords.x1 == page->coords.x1) && (fit_left == LV_FIT_TIGHT || fit_left == LV_FIT_FILL)) {
 80097b0:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 80097b4:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
 80097b8:	4683      	mov	fp, r0
                if((tmp->coords.x1 == page->coords.x1) && (fit_left == LV_FIT_TIGHT || fit_left == LV_FIT_FILL)) {
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d10a      	bne.n	80097d4 <lv_page_signal+0x90>
 80097be:	f00a 03fd 	and.w	r3, sl, #253	; 0xfd
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d106      	bne.n	80097d4 <lv_page_signal+0x90>
                    tmp->coords.x1 += style->body.padding.left;
 80097c6:	f9b9 301a 	ldrsh.w	r3, [r9, #26]
 80097ca:	441a      	add	r2, r3
 80097cc:	822a      	strh	r2, [r5, #16]
                    tmp->coords.x2 += style->body.padding.left;
 80097ce:	8aaa      	ldrh	r2, [r5, #20]
 80097d0:	4413      	add	r3, r2
 80097d2:	82ab      	strh	r3, [r5, #20]
                if((tmp->coords.y1 == page->coords.y1) && (fit_top == LV_FIT_TIGHT || fit_top == LV_FIT_FILL)) {
 80097d4:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 80097d8:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80097dc:	429a      	cmp	r2, r3
 80097de:	d108      	bne.n	80097f2 <lv_page_signal+0xae>
 80097e0:	2e01      	cmp	r6, #1
 80097e2:	d106      	bne.n	80097f2 <lv_page_signal+0xae>
                    tmp->coords.y1 += style->body.padding.top;
 80097e4:	f9b9 3016 	ldrsh.w	r3, [r9, #22]
 80097e8:	441a      	add	r2, r3
 80097ea:	826a      	strh	r2, [r5, #18]
                    tmp->coords.y2 += style->body.padding.top;
 80097ec:	8aea      	ldrh	r2, [r5, #22]
 80097ee:	4413      	add	r3, r2
 80097f0:	82eb      	strh	r3, [r5, #22]
                lv_obj_set_parent(tmp, ext->scrl);
 80097f2:	4628      	mov	r0, r5
 80097f4:	6879      	ldr	r1, [r7, #4]
 80097f6:	f7f9 fa5f 	bl	8002cb8 <lv_obj_set_parent>
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
 80097fa:	465d      	mov	r5, fp
 80097fc:	e7cb      	b.n	8009796 <lv_page_signal+0x52>
                child = lv_obj_get_child(page, child);
 80097fe:	4620      	mov	r0, r4
 8009800:	f006 f87e 	bl	800f900 <lv_obj_get_child>
 8009804:	4605      	mov	r5, r0
 8009806:	e7c6      	b.n	8009796 <lv_page_signal+0x52>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 8009808:	2e04      	cmp	r6, #4
 800980a:	d10f      	bne.n	800982c <lv_page_signal+0xe8>
        ext->scrl->signal_cb(ext->scrl, LV_SIGNAL_CORD_CHG, &ext->scrl->coords);
 800980c:	6840      	ldr	r0, [r0, #4]
 800980e:	2102      	movs	r1, #2
 8009810:	69c3      	ldr	r3, [r0, #28]
 8009812:	f100 0210 	add.w	r2, r0, #16
 8009816:	4798      	blx	r3
        if(ext->sb.hor_draw || ext->sb.ver_draw) lv_page_sb_refresh(page);
 8009818:	7f3b      	ldrb	r3, [r7, #28]
 800981a:	079a      	lsls	r2, r3, #30
 800981c:	d002      	beq.n	8009824 <lv_page_signal+0xe0>
 800981e:	4620      	mov	r0, r4
 8009820:	f00b fd9a 	bl	8015358 <lv_page_sb_refresh>
        lv_obj_refresh_ext_draw_pad(page);
 8009824:	4620      	mov	r0, r4
 8009826:	f005 fff3 	bl	800f810 <lv_obj_refresh_ext_draw_pad>
 800982a:	e7b5      	b.n	8009798 <lv_page_signal+0x54>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 800982c:	2e02      	cmp	r6, #2
 800982e:	d124      	bne.n	800987a <lv_page_signal+0x136>
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
 8009830:	6843      	ldr	r3, [r0, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d0b0      	beq.n	8009798 <lv_page_signal+0x54>
 8009836:	4620      	mov	r0, r4
 8009838:	f006 f8a7 	bl	800f98a <lv_obj_get_width>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 800983c:	88ab      	ldrh	r3, [r5, #4]
 800983e:	882a      	ldrh	r2, [r5, #0]
 8009840:	3301      	adds	r3, #1
 8009842:	1a9b      	subs	r3, r3, r2
 8009844:	b21b      	sxth	r3, r3
 8009846:	4298      	cmp	r0, r3
 8009848:	d00c      	beq.n	8009864 <lv_page_signal+0x120>
            ext->scrl->signal_cb(ext->scrl, LV_SIGNAL_CORD_CHG, &ext->scrl->coords);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	2102      	movs	r1, #2
 800984e:	69c3      	ldr	r3, [r0, #28]
 8009850:	f100 0210 	add.w	r2, r0, #16
 8009854:	4798      	blx	r3
            if(ext->sb.hor_draw || ext->sb.ver_draw) lv_page_sb_refresh(page);
 8009856:	7f3b      	ldrb	r3, [r7, #28]
 8009858:	079b      	lsls	r3, r3, #30
 800985a:	d09d      	beq.n	8009798 <lv_page_signal+0x54>
 800985c:	4620      	mov	r0, r4
 800985e:	f00b fd7b 	bl	8015358 <lv_page_sb_refresh>
 8009862:	e799      	b.n	8009798 <lv_page_signal+0x54>
                                 lv_obj_get_height(page) != lv_area_get_height(param))) {
 8009864:	4620      	mov	r0, r4
 8009866:	f006 f896 	bl	800f996 <lv_obj_get_height>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 800986a:	88eb      	ldrh	r3, [r5, #6]
 800986c:	886a      	ldrh	r2, [r5, #2]
 800986e:	3301      	adds	r3, #1
 8009870:	1a9b      	subs	r3, r3, r2
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
 8009872:	b21b      	sxth	r3, r3
 8009874:	4298      	cmp	r0, r3
 8009876:	d1e8      	bne.n	800984a <lv_page_signal+0x106>
 8009878:	e78e      	b.n	8009798 <lv_page_signal+0x54>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 800987a:	2e05      	cmp	r6, #5
 800987c:	d112      	bne.n	80098a4 <lv_page_signal+0x160>
        if(page->ext_draw_pad < (-ext->sb.style->body.padding.right))
 800987e:	6882      	ldr	r2, [r0, #8]
 8009880:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 8009884:	f9b2 301c 	ldrsh.w	r3, [r2, #28]
 8009888:	425b      	negs	r3, r3
 800988a:	4299      	cmp	r1, r3
            page->ext_draw_pad = -ext->sb.style->body.padding.right;
 800988c:	bfb8      	it	lt
 800988e:	86a3      	strhlt	r3, [r4, #52]	; 0x34
        if(page->ext_draw_pad < (-ext->sb.style->body.padding.bottom))
 8009890:	f9b2 3018 	ldrsh.w	r3, [r2, #24]
 8009894:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8009898:	425b      	negs	r3, r3
 800989a:	429a      	cmp	r2, r3
 800989c:	f6bf af7c 	bge.w	8009798 <lv_page_signal+0x54>
            page->ext_draw_pad = -ext->sb.style->body.padding.bottom;
 80098a0:	86a3      	strh	r3, [r4, #52]	; 0x34
 80098a2:	e779      	b.n	8009798 <lv_page_signal+0x54>
    } else if(sign == LV_SIGNAL_CONTROL) {
 80098a4:	2e11      	cmp	r6, #17
 80098a6:	d143      	bne.n	8009930 <lv_page_signal+0x1ec>
        uint32_t c = *((uint32_t *)param);
 80098a8:	682b      	ldr	r3, [r5, #0]
        if(c == LV_KEY_DOWN) {
 80098aa:	2b12      	cmp	r3, #18
 80098ac:	d10c      	bne.n	80098c8 <lv_page_signal+0x184>
            lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 80098ae:	4620      	mov	r0, r4
                lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 80098b0:	f006 f871 	bl	800f996 <lv_obj_get_height>
 80098b4:	4241      	negs	r1, r0
 80098b6:	2900      	cmp	r1, #0
                lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 80098b8:	bfb8      	it	lt
 80098ba:	3103      	addlt	r1, #3
 80098bc:	4620      	mov	r0, r4
 80098be:	f341 018f 	sbfx	r1, r1, #2, #16
 80098c2:	f7ff ff1b 	bl	80096fc <lv_page_scroll_ver>
 80098c6:	e767      	b.n	8009798 <lv_page_signal+0x54>
        } else if(c == LV_KEY_UP) {
 80098c8:	2b11      	cmp	r3, #17
 80098ca:	d104      	bne.n	80098d6 <lv_page_signal+0x192>
            lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 80098cc:	4620      	mov	r0, r4
                lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 80098ce:	f006 f862 	bl	800f996 <lv_obj_get_height>
 80098d2:	1e01      	subs	r1, r0, #0
 80098d4:	e7f0      	b.n	80098b8 <lv_page_signal+0x174>
        } else if(c == LV_KEY_RIGHT) {
 80098d6:	2b13      	cmp	r3, #19
 80098d8:	d117      	bne.n	800990a <lv_page_signal+0x1c6>
    return lv_obj_get_width(lv_page_get_scrl(page));
 80098da:	4620      	mov	r0, r4
 80098dc:	f00b ff77 	bl	80157ce <lv_page_get_scrl>
 80098e0:	f006 f853 	bl	800f98a <lv_obj_get_width>
 80098e4:	4605      	mov	r5, r0
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 80098e6:	4620      	mov	r0, r4
 80098e8:	f006 f84f 	bl	800f98a <lv_obj_get_width>
 80098ec:	42a8      	cmp	r0, r5
                lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 80098ee:	4620      	mov	r0, r4
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 80098f0:	dade      	bge.n	80098b0 <lv_page_signal+0x16c>
                lv_page_scroll_hor(page, -lv_obj_get_width(page) / 4);
 80098f2:	f006 f84a 	bl	800f98a <lv_obj_get_width>
 80098f6:	4241      	negs	r1, r0
 80098f8:	2900      	cmp	r1, #0
                lv_page_scroll_hor(page, lv_obj_get_width(page) / 4);
 80098fa:	bfb8      	it	lt
 80098fc:	3103      	addlt	r1, #3
 80098fe:	4620      	mov	r0, r4
 8009900:	f341 018f 	sbfx	r1, r1, #2, #16
 8009904:	f7ff fed6 	bl	80096b4 <lv_page_scroll_hor>
 8009908:	e746      	b.n	8009798 <lv_page_signal+0x54>
        } else if(c == LV_KEY_LEFT) {
 800990a:	2b14      	cmp	r3, #20
 800990c:	f47f af44 	bne.w	8009798 <lv_page_signal+0x54>
 8009910:	4620      	mov	r0, r4
 8009912:	f00b ff5c 	bl	80157ce <lv_page_get_scrl>
 8009916:	f006 f838 	bl	800f98a <lv_obj_get_width>
 800991a:	4605      	mov	r5, r0
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 800991c:	4620      	mov	r0, r4
 800991e:	f006 f834 	bl	800f98a <lv_obj_get_width>
 8009922:	42a8      	cmp	r0, r5
                lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 8009924:	4620      	mov	r0, r4
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 8009926:	dad2      	bge.n	80098ce <lv_page_signal+0x18a>
                lv_page_scroll_hor(page, lv_obj_get_width(page) / 4);
 8009928:	f006 f82f 	bl	800f98a <lv_obj_get_width>
 800992c:	1e01      	subs	r1, r0, #0
 800992e:	e7e4      	b.n	80098fa <lv_page_signal+0x1b6>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 8009930:	2e12      	cmp	r6, #18
 8009932:	d102      	bne.n	800993a <lv_page_signal+0x1f6>
        *editable       = true;
 8009934:	f885 8000 	strb.w	r8, [r5]
 8009938:	e72e      	b.n	8009798 <lv_page_signal+0x54>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800993a:	2e06      	cmp	r6, #6
 800993c:	f47f af2c 	bne.w	8009798 <lv_page_signal+0x54>
 8009940:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8009942:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8009946:	b2da      	uxtb	r2, r3
 8009948:	b119      	cbz	r1, 8009952 <lv_page_signal+0x20e>
 800994a:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 800994c:	2b07      	cmp	r3, #7
 800994e:	d1f8      	bne.n	8009942 <lv_page_signal+0x1fe>
 8009950:	461a      	mov	r2, r3
        buf->type[i] = "lv_page";
 8009952:	4b03      	ldr	r3, [pc, #12]	; (8009960 <lv_page_signal+0x21c>)
 8009954:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 8009958:	e71e      	b.n	8009798 <lv_page_signal+0x54>
 800995a:	bf00      	nop
 800995c:	2002898c 	.word	0x2002898c
 8009960:	0801c6d7 	.word	0x0801c6d7

08009964 <lv_page_start_edge_flash>:
{
 8009964:	b510      	push	{r4, lr}
 8009966:	b08a      	sub	sp, #40	; 0x28
 8009968:	4604      	mov	r4, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 800996a:	f006 f8a9 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->edge_flash.enabled) {
 800996e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8009972:	07d9      	lsls	r1, r3, #31
 8009974:	d519      	bpl.n	80099aa <lv_page_start_edge_flash+0x46>
        a.exec_cb        = (lv_anim_exec_xcb_t)edge_flash_anim;
 8009976:	4b0e      	ldr	r3, [pc, #56]	; (80099b0 <lv_page_start_edge_flash+0x4c>)
        a.end            = LV_PAGE_END_FLASH_SIZE;
 8009978:	2200      	movs	r2, #0
        lv_anim_create(&a);
 800997a:	4668      	mov	r0, sp
        a.var            = page;
 800997c:	9400      	str	r4, [sp, #0]
        a.exec_cb        = (lv_anim_exec_xcb_t)edge_flash_anim;
 800997e:	9301      	str	r3, [sp, #4]
        a.path_cb        = lv_anim_path_linear;
 8009980:	4b0c      	ldr	r3, [pc, #48]	; (80099b4 <lv_page_start_edge_flash+0x50>)
 8009982:	9302      	str	r3, [sp, #8]
        a.ready_cb       = edge_flash_anim_end;
 8009984:	4b0c      	ldr	r3, [pc, #48]	; (80099b8 <lv_page_start_edge_flash+0x54>)
 8009986:	9303      	str	r3, [sp, #12]
        a.playback       = 1;
 8009988:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800998c:	f023 0303 	bic.w	r3, r3, #3
 8009990:	f043 0301 	orr.w	r3, r3, #1
 8009994:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        a.end            = LV_PAGE_END_FLASH_SIZE;
 8009998:	2319      	movs	r3, #25
 800999a:	e9cd 2304 	strd	r2, r3, [sp, #16]
        a.time           = LV_PAGE_END_ANIM_TIME;
 800999e:	f44f 7396 	mov.w	r3, #300	; 0x12c
        a.playback_pause = LV_PAGE_END_ANIM_WAIT_TIME;
 80099a2:	e9cd 3306 	strd	r3, r3, [sp, #24]
        lv_anim_create(&a);
 80099a6:	f7fa f953 	bl	8003c50 <lv_anim_create>
}
 80099aa:	b00a      	add	sp, #40	; 0x28
 80099ac:	bd10      	pop	{r4, pc}
 80099ae:	bf00      	nop
 80099b0:	080156e1 	.word	0x080156e1
 80099b4:	0801057d 	.word	0x0801057d
 80099b8:	080156c1 	.word	0x080156c1

080099bc <lv_page_scrollable_signal>:
static lv_res_t lv_page_scrollable_signal(lv_obj_t * scrl, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(scrl, sign, param);
 80099bc:	4bbe      	ldr	r3, [pc, #760]	; (8009cb8 <lv_page_scrollable_signal+0x2fc>)
{
 80099be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c2:	b08d      	sub	sp, #52	; 0x34
    res = ancestor_signal(scrl, sign, param);
 80099c4:	681b      	ldr	r3, [r3, #0]
{
 80099c6:	4681      	mov	r9, r0
 80099c8:	460d      	mov	r5, r1
 80099ca:	9200      	str	r2, [sp, #0]
    res = ancestor_signal(scrl, sign, param);
 80099cc:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 80099ce:	2801      	cmp	r0, #1
    res = ancestor_signal(scrl, sign, param);
 80099d0:	9003      	str	r0, [sp, #12]
    if(res != LV_RES_OK) return res;
 80099d2:	f040 8158 	bne.w	8009c86 <lv_page_scrollable_signal+0x2ca>

    lv_obj_t * page               = lv_obj_get_parent(scrl);
 80099d6:	4648      	mov	r0, r9
 80099d8:	f005 ff90 	bl	800f8fc <lv_obj_get_parent>
 80099dc:	4607      	mov	r7, r0
    const lv_style_t * page_style = lv_obj_get_style(page);
 80099de:	f7f9 f9af 	bl	8002d40 <lv_obj_get_style>
 80099e2:	4606      	mov	r6, r0
    lv_page_ext_t * page_ext      = lv_obj_get_ext_attr(page);
 80099e4:	4638      	mov	r0, r7
 80099e6:	f006 f86b 	bl	800fac0 <lv_obj_get_ext_attr>

    if(sign == LV_SIGNAL_CORD_CHG) {
 80099ea:	2d02      	cmp	r5, #2
    lv_page_ext_t * page_ext      = lv_obj_get_ext_attr(page);
 80099ec:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_CORD_CHG) {
 80099ee:	f040 8165 	bne.w	8009cbc <lv_page_scrollable_signal+0x300>
        /*Limit the position of the scrollable object to be always visible
         * (Do not let its edge inner then its parent respective edge)*/
        lv_coord_t new_x = lv_obj_get_x(scrl);
 80099f2:	4648      	mov	r0, r9
 80099f4:	f005 ffbd 	bl	800f972 <lv_obj_get_x>
 80099f8:	4680      	mov	r8, r0
        lv_coord_t new_y = lv_obj_get_y(scrl);
 80099fa:	4648      	mov	r0, r9
 80099fc:	f005 ffbf 	bl	800f97e <lv_obj_get_y>
        bool refr_x      = false;
        bool refr_y      = false;
        lv_area_t page_coords;
        lv_area_t scrl_coords;
        lv_obj_get_coords(scrl, &scrl_coords);
 8009a00:	a90a      	add	r1, sp, #40	; 0x28
        lv_coord_t new_y = lv_obj_get_y(scrl);
 8009a02:	9004      	str	r0, [sp, #16]
        lv_obj_get_coords(scrl, &scrl_coords);
 8009a04:	4648      	mov	r0, r9
 8009a06:	f005 ffad 	bl	800f964 <lv_obj_get_coords>
        lv_obj_get_coords(page, &page_coords);
 8009a0a:	a908      	add	r1, sp, #32
 8009a0c:	4638      	mov	r0, r7
 8009a0e:	f005 ffa9 	bl	800f964 <lv_obj_get_coords>

        lv_area_t * ori_coords = (lv_area_t *)param;
        lv_coord_t diff_x      = scrl->coords.x1 - ori_coords->x1;
 8009a12:	9b00      	ldr	r3, [sp, #0]
 8009a14:	f8b9 1010 	ldrh.w	r1, [r9, #16]
 8009a18:	8818      	ldrh	r0, [r3, #0]
        lv_coord_t diff_y      = scrl->coords.y1 - ori_coords->y1;
        lv_coord_t hpad        = page_style->body.padding.left + page_style->body.padding.right;
 8009a1a:	8b75      	ldrh	r5, [r6, #26]
        lv_coord_t diff_x      = scrl->coords.x1 - ori_coords->x1;
 8009a1c:	1a09      	subs	r1, r1, r0
        lv_coord_t vpad        = page_style->body.padding.top + page_style->body.padding.bottom;
 8009a1e:	8af2      	ldrh	r2, [r6, #22]
        lv_coord_t diff_x      = scrl->coords.x1 - ori_coords->x1;
 8009a20:	b20b      	sxth	r3, r1
        lv_coord_t diff_y      = scrl->coords.y1 - ori_coords->y1;
 8009a22:	f8b9 1012 	ldrh.w	r1, [r9, #18]
        lv_coord_t diff_x      = scrl->coords.x1 - ori_coords->x1;
 8009a26:	9301      	str	r3, [sp, #4]
        lv_coord_t diff_y      = scrl->coords.y1 - ori_coords->y1;
 8009a28:	9b00      	ldr	r3, [sp, #0]
 8009a2a:	8858      	ldrh	r0, [r3, #2]
 8009a2c:	1a09      	subs	r1, r1, r0
        lv_obj_t * page_parent = lv_obj_get_parent(page);
 8009a2e:	4638      	mov	r0, r7
        lv_coord_t diff_y      = scrl->coords.y1 - ori_coords->y1;
 8009a30:	b20b      	sxth	r3, r1
 8009a32:	9302      	str	r3, [sp, #8]
        lv_coord_t hpad        = page_style->body.padding.left + page_style->body.padding.right;
 8009a34:	8bb3      	ldrh	r3, [r6, #28]
 8009a36:	441d      	add	r5, r3
        lv_coord_t vpad        = page_style->body.padding.top + page_style->body.padding.bottom;
 8009a38:	8b33      	ldrh	r3, [r6, #24]
 8009a3a:	441a      	add	r2, r3
        lv_coord_t hpad        = page_style->body.padding.left + page_style->body.padding.right;
 8009a3c:	b22d      	sxth	r5, r5
        lv_coord_t vpad        = page_style->body.padding.top + page_style->body.padding.bottom;
 8009a3e:	b213      	sxth	r3, r2
 8009a40:	9305      	str	r3, [sp, #20]
        lv_obj_t * page_parent = lv_obj_get_parent(page);
 8009a42:	f005 ff5b 	bl	800f8fc <lv_obj_get_parent>
 8009a46:	4682      	mov	sl, r0

        lv_indev_t * indev = lv_indev_get_act();
 8009a48:	f7f8 ff1c 	bl	8002884 <lv_indev_get_act>
        lv_point_t drag_vect;
        lv_indev_get_vect(indev, &drag_vect);
 8009a4c:	a907      	add	r1, sp, #28
        lv_indev_t * indev = lv_indev_get_act();
 8009a4e:	4683      	mov	fp, r0
        lv_indev_get_vect(indev, &drag_vect);
 8009a50:	f005 fafd 	bl	800f04e <lv_indev_get_vect>

        /* Start the scroll propagation if there is drag vector on the indev, but the drag is not
         * started yet and the scrollable is in a corner. It will enable the scroll propagation only
         * when a new scroll begins and not when the scrollable is already being scrolled.*/
        if(page_ext->scroll_prop && page_ext->scroll_prop_ip == 0 && lv_indev_is_dragging(indev) == false) {
 8009a54:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8009a58:	f003 0303 	and.w	r3, r3, #3
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d127      	bne.n	8009ab0 <lv_page_scrollable_signal+0xf4>
 8009a60:	4658      	mov	r0, fp
 8009a62:	f005 fae7 	bl	800f034 <lv_indev_is_dragging>
 8009a66:	bb18      	cbnz	r0, 8009ab0 <lv_page_scrollable_signal+0xf4>
            if(((drag_vect.y > 0 && scrl_coords.y1 == page_coords.y1 + page_style->body.padding.top) ||
 8009a68:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	dd61      	ble.n	8009b34 <lv_page_scrollable_signal+0x178>
 8009a70:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8009a74:	f9b6 1016 	ldrsh.w	r1, [r6, #22]
 8009a78:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8009a7c:	440b      	add	r3, r1
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d116      	bne.n	8009ab0 <lv_page_scrollable_signal+0xf4>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
 8009a82:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	dd5d      	ble.n	8009b46 <lv_page_scrollable_signal+0x18a>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
 8009a8a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8009a8e:	f9b6 101a 	ldrsh.w	r1, [r6, #26]
 8009a92:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8009a96:	440b      	add	r3, r1
                (drag_vect.x < 0 && scrl_coords.x2 == page_coords.x2 - page_style->body.padding.right))) {
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d109      	bne.n	8009ab0 <lv_page_scrollable_signal+0xf4>

                if(lv_obj_get_parent(page_parent) != NULL) { /*Do not propagate the scroll to a screen*/
 8009a9c:	4650      	mov	r0, sl
 8009a9e:	f005 ff2d 	bl	800f8fc <lv_obj_get_parent>
 8009aa2:	b128      	cbz	r0, 8009ab0 <lv_page_scrollable_signal+0xf4>
                    page_ext->scroll_prop_ip = 1;
 8009aa4:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8009aa8:	f043 0302 	orr.w	r3, r3, #2
 8009aac:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    return area_p->x2 - area_p->x1 + 1;
 8009ab0:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8009ab4:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 8009ab8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8009abc:	f10c 0e01 	add.w	lr, ip, #1
 8009ac0:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8009ac4:	1a83      	subs	r3, r0, r2
 8009ac6:	ebae 0e01 	sub.w	lr, lr, r1
 8009aca:	b21b      	sxth	r3, r3
                }
            }
        }

        /*scrollable width smaller then page width? -> align to left*/
        if(lv_area_get_width(&scrl_coords) + hpad <= lv_area_get_width(&page_coords)) {
 8009acc:	fa05 f58e 	sxtah	r5, r5, lr
 8009ad0:	f103 0e01 	add.w	lr, r3, #1
 8009ad4:	fa0f fe8e 	sxth.w	lr, lr
 8009ad8:	4575      	cmp	r5, lr
 8009ada:	dc3d      	bgt.n	8009b58 <lv_page_scrollable_signal+0x19c>
            if(scrl_coords.x1 != page_coords.x1 + page_style->body.padding.left) {
 8009adc:	f9b6 301a 	ldrsh.w	r3, [r6, #26]
 8009ae0:	441a      	add	r2, r3
                new_x  = page_style->body.padding.left;
 8009ae2:	4291      	cmp	r1, r2
 8009ae4:	bf16      	itet	ne
 8009ae6:	4698      	movne	r8, r3
 8009ae8:	2500      	moveq	r5, #0
 8009aea:	2501      	movne	r5, #1
    return area_p->y2 - area_p->y1 + 1;
 8009aec:	f9bd e02e 	ldrsh.w	lr, [sp, #46]	; 0x2e
 8009af0:	f9bd c026 	ldrsh.w	ip, [sp, #38]	; 0x26
 8009af4:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8009af8:	f10e 0201 	add.w	r2, lr, #1
 8009afc:	f9bd 002a 	ldrsh.w	r0, [sp, #42]	; 0x2a
 8009b00:	ebac 0301 	sub.w	r3, ip, r1
 8009b04:	eba2 0b00 	sub.w	fp, r2, r0
#endif
            }
        }

        /*scrollable height smaller then page height? -> align to top*/
        if(lv_area_get_height(&scrl_coords) + vpad <= lv_area_get_height(&page_coords)) {
 8009b08:	9a05      	ldr	r2, [sp, #20]
 8009b0a:	b21b      	sxth	r3, r3
 8009b0c:	fa02 f28b 	sxtah	r2, r2, fp
 8009b10:	f103 0b01 	add.w	fp, r3, #1
 8009b14:	fa0f fb8b 	sxth.w	fp, fp
 8009b18:	455a      	cmp	r2, fp
 8009b1a:	dc67      	bgt.n	8009bec <lv_page_scrollable_signal+0x230>
            if(scrl_coords.y1 != page_coords.y1 + page_style->body.padding.top) {
 8009b1c:	f9b6 6016 	ldrsh.w	r6, [r6, #22]
 8009b20:	4431      	add	r1, r6
 8009b22:	4288      	cmp	r0, r1
 8009b24:	d16f      	bne.n	8009c06 <lv_page_scrollable_signal+0x24a>
                }
#endif
            }
        }

        if(refr_x || refr_y) {
 8009b26:	2d00      	cmp	r5, #0
 8009b28:	f000 80aa 	beq.w	8009c80 <lv_page_scrollable_signal+0x2c4>
 8009b2c:	9e04      	ldr	r6, [sp, #16]
 8009b2e:	f04f 0b00 	mov.w	fp, #0
 8009b32:	e086      	b.n	8009c42 <lv_page_scrollable_signal+0x286>
            if(((drag_vect.y > 0 && scrl_coords.y1 == page_coords.y1 + page_style->body.padding.top) ||
 8009b34:	d0bc      	beq.n	8009ab0 <lv_page_scrollable_signal+0xf4>
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
 8009b36:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8009b3a:	f9b6 1018 	ldrsh.w	r1, [r6, #24]
 8009b3e:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8009b42:	1a5b      	subs	r3, r3, r1
 8009b44:	e79b      	b.n	8009a7e <lv_page_scrollable_signal+0xc2>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
 8009b46:	d0b3      	beq.n	8009ab0 <lv_page_scrollable_signal+0xf4>
                (drag_vect.x < 0 && scrl_coords.x2 == page_coords.x2 - page_style->body.padding.right))) {
 8009b48:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8009b4c:	f9b6 101c 	ldrsh.w	r1, [r6, #28]
 8009b50:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8009b54:	1a5b      	subs	r3, r3, r1
 8009b56:	e79f      	b.n	8009a98 <lv_page_scrollable_signal+0xdc>
            if(page_ext->scroll_prop_ip) {
 8009b58:	f894 502e 	ldrb.w	r5, [r4, #46]	; 0x2e
 8009b5c:	f015 0502 	ands.w	r5, r5, #2
 8009b60:	d00d      	beq.n	8009b7e <lv_page_scrollable_signal+0x1c2>
                if(drag_vect.x == diff_x) { /*`scrl` is bouncing: drag pos. it somewhere and here it
 8009b62:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8009b66:	9901      	ldr	r1, [sp, #4]
 8009b68:	428b      	cmp	r3, r1
 8009b6a:	d13b      	bne.n	8009be4 <lv_page_scrollable_signal+0x228>
                    new_x  = ori_coords->x1 - page_coords.x1;
 8009b6c:	9b00      	ldr	r3, [sp, #0]
 8009b6e:	f8b3 8000 	ldrh.w	r8, [r3]
 8009b72:	eba8 0802 	sub.w	r8, r8, r2
 8009b76:	fa0f f888 	sxth.w	r8, r8
                refr_x = true;
 8009b7a:	2501      	movs	r5, #1
 8009b7c:	e7b6      	b.n	8009aec <lv_page_scrollable_signal+0x130>
            else if(scrl_coords.x2 < page_coords.x2 - page_style->body.padding.right) {
 8009b7e:	f9b6 e01c 	ldrsh.w	lr, [r6, #28]
 8009b82:	eba0 000e 	sub.w	r0, r0, lr
 8009b86:	4584      	cmp	ip, r0
 8009b88:	da16      	bge.n	8009bb8 <lv_page_scrollable_signal+0x1fc>
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
 8009b8a:	eba3 080c 	sub.w	r8, r3, ip
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 8009b8e:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
 8009b92:	4488      	add	r8, r1
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8009b94:	f005 051f 	and.w	r5, r5, #31
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
 8009b98:	eba8 080e 	sub.w	r8, r8, lr
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8009b9c:	2d01      	cmp	r5, #1
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
 8009b9e:	fa0f f888 	sxth.w	r8, r8
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8009ba2:	d1ea      	bne.n	8009b7a <lv_page_scrollable_signal+0x1be>
                    lv_page_start_edge_flash(page);
 8009ba4:	4638      	mov	r0, r7
 8009ba6:	f7ff fedd 	bl	8009964 <lv_page_start_edge_flash>
                    page_ext->edge_flash.right_ip = 1;
 8009baa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009bae:	f043 0308 	orr.w	r3, r3, #8
 8009bb2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8009bb6:	e799      	b.n	8009aec <lv_page_scrollable_signal+0x130>
            } else if(scrl_coords.x1 > page_coords.x1 + page_style->body.padding.left) {
 8009bb8:	f9b6 b01a 	ldrsh.w	fp, [r6, #26]
 8009bbc:	445a      	add	r2, fp
 8009bbe:	4291      	cmp	r1, r2
 8009bc0:	dd94      	ble.n	8009aec <lv_page_scrollable_signal+0x130>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 8009bc2:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8009bc6:	f005 051f 	and.w	r5, r5, #31
 8009bca:	2d01      	cmp	r5, #1
 8009bcc:	d10c      	bne.n	8009be8 <lv_page_scrollable_signal+0x22c>
                    lv_page_start_edge_flash(page);
 8009bce:	4638      	mov	r0, r7
                new_x  = page_style->body.padding.left; /*Left align*/
 8009bd0:	46d8      	mov	r8, fp
                    lv_page_start_edge_flash(page);
 8009bd2:	f7ff fec7 	bl	8009964 <lv_page_start_edge_flash>
                    page_ext->edge_flash.left_ip = 1;
 8009bd6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009bda:	f043 0310 	orr.w	r3, r3, #16
 8009bde:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8009be2:	e783      	b.n	8009aec <lv_page_scrollable_signal+0x130>
        bool refr_x      = false;
 8009be4:	2500      	movs	r5, #0
 8009be6:	e781      	b.n	8009aec <lv_page_scrollable_signal+0x130>
                new_x  = page_style->body.padding.left; /*Left align*/
 8009be8:	46d8      	mov	r8, fp
 8009bea:	e7c6      	b.n	8009b7a <lv_page_scrollable_signal+0x1be>
            if(page_ext->scroll_prop_ip) {
 8009bec:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 8009bf0:	0792      	lsls	r2, r2, #30
 8009bf2:	d50b      	bpl.n	8009c0c <lv_page_scrollable_signal+0x250>
                if(drag_vect.y == diff_y) { /*`scrl` is bouncing: drag pos. it somewhere and here it
 8009bf4:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8009bf8:	9a02      	ldr	r2, [sp, #8]
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d193      	bne.n	8009b26 <lv_page_scrollable_signal+0x16a>
                    new_y  = ori_coords->y1 - page_coords.y1;
 8009bfe:	9b00      	ldr	r3, [sp, #0]
 8009c00:	885e      	ldrh	r6, [r3, #2]
 8009c02:	1a71      	subs	r1, r6, r1
 8009c04:	b20e      	sxth	r6, r1
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8009c06:	f04f 0b01 	mov.w	fp, #1
 8009c0a:	e01a      	b.n	8009c42 <lv_page_scrollable_signal+0x286>
            else if(scrl_coords.y2 < page_coords.y2 - page_style->body.padding.bottom) {
 8009c0c:	f9b6 2018 	ldrsh.w	r2, [r6, #24]
 8009c10:	ebac 0c02 	sub.w	ip, ip, r2
 8009c14:	45e6      	cmp	lr, ip
 8009c16:	da3a      	bge.n	8009c8e <lv_page_scrollable_signal+0x2d2>
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
 8009c18:	eba3 030e 	sub.w	r3, r3, lr
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 8009c1c:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
 8009c20:	18c6      	adds	r6, r0, r3
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8009c22:	f00b 0b1f 	and.w	fp, fp, #31
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
 8009c26:	1ab2      	subs	r2, r6, r2
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8009c28:	f1bb 0f01 	cmp.w	fp, #1
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
 8009c2c:	b216      	sxth	r6, r2
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8009c2e:	d1ea      	bne.n	8009c06 <lv_page_scrollable_signal+0x24a>
                    lv_page_start_edge_flash(page);
 8009c30:	4638      	mov	r0, r7
 8009c32:	f7ff fe97 	bl	8009964 <lv_page_start_edge_flash>
                    page_ext->edge_flash.bottom_ip = 1;
 8009c36:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009c3a:	f043 0304 	orr.w	r3, r3, #4
                    page_ext->edge_flash.top_ip = 1;
 8009c3e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
            lv_obj_set_pos(scrl, new_x, new_y);
 8009c42:	4641      	mov	r1, r8
 8009c44:	4632      	mov	r2, r6
 8009c46:	4648      	mov	r0, r9
 8009c48:	f005 fb3f 	bl	800f2ca <lv_obj_set_pos>

            if(page_ext->scroll_prop_ip) {
 8009c4c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8009c50:	0799      	lsls	r1, r3, #30
 8009c52:	d515      	bpl.n	8009c80 <lv_page_scrollable_signal+0x2c4>
                if(refr_y) lv_obj_set_y(page_parent, lv_obj_get_y(page_parent) + diff_y);
 8009c54:	f1bb 0f00 	cmp.w	fp, #0
 8009c58:	d008      	beq.n	8009c6c <lv_page_scrollable_signal+0x2b0>
 8009c5a:	4650      	mov	r0, sl
 8009c5c:	f005 fe8f 	bl	800f97e <lv_obj_get_y>
 8009c60:	9b02      	ldr	r3, [sp, #8]
 8009c62:	4403      	add	r3, r0
 8009c64:	4650      	mov	r0, sl
 8009c66:	b219      	sxth	r1, r3
 8009c68:	f005 fb70 	bl	800f34c <lv_obj_set_y>
                if(refr_x) lv_obj_set_x(page_parent, lv_obj_get_x(page_parent) + diff_x);
 8009c6c:	b145      	cbz	r5, 8009c80 <lv_page_scrollable_signal+0x2c4>
 8009c6e:	4650      	mov	r0, sl
 8009c70:	f005 fe7f 	bl	800f972 <lv_obj_get_x>
 8009c74:	9b01      	ldr	r3, [sp, #4]
 8009c76:	4403      	add	r3, r0
 8009c78:	4650      	mov	r0, sl
 8009c7a:	b219      	sxth	r1, r3
 8009c7c:	f005 fb5d 	bl	800f33a <lv_obj_set_x>
            }
        }

        lv_page_sb_refresh(page);
 8009c80:	4638      	mov	r0, r7
 8009c82:	f00b fb69 	bl	8015358 <lv_page_sb_refresh>
            }
        }
    }

    return res;
}
 8009c86:	9803      	ldr	r0, [sp, #12]
 8009c88:	b00d      	add	sp, #52	; 0x34
 8009c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            } else if(scrl_coords.y1 > page_coords.y1 + page_style->body.padding.top) {
 8009c8e:	f9b6 6016 	ldrsh.w	r6, [r6, #22]
 8009c92:	4431      	add	r1, r6
 8009c94:	4288      	cmp	r0, r1
 8009c96:	f77f af46 	ble.w	8009b26 <lv_page_scrollable_signal+0x16a>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 8009c9a:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8009c9e:	f00b 0b1f 	and.w	fp, fp, #31
 8009ca2:	f1bb 0f01 	cmp.w	fp, #1
 8009ca6:	d1ae      	bne.n	8009c06 <lv_page_scrollable_signal+0x24a>
                    lv_page_start_edge_flash(page);
 8009ca8:	4638      	mov	r0, r7
 8009caa:	f7ff fe5b 	bl	8009964 <lv_page_start_edge_flash>
                    page_ext->edge_flash.top_ip = 1;
 8009cae:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009cb2:	f043 0302 	orr.w	r3, r3, #2
 8009cb6:	e7c2      	b.n	8009c3e <lv_page_scrollable_signal+0x282>
 8009cb8:	2002898c 	.word	0x2002898c
    } else if(sign == LV_SIGNAL_DRAG_END) {
 8009cbc:	2d0e      	cmp	r5, #14
 8009cbe:	d1e2      	bne.n	8009c86 <lv_page_scrollable_signal+0x2ca>
        page_ext->scroll_prop_ip = 0;
 8009cc0:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8009cc4:	f36f 0341 	bfc	r3, #1, #1
 8009cc8:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
        if(page_ext->sb.mode == LV_SB_MODE_DRAG) {
 8009ccc:	7f03      	ldrb	r3, [r0, #28]
 8009cce:	f003 031c 	and.w	r3, r3, #28
 8009cd2:	2b08      	cmp	r3, #8
 8009cd4:	d1d7      	bne.n	8009c86 <lv_page_scrollable_signal+0x2ca>
            lv_disp_t * disp = lv_obj_get_disp(page);
 8009cd6:	4638      	mov	r0, r7
 8009cd8:	f7f8 fe6e 	bl	80029b8 <lv_obj_get_disp>
            if(page_ext->sb.hor_draw) {
 8009cdc:	7f23      	ldrb	r3, [r4, #28]
            lv_disp_t * disp = lv_obj_get_disp(page);
 8009cde:	4605      	mov	r5, r0
            if(page_ext->sb.hor_draw) {
 8009ce0:	07da      	lsls	r2, r3, #31
 8009ce2:	d524      	bpl.n	8009d2e <lv_page_scrollable_signal+0x372>
                lv_area_copy(&sb_area_tmp, &page_ext->sb.hor_area);
 8009ce4:	f104 010c 	add.w	r1, r4, #12
 8009ce8:	a80a      	add	r0, sp, #40	; 0x28
 8009cea:	f00b fb21 	bl	8015330 <lv_area_copy>
                sb_area_tmp.x1 += page->coords.x1;
 8009cee:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009cf2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
                lv_inv_area(disp, &sb_area_tmp);
 8009cf6:	4628      	mov	r0, r5
                sb_area_tmp.y1 += page->coords.y1;
 8009cf8:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
                sb_area_tmp.x1 += page->coords.x1;
 8009cfc:	4413      	add	r3, r2
 8009cfe:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
                sb_area_tmp.y1 += page->coords.y1;
 8009d02:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009d06:	4419      	add	r1, r3
 8009d08:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
                sb_area_tmp.x2 += page->coords.x1;
 8009d0c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8009d10:	440a      	add	r2, r1
                lv_inv_area(disp, &sb_area_tmp);
 8009d12:	a90a      	add	r1, sp, #40	; 0x28
                sb_area_tmp.x2 += page->coords.x1;
 8009d14:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
                sb_area_tmp.y2 += page->coords.y1;
 8009d18:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8009d1c:	4413      	add	r3, r2
 8009d1e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
                lv_inv_area(disp, &sb_area_tmp);
 8009d22:	f7f9 f8e3 	bl	8002eec <lv_inv_area>
                page_ext->sb.hor_draw = 0;
 8009d26:	7f23      	ldrb	r3, [r4, #28]
 8009d28:	f36f 0300 	bfc	r3, #0, #1
 8009d2c:	7723      	strb	r3, [r4, #28]
            if(page_ext->sb.ver_draw) {
 8009d2e:	7f23      	ldrb	r3, [r4, #28]
 8009d30:	079b      	lsls	r3, r3, #30
 8009d32:	d5a8      	bpl.n	8009c86 <lv_page_scrollable_signal+0x2ca>
                lv_area_copy(&sb_area_tmp, &page_ext->sb.ver_area);
 8009d34:	f104 0114 	add.w	r1, r4, #20
 8009d38:	a80a      	add	r0, sp, #40	; 0x28
 8009d3a:	f00b faf9 	bl	8015330 <lv_area_copy>
                sb_area_tmp.x1 += page->coords.x1;
 8009d3e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009d42:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
                lv_inv_area(disp, &sb_area_tmp);
 8009d46:	4628      	mov	r0, r5
                sb_area_tmp.y1 += page->coords.y1;
 8009d48:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
                sb_area_tmp.x1 += page->coords.x1;
 8009d4c:	4413      	add	r3, r2
 8009d4e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
                sb_area_tmp.y1 += page->coords.y1;
 8009d52:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009d56:	4419      	add	r1, r3
 8009d58:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
                sb_area_tmp.x2 += page->coords.x1;
 8009d5c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8009d60:	440a      	add	r2, r1
                lv_inv_area(disp, &sb_area_tmp);
 8009d62:	a90a      	add	r1, sp, #40	; 0x28
                sb_area_tmp.x2 += page->coords.x1;
 8009d64:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
                sb_area_tmp.y2 += page->coords.y1;
 8009d68:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8009d6c:	4413      	add	r3, r2
 8009d6e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
                lv_inv_area(disp, &sb_area_tmp);
 8009d72:	f7f9 f8bb 	bl	8002eec <lv_inv_area>
                page_ext->sb.ver_draw = 0;
 8009d76:	7f23      	ldrb	r3, [r4, #28]
 8009d78:	f36f 0341 	bfc	r3, #1, #1
 8009d7c:	7723      	strb	r3, [r4, #28]
 8009d7e:	e782      	b.n	8009c86 <lv_page_scrollable_signal+0x2ca>

08009d80 <lv_chart_draw_lines>:
/**
 * Draw the data lines as lines on a chart
 * @param obj pointer to chart object
 */
static void lv_chart_draw_lines(lv_obj_t * chart, const lv_area_t * mask)
{
 8009d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d84:	4605      	mov	r5, r0
 8009d86:	b099      	sub	sp, #100	; 0x64
 8009d88:	9105      	str	r1, [sp, #20]
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8009d8a:	f005 fe99 	bl	800fac0 <lv_obj_get_ext_attr>
 8009d8e:	4604      	mov	r4, r0

    uint16_t i;
    lv_point_t p1;
    lv_point_t p2;
    lv_coord_t w     = lv_obj_get_width(chart);
 8009d90:	4628      	mov	r0, r5
 8009d92:	f005 fdfa 	bl	800f98a <lv_obj_get_width>
 8009d96:	9002      	str	r0, [sp, #8]
    lv_coord_t h     = lv_obj_get_height(chart);
 8009d98:	4628      	mov	r0, r5
 8009d9a:	f005 fdfc 	bl	800f996 <lv_obj_get_height>
    lv_coord_t x_ofs = chart->coords.x1;
    lv_coord_t y_ofs = chart->coords.y1;
 8009d9e:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
    lv_coord_t h     = lv_obj_get_height(chart);
 8009da2:	4682      	mov	sl, r0
    int32_t y_tmp;
    lv_coord_t p_prev;
    lv_coord_t p_act;
    lv_chart_series_t * ser;
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
 8009da4:	4628      	mov	r0, r5
    lv_coord_t y_ofs = chart->coords.y1;
 8009da6:	9303      	str	r3, [sp, #12]
    lv_coord_t x_ofs = chart->coords.x1;
 8009da8:	f9b5 b010 	ldrsh.w	fp, [r5, #16]
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
 8009dac:	f005 fe1f 	bl	800f9ee <lv_obj_get_opa_scale>
    lv_style_t style;
    lv_style_copy(&style, &lv_style_plain);
 8009db0:	493d      	ldr	r1, [pc, #244]	; (8009ea8 <lv_chart_draw_lines+0x128>)
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
 8009db2:	9004      	str	r0, [sp, #16]
    lv_style_copy(&style, &lv_style_plain);
 8009db4:	a809      	add	r0, sp, #36	; 0x24
 8009db6:	f005 ff88 	bl	800fcca <lv_style_copy>
    style.line.opa   = ext->series.opa;
 8009dba:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    style.line.width = ext->series.width;

    /*Go through all data lines*/
    LV_LL_READ_BACK(ext->series_ll, ser)
 8009dbe:	4620      	mov	r0, r4
    style.line.opa   = ext->series.opa;
 8009dc0:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    style.line.width = ext->series.width;
 8009dc4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8009dc6:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    LV_LL_READ_BACK(ext->series_ll, ser)
 8009dca:	f006 f96c 	bl	80100a6 <lv_ll_get_tail>
 8009dce:	4605      	mov	r5, r0
 8009dd0:	b910      	cbnz	r0, 8009dd8 <lv_chart_draw_lines+0x58>
                lv_draw_line(&p1, &p2, mask, &style, opa_scale);

            p_prev = p_act;
        }
    }
}
 8009dd2:	b019      	add	sp, #100	; 0x64
 8009dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        style.line.color = ser->color;
 8009dd8:	88ab      	ldrh	r3, [r5, #4]
        for(i = 1; i < ext->point_cnt; i++) {
 8009dda:	2601      	movs	r6, #1
        y_tmp  = (int32_t)((int32_t)ser->points[p_prev] - ext->ymin) * h;
 8009ddc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
        style.line.color = ser->color;
 8009de0:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 8009de4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8009de8:	9a03      	ldr	r2, [sp, #12]
 8009dea:	07db      	lsls	r3, r3, #31
        y_tmp  = (int32_t)((int32_t)ser->points[p_prev] - ext->ymin) * h;
 8009dec:	682b      	ldr	r3, [r5, #0]
        p1.x = 0 + x_ofs;
 8009dee:	f8ad b01c 	strh.w	fp, [sp, #28]
 8009df2:	eb0a 0902 	add.w	r9, sl, r2
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 8009df6:	bf54      	ite	pl
 8009df8:	f9b5 8006 	ldrshpl.w	r8, [r5, #6]
 8009dfc:	f04f 0800 	movmi.w	r8, #0
        p2.x = 0 + x_ofs;
 8009e00:	f8ad b020 	strh.w	fp, [sp, #32]
        y_tmp  = (int32_t)((int32_t)ser->points[p_prev] - ext->ymin) * h;
 8009e04:	fa0f f989 	sxth.w	r9, r9
 8009e08:	f933 3018 	ldrsh.w	r3, [r3, r8, lsl #1]
        y_tmp  = y_tmp / (ext->ymax - ext->ymin);
 8009e0c:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
        y_tmp  = (int32_t)((int32_t)ser->points[p_prev] - ext->ymin) * h;
 8009e10:	1a5b      	subs	r3, r3, r1
        y_tmp  = y_tmp / (ext->ymax - ext->ymin);
 8009e12:	1a52      	subs	r2, r2, r1
        p_prev = start_point;
 8009e14:	4641      	mov	r1, r8
        y_tmp  = (int32_t)((int32_t)ser->points[p_prev] - ext->ymin) * h;
 8009e16:	fb0a f303 	mul.w	r3, sl, r3
        y_tmp  = y_tmp / (ext->ymax - ext->ymin);
 8009e1a:	fb93 f3f2 	sdiv	r3, r3, r2
        p2.y   = h - y_tmp + y_ofs;
 8009e1e:	eba9 0303 	sub.w	r3, r9, r3
 8009e22:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        for(i = 1; i < ext->point_cnt; i++) {
 8009e26:	8a62      	ldrh	r2, [r4, #18]
 8009e28:	42b2      	cmp	r2, r6
 8009e2a:	d804      	bhi.n	8009e36 <lv_chart_draw_lines+0xb6>
    LV_LL_READ_BACK(ext->series_ll, ser)
 8009e2c:	4629      	mov	r1, r5
 8009e2e:	4620      	mov	r0, r4
 8009e30:	f006 f94c 	bl	80100cc <lv_ll_get_prev>
 8009e34:	e7cb      	b.n	8009dce <lv_chart_draw_lines+0x4e>
            p1.x = p2.x;
 8009e36:	9b08      	ldr	r3, [sp, #32]
            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 8009e38:	1e50      	subs	r0, r2, #1
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8009e3a:	f9b4 c00e 	ldrsh.w	ip, [r4, #14]
            p1.x = p2.x;
 8009e3e:	9307      	str	r3, [sp, #28]
            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 8009e40:	9b02      	ldr	r3, [sp, #8]
 8009e42:	4373      	muls	r3, r6
 8009e44:	fb93 f3f0 	sdiv	r3, r3, r0
 8009e48:	445b      	add	r3, fp
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
 8009e4a:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 8009e4e:	f8ad 3020 	strh.w	r3, [sp, #32]
            p_act = (start_point + i) % ext->point_cnt;
 8009e52:	eb08 0306 	add.w	r3, r8, r6
 8009e56:	fb93 f7f2 	sdiv	r7, r3, r2
 8009e5a:	fb02 3717 	mls	r7, r2, r7, r3
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
 8009e5e:	682a      	ldr	r2, [r5, #0]
            p_act = (start_point + i) % ext->point_cnt;
 8009e60:	b23f      	sxth	r7, r7
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
 8009e62:	f932 3017 	ldrsh.w	r3, [r2, r7, lsl #1]
 8009e66:	1a1b      	subs	r3, r3, r0
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8009e68:	ebac 0000 	sub.w	r0, ip, r0
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
 8009e6c:	fb0a f303 	mul.w	r3, sl, r3
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 8009e70:	fb93 f3f0 	sdiv	r3, r3, r0
            p2.y  = h - y_tmp + y_ofs;
 8009e74:	eba9 0303 	sub.w	r3, r9, r3
 8009e78:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            if(ser->points[p_prev] != LV_CHART_POINT_DEF && ser->points[p_act] != LV_CHART_POINT_DEF)
 8009e7c:	f932 3011 	ldrsh.w	r3, [r2, r1, lsl #1]
 8009e80:	490a      	ldr	r1, [pc, #40]	; (8009eac <lv_chart_draw_lines+0x12c>)
 8009e82:	428b      	cmp	r3, r1
 8009e84:	d00b      	beq.n	8009e9e <lv_chart_draw_lines+0x11e>
 8009e86:	f932 3017 	ldrsh.w	r3, [r2, r7, lsl #1]
 8009e8a:	428b      	cmp	r3, r1
 8009e8c:	d007      	beq.n	8009e9e <lv_chart_draw_lines+0x11e>
                lv_draw_line(&p1, &p2, mask, &style, opa_scale);
 8009e8e:	9b04      	ldr	r3, [sp, #16]
 8009e90:	a908      	add	r1, sp, #32
 8009e92:	9a05      	ldr	r2, [sp, #20]
 8009e94:	a807      	add	r0, sp, #28
 8009e96:	9300      	str	r3, [sp, #0]
 8009e98:	ab09      	add	r3, sp, #36	; 0x24
 8009e9a:	f006 fda1 	bl	80109e0 <lv_draw_line>
        for(i = 1; i < ext->point_cnt; i++) {
 8009e9e:	3601      	adds	r6, #1
            p_prev = p_act;
 8009ea0:	4639      	mov	r1, r7
        for(i = 1; i < ext->point_cnt; i++) {
 8009ea2:	b2b6      	uxth	r6, r6
 8009ea4:	e7bf      	b.n	8009e26 <lv_chart_draw_lines+0xa6>
 8009ea6:	bf00      	nop
 8009ea8:	20020524 	.word	0x20020524
 8009eac:	ffff83e8 	.word	0xffff83e8

08009eb0 <lv_chart_signal>:
{
 8009eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eb4:	4680      	mov	r8, r0
 8009eb6:	460d      	mov	r5, r1
 8009eb8:	4616      	mov	r6, r2
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8009eba:	f005 fe01 	bl	800fac0 <lv_obj_get_ext_attr>
    res = ancestor_signal(chart, sign, param);
 8009ebe:	4b19      	ldr	r3, [pc, #100]	; (8009f24 <lv_chart_signal+0x74>)
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8009ec0:	4604      	mov	r4, r0
    res = ancestor_signal(chart, sign, param);
 8009ec2:	4632      	mov	r2, r6
 8009ec4:	4629      	mov	r1, r5
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4640      	mov	r0, r8
 8009eca:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8009ecc:	2801      	cmp	r0, #1
    res = ancestor_signal(chart, sign, param);
 8009ece:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return res;
 8009ed0:	d108      	bne.n	8009ee4 <lv_chart_signal+0x34>
    if(sign == LV_SIGNAL_CLEANUP) {
 8009ed2:	b995      	cbnz	r5, 8009efa <lv_chart_signal+0x4a>
        LV_LL_READ(ext->series_ll, datal)
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f006 f8e3 	bl	80100a0 <lv_ll_get_head>
 8009eda:	4605      	mov	r5, r0
 8009edc:	b928      	cbnz	r0, 8009eea <lv_chart_signal+0x3a>
        lv_ll_clear(&ext->series_ll);
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f006 f96e 	bl	80101c0 <lv_ll_clear>
}
 8009ee4:	4638      	mov	r0, r7
 8009ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            lv_mem_free(*datal);
 8009eea:	6828      	ldr	r0, [r5, #0]
 8009eec:	f7f9 fc02 	bl	80036f4 <lv_mem_free>
        LV_LL_READ(ext->series_ll, datal)
 8009ef0:	4629      	mov	r1, r5
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	f006 f8da 	bl	80100ac <lv_ll_get_next>
 8009ef8:	e7ef      	b.n	8009eda <lv_chart_signal+0x2a>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8009efa:	2d06      	cmp	r5, #6
 8009efc:	d10c      	bne.n	8009f18 <lv_chart_signal+0x68>
 8009efe:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 8009f00:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8009f04:	b2da      	uxtb	r2, r3
 8009f06:	b119      	cbz	r1, 8009f10 <lv_chart_signal+0x60>
 8009f08:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8009f0a:	2b07      	cmp	r3, #7
 8009f0c:	d1f8      	bne.n	8009f00 <lv_chart_signal+0x50>
 8009f0e:	461a      	mov	r2, r3
        buf->type[i] = "lv_chart";
 8009f10:	4b05      	ldr	r3, [pc, #20]	; (8009f28 <lv_chart_signal+0x78>)
 8009f12:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 8009f16:	e7e5      	b.n	8009ee4 <lv_chart_signal+0x34>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8009f18:	2d05      	cmp	r5, #5
        chart->ext_draw_pad = ext->margin;
 8009f1a:	bf04      	itt	eq
 8009f1c:	8d23      	ldrheq	r3, [r4, #40]	; 0x28
 8009f1e:	f8a8 3034 	strheq.w	r3, [r8, #52]	; 0x34
 8009f22:	e7df      	b.n	8009ee4 <lv_chart_signal+0x34>
 8009f24:	20028994 	.word	0x20028994
 8009f28:	0801c741 	.word	0x0801c741

08009f2c <lv_chart_design>:
{
 8009f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 8009f30:	2a02      	cmp	r2, #2
{
 8009f32:	b0a5      	sub	sp, #148	; 0x94
 8009f34:	4682      	mov	sl, r0
 8009f36:	9107      	str	r1, [sp, #28]
    if(mode == LV_DESIGN_COVER_CHK) {
 8009f38:	d105      	bne.n	8009f46 <lv_chart_design+0x1a>
        return ancestor_design_f(chart, mask, mode);
 8009f3a:	4b04      	ldr	r3, [pc, #16]	; (8009f4c <lv_chart_design+0x20>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4798      	blx	r3
}
 8009f40:	b025      	add	sp, #148	; 0x94
 8009f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8009f46:	b11a      	cbz	r2, 8009f50 <lv_chart_design+0x24>
 8009f48:	2001      	movs	r0, #1
 8009f4a:	e7f9      	b.n	8009f40 <lv_chart_design+0x14>
 8009f4c:	20028990 	.word	0x20028990
        lv_draw_rect(&chart->coords, mask, lv_obj_get_style(chart), lv_obj_get_opa_scale(chart));
 8009f50:	f100 0310 	add.w	r3, r0, #16
 8009f54:	9309      	str	r3, [sp, #36]	; 0x24
 8009f56:	f7f8 fef3 	bl	8002d40 <lv_obj_get_style>
 8009f5a:	4604      	mov	r4, r0
 8009f5c:	4650      	mov	r0, sl
 8009f5e:	f005 fd46 	bl	800f9ee <lv_obj_get_opa_scale>
 8009f62:	9907      	ldr	r1, [sp, #28]
 8009f64:	4603      	mov	r3, r0
 8009f66:	4622      	mov	r2, r4
 8009f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f6a:	f007 fb76 	bl	801165a <lv_draw_rect>
        lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8009f6e:	4650      	mov	r0, sl
 8009f70:	f005 fda6 	bl	800fac0 <lv_obj_get_ext_attr>
 8009f74:	9008      	str	r0, [sp, #32]
    lv_chart_ext_t * ext     = lv_obj_get_ext_attr(chart);
 8009f76:	4650      	mov	r0, sl
 8009f78:	f005 fda2 	bl	800fac0 <lv_obj_get_ext_attr>
 8009f7c:	4606      	mov	r6, r0
    const lv_style_t * style = lv_obj_get_style(chart);
 8009f7e:	4650      	mov	r0, sl
 8009f80:	f7f8 fede 	bl	8002d40 <lv_obj_get_style>
 8009f84:	4605      	mov	r5, r0
    lv_opa_t opa_scale       = lv_obj_get_opa_scale(chart);
 8009f86:	4650      	mov	r0, sl
 8009f88:	f005 fd31 	bl	800f9ee <lv_obj_get_opa_scale>
 8009f8c:	900a      	str	r0, [sp, #40]	; 0x28
    lv_coord_t w     = lv_obj_get_width(chart);
 8009f8e:	4650      	mov	r0, sl
 8009f90:	f005 fcfb 	bl	800f98a <lv_obj_get_width>
 8009f94:	900b      	str	r0, [sp, #44]	; 0x2c
    lv_coord_t h     = lv_obj_get_height(chart);
 8009f96:	4650      	mov	r0, sl
 8009f98:	f005 fcfd 	bl	800f996 <lv_obj_get_height>
    if(ext->hdiv_cnt != 0) {
 8009f9c:	f896 b010 	ldrb.w	fp, [r6, #16]
    lv_coord_t h     = lv_obj_get_height(chart);
 8009fa0:	4607      	mov	r7, r0
    lv_coord_t x_ofs = chart->coords.x1;
 8009fa2:	f9ba 8010 	ldrsh.w	r8, [sl, #16]
    lv_coord_t y_ofs = chart->coords.y1;
 8009fa6:	f9ba 9012 	ldrsh.w	r9, [sl, #18]
    if(ext->hdiv_cnt != 0) {
 8009faa:	f1bb 0f00 	cmp.w	fp, #0
 8009fae:	f040 818d 	bne.w	800a2cc <lv_chart_design+0x3a0>
    if(ext->vdiv_cnt != 0) {
 8009fb2:	f896 b011 	ldrb.w	fp, [r6, #17]
 8009fb6:	f1bb 0f00 	cmp.w	fp, #0
 8009fba:	f040 81b2 	bne.w	800a322 <lv_chart_design+0x3f6>
        if(ext->type & LV_CHART_TYPE_LINE) lv_chart_draw_lines(chart, mask);
 8009fbe:	9b08      	ldr	r3, [sp, #32]
 8009fc0:	7d1b      	ldrb	r3, [r3, #20]
 8009fc2:	07d9      	lsls	r1, r3, #31
 8009fc4:	d503      	bpl.n	8009fce <lv_chart_design+0xa2>
 8009fc6:	9907      	ldr	r1, [sp, #28]
 8009fc8:	4650      	mov	r0, sl
 8009fca:	f7ff fed9 	bl	8009d80 <lv_chart_draw_lines>
        if(ext->type & LV_CHART_TYPE_COLUMN) lv_chart_draw_cols(chart, mask);
 8009fce:	9b08      	ldr	r3, [sp, #32]
 8009fd0:	7d1b      	ldrb	r3, [r3, #20]
 8009fd2:	079a      	lsls	r2, r3, #30
 8009fd4:	d52f      	bpl.n	800a036 <lv_chart_design+0x10a>
 * @param chart pointer to chart object
 * @param mask mask, inherited from the design function
 */
static void lv_chart_draw_cols(lv_obj_t * chart, const lv_area_t * mask)
{
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8009fd6:	4650      	mov	r0, sl
    lv_style_t rects;
    lv_coord_t col_w = w / ((ext->series.num + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
    lv_coord_t x_ofs = col_w / 2;                                    /*Shift with a half col.*/

    lv_style_copy(&rects, &lv_style_plain);
    rects.body.border.width = 0;
 8009fd8:	2700      	movs	r7, #0
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8009fda:	f005 fd71 	bl	800fac0 <lv_obj_get_ext_attr>
 8009fde:	4605      	mov	r5, r0
    lv_coord_t w = lv_obj_get_width(chart);
 8009fe0:	4650      	mov	r0, sl
 8009fe2:	f005 fcd2 	bl	800f98a <lv_obj_get_width>
 8009fe6:	4681      	mov	r9, r0
    lv_coord_t h = lv_obj_get_height(chart);
 8009fe8:	4650      	mov	r0, sl
 8009fea:	f005 fcd4 	bl	800f996 <lv_obj_get_height>
    lv_coord_t col_w = w / ((ext->series.num + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
 8009fee:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
 8009ff2:	8a6b      	ldrh	r3, [r5, #18]
    lv_coord_t h = lv_obj_get_height(chart);
 8009ff4:	900a      	str	r0, [sp, #40]	; 0x28
    lv_style_copy(&rects, &lv_style_plain);
 8009ff6:	a815      	add	r0, sp, #84	; 0x54
    lv_coord_t col_w = w / ((ext->series.num + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
 8009ff8:	fb02 3303 	mla	r3, r2, r3, r3
    lv_style_copy(&rects, &lv_style_plain);
 8009ffc:	49b2      	ldr	r1, [pc, #712]	; (800a2c8 <lv_chart_design+0x39c>)
    lv_coord_t col_w = w / ((ext->series.num + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
 8009ffe:	fb99 f3f3 	sdiv	r3, r9, r3
 800a002:	930b      	str	r3, [sp, #44]	; 0x2c
 800a004:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
    lv_coord_t x_ofs = col_w / 2;                                    /*Shift with a half col.*/
 800a008:	eb08 73d8 	add.w	r3, r8, r8, lsr #31
 800a00c:	105b      	asrs	r3, r3, #1
 800a00e:	930c      	str	r3, [sp, #48]	; 0x30
    lv_style_copy(&rects, &lv_style_plain);
 800a010:	f005 fe5b 	bl	800fcca <lv_style_copy>
    rects.body.border.width = 0;
 800a014:	f8ad 7060 	strh.w	r7, [sp, #96]	; 0x60
    rects.body.radius       = 0;
 800a018:	f8ad 705a 	strh.w	r7, [sp, #90]	; 0x5a
    rects.body.opa          = ext->series.opa;
 800a01c:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800a020:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c

    col_a.y2 = chart->coords.y2;
 800a024:	f8ba 3016 	ldrh.w	r3, [sl, #22]
 800a028:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    lv_coord_t x_act;

    /*Go through all points*/
    for(i = 0; i < ext->point_cnt; i++) {
 800a02c:	8a6b      	ldrh	r3, [r5, #18]
 800a02e:	b2ba      	uxth	r2, r7
 800a030:	4293      	cmp	r3, r2
 800a032:	f200 81a1 	bhi.w	800a378 <lv_chart_design+0x44c>
        if(ext->type & LV_CHART_TYPE_POINT) lv_chart_draw_points(chart, mask);
 800a036:	9b08      	ldr	r3, [sp, #32]
 800a038:	7d1b      	ldrb	r3, [r3, #20]
 800a03a:	075f      	lsls	r7, r3, #29
 800a03c:	d525      	bpl.n	800a08a <lv_chart_design+0x15e>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 800a03e:	4650      	mov	r0, sl
 800a040:	f005 fd3e 	bl	800fac0 <lv_obj_get_ext_attr>
 800a044:	4605      	mov	r5, r0
    lv_coord_t w     = lv_obj_get_width(chart);
 800a046:	4650      	mov	r0, sl
 800a048:	f005 fc9f 	bl	800f98a <lv_obj_get_width>
 800a04c:	4681      	mov	r9, r0
    lv_coord_t h     = lv_obj_get_height(chart);
 800a04e:	4650      	mov	r0, sl
 800a050:	f005 fca1 	bl	800f996 <lv_obj_get_height>
    lv_coord_t y_ofs = chart->coords.y1;
 800a054:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
    lv_coord_t h     = lv_obj_get_height(chart);
 800a058:	4607      	mov	r7, r0
    lv_style_copy(&style_point, &lv_style_plain);
 800a05a:	499b      	ldr	r1, [pc, #620]	; (800a2c8 <lv_chart_design+0x39c>)
 800a05c:	a815      	add	r0, sp, #84	; 0x54
    lv_coord_t y_ofs = chart->coords.y1;
 800a05e:	930a      	str	r3, [sp, #40]	; 0x28
    lv_coord_t x_ofs = chart->coords.x1;
 800a060:	f9ba b010 	ldrsh.w	fp, [sl, #16]
    lv_style_copy(&style_point, &lv_style_plain);
 800a064:	f005 fe31 	bl	800fcca <lv_style_copy>
    style_point.body.border.width = 0;
 800a068:	2300      	movs	r3, #0
    LV_LL_READ_BACK(ext->series_ll, ser)
 800a06a:	4628      	mov	r0, r5
    style_point.body.border.width = 0;
 800a06c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    style_point.body.opa          = ext->series.opa;
 800a070:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800a074:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    style_point.body.radius       = ext->series.width;
 800a078:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800a07a:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    LV_LL_READ_BACK(ext->series_ll, ser)
 800a07e:	f006 f812 	bl	80100a6 <lv_ll_get_tail>
 800a082:	4604      	mov	r4, r0
 800a084:	2800      	cmp	r0, #0
 800a086:	f040 820c 	bne.w	800a4a2 <lv_chart_design+0x576>
        if(ext->type & LV_CHART_TYPE_VERTICAL_LINE) lv_chart_draw_vertical_lines(chart, mask);
 800a08a:	9b08      	ldr	r3, [sp, #32]
 800a08c:	7d1b      	ldrb	r3, [r3, #20]
 800a08e:	071c      	lsls	r4, r3, #28
 800a090:	d50f      	bpl.n	800a0b2 <lv_chart_design+0x186>
 * @param obj pointer to chart object
 */
static void lv_chart_draw_vertical_lines(lv_obj_t * chart, const lv_area_t * mask)
{

    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 800a092:	4650      	mov	r0, sl
 800a094:	f005 fd14 	bl	800fac0 <lv_obj_get_ext_attr>
 800a098:	4605      	mov	r5, r0
    lv_coord_t w         = lv_obj_get_width(chart);
 800a09a:	4650      	mov	r0, sl
 800a09c:	f005 fc75 	bl	800f98a <lv_obj_get_width>
    /*Vertical lines works only if the width == point count. Else use the normal line type*/
    if(ext->point_cnt != w) {
 800a0a0:	8a6b      	ldrh	r3, [r5, #18]
    lv_coord_t w         = lv_obj_get_width(chart);
 800a0a2:	9009      	str	r0, [sp, #36]	; 0x24
    if(ext->point_cnt != w) {
 800a0a4:	4283      	cmp	r3, r0
 800a0a6:	f000 8281 	beq.w	800a5ac <lv_chart_design+0x680>
        lv_chart_draw_lines(chart, mask);
 800a0aa:	9907      	ldr	r1, [sp, #28]
 800a0ac:	4650      	mov	r0, sl
 800a0ae:	f7ff fe67 	bl	8009d80 <lv_chart_draw_lines>
        if(ext->type & LV_CHART_TYPE_AREA) lv_chart_draw_areas(chart, mask);
 800a0b2:	9b08      	ldr	r3, [sp, #32]
 800a0b4:	7d1b      	ldrb	r3, [r3, #20]
 800a0b6:	06d9      	lsls	r1, r3, #27
 800a0b8:	d520      	bpl.n	800a0fc <lv_chart_design+0x1d0>
 * Draw the data lines as areas on a chart
 * @param obj pointer to chart object
 */
static void lv_chart_draw_areas(lv_obj_t * chart, const lv_area_t * mask)
{
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 800a0ba:	4650      	mov	r0, sl
 800a0bc:	f005 fd00 	bl	800fac0 <lv_obj_get_ext_attr>
 800a0c0:	4606      	mov	r6, r0

    uint16_t i;
    lv_point_t p1;
    lv_point_t p2;
    lv_coord_t w     = lv_obj_get_width(chart);
 800a0c2:	4650      	mov	r0, sl
 800a0c4:	f005 fc61 	bl	800f98a <lv_obj_get_width>
 800a0c8:	900c      	str	r0, [sp, #48]	; 0x30
    lv_coord_t h     = lv_obj_get_height(chart);
 800a0ca:	4650      	mov	r0, sl
 800a0cc:	f005 fc63 	bl	800f996 <lv_obj_get_height>
    lv_coord_t x_ofs = chart->coords.x1;
 800a0d0:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
    lv_coord_t h     = lv_obj_get_height(chart);
 800a0d4:	4683      	mov	fp, r0
    lv_coord_t y_ofs = chart->coords.y1;
    int32_t y_tmp;
    lv_coord_t p_prev;
    lv_coord_t p_act;
    lv_chart_series_t * ser;
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
 800a0d6:	4650      	mov	r0, sl
    lv_coord_t x_ofs = chart->coords.x1;
 800a0d8:	9308      	str	r3, [sp, #32]
    lv_coord_t y_ofs = chart->coords.y1;
 800a0da:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
 800a0de:	930d      	str	r3, [sp, #52]	; 0x34
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
 800a0e0:	f005 fc85 	bl	800f9ee <lv_obj_get_opa_scale>
    lv_style_t style;
    lv_style_copy(&style, &lv_style_plain);
 800a0e4:	4978      	ldr	r1, [pc, #480]	; (800a2c8 <lv_chart_design+0x39c>)
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
 800a0e6:	9009      	str	r0, [sp, #36]	; 0x24
    lv_style_copy(&style, &lv_style_plain);
 800a0e8:	a815      	add	r0, sp, #84	; 0x54
 800a0ea:	f005 fdee 	bl	800fcca <lv_style_copy>

    /*Go through all data lines*/
    LV_LL_READ_BACK(ext->series_ll, ser)
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	f005 ffd9 	bl	80100a6 <lv_ll_get_tail>
 800a0f4:	4607      	mov	r7, r0
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	f040 82eb 	bne.w	800a6d2 <lv_chart_design+0x7a6>
    }
}

static void lv_chart_draw_y_ticks(lv_obj_t * chart, const lv_area_t * mask)
{
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 800a0fc:	4650      	mov	r0, sl
 800a0fe:	f005 fcdf 	bl	800fac0 <lv_obj_get_ext_attr>

    if(ext->y_axis.list_of_values != NULL || ext->y_axis.num_tick_marks != 0) {
 800a102:	6983      	ldr	r3, [r0, #24]
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 800a104:	4604      	mov	r4, r0
    if(ext->y_axis.list_of_values != NULL || ext->y_axis.num_tick_marks != 0) {
 800a106:	b913      	cbnz	r3, 800a10e <lv_chart_design+0x1e2>
 800a108:	7f43      	ldrb	r3, [r0, #29]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d04d      	beq.n	800a1aa <lv_chart_design+0x27e>

        const lv_style_t * style = lv_obj_get_style(chart);
 800a10e:	4650      	mov	r0, sl
 800a110:	f7f8 fe16 	bl	8002d40 <lv_obj_get_style>
 800a114:	4607      	mov	r7, r0
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(chart);
 800a116:	4650      	mov	r0, sl
 800a118:	f005 fc69 	bl	800f9ee <lv_obj_get_opa_scale>
        uint8_t num_scale_ticks;
        uint8_t major_tick_len, minor_tick_len;
        lv_point_t p1;
        lv_point_t p2;
        lv_coord_t x_ofs = chart->coords.x1;
        lv_coord_t y_ofs = chart->coords.y1;
 800a11c:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(chart);
 800a120:	9008      	str	r0, [sp, #32]
        lv_coord_t h     = lv_obj_get_height(chart);
 800a122:	4650      	mov	r0, sl
        lv_coord_t y_ofs = chart->coords.y1;
 800a124:	930b      	str	r3, [sp, #44]	; 0x2c
        lv_coord_t x_ofs = chart->coords.x1;
 800a126:	f9ba 8010 	ldrsh.w	r8, [sl, #16]
        lv_coord_t h     = lv_obj_get_height(chart);
 800a12a:	f005 fc34 	bl	800f996 <lv_obj_get_height>
 800a12e:	900c      	str	r0, [sp, #48]	; 0x30
        lv_coord_t w     = lv_obj_get_width(chart);
 800a130:	4650      	mov	r0, sl
 800a132:	f005 fc2a 	bl	800f98a <lv_obj_get_width>
        char buf[LV_CHART_AXIS_TICK_LABEL_MAX_LEN + 1]; /* up to N symbols per label + null terminator */

        /* calculate the size of tick marks */
        if(ext->y_axis.major_tick_len == LV_CHART_TICK_LENGTH_AUTO)
 800a136:	f894 901e 	ldrb.w	r9, [r4, #30]
            minor_tick_len = ext->y_axis.minor_tick_len;

        /* count the '\n'-s to determine the number of options */
        list_index    = 0;
        num_of_labels = 0;
        if(ext->y_axis.list_of_values != NULL) {
 800a13a:	69a1      	ldr	r1, [r4, #24]
        if(ext->y_axis.major_tick_len == LV_CHART_TICK_LENGTH_AUTO)
 800a13c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
            major_tick_len = (int32_t)w * LV_CHART_AXIS_MAJOR_TICK_LEN_COE;
 800a140:	bf04      	itt	eq
 800a142:	230f      	moveq	r3, #15
 800a144:	fb90 f0f3 	sdiveq	r0, r0, r3
        if(ext->y_axis.minor_tick_len == LV_CHART_TICK_LENGTH_AUTO)
 800a148:	7fe3      	ldrb	r3, [r4, #31]
            major_tick_len = (int32_t)w * LV_CHART_AXIS_MAJOR_TICK_LEN_COE;
 800a14a:	bf08      	it	eq
 800a14c:	fa5f f980 	uxtbeq.w	r9, r0
        if(ext->y_axis.minor_tick_len == LV_CHART_TICK_LENGTH_AUTO)
 800a150:	2bff      	cmp	r3, #255	; 0xff
            minor_tick_len = major_tick_len * LV_CHART_AXIS_MINOR_TICK_LEN_COE;
 800a152:	bf01      	itttt	eq
 800a154:	ea4f 0349 	moveq.w	r3, r9, lsl #1
 800a158:	2203      	moveq	r2, #3
 800a15a:	fbb3 f3f2 	udiveq	r3, r3, r2
 800a15e:	b2db      	uxtbeq	r3, r3
        if(ext->y_axis.list_of_values != NULL) {
 800a160:	2900      	cmp	r1, #0
 800a162:	f040 8348 	bne.w	800a7f6 <lv_chart_design+0x8ca>
        num_of_labels = 0;
 800a166:	460e      	mov	r6, r1

            num_of_labels++; /* last option in the at row*/
        }

        /* we can't have string labels without ticks step, set to 1 if not specified */
        if(ext->y_axis.num_tick_marks == 0) ext->y_axis.num_tick_marks = 1;
 800a168:	7f62      	ldrb	r2, [r4, #29]
 800a16a:	b90a      	cbnz	r2, 800a170 <lv_chart_design+0x244>
 800a16c:	2201      	movs	r2, #1
 800a16e:	7762      	strb	r2, [r4, #29]

        /* calculate total number of ticks */
        if(num_of_labels < 2)
 800a170:	2e01      	cmp	r6, #1
            num_scale_ticks = ext->y_axis.num_tick_marks;
        else
            num_scale_ticks = (ext->y_axis.num_tick_marks * (num_of_labels - 1));
 800a172:	f894 b01d 	ldrb.w	fp, [r4, #29]

        for(i = 0; i < (num_scale_ticks + 1); i++) { /* one extra loop - it may not exist in the list, empty label */
                                                     /* first point of the tick */
            p1.x = x_ofs - 1;
 800a176:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
        list_index    = 0;
 800a17a:	f04f 0500 	mov.w	r5, #0
            num_scale_ticks = (ext->y_axis.num_tick_marks * (num_of_labels - 1));
 800a17e:	bf88      	it	hi
 800a180:	f106 32ff 	addhi.w	r2, r6, #4294967295	; 0xffffffff
        list_index    = 0;
 800a184:	9509      	str	r5, [sp, #36]	; 0x24
            num_scale_ticks = (ext->y_axis.num_tick_marks * (num_of_labels - 1));
 800a186:	bf88      	it	hi
 800a188:	fb12 fb0b 	smulbbhi	fp, r2, fp
            p1.x = x_ofs - 1;
 800a18c:	fa0f f288 	sxth.w	r2, r8
            num_scale_ticks = (ext->y_axis.num_tick_marks * (num_of_labels - 1));
 800a190:	bf88      	it	hi
 800a192:	fa5f fb8b 	uxtbhi.w	fp, fp

            /* second point of the tick */
            if((num_of_labels != 0) && (i == 0 || i % ext->y_axis.num_tick_marks == 0))
                p2.x = p1.x - major_tick_len; /* major tick */
            else
                p2.x = p1.x - minor_tick_len; /* minor tick */
 800a196:	1ad3      	subs	r3, r2, r3
            p1.x = x_ofs - 1;
 800a198:	920a      	str	r2, [sp, #40]	; 0x28
                p2.x = p1.x - minor_tick_len; /* minor tick */
 800a19a:	930d      	str	r3, [sp, #52]	; 0x34
 800a19c:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
        for(i = 0; i < (num_scale_ticks + 1); i++) { /* one extra loop - it may not exist in the list, empty label */
 800a1a0:	f10b 0301 	add.w	r3, fp, #1
 800a1a4:	4598      	cmp	r8, r3
 800a1a6:	f2c0 8329 	blt.w	800a7fc <lv_chart_design+0x8d0>
    }
}

static void lv_chart_draw_x_ticks(lv_obj_t * chart, const lv_area_t * mask)
{
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 800a1aa:	4650      	mov	r0, sl
 800a1ac:	f005 fc88 	bl	800fac0 <lv_obj_get_ext_attr>

    if(ext->x_axis.list_of_values != NULL || ext->x_axis.num_tick_marks != 0) {
 800a1b0:	6a03      	ldr	r3, [r0, #32]
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 800a1b2:	4604      	mov	r4, r0
    if(ext->x_axis.list_of_values != NULL || ext->x_axis.num_tick_marks != 0) {
 800a1b4:	b923      	cbnz	r3, 800a1c0 <lv_chart_design+0x294>
 800a1b6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f43f aec4 	beq.w	8009f48 <lv_chart_design+0x1c>

        const lv_style_t * style = lv_obj_get_style(chart);
 800a1c0:	4650      	mov	r0, sl
 800a1c2:	f7f8 fdbd 	bl	8002d40 <lv_obj_get_style>
 800a1c6:	4607      	mov	r7, r0
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(chart);
 800a1c8:	4650      	mov	r0, sl
 800a1ca:	f005 fc10 	bl	800f9ee <lv_obj_get_opa_scale>
        uint8_t num_of_labels;
        uint8_t num_scale_ticks;
        uint8_t major_tick_len, minor_tick_len;
        lv_point_t p1;
        lv_point_t p2;
        lv_coord_t x_ofs = chart->coords.x1;
 800a1ce:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(chart);
 800a1d2:	9008      	str	r0, [sp, #32]
        lv_coord_t y_ofs = chart->coords.y1;
        lv_coord_t h     = lv_obj_get_height(chart);
 800a1d4:	4650      	mov	r0, sl
        lv_coord_t x_ofs = chart->coords.x1;
 800a1d6:	930b      	str	r3, [sp, #44]	; 0x2c
        lv_coord_t y_ofs = chart->coords.y1;
 800a1d8:	f9ba 9012 	ldrsh.w	r9, [sl, #18]
        lv_coord_t h     = lv_obj_get_height(chart);
 800a1dc:	f005 fbdb 	bl	800f996 <lv_obj_get_height>
 800a1e0:	900c      	str	r0, [sp, #48]	; 0x30
        lv_coord_t w     = lv_obj_get_width(chart);
 800a1e2:	4650      	mov	r0, sl
 800a1e4:	f005 fbd1 	bl	800f98a <lv_obj_get_width>
        char buf[LV_CHART_AXIS_TICK_LABEL_MAX_LEN + 1]; /* up to N symbols per label + null terminator */

        /* calculate the size of tick marks */
        if(ext->x_axis.major_tick_len == LV_CHART_TICK_LENGTH_AUTO)
 800a1e8:	f894 b026 	ldrb.w	fp, [r4, #38]	; 0x26
            minor_tick_len = ext->x_axis.minor_tick_len;

        /* count the '\n'-s to determine the number of options */
        list_index    = 0;
        num_of_labels = 0;
        if(ext->x_axis.list_of_values != NULL) {
 800a1ec:	6a21      	ldr	r1, [r4, #32]
        if(ext->x_axis.major_tick_len == LV_CHART_TICK_LENGTH_AUTO)
 800a1ee:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
        lv_coord_t w     = lv_obj_get_width(chart);
 800a1f2:	900a      	str	r0, [sp, #40]	; 0x28
            major_tick_len = (int32_t)w * LV_CHART_AXIS_MAJOR_TICK_LEN_COE;
 800a1f4:	bf01      	itttt	eq
 800a1f6:	230f      	moveq	r3, #15
 800a1f8:	4602      	moveq	r2, r0
 800a1fa:	fb92 f3f3 	sdiveq	r3, r2, r3
 800a1fe:	fa5f fb83 	uxtbeq.w	fp, r3
        if(ext->x_axis.minor_tick_len == LV_CHART_TICK_LENGTH_AUTO)
 800a202:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800a206:	2bff      	cmp	r3, #255	; 0xff
            minor_tick_len = major_tick_len * LV_CHART_AXIS_MINOR_TICK_LEN_COE;
 800a208:	bf01      	itttt	eq
 800a20a:	ea4f 034b 	moveq.w	r3, fp, lsl #1
 800a20e:	2203      	moveq	r2, #3
 800a210:	fbb3 f3f2 	udiveq	r3, r3, r2
 800a214:	b2db      	uxtbeq	r3, r3
        if(ext->x_axis.list_of_values != NULL) {
 800a216:	2900      	cmp	r1, #0
 800a218:	f040 8398 	bne.w	800a94c <lv_chart_design+0xa20>
        num_of_labels = 0;
 800a21c:	460e      	mov	r6, r1

            num_of_labels++; /* last option in the at row*/
        }

        /* we can't have string labels without ticks step, set to 1 if not specified */
        if(ext->x_axis.num_tick_marks == 0) ext->x_axis.num_tick_marks = 1;
 800a21e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 800a222:	b912      	cbnz	r2, 800a22a <lv_chart_design+0x2fe>
 800a224:	2201      	movs	r2, #1
 800a226:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25

        /* calculate total number of marks */
        if(num_of_labels < 2)
 800a22a:	2e01      	cmp	r6, #1
            num_scale_ticks = ext->x_axis.num_tick_marks;
        else
            num_scale_ticks = (ext->x_axis.num_tick_marks * (num_of_labels - 1));
 800a22c:	f894 8025 	ldrb.w	r8, [r4, #37]	; 0x25
        list_index    = 0;
 800a230:	f04f 0500 	mov.w	r5, #0
            num_scale_ticks = (ext->x_axis.num_tick_marks * (num_of_labels - 1));
 800a234:	bf88      	it	hi
 800a236:	f106 32ff 	addhi.w	r2, r6, #4294967295	; 0xffffffff
        list_index    = 0;
 800a23a:	9509      	str	r5, [sp, #36]	; 0x24
            num_scale_ticks = (ext->x_axis.num_tick_marks * (num_of_labels - 1));
 800a23c:	bf88      	it	hi
 800a23e:	fb12 f808 	smulbbhi	r8, r2, r8

        for(i = 0; i < (num_scale_ticks + 1); i++) { /* one extra loop - it may not exist in the list, empty label */
                                                     /* first point of the tick */
            p1.y = h + y_ofs;
 800a242:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a244:	4491      	add	r9, r2
            num_scale_ticks = (ext->x_axis.num_tick_marks * (num_of_labels - 1));
 800a246:	bf88      	it	hi
 800a248:	fa5f f888 	uxtbhi.w	r8, r8
            p1.y = h + y_ofs;
 800a24c:	fa0f fa89 	sxth.w	sl, r9

            /* second point of the tick */
            if((num_of_labels != 0) && (i == 0 || i % ext->x_axis.num_tick_marks == 0))
                p2.y = p1.y + major_tick_len; /* major tick */
            else
                p2.y = p1.y + minor_tick_len; /* minor tick */
 800a250:	4453      	add	r3, sl
 800a252:	930c      	str	r3, [sp, #48]	; 0x30
 800a254:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
        for(i = 0; i < (num_scale_ticks + 1); i++) { /* one extra loop - it may not exist in the list, empty label */
 800a258:	f108 0301 	add.w	r3, r8, #1
 800a25c:	4599      	cmp	r9, r3
 800a25e:	f6bf ae73 	bge.w	8009f48 <lv_chart_design+0x1c>
            p1.y = h + y_ofs;
 800a262:	f8ad a03a 	strh.w	sl, [sp, #58]	; 0x3a
            if((num_of_labels != 0) && (i == 0 || i % ext->x_axis.num_tick_marks == 0))
 800a266:	2e00      	cmp	r6, #0
 800a268:	f000 8373 	beq.w	800a952 <lv_chart_design+0xa26>
 800a26c:	f1b9 0f00 	cmp.w	r9, #0
 800a270:	d009      	beq.n	800a286 <lv_chart_design+0x35a>
 800a272:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 800a276:	fbb9 f3f2 	udiv	r3, r9, r2
 800a27a:	fb02 9313 	mls	r3, r2, r3, r9
 800a27e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a282:	f040 8366 	bne.w	800a952 <lv_chart_design+0xa26>
                p2.y = p1.y + major_tick_len; /* major tick */
 800a286:	eb0a 030b 	add.w	r3, sl, fp
 800a28a:	b21b      	sxth	r3, r3

            /* draw a line at moving x position */
            p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - style->line.width) * i) / num_scale_ticks;
 800a28c:	9a0a      	ldr	r2, [sp, #40]	; 0x28

            if(i != num_scale_ticks)
 800a28e:	45c8      	cmp	r8, r9
 800a290:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - style->line.width) * i) / num_scale_ticks;
 800a294:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800a298:	eba2 0303 	sub.w	r3, r2, r3
 800a29c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a29e:	fb09 f303 	mul.w	r3, r9, r3
 800a2a2:	fb93 f3f8 	sdiv	r3, r3, r8
 800a2a6:	4413      	add	r3, r2
 800a2a8:	b21b      	sxth	r3, r3
 800a2aa:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 800a2ae:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
            if(i != num_scale_ticks)
 800a2b2:	f000 8351 	beq.w	800a958 <lv_chart_design+0xa2c>
                lv_draw_line(&p1, &p2, mask, style, opa_scale);
            else if((ext->x_axis.options & LV_CHART_AXIS_DRAW_LAST_TICK) != 0)
                lv_draw_line(&p1, &p2, mask, style, opa_scale);
 800a2b6:	9b08      	ldr	r3, [sp, #32]
 800a2b8:	a90f      	add	r1, sp, #60	; 0x3c
 800a2ba:	9a07      	ldr	r2, [sp, #28]
 800a2bc:	a80e      	add	r0, sp, #56	; 0x38
 800a2be:	9300      	str	r3, [sp, #0]
 800a2c0:	463b      	mov	r3, r7
 800a2c2:	f006 fb8d 	bl	80109e0 <lv_draw_line>
 800a2c6:	e34c      	b.n	800a962 <lv_chart_design+0xa36>
 800a2c8:	20020524 	.word	0x20020524
        if(style->body.border.width != 0) {
 800a2cc:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
 800a2d0:	bb2c      	cbnz	r4, 800a31e <lv_chart_design+0x3f2>
            div_i_end   = ext->hdiv_cnt + 1;
 800a2d2:	f10b 0b01 	add.w	fp, fp, #1
 800a2d6:	fa5f fb8b 	uxtb.w	fp, fp
        p2.x = w + x_ofs;
 800a2da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        p1.x = 0 + x_ofs;
 800a2dc:	f8ad 8048 	strh.w	r8, [sp, #72]	; 0x48
        p2.x = w + x_ofs;
 800a2e0:	4443      	add	r3, r8
 800a2e2:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
 800a2e6:	455c      	cmp	r4, fp
 800a2e8:	f63f ae63 	bhi.w	8009fb2 <lv_chart_design+0x86>
            p1.y = (int32_t)((int32_t)(h - style->line.width) * div_i) / (ext->hdiv_cnt + 1);
 800a2ec:	f9b5 3036 	ldrsh.w	r3, [r5, #54]	; 0x36
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 800a2f0:	a915      	add	r1, sp, #84	; 0x54
            p1.y = (int32_t)((int32_t)(h - style->line.width) * div_i) / (ext->hdiv_cnt + 1);
 800a2f2:	7c32      	ldrb	r2, [r6, #16]
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 800a2f4:	a812      	add	r0, sp, #72	; 0x48
            p1.y = (int32_t)((int32_t)(h - style->line.width) * div_i) / (ext->hdiv_cnt + 1);
 800a2f6:	1afb      	subs	r3, r7, r3
 800a2f8:	3201      	adds	r2, #1
 800a2fa:	4363      	muls	r3, r4
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
 800a2fc:	3401      	adds	r4, #1
            p1.y = (int32_t)((int32_t)(h - style->line.width) * div_i) / (ext->hdiv_cnt + 1);
 800a2fe:	fb93 f3f2 	sdiv	r3, r3, r2
            p1.y += y_ofs;
 800a302:	444b      	add	r3, r9
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 800a304:	9a07      	ldr	r2, [sp, #28]
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
 800a306:	b2e4      	uxtb	r4, r4
            p1.y += y_ofs;
 800a308:	b21b      	sxth	r3, r3
 800a30a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            p2.y = p1.y;
 800a30e:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 800a312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a314:	9300      	str	r3, [sp, #0]
 800a316:	462b      	mov	r3, r5
 800a318:	f006 fb62 	bl	80109e0 <lv_draw_line>
 800a31c:	e7e3      	b.n	800a2e6 <lv_chart_design+0x3ba>
            div_i_start = 1;
 800a31e:	2401      	movs	r4, #1
 800a320:	e7db      	b.n	800a2da <lv_chart_design+0x3ae>
        if(style->body.border.width != 0) {
 800a322:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
 800a326:	bb2c      	cbnz	r4, 800a374 <lv_chart_design+0x448>
            div_i_end   = ext->vdiv_cnt + 1;
 800a328:	f10b 0b01 	add.w	fp, fp, #1
 800a32c:	fa5f fb8b 	uxtb.w	fp, fp
        p2.y = h + y_ofs;
 800a330:	444f      	add	r7, r9
        p1.y = 0 + y_ofs;
 800a332:	f8ad 904a 	strh.w	r9, [sp, #74]	; 0x4a
        p2.y = h + y_ofs;
 800a336:	f8ad 7056 	strh.w	r7, [sp, #86]	; 0x56
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
 800a33a:	455c      	cmp	r4, fp
 800a33c:	f63f ae3f 	bhi.w	8009fbe <lv_chart_design+0x92>
            p1.x = (int32_t)((int32_t)(w - style->line.width) * div_i) / (ext->vdiv_cnt + 1);
 800a340:	f9b5 3036 	ldrsh.w	r3, [r5, #54]	; 0x36
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 800a344:	a915      	add	r1, sp, #84	; 0x54
            p1.x = (int32_t)((int32_t)(w - style->line.width) * div_i) / (ext->vdiv_cnt + 1);
 800a346:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 800a348:	a812      	add	r0, sp, #72	; 0x48
            p1.x = (int32_t)((int32_t)(w - style->line.width) * div_i) / (ext->vdiv_cnt + 1);
 800a34a:	1ad3      	subs	r3, r2, r3
 800a34c:	7c72      	ldrb	r2, [r6, #17]
 800a34e:	4363      	muls	r3, r4
 800a350:	3201      	adds	r2, #1
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
 800a352:	3401      	adds	r4, #1
            p1.x = (int32_t)((int32_t)(w - style->line.width) * div_i) / (ext->vdiv_cnt + 1);
 800a354:	fb93 f3f2 	sdiv	r3, r3, r2
            p1.x += x_ofs;
 800a358:	4443      	add	r3, r8
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 800a35a:	9a07      	ldr	r2, [sp, #28]
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
 800a35c:	b2e4      	uxtb	r4, r4
            p1.x += x_ofs;
 800a35e:	b21b      	sxth	r3, r3
 800a360:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
            p2.x = p1.x;
 800a364:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
 800a368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a36a:	9300      	str	r3, [sp, #0]
 800a36c:	462b      	mov	r3, r5
 800a36e:	f006 fb37 	bl	80109e0 <lv_draw_line>
 800a372:	e7e2      	b.n	800a33a <lv_chart_design+0x40e>
            div_i_start = 1;
 800a374:	2401      	movs	r4, #1
 800a376:	e7db      	b.n	800a330 <lv_chart_design+0x404>
        x_act = (int32_t)((int32_t)w * i) / ext->point_cnt;
 800a378:	fa1f fb87 	uxth.w	fp, r7
        x_act += chart->coords.x1 + x_ofs;
 800a37c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        LV_LL_READ_BACK(ext->series_ll, ser)
 800a37e:	4628      	mov	r0, r5
        x_act = (int32_t)((int32_t)w * i) / ext->point_cnt;
 800a380:	fb0b f409 	mul.w	r4, fp, r9
 800a384:	fb94 f4f3 	sdiv	r4, r4, r3
        x_act += chart->coords.x1 + x_ofs;
 800a388:	f8ba 3010 	ldrh.w	r3, [sl, #16]
 800a38c:	4413      	add	r3, r2
 800a38e:	fa03 f484 	sxtah	r4, r3, r4
 800a392:	b224      	sxth	r4, r4
        LV_LL_READ_BACK(ext->series_ll, ser)
 800a394:	f005 fe87 	bl	80100a6 <lv_ll_get_tail>
 800a398:	4606      	mov	r6, r0
 800a39a:	b1d8      	cbz	r0, 800a3d4 <lv_chart_design+0x4a8>
            lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 800a39c:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 800a3a0:	07db      	lsls	r3, r3, #31
            if(col_a.x2 < mask->x1) continue;
 800a3a2:	9b07      	ldr	r3, [sp, #28]
            lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 800a3a4:	bf54      	ite	pl
 800a3a6:	f9b6 0006 	ldrshpl.w	r0, [r6, #6]
 800a3aa:	2000      	movmi	r0, #0
            col_a.x1 = x_act;
 800a3ac:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40
            col_a.x2 = col_a.x1 + col_w;
 800a3b0:	4444      	add	r4, r8
            if(col_a.x2 < mask->x1) continue;
 800a3b2:	f9b3 3000 	ldrsh.w	r3, [r3]
            col_a.x2 = col_a.x1 + col_w;
 800a3b6:	b224      	sxth	r4, r4
            if(col_a.x2 < mask->x1) continue;
 800a3b8:	42a3      	cmp	r3, r4
            col_a.x2 = col_a.x1 + col_w;
 800a3ba:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
            if(col_a.x2 < mask->x1) continue;
 800a3be:	dc6b      	bgt.n	800a498 <lv_chart_design+0x56c>
            if(col_a.x1 > mask->x2) break;
 800a3c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3c2:	9a07      	ldr	r2, [sp, #28]
 800a3c4:	1ae3      	subs	r3, r4, r3
 800a3c6:	f8b5 c012 	ldrh.w	ip, [r5, #18]
 800a3ca:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800a3ce:	b21b      	sxth	r3, r3
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	da01      	bge.n	800a3d8 <lv_chart_design+0x4ac>
 800a3d4:	3701      	adds	r7, #1
 800a3d6:	e629      	b.n	800a02c <lv_chart_design+0x100>
            rects.body.main_color = ser->color;
 800a3d8:	88b3      	ldrh	r3, [r6, #4]
            lv_coord_t p_act = (start_point + i) % ext->point_cnt;
 800a3da:	4458      	add	r0, fp
    uint16_t g_2   = (c2.ch.green_h << 3) + c2.ch.green_l;
    uint16_t g_out = (uint16_t)((uint16_t)g_1 * mix + (g_2 * (255 - mix))) >> 8;
    ret.ch.green_h = g_out >> 3;
    ret.ch.green_l = g_out & 0x7;
#else
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800a3dc:	88b2      	ldrh	r2, [r6, #4]
            rects.body.main_color = ser->color;
 800a3de:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800a3e2:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800a3e6:	f3c2 1245 	ubfx	r2, r2, #5, #6
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800a3ea:	7973      	ldrb	r3, [r6, #5]
 800a3ec:	f1c1 0eff 	rsb	lr, r1, #255	; 0xff
#endif
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800a3f0:	7931      	ldrb	r1, [r6, #4]
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800a3f2:	08db      	lsrs	r3, r3, #3
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800a3f4:	fb12 f20e 	smulbb	r2, r2, lr
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800a3f8:	f001 011f 	and.w	r1, r1, #31
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800a3fc:	fb13 f30e 	smulbb	r3, r3, lr
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800a400:	fb11 f10e 	smulbb	r1, r1, lr
            rects.body.grad_color = lv_color_mix(LV_COLOR_BLACK, ser->color, ext->series.dark);
 800a404:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800a408:	f3c2 2205 	ubfx	r2, r2, #8, #6
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800a40c:	f3c3 2304 	ubfx	r3, r3, #8, #5
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800a410:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800a414:	f361 0e04 	bfi	lr, r1, #0, #5
 800a418:	f88d e058 	strb.w	lr, [sp, #88]	; 0x58
 800a41c:	f8bd 1058 	ldrh.w	r1, [sp, #88]	; 0x58
 800a420:	f362 114a 	bfi	r1, r2, #5, #6
 800a424:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
 800a428:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800a42c:	f363 01c7 	bfi	r1, r3, #3, #5
            lv_coord_t p_act = (start_point + i) % ext->point_cnt;
 800a430:	fb90 f3fc 	sdiv	r3, r0, ip
 800a434:	fb0c 0013 	mls	r0, ip, r3, r0
            rects.body.grad_color = lv_color_mix(LV_COLOR_BLACK, ser->color, ext->series.dark);
 800a438:	f88d 1059 	strb.w	r1, [sp, #89]	; 0x59
            y_tmp            = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
 800a43c:	b203      	sxth	r3, r0
 800a43e:	6832      	ldr	r2, [r6, #0]
 800a440:	f9b5 c00c 	ldrsh.w	ip, [r5, #12]
 800a444:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800a448:	930d      	str	r3, [sp, #52]	; 0x34
 800a44a:	eba2 020c 	sub.w	r2, r2, ip
 800a44e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a450:	fb03 f102 	mul.w	r1, r3, r2
            col_a.y1         = h - y_tmp + chart->coords.y1;
 800a454:	f8ba 2012 	ldrh.w	r2, [sl, #18]
 800a458:	1898      	adds	r0, r3, r2
            y_tmp            = y_tmp / (ext->ymax - ext->ymin);
 800a45a:	f9b5 200e 	ldrsh.w	r2, [r5, #14]
 800a45e:	eba2 020c 	sub.w	r2, r2, ip
 800a462:	fb91 f2f2 	sdiv	r2, r1, r2
            col_a.y1         = h - y_tmp + chart->coords.y1;
 800a466:	1a82      	subs	r2, r0, r2
            mask_ret = lv_area_intersect(&col_mask, mask, &col_a);
 800a468:	9907      	ldr	r1, [sp, #28]
 800a46a:	a812      	add	r0, sp, #72	; 0x48
            col_a.y1         = h - y_tmp + chart->coords.y1;
 800a46c:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
            mask_ret = lv_area_intersect(&col_mask, mask, &col_a);
 800a470:	aa10      	add	r2, sp, #64	; 0x40
 800a472:	f006 f8e4 	bl	801063e <lv_area_intersect>
            if(mask_ret != false && ser->points[p_act] != LV_CHART_POINT_DEF) {
 800a476:	b178      	cbz	r0, 800a498 <lv_chart_design+0x56c>
 800a478:	6832      	ldr	r2, [r6, #0]
 800a47a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a47c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a480:	4aab      	ldr	r2, [pc, #684]	; (800a730 <lv_chart_design+0x804>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d008      	beq.n	800a498 <lv_chart_design+0x56c>
                lv_draw_rect(&chart->coords, &col_mask, &rects, lv_obj_get_opa_scale(chart));
 800a486:	4650      	mov	r0, sl
 800a488:	f005 fab1 	bl	800f9ee <lv_obj_get_opa_scale>
 800a48c:	aa15      	add	r2, sp, #84	; 0x54
 800a48e:	4603      	mov	r3, r0
 800a490:	a912      	add	r1, sp, #72	; 0x48
 800a492:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a494:	f007 f8e1 	bl	801165a <lv_draw_rect>
        LV_LL_READ_BACK(ext->series_ll, ser)
 800a498:	4631      	mov	r1, r6
 800a49a:	4628      	mov	r0, r5
 800a49c:	f005 fe16 	bl	80100cc <lv_ll_get_prev>
 800a4a0:	e77a      	b.n	800a398 <lv_chart_design+0x46c>
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 800a4a2:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800a4a6:	88a2      	ldrh	r2, [r4, #4]
 800a4a8:	07de      	lsls	r6, r3, #31
        style_point.body.main_color = ser->color;
 800a4aa:	88a3      	ldrh	r3, [r4, #4]
 800a4ac:	f3c2 1245 	ubfx	r2, r2, #5, #6
        style_point.body.grad_color = lv_color_mix(LV_COLOR_BLACK, ser->color, ext->series.dark);
 800a4b0:	f04f 0600 	mov.w	r6, #0
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 800a4b4:	bf54      	ite	pl
 800a4b6:	f9b4 8006 	ldrshpl.w	r8, [r4, #6]
 800a4ba:	f04f 0800 	movmi.w	r8, #0
        style_point.body.main_color = ser->color;
 800a4be:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800a4c2:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
 800a4c6:	7963      	ldrb	r3, [r4, #5]
 800a4c8:	f1c1 00ff 	rsb	r0, r1, #255	; 0xff
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800a4cc:	7921      	ldrb	r1, [r4, #4]
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800a4ce:	08db      	lsrs	r3, r3, #3
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800a4d0:	fb12 f200 	smulbb	r2, r2, r0
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800a4d4:	f001 011f 	and.w	r1, r1, #31
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800a4d8:	fb13 f300 	smulbb	r3, r3, r0
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800a4dc:	fb11 f100 	smulbb	r1, r1, r0
        style_point.body.grad_color = lv_color_mix(LV_COLOR_BLACK, ser->color, ext->series.dark);
 800a4e0:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800a4e4:	f3c2 2205 	ubfx	r2, r2, #8, #6
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800a4e8:	f3c3 2304 	ubfx	r3, r3, #8, #5
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800a4ec:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800a4f0:	f361 0004 	bfi	r0, r1, #0, #5
 800a4f4:	f88d 0058 	strb.w	r0, [sp, #88]	; 0x58
 800a4f8:	f8bd 1058 	ldrh.w	r1, [sp, #88]	; 0x58
 800a4fc:	f362 114a 	bfi	r1, r2, #5, #6
 800a500:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
 800a504:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800a508:	f363 01c7 	bfi	r1, r3, #3, #5
            cir_a.y1 = h - y_tmp + y_ofs;
 800a50c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a50e:	18fb      	adds	r3, r7, r3
        style_point.body.grad_color = lv_color_mix(LV_COLOR_BLACK, ser->color, ext->series.dark);
 800a510:	f88d 1059 	strb.w	r1, [sp, #89]	; 0x59
            cir_a.y1 = h - y_tmp + y_ofs;
 800a514:	930b      	str	r3, [sp, #44]	; 0x2c
        for(i = 0; i < ext->point_cnt; i++) {
 800a516:	f8b5 c012 	ldrh.w	ip, [r5, #18]
 800a51a:	b2b3      	uxth	r3, r6
 800a51c:	459c      	cmp	ip, r3
 800a51e:	d804      	bhi.n	800a52a <lv_chart_design+0x5fe>
    LV_LL_READ_BACK(ext->series_ll, ser)
 800a520:	4621      	mov	r1, r4
 800a522:	4628      	mov	r0, r5
 800a524:	f005 fdd2 	bl	80100cc <lv_ll_get_prev>
 800a528:	e5ab      	b.n	800a082 <lv_chart_design+0x156>
            cir_a.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 800a52a:	b2b1      	uxth	r1, r6
 800a52c:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
            cir_a.x2 = cir_a.x1 + style_point.body.radius;
 800a530:	f9bd 005a 	ldrsh.w	r0, [sp, #90]	; 0x5a
            cir_a.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 800a534:	fb01 f309 	mul.w	r3, r1, r9
            p_act = (start_point + i) % ext->point_cnt;
 800a538:	4441      	add	r1, r8
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
 800a53a:	f9b5 e00c 	ldrsh.w	lr, [r5, #12]
            cir_a.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 800a53e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a542:	445b      	add	r3, fp
 800a544:	b21b      	sxth	r3, r3
            cir_a.x2 = cir_a.x1 + style_point.body.radius;
 800a546:	181a      	adds	r2, r3, r0
            cir_a.x1 -= style_point.body.radius;
 800a548:	1a1b      	subs	r3, r3, r0
            cir_a.x2 = cir_a.x1 + style_point.body.radius;
 800a54a:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
            cir_a.x1 -= style_point.body.radius;
 800a54e:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
            p_act = (start_point + i) % ext->point_cnt;
 800a552:	fb91 f2fc 	sdiv	r2, r1, ip
 800a556:	fb0c 1112 	mls	r1, ip, r2, r1
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 800a55a:	f9b5 c00e 	ldrsh.w	ip, [r5, #14]
            cir_a.y1 = h - y_tmp + y_ofs;
 800a55e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
 800a560:	b20b      	sxth	r3, r1
 800a562:	6821      	ldr	r1, [r4, #0]
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 800a564:	ebac 0c0e 	sub.w	ip, ip, lr
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
 800a568:	9309      	str	r3, [sp, #36]	; 0x24
 800a56a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800a56e:	eba3 030e 	sub.w	r3, r3, lr
 800a572:	437b      	muls	r3, r7
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 800a574:	fb93 f3fc 	sdiv	r3, r3, ip
            cir_a.y1 = h - y_tmp + y_ofs;
 800a578:	1ad3      	subs	r3, r2, r3
            if(ser->points[p_act] != LV_CHART_POINT_DEF)
 800a57a:	4a6d      	ldr	r2, [pc, #436]	; (800a730 <lv_chart_design+0x804>)
            cir_a.y1 = h - y_tmp + y_ofs;
 800a57c:	b21b      	sxth	r3, r3
            cir_a.y2 = cir_a.y1 + style_point.body.radius;
 800a57e:	eb00 0c03 	add.w	ip, r0, r3
            cir_a.y1 -= style_point.body.radius;
 800a582:	1a1b      	subs	r3, r3, r0
 800a584:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            if(ser->points[p_act] != LV_CHART_POINT_DEF)
 800a588:	9b09      	ldr	r3, [sp, #36]	; 0x24
            cir_a.y2 = cir_a.y1 + style_point.body.radius;
 800a58a:	f8ad c04e 	strh.w	ip, [sp, #78]	; 0x4e
            if(ser->points[p_act] != LV_CHART_POINT_DEF)
 800a58e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800a592:	4293      	cmp	r3, r2
 800a594:	d008      	beq.n	800a5a8 <lv_chart_design+0x67c>
                lv_draw_rect(&cir_a, mask, &style_point, lv_obj_get_opa_scale(chart));
 800a596:	4650      	mov	r0, sl
 800a598:	f005 fa29 	bl	800f9ee <lv_obj_get_opa_scale>
 800a59c:	aa15      	add	r2, sp, #84	; 0x54
 800a59e:	4603      	mov	r3, r0
 800a5a0:	9907      	ldr	r1, [sp, #28]
 800a5a2:	a812      	add	r0, sp, #72	; 0x48
 800a5a4:	f007 f859 	bl	801165a <lv_draw_rect>
 800a5a8:	3601      	adds	r6, #1
 800a5aa:	e7b4      	b.n	800a516 <lv_chart_design+0x5ea>
    lv_coord_t h     = lv_obj_get_height(chart);
 800a5ac:	4650      	mov	r0, sl
 800a5ae:	f005 f9f2 	bl	800f996 <lv_obj_get_height>
    lv_coord_t y_ofs = chart->coords.y1;
 800a5b2:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
    lv_coord_t h     = lv_obj_get_height(chart);
 800a5b6:	4680      	mov	r8, r0
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
 800a5b8:	4650      	mov	r0, sl
    lv_coord_t y_ofs = chart->coords.y1;
 800a5ba:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_coord_t x_ofs = chart->coords.x1;
 800a5bc:	f9ba 9010 	ldrsh.w	r9, [sl, #16]
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
 800a5c0:	f005 fa15 	bl	800f9ee <lv_obj_get_opa_scale>
    lv_style_copy(&style, &lv_style_plain);
 800a5c4:	495b      	ldr	r1, [pc, #364]	; (800a734 <lv_chart_design+0x808>)
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
 800a5c6:	900c      	str	r0, [sp, #48]	; 0x30
    lv_style_copy(&style, &lv_style_plain);
 800a5c8:	a815      	add	r0, sp, #84	; 0x54
 800a5ca:	f005 fb7e 	bl	800fcca <lv_style_copy>
    style.line.opa   = ext->series.opa;
 800a5ce:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    LV_LL_READ_BACK(ext->series_ll, ser)
 800a5d2:	4628      	mov	r0, r5
    style.line.opa   = ext->series.opa;
 800a5d4:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
    style.line.width = ext->series.width;
 800a5d8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800a5da:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
    LV_LL_READ_BACK(ext->series_ll, ser)
 800a5de:	f005 fd62 	bl	80100a6 <lv_ll_get_tail>
 800a5e2:	4606      	mov	r6, r0
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	f43f ad64 	beq.w	800a0b2 <lv_chart_design+0x186>
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 800a5ea:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
        p1.y  = p2.y;
 800a5ee:	2700      	movs	r7, #0
        y_tmp = (int32_t)((int32_t)ser->points[0] - ext->ymin) * h;
 800a5f0:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 800a5f4:	07d8      	lsls	r0, r3, #31
 800a5f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a5f8:	bf54      	ite	pl
 800a5fa:	f9b6 3006 	ldrshpl.w	r3, [r6, #6]
 800a5fe:	2300      	movmi	r3, #0
 800a600:	eb08 0b02 	add.w	fp, r8, r2
        y_tmp = y_tmp / (ext->ymax - ext->ymin);
 800a604:	f9b5 200e 	ldrsh.w	r2, [r5, #14]
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 800a608:	930a      	str	r3, [sp, #40]	; 0x28
        style.line.color       = ser->color;
 800a60a:	88b3      	ldrh	r3, [r6, #4]
        y_tmp = y_tmp / (ext->ymax - ext->ymin);
 800a60c:	1a52      	subs	r2, r2, r1
        p1.x  = 0 + x_ofs;
 800a60e:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
 800a612:	fa0f fb8b 	sxth.w	fp, fp
        style.line.color       = ser->color;
 800a616:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
        y_tmp = (int32_t)((int32_t)ser->points[0] - ext->ymin) * h;
 800a61a:	6833      	ldr	r3, [r6, #0]
        p2.x  = 0 + x_ofs;
 800a61c:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
        y_tmp = (int32_t)((int32_t)ser->points[0] - ext->ymin) * h;
 800a620:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a624:	1a5b      	subs	r3, r3, r1
 800a626:	fb08 f303 	mul.w	r3, r8, r3
        y_tmp = y_tmp / (ext->ymax - ext->ymin);
 800a62a:	fb93 f3f2 	sdiv	r3, r3, r2
        p2.y  = h - y_tmp + y_ofs;
 800a62e:	ebab 0303 	sub.w	r3, fp, r3
 800a632:	b21b      	sxth	r3, r3
 800a634:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        p1.y  = p2.y;
 800a638:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        for(i = 0; i < ext->point_cnt; i++) {
 800a63c:	8a6b      	ldrh	r3, [r5, #18]
 800a63e:	b2ba      	uxth	r2, r7
 800a640:	4293      	cmp	r3, r2
 800a642:	d804      	bhi.n	800a64e <lv_chart_design+0x722>
    LV_LL_READ_BACK(ext->series_ll, ser)
 800a644:	4631      	mov	r1, r6
 800a646:	4628      	mov	r0, r5
 800a648:	f005 fd40 	bl	80100cc <lv_ll_get_prev>
 800a64c:	e7c9      	b.n	800a5e2 <lv_chart_design+0x6b6>
            p_act = (start_point + i) % ext->point_cnt;
 800a64e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
 800a650:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
            p_act = (start_point + i) % ext->point_cnt;
 800a654:	fa12 f287 	uxtah	r2, r2, r7
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 800a658:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
            p_act = (start_point + i) % ext->point_cnt;
 800a65c:	fb92 f4f3 	sdiv	r4, r2, r3
 800a660:	fb03 2414 	mls	r4, r3, r4, r2
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
 800a664:	6832      	ldr	r2, [r6, #0]
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 800a666:	1a09      	subs	r1, r1, r0
            p_act = (start_point + i) % ext->point_cnt;
 800a668:	b224      	sxth	r4, r4
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
 800a66a:	f932 3014 	ldrsh.w	r3, [r2, r4, lsl #1]
 800a66e:	1a1b      	subs	r3, r3, r0
 800a670:	fb08 f303 	mul.w	r3, r8, r3
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 800a674:	fb93 f3f1 	sdiv	r3, r3, r1
            p2.y  = h - y_tmp + y_ofs;
 800a678:	ebab 0303 	sub.w	r3, fp, r3
            if(p1.y == p2.y) {
 800a67c:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
            p2.y  = h - y_tmp + y_ofs;
 800a680:	b21b      	sxth	r3, r3
            if(p1.y == p2.y) {
 800a682:	4299      	cmp	r1, r3
            p2.y  = h - y_tmp + y_ofs;
 800a684:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                p2.x++;
 800a688:	bf02      	ittt	eq
 800a68a:	f8bd 3048 	ldrheq.w	r3, [sp, #72]	; 0x48
 800a68e:	3301      	addeq	r3, #1
 800a690:	f8ad 3048 	strheq.w	r3, [sp, #72]	; 0x48
            if(ser->points[p_act] != LV_CHART_POINT_DEF) {
 800a694:	f932 3014 	ldrsh.w	r3, [r2, r4, lsl #1]
 800a698:	4a25      	ldr	r2, [pc, #148]	; (800a730 <lv_chart_design+0x804>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d007      	beq.n	800a6ae <lv_chart_design+0x782>
                lv_draw_line(&p1, &p2, mask, &style, opa_scale);
 800a69e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6a0:	a912      	add	r1, sp, #72	; 0x48
 800a6a2:	9a07      	ldr	r2, [sp, #28]
 800a6a4:	a810      	add	r0, sp, #64	; 0x40
 800a6a6:	9300      	str	r3, [sp, #0]
 800a6a8:	ab15      	add	r3, sp, #84	; 0x54
 800a6aa:	f006 f999 	bl	80109e0 <lv_draw_line>
            p2.x = ((w * p_act) / (ext->point_cnt - 1)) + x_ofs;
 800a6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6b0:	3701      	adds	r7, #1
 800a6b2:	435c      	muls	r4, r3
 800a6b4:	8a6b      	ldrh	r3, [r5, #18]
 800a6b6:	3b01      	subs	r3, #1
 800a6b8:	fb94 f4f3 	sdiv	r4, r4, r3
 800a6bc:	444c      	add	r4, r9
            p1.y = p2.y;
 800a6be:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
            p2.x = ((w * p_act) / (ext->point_cnt - 1)) + x_ofs;
 800a6c2:	b224      	sxth	r4, r4
            p1.y = p2.y;
 800a6c4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            p2.x = ((w * p_act) / (ext->point_cnt - 1)) + x_ofs;
 800a6c8:	f8ad 4048 	strh.w	r4, [sp, #72]	; 0x48
            p1.x = p2.x;
 800a6cc:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40
            p1.y = p2.y;
 800a6d0:	e7b4      	b.n	800a63c <lv_chart_design+0x710>
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 800a6d2:	f896 302a 	ldrb.w	r3, [r6, #42]	; 0x2a
        for(i = 1; i < ext->point_cnt; i++) {
 800a6d6:	f04f 0801 	mov.w	r8, #1
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 800a6da:	07da      	lsls	r2, r3, #31
        style.body.main_color  = ser->color;
 800a6dc:	88bb      	ldrh	r3, [r7, #4]
 800a6de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 800a6e0:	bf54      	ite	pl
 800a6e2:	f9b7 9006 	ldrshpl.w	r9, [r7, #6]
 800a6e6:	f04f 0900 	movmi.w	r9, #0
        style.body.main_color  = ser->color;
 800a6ea:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
        style.body.opa         = ext->series.opa;
 800a6ee:	445a      	add	r2, fp
 800a6f0:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
        p_prev = start_point;
 800a6f4:	4648      	mov	r0, r9
 800a6f6:	b212      	sxth	r2, r2
        style.body.opa         = ext->series.opa;
 800a6f8:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
        y_tmp  = (int32_t)((int32_t)ser->points[p_prev] - ext->ymin) * h;
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 800a702:	f933 3019 	ldrsh.w	r3, [r3, r9, lsl #1]
 800a706:	920b      	str	r2, [sp, #44]	; 0x2c
 800a708:	1a5b      	subs	r3, r3, r1
        y_tmp  = y_tmp / (ext->ymax - ext->ymin);
 800a70a:	f9b6 200e 	ldrsh.w	r2, [r6, #14]
        y_tmp  = (int32_t)((int32_t)ser->points[p_prev] - ext->ymin) * h;
 800a70e:	fb0b f303 	mul.w	r3, fp, r3
        y_tmp  = y_tmp / (ext->ymax - ext->ymin);
 800a712:	1a52      	subs	r2, r2, r1
 800a714:	fb93 f3f2 	sdiv	r3, r3, r2
        p2.y   = h - y_tmp + y_ofs;
 800a718:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a71a:	1ad3      	subs	r3, r2, r3
        p2.x = 0 + x_ofs;
 800a71c:	9a08      	ldr	r2, [sp, #32]
        p2.y   = h - y_tmp + y_ofs;
 800a71e:	b21b      	sxth	r3, r3
        for(i = 1; i < ext->point_cnt; i++) {
 800a720:	8a71      	ldrh	r1, [r6, #18]
 800a722:	4588      	cmp	r8, r1
 800a724:	d308      	bcc.n	800a738 <lv_chart_design+0x80c>
    LV_LL_READ_BACK(ext->series_ll, ser)
 800a726:	4639      	mov	r1, r7
 800a728:	4630      	mov	r0, r6
 800a72a:	f005 fccf 	bl	80100cc <lv_ll_get_prev>
 800a72e:	e4e1      	b.n	800a0f4 <lv_chart_design+0x1c8>
 800a730:	ffff83e8 	.word	0xffff83e8
 800a734:	20020524 	.word	0x20020524
            p_act = (start_point + i) % ext->point_cnt;
 800a738:	eb09 0508 	add.w	r5, r9, r8
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
 800a73c:	f9b6 e00c 	ldrsh.w	lr, [r6, #12]
            p_act = (start_point + i) % ext->point_cnt;
 800a740:	fb95 f4f1 	sdiv	r4, r5, r1
 800a744:	fb01 5414 	mls	r4, r1, r4, r5
            p2.x  = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 800a748:	3901      	subs	r1, #1
            p_act = (start_point + i) % ext->point_cnt;
 800a74a:	b224      	sxth	r4, r4
 800a74c:	940a      	str	r4, [sp, #40]	; 0x28
            p2.x  = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 800a74e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
 800a750:	9d0a      	ldr	r5, [sp, #40]	; 0x28
            p2.x  = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 800a752:	fb08 f404 	mul.w	r4, r8, r4
 800a756:	fb94 f4f1 	sdiv	r4, r4, r1
 800a75a:	9908      	ldr	r1, [sp, #32]
 800a75c:	440c      	add	r4, r1
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
 800a75e:	6839      	ldr	r1, [r7, #0]
 800a760:	f931 c015 	ldrsh.w	ip, [r1, r5, lsl #1]
            p2.x  = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 800a764:	b224      	sxth	r4, r4
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 800a766:	f9b6 100e 	ldrsh.w	r1, [r6, #14]
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
 800a76a:	ebac 050e 	sub.w	r5, ip, lr
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 800a76e:	eba1 010e 	sub.w	r1, r1, lr
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
 800a772:	fb0b f505 	mul.w	r5, fp, r5
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
 800a776:	fb95 f5f1 	sdiv	r5, r5, r1
            p2.y  = h - y_tmp + y_ofs;
 800a77a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a77c:	1b4d      	subs	r5, r1, r5
            if(ser->points[p_prev] != LV_CHART_POINT_DEF && ser->points[p_act] != LV_CHART_POINT_DEF) {
 800a77e:	6839      	ldr	r1, [r7, #0]
 800a780:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
            p2.y  = h - y_tmp + y_ofs;
 800a784:	b22d      	sxth	r5, r5
            if(ser->points[p_prev] != LV_CHART_POINT_DEF && ser->points[p_act] != LV_CHART_POINT_DEF) {
 800a786:	48ad      	ldr	r0, [pc, #692]	; (800aa3c <lv_chart_design+0xb10>)
 800a788:	4281      	cmp	r1, r0
 800a78a:	d021      	beq.n	800a7d0 <lv_chart_design+0x8a4>
 800a78c:	4584      	cmp	ip, r0
 800a78e:	d01f      	beq.n	800a7d0 <lv_chart_design+0x8a4>
                triangle_points[0]   = p1;
 800a790:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                lv_draw_triangle(triangle_points, mask, &style, opa_scale);
 800a794:	a812      	add	r0, sp, #72	; 0x48
                triangle_points[2].y = chart->coords.y2;
 800a796:	f8ba 3016 	ldrh.w	r3, [sl, #22]
                triangle_points[0]   = p1;
 800a79a:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
                triangle_points[2].x = p1.x;
 800a79e:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
                lv_draw_triangle(triangle_points, mask, &style, opa_scale);
 800a7a2:	aa15      	add	r2, sp, #84	; 0x54
                triangle_points[2].y = chart->coords.y2;
 800a7a4:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
                lv_draw_triangle(triangle_points, mask, &style, opa_scale);
 800a7a8:	9907      	ldr	r1, [sp, #28]
 800a7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
                triangle_points[1]   = p2;
 800a7ac:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
 800a7b0:	f8ad 504e 	strh.w	r5, [sp, #78]	; 0x4e
                lv_draw_triangle(triangle_points, mask, &style, opa_scale);
 800a7b4:	f009 fbed 	bl	8013f92 <lv_draw_triangle>
                triangle_points[0].y = chart->coords.y2;
 800a7b8:	f8ba 3016 	ldrh.w	r3, [sl, #22]
                lv_draw_triangle(triangle_points, mask, &style, opa_scale);
 800a7bc:	aa15      	add	r2, sp, #84	; 0x54
 800a7be:	9907      	ldr	r1, [sp, #28]
 800a7c0:	a812      	add	r0, sp, #72	; 0x48
                triangle_points[0].y = chart->coords.y2;
 800a7c2:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                lv_draw_triangle(triangle_points, mask, &style, opa_scale);
 800a7c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
                triangle_points[2].x = p2.x;
 800a7c8:	f8ad 4050 	strh.w	r4, [sp, #80]	; 0x50
                lv_draw_triangle(triangle_points, mask, &style, opa_scale);
 800a7cc:	f009 fbe1 	bl	8013f92 <lv_draw_triangle>
        for(i = 1; i < ext->point_cnt; i++) {
 800a7d0:	f108 0801 	add.w	r8, r8, #1
            p2.y  = h - y_tmp + y_ofs;
 800a7d4:	462b      	mov	r3, r5
            p2.x  = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 800a7d6:	4622      	mov	r2, r4
            p_prev = p_act;
 800a7d8:	980a      	ldr	r0, [sp, #40]	; 0x28
        for(i = 1; i < ext->point_cnt; i++) {
 800a7da:	fa1f f888 	uxth.w	r8, r8
 800a7de:	e79f      	b.n	800a720 <lv_chart_design+0x7f4>
                if(ext->y_axis.list_of_values[j] == '\n') num_of_labels++;
 800a7e0:	2d0a      	cmp	r5, #10
 800a7e2:	bf08      	it	eq
 800a7e4:	4632      	moveq	r2, r6
 800a7e6:	3001      	adds	r0, #1
            for(j = 0; ext->y_axis.list_of_values[j] != '\0'; j++) {
 800a7e8:	b2c5      	uxtb	r5, r0
 800a7ea:	1c56      	adds	r6, r2, #1
 800a7ec:	5d4d      	ldrb	r5, [r1, r5]
 800a7ee:	b2f6      	uxtb	r6, r6
 800a7f0:	2d00      	cmp	r5, #0
 800a7f2:	d1f5      	bne.n	800a7e0 <lv_chart_design+0x8b4>
 800a7f4:	e4b8      	b.n	800a168 <lv_chart_design+0x23c>
        num_of_labels = 0;
 800a7f6:	2200      	movs	r2, #0
        if(ext->y_axis.list_of_values != NULL) {
 800a7f8:	4610      	mov	r0, r2
 800a7fa:	e7f5      	b.n	800a7e8 <lv_chart_design+0x8bc>
            p1.x = x_ofs - 1;
 800a7fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7fe:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
            if((num_of_labels != 0) && (i == 0 || i % ext->y_axis.num_tick_marks == 0))
 800a802:	b35e      	cbz	r6, 800a85c <lv_chart_design+0x930>
 800a804:	f1b8 0f00 	cmp.w	r8, #0
 800a808:	d007      	beq.n	800a81a <lv_chart_design+0x8ee>
 800a80a:	7f62      	ldrb	r2, [r4, #29]
 800a80c:	fbb8 f3f2 	udiv	r3, r8, r2
 800a810:	fb02 8313 	mls	r3, r2, r3, r8
 800a814:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a818:	d120      	bne.n	800a85c <lv_chart_design+0x930>
                p2.x = p1.x - major_tick_len; /* major tick */
 800a81a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a81c:	eba3 0309 	sub.w	r3, r3, r9
 800a820:	b21b      	sxth	r3, r3
                y_ofs + (int32_t)((int32_t)(h - style->line.width) * i) / num_scale_ticks;
 800a822:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            if(i != num_scale_ticks)
 800a824:	45c3      	cmp	fp, r8
 800a826:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
                y_ofs + (int32_t)((int32_t)(h - style->line.width) * i) / num_scale_ticks;
 800a82a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800a82e:	eba2 0303 	sub.w	r3, r2, r3
 800a832:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a834:	fb08 f303 	mul.w	r3, r8, r3
 800a838:	fb93 f3fb 	sdiv	r3, r3, fp
 800a83c:	4413      	add	r3, r2
 800a83e:	b21b      	sxth	r3, r3
            p2.y = p1.y =
 800a840:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 800a844:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            if(i != num_scale_ticks)
 800a848:	d00b      	beq.n	800a862 <lv_chart_design+0x936>
                lv_draw_line(&p1, &p2, mask, style, opa_scale);
 800a84a:	9b08      	ldr	r3, [sp, #32]
 800a84c:	a90f      	add	r1, sp, #60	; 0x3c
 800a84e:	9a07      	ldr	r2, [sp, #28]
 800a850:	a80e      	add	r0, sp, #56	; 0x38
 800a852:	9300      	str	r3, [sp, #0]
 800a854:	463b      	mov	r3, r7
 800a856:	f006 f8c3 	bl	80109e0 <lv_draw_line>
 800a85a:	e005      	b.n	800a868 <lv_chart_design+0x93c>
                p2.x = p1.x - minor_tick_len; /* minor tick */
 800a85c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 800a860:	e7df      	b.n	800a822 <lv_chart_design+0x8f6>
            else if((ext->y_axis.options & LV_CHART_AXIS_DRAW_LAST_TICK) != 0)
 800a862:	7f23      	ldrb	r3, [r4, #28]
 800a864:	07db      	lsls	r3, r3, #31
 800a866:	d4f0      	bmi.n	800a84a <lv_chart_design+0x91e>
            if(num_of_labels != 0) {
 800a868:	2e00      	cmp	r6, #0
 800a86a:	d060      	beq.n	800a92e <lv_chart_design+0xa02>
                if(i == 0 || i % ext->y_axis.num_tick_marks == 0) {
 800a86c:	f1b8 0f00 	cmp.w	r8, #0
 800a870:	d007      	beq.n	800a882 <lv_chart_design+0x956>
 800a872:	7f62      	ldrb	r2, [r4, #29]
 800a874:	fbb8 f3f2 	udiv	r3, r8, r2
 800a878:	fb02 8813 	mls	r8, r2, r3, r8
 800a87c:	f018 0fff 	tst.w	r8, #255	; 0xff
 800a880:	d155      	bne.n	800a92e <lv_chart_design+0xa02>
                    while(ext->y_axis.list_of_values[list_index] != '\n' &&
 800a882:	69a0      	ldr	r0, [r4, #24]
 800a884:	2300      	movs	r3, #0
 800a886:	e00a      	b.n	800a89e <lv_chart_design+0x972>
                        if(j < LV_CHART_AXIS_TICK_LABEL_MAX_LEN)
 800a888:	3501      	adds	r5, #1
 800a88a:	2b13      	cmp	r3, #19
 800a88c:	b2ed      	uxtb	r5, r5
 800a88e:	d806      	bhi.n	800a89e <lv_chart_design+0x972>
                            buf[j++] = ext->y_axis.list_of_values[list_index++];
 800a890:	3301      	adds	r3, #1
 800a892:	f10d 0c90 	add.w	ip, sp, #144	; 0x90
 800a896:	b2db      	uxtb	r3, r3
 800a898:	4462      	add	r2, ip
 800a89a:	f802 1c3c 	strb.w	r1, [r2, #-60]
                    while(ext->y_axis.list_of_values[list_index] != '\n' &&
 800a89e:	5d41      	ldrb	r1, [r0, r5]
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	290a      	cmp	r1, #10
 800a8a4:	f000 80c3 	beq.w	800aa2e <lv_chart_design+0xb02>
 800a8a8:	2900      	cmp	r1, #0
 800a8aa:	d1ed      	bne.n	800a888 <lv_chart_design+0x95c>
                    buf[j] = '\0';
 800a8ac:	aa24      	add	r2, sp, #144	; 0x90
 800a8ae:	f04f 0800 	mov.w	r8, #0
                    lv_txt_get_size(&size, buf, style->text.font, style->text.letter_space, style->text.line_space,
 800a8b2:	f04f 0c04 	mov.w	ip, #4
 800a8b6:	a915      	add	r1, sp, #84	; 0x54
                    buf[j] = '\0';
 800a8b8:	4413      	add	r3, r2
                    lv_txt_get_size(&size, buf, style->text.font, style->text.letter_space, style->text.line_space,
 800a8ba:	f647 4218 	movw	r2, #31768	; 0x7c18
 800a8be:	a810      	add	r0, sp, #64	; 0x40
                    buf[j] = '\0';
 800a8c0:	f803 8c3c 	strb.w	r8, [r3, #-60]
                    lv_txt_get_size(&size, buf, style->text.font, style->text.letter_space, style->text.line_space,
 800a8c4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800a8c8:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 800a8cc:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800a8d0:	9200      	str	r2, [sp, #0]
 800a8d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8d4:	f005 fdfd 	bl	80104d2 <lv_txt_get_size>
                    lv_area_t a = {(p2.x - size.x - LV_CHART_AXIS_TO_LABEL_DISTANCE), (p2.y - size.y / 2),
 800a8d8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800a8dc:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
 800a8e0:	3b04      	subs	r3, #4
                    lv_draw_label(&a, mask, style, opa_scale, buf, LV_TXT_FLAG_CENTER, NULL, -1, -1, NULL);
 800a8e2:	f8cd 8014 	str.w	r8, [sp, #20]
 800a8e6:	f8cd 8008 	str.w	r8, [sp, #8]
 800a8ea:	b219      	sxth	r1, r3
                    lv_area_t a = {(p2.x - size.x - LV_CHART_AXIS_TO_LABEL_DISTANCE), (p2.y - size.y / 2),
 800a8ec:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800a8f0:	1acb      	subs	r3, r1, r3
 800a8f2:	f8ad 104c 	strh.w	r1, [sp, #76]	; 0x4c
                    lv_draw_label(&a, mask, style, opa_scale, buf, LV_TXT_FLAG_CENTER, NULL, -1, -1, NULL);
 800a8f6:	9907      	ldr	r1, [sp, #28]
                    lv_area_t a = {(p2.x - size.x - LV_CHART_AXIS_TO_LABEL_DISTANCE), (p2.y - size.y / 2),
 800a8f8:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 800a8fc:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 800a900:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800a904:	eba2 0063 	sub.w	r0, r2, r3, asr #1
                                   (p2.x - LV_CHART_AXIS_TO_LABEL_DISTANCE), (p2.y + size.y / 2)};
 800a908:	eb02 0363 	add.w	r3, r2, r3, asr #1
                    lv_draw_label(&a, mask, style, opa_scale, buf, LV_TXT_FLAG_CENTER, NULL, -1, -1, NULL);
 800a90c:	463a      	mov	r2, r7
                    lv_area_t a = {(p2.x - size.x - LV_CHART_AXIS_TO_LABEL_DISTANCE), (p2.y - size.y / 2),
 800a90e:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
                    lv_draw_label(&a, mask, style, opa_scale, buf, LV_TXT_FLAG_CENTER, NULL, -1, -1, NULL);
 800a912:	a812      	add	r0, sp, #72	; 0x48
                    lv_area_t a = {(p2.x - size.x - LV_CHART_AXIS_TO_LABEL_DISTANCE), (p2.y - size.y / 2),
 800a914:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
                    lv_draw_label(&a, mask, style, opa_scale, buf, LV_TXT_FLAG_CENTER, NULL, -1, -1, NULL);
 800a918:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a91c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800a920:	2304      	movs	r3, #4
 800a922:	9301      	str	r3, [sp, #4]
 800a924:	ab15      	add	r3, sp, #84	; 0x54
 800a926:	9300      	str	r3, [sp, #0]
 800a928:	9b08      	ldr	r3, [sp, #32]
 800a92a:	f7f9 ff4f 	bl	80047cc <lv_draw_label>
 800a92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a930:	3301      	adds	r3, #1
 800a932:	9309      	str	r3, [sp, #36]	; 0x24
 800a934:	e432      	b.n	800a19c <lv_chart_design+0x270>
                if(ext->x_axis.list_of_values[j] == '\n') num_of_labels++;
 800a936:	2d0a      	cmp	r5, #10
 800a938:	bf08      	it	eq
 800a93a:	4632      	moveq	r2, r6
 800a93c:	3001      	adds	r0, #1
            for(j = 0; ext->x_axis.list_of_values[j] != '\0'; j++) {
 800a93e:	b2c5      	uxtb	r5, r0
 800a940:	1c56      	adds	r6, r2, #1
 800a942:	5d4d      	ldrb	r5, [r1, r5]
 800a944:	b2f6      	uxtb	r6, r6
 800a946:	2d00      	cmp	r5, #0
 800a948:	d1f5      	bne.n	800a936 <lv_chart_design+0xa0a>
 800a94a:	e468      	b.n	800a21e <lv_chart_design+0x2f2>
        num_of_labels = 0;
 800a94c:	2200      	movs	r2, #0
        if(ext->x_axis.list_of_values != NULL) {
 800a94e:	4610      	mov	r0, r2
 800a950:	e7f5      	b.n	800a93e <lv_chart_design+0xa12>
                p2.y = p1.y + minor_tick_len; /* minor tick */
 800a952:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800a956:	e499      	b.n	800a28c <lv_chart_design+0x360>
            else if((ext->x_axis.options & LV_CHART_AXIS_DRAW_LAST_TICK) != 0)
 800a958:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800a95c:	07d8      	lsls	r0, r3, #31
 800a95e:	f53f acaa 	bmi.w	800a2b6 <lv_chart_design+0x38a>

            /* draw values if available */
            if(num_of_labels != 0) {
 800a962:	2e00      	cmp	r6, #0
 800a964:	d05f      	beq.n	800aa26 <lv_chart_design+0xafa>
                /* add text only to major tick */
                if(i == 0 || i % ext->x_axis.num_tick_marks == 0) {
 800a966:	f1b9 0f00 	cmp.w	r9, #0
 800a96a:	d008      	beq.n	800a97e <lv_chart_design+0xa52>
 800a96c:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 800a970:	fbb9 f3f2 	udiv	r3, r9, r2
 800a974:	fb02 9913 	mls	r9, r2, r3, r9
 800a978:	f019 0fff 	tst.w	r9, #255	; 0xff
 800a97c:	d153      	bne.n	800aa26 <lv_chart_design+0xafa>
                    /* search for tick string */
                    j = 0;
                    while(ext->x_axis.list_of_values[list_index] != '\n' &&
 800a97e:	6a20      	ldr	r0, [r4, #32]
 800a980:	2300      	movs	r3, #0
 800a982:	e00a      	b.n	800a99a <lv_chart_design+0xa6e>
                          ext->x_axis.list_of_values[list_index] != '\0') {
                        /* do not overflow the buffer, but move to the end of the current label */
                        if(j < LV_CHART_AXIS_TICK_LABEL_MAX_LEN)
 800a984:	3501      	adds	r5, #1
 800a986:	2b13      	cmp	r3, #19
 800a988:	b2ed      	uxtb	r5, r5
 800a98a:	d806      	bhi.n	800a99a <lv_chart_design+0xa6e>
                            buf[j++] = ext->x_axis.list_of_values[list_index++];
 800a98c:	3301      	adds	r3, #1
 800a98e:	f10d 0c90 	add.w	ip, sp, #144	; 0x90
 800a992:	b2db      	uxtb	r3, r3
 800a994:	4462      	add	r2, ip
 800a996:	f802 1c3c 	strb.w	r1, [r2, #-60]
                    while(ext->x_axis.list_of_values[list_index] != '\n' &&
 800a99a:	5d41      	ldrb	r1, [r0, r5]
 800a99c:	461a      	mov	r2, r3
 800a99e:	290a      	cmp	r1, #10
 800a9a0:	d048      	beq.n	800aa34 <lv_chart_design+0xb08>
 800a9a2:	2900      	cmp	r1, #0
 800a9a4:	d1ee      	bne.n	800a984 <lv_chart_design+0xa58>

                    /* this was a string, but not end of the list, so jump to the next string */
                    if(ext->x_axis.list_of_values[list_index] == '\n') list_index++;

                    /* terminate the string */
                    buf[j] = '\0';
 800a9a6:	aa24      	add	r2, sp, #144	; 0x90
 800a9a8:	f04f 0900 	mov.w	r9, #0

                    /* reserve appropriate area */
                    lv_point_t size;
                    lv_txt_get_size(&size, buf, style->text.font, style->text.letter_space, style->text.line_space,
 800a9ac:	2104      	movs	r1, #4
 800a9ae:	a810      	add	r0, sp, #64	; 0x40
                    buf[j] = '\0';
 800a9b0:	4413      	add	r3, r2
                    lv_txt_get_size(&size, buf, style->text.font, style->text.letter_space, style->text.line_space,
 800a9b2:	f647 4218 	movw	r2, #31768	; 0x7c18
                    buf[j] = '\0';
 800a9b6:	f803 9c3c 	strb.w	r9, [r3, #-60]
                    lv_txt_get_size(&size, buf, style->text.font, style->text.letter_space, style->text.line_space,
 800a9ba:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800a9be:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a9c2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800a9c6:	a915      	add	r1, sp, #84	; 0x54
 800a9c8:	9200      	str	r2, [sp, #0]
 800a9ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9cc:	f005 fd81 	bl	80104d2 <lv_txt_get_size>
                                    LV_COORD_MAX, LV_TXT_FLAG_CENTER);

                    /* set the area at some distance of the major tick len under of the tick */
                    lv_area_t a = {(p2.x - size.x / 2), (p2.y + LV_CHART_AXIS_TO_LABEL_DISTANCE), (p2.x + size.x / 2),
 800a9d0:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 800a9d4:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800a9d8:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
                                   (p2.y + size.y + LV_CHART_AXIS_TO_LABEL_DISTANCE)};
                    lv_draw_label(&a, mask, style, opa_scale, buf, LV_TXT_FLAG_CENTER, NULL, -1, -1, NULL);
 800a9dc:	f8cd 9014 	str.w	r9, [sp, #20]
 800a9e0:	f8cd 9008 	str.w	r9, [sp, #8]
                    lv_area_t a = {(p2.x - size.x / 2), (p2.y + LV_CHART_AXIS_TO_LABEL_DISTANCE), (p2.x + size.x / 2),
 800a9e4:	eba1 0362 	sub.w	r3, r1, r2, asr #1
 800a9e8:	eb01 0262 	add.w	r2, r1, r2, asr #1
                    lv_draw_label(&a, mask, style, opa_scale, buf, LV_TXT_FLAG_CENTER, NULL, -1, -1, NULL);
 800a9ec:	9907      	ldr	r1, [sp, #28]
                    lv_area_t a = {(p2.x - size.x / 2), (p2.y + LV_CHART_AXIS_TO_LABEL_DISTANCE), (p2.x + size.x / 2),
 800a9ee:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 800a9f2:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
 800a9f6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
                                   (p2.y + size.y + LV_CHART_AXIS_TO_LABEL_DISTANCE)};
 800a9fa:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
                    lv_area_t a = {(p2.x - size.x / 2), (p2.y + LV_CHART_AXIS_TO_LABEL_DISTANCE), (p2.x + size.x / 2),
 800a9fe:	1d18      	adds	r0, r3, #4
                                   (p2.y + size.y + LV_CHART_AXIS_TO_LABEL_DISTANCE)};
 800aa00:	4413      	add	r3, r2
                    lv_draw_label(&a, mask, style, opa_scale, buf, LV_TXT_FLAG_CENTER, NULL, -1, -1, NULL);
 800aa02:	463a      	mov	r2, r7
                    lv_area_t a = {(p2.x - size.x / 2), (p2.y + LV_CHART_AXIS_TO_LABEL_DISTANCE), (p2.x + size.x / 2),
 800aa04:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
                    lv_draw_label(&a, mask, style, opa_scale, buf, LV_TXT_FLAG_CENTER, NULL, -1, -1, NULL);
 800aa08:	a812      	add	r0, sp, #72	; 0x48
                                   (p2.y + size.y + LV_CHART_AXIS_TO_LABEL_DISTANCE)};
 800aa0a:	3304      	adds	r3, #4
                    lv_area_t a = {(p2.x - size.x / 2), (p2.y + LV_CHART_AXIS_TO_LABEL_DISTANCE), (p2.x + size.x / 2),
 800aa0c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
                    lv_draw_label(&a, mask, style, opa_scale, buf, LV_TXT_FLAG_CENTER, NULL, -1, -1, NULL);
 800aa10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa14:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800aa18:	2304      	movs	r3, #4
 800aa1a:	9301      	str	r3, [sp, #4]
 800aa1c:	ab15      	add	r3, sp, #84	; 0x54
 800aa1e:	9300      	str	r3, [sp, #0]
 800aa20:	9b08      	ldr	r3, [sp, #32]
 800aa22:	f7f9 fed3 	bl	80047cc <lv_draw_label>
 800aa26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa28:	3301      	adds	r3, #1
 800aa2a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa2c:	e412      	b.n	800a254 <lv_chart_design+0x328>
                    if(ext->y_axis.list_of_values[list_index] == '\n') list_index++;
 800aa2e:	3501      	adds	r5, #1
 800aa30:	b2ed      	uxtb	r5, r5
 800aa32:	e73b      	b.n	800a8ac <lv_chart_design+0x980>
                    if(ext->x_axis.list_of_values[list_index] == '\n') list_index++;
 800aa34:	3501      	adds	r5, #1
 800aa36:	b2ed      	uxtb	r5, r5
 800aa38:	e7b5      	b.n	800a9a6 <lv_chart_design+0xa7a>
 800aa3a:	bf00      	nop
 800aa3c:	ffff83e8 	.word	0xffff83e8

0800aa40 <lv_chart_create>:
{
 800aa40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa44:	4689      	mov	r9, r1
    lv_obj_t * new_chart = lv_obj_create(par, copy);
 800aa46:	f7f7 ffe9 	bl	8002a1c <lv_obj_create>
    lv_mem_assert(new_chart);
 800aa4a:	4606      	mov	r6, r0
 800aa4c:	b930      	cbnz	r0, 800aa5c <lv_chart_create+0x1c>
 800aa4e:	4b48      	ldr	r3, [pc, #288]	; (800ab70 <lv_chart_create+0x130>)
 800aa50:	224b      	movs	r2, #75	; 0x4b
 800aa52:	4948      	ldr	r1, [pc, #288]	; (800ab74 <lv_chart_create+0x134>)
 800aa54:	2003      	movs	r0, #3
 800aa56:	f7f8 fddd 	bl	8003614 <lv_log_add>
 800aa5a:	e7fe      	b.n	800aa5a <lv_chart_create+0x1a>
    lv_chart_ext_t * ext = lv_obj_allocate_ext_attr(new_chart, sizeof(lv_chart_ext_t));
 800aa5c:	2134      	movs	r1, #52	; 0x34
 800aa5e:	f004 fbc0 	bl	800f1e2 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 800aa62:	4604      	mov	r4, r0
 800aa64:	b930      	cbnz	r0, 800aa74 <lv_chart_create+0x34>
 800aa66:	4b42      	ldr	r3, [pc, #264]	; (800ab70 <lv_chart_create+0x130>)
 800aa68:	2250      	movs	r2, #80	; 0x50
 800aa6a:	4942      	ldr	r1, [pc, #264]	; (800ab74 <lv_chart_create+0x134>)
 800aa6c:	2003      	movs	r0, #3
 800aa6e:	f7f8 fdd1 	bl	8003614 <lv_log_add>
 800aa72:	e7fe      	b.n	800aa72 <lv_chart_create+0x32>
    lv_ll_init(&ext->series_ll, sizeof(lv_chart_series_t));
 800aa74:	2108      	movs	r1, #8
    ext->margin                = 0;
 800aa76:	2500      	movs	r5, #0
    lv_ll_init(&ext->series_ll, sizeof(lv_chart_series_t));
 800aa78:	f005 facc 	bl	8010014 <lv_ll_init>
    ext->hdiv_cnt              = LV_CHART_HDIV_DEF;
 800aa7c:	f44f 02c8 	mov.w	r2, #6553600	; 0x640000
 800aa80:	4b3d      	ldr	r3, [pc, #244]	; (800ab78 <lv_chart_create+0x138>)
    memset(&ext->x_axis, 0, sizeof(ext->x_axis));
 800aa82:	f104 0820 	add.w	r8, r4, #32
    memset(&ext->y_axis, 0, sizeof(ext->y_axis));
 800aa86:	f104 0718 	add.w	r7, r4, #24
    memset(&ext->x_axis, 0, sizeof(ext->x_axis));
 800aa8a:	4629      	mov	r1, r5
    ext->margin                = 0;
 800aa8c:	8525      	strh	r5, [r4, #40]	; 0x28
    memset(&ext->x_axis, 0, sizeof(ext->x_axis));
 800aa8e:	4640      	mov	r0, r8
    ext->hdiv_cnt              = LV_CHART_HDIV_DEF;
 800aa90:	e9c4 2303 	strd	r2, r3, [r4, #12]
    ext->type                  = LV_CHART_TYPE_LINE;
 800aa94:	2301      	movs	r3, #1
    memset(&ext->x_axis, 0, sizeof(ext->x_axis));
 800aa96:	2208      	movs	r2, #8
    ext->type                  = LV_CHART_TYPE_LINE;
 800aa98:	7523      	strb	r3, [r4, #20]
    ext->update_mode           = LV_CHART_UPDATE_MODE_SHIFT;
 800aa9a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800aa9e:	f36f 0300 	bfc	r3, #0, #1
 800aaa2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    ext->series.width          = 2;
 800aaa6:	4b35      	ldr	r3, [pc, #212]	; (800ab7c <lv_chart_create+0x13c>)
 800aaa8:	62e3      	str	r3, [r4, #44]	; 0x2c
    ext->series.dark           = LV_OPA_50;
 800aaaa:	237f      	movs	r3, #127	; 0x7f
 800aaac:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    memset(&ext->x_axis, 0, sizeof(ext->x_axis));
 800aab0:	f00b fe88 	bl	80167c4 <memset>
    memset(&ext->y_axis, 0, sizeof(ext->y_axis));
 800aab4:	4629      	mov	r1, r5
 800aab6:	2208      	movs	r2, #8
 800aab8:	4638      	mov	r0, r7
 800aaba:	f00b fe83 	bl	80167c4 <memset>
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_chart);
 800aabe:	4d30      	ldr	r5, [pc, #192]	; (800ab80 <lv_chart_create+0x140>)
    ext->x_axis.major_tick_len = LV_CHART_TICK_LENGTH_AUTO;
 800aac0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aac4:	84e3      	strh	r3, [r4, #38]	; 0x26
    ext->y_axis.major_tick_len = LV_CHART_TICK_LENGTH_AUTO;
 800aac6:	83e3      	strh	r3, [r4, #30]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_chart);
 800aac8:	682b      	ldr	r3, [r5, #0]
 800aaca:	b91b      	cbnz	r3, 800aad4 <lv_chart_create+0x94>
 800aacc:	4630      	mov	r0, r6
 800aace:	f004 fff5 	bl	800fabc <lv_obj_get_design_cb>
 800aad2:	6028      	str	r0, [r5, #0]
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_chart);
 800aad4:	4d2b      	ldr	r5, [pc, #172]	; (800ab84 <lv_chart_create+0x144>)
 800aad6:	682b      	ldr	r3, [r5, #0]
 800aad8:	b91b      	cbnz	r3, 800aae2 <lv_chart_create+0xa2>
 800aada:	4630      	mov	r0, r6
 800aadc:	f004 ffec 	bl	800fab8 <lv_obj_get_signal_cb>
 800aae0:	6028      	str	r0, [r5, #0]
    lv_obj_set_signal_cb(new_chart, lv_chart_signal);
 800aae2:	4929      	ldr	r1, [pc, #164]	; (800ab88 <lv_chart_create+0x148>)
 800aae4:	4630      	mov	r0, r6
 800aae6:	f004 fb78 	bl	800f1da <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_chart, lv_chart_design);
 800aaea:	4928      	ldr	r1, [pc, #160]	; (800ab8c <lv_chart_create+0x14c>)
 800aaec:	4630      	mov	r0, r6
 800aaee:	f004 fb76 	bl	800f1de <lv_obj_set_design_cb>
    if(copy == NULL) {
 800aaf2:	f1b9 0f00 	cmp.w	r9, #0
 800aaf6:	d112      	bne.n	800ab1e <lv_chart_create+0xde>
        lv_obj_set_size(new_chart, LV_DPI * 3, LV_DPI * 2);
 800aaf8:	22c8      	movs	r2, #200	; 0xc8
 800aafa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800aafe:	4630      	mov	r0, r6
 800ab00:	f004 fe04 	bl	800f70c <lv_obj_set_size>
        lv_theme_t * th = lv_theme_get_current();
 800ab04:	f7fa fca2 	bl	800544c <lv_theme_get_current>
        if(th) {
 800ab08:	b138      	cbz	r0, 800ab1a <lv_chart_create+0xda>
 * @param style pointer to a style
 */
static inline void lv_chart_set_style(lv_obj_t * chart, lv_chart_style_t type, const lv_style_t * style)
{
    (void)type; /*Unused*/
    lv_obj_set_style(chart, style);
 800ab0a:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800ab0e:	4630      	mov	r0, r6
 800ab10:	f004 ff18 	bl	800f944 <lv_obj_set_style>
}
 800ab14:	4630      	mov	r0, r6
 800ab16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab1a:	491d      	ldr	r1, [pc, #116]	; (800ab90 <lv_chart_create+0x150>)
 800ab1c:	e7f7      	b.n	800ab0e <lv_chart_create+0xce>
        lv_chart_ext_t * ext_copy = lv_obj_get_ext_attr(copy);
 800ab1e:	4648      	mov	r0, r9
 800ab20:	f004 ffce 	bl	800fac0 <lv_obj_get_ext_attr>
        ext->type       = ext_copy->type;
 800ab24:	7d03      	ldrb	r3, [r0, #20]
        lv_chart_ext_t * ext_copy = lv_obj_get_ext_attr(copy);
 800ab26:	4605      	mov	r5, r0
        memcpy(&ext->x_axis, &ext_copy->x_axis, sizeof(lv_chart_axis_cfg_t));
 800ab28:	f100 0120 	add.w	r1, r0, #32
        ext->type       = ext_copy->type;
 800ab2c:	7523      	strb	r3, [r4, #20]
        memcpy(&ext->x_axis, &ext_copy->x_axis, sizeof(lv_chart_axis_cfg_t));
 800ab2e:	2208      	movs	r2, #8
        ext->ymin       = ext_copy->ymin;
 800ab30:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 800ab34:	81a3      	strh	r3, [r4, #12]
        ext->ymax       = ext_copy->ymax;
 800ab36:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800ab3a:	81e3      	strh	r3, [r4, #14]
        ext->hdiv_cnt   = ext_copy->hdiv_cnt;
 800ab3c:	7c03      	ldrb	r3, [r0, #16]
 800ab3e:	7423      	strb	r3, [r4, #16]
        ext->vdiv_cnt   = ext_copy->vdiv_cnt;
 800ab40:	7c43      	ldrb	r3, [r0, #17]
 800ab42:	7463      	strb	r3, [r4, #17]
        ext->point_cnt  = ext_copy->point_cnt;
 800ab44:	8a43      	ldrh	r3, [r0, #18]
 800ab46:	8263      	strh	r3, [r4, #18]
        ext->series.opa = ext_copy->series.opa;
 800ab48:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800ab4c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
        ext->margin     = ext_copy->margin;
 800ab50:	8d03      	ldrh	r3, [r0, #40]	; 0x28
        memcpy(&ext->x_axis, &ext_copy->x_axis, sizeof(lv_chart_axis_cfg_t));
 800ab52:	4640      	mov	r0, r8
        ext->margin     = ext_copy->margin;
 800ab54:	8523      	strh	r3, [r4, #40]	; 0x28
        memcpy(&ext->x_axis, &ext_copy->x_axis, sizeof(lv_chart_axis_cfg_t));
 800ab56:	f00b fe0b 	bl	8016770 <memcpy>
        memcpy(&ext->y_axis, &ext_copy->y_axis, sizeof(lv_chart_axis_cfg_t));
 800ab5a:	2208      	movs	r2, #8
 800ab5c:	f105 0118 	add.w	r1, r5, #24
 800ab60:	4638      	mov	r0, r7
 800ab62:	f00b fe05 	bl	8016770 <memcpy>
        lv_obj_refresh_style(new_chart);
 800ab66:	4630      	mov	r0, r6
 800ab68:	f004 fe29 	bl	800f7be <lv_obj_refresh_style>
    return new_chart;
 800ab6c:	e7d2      	b.n	800ab14 <lv_chart_create+0xd4>
 800ab6e:	bf00      	nop
 800ab70:	080176f4 	.word	0x080176f4
 800ab74:	0801c6df 	.word	0x0801c6df
 800ab78:	000a0503 	.word	0x000a0503
 800ab7c:	ff000002 	.word	0xff000002
 800ab80:	20028990 	.word	0x20028990
 800ab84:	20028994 	.word	0x20028994
 800ab88:	08009eb1 	.word	0x08009eb1
 800ab8c:	08009f2d 	.word	0x08009f2d
 800ab90:	2002059c 	.word	0x2002059c

0800ab94 <lv_chart_add_series>:
{
 800ab94:	b570      	push	{r4, r5, r6, lr}
 800ab96:	460e      	mov	r6, r1
    lv_chart_ext_t * ext    = lv_obj_get_ext_attr(chart);
 800ab98:	f004 ff92 	bl	800fac0 <lv_obj_get_ext_attr>
 800ab9c:	4605      	mov	r5, r0
    lv_chart_series_t * ser = lv_ll_ins_head(&ext->series_ll);
 800ab9e:	f005 fa43 	bl	8010028 <lv_ll_ins_head>
    lv_mem_assert(ser);
 800aba2:	4604      	mov	r4, r0
 800aba4:	b930      	cbnz	r0, 800abb4 <lv_chart_add_series+0x20>
 800aba6:	4b14      	ldr	r3, [pc, #80]	; (800abf8 <lv_chart_add_series+0x64>)
 800aba8:	229f      	movs	r2, #159	; 0x9f
 800abaa:	4914      	ldr	r1, [pc, #80]	; (800abfc <lv_chart_add_series+0x68>)
 800abac:	2003      	movs	r0, #3
 800abae:	f7f8 fd31 	bl	8003614 <lv_log_add>
 800abb2:	e7fe      	b.n	800abb2 <lv_chart_add_series+0x1e>
    ser->color  = color;
 800abb4:	8086      	strh	r6, [r0, #4]
    ser->points = lv_mem_alloc(sizeof(lv_coord_t) * ext->point_cnt);
 800abb6:	8a68      	ldrh	r0, [r5, #18]
 800abb8:	0040      	lsls	r0, r0, #1
 800abba:	f7f8 fd59 	bl	8003670 <lv_mem_alloc>
 800abbe:	6020      	str	r0, [r4, #0]
    lv_mem_assert(ser->points);
 800abc0:	b930      	cbnz	r0, 800abd0 <lv_chart_add_series+0x3c>
 800abc2:	4b0d      	ldr	r3, [pc, #52]	; (800abf8 <lv_chart_add_series+0x64>)
 800abc4:	22a8      	movs	r2, #168	; 0xa8
 800abc6:	490d      	ldr	r1, [pc, #52]	; (800abfc <lv_chart_add_series+0x68>)
 800abc8:	2003      	movs	r0, #3
 800abca:	f7f8 fd23 	bl	8003614 <lv_log_add>
 800abce:	e7fe      	b.n	800abce <lv_chart_add_series+0x3a>
    ser->start_point = 0;
 800abd0:	2300      	movs	r3, #0
        *p_tmp = def;
 800abd2:	f248 36e8 	movw	r6, #33768	; 0x83e8
    ser->start_point = 0;
 800abd6:	80e3      	strh	r3, [r4, #6]
    for(i = 0; i < ext->point_cnt; i++) {
 800abd8:	8a69      	ldrh	r1, [r5, #18]
 800abda:	b29a      	uxth	r2, r3
 800abdc:	4291      	cmp	r1, r2
 800abde:	d806      	bhi.n	800abee <lv_chart_add_series+0x5a>
    ext->series.num++;
 800abe0:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
}
 800abe4:	4620      	mov	r0, r4
    ext->series.num++;
 800abe6:	3301      	adds	r3, #1
 800abe8:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
 800abec:	bd70      	pop	{r4, r5, r6, pc}
        *p_tmp = def;
 800abee:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
        p_tmp++;
 800abf2:	3301      	adds	r3, #1
 800abf4:	e7f0      	b.n	800abd8 <lv_chart_add_series+0x44>
 800abf6:	bf00      	nop
 800abf8:	080176f4 	.word	0x080176f4
 800abfc:	0801c6df 	.word	0x0801c6df

0800ac00 <lv_label_revert_dots>:

    lv_obj_invalidate(label);
}

static void lv_label_revert_dots(lv_obj_t * label)
{
 800ac00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac04:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800ac06:	f004 ff5b 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 800ac0a:	7f83      	ldrb	r3, [r0, #30]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800ac0c:	4604      	mov	r4, r0
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 800ac0e:	f003 0307 	and.w	r3, r3, #7
 800ac12:	2b02      	cmp	r3, #2
 800ac14:	d126      	bne.n	800ac64 <lv_label_revert_dots+0x64>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
 800ac16:	8901      	ldrh	r1, [r0, #8]
 800ac18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac1c:	4299      	cmp	r1, r3
 800ac1e:	d021      	beq.n	800ac64 <lv_label_revert_dots+0x64>
    uint32_t letter_i = ext->dot_end - LV_LABEL_DOT_NUM;
    uint32_t byte_i   = lv_txt_encoded_get_byte_id(ext->text, letter_i);
 800ac20:	4b12      	ldr	r3, [pc, #72]	; (800ac6c <lv_label_revert_dots+0x6c>)
 800ac22:	3903      	subs	r1, #3
 800ac24:	6800      	ldr	r0, [r0, #0]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4798      	blx	r3
 800ac2a:	4680      	mov	r8, r0
 * @param label pointer to label object
 * @return char pointer to a stored characters. Is *not* necessarily NULL-terminated.
 */
static char * lv_label_get_dot_tmp(lv_obj_t * label)
{
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800ac2c:	4628      	mov	r0, r5
 800ac2e:	f004 ff47 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc) {
 800ac32:	7fc3      	ldrb	r3, [r0, #31]
    while(ext->text[byte_i + i] != '\0') {
 800ac34:	2100      	movs	r1, #0
    if(ext->dot_tmp_alloc) {
 800ac36:	079b      	lsls	r3, r3, #30
        return ext->dot.tmp_ptr;
 800ac38:	bf4c      	ite	mi
 800ac3a:	6840      	ldrmi	r0, [r0, #4]
    } else {
        return ext->dot.tmp;
 800ac3c:	3004      	addpl	r0, #4
    while(ext->text[byte_i + i] != '\0') {
 800ac3e:	b2ce      	uxtb	r6, r1
 800ac40:	6822      	ldr	r2, [r4, #0]
 800ac42:	3101      	adds	r1, #1
 800ac44:	eb06 0308 	add.w	r3, r6, r8
 800ac48:	5d86      	ldrb	r6, [r0, r6]
 800ac4a:	f812 c003 	ldrb.w	ip, [r2, r3]
 800ac4e:	18d7      	adds	r7, r2, r3
 800ac50:	f1bc 0f00 	cmp.w	ip, #0
 800ac54:	d108      	bne.n	800ac68 <lv_label_revert_dots+0x68>
    ext->text[byte_i + i] = dot_tmp[i];
 800ac56:	703e      	strb	r6, [r7, #0]
    lv_label_dot_tmp_free(label);
 800ac58:	4628      	mov	r0, r5
 800ac5a:	f00a ff64 	bl	8015b26 <lv_label_dot_tmp_free>
    ext->dot_end = LV_LABEL_DOT_END_INV;
 800ac5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac62:	8123      	strh	r3, [r4, #8]
}
 800ac64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ext->text[byte_i + i] = dot_tmp[i];
 800ac68:	54d6      	strb	r6, [r2, r3]
        i++;
 800ac6a:	e7e8      	b.n	800ac3e <lv_label_revert_dots+0x3e>
 800ac6c:	2002da48 	.word	0x2002da48

0800ac70 <lv_label_set_dot_tmp>:
{
 800ac70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac72:	4604      	mov	r4, r0
 800ac74:	4616      	mov	r6, r2
 800ac76:	460f      	mov	r7, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800ac78:	f004 ff22 	bl	800fac0 <lv_obj_get_ext_attr>
 800ac7c:	4605      	mov	r5, r0
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
 800ac7e:	4620      	mov	r0, r4
 800ac80:	f00a ff51 	bl	8015b26 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 800ac84:	2e04      	cmp	r6, #4
 800ac86:	d91b      	bls.n	800acc0 <lv_label_set_dot_tmp+0x50>
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
 800ac88:	1c70      	adds	r0, r6, #1
 800ac8a:	f7f8 fcf1 	bl	8003670 <lv_mem_alloc>
 800ac8e:	4604      	mov	r4, r0
 800ac90:	6068      	str	r0, [r5, #4]
        if(ext->dot.tmp_ptr == NULL) {
 800ac92:	b940      	cbnz	r0, 800aca6 <lv_label_set_dot_tmp+0x36>
            LV_LOG_ERROR("Failed to allocate memory for dot_tmp_ptr");
 800ac94:	2003      	movs	r0, #3
 800ac96:	4b0f      	ldr	r3, [pc, #60]	; (800acd4 <lv_label_set_dot_tmp+0x64>)
 800ac98:	f240 4291 	movw	r2, #1169	; 0x491
 800ac9c:	490e      	ldr	r1, [pc, #56]	; (800acd8 <lv_label_set_dot_tmp+0x68>)
 800ac9e:	f7f8 fcb9 	bl	8003614 <lv_log_add>
 800aca2:	4620      	mov	r0, r4
}
 800aca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memcpy(ext->dot.tmp_ptr, data, len);
 800aca6:	4632      	mov	r2, r6
 800aca8:	4639      	mov	r1, r7
 800acaa:	f00b fd61 	bl	8016770 <memcpy>
        ext->dot.tmp_ptr[len] = '\0';
 800acae:	686b      	ldr	r3, [r5, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	559a      	strb	r2, [r3, r6]
        ext->dot_tmp_alloc    = true;
 800acb4:	7feb      	ldrb	r3, [r5, #31]
 800acb6:	f043 0302 	orr.w	r3, r3, #2
 800acba:	77eb      	strb	r3, [r5, #31]
    return true;
 800acbc:	2001      	movs	r0, #1
 800acbe:	e7f1      	b.n	800aca4 <lv_label_set_dot_tmp+0x34>
        ext->dot_tmp_alloc = false;
 800acc0:	7feb      	ldrb	r3, [r5, #31]
        memcpy(ext->dot.tmp, data, len);
 800acc2:	4632      	mov	r2, r6
 800acc4:	4639      	mov	r1, r7
 800acc6:	1d28      	adds	r0, r5, #4
        ext->dot_tmp_alloc = false;
 800acc8:	f36f 0341 	bfc	r3, #1, #1
 800accc:	77eb      	strb	r3, [r5, #31]
        memcpy(ext->dot.tmp, data, len);
 800acce:	f00b fd4f 	bl	8016770 <memcpy>
 800acd2:	e7f3      	b.n	800acbc <lv_label_set_dot_tmp+0x4c>
 800acd4:	0801c74f 	.word	0x0801c74f
 800acd8:	0801c779 	.word	0x0801c779

0800acdc <lv_label_get_letter_pos>:
{
 800acdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace0:	b089      	sub	sp, #36	; 0x24
 800ace2:	460e      	mov	r6, r1
    lv_coord_t y             = 0;
 800ace4:	f04f 0a00 	mov.w	sl, #0
{
 800ace8:	9207      	str	r2, [sp, #28]
 800acea:	9004      	str	r0, [sp, #16]
    const char * txt         = lv_label_get_text(label);
 800acec:	f00b f877 	bl	8015dde <lv_label_get_text>
 800acf0:	4605      	mov	r5, r0
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
 800acf2:	9804      	ldr	r0, [sp, #16]
 800acf4:	f004 fee4 	bl	800fac0 <lv_obj_get_ext_attr>
 800acf8:	9005      	str	r0, [sp, #20]
    lv_coord_t max_w         = lv_obj_get_width(label);
 800acfa:	9804      	ldr	r0, [sp, #16]
 800acfc:	f004 fe45 	bl	800f98a <lv_obj_get_width>
 800ad00:	4604      	mov	r4, r0
    const lv_style_t * style = lv_obj_get_style(label);
 800ad02:	9804      	ldr	r0, [sp, #16]
 800ad04:	f7f8 f81c 	bl	8002d40 <lv_obj_get_style>
    const lv_font_t * font   = style->text.font;
 800ad08:	6a43      	ldr	r3, [r0, #36]	; 0x24
    index = lv_txt_encoded_get_byte_id(txt, index);
 800ad0a:	4631      	mov	r1, r6
    const lv_style_t * style = lv_obj_get_style(label);
 800ad0c:	4681      	mov	r9, r0
    const lv_font_t * font   = style->text.font;
 800ad0e:	9303      	str	r3, [sp, #12]
    index = lv_txt_encoded_get_byte_id(txt, index);
 800ad10:	4628      	mov	r0, r5
    uint8_t letter_height    = lv_font_get_line_height(font);
 800ad12:	f893 b008 	ldrb.w	fp, [r3, #8]
    uint32_t line_start      = 0;
 800ad16:	4656      	mov	r6, sl
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 800ad18:	9b05      	ldr	r3, [sp, #20]
 800ad1a:	7f9b      	ldrb	r3, [r3, #30]
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800ad1c:	061a      	lsls	r2, r3, #24
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 800ad1e:	f3c3 1880 	ubfx	r8, r3, #6, #1
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 800ad22:	f003 0230 	and.w	r2, r3, #48	; 0x30
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800ad26:	bf48      	it	mi
 800ad28:	f048 0802 	orrmi.w	r8, r8, #2
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 800ad2c:	2a10      	cmp	r2, #16
 800ad2e:	bf08      	it	eq
 800ad30:	f048 0804 	orreq.w	r8, r8, #4
        max_w = LV_COORD_MAX;
 800ad34:	f013 0f07 	tst.w	r3, #7
 800ad38:	f647 4318 	movw	r3, #31768	; 0x7c18
 800ad3c:	bf08      	it	eq
 800ad3e:	461c      	moveq	r4, r3
    index = lv_txt_encoded_get_byte_id(txt, index);
 800ad40:	4b44      	ldr	r3, [pc, #272]	; (800ae54 <lv_label_get_letter_pos+0x178>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4798      	blx	r3
 800ad46:	b283      	uxth	r3, r0
 800ad48:	9306      	str	r3, [sp, #24]
    while(txt[new_line_start] != '\0') {
 800ad4a:	9302      	str	r3, [sp, #8]
 800ad4c:	5dab      	ldrb	r3, [r5, r6]
 800ad4e:	19a8      	adds	r0, r5, r6
 800ad50:	f9b9 2028 	ldrsh.w	r2, [r9, #40]	; 0x28
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d153      	bne.n	800ae00 <lv_label_get_letter_pos+0x124>
 800ad58:	4637      	mov	r7, r6
    if(index > 0) {
 800ad5a:	9b06      	ldr	r3, [sp, #24]
 800ad5c:	b18b      	cbz	r3, 800ad82 <lv_label_get_letter_pos+0xa6>
        if((txt[index - 1] == '\n' || txt[index - 1] == '\r') && txt[index] == '\0') {
 800ad5e:	9b02      	ldr	r3, [sp, #8]
 800ad60:	18eb      	adds	r3, r5, r3
 800ad62:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ad66:	2b0a      	cmp	r3, #10
 800ad68:	d001      	beq.n	800ad6e <lv_label_get_letter_pos+0x92>
 800ad6a:	2b0d      	cmp	r3, #13
 800ad6c:	d109      	bne.n	800ad82 <lv_label_get_letter_pos+0xa6>
 800ad6e:	9b02      	ldr	r3, [sp, #8]
 800ad70:	5ceb      	ldrb	r3, [r5, r3]
 800ad72:	b933      	cbnz	r3, 800ad82 <lv_label_get_letter_pos+0xa6>
            y += letter_height + style->text.line_space;
 800ad74:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
 800ad78:	9e02      	ldr	r6, [sp, #8]
 800ad7a:	449b      	add	fp, r3
 800ad7c:	44d3      	add	fp, sl
 800ad7e:	fa0f fa8b 	sxth.w	sl, fp
    lv_coord_t x = lv_txt_get_width(&txt[line_start], index - line_start, font, style->text.letter_space, flag);
 800ad82:	9a06      	ldr	r2, [sp, #24]
 800ad84:	fa1f fb86 	uxth.w	fp, r6
 800ad88:	4435      	add	r5, r6
 800ad8a:	f9b9 3028 	ldrsh.w	r3, [r9, #40]	; 0x28
 800ad8e:	eba2 010b 	sub.w	r1, r2, fp
 800ad92:	f8cd 8000 	str.w	r8, [sp]
 800ad96:	9a03      	ldr	r2, [sp, #12]
 800ad98:	4628      	mov	r0, r5
 800ad9a:	b289      	uxth	r1, r1
 800ad9c:	f7f8 fdf0 	bl	8003980 <lv_txt_get_width>
    if(index != line_start) x += style->text.letter_space;
 800ada0:	9b02      	ldr	r3, [sp, #8]
    lv_coord_t x = lv_txt_get_width(&txt[line_start], index - line_start, font, style->text.letter_space, flag);
 800ada2:	4604      	mov	r4, r0
    if(index != line_start) x += style->text.letter_space;
 800ada4:	42b3      	cmp	r3, r6
    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 800ada6:	9b05      	ldr	r3, [sp, #20]
    if(index != line_start) x += style->text.letter_space;
 800ada8:	bf18      	it	ne
 800adaa:	f8b9 0028 	ldrhne.w	r0, [r9, #40]	; 0x28
    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 800adae:	7f9b      	ldrb	r3, [r3, #30]
    if(index != line_start) x += style->text.letter_space;
 800adb0:	bf18      	it	ne
 800adb2:	1824      	addne	r4, r4, r0
    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 800adb4:	f003 0330 	and.w	r3, r3, #48	; 0x30
    if(index != line_start) x += style->text.letter_space;
 800adb8:	bf18      	it	ne
 800adba:	b224      	sxthne	r4, r4
    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 800adbc:	2b10      	cmp	r3, #16
 800adbe:	d134      	bne.n	800ae2a <lv_label_get_letter_pos+0x14e>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, style->text.letter_space, flag);
 800adc0:	eba7 010b 	sub.w	r1, r7, fp
 800adc4:	f9b9 3028 	ldrsh.w	r3, [r9, #40]	; 0x28
 800adc8:	9a03      	ldr	r2, [sp, #12]
 800adca:	4628      	mov	r0, r5
 800adcc:	b289      	uxth	r1, r1
 800adce:	f8cd 8000 	str.w	r8, [sp]
 800add2:	f7f8 fdd5 	bl	8003980 <lv_txt_get_width>
 800add6:	4605      	mov	r5, r0
        x += lv_obj_get_width(label) / 2 - line_w / 2;
 800add8:	9804      	ldr	r0, [sp, #16]
 800adda:	f004 fdd6 	bl	800f98a <lv_obj_get_width>
 800adde:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800ade2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ade6:	eb04 0460 	add.w	r4, r4, r0, asr #1
 800adea:	b224      	sxth	r4, r4
 800adec:	eba4 0465 	sub.w	r4, r4, r5, asr #1
        x += lv_obj_get_width(label) - line_w;
 800adf0:	b224      	sxth	r4, r4
    pos->x = x;
 800adf2:	9b07      	ldr	r3, [sp, #28]
 800adf4:	801c      	strh	r4, [r3, #0]
    pos->y = y;
 800adf6:	f8a3 a002 	strh.w	sl, [r3, #2]
}
 800adfa:	b009      	add	sp, #36	; 0x24
 800adfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 800ae00:	4623      	mov	r3, r4
 800ae02:	f8cd 8000 	str.w	r8, [sp]
 800ae06:	9903      	ldr	r1, [sp, #12]
 800ae08:	f7f8 fd36 	bl	8003878 <lv_txt_get_next_line>
        if(index < new_line_start || txt[new_line_start] == '\0')
 800ae0c:	9b02      	ldr	r3, [sp, #8]
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 800ae0e:	1987      	adds	r7, r0, r6
        if(index < new_line_start || txt[new_line_start] == '\0')
 800ae10:	42bb      	cmp	r3, r7
 800ae12:	d3a2      	bcc.n	800ad5a <lv_label_get_letter_pos+0x7e>
 800ae14:	5deb      	ldrb	r3, [r5, r7]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d09f      	beq.n	800ad5a <lv_label_get_letter_pos+0x7e>
        y += letter_height + style->text.line_space;
 800ae1a:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
 800ae1e:	463e      	mov	r6, r7
 800ae20:	445b      	add	r3, fp
 800ae22:	4453      	add	r3, sl
 800ae24:	fa0f fa83 	sxth.w	sl, r3
        line_start = new_line_start;
 800ae28:	e790      	b.n	800ad4c <lv_label_get_letter_pos+0x70>
    } else if(ext->align == LV_LABEL_ALIGN_RIGHT) {
 800ae2a:	2b20      	cmp	r3, #32
 800ae2c:	d1e1      	bne.n	800adf2 <lv_label_get_letter_pos+0x116>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, style->text.letter_space, flag);
 800ae2e:	eba7 010b 	sub.w	r1, r7, fp
 800ae32:	f9b9 3028 	ldrsh.w	r3, [r9, #40]	; 0x28
 800ae36:	9a03      	ldr	r2, [sp, #12]
 800ae38:	4628      	mov	r0, r5
 800ae3a:	b289      	uxth	r1, r1
 800ae3c:	f8cd 8000 	str.w	r8, [sp]
 800ae40:	f7f8 fd9e 	bl	8003980 <lv_txt_get_width>
 800ae44:	4605      	mov	r5, r0
        x += lv_obj_get_width(label) - line_w;
 800ae46:	9804      	ldr	r0, [sp, #16]
 800ae48:	f004 fd9f 	bl	800f98a <lv_obj_get_width>
 800ae4c:	4404      	add	r4, r0
 800ae4e:	1b64      	subs	r4, r4, r5
 800ae50:	e7ce      	b.n	800adf0 <lv_label_get_letter_pos+0x114>
 800ae52:	bf00      	nop
 800ae54:	2002da48 	.word	0x2002da48

0800ae58 <lv_label_get_letter_on>:
{
 800ae58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae5c:	4682      	mov	sl, r0
 800ae5e:	b08b      	sub	sp, #44	; 0x2c
        max_w = LV_COORD_MAX;
 800ae60:	2400      	movs	r4, #0
{
 800ae62:	9106      	str	r1, [sp, #24]
    const char * txt         = lv_label_get_text(label);
 800ae64:	f00a ffbb 	bl	8015dde <lv_label_get_text>
 800ae68:	4607      	mov	r7, r0
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
 800ae6a:	4650      	mov	r0, sl
 800ae6c:	f004 fe28 	bl	800fac0 <lv_obj_get_ext_attr>
 800ae70:	9004      	str	r0, [sp, #16]
    lv_coord_t max_w         = lv_obj_get_width(label);
 800ae72:	4650      	mov	r0, sl
        max_w = LV_COORD_MAX;
 800ae74:	4625      	mov	r5, r4
    lv_coord_t max_w         = lv_obj_get_width(label);
 800ae76:	f004 fd88 	bl	800f98a <lv_obj_get_width>
 800ae7a:	4683      	mov	fp, r0
    const lv_style_t * style = lv_obj_get_style(label);
 800ae7c:	4650      	mov	r0, sl
 800ae7e:	f7f7 ff5f 	bl	8002d40 <lv_obj_get_style>
    const lv_font_t * font   = style->text.font;
 800ae82:	6a43      	ldr	r3, [r0, #36]	; 0x24
    const lv_style_t * style = lv_obj_get_style(label);
 800ae84:	4681      	mov	r9, r0
    const lv_font_t * font   = style->text.font;
 800ae86:	9303      	str	r3, [sp, #12]
    uint8_t letter_height    = lv_font_get_line_height(font);
 800ae88:	7a1b      	ldrb	r3, [r3, #8]
 800ae8a:	9305      	str	r3, [sp, #20]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 800ae8c:	9b04      	ldr	r3, [sp, #16]
 800ae8e:	7f9b      	ldrb	r3, [r3, #30]
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800ae90:	061a      	lsls	r2, r3, #24
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 800ae92:	f3c3 1680 	ubfx	r6, r3, #6, #1
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 800ae96:	f003 0230 	and.w	r2, r3, #48	; 0x30
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800ae9a:	bf48      	it	mi
 800ae9c:	f046 0602 	orrmi.w	r6, r6, #2
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 800aea0:	2a10      	cmp	r2, #16
 800aea2:	bf08      	it	eq
 800aea4:	f046 0604 	orreq.w	r6, r6, #4
        max_w = LV_COORD_MAX;
 800aea8:	f013 0f07 	tst.w	r3, #7
 800aeac:	f647 4318 	movw	r3, #31768	; 0x7c18
 800aeb0:	bf08      	it	eq
 800aeb2:	469b      	moveq	fp, r3
    while(txt[line_start] != '\0') {
 800aeb4:	197b      	adds	r3, r7, r5
 800aeb6:	9307      	str	r3, [sp, #28]
 800aeb8:	5d7b      	ldrb	r3, [r7, r5]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d151      	bne.n	800af62 <lv_label_get_letter_on+0x10a>
 800aebe:	46a8      	mov	r8, r5
    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 800aec0:	9b04      	ldr	r3, [sp, #16]
 800aec2:	7f9b      	ldrb	r3, [r3, #30]
 800aec4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800aec8:	2b10      	cmp	r3, #16
 800aeca:	d163      	bne.n	800af94 <lv_label_get_letter_on+0x13c>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, style->text.letter_space, flag);
 800aecc:	eba8 0105 	sub.w	r1, r8, r5
 800aed0:	f9b9 3028 	ldrsh.w	r3, [r9, #40]	; 0x28
 800aed4:	9a03      	ldr	r2, [sp, #12]
 800aed6:	1978      	adds	r0, r7, r5
 800aed8:	b289      	uxth	r1, r1
 800aeda:	9600      	str	r6, [sp, #0]
 800aedc:	f7f8 fd50 	bl	8003980 <lv_txt_get_width>
 800aee0:	4683      	mov	fp, r0
        x += lv_obj_get_width(label) / 2 - line_w / 2;
 800aee2:	4650      	mov	r0, sl
 800aee4:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
 800aee8:	f004 fd4f 	bl	800f98a <lv_obj_get_width>
 800aeec:	ea4f 0b6b 	mov.w	fp, fp, asr #1
 800aef0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800aef4:	ebcb 0b60 	rsb	fp, fp, r0, asr #1
 800aef8:	fa0f f48b 	sxth.w	r4, fp
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800aefc:	2300      	movs	r3, #0
    uint32_t i         = line_start;
 800aefe:	9509      	str	r5, [sp, #36]	; 0x24
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800af00:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    if(new_line_start > 0) {
 800af04:	f1b8 0f00 	cmp.w	r8, #0
 800af08:	d022      	beq.n	800af50 <lv_label_get_letter_on+0xf8>
            letter = lv_txt_encoded_next(txt, &i);
 800af0a:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 800afc0 <lv_label_get_letter_on+0x168>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800af0e:	f006 0601 	and.w	r6, r6, #1
        while(i <= new_line_start - 1) {
 800af12:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800af16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af18:	4293      	cmp	r3, r2
 800af1a:	d319      	bcc.n	800af50 <lv_label_get_letter_on+0xf8>
            letter = lv_txt_encoded_next(txt, &i);
 800af1c:	f8da 3000 	ldr.w	r3, [sl]
 800af20:	a909      	add	r1, sp, #36	; 0x24
 800af22:	4638      	mov	r0, r7
 800af24:	4798      	blx	r3
 800af26:	4683      	mov	fp, r0
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800af28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af2a:	2100      	movs	r1, #0
 800af2c:	f8da 3000 	ldr.w	r3, [sl]
 800af30:	4438      	add	r0, r7
 800af32:	4798      	blx	r3
 800af34:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800af36:	bb7e      	cbnz	r6, 800af98 <lv_label_get_letter_on+0x140>
            x += lv_font_get_glyph_width(font, letter, letter_next);
 800af38:	4659      	mov	r1, fp
 800af3a:	9803      	ldr	r0, [sp, #12]
 800af3c:	f009 f8bf 	bl	80140be <lv_font_get_glyph_width>
            if(pos->x < x) {
 800af40:	9b06      	ldr	r3, [sp, #24]
            x += lv_font_get_glyph_width(font, letter, letter_next);
 800af42:	4404      	add	r4, r0
            if(pos->x < x) {
 800af44:	f9b3 3000 	ldrsh.w	r3, [r3]
            x += lv_font_get_glyph_width(font, letter, letter_next);
 800af48:	b224      	sxth	r4, r4
            if(pos->x < x) {
 800af4a:	42a3      	cmp	r3, r4
 800af4c:	da2f      	bge.n	800afae <lv_label_get_letter_on+0x156>
                i = i_current;
 800af4e:	9509      	str	r5, [sp, #36]	; 0x24
    return lv_encoded_get_char_id(txt, i);
 800af50:	4b1a      	ldr	r3, [pc, #104]	; (800afbc <lv_label_get_letter_on+0x164>)
 800af52:	4638      	mov	r0, r7
 800af54:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4798      	blx	r3
}
 800af5a:	b280      	uxth	r0, r0
 800af5c:	b00b      	add	sp, #44	; 0x2c
 800af5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 800af62:	f9b9 2028 	ldrsh.w	r2, [r9, #40]	; 0x28
 800af66:	465b      	mov	r3, fp
 800af68:	9600      	str	r6, [sp, #0]
 800af6a:	1978      	adds	r0, r7, r5
 800af6c:	9903      	ldr	r1, [sp, #12]
 800af6e:	f7f8 fc83 	bl	8003878 <lv_txt_get_next_line>
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 800af72:	9b06      	ldr	r3, [sp, #24]
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 800af74:	eb00 0805 	add.w	r8, r0, r5
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 800af78:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800af7c:	9b05      	ldr	r3, [sp, #20]
 800af7e:	18e3      	adds	r3, r4, r3
 800af80:	429a      	cmp	r2, r3
 800af82:	dd9d      	ble.n	800aec0 <lv_label_get_letter_on+0x68>
        y += letter_height + style->text.line_space;
 800af84:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
        line_start = new_line_start;
 800af88:	4645      	mov	r5, r8
        y += letter_height + style->text.line_space;
 800af8a:	9a05      	ldr	r2, [sp, #20]
 800af8c:	4413      	add	r3, r2
 800af8e:	441c      	add	r4, r3
 800af90:	b224      	sxth	r4, r4
        line_start = new_line_start;
 800af92:	e78f      	b.n	800aeb4 <lv_label_get_letter_on+0x5c>
    lv_coord_t x = 0;
 800af94:	2400      	movs	r4, #0
 800af96:	e7b1      	b.n	800aefc <lv_label_get_letter_on+0xa4>
                if(lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 800af98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af9a:	9004      	str	r0, [sp, #16]
 800af9c:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 800afa0:	5cf9      	ldrb	r1, [r7, r3]
 800afa2:	f005 fa79 	bl	8010498 <lv_txt_is_cmd>
 800afa6:	9a04      	ldr	r2, [sp, #16]
 800afa8:	2800      	cmp	r0, #0
 800afaa:	d0c5      	beq.n	800af38 <lv_label_get_letter_on+0xe0>
 800afac:	e7b1      	b.n	800af12 <lv_label_get_letter_on+0xba>
            x += style->text.letter_space;
 800afae:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
            i_current = i;
 800afb2:	9d09      	ldr	r5, [sp, #36]	; 0x24
            x += style->text.letter_space;
 800afb4:	4404      	add	r4, r0
 800afb6:	b224      	sxth	r4, r4
            i_current = i;
 800afb8:	e7ab      	b.n	800af12 <lv_label_get_letter_on+0xba>
 800afba:	bf00      	nop
 800afbc:	2002da44 	.word	0x2002da44
 800afc0:	2002da4c 	.word	0x2002da4c

0800afc4 <lv_label_refr_text>:
{
 800afc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc8:	b091      	sub	sp, #68	; 0x44
 800afca:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800afcc:	f004 fd78 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->text == NULL) return;
 800afd0:	6803      	ldr	r3, [r0, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800afd2:	4604      	mov	r4, r0
    if(ext->text == NULL) return;
 800afd4:	b393      	cbz	r3, 800b03c <lv_label_refr_text+0x78>
    ext->hint.line_start = -1; /*The hint is invalid if the text changes*/
 800afd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afda:	6103      	str	r3, [r0, #16]
    lv_coord_t max_w         = lv_obj_get_width(label);
 800afdc:	4628      	mov	r0, r5
 800afde:	f004 fcd4 	bl	800f98a <lv_obj_get_width>
 800afe2:	4607      	mov	r7, r0
    const lv_style_t * style = lv_obj_get_style(label);
 800afe4:	4628      	mov	r0, r5
 800afe6:	f7f7 feab 	bl	8002d40 <lv_obj_get_style>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 800afea:	7fa3      	ldrb	r3, [r4, #30]
        max_w = LV_COORD_MAX;
 800afec:	f647 4218 	movw	r2, #31768	; 0x7c18
    const lv_font_t * font   = style->text.font;
 800aff0:	6a46      	ldr	r6, [r0, #36]	; 0x24
        max_w = LV_COORD_MAX;
 800aff2:	f013 0f07 	tst.w	r3, #7
    const lv_style_t * style = lv_obj_get_style(label);
 800aff6:	4680      	mov	r8, r0
        max_w = LV_COORD_MAX;
 800aff8:	bf08      	it	eq
 800affa:	4617      	moveq	r7, r2
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 800affc:	f3c3 1280 	ubfx	r2, r3, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800b000:	061b      	lsls	r3, r3, #24
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
 800b002:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	; 0x28
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800b006:	bf48      	it	mi
 800b008:	f042 0202 	orrmi.w	r2, r2, #2
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
 800b00c:	e9cd 7201 	strd	r7, r2, [sp, #4]
 800b010:	f9b0 202a 	ldrsh.w	r2, [r0, #42]	; 0x2a
 800b014:	a804      	add	r0, sp, #16
 800b016:	9200      	str	r2, [sp, #0]
 800b018:	4632      	mov	r2, r6
 800b01a:	6821      	ldr	r1, [r4, #0]
 800b01c:	f005 fa59 	bl	80104d2 <lv_txt_get_size>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 800b020:	7fa3      	ldrb	r3, [r4, #30]
 800b022:	f013 0307 	ands.w	r3, r3, #7
 800b026:	d10c      	bne.n	800b042 <lv_label_refr_text+0x7e>
        lv_obj_set_size(label, size.x, size.y);
 800b028:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 800b02c:	4628      	mov	r0, r5
 800b02e:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 800b032:	f004 fb6b 	bl	800f70c <lv_obj_set_size>
    lv_obj_invalidate(label);
 800b036:	4628      	mov	r0, r5
 800b038:	f004 f8da 	bl	800f1f0 <lv_obj_invalidate>
}
 800b03c:	b011      	add	sp, #68	; 0x44
 800b03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
 800b042:	2b03      	cmp	r3, #3
 800b044:	d168      	bne.n	800b118 <lv_label_refr_text+0x154>
        anim.playback = 1;
 800b046:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800b04a:	2220      	movs	r2, #32
        anim.start    = 0;
 800b04c:	2700      	movs	r7, #0
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800b04e:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
        anim.playback = 1;
 800b052:	f023 0303 	bic.w	r3, r3, #3
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800b056:	4611      	mov	r1, r2
        anim.var      = label;
 800b058:	9506      	str	r5, [sp, #24]
        anim.playback = 1;
 800b05a:	f043 0303 	orr.w	r3, r3, #3
 800b05e:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
        anim.path_cb  = lv_anim_path_linear;
 800b062:	4b9b      	ldr	r3, [pc, #620]	; (800b2d0 <lv_label_refr_text+0x30c>)
        anim.ready_cb = NULL;
 800b064:	e9cd 7709 	strd	r7, r7, [sp, #36]	; 0x24
        anim.path_cb  = lv_anim_path_linear;
 800b068:	9308      	str	r3, [sp, #32]
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800b06a:	f009 f828 	bl	80140be <lv_font_get_glyph_width>
 800b06e:	f9b8 3028 	ldrsh.w	r3, [r8, #40]	; 0x28
        if(size.x > lv_obj_get_width(label)) {
 800b072:	f9bd 8010 	ldrsh.w	r8, [sp, #16]
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800b076:	4418      	add	r0, r3
 800b078:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b07c:	4343      	muls	r3, r0
             ext->anim_speed) *
 800b07e:	8ba0      	ldrh	r0, [r4, #28]
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800b080:	fb93 f3f0 	sdiv	r3, r3, r0
        anim.playback_pause =
 800b084:	eb03 0343 	add.w	r3, r3, r3, lsl #1
        if(size.x > lv_obj_get_width(label)) {
 800b088:	4628      	mov	r0, r5
        anim.playback_pause =
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
        anim.repeat_pause = anim.playback_pause;
 800b090:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        anim.act_time     = -anim.playback_pause;
 800b094:	425b      	negs	r3, r3
 800b096:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
        if(size.x > lv_obj_get_width(label)) {
 800b09a:	f004 fc76 	bl	800f98a <lv_obj_get_width>
 800b09e:	4580      	cmp	r8, r0
 800b0a0:	dd34      	ble.n	800b10c <lv_label_refr_text+0x148>
            anim.end     = lv_obj_get_width(label) - size.x;
 800b0a2:	4628      	mov	r0, r5
            hor_anim = true;
 800b0a4:	2701      	movs	r7, #1
            anim.end     = lv_obj_get_width(label) - size.x;
 800b0a6:	f004 fc70 	bl	800f98a <lv_obj_get_width>
 800b0aa:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 800b0ae:	4b89      	ldr	r3, [pc, #548]	; (800b2d4 <lv_label_refr_text+0x310>)
            anim.end     = lv_obj_get_width(label) - size.x;
 800b0b0:	1a82      	subs	r2, r0, r2
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800b0b2:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 800b0b6:	8ba0      	ldrh	r0, [r4, #28]
            anim.end     = lv_obj_get_width(label) - size.x;
 800b0b8:	920b      	str	r2, [sp, #44]	; 0x2c
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800b0ba:	b212      	sxth	r2, r2
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 800b0bc:	9307      	str	r3, [sp, #28]
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800b0be:	f005 fa6f 	bl	80105a0 <lv_anim_speed_to_time>
 800b0c2:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
            lv_anim_create(&anim);
 800b0c6:	a806      	add	r0, sp, #24
 800b0c8:	f7f8 fdc2 	bl	8003c50 <lv_anim_create>
        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 800b0cc:	f9bd 8012 	ldrsh.w	r8, [sp, #18]
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	f004 fc60 	bl	800f996 <lv_obj_get_height>
 800b0d6:	4580      	cmp	r8, r0
 800b0d8:	dd76      	ble.n	800b1c8 <lv_label_refr_text+0x204>
 800b0da:	2f00      	cmp	r7, #0
 800b0dc:	d174      	bne.n	800b1c8 <lv_label_refr_text+0x204>
            anim.end     = lv_obj_get_height(label) - size.y - (lv_font_get_line_height(font));
 800b0de:	4628      	mov	r0, r5
 800b0e0:	f004 fc59 	bl	800f996 <lv_obj_get_height>
 800b0e4:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 800b0e8:	7a33      	ldrb	r3, [r6, #8]
 800b0ea:	441a      	add	r2, r3
 800b0ec:	1a82      	subs	r2, r0, r2
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
 800b0ee:	4b7a      	ldr	r3, [pc, #488]	; (800b2d8 <lv_label_refr_text+0x314>)
            anim.end     = -size.y - (lv_font_get_line_height(font));
 800b0f0:	920b      	str	r2, [sp, #44]	; 0x2c
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800b0f2:	b212      	sxth	r2, r2
 800b0f4:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 800b0f8:	8ba0      	ldrh	r0, [r4, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
 800b0fa:	9307      	str	r3, [sp, #28]
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800b0fc:	f005 fa50 	bl	80105a0 <lv_anim_speed_to_time>
 800b100:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
            lv_anim_create(&anim);
 800b104:	a806      	add	r0, sp, #24
 800b106:	f7f8 fda3 	bl	8003c50 <lv_anim_create>
 800b10a:	e794      	b.n	800b036 <lv_label_refr_text+0x72>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 800b10c:	4971      	ldr	r1, [pc, #452]	; (800b2d4 <lv_label_refr_text+0x310>)
 800b10e:	4628      	mov	r0, r5
 800b110:	f7f8 fd70 	bl	8003bf4 <lv_anim_del>
            ext->offset.x = 0;
 800b114:	8167      	strh	r7, [r4, #10]
 800b116:	e7d9      	b.n	800b0cc <lv_label_refr_text+0x108>
    else if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 800b118:	2b04      	cmp	r3, #4
 800b11a:	d15c      	bne.n	800b1d6 <lv_label_refr_text+0x212>
        anim.playback = 0;
 800b11c:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800b120:	2220      	movs	r2, #32
        anim.start    = 0;
 800b122:	2700      	movs	r7, #0
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800b124:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
        anim.playback = 0;
 800b128:	f023 0303 	bic.w	r3, r3, #3
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800b12c:	4611      	mov	r1, r2
        anim.var      = label;
 800b12e:	9506      	str	r5, [sp, #24]
        anim.playback = 0;
 800b130:	f043 0302 	orr.w	r3, r3, #2
        anim.start    = 0;
 800b134:	970a      	str	r7, [sp, #40]	; 0x28
        anim.playback = 0;
 800b136:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800b13a:	f008 ffc0 	bl	80140be <lv_font_get_glyph_width>
 800b13e:	f9b8 3028 	ldrsh.w	r3, [r8, #40]	; 0x28
        if(size.x > lv_obj_get_width(label)) {
 800b142:	f9bd 8010 	ldrsh.w	r8, [sp, #16]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800b146:	4418      	add	r0, r3
 800b148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b14c:	4358      	muls	r0, r3
                          ext->anim_speed) *
 800b14e:	8ba3      	ldrh	r3, [r4, #28]
        anim.ready_cb       = NULL;
 800b150:	9709      	str	r7, [sp, #36]	; 0x24
        anim.playback_pause = 0;
 800b152:	970d      	str	r7, [sp, #52]	; 0x34
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800b154:	fb90 f0f3 	sdiv	r0, r0, r3
 800b158:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
        anim.path_cb        = lv_anim_path_linear;
 800b15c:	4b5c      	ldr	r3, [pc, #368]	; (800b2d0 <lv_label_refr_text+0x30c>)
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800b15e:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
        if(size.x > lv_obj_get_width(label)) {
 800b162:	4628      	mov	r0, r5
        anim.path_cb        = lv_anim_path_linear;
 800b164:	9308      	str	r3, [sp, #32]
        if(size.x > lv_obj_get_width(label)) {
 800b166:	f004 fc10 	bl	800f98a <lv_obj_get_width>
 800b16a:	4580      	cmp	r8, r0
 800b16c:	dd26      	ble.n	800b1bc <lv_label_refr_text+0x1f8>
            anim.end     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800b16e:	2220      	movs	r2, #32
 800b170:	4630      	mov	r0, r6
            hor_anim = true;
 800b172:	2701      	movs	r7, #1
            anim.end     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800b174:	4611      	mov	r1, r2
 800b176:	f008 ffa2 	bl	80140be <lv_font_get_glyph_width>
 800b17a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800b17e:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 800b182:	4b54      	ldr	r3, [pc, #336]	; (800b2d4 <lv_label_refr_text+0x310>)
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800b184:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
            anim.end     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800b188:	1a82      	subs	r2, r0, r2
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800b18a:	8ba0      	ldrh	r0, [r4, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 800b18c:	9307      	str	r3, [sp, #28]
            anim.end     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800b18e:	920b      	str	r2, [sp, #44]	; 0x2c
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800b190:	b212      	sxth	r2, r2
 800b192:	f005 fa05 	bl	80105a0 <lv_anim_speed_to_time>
 800b196:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
            lv_anim_create(&anim);
 800b19a:	a806      	add	r0, sp, #24
 800b19c:	f7f8 fd58 	bl	8003c50 <lv_anim_create>
        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 800b1a0:	f9bd 8012 	ldrsh.w	r8, [sp, #18]
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	f004 fbf6 	bl	800f996 <lv_obj_get_height>
 800b1aa:	4580      	cmp	r8, r0
 800b1ac:	dd0c      	ble.n	800b1c8 <lv_label_refr_text+0x204>
 800b1ae:	b95f      	cbnz	r7, 800b1c8 <lv_label_refr_text+0x204>
            anim.end     = -size.y - (lv_font_get_line_height(font));
 800b1b0:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 800b1b4:	7a33      	ldrb	r3, [r6, #8]
 800b1b6:	441a      	add	r2, r3
 800b1b8:	4252      	negs	r2, r2
 800b1ba:	e798      	b.n	800b0ee <lv_label_refr_text+0x12a>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 800b1bc:	4945      	ldr	r1, [pc, #276]	; (800b2d4 <lv_label_refr_text+0x310>)
 800b1be:	4628      	mov	r0, r5
 800b1c0:	f7f8 fd18 	bl	8003bf4 <lv_anim_del>
            ext->offset.x = 0;
 800b1c4:	8167      	strh	r7, [r4, #10]
 800b1c6:	e7eb      	b.n	800b1a0 <lv_label_refr_text+0x1dc>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 800b1c8:	4943      	ldr	r1, [pc, #268]	; (800b2d8 <lv_label_refr_text+0x314>)
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	f7f8 fd12 	bl	8003bf4 <lv_anim_del>
            ext->offset.y = 0;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	81a3      	strh	r3, [r4, #12]
 800b1d4:	e72f      	b.n	800b036 <lv_label_refr_text+0x72>
    } else if(ext->long_mode == LV_LABEL_LONG_DOT) {
 800b1d6:	2b02      	cmp	r3, #2
 800b1d8:	d171      	bne.n	800b2be <lv_label_refr_text+0x2fa>
        if(size.y <= lv_obj_get_height(label)) { /*No dots are required, the text is short enough*/
 800b1da:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 800b1de:	4628      	mov	r0, r5
 800b1e0:	f004 fbd9 	bl	800f996 <lv_obj_get_height>
 800b1e4:	4286      	cmp	r6, r0
 800b1e6:	dc03      	bgt.n	800b1f0 <lv_label_refr_text+0x22c>
            ext->dot_end = LV_LABEL_DOT_END_INV;
 800b1e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b1ec:	8123      	strh	r3, [r4, #8]
 800b1ee:	e722      	b.n	800b036 <lv_label_refr_text+0x72>
        } else if(lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) { /*Don't turn to dots all the characters*/
 800b1f0:	4b3a      	ldr	r3, [pc, #232]	; (800b2dc <lv_label_refr_text+0x318>)
 800b1f2:	6820      	ldr	r0, [r4, #0]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4798      	blx	r3
 800b1f8:	2803      	cmp	r0, #3
 800b1fa:	d9f5      	bls.n	800b1e8 <lv_label_refr_text+0x224>
            p.x = lv_obj_get_width(label) -
 800b1fc:	4628      	mov	r0, r5
            uint8_t len          = 0;
 800b1fe:	f04f 0900 	mov.w	r9, #0
            p.x = lv_obj_get_width(label) -
 800b202:	f004 fbc2 	bl	800f98a <lv_obj_get_width>
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 800b206:	222e      	movs	r2, #46	; 0x2e
            p.x = lv_obj_get_width(label) -
 800b208:	4606      	mov	r6, r0
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 800b20a:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
 800b20e:	4611      	mov	r1, r2
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 800b210:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 800b2e4 <lv_label_refr_text+0x320>
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 800b214:	f008 ff53 	bl	80140be <lv_font_get_glyph_width>
 800b218:	f9b8 3028 	ldrsh.w	r3, [r8, #40]	; 0x28
                lv_txt_encoded_next(ext->text, &byte_id);
 800b21c:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 800b2e8 <lv_label_refr_text+0x324>
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 800b220:	4418      	add	r0, r3
            p.x = lv_obj_get_width(label) -
 800b222:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
 800b226:	4430      	add	r0, r6
 800b228:	f8ad 0014 	strh.w	r0, [sp, #20]
            p.y = lv_obj_get_height(label);
 800b22c:	4628      	mov	r0, r5
 800b22e:	f004 fbb2 	bl	800f996 <lv_obj_get_height>
                   (lv_font_get_line_height(style->text.font) + style->text.line_space); /*Round down to the last line*/
 800b232:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800b236:	f9b8 102a 	ldrsh.w	r1, [r8, #42]	; 0x2a
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 800b23a:	f04f 0804 	mov.w	r8, #4
                   (lv_font_get_line_height(style->text.font) + style->text.line_space); /*Round down to the last line*/
 800b23e:	7a1b      	ldrb	r3, [r3, #8]
            p.y -= style->text.line_space;                                               /*Trim the last line space*/
 800b240:	1a42      	subs	r2, r0, r1
                   (lv_font_get_line_height(style->text.font) + style->text.line_space); /*Round down to the last line*/
 800b242:	440b      	add	r3, r1
            p.y -= p.y %
 800b244:	fb90 f1f3 	sdiv	r1, r0, r3
 800b248:	fb03 0311 	mls	r3, r3, r1, r0
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 800b24c:	a905      	add	r1, sp, #20
 800b24e:	4628      	mov	r0, r5
            p.y -= style->text.line_space;                                               /*Trim the last line space*/
 800b250:	1ad2      	subs	r2, r2, r3
 800b252:	f8ad 2016 	strh.w	r2, [sp, #22]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 800b256:	f7ff fdff 	bl	800ae58 <lv_label_get_letter_on>
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 800b25a:	4b21      	ldr	r3, [pc, #132]	; (800b2e0 <lv_label_refr_text+0x31c>)
 800b25c:	4601      	mov	r1, r0
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 800b25e:	4607      	mov	r7, r0
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 800b260:	6820      	ldr	r0, [r4, #0]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4798      	blx	r3
 800b266:	4606      	mov	r6, r0
 800b268:	9006      	str	r0, [sp, #24]
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 800b26a:	9906      	ldr	r1, [sp, #24]
 800b26c:	6820      	ldr	r0, [r4, #0]
 800b26e:	f8da 3000 	ldr.w	r3, [sl]
 800b272:	4408      	add	r0, r1
 800b274:	4798      	blx	r3
                lv_txt_encoded_next(ext->text, &byte_id);
 800b276:	f8db 3000 	ldr.w	r3, [fp]
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 800b27a:	4481      	add	r9, r0
                lv_txt_encoded_next(ext->text, &byte_id);
 800b27c:	a906      	add	r1, sp, #24
 800b27e:	6820      	ldr	r0, [r4, #0]
 800b280:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 800b282:	f1b8 0801 	subs.w	r8, r8, #1
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 800b286:	fa5f f989 	uxtb.w	r9, r9
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 800b28a:	d1ee      	bne.n	800b26a <lv_label_refr_text+0x2a6>
            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
 800b28c:	6821      	ldr	r1, [r4, #0]
 800b28e:	464a      	mov	r2, r9
 800b290:	4628      	mov	r0, r5
 800b292:	4431      	add	r1, r6
 800b294:	f7ff fcec 	bl	800ac70 <lv_label_set_dot_tmp>
 800b298:	2800      	cmp	r0, #0
 800b29a:	f43f aecc 	beq.w	800b036 <lv_label_refr_text+0x72>
                    ext->text[byte_id_ori + i] = '.';
 800b29e:	6823      	ldr	r3, [r4, #0]
 800b2a0:	222e      	movs	r2, #46	; 0x2e
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 800b2a2:	3703      	adds	r7, #3
                    ext->text[byte_id_ori + i] = '.';
 800b2a4:	559a      	strb	r2, [r3, r6]
 800b2a6:	6823      	ldr	r3, [r4, #0]
 800b2a8:	4433      	add	r3, r6
 800b2aa:	705a      	strb	r2, [r3, #1]
 800b2ac:	6823      	ldr	r3, [r4, #0]
 800b2ae:	4433      	add	r3, r6
 800b2b0:	709a      	strb	r2, [r3, #2]
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 800b2b2:	6823      	ldr	r3, [r4, #0]
 800b2b4:	441e      	add	r6, r3
 800b2b6:	f886 8003 	strb.w	r8, [r6, #3]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 800b2ba:	8127      	strh	r7, [r4, #8]
 800b2bc:	e6bb      	b.n	800b036 <lv_label_refr_text+0x72>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	f47f aeb9 	bne.w	800b036 <lv_label_refr_text+0x72>
        lv_obj_set_height(label, size.y);
 800b2c4:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	f004 fa70 	bl	800f7ae <lv_obj_set_height>
 800b2ce:	e6b2      	b.n	800b036 <lv_label_refr_text+0x72>
 800b2d0:	0801057d 	.word	0x0801057d
 800b2d4:	08015b61 	.word	0x08015b61
 800b2d8:	08015b4b 	.word	0x08015b4b
 800b2dc:	2002da58 	.word	0x2002da58
 800b2e0:	2002da48 	.word	0x2002da48
 800b2e4:	2002da54 	.word	0x2002da54
 800b2e8:	2002da4c 	.word	0x2002da4c

0800b2ec <lv_label_signal>:
    res = ancestor_signal(label, sign, param);
 800b2ec:	4b36      	ldr	r3, [pc, #216]	; (800b3c8 <lv_label_signal+0xdc>)
{
 800b2ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(label, sign, param);
 800b2f2:	681b      	ldr	r3, [r3, #0]
{
 800b2f4:	4604      	mov	r4, r0
 800b2f6:	460f      	mov	r7, r1
 800b2f8:	4615      	mov	r5, r2
    res = ancestor_signal(label, sign, param);
 800b2fa:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 800b2fc:	2801      	cmp	r0, #1
    res = ancestor_signal(label, sign, param);
 800b2fe:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
 800b300:	d110      	bne.n	800b324 <lv_label_signal+0x38>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800b302:	4620      	mov	r0, r4
 800b304:	f004 fbdc 	bl	800fac0 <lv_obj_get_ext_attr>
 800b308:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 800b30a:	b977      	cbnz	r7, 800b32a <lv_label_signal+0x3e>
        if(ext->static_txt == 0) {
 800b30c:	7f83      	ldrb	r3, [r0, #30]
 800b30e:	f013 0508 	ands.w	r5, r3, #8
 800b312:	d104      	bne.n	800b31e <lv_label_signal+0x32>
            lv_mem_free(ext->text);
 800b314:	6800      	ldr	r0, [r0, #0]
 800b316:	f7f8 f9ed 	bl	80036f4 <lv_mem_free>
            ext->text = NULL;
 800b31a:	f8c8 5000 	str.w	r5, [r8]
        lv_label_dot_tmp_free(label);
 800b31e:	4620      	mov	r0, r4
 800b320:	f00a fc01 	bl	8015b26 <lv_label_dot_tmp_free>
}
 800b324:	4630      	mov	r0, r6
 800b326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 800b32a:	2f04      	cmp	r7, #4
 800b32c:	d106      	bne.n	800b33c <lv_label_signal+0x50>
        lv_label_revert_dots(label);
 800b32e:	4620      	mov	r0, r4
 800b330:	f7ff fc66 	bl	800ac00 <lv_label_revert_dots>
        lv_label_refr_text(label);
 800b334:	4620      	mov	r0, r4
 800b336:	f7ff fe45 	bl	800afc4 <lv_label_refr_text>
 800b33a:	e7f3      	b.n	800b324 <lv_label_signal+0x38>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 800b33c:	2f02      	cmp	r7, #2
 800b33e:	d114      	bne.n	800b36a <lv_label_signal+0x7e>
 800b340:	8a23      	ldrh	r3, [r4, #16]
 800b342:	8aa2      	ldrh	r2, [r4, #20]
 800b344:	8829      	ldrh	r1, [r5, #0]
 800b346:	1ad2      	subs	r2, r2, r3
 800b348:	88ab      	ldrh	r3, [r5, #4]
 800b34a:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
 800b34c:	b212      	sxth	r2, r2
 800b34e:	b21b      	sxth	r3, r3
 800b350:	429a      	cmp	r2, r3
 800b352:	d1ec      	bne.n	800b32e <lv_label_signal+0x42>
    return area_p->y2 - area_p->y1 + 1;
 800b354:	8a63      	ldrh	r3, [r4, #18]
 800b356:	8ae2      	ldrh	r2, [r4, #22]
 800b358:	8869      	ldrh	r1, [r5, #2]
 800b35a:	1ad2      	subs	r2, r2, r3
 800b35c:	88eb      	ldrh	r3, [r5, #6]
 800b35e:	1a5b      	subs	r3, r3, r1
 800b360:	b212      	sxth	r2, r2
 800b362:	b21b      	sxth	r3, r3
 800b364:	429a      	cmp	r2, r3
 800b366:	d1e2      	bne.n	800b32e <lv_label_signal+0x42>
 800b368:	e7dc      	b.n	800b324 <lv_label_signal+0x38>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 800b36a:	2f05      	cmp	r7, #5
 800b36c:	d11d      	bne.n	800b3aa <lv_label_signal+0xbe>
        if(ext->body_draw) {
 800b36e:	7fc3      	ldrb	r3, [r0, #31]
 800b370:	07db      	lsls	r3, r3, #31
 800b372:	d5d7      	bpl.n	800b324 <lv_label_signal+0x38>
 * @return pointer to the label's style
 */
static inline const lv_style_t * lv_label_get_style(const lv_obj_t * label, lv_label_style_t type)
{
    (void)type; /*Unused*/
    return lv_obj_get_style(label);
 800b374:	4620      	mov	r0, r4
 800b376:	f7f7 fce3 	bl	8002d40 <lv_obj_get_style>
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.right);
 800b37a:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 800b37e:	f9b0 201c 	ldrsh.w	r2, [r0, #28]
 800b382:	4293      	cmp	r3, r2
 800b384:	bfb8      	it	lt
 800b386:	4613      	movlt	r3, r2
 800b388:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.top);
 800b38c:	4293      	cmp	r3, r2
 800b38e:	bfb8      	it	lt
 800b390:	4613      	movlt	r3, r2
 800b392:	f9b0 2016 	ldrsh.w	r2, [r0, #22]
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.bottom);
 800b396:	4293      	cmp	r3, r2
 800b398:	bfb8      	it	lt
 800b39a:	4613      	movlt	r3, r2
 800b39c:	f9b0 2018 	ldrsh.w	r2, [r0, #24]
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	bfb8      	it	lt
 800b3a4:	4613      	movlt	r3, r2
 800b3a6:	86a3      	strh	r3, [r4, #52]	; 0x34
 800b3a8:	e7bc      	b.n	800b324 <lv_label_signal+0x38>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800b3aa:	2f06      	cmp	r7, #6
 800b3ac:	d1ba      	bne.n	800b324 <lv_label_signal+0x38>
 800b3ae:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 800b3b0:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800b3b4:	b2da      	uxtb	r2, r3
 800b3b6:	b119      	cbz	r1, 800b3c0 <lv_label_signal+0xd4>
 800b3b8:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 800b3ba:	2b07      	cmp	r3, #7
 800b3bc:	d1f8      	bne.n	800b3b0 <lv_label_signal+0xc4>
 800b3be:	461a      	mov	r2, r3
        buf->type[i] = "lv_label";
 800b3c0:	4b02      	ldr	r3, [pc, #8]	; (800b3cc <lv_label_signal+0xe0>)
 800b3c2:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 800b3c6:	e7ad      	b.n	800b324 <lv_label_signal+0x38>
 800b3c8:	20028998 	.word	0x20028998
 800b3cc:	0801c5f4 	.word	0x0801c5f4

0800b3d0 <lv_label_set_text>:
{
 800b3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3d4:	4607      	mov	r7, r0
 800b3d6:	460d      	mov	r5, r1
    lv_obj_invalidate(label);
 800b3d8:	f003 ff0a 	bl	800f1f0 <lv_obj_invalidate>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800b3dc:	4638      	mov	r0, r7
 800b3de:	f004 fb6f 	bl	800fac0 <lv_obj_get_ext_attr>
 800b3e2:	4604      	mov	r4, r0
    if(text == NULL) {
 800b3e4:	b925      	cbnz	r5, 800b3f0 <lv_label_set_text+0x20>
        lv_label_refr_text(label);
 800b3e6:	4638      	mov	r0, r7
}
 800b3e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        lv_label_refr_text(label);
 800b3ec:	f7ff bdea 	b.w	800afc4 <lv_label_refr_text>
    if(ext->text == text) {
 800b3f0:	6806      	ldr	r6, [r0, #0]
 800b3f2:	42ae      	cmp	r6, r5
 800b3f4:	d110      	bne.n	800b418 <lv_label_set_text+0x48>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 800b3f6:	4630      	mov	r0, r6
 800b3f8:	f00b f9a7 	bl	801674a <strlen>
 800b3fc:	1c41      	adds	r1, r0, #1
 800b3fe:	4630      	mov	r0, r6
 800b400:	f7f8 f9a2 	bl	8003748 <lv_mem_realloc>
 800b404:	6020      	str	r0, [r4, #0]
        lv_mem_assert(ext->text);
 800b406:	2800      	cmp	r0, #0
 800b408:	d1ed      	bne.n	800b3e6 <lv_label_set_text+0x16>
 800b40a:	4b14      	ldr	r3, [pc, #80]	; (800b45c <lv_label_set_text+0x8c>)
 800b40c:	22b7      	movs	r2, #183	; 0xb7
 800b40e:	4914      	ldr	r1, [pc, #80]	; (800b460 <lv_label_set_text+0x90>)
 800b410:	2003      	movs	r0, #3
 800b412:	f7f8 f8ff 	bl	8003614 <lv_log_add>
 800b416:	e7fe      	b.n	800b416 <lv_label_set_text+0x46>
        uint32_t len = strlen(text) + 1;
 800b418:	4628      	mov	r0, r5
 800b41a:	f00b f996 	bl	801674a <strlen>
 800b41e:	f100 0801 	add.w	r8, r0, #1
        if(ext->text != NULL && ext->static_txt == 0) {
 800b422:	6820      	ldr	r0, [r4, #0]
 800b424:	b130      	cbz	r0, 800b434 <lv_label_set_text+0x64>
 800b426:	7fa3      	ldrb	r3, [r4, #30]
 800b428:	f013 0608 	ands.w	r6, r3, #8
 800b42c:	d102      	bne.n	800b434 <lv_label_set_text+0x64>
            lv_mem_free(ext->text);
 800b42e:	f7f8 f961 	bl	80036f4 <lv_mem_free>
            ext->text = NULL;
 800b432:	6026      	str	r6, [r4, #0]
        ext->text = lv_mem_alloc(len);
 800b434:	4640      	mov	r0, r8
 800b436:	f7f8 f91b 	bl	8003670 <lv_mem_alloc>
 800b43a:	6020      	str	r0, [r4, #0]
        lv_mem_assert(ext->text);
 800b43c:	b930      	cbnz	r0, 800b44c <lv_label_set_text+0x7c>
 800b43e:	4b07      	ldr	r3, [pc, #28]	; (800b45c <lv_label_set_text+0x8c>)
 800b440:	22c2      	movs	r2, #194	; 0xc2
 800b442:	4907      	ldr	r1, [pc, #28]	; (800b460 <lv_label_set_text+0x90>)
 800b444:	2003      	movs	r0, #3
 800b446:	f7f8 f8e5 	bl	8003614 <lv_log_add>
 800b44a:	e7fe      	b.n	800b44a <lv_label_set_text+0x7a>
        strcpy(ext->text, text);
 800b44c:	4629      	mov	r1, r5
 800b44e:	f00b f972 	bl	8016736 <strcpy>
        ext->static_txt = 0; /*Now the text is dynamically allocated*/
 800b452:	7fa3      	ldrb	r3, [r4, #30]
 800b454:	f36f 03c3 	bfc	r3, #3, #1
 800b458:	77a3      	strb	r3, [r4, #30]
 800b45a:	e7c4      	b.n	800b3e6 <lv_label_set_text+0x16>
 800b45c:	080176f4 	.word	0x080176f4
 800b460:	0801c779 	.word	0x0801c779

0800b464 <lv_label_set_long_mode>:
{
 800b464:	b570      	push	{r4, r5, r6, lr}
 800b466:	4605      	mov	r5, r0
 800b468:	460e      	mov	r6, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800b46a:	f004 fb29 	bl	800fac0 <lv_obj_get_ext_attr>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
 800b46e:	4919      	ldr	r1, [pc, #100]	; (800b4d4 <lv_label_set_long_mode+0x70>)
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800b470:	4604      	mov	r4, r0
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
 800b472:	4628      	mov	r0, r5
 800b474:	f7f8 fbbe 	bl	8003bf4 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_y);
 800b478:	4917      	ldr	r1, [pc, #92]	; (800b4d8 <lv_label_set_long_mode+0x74>)
 800b47a:	4628      	mov	r0, r5
 800b47c:	f7f8 fbba 	bl	8003bf4 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 800b480:	4916      	ldr	r1, [pc, #88]	; (800b4dc <lv_label_set_long_mode+0x78>)
 800b482:	4628      	mov	r0, r5
 800b484:	f7f8 fbb6 	bl	8003bf4 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 800b488:	4915      	ldr	r1, [pc, #84]	; (800b4e0 <lv_label_set_long_mode+0x7c>)
 800b48a:	4628      	mov	r0, r5
 800b48c:	f7f8 fbb2 	bl	8003bf4 <lv_anim_del>
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
 800b490:	1ef2      	subs	r2, r6, #3
    ext->offset.x = 0;
 800b492:	2300      	movs	r3, #0
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
 800b494:	2a02      	cmp	r2, #2
    ext->offset.x = 0;
 800b496:	8163      	strh	r3, [r4, #10]
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
 800b498:	bf8c      	ite	hi
 800b49a:	2200      	movhi	r2, #0
 800b49c:	2201      	movls	r2, #1
    ext->offset.y = 0;
 800b49e:	81a3      	strh	r3, [r4, #12]
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
 800b4a0:	7fa3      	ldrb	r3, [r4, #30]
 800b4a2:	f362 13c7 	bfi	r3, r2, #7, #1
 800b4a6:	77a3      	strb	r3, [r4, #30]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 800b4a8:	f003 0307 	and.w	r3, r3, #7
 800b4ac:	2b02      	cmp	r3, #2
 800b4ae:	d107      	bne.n	800b4c0 <lv_label_set_long_mode+0x5c>
 800b4b0:	8922      	ldrh	r2, [r4, #8]
 800b4b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d002      	beq.n	800b4c0 <lv_label_set_long_mode+0x5c>
        lv_label_revert_dots(label);
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	f7ff fba0 	bl	800ac00 <lv_label_revert_dots>
    ext->long_mode = long_mode;
 800b4c0:	7fa3      	ldrb	r3, [r4, #30]
    lv_label_refr_text(label);
 800b4c2:	4628      	mov	r0, r5
    ext->long_mode = long_mode;
 800b4c4:	f366 0302 	bfi	r3, r6, #0, #3
 800b4c8:	77a3      	strb	r3, [r4, #30]
}
 800b4ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_label_refr_text(label);
 800b4ce:	f7ff bd79 	b.w	800afc4 <lv_label_refr_text>
 800b4d2:	bf00      	nop
 800b4d4:	0800f33b 	.word	0x0800f33b
 800b4d8:	0800f34d 	.word	0x0800f34d
 800b4dc:	08015b61 	.word	0x08015b61
 800b4e0:	08015b4b 	.word	0x08015b4b

0800b4e4 <lv_label_create>:
{
 800b4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4e8:	460e      	mov	r6, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
 800b4ea:	f7f7 fa97 	bl	8002a1c <lv_obj_create>
    lv_mem_assert(new_label);
 800b4ee:	4604      	mov	r4, r0
 800b4f0:	b930      	cbnz	r0, 800b500 <lv_label_create+0x1c>
 800b4f2:	4b5e      	ldr	r3, [pc, #376]	; (800b66c <lv_label_create+0x188>)
 800b4f4:	224b      	movs	r2, #75	; 0x4b
 800b4f6:	495e      	ldr	r1, [pc, #376]	; (800b670 <lv_label_create+0x18c>)
 800b4f8:	2003      	movs	r0, #3
 800b4fa:	f7f8 f88b 	bl	8003614 <lv_log_add>
 800b4fe:	e7fe      	b.n	800b4fe <lv_label_create+0x1a>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
 800b500:	4d5c      	ldr	r5, [pc, #368]	; (800b674 <lv_label_create+0x190>)
 800b502:	682b      	ldr	r3, [r5, #0]
 800b504:	b913      	cbnz	r3, 800b50c <lv_label_create+0x28>
 800b506:	f004 fad7 	bl	800fab8 <lv_obj_get_signal_cb>
 800b50a:	6028      	str	r0, [r5, #0]
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
 800b50c:	2120      	movs	r1, #32
 800b50e:	4620      	mov	r0, r4
 800b510:	f003 fe67 	bl	800f1e2 <lv_obj_allocate_ext_attr>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
 800b514:	4620      	mov	r0, r4
 800b516:	f004 fad3 	bl	800fac0 <lv_obj_get_ext_attr>
    lv_mem_assert(ext);
 800b51a:	4605      	mov	r5, r0
 800b51c:	b930      	cbnz	r0, 800b52c <lv_label_create+0x48>
 800b51e:	4b53      	ldr	r3, [pc, #332]	; (800b66c <lv_label_create+0x188>)
 800b520:	2254      	movs	r2, #84	; 0x54
 800b522:	4953      	ldr	r1, [pc, #332]	; (800b670 <lv_label_create+0x18c>)
 800b524:	2003      	movs	r0, #3
 800b526:	f7f8 f875 	bl	8003614 <lv_log_add>
 800b52a:	e7fe      	b.n	800b52a <lv_label_create+0x46>
    ext->dot_end    = LV_LABEL_DOT_END_INV;
 800b52c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ext->text       = NULL;
 800b530:	2300      	movs	r3, #0
    lv_obj_set_design_cb(new_label, lv_label_design);
 800b532:	4951      	ldr	r1, [pc, #324]	; (800b678 <lv_label_create+0x194>)
    ext->dot_end    = LV_LABEL_DOT_END_INV;
 800b534:	6082      	str	r2, [r0, #8]
    ext->hint.line_start = -1;
 800b536:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ext->offset.y = 0;
 800b53a:	8183      	strh	r3, [r0, #12]
    ext->hint.coord_y    = 0;
 800b53c:	6183      	str	r3, [r0, #24]
    ext->hint.y          = 0;
 800b53e:	e9c0 2304 	strd	r2, r3, [r0, #16]
    ext->dot.tmp_ptr   = NULL;
 800b542:	e9c0 3300 	strd	r3, r3, [r0]
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 800b546:	69c2      	ldr	r2, [r0, #28]
 800b548:	f1a3 7360 	sub.w	r3, r3, #58720256	; 0x3800000
 800b54c:	4013      	ands	r3, r2
 800b54e:	f043 0319 	orr.w	r3, r3, #25
 800b552:	61c3      	str	r3, [r0, #28]
    lv_obj_set_design_cb(new_label, lv_label_design);
 800b554:	4620      	mov	r0, r4
 800b556:	f003 fe42 	bl	800f1de <lv_obj_set_design_cb>
    lv_obj_set_signal_cb(new_label, lv_label_signal);
 800b55a:	4948      	ldr	r1, [pc, #288]	; (800b67c <lv_label_create+0x198>)
 800b55c:	4620      	mov	r0, r4
 800b55e:	f003 fe3c 	bl	800f1da <lv_obj_set_signal_cb>
    if(copy == NULL) {
 800b562:	b996      	cbnz	r6, 800b58a <lv_label_create+0xa6>
        lv_obj_set_click(new_label, false);
 800b564:	4631      	mov	r1, r6
 800b566:	4620      	mov	r0, r4
 800b568:	f003 fda1 	bl	800f0ae <lv_obj_set_click>
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
 800b56c:	4631      	mov	r1, r6
 800b56e:	4620      	mov	r0, r4
 800b570:	f7ff ff78 	bl	800b464 <lv_label_set_long_mode>
        lv_label_set_text(new_label, "Text");
 800b574:	4942      	ldr	r1, [pc, #264]	; (800b680 <lv_label_create+0x19c>)
 800b576:	4620      	mov	r0, r4
 800b578:	f7ff ff2a 	bl	800b3d0 <lv_label_set_text>
    lv_obj_set_style(label, style);
 800b57c:	4631      	mov	r1, r6
 800b57e:	4620      	mov	r0, r4
 800b580:	f004 f9e0 	bl	800f944 <lv_obj_set_style>
}
 800b584:	4620      	mov	r0, r4
 800b586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 800b58a:	4630      	mov	r0, r6
 800b58c:	f004 fa98 	bl	800fac0 <lv_obj_get_ext_attr>
 800b590:	4607      	mov	r7, r0
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
 800b592:	4630      	mov	r0, r6
 800b594:	f00a fc28 	bl	8015de8 <lv_label_get_long_mode>
 800b598:	4601      	mov	r1, r0
 800b59a:	4620      	mov	r0, r4
 800b59c:	f7ff ff62 	bl	800b464 <lv_label_set_long_mode>
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
 800b5a0:	4630      	mov	r0, r6
 800b5a2:	f00a fc2f 	bl	8015e04 <lv_label_get_recolor>
 800b5a6:	4601      	mov	r1, r0
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f00a fc53 	bl	8015e54 <lv_label_set_recolor>
        lv_label_set_body_draw(new_label, lv_label_get_body_draw(copy));
 800b5ae:	4630      	mov	r0, r6
 800b5b0:	f00a fc2f 	bl	8015e12 <lv_label_get_body_draw>
 800b5b4:	4601      	mov	r1, r0
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	f00a fbfb 	bl	8015db2 <lv_label_set_body_draw>
        lv_label_set_align(new_label, lv_label_get_align(copy));
 800b5bc:	4630      	mov	r0, r6
 800b5be:	f00a fc1a 	bl	8015df6 <lv_label_get_align>
 800b5c2:	4601      	mov	r1, r0
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	f00a fbe1 	bl	8015d8c <lv_label_set_align>
        if(copy_ext->static_txt == 0)
 800b5ca:	7fbb      	ldrb	r3, [r7, #30]
            lv_label_set_text(new_label, lv_label_get_text(copy));
 800b5cc:	4630      	mov	r0, r6
        if(copy_ext->static_txt == 0)
 800b5ce:	071a      	lsls	r2, r3, #28
 800b5d0:	d41c      	bmi.n	800b60c <lv_label_create+0x128>
            lv_label_set_text(new_label, lv_label_get_text(copy));
 800b5d2:	f00a fc04 	bl	8015dde <lv_label_get_text>
 800b5d6:	4601      	mov	r1, r0
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f7ff fef9 	bl	800b3d0 <lv_label_set_text>
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
 800b5de:	7fbb      	ldrb	r3, [r7, #30]
 800b5e0:	f003 0307 	and.w	r3, r3, #7
 800b5e4:	2b02      	cmp	r3, #2
 800b5e6:	d122      	bne.n	800b62e <lv_label_create+0x14a>
            ext->text = lv_mem_realloc(ext->text, lv_mem_get_size(copy_ext->text));
 800b5e8:	682e      	ldr	r6, [r5, #0]
 800b5ea:	6838      	ldr	r0, [r7, #0]
 800b5ec:	f7f8 f874 	bl	80036d8 <lv_mem_get_size>
 800b5f0:	4601      	mov	r1, r0
 800b5f2:	4630      	mov	r0, r6
 800b5f4:	f7f8 f8a8 	bl	8003748 <lv_mem_realloc>
 800b5f8:	4606      	mov	r6, r0
 800b5fa:	6028      	str	r0, [r5, #0]
            lv_mem_assert(ext->text);
 800b5fc:	b968      	cbnz	r0, 800b61a <lv_label_create+0x136>
 800b5fe:	4b1b      	ldr	r3, [pc, #108]	; (800b66c <lv_label_create+0x188>)
 800b600:	2288      	movs	r2, #136	; 0x88
 800b602:	491b      	ldr	r1, [pc, #108]	; (800b670 <lv_label_create+0x18c>)
 800b604:	2003      	movs	r0, #3
 800b606:	f7f8 f805 	bl	8003614 <lv_log_add>
 800b60a:	e7fe      	b.n	800b60a <lv_label_create+0x126>
            lv_label_set_static_text(new_label, lv_label_get_text(copy));
 800b60c:	f00a fbe7 	bl	8015dde <lv_label_get_text>
 800b610:	4601      	mov	r1, r0
 800b612:	4620      	mov	r0, r4
 800b614:	f00a fc04 	bl	8015e20 <lv_label_set_static_text>
 800b618:	e7e1      	b.n	800b5de <lv_label_create+0xfa>
            memcpy(ext->text, copy_ext->text, lv_mem_get_size(copy_ext->text));
 800b61a:	f8d7 8000 	ldr.w	r8, [r7]
 800b61e:	4640      	mov	r0, r8
 800b620:	f7f8 f85a 	bl	80036d8 <lv_mem_get_size>
 800b624:	4641      	mov	r1, r8
 800b626:	4602      	mov	r2, r0
 800b628:	4630      	mov	r0, r6
 800b62a:	f00b f8a1 	bl	8016770 <memcpy>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
 800b62e:	7ffb      	ldrb	r3, [r7, #31]
 800b630:	079b      	lsls	r3, r3, #30
 800b632:	d515      	bpl.n	800b660 <lv_label_create+0x17c>
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	b198      	cbz	r0, 800b660 <lv_label_create+0x17c>
            int len = strlen(copy_ext->dot.tmp_ptr);
 800b638:	f00b f887 	bl	801674a <strlen>
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
 800b63c:	6869      	ldr	r1, [r5, #4]
 800b63e:	b282      	uxth	r2, r0
 800b640:	4620      	mov	r0, r4
 800b642:	f7ff fb15 	bl	800ac70 <lv_label_set_dot_tmp>
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
 800b646:	7ffb      	ldrb	r3, [r7, #31]
        lv_obj_refresh_style(new_label);
 800b648:	4620      	mov	r0, r4
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
 800b64a:	7fea      	ldrb	r2, [r5, #31]
 800b64c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b650:	f363 0241 	bfi	r2, r3, #1, #1
 800b654:	77ea      	strb	r2, [r5, #31]
        ext->dot_end       = copy_ext->dot_end;
 800b656:	893b      	ldrh	r3, [r7, #8]
 800b658:	812b      	strh	r3, [r5, #8]
        lv_obj_refresh_style(new_label);
 800b65a:	f004 f8b0 	bl	800f7be <lv_obj_refresh_style>
    return new_label;
 800b65e:	e791      	b.n	800b584 <lv_label_create+0xa0>
            memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
 800b660:	2204      	movs	r2, #4
 800b662:	18b9      	adds	r1, r7, r2
 800b664:	18a8      	adds	r0, r5, r2
 800b666:	f00b f883 	bl	8016770 <memcpy>
 800b66a:	e7ec      	b.n	800b646 <lv_label_create+0x162>
 800b66c:	080176f4 	.word	0x080176f4
 800b670:	0801c779 	.word	0x0801c779
 800b674:	20028998 	.word	0x20028998
 800b678:	08015b77 	.word	0x08015b77
 800b67c:	0800b2ed 	.word	0x0800b2ed
 800b680:	0801c74a 	.word	0x0801c74a

0800b684 <lv_label_ins_text>:
{
 800b684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b688:	4607      	mov	r7, r0
 800b68a:	460d      	mov	r5, r1
 800b68c:	4690      	mov	r8, r2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800b68e:	f004 fa17 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->static_txt != 0) return;
 800b692:	7f83      	ldrb	r3, [r0, #30]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800b694:	4604      	mov	r4, r0
    if(ext->static_txt != 0) return;
 800b696:	071b      	lsls	r3, r3, #28
 800b698:	d42a      	bmi.n	800b6f0 <lv_label_ins_text+0x6c>
    lv_obj_invalidate(label);
 800b69a:	4638      	mov	r0, r7
 800b69c:	f003 fda8 	bl	800f1f0 <lv_obj_invalidate>
    uint32_t old_len = strlen(ext->text);
 800b6a0:	6820      	ldr	r0, [r4, #0]
 800b6a2:	f00b f852 	bl	801674a <strlen>
 800b6a6:	4606      	mov	r6, r0
    uint32_t ins_len = strlen(txt);
 800b6a8:	4640      	mov	r0, r8
 800b6aa:	f00b f84e 	bl	801674a <strlen>
    uint32_t new_len = ins_len + old_len;
 800b6ae:	1831      	adds	r1, r6, r0
    ext->text        = lv_mem_realloc(ext->text, new_len + 1);
 800b6b0:	6820      	ldr	r0, [r4, #0]
 800b6b2:	3101      	adds	r1, #1
 800b6b4:	f7f8 f848 	bl	8003748 <lv_mem_realloc>
 800b6b8:	6020      	str	r0, [r4, #0]
    lv_mem_assert(ext->text);
 800b6ba:	b938      	cbnz	r0, 800b6cc <lv_label_ins_text+0x48>
 800b6bc:	4b0d      	ldr	r3, [pc, #52]	; (800b6f4 <lv_label_ins_text+0x70>)
 800b6be:	f240 22f9 	movw	r2, #761	; 0x2f9
 800b6c2:	490d      	ldr	r1, [pc, #52]	; (800b6f8 <lv_label_ins_text+0x74>)
 800b6c4:	2003      	movs	r0, #3
 800b6c6:	f7f7 ffa5 	bl	8003614 <lv_log_add>
 800b6ca:	e7fe      	b.n	800b6ca <lv_label_ins_text+0x46>
    if(pos == LV_LABEL_POS_LAST) {
 800b6cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b6d0:	429d      	cmp	r5, r3
 800b6d2:	d103      	bne.n	800b6dc <lv_label_ins_text+0x58>
        pos = lv_txt_get_encoded_length(ext->text);
 800b6d4:	4b09      	ldr	r3, [pc, #36]	; (800b6fc <lv_label_ins_text+0x78>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4798      	blx	r3
 800b6da:	4605      	mov	r5, r0
    lv_txt_ins(ext->text, pos, txt);
 800b6dc:	6820      	ldr	r0, [r4, #0]
 800b6de:	4642      	mov	r2, r8
 800b6e0:	4629      	mov	r1, r5
 800b6e2:	f7f8 f99d 	bl	8003a20 <lv_txt_ins>
    lv_label_refr_text(label);
 800b6e6:	4638      	mov	r0, r7
}
 800b6e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_label_refr_text(label);
 800b6ec:	f7ff bc6a 	b.w	800afc4 <lv_label_refr_text>
}
 800b6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6f4:	080176f4 	.word	0x080176f4
 800b6f8:	0801c779 	.word	0x0801c779
 800b6fc:	2002da58 	.word	0x2002da58

0800b700 <lv_slider_create>:
 * @param par pointer to an object, it will be the parent of the new slider
 * @param copy pointer to a slider object, if not NULL then the new object will be copied from it
 * @return pointer to the created slider
 */
lv_obj_t * lv_slider_create(lv_obj_t * par, const lv_obj_t * copy)
{
 800b700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b702:	460f      	mov	r7, r1
    LV_LOG_TRACE("slider create started");

    /*Create the ancestor slider*/
    lv_obj_t * new_slider = lv_bar_create(par, copy);
 800b704:	f7fb f97a 	bl	80069fc <lv_bar_create>
    lv_mem_assert(new_slider);
 800b708:	4604      	mov	r4, r0
 800b70a:	b930      	cbnz	r0, 800b71a <lv_slider_create+0x1a>
 800b70c:	4b2f      	ldr	r3, [pc, #188]	; (800b7cc <lv_slider_create+0xcc>)
 800b70e:	223c      	movs	r2, #60	; 0x3c
 800b710:	492f      	ldr	r1, [pc, #188]	; (800b7d0 <lv_slider_create+0xd0>)
 800b712:	2003      	movs	r0, #3
 800b714:	f7f7 ff7e 	bl	8003614 <lv_log_add>
 800b718:	e7fe      	b.n	800b718 <lv_slider_create+0x18>
    if(new_slider == NULL) return NULL;

    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_slider);
 800b71a:	4d2e      	ldr	r5, [pc, #184]	; (800b7d4 <lv_slider_create+0xd4>)
 800b71c:	682b      	ldr	r3, [r5, #0]
 800b71e:	b913      	cbnz	r3, 800b726 <lv_slider_create+0x26>
 800b720:	f004 f9cc 	bl	800fabc <lv_obj_get_design_cb>
 800b724:	6028      	str	r0, [r5, #0]
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_slider);
 800b726:	4d2c      	ldr	r5, [pc, #176]	; (800b7d8 <lv_slider_create+0xd8>)
 800b728:	682b      	ldr	r3, [r5, #0]
 800b72a:	b91b      	cbnz	r3, 800b734 <lv_slider_create+0x34>
 800b72c:	4620      	mov	r0, r4
 800b72e:	f004 f9c3 	bl	800fab8 <lv_obj_get_signal_cb>
 800b732:	6028      	str	r0, [r5, #0]

    /*Allocate the slider type specific extended data*/
    lv_slider_ext_t * ext = lv_obj_allocate_ext_attr(new_slider, sizeof(lv_slider_ext_t));
 800b734:	211c      	movs	r1, #28
 800b736:	4620      	mov	r0, r4
 800b738:	f003 fd53 	bl	800f1e2 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 800b73c:	4605      	mov	r5, r0
 800b73e:	b930      	cbnz	r0, 800b74e <lv_slider_create+0x4e>
 800b740:	4b22      	ldr	r3, [pc, #136]	; (800b7cc <lv_slider_create+0xcc>)
 800b742:	2244      	movs	r2, #68	; 0x44
 800b744:	4922      	ldr	r1, [pc, #136]	; (800b7d0 <lv_slider_create+0xd0>)
 800b746:	2003      	movs	r0, #3
 800b748:	f7f7 ff64 	bl	8003614 <lv_log_add>
 800b74c:	e7fe      	b.n	800b74c <lv_slider_create+0x4c>
    if(ext == NULL) return NULL;

    /*Initialize the allocated 'ext' */
    ext->drag_value = LV_SLIDER_NOT_PRESSED;
 800b74e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    ext->style_knob = &lv_style_pretty;
    ext->knob_in    = 0;

    /*The signal and design functions are not copied so set them here*/
    lv_obj_set_signal_cb(new_slider, lv_slider_signal);
 800b752:	4922      	ldr	r1, [pc, #136]	; (800b7dc <lv_slider_create+0xdc>)
    ext->drag_value = LV_SLIDER_NOT_PRESSED;
 800b754:	8303      	strh	r3, [r0, #24]
    ext->style_knob = &lv_style_pretty;
 800b756:	4b22      	ldr	r3, [pc, #136]	; (800b7e0 <lv_slider_create+0xe0>)
 800b758:	6143      	str	r3, [r0, #20]
    ext->knob_in    = 0;
 800b75a:	7e83      	ldrb	r3, [r0, #26]
 800b75c:	f36f 0300 	bfc	r3, #0, #1
 800b760:	7683      	strb	r3, [r0, #26]
    lv_obj_set_signal_cb(new_slider, lv_slider_signal);
 800b762:	4620      	mov	r0, r4
 800b764:	f003 fd39 	bl	800f1da <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_slider, lv_slider_design);
 800b768:	491e      	ldr	r1, [pc, #120]	; (800b7e4 <lv_slider_create+0xe4>)
 800b76a:	4620      	mov	r0, r4
 800b76c:	f003 fd37 	bl	800f1de <lv_obj_set_design_cb>

    /*Init the new slider slider*/
    if(copy == NULL) {
 800b770:	b9f7      	cbnz	r7, 800b7b0 <lv_slider_create+0xb0>
        lv_obj_set_click(new_slider, true);
 800b772:	2101      	movs	r1, #1
 800b774:	4620      	mov	r0, r4
 800b776:	f003 fc9a 	bl	800f0ae <lv_obj_set_click>
        lv_obj_set_protect(new_slider, LV_PROTECT_PRESS_LOST);
 800b77a:	2110      	movs	r1, #16
 800b77c:	4620      	mov	r0, r4
 800b77e:	f003 fcc0 	bl	800f102 <lv_obj_set_protect>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 800b782:	f7f9 fe63 	bl	800544c <lv_theme_get_current>
        if(th) {
 800b786:	4606      	mov	r6, r0
 800b788:	b180      	cbz	r0, 800b7ac <lv_slider_create+0xac>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_BG, th->style.slider.bg);
 800b78a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800b78c:	4639      	mov	r1, r7
 800b78e:	4620      	mov	r0, r4
 800b790:	f00a fb73 	bl	8015e7a <lv_slider_set_style>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_INDIC, th->style.slider.indic);
 800b794:	6e32      	ldr	r2, [r6, #96]	; 0x60
 800b796:	2101      	movs	r1, #1
 800b798:	4620      	mov	r0, r4
 800b79a:	f00a fb6e 	bl	8015e7a <lv_slider_set_style>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_KNOB, th->style.slider.knob);
 800b79e:	6e72      	ldr	r2, [r6, #100]	; 0x64
        } else {
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_KNOB, ext->style_knob);
 800b7a0:	2102      	movs	r1, #2
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f00a fb69 	bl	8015e7a <lv_slider_set_style>
    }

    LV_LOG_INFO("slider created");

    return new_slider;
}
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_KNOB, ext->style_knob);
 800b7ac:	696a      	ldr	r2, [r5, #20]
 800b7ae:	e7f7      	b.n	800b7a0 <lv_slider_create+0xa0>
        lv_slider_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 800b7b0:	4638      	mov	r0, r7
 800b7b2:	f004 f985 	bl	800fac0 <lv_obj_get_ext_attr>
        ext->style_knob            = copy_ext->style_knob;
 800b7b6:	6943      	ldr	r3, [r0, #20]
        ext->knob_in               = copy_ext->knob_in;
 800b7b8:	7e82      	ldrb	r2, [r0, #26]
        lv_obj_refresh_style(new_slider);
 800b7ba:	4620      	mov	r0, r4
        ext->style_knob            = copy_ext->style_knob;
 800b7bc:	616b      	str	r3, [r5, #20]
        ext->knob_in               = copy_ext->knob_in;
 800b7be:	7eab      	ldrb	r3, [r5, #26]
 800b7c0:	f362 0300 	bfi	r3, r2, #0, #1
 800b7c4:	76ab      	strb	r3, [r5, #26]
        lv_obj_refresh_style(new_slider);
 800b7c6:	f003 fffa 	bl	800f7be <lv_obj_refresh_style>
    return new_slider;
 800b7ca:	e7ed      	b.n	800b7a8 <lv_slider_create+0xa8>
 800b7cc:	080176f4 	.word	0x080176f4
 800b7d0:	0801c7db 	.word	0x0801c7db
 800b7d4:	2002899c 	.word	0x2002899c
 800b7d8:	200289a0 	.word	0x200289a0
 800b7dc:	0800b7e9 	.word	0x0800b7e9
 800b7e0:	2002059c 	.word	0x2002059c
 800b7e4:	08015efb 	.word	0x08015efb

0800b7e8 <lv_slider_signal>:
static lv_res_t lv_slider_signal(lv_obj_t * slider, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(slider, sign, param);
 800b7e8:	4b9a      	ldr	r3, [pc, #616]	; (800ba54 <lv_slider_signal+0x26c>)
{
 800b7ea:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    res = ancestor_signal(slider, sign, param);
 800b7ee:	681b      	ldr	r3, [r3, #0]
{
 800b7f0:	4604      	mov	r4, r0
 800b7f2:	468a      	mov	sl, r1
 800b7f4:	4691      	mov	r9, r2
    res = ancestor_signal(slider, sign, param);
 800b7f6:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 800b7f8:	2801      	cmp	r0, #1
    res = ancestor_signal(slider, sign, param);
 800b7fa:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 800b7fc:	d112      	bne.n	800b824 <lv_slider_signal+0x3c>

    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 800b7fe:	4620      	mov	r0, r4
 800b800:	f004 f95e 	bl	800fac0 <lv_obj_get_ext_attr>
 800b804:	4606      	mov	r6, r0
    lv_point_t p;
    lv_coord_t w = lv_obj_get_width(slider);
 800b806:	4620      	mov	r0, r4
 800b808:	f004 f8bf 	bl	800f98a <lv_obj_get_width>
 800b80c:	4680      	mov	r8, r0
    lv_coord_t h = lv_obj_get_height(slider);
 800b80e:	4620      	mov	r0, r4
 800b810:	f004 f8c1 	bl	800f996 <lv_obj_get_height>

    if(sign == LV_SIGNAL_PRESSED) {
 800b814:	f1ba 0f07 	cmp.w	sl, #7
    lv_coord_t h = lv_obj_get_height(slider);
 800b818:	4607      	mov	r7, r0
    if(sign == LV_SIGNAL_PRESSED) {
 800b81a:	d107      	bne.n	800b82c <lv_slider_signal+0x44>
        ext->drag_value = lv_slider_get_value(slider);
 800b81c:	4620      	mov	r0, r4
 800b81e:	f00a fb48 	bl	8015eb2 <lv_slider_get_value>
 800b822:	8330      	strh	r0, [r6, #24]
        }
        buf->type[i] = "lv_slider";
    }

    return res;
}
 800b824:	4628      	mov	r0, r5
 800b826:	b002      	add	sp, #8
 800b828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if(sign == LV_SIGNAL_PRESSING) {
 800b82c:	f1ba 0f08 	cmp.w	sl, #8
 800b830:	d146      	bne.n	800b8c0 <lv_slider_signal+0xd8>
        lv_indev_get_point(param, &p);
 800b832:	a901      	add	r1, sp, #4
 800b834:	4648      	mov	r0, r9
 800b836:	f003 fbed 	bl	800f014 <lv_indev_get_point>
        if(w > h) {
 800b83a:	45b8      	cmp	r8, r7
 800b83c:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 800b840:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 800b844:	dd28      	ble.n	800b898 <lv_slider_signal+0xb0>
            p.x -=
 800b846:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800b84a:	8a23      	ldrh	r3, [r4, #16]
 800b84c:	1ad2      	subs	r2, r2, r3
                slider->coords.x1 + h / 2; /*Modify the point to shift with half knob (important on the start and end)*/
 800b84e:	eb07 73d7 	add.w	r3, r7, r7, lsr #31
            p.x -=
 800b852:	eba2 0263 	sub.w	r2, r2, r3, asr #1
            tmp = (int32_t)((int32_t)p.x * (ext->bar.max_value - ext->bar.min_value + 1)) / (w - knob_w);
 800b856:	1a43      	subs	r3, r0, r1
            p.x -=
 800b858:	b212      	sxth	r2, r2
 800b85a:	f8ad 2004 	strh.w	r2, [sp, #4]
            tmp = (int32_t)((int32_t)p.x * (ext->bar.max_value - ext->bar.min_value + 1)) / (w - knob_w);
 800b85e:	fb03 2202 	mla	r2, r3, r2, r2
 800b862:	eba8 0307 	sub.w	r3, r8, r7
 800b866:	fb92 f3f3 	sdiv	r3, r2, r3
            tmp += ext->bar.min_value;
 800b86a:	fa01 f383 	sxtah	r3, r1, r3
            tmp = ext->bar.max_value - tmp; /*Invert the value: smaller value means higher y*/
 800b86e:	b21b      	sxth	r3, r3
        if(tmp < ext->bar.min_value)
 800b870:	4299      	cmp	r1, r3
 800b872:	dc03      	bgt.n	800b87c <lv_slider_signal+0x94>
        else if(tmp > ext->bar.max_value)
 800b874:	4298      	cmp	r0, r3
 800b876:	4601      	mov	r1, r0
 800b878:	bfa8      	it	ge
 800b87a:	4619      	movge	r1, r3
        if(tmp != ext->drag_value) {
 800b87c:	f9b6 3018 	ldrsh.w	r3, [r6, #24]
 800b880:	428b      	cmp	r3, r1
 800b882:	d0cf      	beq.n	800b824 <lv_slider_signal+0x3c>
            ext->drag_value = tmp;
 800b884:	8331      	strh	r1, [r6, #24]
            lv_obj_invalidate(slider);
 800b886:	4620      	mov	r0, r4
 800b888:	f003 fcb2 	bl	800f1f0 <lv_obj_invalidate>
            res = lv_event_send(slider, LV_EVENT_VALUE_CHANGED, NULL);
 800b88c:	2200      	movs	r2, #0
 800b88e:	210e      	movs	r1, #14
 800b890:	4620      	mov	r0, r4
 800b892:	f003 fc45 	bl	800f120 <lv_event_send>
 800b896:	e0a2      	b.n	800b9de <lv_slider_signal+0x1f6>
            p.y -=
 800b898:	f8bd 3006 	ldrh.w	r3, [sp, #6]
            tmp = (int32_t)((int32_t)p.y * (ext->bar.max_value - ext->bar.min_value + 1)) / (h - knob_h);
 800b89c:	eba7 0708 	sub.w	r7, r7, r8
            p.y -=
 800b8a0:	8a62      	ldrh	r2, [r4, #18]
 800b8a2:	1a9b      	subs	r3, r3, r2
                slider->coords.y1 + w / 2; /*Modify the point to shift with half knob (important on the start and end)*/
 800b8a4:	eb08 72d8 	add.w	r2, r8, r8, lsr #31
            p.y -=
 800b8a8:	eba3 0362 	sub.w	r3, r3, r2, asr #1
            tmp = (int32_t)((int32_t)p.y * (ext->bar.max_value - ext->bar.min_value + 1)) / (h - knob_h);
 800b8ac:	1a42      	subs	r2, r0, r1
            p.y -=
 800b8ae:	b21b      	sxth	r3, r3
 800b8b0:	f8ad 3006 	strh.w	r3, [sp, #6]
            tmp = (int32_t)((int32_t)p.y * (ext->bar.max_value - ext->bar.min_value + 1)) / (h - knob_h);
 800b8b4:	fb02 3303 	mla	r3, r2, r3, r3
 800b8b8:	fb93 f3f7 	sdiv	r3, r3, r7
            tmp = ext->bar.max_value - tmp; /*Invert the value: smaller value means higher y*/
 800b8bc:	1ac3      	subs	r3, r0, r3
 800b8be:	e7d6      	b.n	800b86e <lv_slider_signal+0x86>
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 800b8c0:	f1aa 0309 	sub.w	r3, sl, #9
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	d81f      	bhi.n	800b908 <lv_slider_signal+0x120>
        if(ext->drag_value != LV_SLIDER_NOT_PRESSED) lv_slider_set_value(slider, ext->drag_value, false);
 800b8c8:	f9b6 1018 	ldrsh.w	r1, [r6, #24]
 800b8cc:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 800b8d0:	d003      	beq.n	800b8da <lv_slider_signal+0xf2>
 * @param value new value
 * @param anim LV_ANIM_ON: set the value with an animation; LV_ANIM_OFF: change the value immediately
 */
static inline void lv_slider_set_value(lv_obj_t * slider, int16_t value, lv_anim_enable_t anim)
{
    lv_bar_set_value(slider, value, anim);
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	f7fb f849 	bl	800696c <lv_bar_set_value>
        ext->drag_value = LV_SLIDER_NOT_PRESSED;
 800b8da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        lv_group_t * g             = lv_obj_get_group(slider);
 800b8de:	4620      	mov	r0, r4
        ext->drag_value = LV_SLIDER_NOT_PRESSED;
 800b8e0:	8333      	strh	r3, [r6, #24]
        lv_group_t * g             = lv_obj_get_group(slider);
 800b8e2:	f004 f91b 	bl	800fb1c <lv_obj_get_group>
 800b8e6:	4604      	mov	r4, r0
        bool editing               = lv_group_get_editing(g);
 800b8e8:	f003 fb63 	bl	800efb2 <lv_group_get_editing>
 800b8ec:	4606      	mov	r6, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 800b8ee:	f7f6 ffc9 	bl	8002884 <lv_indev_get_act>
 800b8f2:	f003 fb73 	bl	800efdc <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 800b8f6:	2804      	cmp	r0, #4
 800b8f8:	d194      	bne.n	800b824 <lv_slider_signal+0x3c>
            if(editing) lv_group_set_editing(g, false);
 800b8fa:	2e00      	cmp	r6, #0
 800b8fc:	d092      	beq.n	800b824 <lv_slider_signal+0x3c>
 800b8fe:	2100      	movs	r1, #0
 800b900:	4620      	mov	r0, r4
 800b902:	f003 fb34 	bl	800ef6e <lv_group_set_editing>
 800b906:	e78d      	b.n	800b824 <lv_slider_signal+0x3c>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 800b908:	f1ba 0f02 	cmp.w	sl, #2
 800b90c:	d11e      	bne.n	800b94c <lv_slider_signal+0x164>
        if(lv_obj_get_width(slider) != lv_area_get_width(param) ||
 800b90e:	4620      	mov	r0, r4
 800b910:	f004 f83b 	bl	800f98a <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 800b914:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 800b918:	f8b9 2000 	ldrh.w	r2, [r9]
 800b91c:	3301      	adds	r3, #1
 800b91e:	1a9b      	subs	r3, r3, r2
 800b920:	b21b      	sxth	r3, r3
 800b922:	4298      	cmp	r0, r3
 800b924:	d005      	beq.n	800b932 <lv_slider_signal+0x14a>
            slider->signal_cb(slider, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 800b926:	69e3      	ldr	r3, [r4, #28]
 800b928:	2200      	movs	r2, #0
 800b92a:	2105      	movs	r1, #5
 800b92c:	4620      	mov	r0, r4
 800b92e:	4798      	blx	r3
 800b930:	e778      	b.n	800b824 <lv_slider_signal+0x3c>
           lv_obj_get_height(slider) != lv_area_get_height(param)) {
 800b932:	4620      	mov	r0, r4
 800b934:	f004 f82f 	bl	800f996 <lv_obj_get_height>
    return area_p->y2 - area_p->y1 + 1;
 800b938:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 800b93c:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 800b940:	3301      	adds	r3, #1
 800b942:	1a9b      	subs	r3, r3, r2
        if(lv_obj_get_width(slider) != lv_area_get_width(param) ||
 800b944:	b21b      	sxth	r3, r3
 800b946:	4298      	cmp	r0, r3
 800b948:	d1ed      	bne.n	800b926 <lv_slider_signal+0x13e>
 800b94a:	e76b      	b.n	800b824 <lv_slider_signal+0x3c>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 800b94c:	f1ba 0f05 	cmp.w	sl, #5
 800b950:	d147      	bne.n	800b9e2 <lv_slider_signal+0x1fa>
        const lv_style_t * style      = lv_slider_get_style(slider, LV_SLIDER_STYLE_BG);
 800b952:	2100      	movs	r1, #0
 800b954:	4620      	mov	r0, r4
 800b956:	f00a fabb 	bl	8015ed0 <lv_slider_get_style>
 800b95a:	4681      	mov	r9, r0
    lv_slider_ext_t * ext    = lv_obj_get_ext_attr(slider);
 800b95c:	4620      	mov	r0, r4
 800b95e:	f004 f8af 	bl	800fac0 <lv_obj_get_ext_attr>
        lv_coord_t shadow_w = knob_style->body.shadow.width;
 800b962:	6943      	ldr	r3, [r0, #20]
        if(ext->knob_in == 0) {
 800b964:	7eb0      	ldrb	r0, [r6, #26]
        lv_coord_t shadow_w = knob_style->body.shadow.width;
 800b966:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
        if(ext->knob_in == 0) {
 800b96a:	f010 0001 	ands.w	r0, r0, #1
 800b96e:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 800b972:	d115      	bne.n	800b9a0 <lv_slider_signal+0x1b8>
            lv_coord_t x = LV_MATH_MIN(w / 2 + 1 + shadow_w, h / 2 + 1 + shadow_w);
 800b974:	eb07 73d7 	add.w	r3, r7, r7, lsr #31
 800b978:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 800b97c:	f343 034f 	sbfx	r3, r3, #1, #16
 800b980:	f348 084f 	sbfx	r8, r8, #1, #16
 800b984:	3301      	adds	r3, #1
 800b986:	f108 0801 	add.w	r8, r8, #1
 800b98a:	4413      	add	r3, r2
 800b98c:	4490      	add	r8, r2
 800b98e:	4543      	cmp	r3, r8
 800b990:	bfa8      	it	ge
 800b992:	4643      	movge	r3, r8
 800b994:	b21b      	sxth	r3, r3
            if(slider->ext_draw_pad < x) slider->ext_draw_pad = x;
 800b996:	4299      	cmp	r1, r3
 800b998:	f6bf af44 	bge.w	800b824 <lv_slider_signal+0x3c>
 800b99c:	86a3      	strh	r3, [r4, #52]	; 0x34
 800b99e:	e741      	b.n	800b824 <lv_slider_signal+0x3c>
            pad            = LV_MATH_MIN(pad, style->body.padding.bottom);
 800b9a0:	f9b9 3016 	ldrsh.w	r3, [r9, #22]
 800b9a4:	f9b9 6018 	ldrsh.w	r6, [r9, #24]
 800b9a8:	42b3      	cmp	r3, r6
 800b9aa:	bfa8      	it	ge
 800b9ac:	4633      	movge	r3, r6
            pad            = LV_MATH_MIN(pad, style->body.padding.left);
 800b9ae:	f9b9 601a 	ldrsh.w	r6, [r9, #26]
            pad            = LV_MATH_MIN(pad, style->body.padding.bottom);
 800b9b2:	ea03 73e3 	and.w	r3, r3, r3, asr #31
            pad            = LV_MATH_MIN(pad, style->body.padding.left);
 800b9b6:	429e      	cmp	r6, r3
 800b9b8:	bfa8      	it	ge
 800b9ba:	461e      	movge	r6, r3
            pad            = LV_MATH_MIN(pad, style->body.padding.right);
 800b9bc:	f9b9 301c 	ldrsh.w	r3, [r9, #28]
 800b9c0:	42b3      	cmp	r3, r6
 800b9c2:	bfa8      	it	ge
 800b9c4:	4633      	movge	r3, r6
            if(pad < 0) pad = -pad;
 800b9c6:	b10b      	cbz	r3, 800b9cc <lv_slider_signal+0x1e4>
 800b9c8:	425b      	negs	r3, r3
 800b9ca:	b21b      	sxth	r3, r3
            if(slider->ext_draw_pad < pad) slider->ext_draw_pad = pad;
 800b9cc:	4299      	cmp	r1, r3
 800b9ce:	bfb8      	it	lt
 800b9d0:	86a3      	strhlt	r3, [r4, #52]	; 0x34
            if(slider->ext_draw_pad < shadow_w) slider->ext_draw_pad = shadow_w;
 800b9d2:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	f6bf af24 	bge.w	800b824 <lv_slider_signal+0x3c>
 800b9dc:	86a2      	strh	r2, [r4, #52]	; 0x34
    res = ancestor_signal(slider, sign, param);
 800b9de:	4605      	mov	r5, r0
 800b9e0:	e720      	b.n	800b824 <lv_slider_signal+0x3c>
    } else if(sign == LV_SIGNAL_CONTROL) {
 800b9e2:	f1ba 0f11 	cmp.w	sl, #17
 800b9e6:	d11d      	bne.n	800ba24 <lv_slider_signal+0x23c>
        char c = *((char *)param);
 800b9e8:	f899 3000 	ldrb.w	r3, [r9]
        ext->drag_value = LV_SLIDER_NOT_PRESSED;
 800b9ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b9f0:	8332      	strh	r2, [r6, #24]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 800b9f2:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800b9f6:	2a11      	cmp	r2, #17
 800b9f8:	d109      	bne.n	800ba0e <lv_slider_signal+0x226>
            lv_slider_set_value(slider, lv_slider_get_value(slider) + 1, true);
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	f00a fa59 	bl	8015eb2 <lv_slider_get_value>
 800ba00:	462a      	mov	r2, r5
 800ba02:	1c41      	adds	r1, r0, #1
 800ba04:	b209      	sxth	r1, r1
 800ba06:	4620      	mov	r0, r4
 800ba08:	f7fa ffb0 	bl	800696c <lv_bar_set_value>
 800ba0c:	e73e      	b.n	800b88c <lv_slider_signal+0xa4>
        } else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 800ba0e:	2b14      	cmp	r3, #20
 800ba10:	d002      	beq.n	800ba18 <lv_slider_signal+0x230>
 800ba12:	2b12      	cmp	r3, #18
 800ba14:	f47f af06 	bne.w	800b824 <lv_slider_signal+0x3c>
            lv_slider_set_value(slider, lv_slider_get_value(slider) - 1, true);
 800ba18:	4620      	mov	r0, r4
 800ba1a:	f00a fa4a 	bl	8015eb2 <lv_slider_get_value>
 800ba1e:	2201      	movs	r2, #1
 800ba20:	1e41      	subs	r1, r0, #1
 800ba22:	e7ef      	b.n	800ba04 <lv_slider_signal+0x21c>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 800ba24:	f1ba 0f12 	cmp.w	sl, #18
 800ba28:	d102      	bne.n	800ba30 <lv_slider_signal+0x248>
        *editable       = true;
 800ba2a:	f889 5000 	strb.w	r5, [r9]
 800ba2e:	e6f9      	b.n	800b824 <lv_slider_signal+0x3c>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800ba30:	f1ba 0f06 	cmp.w	sl, #6
 800ba34:	f47f aef6 	bne.w	800b824 <lv_slider_signal+0x3c>
 800ba38:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 800ba3a:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800ba3e:	b2da      	uxtb	r2, r3
 800ba40:	b119      	cbz	r1, 800ba4a <lv_slider_signal+0x262>
 800ba42:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 800ba44:	2b07      	cmp	r3, #7
 800ba46:	d1f8      	bne.n	800ba3a <lv_slider_signal+0x252>
 800ba48:	461a      	mov	r2, r3
        buf->type[i] = "lv_slider";
 800ba4a:	4b03      	ldr	r3, [pc, #12]	; (800ba58 <lv_slider_signal+0x270>)
 800ba4c:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
 800ba50:	e6e8      	b.n	800b824 <lv_slider_signal+0x3c>
 800ba52:	bf00      	nop
 800ba54:	200289a0 	.word	0x200289a0
 800ba58:	0801c83e 	.word	0x0801c83e

0800ba5c <lv_tabview_set_tab_act>:
 * @param tabview pointer to Tab view object
 * @param id index of a tab to load
 * @param anim LV_ANIM_ON: set the value with an animation; LV_ANIM_OFF: change the value immediately
 */
void lv_tabview_set_tab_act(lv_obj_t * tabview, uint16_t id, lv_anim_enable_t anim)
{
 800ba5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba60:	b08b      	sub	sp, #44	; 0x2c
 800ba62:	460e      	mov	r6, r1
 800ba64:	4690      	mov	r8, r2
 800ba66:	4607      	mov	r7, r0
#if LV_USE_ANIMATION == 0
    anim = LV_ANIM_OFF;
#endif
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 800ba68:	f004 f82a 	bl	800fac0 <lv_obj_get_ext_attr>
 800ba6c:	4605      	mov	r5, r0

    const lv_style_t * style = lv_obj_get_style(ext->content);
 800ba6e:	6880      	ldr	r0, [r0, #8]
 800ba70:	f7f7 f966 	bl	8002d40 <lv_obj_get_style>

    if(id >= ext->tab_cnt) id = ext->tab_cnt - 1;
 800ba74:	8aeb      	ldrh	r3, [r5, #22]
    const lv_style_t * style = lv_obj_get_style(ext->content);
 800ba76:	4681      	mov	r9, r0

    lv_btnm_clear_btn_ctrl(ext->btns, ext->tab_cur, LV_BTNM_CTRL_TGL_STATE);
 800ba78:	2280      	movs	r2, #128	; 0x80
    if(id >= ext->tab_cnt) id = ext->tab_cnt - 1;
 800ba7a:	42b3      	cmp	r3, r6
    lv_btnm_clear_btn_ctrl(ext->btns, ext->tab_cur, LV_BTNM_CTRL_TGL_STATE);
 800ba7c:	8aa9      	ldrh	r1, [r5, #20]
 800ba7e:	6828      	ldr	r0, [r5, #0]
    if(id >= ext->tab_cnt) id = ext->tab_cnt - 1;
 800ba80:	bf9c      	itt	ls
 800ba82:	f103 36ff 	addls.w	r6, r3, #4294967295	; 0xffffffff
 800ba86:	b2b6      	uxthls	r6, r6
    lv_btnm_clear_btn_ctrl(ext->btns, ext->tab_cur, LV_BTNM_CTRL_TGL_STATE);
 800ba88:	f008 ff4a 	bl	8014920 <lv_btnm_clear_btn_ctrl>

    ext->tab_cur = id;

    lv_coord_t cont_x;

    switch(ext->btns_pos) {
 800ba8c:	7eab      	ldrb	r3, [r5, #26]
    ext->tab_cur = id;
 800ba8e:	82ae      	strh	r6, [r5, #20]
    switch(ext->btns_pos) {
 800ba90:	b236      	sxth	r6, r6
 800ba92:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800ba96:	2b02      	cmp	r3, #2
 800ba98:	d041      	beq.n	800bb1e <lv_tabview_set_tab_act+0xc2>
 800ba9a:	2b03      	cmp	r3, #3
 800ba9c:	d056      	beq.n	800bb4c <lv_tabview_set_tab_act+0xf0>
        case LV_TABVIEW_BTNS_POS_TOP:
        case LV_TABVIEW_BTNS_POS_BOTTOM:
            cont_x = -(lv_obj_get_width(tabview) * id + style->body.padding.inner * id + style->body.padding.left);
 800ba9e:	4638      	mov	r0, r7
 800baa0:	f003 ff73 	bl	800f98a <lv_obj_get_width>
 800baa4:	f8b9 301e 	ldrh.w	r3, [r9, #30]
 800baa8:	18c4      	adds	r4, r0, r3
 800baaa:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 800baae:	fb14 f406 	smulbb	r4, r4, r6
 800bab2:	441c      	add	r4, r3
 800bab4:	4264      	negs	r4, r4
            cont_x = -((lv_obj_get_width(tabview) - lv_obj_get_width(ext->btns)) * id + style->body.padding.inner * id +
                       style->body.padding.left) +
                     lv_obj_get_width(ext->btns);
            break;
        case LV_TABVIEW_BTNS_POS_RIGHT:
            cont_x = -((lv_obj_get_width(tabview) - lv_obj_get_width(ext->btns)) * id + style->body.padding.inner * id +
 800bab6:	b224      	sxth	r4, r4
                       style->body.padding.left);
            break;
    }

    if(anim == LV_ANIM_OFF || lv_tabview_get_anim_time(tabview) == 0) {
 800bab8:	f1b8 0f00 	cmp.w	r8, #0
 800babc:	d157      	bne.n	800bb6e <lv_tabview_set_tab_act+0x112>
        lv_obj_set_x(ext->content, cont_x);
 800babe:	4621      	mov	r1, r4
 800bac0:	68a8      	ldr	r0, [r5, #8]
 800bac2:	f003 fc3a 	bl	800f33a <lv_obj_set_x>
        lv_anim_create(&a);
    }
#endif

    /*Move the indicator*/
    const lv_style_t * tabs_style = lv_obj_get_style(ext->btns);
 800bac6:	6828      	ldr	r0, [r5, #0]
 800bac8:	f7f7 f93a 	bl	8002d40 <lv_obj_get_style>
    lv_coord_t indic_size;
    lv_coord_t indic_pos;

    switch(ext->btns_pos) {
 800bacc:	7eab      	ldrb	r3, [r5, #26]
    const lv_style_t * tabs_style = lv_obj_get_style(ext->btns);
 800bace:	4604      	mov	r4, r0
        case LV_TABVIEW_BTNS_POS_TOP:
        case LV_TABVIEW_BTNS_POS_BOTTOM:
            indic_size = lv_obj_get_width(ext->indic);
 800bad0:	6868      	ldr	r0, [r5, #4]
    switch(ext->btns_pos) {
 800bad2:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800bad6:	3b02      	subs	r3, #2
 800bad8:	2b01      	cmp	r3, #1
 800bada:	d969      	bls.n	800bbb0 <lv_tabview_set_tab_act+0x154>
            indic_size = lv_obj_get_width(ext->indic);
 800badc:	f003 ff55 	bl	800f98a <lv_obj_get_width>
            indic_pos  = indic_size * id + tabs_style->body.padding.inner * id + tabs_style->body.padding.left;
 800bae0:	8be3      	ldrh	r3, [r4, #30]
 800bae2:	8b61      	ldrh	r1, [r4, #26]
 800bae4:	4418      	add	r0, r3
 800bae6:	fb10 f606 	smulbb	r6, r0, r6
 800baea:	7eab      	ldrb	r3, [r5, #26]
            break;
        case LV_TABVIEW_BTNS_POS_LEFT:
        case LV_TABVIEW_BTNS_POS_RIGHT:
            indic_size = lv_obj_get_height(ext->indic);
            indic_pos  = tabs_style->body.padding.top + id * (indic_size + tabs_style->body.padding.inner);
 800baec:	440e      	add	r6, r1
 800baee:	6868      	ldr	r0, [r5, #4]
 800baf0:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800baf4:	b236      	sxth	r6, r6
            break;
    }

#if LV_USE_ANIMATION
    if(anim == LV_ANIM_OFF || ext->anim_time == 0)
 800baf6:	3b02      	subs	r3, #2
 800baf8:	f1b8 0f00 	cmp.w	r8, #0
 800bafc:	d002      	beq.n	800bb04 <lv_tabview_set_tab_act+0xa8>
 800bafe:	8b2a      	ldrh	r2, [r5, #24]
 800bb00:	2a00      	cmp	r2, #0
 800bb02:	d160      	bne.n	800bbc6 <lv_tabview_set_tab_act+0x16a>
#endif
    {
        switch(ext->btns_pos) {
 800bb04:	2b01      	cmp	r3, #1
            case LV_TABVIEW_BTNS_POS_TOP:
            case LV_TABVIEW_BTNS_POS_BOTTOM: lv_obj_set_x(ext->indic, indic_pos); break;
 800bb06:	4631      	mov	r1, r6
        switch(ext->btns_pos) {
 800bb08:	d95a      	bls.n	800bbc0 <lv_tabview_set_tab_act+0x164>
            case LV_TABVIEW_BTNS_POS_BOTTOM: lv_obj_set_x(ext->indic, indic_pos); break;
 800bb0a:	f003 fc16 	bl	800f33a <lv_obj_set_x>
        a.repeat_pause   = 0;
        lv_anim_create(&a);
    }
#endif

    lv_btnm_set_btn_ctrl(ext->btns, ext->tab_cur, LV_BTNM_CTRL_TGL_STATE);
 800bb0e:	2280      	movs	r2, #128	; 0x80
 800bb10:	8aa9      	ldrh	r1, [r5, #20]
 800bb12:	6828      	ldr	r0, [r5, #0]
 800bb14:	f008 feee 	bl	80148f4 <lv_btnm_set_btn_ctrl>
}
 800bb18:	b00b      	add	sp, #44	; 0x2c
 800bb1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            cont_x = -((lv_obj_get_width(tabview) - lv_obj_get_width(ext->btns)) * id + style->body.padding.inner * id +
 800bb1e:	6828      	ldr	r0, [r5, #0]
 800bb20:	f003 ff33 	bl	800f98a <lv_obj_get_width>
 800bb24:	4604      	mov	r4, r0
 800bb26:	4638      	mov	r0, r7
 800bb28:	f003 ff2f 	bl	800f98a <lv_obj_get_width>
 800bb2c:	f9b9 301e 	ldrsh.w	r3, [r9, #30]
                       style->body.padding.left) +
 800bb30:	f9b9 901a 	ldrsh.w	r9, [r9, #26]
            cont_x = -((lv_obj_get_width(tabview) - lv_obj_get_width(ext->btns)) * id + style->body.padding.inner * id +
 800bb34:	1ae4      	subs	r4, r4, r3
 800bb36:	1a24      	subs	r4, r4, r0
                     lv_obj_get_width(ext->btns);
 800bb38:	6828      	ldr	r0, [r5, #0]
 800bb3a:	f003 ff26 	bl	800f98a <lv_obj_get_width>
            cont_x = -((lv_obj_get_width(tabview) - lv_obj_get_width(ext->btns)) * id + style->body.padding.inner * id +
 800bb3e:	eba0 0009 	sub.w	r0, r0, r9
 800bb42:	fb14 f406 	smulbb	r4, r4, r6
 800bb46:	b224      	sxth	r4, r4
 800bb48:	4404      	add	r4, r0
 800bb4a:	e7b4      	b.n	800bab6 <lv_tabview_set_tab_act+0x5a>
            cont_x = -((lv_obj_get_width(tabview) - lv_obj_get_width(ext->btns)) * id + style->body.padding.inner * id +
 800bb4c:	6828      	ldr	r0, [r5, #0]
 800bb4e:	f003 ff1c 	bl	800f98a <lv_obj_get_width>
 800bb52:	4604      	mov	r4, r0
 800bb54:	4638      	mov	r0, r7
 800bb56:	f003 ff18 	bl	800f98a <lv_obj_get_width>
 800bb5a:	f9b9 301e 	ldrsh.w	r3, [r9, #30]
 800bb5e:	f8b9 101a 	ldrh.w	r1, [r9, #26]
 800bb62:	1ae4      	subs	r4, r4, r3
 800bb64:	1a24      	subs	r4, r4, r0
 800bb66:	fb14 f406 	smulbb	r4, r4, r6
 800bb6a:	1a64      	subs	r4, r4, r1
 800bb6c:	e7a3      	b.n	800bab6 <lv_tabview_set_tab_act+0x5a>
    if(anim == LV_ANIM_OFF || lv_tabview_get_anim_time(tabview) == 0) {
 800bb6e:	4638      	mov	r0, r7
 800bb70:	f00a fcd3 	bl	801651a <lv_tabview_get_anim_time>
 800bb74:	2800      	cmp	r0, #0
 800bb76:	d0a2      	beq.n	800babe <lv_tabview_set_tab_act+0x62>
        a.var            = ext->content;
 800bb78:	68a8      	ldr	r0, [r5, #8]
 800bb7a:	9000      	str	r0, [sp, #0]
        a.start          = lv_obj_get_x(ext->content);
 800bb7c:	f003 fef9 	bl	800f972 <lv_obj_get_x>
        a.time           = ext->anim_time;
 800bb80:	8b2a      	ldrh	r2, [r5, #24]
        a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_x;
 800bb82:	4b22      	ldr	r3, [pc, #136]	; (800bc0c <lv_tabview_set_tab_act+0x1b0>)
        a.time           = ext->anim_time;
 800bb84:	f8ad 2018 	strh.w	r2, [sp, #24]
        a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_x;
 800bb88:	9301      	str	r3, [sp, #4]
        a.playback       = 0;
 800bb8a:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
        a.path_cb        = lv_anim_path_linear;
 800bb8e:	4b20      	ldr	r3, [pc, #128]	; (800bc10 <lv_tabview_set_tab_act+0x1b4>)
        a.playback       = 0;
 800bb90:	f022 0203 	bic.w	r2, r2, #3
        a.path_cb        = lv_anim_path_linear;
 800bb94:	9302      	str	r3, [sp, #8]
        a.ready_cb       = NULL;
 800bb96:	2300      	movs	r3, #0
        a.playback       = 0;
 800bb98:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        a.ready_cb       = NULL;
 800bb9c:	9303      	str	r3, [sp, #12]
        a.act_time       = 0;
 800bb9e:	f8ad 301a 	strh.w	r3, [sp, #26]
        a.playback_pause = 0;
 800bba2:	9307      	str	r3, [sp, #28]
        a.end            = cont_x;
 800bba4:	e9cd 0404 	strd	r0, r4, [sp, #16]
        lv_anim_create(&a);
 800bba8:	4668      	mov	r0, sp
 800bbaa:	f7f8 f851 	bl	8003c50 <lv_anim_create>
 800bbae:	e78a      	b.n	800bac6 <lv_tabview_set_tab_act+0x6a>
            indic_size = lv_obj_get_height(ext->indic);
 800bbb0:	f003 fef1 	bl	800f996 <lv_obj_get_height>
            indic_pos  = tabs_style->body.padding.top + id * (indic_size + tabs_style->body.padding.inner);
 800bbb4:	8be3      	ldrh	r3, [r4, #30]
 800bbb6:	8ae1      	ldrh	r1, [r4, #22]
 800bbb8:	4418      	add	r0, r3
 800bbba:	fb10 f606 	smulbb	r6, r0, r6
 800bbbe:	e794      	b.n	800baea <lv_tabview_set_tab_act+0x8e>
            case LV_TABVIEW_BTNS_POS_RIGHT: lv_obj_set_y(ext->indic, indic_pos); break;
 800bbc0:	f003 fbc4 	bl	800f34c <lv_obj_set_y>
 800bbc4:	e7a3      	b.n	800bb0e <lv_tabview_set_tab_act+0xb2>
        switch(ext->btns_pos) {
 800bbc6:	2b01      	cmp	r3, #1
        a.var = ext->indic;
 800bbc8:	9000      	str	r0, [sp, #0]
        switch(ext->btns_pos) {
 800bbca:	d919      	bls.n	800bc00 <lv_tabview_set_tab_act+0x1a4>
                a.start   = lv_obj_get_x(ext->indic);
 800bbcc:	f003 fed1 	bl	800f972 <lv_obj_get_x>
                a.exec_cb = (lv_anim_exec_xcb_t)lv_obj_set_x;
 800bbd0:	4b0e      	ldr	r3, [pc, #56]	; (800bc0c <lv_tabview_set_tab_act+0x1b0>)
                a.end     = indic_pos;
 800bbd2:	e9cd 0604 	strd	r0, r6, [sp, #16]
        a.time           = ext->anim_time;
 800bbd6:	8b2a      	ldrh	r2, [r5, #24]
        lv_anim_create(&a);
 800bbd8:	4668      	mov	r0, sp
                a.exec_cb = (lv_anim_exec_xcb_t)lv_obj_set_y;
 800bbda:	9301      	str	r3, [sp, #4]
        a.time           = ext->anim_time;
 800bbdc:	f8ad 2018 	strh.w	r2, [sp, #24]
        a.path_cb        = lv_anim_path_linear;
 800bbe0:	4b0b      	ldr	r3, [pc, #44]	; (800bc10 <lv_tabview_set_tab_act+0x1b4>)
        a.playback       = 0;
 800bbe2:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
        a.path_cb        = lv_anim_path_linear;
 800bbe6:	9302      	str	r3, [sp, #8]
        a.ready_cb       = NULL;
 800bbe8:	2300      	movs	r3, #0
        a.playback       = 0;
 800bbea:	f022 0203 	bic.w	r2, r2, #3
        a.ready_cb       = NULL;
 800bbee:	9303      	str	r3, [sp, #12]
        a.playback       = 0;
 800bbf0:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        a.act_time       = 0;
 800bbf4:	f8ad 301a 	strh.w	r3, [sp, #26]
        a.playback_pause = 0;
 800bbf8:	9307      	str	r3, [sp, #28]
        lv_anim_create(&a);
 800bbfa:	f7f8 f829 	bl	8003c50 <lv_anim_create>
 800bbfe:	e786      	b.n	800bb0e <lv_tabview_set_tab_act+0xb2>
                a.start   = lv_obj_get_y(ext->indic);
 800bc00:	f003 febd 	bl	800f97e <lv_obj_get_y>
                a.exec_cb = (lv_anim_exec_xcb_t)lv_obj_set_y;
 800bc04:	4b03      	ldr	r3, [pc, #12]	; (800bc14 <lv_tabview_set_tab_act+0x1b8>)
                a.end     = indic_pos;
 800bc06:	e9cd 0604 	strd	r0, r6, [sp, #16]
                a.exec_cb = (lv_anim_exec_xcb_t)lv_obj_set_y;
 800bc0a:	e7e4      	b.n	800bbd6 <lv_tabview_set_tab_act+0x17a>
 800bc0c:	0800f33b 	.word	0x0800f33b
 800bc10:	0801057d 	.word	0x0801057d
 800bc14:	0800f34d 	.word	0x0800f34d

0800bc18 <tabpage_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t tabpage_signal(lv_obj_t * tab_page, lv_signal_t sign, void * param)
{
 800bc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_res_t res;

    /* Include the ancient signal function */
    res = page_signal(tab_page, sign, param);
 800bc1a:	4b13      	ldr	r3, [pc, #76]	; (800bc68 <tabpage_signal+0x50>)
{
 800bc1c:	4606      	mov	r6, r0
 800bc1e:	460c      	mov	r4, r1
    res = page_signal(tab_page, sign, param);
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 800bc24:	2801      	cmp	r0, #1
    res = page_signal(tab_page, sign, param);
 800bc26:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return res;
 800bc28:	d10d      	bne.n	800bc46 <tabpage_signal+0x2e>

    lv_obj_t * cont    = lv_obj_get_parent(tab_page);
 800bc2a:	4630      	mov	r0, r6
 800bc2c:	f003 fe66 	bl	800f8fc <lv_obj_get_parent>
    lv_obj_t * tabview = lv_obj_get_parent(cont);
 800bc30:	f003 fe64 	bl	800f8fc <lv_obj_get_parent>
 800bc34:	4605      	mov	r5, r0

    if(lv_tabview_get_sliding(tabview) == false) return res;
 800bc36:	f00a fc69 	bl	801650c <lv_tabview_get_sliding>
 800bc3a:	b120      	cbz	r0, 800bc46 <tabpage_signal+0x2e>

    if(sign == LV_SIGNAL_PRESSED) {
 800bc3c:	2c07      	cmp	r4, #7
 800bc3e:	d104      	bne.n	800bc4a <tabpage_signal+0x32>
        tabpage_pressed_handler(tabview, tab_page);
 800bc40:	4628      	mov	r0, r5
 800bc42:	f00a fc34 	bl	80164ae <tabpage_pressed_handler.isra.1>
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
        tabpage_press_lost_handler(tabview, tab_page);
    }

    return res;
}
 800bc46:	4638      	mov	r0, r7
 800bc48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_PRESSING) {
 800bc4a:	2c08      	cmp	r4, #8
 800bc4c:	d104      	bne.n	800bc58 <tabpage_signal+0x40>
        tabpage_pressing_handler(tabview, tab_page);
 800bc4e:	4631      	mov	r1, r6
 800bc50:	4628      	mov	r0, r5
 800bc52:	f00a fb85 	bl	8016360 <tabpage_pressing_handler>
 800bc56:	e7f6      	b.n	800bc46 <tabpage_signal+0x2e>
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 800bc58:	3c09      	subs	r4, #9
 800bc5a:	2c01      	cmp	r4, #1
 800bc5c:	d8f3      	bhi.n	800bc46 <tabpage_signal+0x2e>
        tabpage_press_lost_handler(tabview, tab_page);
 800bc5e:	4631      	mov	r1, r6
 800bc60:	4628      	mov	r0, r5
 800bc62:	f00a fc8c 	bl	801657e <tabpage_press_lost_handler>
 800bc66:	e7ee      	b.n	800bc46 <tabpage_signal+0x2e>
 800bc68:	200289ac 	.word	0x200289ac

0800bc6c <tabpage_scrl_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t tabpage_scrl_signal(lv_obj_t * tab_scrl, lv_signal_t sign, void * param)
{
 800bc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_res_t res;

    /* Include the ancient signal function */
    res = page_scrl_signal(tab_scrl, sign, param);
 800bc6e:	4b15      	ldr	r3, [pc, #84]	; (800bcc4 <tabpage_scrl_signal+0x58>)
{
 800bc70:	4605      	mov	r5, r0
 800bc72:	460c      	mov	r4, r1
    res = page_scrl_signal(tab_scrl, sign, param);
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 800bc78:	2801      	cmp	r0, #1
    res = page_scrl_signal(tab_scrl, sign, param);
 800bc7a:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
 800bc7c:	d110      	bne.n	800bca0 <tabpage_scrl_signal+0x34>

    lv_obj_t * tab_page = lv_obj_get_parent(tab_scrl);
 800bc7e:	4628      	mov	r0, r5
 800bc80:	f003 fe3c 	bl	800f8fc <lv_obj_get_parent>
 800bc84:	4607      	mov	r7, r0
    lv_obj_t * cont     = lv_obj_get_parent(tab_page);
 800bc86:	f003 fe39 	bl	800f8fc <lv_obj_get_parent>
    lv_obj_t * tabview  = lv_obj_get_parent(cont);
 800bc8a:	f003 fe37 	bl	800f8fc <lv_obj_get_parent>
 800bc8e:	4605      	mov	r5, r0

    if(lv_tabview_get_sliding(tabview) == false) return res;
 800bc90:	f00a fc3c 	bl	801650c <lv_tabview_get_sliding>
 800bc94:	b120      	cbz	r0, 800bca0 <tabpage_scrl_signal+0x34>

    if(sign == LV_SIGNAL_PRESSED) {
 800bc96:	2c07      	cmp	r4, #7
 800bc98:	d104      	bne.n	800bca4 <tabpage_scrl_signal+0x38>
        tabpage_pressed_handler(tabview, tab_page);
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	f00a fc07 	bl	80164ae <tabpage_pressed_handler.isra.1>
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
        tabpage_press_lost_handler(tabview, tab_page);
    }

    return res;
}
 800bca0:	4630      	mov	r0, r6
 800bca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_PRESSING) {
 800bca4:	2c08      	cmp	r4, #8
 800bca6:	d104      	bne.n	800bcb2 <tabpage_scrl_signal+0x46>
        tabpage_pressing_handler(tabview, tab_page);
 800bca8:	4639      	mov	r1, r7
 800bcaa:	4628      	mov	r0, r5
 800bcac:	f00a fb58 	bl	8016360 <tabpage_pressing_handler>
 800bcb0:	e7f6      	b.n	800bca0 <tabpage_scrl_signal+0x34>
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 800bcb2:	3c09      	subs	r4, #9
 800bcb4:	2c01      	cmp	r4, #1
 800bcb6:	d8f3      	bhi.n	800bca0 <tabpage_scrl_signal+0x34>
        tabpage_press_lost_handler(tabview, tab_page);
 800bcb8:	4639      	mov	r1, r7
 800bcba:	4628      	mov	r0, r5
 800bcbc:	f00a fc5f 	bl	801657e <tabpage_press_lost_handler>
 800bcc0:	e7ee      	b.n	800bca0 <tabpage_scrl_signal+0x34>
 800bcc2:	bf00      	nop
 800bcc4:	200289a8 	.word	0x200289a8

0800bcc8 <tabview_realign>:
/**
 * Realign and resize the elements of Tab view
 * @param tabview pointer to a Tab view object
 */
static void tabview_realign(lv_obj_t * tabview)
{
 800bcc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bccc:	4606      	mov	r6, r0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 800bcce:	f003 fef7 	bl	800fac0 <lv_obj_get_ext_attr>

    lv_obj_set_width(ext->btns, lv_obj_get_width(tabview));
 800bcd2:	6805      	ldr	r5, [r0, #0]
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 800bcd4:	4604      	mov	r4, r0
    lv_obj_set_width(ext->btns, lv_obj_get_width(tabview));
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	f003 fe57 	bl	800f98a <lv_obj_get_width>
 800bcdc:	4601      	mov	r1, r0
 800bcde:	4628      	mov	r0, r5
 800bce0:	f003 fd5e 	bl	800f7a0 <lv_obj_set_width>

    if(ext->btns_hide) {
 800bce4:	7ea5      	ldrb	r5, [r4, #26]
 800bce6:	f015 0510 	ands.w	r5, r5, #16
 800bcea:	d03c      	beq.n	800bd66 <tabview_realign+0x9e>
        lv_obj_set_hidden(ext->btns, true);
 800bcec:	2101      	movs	r1, #1
 800bcee:	6820      	ldr	r0, [r4, #0]
 800bcf0:	f003 fd73 	bl	800f7da <lv_obj_set_hidden>
        lv_obj_set_hidden(ext->indic, true);
 800bcf4:	2101      	movs	r1, #1
 800bcf6:	6860      	ldr	r0, [r4, #4]
 800bcf8:	f003 fd6f 	bl	800f7da <lv_obj_set_hidden>
        lv_obj_set_height(ext->content, lv_obj_get_height(tabview));
 800bcfc:	68a5      	ldr	r5, [r4, #8]
 800bcfe:	4630      	mov	r0, r6
 800bd00:	f003 fe49 	bl	800f996 <lv_obj_get_height>
 800bd04:	4601      	mov	r1, r0
 800bd06:	4628      	mov	r0, r5
 800bd08:	f003 fd51 	bl	800f7ae <lv_obj_set_height>
        lv_obj_align(ext->content, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	2201      	movs	r2, #1
 800bd10:	9300      	str	r3, [sp, #0]
 800bd12:	4619      	mov	r1, r3
 800bd14:	68a0      	ldr	r0, [r4, #8]
 800bd16:	f003 fb21 	bl	800f35c <lv_obj_align>
                lv_obj_set_width(ext->indic, style_btn_bg->body.padding.inner);
                break;
        }
    }

    lv_obj_t * pages = lv_obj_get_child(ext->content, NULL);
 800bd1a:	2100      	movs	r1, #0
 800bd1c:	68a0      	ldr	r0, [r4, #8]
 800bd1e:	f003 fdef 	bl	800f900 <lv_obj_get_child>
    while(pages != NULL) {
        if(lv_obj_get_signal_cb(pages) == tabpage_signal) { /*Be sure adjust only the pages (user can other things)*/
 800bd22:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 800c004 <tabview_realign+0x33c>
    lv_obj_t * pages = lv_obj_get_child(ext->content, NULL);
 800bd26:	4605      	mov	r5, r0
    while(pages != NULL) {
 800bd28:	2d00      	cmp	r5, #0
 800bd2a:	f040 813d 	bne.w	800bfa8 <tabview_realign+0x2e0>
            }
        }
        pages = lv_obj_get_child(ext->content, pages);
    }

    if(!ext->btns_hide) {
 800bd2e:	7ea3      	ldrb	r3, [r4, #26]
 800bd30:	06da      	lsls	r2, r3, #27
 800bd32:	d410      	bmi.n	800bd56 <tabview_realign+0x8e>
        switch(ext->btns_pos) {
 800bd34:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800bd38:	2b02      	cmp	r3, #2
 800bd3a:	e9d4 1000 	ldrd	r1, r0, [r4]
 800bd3e:	f000 8159 	beq.w	800bff4 <tabview_realign+0x32c>
 800bd42:	f200 815b 	bhi.w	800bffc <tabview_realign+0x334>
 800bd46:	2b01      	cmp	r3, #1
 800bd48:	f000 8158 	beq.w	800bffc <tabview_realign+0x334>
            case LV_TABVIEW_BTNS_POS_TOP: lv_obj_align(ext->indic, ext->btns, LV_ALIGN_IN_BOTTOM_LEFT, 0, 0); break;
 800bd4c:	462b      	mov	r3, r5
 800bd4e:	2204      	movs	r2, #4
 800bd50:	9500      	str	r5, [sp, #0]
            case LV_TABVIEW_BTNS_POS_BOTTOM: lv_obj_align(ext->indic, ext->btns, LV_ALIGN_IN_TOP_LEFT, 0, 0); break;
            case LV_TABVIEW_BTNS_POS_LEFT: lv_obj_align(ext->indic, ext->btns, LV_ALIGN_IN_TOP_RIGHT, 0, 0); break;
            case LV_TABVIEW_BTNS_POS_RIGHT: lv_obj_align(ext->indic, ext->btns, LV_ALIGN_IN_TOP_LEFT, 0, 0); break;
 800bd52:	f003 fb03 	bl	800f35c <lv_obj_align>
        }
    }

    lv_tabview_set_tab_act(tabview, ext->tab_cur, LV_ANIM_OFF);
 800bd56:	2200      	movs	r2, #0
 800bd58:	8aa1      	ldrh	r1, [r4, #20]
 800bd5a:	4630      	mov	r0, r6
}
 800bd5c:	b002      	add	sp, #8
 800bd5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_tabview_set_tab_act(tabview, ext->tab_cur, LV_ANIM_OFF);
 800bd62:	f7ff be7b 	b.w	800ba5c <lv_tabview_set_tab_act>
    } else if(ext->tab_cnt != 0) {
 800bd66:	8ae3      	ldrh	r3, [r4, #22]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d0d6      	beq.n	800bd1a <tabview_realign+0x52>
        lv_obj_set_hidden(ext->btns, false);
 800bd6c:	4629      	mov	r1, r5
 800bd6e:	6820      	ldr	r0, [r4, #0]
 800bd70:	f003 fd33 	bl	800f7da <lv_obj_set_hidden>
        lv_obj_set_hidden(ext->indic, false);
 800bd74:	4629      	mov	r1, r5
 800bd76:	6860      	ldr	r0, [r4, #4]
 800bd78:	f003 fd2f 	bl	800f7da <lv_obj_set_hidden>
        const lv_style_t * style_btn_bg  = lv_tabview_get_style(tabview, LV_TABVIEW_STYLE_BTN_BG);
 800bd7c:	2102      	movs	r1, #2
 800bd7e:	4630      	mov	r0, r6
 800bd80:	f00a fc62 	bl	8016648 <lv_tabview_get_style>
        const lv_style_t * style_btn_rel = lv_tabview_get_style(tabview, LV_TABVIEW_STYLE_BTN_REL);
 800bd84:	2103      	movs	r1, #3
        const lv_style_t * style_btn_bg  = lv_tabview_get_style(tabview, LV_TABVIEW_STYLE_BTN_BG);
 800bd86:	4607      	mov	r7, r0
        const lv_style_t * style_btn_rel = lv_tabview_get_style(tabview, LV_TABVIEW_STYLE_BTN_REL);
 800bd88:	4630      	mov	r0, r6
 800bd8a:	f00a fc5d 	bl	8016648 <lv_tabview_get_style>
        switch(ext->btns_pos) {
 800bd8e:	7ea3      	ldrb	r3, [r4, #26]
        const lv_style_t * style_btn_rel = lv_tabview_get_style(tabview, LV_TABVIEW_STYLE_BTN_REL);
 800bd90:	4605      	mov	r5, r0
        switch(ext->btns_pos) {
 800bd92:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800bd96:	3b02      	subs	r3, #2
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d974      	bls.n	800be86 <tabview_realign+0x1be>
                indic_size = (lv_obj_get_width(tabview) - style_btn_bg->body.padding.inner * (ext->tab_cnt - 1) -
 800bd9c:	4630      	mov	r0, r6
 800bd9e:	f003 fdf4 	bl	800f98a <lv_obj_get_width>
 800bda2:	8ae1      	ldrh	r1, [r4, #22]
 800bda4:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800bda8:	f1c1 0301 	rsb	r3, r1, #1
 800bdac:	4353      	muls	r3, r2
                              style_btn_bg->body.padding.left - style_btn_bg->body.padding.right) /
 800bdae:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800bdb2:	1a9b      	subs	r3, r3, r2
 800bdb4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800bdb8:	1a9b      	subs	r3, r3, r2
 800bdba:	4418      	add	r0, r3
 800bdbc:	fb90 f1f1 	sdiv	r1, r0, r1
                lv_obj_set_width(ext->indic, indic_size);
 800bdc0:	6860      	ldr	r0, [r4, #4]
 800bdc2:	b209      	sxth	r1, r1
 800bdc4:	f003 fcec 	bl	800f7a0 <lv_obj_set_width>
        switch(ext->btns_pos) {
 800bdc8:	7ea3      	ldrb	r3, [r4, #26]
 800bdca:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800bdcc:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800bdd0:	3b02      	subs	r3, #2
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d978      	bls.n	800bec8 <tabview_realign+0x200>
                btns_size = lv_font_get_line_height(style_btn_rel->text.font) + style_btn_rel->body.padding.top +
 800bdd6:	8b2b      	ldrh	r3, [r5, #24]
 800bdd8:	8ae9      	ldrh	r1, [r5, #22]
 800bdda:	4419      	add	r1, r3
 800bddc:	8afb      	ldrh	r3, [r7, #22]
 800bdde:	4419      	add	r1, r3
 800bde0:	8b3b      	ldrh	r3, [r7, #24]
 800bde2:	4419      	add	r1, r3
 800bde4:	7a03      	ldrb	r3, [r0, #8]
                lv_obj_set_height(ext->btns, btns_size);
 800bde6:	6820      	ldr	r0, [r4, #0]
                btns_size = lv_font_get_line_height(style_btn_rel->text.font) + style_btn_rel->body.padding.top +
 800bde8:	4419      	add	r1, r3
                lv_obj_set_height(ext->btns, btns_size);
 800bdea:	b209      	sxth	r1, r1
 800bdec:	f003 fcdf 	bl	800f7ae <lv_obj_set_height>
        switch(ext->btns_pos) {
 800bdf0:	7ea3      	ldrb	r3, [r4, #26]
                lv_obj_set_height(ext->content, lv_obj_get_height(tabview) - lv_obj_get_height(ext->btns));
 800bdf2:	4630      	mov	r0, r6
 800bdf4:	f8d4 8008 	ldr.w	r8, [r4, #8]
        switch(ext->btns_pos) {
 800bdf8:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800bdfc:	3b02      	subs	r3, #2
 800bdfe:	2b01      	cmp	r3, #1
 800be00:	d973      	bls.n	800beea <tabview_realign+0x222>
                lv_obj_set_height(ext->content, lv_obj_get_height(tabview) - lv_obj_get_height(ext->btns));
 800be02:	f003 fdc8 	bl	800f996 <lv_obj_get_height>
 800be06:	4605      	mov	r5, r0
 800be08:	6820      	ldr	r0, [r4, #0]
 800be0a:	f003 fdc4 	bl	800f996 <lv_obj_get_height>
 800be0e:	1a29      	subs	r1, r5, r0
 800be10:	b209      	sxth	r1, r1
            case LV_TABVIEW_BTNS_POS_RIGHT: lv_obj_set_height(ext->content, lv_obj_get_height(tabview)); break;
 800be12:	4640      	mov	r0, r8
 800be14:	2500      	movs	r5, #0
 800be16:	f003 fcca 	bl	800f7ae <lv_obj_set_height>
        switch(ext->btns_pos) {
 800be1a:	f894 801a 	ldrb.w	r8, [r4, #26]
                lv_obj_align(ext->btns, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
 800be1e:	462b      	mov	r3, r5
 800be20:	9500      	str	r5, [sp, #0]
        switch(ext->btns_pos) {
 800be22:	f3c8 1841 	ubfx	r8, r8, #5, #2
 800be26:	f1b8 0f02 	cmp.w	r8, #2
 800be2a:	d072      	beq.n	800bf12 <tabview_realign+0x24a>
 800be2c:	f200 80ac 	bhi.w	800bf88 <tabview_realign+0x2c0>
 800be30:	f1b8 0f01 	cmp.w	r8, #1
 800be34:	d05d      	beq.n	800bef2 <tabview_realign+0x22a>
                lv_obj_align(ext->btns, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
 800be36:	2201      	movs	r2, #1
 800be38:	4629      	mov	r1, r5
 800be3a:	6820      	ldr	r0, [r4, #0]
 800be3c:	f003 fa8e 	bl	800f35c <lv_obj_align>
                lv_obj_align(ext->content, ext->btns, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 800be40:	9500      	str	r5, [sp, #0]
 800be42:	462b      	mov	r3, r5
 800be44:	220c      	movs	r2, #12
 800be46:	6821      	ldr	r1, [r4, #0]
 800be48:	68a0      	ldr	r0, [r4, #8]
 800be4a:	f003 fa87 	bl	800f35c <lv_obj_align>
                lv_obj_align(ext->indic, ext->btns, LV_ALIGN_IN_BOTTOM_LEFT, 0, 0);
 800be4e:	462b      	mov	r3, r5
 800be50:	2204      	movs	r2, #4
 800be52:	9500      	str	r5, [sp, #0]
                lv_obj_align(ext->indic, ext->btns, LV_ALIGN_IN_TOP_LEFT, 0, 0);
 800be54:	e9d4 1000 	ldrd	r1, r0, [r4]
 800be58:	f003 fa80 	bl	800f35c <lv_obj_align>
                lv_cont_set_fit2(ext->content, LV_FIT_TIGHT, LV_FIT_NONE);
 800be5c:	68a0      	ldr	r0, [r4, #8]
 800be5e:	f00a fb32 	bl	80164c6 <lv_cont_set_fit2.constprop.6>
                lv_cont_set_layout(ext->content, LV_LAYOUT_ROW_T);
 800be62:	2105      	movs	r1, #5
 800be64:	68a0      	ldr	r0, [r4, #8]
 800be66:	f008 fe09 	bl	8014a7c <lv_cont_set_layout>
                lv_obj_set_height(ext->content, lv_obj_get_height(tabview) - lv_obj_get_height(ext->btns));
 800be6a:	4630      	mov	r0, r6
 800be6c:	68a7      	ldr	r7, [r4, #8]
 800be6e:	f003 fd92 	bl	800f996 <lv_obj_get_height>
 800be72:	4605      	mov	r5, r0
 800be74:	6820      	ldr	r0, [r4, #0]
 800be76:	f003 fd8e 	bl	800f996 <lv_obj_get_height>
 800be7a:	1a29      	subs	r1, r5, r0
 800be7c:	4638      	mov	r0, r7
 800be7e:	b209      	sxth	r1, r1
 800be80:	f003 fc95 	bl	800f7ae <lv_obj_set_height>
                break;
 800be84:	e749      	b.n	800bd1a <tabview_realign+0x52>
                lv_obj_set_height(ext->btns, lv_obj_get_height(tabview));
 800be86:	f8d4 8000 	ldr.w	r8, [r4]
 800be8a:	4630      	mov	r0, r6
 800be8c:	f003 fd83 	bl	800f996 <lv_obj_get_height>
 800be90:	4601      	mov	r1, r0
 800be92:	4640      	mov	r0, r8
 800be94:	f003 fc8b 	bl	800f7ae <lv_obj_set_height>
                    lv_obj_get_height(ext->btns) - style_btn_bg->body.padding.top - style_btn_bg->body.padding.bottom;
 800be98:	6820      	ldr	r0, [r4, #0]
 800be9a:	f003 fd7c 	bl	800f996 <lv_obj_get_height>
                indic_size = max_h - ((ext->tab_cnt - 1) * style_btn_bg->body.padding.inner);
 800be9e:	f8b4 c016 	ldrh.w	ip, [r4, #22]
 800bea2:	8bfb      	ldrh	r3, [r7, #30]
 800bea4:	f1cc 0101 	rsb	r1, ip, #1
 800bea8:	8afa      	ldrh	r2, [r7, #22]
 800beaa:	f8b7 e018 	ldrh.w	lr, [r7, #24]
 800beae:	fb13 0101 	smlabb	r1, r3, r1, r0
                lv_obj_set_height(ext->indic, indic_size);
 800beb2:	6860      	ldr	r0, [r4, #4]
                indic_size = max_h - ((ext->tab_cnt - 1) * style_btn_bg->body.padding.inner);
 800beb4:	4472      	add	r2, lr
 800beb6:	1a89      	subs	r1, r1, r2
                indic_size = indic_size / ext->tab_cnt;
 800beb8:	b209      	sxth	r1, r1
 800beba:	fb91 f1fc 	sdiv	r1, r1, ip
                indic_size--; /*-1 because e.g. height = 100 means 101 pixels (0..100)*/
 800bebe:	3901      	subs	r1, #1
                lv_obj_set_height(ext->indic, indic_size);
 800bec0:	b209      	sxth	r1, r1
 800bec2:	f003 fc74 	bl	800f7ae <lv_obj_set_height>
                break;
 800bec6:	e77f      	b.n	800bdc8 <tabview_realign+0x100>
                btns_size = lv_font_get_glyph_width(style_btn_rel->text.font, 'A', '\0') +
 800bec8:	2200      	movs	r2, #0
 800beca:	2141      	movs	r1, #65	; 0x41
 800becc:	f008 f8f7 	bl	80140be <lv_font_get_glyph_width>
 800bed0:	8bab      	ldrh	r3, [r5, #28]
 800bed2:	8b69      	ldrh	r1, [r5, #26]
 800bed4:	4419      	add	r1, r3
 800bed6:	8b7b      	ldrh	r3, [r7, #26]
 800bed8:	4419      	add	r1, r3
 800beda:	8bbb      	ldrh	r3, [r7, #28]
 800bedc:	4419      	add	r1, r3
 800bede:	4401      	add	r1, r0
                lv_obj_set_width(ext->btns, btns_size);
 800bee0:	6820      	ldr	r0, [r4, #0]
 800bee2:	b209      	sxth	r1, r1
 800bee4:	f003 fc5c 	bl	800f7a0 <lv_obj_set_width>
                break;
 800bee8:	e782      	b.n	800bdf0 <tabview_realign+0x128>
            case LV_TABVIEW_BTNS_POS_RIGHT: lv_obj_set_height(ext->content, lv_obj_get_height(tabview)); break;
 800beea:	f003 fd54 	bl	800f996 <lv_obj_get_height>
 800beee:	4601      	mov	r1, r0
 800bef0:	e78f      	b.n	800be12 <tabview_realign+0x14a>
                lv_obj_align(ext->content, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
 800bef2:	4642      	mov	r2, r8
 800bef4:	4629      	mov	r1, r5
 800bef6:	68a0      	ldr	r0, [r4, #8]
 800bef8:	f003 fa30 	bl	800f35c <lv_obj_align>
                lv_obj_align(ext->btns, ext->content, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 800befc:	9500      	str	r5, [sp, #0]
 800befe:	462b      	mov	r3, r5
 800bf00:	220c      	movs	r2, #12
 800bf02:	68a1      	ldr	r1, [r4, #8]
 800bf04:	6820      	ldr	r0, [r4, #0]
 800bf06:	f003 fa29 	bl	800f35c <lv_obj_align>
                lv_obj_align(ext->indic, ext->btns, LV_ALIGN_IN_TOP_LEFT, 0, 0);
 800bf0a:	9500      	str	r5, [sp, #0]
 800bf0c:	462b      	mov	r3, r5
 800bf0e:	4642      	mov	r2, r8
 800bf10:	e7a0      	b.n	800be54 <tabview_realign+0x18c>
                lv_obj_align(ext->btns, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
 800bf12:	2201      	movs	r2, #1
 800bf14:	4629      	mov	r1, r5
 800bf16:	6820      	ldr	r0, [r4, #0]
 800bf18:	f003 fa20 	bl	800f35c <lv_obj_align>
                lv_obj_align(ext->content, tabview, LV_ALIGN_IN_TOP_LEFT, lv_obj_get_width(ext->btns), 0);
 800bf1c:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800bf20:	6820      	ldr	r0, [r4, #0]
 800bf22:	f003 fd32 	bl	800f98a <lv_obj_get_width>
 800bf26:	2201      	movs	r2, #1
 800bf28:	4603      	mov	r3, r0
 800bf2a:	9500      	str	r5, [sp, #0]
 800bf2c:	4631      	mov	r1, r6
 800bf2e:	4640      	mov	r0, r8
 800bf30:	f003 fa14 	bl	800f35c <lv_obj_align>
                lv_obj_align(ext->indic, ext->btns, LV_ALIGN_IN_TOP_RIGHT, 0, 0);
 800bf34:	462b      	mov	r3, r5
 800bf36:	2203      	movs	r2, #3
 800bf38:	9500      	str	r5, [sp, #0]
                lv_obj_align(ext->indic, ext->btns, LV_ALIGN_IN_TOP_LEFT, 0, 0);
 800bf3a:	e9d4 1000 	ldrd	r1, r0, [r4]
 800bf3e:	f003 fa0d 	bl	800f35c <lv_obj_align>
                lv_cont_set_fit2(ext->content, LV_FIT_TIGHT, LV_FIT_NONE);
 800bf42:	68a0      	ldr	r0, [r4, #8]
 800bf44:	f00a fabf 	bl	80164c6 <lv_cont_set_fit2.constprop.6>
                lv_cont_set_layout(ext->content, LV_LAYOUT_ROW_T);
 800bf48:	2105      	movs	r1, #5
 800bf4a:	68a0      	ldr	r0, [r4, #8]
 800bf4c:	f008 fd96 	bl	8014a7c <lv_cont_set_layout>
                lv_obj_set_width(ext->content, lv_obj_get_width(tabview) - lv_obj_get_width(ext->btns));
 800bf50:	4630      	mov	r0, r6
 800bf52:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800bf56:	f003 fd18 	bl	800f98a <lv_obj_get_width>
 800bf5a:	4605      	mov	r5, r0
 800bf5c:	6820      	ldr	r0, [r4, #0]
 800bf5e:	f003 fd14 	bl	800f98a <lv_obj_get_width>
 800bf62:	1a29      	subs	r1, r5, r0
 800bf64:	4640      	mov	r0, r8
 800bf66:	b209      	sxth	r1, r1
 800bf68:	f003 fc1a 	bl	800f7a0 <lv_obj_set_width>
                lv_obj_set_height(ext->btns, lv_obj_get_height(tabview));
 800bf6c:	6825      	ldr	r5, [r4, #0]
 800bf6e:	4630      	mov	r0, r6
 800bf70:	f003 fd11 	bl	800f996 <lv_obj_get_height>
 800bf74:	4601      	mov	r1, r0
 800bf76:	4628      	mov	r0, r5
 800bf78:	f003 fc19 	bl	800f7ae <lv_obj_set_height>
                lv_obj_set_width(ext->indic, style_btn_bg->body.padding.inner);
 800bf7c:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800bf80:	6860      	ldr	r0, [r4, #4]
 800bf82:	f003 fc0d 	bl	800f7a0 <lv_obj_set_width>
                break;
 800bf86:	e6c8      	b.n	800bd1a <tabview_realign+0x52>
                lv_obj_align(ext->btns, NULL, LV_ALIGN_IN_TOP_RIGHT, 0, 0);
 800bf88:	2203      	movs	r2, #3
 800bf8a:	4629      	mov	r1, r5
 800bf8c:	6820      	ldr	r0, [r4, #0]
 800bf8e:	f003 f9e5 	bl	800f35c <lv_obj_align>
                lv_obj_align(ext->content, tabview, LV_ALIGN_IN_TOP_LEFT, 0, 0);
 800bf92:	9500      	str	r5, [sp, #0]
 800bf94:	462b      	mov	r3, r5
 800bf96:	2201      	movs	r2, #1
 800bf98:	4631      	mov	r1, r6
 800bf9a:	68a0      	ldr	r0, [r4, #8]
 800bf9c:	f003 f9de 	bl	800f35c <lv_obj_align>
                lv_obj_align(ext->indic, ext->btns, LV_ALIGN_IN_TOP_LEFT, 0, 0);
 800bfa0:	9500      	str	r5, [sp, #0]
 800bfa2:	462b      	mov	r3, r5
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	e7c8      	b.n	800bf3a <tabview_realign+0x272>
        if(lv_obj_get_signal_cb(pages) == tabpage_signal) { /*Be sure adjust only the pages (user can other things)*/
 800bfa8:	4628      	mov	r0, r5
 800bfaa:	f003 fd85 	bl	800fab8 <lv_obj_get_signal_cb>
 800bfae:	4580      	cmp	r8, r0
 800bfb0:	d111      	bne.n	800bfd6 <tabview_realign+0x30e>
            switch(ext->btns_pos) {
 800bfb2:	7ea3      	ldrb	r3, [r4, #26]
                    lv_obj_set_size(pages, lv_obj_get_width(tabview), lv_obj_get_height(ext->content));
 800bfb4:	4630      	mov	r0, r6
            switch(ext->btns_pos) {
 800bfb6:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800bfba:	3b02      	subs	r3, #2
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	d910      	bls.n	800bfe2 <tabview_realign+0x31a>
                    lv_obj_set_size(pages, lv_obj_get_width(tabview), lv_obj_get_height(ext->content));
 800bfc0:	f003 fce3 	bl	800f98a <lv_obj_get_width>
 800bfc4:	4607      	mov	r7, r0
                    lv_obj_set_size(pages, lv_obj_get_width(tabview) - lv_obj_get_width(ext->btns),
 800bfc6:	68a0      	ldr	r0, [r4, #8]
 800bfc8:	f003 fce5 	bl	800f996 <lv_obj_get_height>
 800bfcc:	4639      	mov	r1, r7
 800bfce:	4602      	mov	r2, r0
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	f003 fb9b 	bl	800f70c <lv_obj_set_size>
        pages = lv_obj_get_child(ext->content, pages);
 800bfd6:	4629      	mov	r1, r5
 800bfd8:	68a0      	ldr	r0, [r4, #8]
 800bfda:	f003 fc91 	bl	800f900 <lv_obj_get_child>
 800bfde:	4605      	mov	r5, r0
 800bfe0:	e6a2      	b.n	800bd28 <tabview_realign+0x60>
                    lv_obj_set_size(pages, lv_obj_get_width(tabview) - lv_obj_get_width(ext->btns),
 800bfe2:	f003 fcd2 	bl	800f98a <lv_obj_get_width>
 800bfe6:	4607      	mov	r7, r0
 800bfe8:	6820      	ldr	r0, [r4, #0]
 800bfea:	f003 fcce 	bl	800f98a <lv_obj_get_width>
 800bfee:	1a3f      	subs	r7, r7, r0
 800bff0:	b23f      	sxth	r7, r7
 800bff2:	e7e8      	b.n	800bfc6 <tabview_realign+0x2fe>
            case LV_TABVIEW_BTNS_POS_LEFT: lv_obj_align(ext->indic, ext->btns, LV_ALIGN_IN_TOP_RIGHT, 0, 0); break;
 800bff4:	9500      	str	r5, [sp, #0]
 800bff6:	462b      	mov	r3, r5
 800bff8:	2203      	movs	r2, #3
 800bffa:	e6aa      	b.n	800bd52 <tabview_realign+0x8a>
            case LV_TABVIEW_BTNS_POS_RIGHT: lv_obj_align(ext->indic, ext->btns, LV_ALIGN_IN_TOP_LEFT, 0, 0); break;
 800bffc:	2300      	movs	r3, #0
 800bffe:	2201      	movs	r2, #1
 800c000:	9300      	str	r3, [sp, #0]
 800c002:	e6a6      	b.n	800bd52 <tabview_realign+0x8a>
 800c004:	0800bc19 	.word	0x0800bc19

0800c008 <lv_tabview_signal>:
    res = ancestor_signal(tabview, sign, param);
 800c008:	4b4b      	ldr	r3, [pc, #300]	; (800c138 <lv_tabview_signal+0x130>)
{
 800c00a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(tabview, sign, param);
 800c00e:	681b      	ldr	r3, [r3, #0]
{
 800c010:	4606      	mov	r6, r0
 800c012:	460c      	mov	r4, r1
 800c014:	4615      	mov	r5, r2
    res = ancestor_signal(tabview, sign, param);
 800c016:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 800c018:	2801      	cmp	r0, #1
    res = ancestor_signal(tabview, sign, param);
 800c01a:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return res;
 800c01c:	d12a      	bne.n	800c074 <lv_tabview_signal+0x6c>
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 800c01e:	4630      	mov	r0, r6
 800c020:	f003 fd4e 	bl	800fac0 <lv_obj_get_ext_attr>
 800c024:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 800c026:	b19c      	cbz	r4, 800c050 <lv_tabview_signal+0x48>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 800c028:	2c02      	cmp	r4, #2
 800c02a:	d131      	bne.n	800c090 <lv_tabview_signal+0x88>
        if(ext->content != NULL && (lv_obj_get_width(tabview) != lv_area_get_width(param) ||
 800c02c:	6883      	ldr	r3, [r0, #8]
 800c02e:	b30b      	cbz	r3, 800c074 <lv_tabview_signal+0x6c>
 800c030:	4630      	mov	r0, r6
 800c032:	f003 fcaa 	bl	800f98a <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 800c036:	88ab      	ldrh	r3, [r5, #4]
 800c038:	882a      	ldrh	r2, [r5, #0]
 800c03a:	3301      	adds	r3, #1
 800c03c:	1a9b      	subs	r3, r3, r2
 800c03e:	b21b      	sxth	r3, r3
 800c040:	4298      	cmp	r0, r3
 800c042:	d01a      	beq.n	800c07a <lv_tabview_signal+0x72>
            tabview_realign(tabview);
 800c044:	4630      	mov	r0, r6
 800c046:	f7ff fe3f 	bl	800bcc8 <tabview_realign>
 800c04a:	e013      	b.n	800c074 <lv_tabview_signal+0x6c>
        for(i = 0; ext->tab_name_ptr[i][0] != '\0'; i++) lv_mem_free(ext->tab_name_ptr[i]);
 800c04c:	f7f7 fb52 	bl	80036f4 <lv_mem_free>
 800c050:	b2e2      	uxtb	r2, r4
 800c052:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c056:	3401      	adds	r4, #1
 800c058:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c05c:	7805      	ldrb	r5, [r0, #0]
 800c05e:	2d00      	cmp	r5, #0
 800c060:	d1f4      	bne.n	800c04c <lv_tabview_signal+0x44>
        lv_mem_free(ext->tab_name_ptr);
 800c062:	4618      	mov	r0, r3
 800c064:	f7f7 fb46 	bl	80036f4 <lv_mem_free>
        ext->tab_name_ptr = NULL;
 800c068:	f8c8 500c 	str.w	r5, [r8, #12]
        ext->btns         = NULL; /*These objects were children so they are already invalid*/
 800c06c:	f8c8 5000 	str.w	r5, [r8]
        ext->content      = NULL;
 800c070:	f8c8 5008 	str.w	r5, [r8, #8]
}
 800c074:	4638      	mov	r0, r7
 800c076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                                    lv_obj_get_height(tabview) != lv_area_get_height(param))) {
 800c07a:	4630      	mov	r0, r6
 800c07c:	f003 fc8b 	bl	800f996 <lv_obj_get_height>
    return area_p->y2 - area_p->y1 + 1;
 800c080:	88eb      	ldrh	r3, [r5, #6]
 800c082:	886a      	ldrh	r2, [r5, #2]
 800c084:	3301      	adds	r3, #1
 800c086:	1a9b      	subs	r3, r3, r2
        if(ext->content != NULL && (lv_obj_get_width(tabview) != lv_area_get_width(param) ||
 800c088:	b21b      	sxth	r3, r3
 800c08a:	4298      	cmp	r0, r3
 800c08c:	d1da      	bne.n	800c044 <lv_tabview_signal+0x3c>
 800c08e:	e7f1      	b.n	800c074 <lv_tabview_signal+0x6c>
    } else if(sign == LV_SIGNAL_RELEASED) {
 800c090:	2c0a      	cmp	r4, #10
 800c092:	d119      	bne.n	800c0c8 <lv_tabview_signal+0xc0>
        lv_indev_t * indev         = lv_indev_get_act();
 800c094:	f7f6 fbf6 	bl	8002884 <lv_indev_get_act>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 800c098:	f002 ffa0 	bl	800efdc <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_KEYPAD ||
 800c09c:	2802      	cmp	r0, #2
 800c09e:	d109      	bne.n	800c0b4 <lv_tabview_signal+0xac>
            lv_event_send(ext->btns, LV_EVENT_CLICKED, lv_event_get_data());
 800c0a0:	f8d8 4000 	ldr.w	r4, [r8]
 800c0a4:	f7f6 fc82 	bl	80029ac <lv_event_get_data>
 800c0a8:	2106      	movs	r1, #6
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	f003 f837 	bl	800f120 <lv_event_send>
 800c0b2:	e7df      	b.n	800c074 <lv_tabview_signal+0x6c>
        if(indev_type == LV_INDEV_TYPE_KEYPAD ||
 800c0b4:	2804      	cmp	r0, #4
 800c0b6:	d1dd      	bne.n	800c074 <lv_tabview_signal+0x6c>
           (indev_type == LV_INDEV_TYPE_ENCODER && lv_group_get_editing(lv_obj_get_group(tabview)))) {
 800c0b8:	4630      	mov	r0, r6
 800c0ba:	f003 fd2f 	bl	800fb1c <lv_obj_get_group>
 800c0be:	f002 ff78 	bl	800efb2 <lv_group_get_editing>
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	d1ec      	bne.n	800c0a0 <lv_tabview_signal+0x98>
 800c0c6:	e7d5      	b.n	800c074 <lv_tabview_signal+0x6c>
    } else if(sign == LV_SIGNAL_FOCUS || sign == LV_SIGNAL_DEFOCUS || sign == LV_SIGNAL_CONTROL) {
 800c0c8:	f1a4 030f 	sub.w	r3, r4, #15
 800c0cc:	2b02      	cmp	r3, #2
 800c0ce:	d81f      	bhi.n	800c110 <lv_tabview_signal+0x108>
        if(ext->btns) {
 800c0d0:	6800      	ldr	r0, [r0, #0]
 800c0d2:	b118      	cbz	r0, 800c0dc <lv_tabview_signal+0xd4>
            ext->btns->signal_cb(ext->btns, sign, param);
 800c0d4:	69c3      	ldr	r3, [r0, #28]
 800c0d6:	462a      	mov	r2, r5
 800c0d8:	4621      	mov	r1, r4
 800c0da:	4798      	blx	r3
        if(sign == LV_SIGNAL_FOCUS) {
 800c0dc:	2c0f      	cmp	r4, #15
 800c0de:	d1c9      	bne.n	800c074 <lv_tabview_signal+0x6c>
            lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 800c0e0:	f7f6 fbd0 	bl	8002884 <lv_indev_get_act>
 800c0e4:	f002 ff7a 	bl	800efdc <lv_indev_get_type>
            if(indev_type == LV_INDEV_TYPE_ENCODER) {
 800c0e8:	2804      	cmp	r0, #4
 800c0ea:	d106      	bne.n	800c0fa <lv_tabview_signal+0xf2>
                lv_group_t * g = lv_obj_get_group(tabview);
 800c0ec:	4630      	mov	r0, r6
 800c0ee:	f003 fd15 	bl	800fb1c <lv_obj_get_group>
                if(lv_group_get_editing(g)) {
 800c0f2:	f002 ff5e 	bl	800efb2 <lv_group_get_editing>
 800c0f6:	2800      	cmp	r0, #0
 800c0f8:	d0bc      	beq.n	800c074 <lv_tabview_signal+0x6c>
                lv_btnm_ext_t * btnm_ext = lv_obj_get_ext_attr(ext->btns);
 800c0fa:	f8d8 0000 	ldr.w	r0, [r8]
 800c0fe:	f003 fcdf 	bl	800fac0 <lv_obj_get_ext_attr>
                btnm_ext->btn_id_pr      = 0;
 800c102:	2300      	movs	r3, #0
 800c104:	8443      	strh	r3, [r0, #34]	; 0x22
                lv_obj_invalidate(ext->btns);
 800c106:	f8d8 0000 	ldr.w	r0, [r8]
 800c10a:	f003 f871 	bl	800f1f0 <lv_obj_invalidate>
 800c10e:	e7b1      	b.n	800c074 <lv_tabview_signal+0x6c>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 800c110:	2c12      	cmp	r4, #18
 800c112:	d101      	bne.n	800c118 <lv_tabview_signal+0x110>
        *editable       = true;
 800c114:	702f      	strb	r7, [r5, #0]
 800c116:	e7ad      	b.n	800c074 <lv_tabview_signal+0x6c>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800c118:	2c06      	cmp	r4, #6
 800c11a:	d1ab      	bne.n	800c074 <lv_tabview_signal+0x6c>
 800c11c:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 800c11e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800c122:	b2da      	uxtb	r2, r3
 800c124:	b119      	cbz	r1, 800c12e <lv_tabview_signal+0x126>
 800c126:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 800c128:	2b07      	cmp	r3, #7
 800c12a:	d1f8      	bne.n	800c11e <lv_tabview_signal+0x116>
 800c12c:	461a      	mov	r2, r3
        buf->type[i] = "lv_tabview";
 800c12e:	4b03      	ldr	r3, [pc, #12]	; (800c13c <lv_tabview_signal+0x134>)
 800c130:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 800c134:	e79e      	b.n	800c074 <lv_tabview_signal+0x6c>
 800c136:	bf00      	nop
 800c138:	200289a4 	.word	0x200289a4
 800c13c:	0801c8ac 	.word	0x0801c8ac

0800c140 <lv_tabview_add_tab>:
{
 800c140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c144:	4606      	mov	r6, r0
 800c146:	4688      	mov	r8, r1
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 800c148:	f003 fcba 	bl	800fac0 <lv_obj_get_ext_attr>
    lv_obj_t * h = lv_page_create(ext->content, NULL);
 800c14c:	2100      	movs	r1, #0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 800c14e:	4604      	mov	r4, r0
    lv_obj_t * h = lv_page_create(ext->content, NULL);
 800c150:	6880      	ldr	r0, [r0, #8]
 800c152:	f7fc ffc1 	bl	80090d8 <lv_page_create>
 800c156:	4605      	mov	r5, r0
    lv_obj_set_size(h, lv_obj_get_width(tabview), lv_obj_get_height(ext->content));
 800c158:	4630      	mov	r0, r6
 800c15a:	f003 fc16 	bl	800f98a <lv_obj_get_width>
 800c15e:	4607      	mov	r7, r0
 800c160:	68a0      	ldr	r0, [r4, #8]
 800c162:	f003 fc18 	bl	800f996 <lv_obj_get_height>
 800c166:	4639      	mov	r1, r7
 800c168:	4602      	mov	r2, r0
 800c16a:	4628      	mov	r0, r5
 800c16c:	f003 face 	bl	800f70c <lv_obj_set_size>
    lv_page_set_sb_mode(h, LV_SB_MODE_AUTO);
 800c170:	2103      	movs	r1, #3
 800c172:	4628      	mov	r0, r5
    if(page_signal == NULL) page_signal = lv_obj_get_signal_cb(h);
 800c174:	4f6e      	ldr	r7, [pc, #440]	; (800c330 <lv_tabview_add_tab+0x1f0>)
    lv_page_set_sb_mode(h, LV_SB_MODE_AUTO);
 800c176:	f009 fabe 	bl	80156f6 <lv_page_set_sb_mode>
    lv_page_set_style(h, LV_PAGE_STYLE_BG, &lv_style_transp);
 800c17a:	4a6e      	ldr	r2, [pc, #440]	; (800c334 <lv_tabview_add_tab+0x1f4>)
 800c17c:	2100      	movs	r1, #0
 800c17e:	4628      	mov	r0, r5
 800c180:	f009 faf5 	bl	801576e <lv_page_set_style>
    lv_page_set_style(h, LV_PAGE_STYLE_SCRL, &lv_style_transp);
 800c184:	4a6b      	ldr	r2, [pc, #428]	; (800c334 <lv_tabview_add_tab+0x1f4>)
 800c186:	2101      	movs	r1, #1
 800c188:	4628      	mov	r0, r5
 800c18a:	f009 faf0 	bl	801576e <lv_page_set_style>
    if(page_signal == NULL) page_signal = lv_obj_get_signal_cb(h);
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	b91b      	cbnz	r3, 800c19a <lv_tabview_add_tab+0x5a>
 800c192:	4628      	mov	r0, r5
 800c194:	f003 fc90 	bl	800fab8 <lv_obj_get_signal_cb>
 800c198:	6038      	str	r0, [r7, #0]
    if(page_scrl_signal == NULL) page_scrl_signal = lv_obj_get_signal_cb(lv_page_get_scrl(h));
 800c19a:	4f67      	ldr	r7, [pc, #412]	; (800c338 <lv_tabview_add_tab+0x1f8>)
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	b92b      	cbnz	r3, 800c1ac <lv_tabview_add_tab+0x6c>
 800c1a0:	4628      	mov	r0, r5
 800c1a2:	f009 fb14 	bl	80157ce <lv_page_get_scrl>
 800c1a6:	f003 fc87 	bl	800fab8 <lv_obj_get_signal_cb>
 800c1aa:	6038      	str	r0, [r7, #0]
    lv_obj_set_signal_cb(h, tabpage_signal);
 800c1ac:	4963      	ldr	r1, [pc, #396]	; (800c33c <lv_tabview_add_tab+0x1fc>)
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	f003 f813 	bl	800f1da <lv_obj_set_signal_cb>
    lv_obj_set_signal_cb(lv_page_get_scrl(h), tabpage_scrl_signal);
 800c1b4:	4628      	mov	r0, r5
 800c1b6:	f009 fb0a 	bl	80157ce <lv_page_get_scrl>
 800c1ba:	4961      	ldr	r1, [pc, #388]	; (800c340 <lv_tabview_add_tab+0x200>)
 800c1bc:	f003 f80d 	bl	800f1da <lv_obj_set_signal_cb>
    name_dm = lv_mem_alloc(strlen(name) + 1); /*+1 for the the closing '\0' */
 800c1c0:	4640      	mov	r0, r8
 800c1c2:	f00a fac2 	bl	801674a <strlen>
 800c1c6:	3001      	adds	r0, #1
 800c1c8:	f7f7 fa52 	bl	8003670 <lv_mem_alloc>
    lv_mem_assert(name_dm);
 800c1cc:	4607      	mov	r7, r0
 800c1ce:	b930      	cbnz	r0, 800c1de <lv_tabview_add_tab+0x9e>
 800c1d0:	4b5c      	ldr	r3, [pc, #368]	; (800c344 <lv_tabview_add_tab+0x204>)
 800c1d2:	22e4      	movs	r2, #228	; 0xe4
 800c1d4:	495c      	ldr	r1, [pc, #368]	; (800c348 <lv_tabview_add_tab+0x208>)
 800c1d6:	2003      	movs	r0, #3
 800c1d8:	f7f7 fa1c 	bl	8003614 <lv_log_add>
 800c1dc:	e7fe      	b.n	800c1dc <lv_tabview_add_tab+0x9c>
    strcpy(name_dm, name);
 800c1de:	4641      	mov	r1, r8
 800c1e0:	f00a faa9 	bl	8016736 <strcpy>
    switch(ext->btns_pos) {
 800c1e4:	7ea3      	ldrb	r3, [r4, #26]
    ext->tab_cnt++;
 800c1e6:	8ae1      	ldrh	r1, [r4, #22]
    switch(ext->btns_pos) {
 800c1e8:	f3c3 1341 	ubfx	r3, r3, #5, #2
            ext->tab_name_ptr = lv_mem_realloc(ext->tab_name_ptr, sizeof(char *) * (ext->tab_cnt * 2));
 800c1ec:	68e0      	ldr	r0, [r4, #12]
    ext->tab_cnt++;
 800c1ee:	3101      	adds	r1, #1
    switch(ext->btns_pos) {
 800c1f0:	3b02      	subs	r3, #2
    ext->tab_cnt++;
 800c1f2:	b289      	uxth	r1, r1
    switch(ext->btns_pos) {
 800c1f4:	2b01      	cmp	r3, #1
    ext->tab_cnt++;
 800c1f6:	82e1      	strh	r1, [r4, #22]
            ext->tab_name_ptr = lv_mem_realloc(ext->tab_name_ptr, sizeof(char *) * (ext->tab_cnt + 1));
 800c1f8:	bf8a      	itet	hi
 800c1fa:	3101      	addhi	r1, #1
            ext->tab_name_ptr = lv_mem_realloc(ext->tab_name_ptr, sizeof(char *) * (ext->tab_cnt * 2));
 800c1fc:	00c9      	lslls	r1, r1, #3
            ext->tab_name_ptr = lv_mem_realloc(ext->tab_name_ptr, sizeof(char *) * (ext->tab_cnt + 1));
 800c1fe:	0089      	lslhi	r1, r1, #2
            ext->tab_name_ptr = lv_mem_realloc(ext->tab_name_ptr, sizeof(char *) * (ext->tab_cnt * 2));
 800c200:	f7f7 faa2 	bl	8003748 <lv_mem_realloc>
 800c204:	60e0      	str	r0, [r4, #12]
    lv_mem_assert(ext->tab_name_ptr);
 800c206:	68e3      	ldr	r3, [r4, #12]
 800c208:	b933      	cbnz	r3, 800c218 <lv_tabview_add_tab+0xd8>
 800c20a:	4b4e      	ldr	r3, [pc, #312]	; (800c344 <lv_tabview_add_tab+0x204>)
 800c20c:	22f5      	movs	r2, #245	; 0xf5
 800c20e:	494e      	ldr	r1, [pc, #312]	; (800c348 <lv_tabview_add_tab+0x208>)
 800c210:	2003      	movs	r0, #3
 800c212:	f7f7 f9ff 	bl	8003614 <lv_log_add>
 800c216:	e7fe      	b.n	800c216 <lv_tabview_add_tab+0xd6>
    switch(ext->btns_pos) {
 800c218:	7ea1      	ldrb	r1, [r4, #26]
 800c21a:	8ae2      	ldrh	r2, [r4, #22]
 800c21c:	f3c1 1141 	ubfx	r1, r1, #5, #2
 800c220:	3902      	subs	r1, #2
 800c222:	2901      	cmp	r1, #1
 800c224:	4949      	ldr	r1, [pc, #292]	; (800c34c <lv_tabview_add_tab+0x20c>)
 800c226:	d952      	bls.n	800c2ce <lv_tabview_add_tab+0x18e>
            ext->tab_name_ptr[ext->tab_cnt - 1] = name_dm;
 800c228:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800c22c:	3a01      	subs	r2, #1
 800c22e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
            ext->tab_name_ptr[ext->tab_cnt]     = "";
 800c232:	eb03 0382 	add.w	r3, r3, r2, lsl #2
                ext->tab_name_ptr[1] = "";
 800c236:	6059      	str	r1, [r3, #4]
    lv_btnm_ext_t * btnm_ext = lv_obj_get_ext_attr(ext->btns);
 800c238:	6820      	ldr	r0, [r4, #0]
 800c23a:	f003 fc41 	bl	800fac0 <lv_obj_get_ext_attr>
    btnm_ext->map_p          = NULL;
 800c23e:	2300      	movs	r3, #0
    lv_btnm_set_map(ext->btns, ext->tab_name_ptr);
 800c240:	68e1      	ldr	r1, [r4, #12]
    btnm_ext->map_p          = NULL;
 800c242:	6003      	str	r3, [r0, #0]
    lv_btnm_set_map(ext->btns, ext->tab_name_ptr);
 800c244:	6820      	ldr	r0, [r4, #0]
 800c246:	f008 fc03 	bl	8014a50 <lv_btnm_set_map>
    lv_btnm_set_btn_ctrl(ext->btns, ext->tab_cur, LV_BTNM_CTRL_NO_REPEAT);
 800c24a:	2210      	movs	r2, #16
 800c24c:	8aa1      	ldrh	r1, [r4, #20]
 800c24e:	6820      	ldr	r0, [r4, #0]
 800c250:	f008 fb50 	bl	80148f4 <lv_btnm_set_btn_ctrl>
    const lv_style_t * style_tabs = lv_obj_get_style(ext->btns);
 800c254:	6820      	ldr	r0, [r4, #0]
 800c256:	f7f6 fd73 	bl	8002d40 <lv_obj_get_style>
    switch(ext->btns_pos) {
 800c25a:	7ea3      	ldrb	r3, [r4, #26]
    const lv_style_t * style_tabs = lv_obj_get_style(ext->btns);
 800c25c:	4680      	mov	r8, r0
    switch(ext->btns_pos) {
 800c25e:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800c262:	3b02      	subs	r3, #2
 800c264:	2b01      	cmp	r3, #1
 800c266:	d93e      	bls.n	800c2e6 <lv_tabview_add_tab+0x1a6>
            indic_size = (lv_obj_get_width(tabview) - style_tabs->body.padding.inner * (ext->tab_cnt - 1) -
 800c268:	4630      	mov	r0, r6
 800c26a:	f003 fb8e 	bl	800f98a <lv_obj_get_width>
 800c26e:	8ae1      	ldrh	r1, [r4, #22]
 800c270:	f9b8 201e 	ldrsh.w	r2, [r8, #30]
 800c274:	f1c1 0301 	rsb	r3, r1, #1
                          style_tabs->body.padding.left - style_tabs->body.padding.right) /
 800c278:	f9b8 701a 	ldrsh.w	r7, [r8, #26]
            indic_size = (lv_obj_get_width(tabview) - style_tabs->body.padding.inner * (ext->tab_cnt - 1) -
 800c27c:	4353      	muls	r3, r2
                          style_tabs->body.padding.left - style_tabs->body.padding.right) /
 800c27e:	1bdb      	subs	r3, r3, r7
 800c280:	f9b8 701c 	ldrsh.w	r7, [r8, #28]
 800c284:	1bdb      	subs	r3, r3, r7
 800c286:	181f      	adds	r7, r3, r0
            lv_obj_set_width(ext->indic, indic_size);
 800c288:	6860      	ldr	r0, [r4, #4]
                          style_tabs->body.padding.left - style_tabs->body.padding.right) /
 800c28a:	fb97 f7f1 	sdiv	r7, r7, r1
            indic_size = (lv_obj_get_width(tabview) - style_tabs->body.padding.inner * (ext->tab_cnt - 1) -
 800c28e:	b23f      	sxth	r7, r7
            lv_obj_set_width(ext->indic, indic_size);
 800c290:	4639      	mov	r1, r7
 800c292:	f003 fa85 	bl	800f7a0 <lv_obj_set_width>
            lv_obj_set_x(ext->indic, indic_size * ext->tab_cur + style_tabs->body.padding.inner * ext->tab_cur +
 800c296:	f8b8 101e 	ldrh.w	r1, [r8, #30]
 800c29a:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800c29e:	440f      	add	r7, r1
 800c2a0:	8aa1      	ldrh	r1, [r4, #20]
 800c2a2:	6860      	ldr	r0, [r4, #4]
 800c2a4:	fb11 3107 	smlabb	r1, r1, r7, r3
 800c2a8:	b209      	sxth	r1, r1
 800c2aa:	f003 f846 	bl	800f33a <lv_obj_set_x>
    if(ext->tab_cnt == 1) {
 800c2ae:	8ae3      	ldrh	r3, [r4, #22]
    tabview_realign(tabview); /*Set the size of the pages, tab buttons and indicator*/
 800c2b0:	4630      	mov	r0, r6
    if(ext->tab_cnt == 1) {
 800c2b2:	2b01      	cmp	r3, #1
        ext->tab_cur = 0;
 800c2b4:	bf04      	itt	eq
 800c2b6:	2300      	moveq	r3, #0
 800c2b8:	82a3      	strheq	r3, [r4, #20]
    tabview_realign(tabview); /*Set the size of the pages, tab buttons and indicator*/
 800c2ba:	f7ff fd05 	bl	800bcc8 <tabview_realign>
    lv_tabview_set_tab_act(tabview, ext->tab_cur, false);
 800c2be:	4630      	mov	r0, r6
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	8aa1      	ldrh	r1, [r4, #20]
 800c2c4:	f7ff fbca 	bl	800ba5c <lv_tabview_set_tab_act>
}
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(ext->tab_cnt == 1) {
 800c2ce:	2a01      	cmp	r2, #1
 800c2d0:	d101      	bne.n	800c2d6 <lv_tabview_add_tab+0x196>
                ext->tab_name_ptr[0] = name_dm;
 800c2d2:	601f      	str	r7, [r3, #0]
 800c2d4:	e7af      	b.n	800c236 <lv_tabview_add_tab+0xf6>
                ext->tab_name_ptr[ext->tab_cnt * 2 - 3] = "\n";
 800c2d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c2da:	4a1d      	ldr	r2, [pc, #116]	; (800c350 <lv_tabview_add_tab+0x210>)
                ext->tab_name_ptr[ext->tab_cnt * 2 - 1] = "";
 800c2dc:	f843 1c04 	str.w	r1, [r3, #-4]
                ext->tab_name_ptr[ext->tab_cnt * 2 - 2] = name_dm;
 800c2e0:	e943 2703 	strd	r2, r7, [r3, #-12]
                ext->tab_name_ptr[ext->tab_cnt * 2 - 1] = "";
 800c2e4:	e7a8      	b.n	800c238 <lv_tabview_add_tab+0xf8>
            max_h = lv_obj_get_height(ext->btns) - style_tabs->body.padding.top - style_tabs->body.padding.bottom;
 800c2e6:	6820      	ldr	r0, [r4, #0]
 800c2e8:	f003 fb55 	bl	800f996 <lv_obj_get_height>
            btn_h = max_h - ((ext->tab_cnt - 1) * style_tabs->body.padding.inner);
 800c2ec:	f8b4 e016 	ldrh.w	lr, [r4, #22]
            max_h = lv_obj_get_height(ext->btns) - style_tabs->body.padding.top - style_tabs->body.padding.bottom;
 800c2f0:	f9b8 7016 	ldrsh.w	r7, [r8, #22]
            btn_h = max_h - ((ext->tab_cnt - 1) * style_tabs->body.padding.inner);
 800c2f4:	f9b8 201e 	ldrsh.w	r2, [r8, #30]
 800c2f8:	f1ce 0301 	rsb	r3, lr, #1
 800c2fc:	f8b8 c018 	ldrh.w	ip, [r8, #24]
 800c300:	fb13 f302 	smulbb	r3, r3, r2
 800c304:	44bc      	add	ip, r7
 800c306:	eba3 030c 	sub.w	r3, r3, ip
 800c30a:	18c1      	adds	r1, r0, r3
            act_y = style_tabs->body.padding.top + ext->tab_cur * (btn_h + style_tabs->body.padding.inner);
 800c30c:	8aa3      	ldrh	r3, [r4, #20]
            lv_obj_set_height(ext->indic, btn_h);
 800c30e:	6860      	ldr	r0, [r4, #4]
            btn_h = btn_h / ext->tab_cnt;
 800c310:	b209      	sxth	r1, r1
 800c312:	fb91 f1fe 	sdiv	r1, r1, lr
            btn_h--; /*-1 because e.g. height = 100 means 101 pixels (0..100)*/
 800c316:	3901      	subs	r1, #1
 800c318:	b209      	sxth	r1, r1
            act_y = style_tabs->body.padding.top + ext->tab_cur * (btn_h + style_tabs->body.padding.inner);
 800c31a:	440a      	add	r2, r1
 800c31c:	fb13 7702 	smlabb	r7, r3, r2, r7
            lv_obj_set_height(ext->indic, btn_h);
 800c320:	f003 fa45 	bl	800f7ae <lv_obj_set_height>
            lv_obj_set_y(ext->indic, act_y);
 800c324:	6860      	ldr	r0, [r4, #4]
            act_y = style_tabs->body.padding.top + ext->tab_cur * (btn_h + style_tabs->body.padding.inner);
 800c326:	b23f      	sxth	r7, r7
            lv_obj_set_y(ext->indic, act_y);
 800c328:	4639      	mov	r1, r7
 800c32a:	f003 f80f 	bl	800f34c <lv_obj_set_y>
            break;
 800c32e:	e7be      	b.n	800c2ae <lv_tabview_add_tab+0x16e>
 800c330:	200289ac 	.word	0x200289ac
 800c334:	20020650 	.word	0x20020650
 800c338:	200289a8 	.word	0x200289a8
 800c33c:	0800bc19 	.word	0x0800bc19
 800c340:	0800bc6d 	.word	0x0800bc6d
 800c344:	080176f4 	.word	0x080176f4
 800c348:	0801c848 	.word	0x0801c848
 800c34c:	0801ca18 	.word	0x0801ca18
 800c350:	0801ca17 	.word	0x0801ca17

0800c354 <lv_tabview_create>:
{
 800c354:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c358:	460e      	mov	r6, r1
    lv_obj_t * new_tabview = lv_obj_create(par, copy);
 800c35a:	f7f6 fb5f 	bl	8002a1c <lv_obj_create>
    lv_mem_assert(new_tabview);
 800c35e:	4605      	mov	r5, r0
 800c360:	b930      	cbnz	r0, 800c370 <lv_tabview_create+0x1c>
 800c362:	4b9a      	ldr	r3, [pc, #616]	; (800c5cc <lv_tabview_create+0x278>)
 800c364:	224a      	movs	r2, #74	; 0x4a
 800c366:	499a      	ldr	r1, [pc, #616]	; (800c5d0 <lv_tabview_create+0x27c>)
 800c368:	2003      	movs	r0, #3
 800c36a:	f7f7 f953 	bl	8003614 <lv_log_add>
 800c36e:	e7fe      	b.n	800c36e <lv_tabview_create+0x1a>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_tabview);
 800c370:	4c98      	ldr	r4, [pc, #608]	; (800c5d4 <lv_tabview_create+0x280>)
 800c372:	6823      	ldr	r3, [r4, #0]
 800c374:	b913      	cbnz	r3, 800c37c <lv_tabview_create+0x28>
 800c376:	f003 fb9f 	bl	800fab8 <lv_obj_get_signal_cb>
 800c37a:	6020      	str	r0, [r4, #0]
    lv_tabview_ext_t * ext = lv_obj_allocate_ext_attr(new_tabview, sizeof(lv_tabview_ext_t));
 800c37c:	211c      	movs	r1, #28
 800c37e:	4628      	mov	r0, r5
 800c380:	f002 ff2f 	bl	800f1e2 <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 800c384:	4604      	mov	r4, r0
 800c386:	b930      	cbnz	r0, 800c396 <lv_tabview_create+0x42>
 800c388:	4b90      	ldr	r3, [pc, #576]	; (800c5cc <lv_tabview_create+0x278>)
 800c38a:	2250      	movs	r2, #80	; 0x50
 800c38c:	4990      	ldr	r1, [pc, #576]	; (800c5d0 <lv_tabview_create+0x27c>)
 800c38e:	2003      	movs	r0, #3
 800c390:	f7f7 f940 	bl	8003614 <lv_log_add>
 800c394:	e7fe      	b.n	800c394 <lv_tabview_create+0x40>
    ext->anim_time = LV_TABVIEW_DEF_ANIM_TIME;
 800c396:	f44f 7396 	mov.w	r3, #300	; 0x12c
    ext->point_last.x = 0;
 800c39a:	2700      	movs	r7, #0
    lv_obj_set_signal_cb(new_tabview, lv_tabview_signal);
 800c39c:	498e      	ldr	r1, [pc, #568]	; (800c5d8 <lv_tabview_create+0x284>)
    ext->anim_time = LV_TABVIEW_DEF_ANIM_TIME;
 800c39e:	8303      	strh	r3, [r0, #24]
    ext->slide_enable = 1;
 800c3a0:	7e83      	ldrb	r3, [r0, #26]
    ext->point_last.x = 0;
 800c3a2:	6107      	str	r7, [r0, #16]
    ext->slide_enable = 1;
 800c3a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    ext->tab_cur      = 0;
 800c3a8:	8287      	strh	r7, [r0, #20]
    ext->btns         = NULL;
 800c3aa:	6007      	str	r7, [r0, #0]
    ext->slide_enable = 1;
 800c3ac:	f043 0301 	orr.w	r3, r3, #1
    ext->indic        = NULL;
 800c3b0:	e9c0 7701 	strd	r7, r7, [r0, #4]
    ext->slide_enable = 1;
 800c3b4:	7683      	strb	r3, [r0, #26]
    lv_obj_set_signal_cb(new_tabview, lv_tabview_signal);
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	f002 ff0f 	bl	800f1da <lv_obj_set_signal_cb>
    if(copy == NULL) {
 800c3bc:	2e00      	cmp	r6, #0
 800c3be:	f040 80a7 	bne.w	800c510 <lv_tabview_create+0x1bc>
        ext->tab_name_ptr = lv_mem_alloc(sizeof(char *));
 800c3c2:	2004      	movs	r0, #4
 800c3c4:	f7f7 f954 	bl	8003670 <lv_mem_alloc>
 800c3c8:	60e0      	str	r0, [r4, #12]
        lv_mem_assert(ext->tab_name_ptr);
 800c3ca:	b930      	cbnz	r0, 800c3da <lv_tabview_create+0x86>
 800c3cc:	4b7f      	ldr	r3, [pc, #508]	; (800c5cc <lv_tabview_create+0x278>)
 800c3ce:	226a      	movs	r2, #106	; 0x6a
 800c3d0:	497f      	ldr	r1, [pc, #508]	; (800c5d0 <lv_tabview_create+0x27c>)
 800c3d2:	2003      	movs	r0, #3
 800c3d4:	f7f7 f91e 	bl	8003614 <lv_log_add>
 800c3d8:	e7fe      	b.n	800c3d8 <lv_tabview_create+0x84>
        ext->tab_name_ptr[0] = "";
 800c3da:	4b80      	ldr	r3, [pc, #512]	; (800c5dc <lv_tabview_create+0x288>)
 800c3dc:	6003      	str	r3, [r0, #0]
        lv_obj_set_size(new_tabview, lv_obj_get_width_fit(lv_obj_get_parent(new_tabview)),
 800c3de:	4628      	mov	r0, r5
        ext->tab_cnt         = 0;
 800c3e0:	82e6      	strh	r6, [r4, #22]
        lv_obj_set_size(new_tabview, lv_obj_get_width_fit(lv_obj_get_parent(new_tabview)),
 800c3e2:	f003 fa8b 	bl	800f8fc <lv_obj_get_parent>
 800c3e6:	f003 fae1 	bl	800f9ac <lv_obj_get_width_fit>
 800c3ea:	4607      	mov	r7, r0
 800c3ec:	4628      	mov	r0, r5
 800c3ee:	f003 fa85 	bl	800f8fc <lv_obj_get_parent>
 800c3f2:	f003 fae9 	bl	800f9c8 <lv_obj_get_height_fit>
 800c3f6:	4639      	mov	r1, r7
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	f003 f986 	bl	800f70c <lv_obj_set_size>
        ext->content = lv_cont_create(new_tabview, NULL);
 800c400:	4631      	mov	r1, r6
 800c402:	4628      	mov	r0, r5
 800c404:	f7fc f86e 	bl	80084e4 <lv_cont_create>
        ext->btns    = lv_btnm_create(new_tabview, NULL);
 800c408:	4631      	mov	r1, r6
        ext->content = lv_cont_create(new_tabview, NULL);
 800c40a:	60a0      	str	r0, [r4, #8]
        ext->btns    = lv_btnm_create(new_tabview, NULL);
 800c40c:	4628      	mov	r0, r5
 800c40e:	f7fb fcb1 	bl	8007d74 <lv_btnm_create>
        ext->indic   = lv_obj_create(ext->btns, NULL);
 800c412:	4631      	mov	r1, r6
        ext->btns    = lv_btnm_create(new_tabview, NULL);
 800c414:	6020      	str	r0, [r4, #0]
        ext->indic   = lv_obj_create(ext->btns, NULL);
 800c416:	f7f6 fb01 	bl	8002a1c <lv_obj_create>
        lv_obj_set_height(ext->btns, 3 * LV_DPI / 4);
 800c41a:	214b      	movs	r1, #75	; 0x4b
        ext->indic   = lv_obj_create(ext->btns, NULL);
 800c41c:	6060      	str	r0, [r4, #4]
        lv_obj_set_height(ext->btns, 3 * LV_DPI / 4);
 800c41e:	6820      	ldr	r0, [r4, #0]
 800c420:	f003 f9c5 	bl	800f7ae <lv_obj_set_height>
        lv_btnm_set_map(ext->btns, tab_def);
 800c424:	6820      	ldr	r0, [r4, #0]
 800c426:	496e      	ldr	r1, [pc, #440]	; (800c5e0 <lv_tabview_create+0x28c>)
 800c428:	f008 fb12 	bl	8014a50 <lv_btnm_set_map>
        lv_obj_set_event_cb(ext->btns, tab_btnm_event_cb);
 800c42c:	6820      	ldr	r0, [r4, #0]
 800c42e:	496d      	ldr	r1, [pc, #436]	; (800c5e4 <lv_tabview_create+0x290>)
 800c430:	f002 fe74 	bl	800f11c <lv_obj_set_event_cb>
        lv_obj_set_width(ext->indic, LV_DPI);
 800c434:	6860      	ldr	r0, [r4, #4]
 800c436:	2164      	movs	r1, #100	; 0x64
 800c438:	f003 f9b2 	bl	800f7a0 <lv_obj_set_width>
        lv_obj_align(ext->indic, ext->btns, LV_ALIGN_IN_BOTTOM_LEFT, 0, 0);
 800c43c:	4633      	mov	r3, r6
 800c43e:	2204      	movs	r2, #4
 800c440:	9600      	str	r6, [sp, #0]
 800c442:	e9d4 1000 	ldrd	r1, r0, [r4]
 800c446:	f002 ff89 	bl	800f35c <lv_obj_align>
        lv_obj_set_click(ext->indic, false);
 800c44a:	4631      	mov	r1, r6
 800c44c:	6860      	ldr	r0, [r4, #4]
 800c44e:	f002 fe2e 	bl	800f0ae <lv_obj_set_click>
        lv_cont_set_fit2(ext->content, LV_FIT_TIGHT, LV_FIT_NONE);
 800c452:	68a0      	ldr	r0, [r4, #8]
 800c454:	f00a f837 	bl	80164c6 <lv_cont_set_fit2.constprop.6>
        lv_cont_set_layout(ext->content, LV_LAYOUT_ROW_T);
 800c458:	68a0      	ldr	r0, [r4, #8]
 800c45a:	2105      	movs	r1, #5
 800c45c:	f008 fb0e 	bl	8014a7c <lv_cont_set_layout>
 * @param style pointer to the new style
 */
static inline void lv_cont_set_style(lv_obj_t * cont, lv_cont_style_t type, const lv_style_t * style)
{
    (void)type; /*Unused*/
    lv_obj_set_style(cont, style);
 800c460:	4961      	ldr	r1, [pc, #388]	; (800c5e8 <lv_tabview_create+0x294>)
 800c462:	68a0      	ldr	r0, [r4, #8]
 800c464:	f003 fa6e 	bl	800f944 <lv_obj_set_style>
        lv_obj_set_height(ext->content, lv_obj_get_height(new_tabview) - lv_obj_get_height(ext->btns));
 800c468:	4628      	mov	r0, r5
 800c46a:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800c46e:	f003 fa92 	bl	800f996 <lv_obj_get_height>
 800c472:	4607      	mov	r7, r0
 800c474:	6820      	ldr	r0, [r4, #0]
 800c476:	f003 fa8e 	bl	800f996 <lv_obj_get_height>
 800c47a:	1a39      	subs	r1, r7, r0
 800c47c:	4640      	mov	r0, r8
 800c47e:	b209      	sxth	r1, r1
 800c480:	f003 f995 	bl	800f7ae <lv_obj_set_height>
        lv_obj_align(ext->content, ext->btns, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 800c484:	9600      	str	r6, [sp, #0]
 800c486:	4633      	mov	r3, r6
 800c488:	6821      	ldr	r1, [r4, #0]
 800c48a:	68a0      	ldr	r0, [r4, #8]
 800c48c:	220c      	movs	r2, #12
 800c48e:	f002 ff65 	bl	800f35c <lv_obj_align>
        lv_theme_t * th = lv_theme_get_current();
 800c492:	f7f8 ffdb 	bl	800544c <lv_theme_get_current>
        if(th) {
 800c496:	4604      	mov	r4, r0
 800c498:	b368      	cbz	r0, 800c4f6 <lv_tabview_create+0x1a2>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BG, th->style.tabview.bg);
 800c49a:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 800c49e:	4631      	mov	r1, r6
 800c4a0:	4628      	mov	r0, r5
 800c4a2:	f00a f8f3 	bl	801668c <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_INDIC, th->style.tabview.indic);
 800c4a6:	f8d4 2164 	ldr.w	r2, [r4, #356]	; 0x164
 800c4aa:	2101      	movs	r1, #1
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	f00a f8ed 	bl	801668c <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BTN_BG, th->style.tabview.btn.bg);
 800c4b2:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
 800c4b6:	2102      	movs	r1, #2
 800c4b8:	4628      	mov	r0, r5
 800c4ba:	f00a f8e7 	bl	801668c <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BTN_REL, th->style.tabview.btn.rel);
 800c4be:	f8d4 216c 	ldr.w	r2, [r4, #364]	; 0x16c
 800c4c2:	2103      	movs	r1, #3
 800c4c4:	4628      	mov	r0, r5
 800c4c6:	f00a f8e1 	bl	801668c <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BTN_PR, th->style.tabview.btn.pr);
 800c4ca:	f8d4 2170 	ldr.w	r2, [r4, #368]	; 0x170
 800c4ce:	2104      	movs	r1, #4
 800c4d0:	4628      	mov	r0, r5
 800c4d2:	f00a f8db 	bl	801668c <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BTN_TGL_REL, th->style.tabview.btn.tgl_rel);
 800c4d6:	f8d4 2174 	ldr.w	r2, [r4, #372]	; 0x174
 800c4da:	2105      	movs	r1, #5
 800c4dc:	4628      	mov	r0, r5
 800c4de:	f00a f8d5 	bl	801668c <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BTN_TGL_PR, th->style.tabview.btn.tgl_pr);
 800c4e2:	f8d4 2178 	ldr.w	r2, [r4, #376]	; 0x178
 800c4e6:	2106      	movs	r1, #6
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_INDIC, &lv_style_plain_color);
 800c4e8:	4628      	mov	r0, r5
 800c4ea:	f00a f8cf 	bl	801668c <lv_tabview_set_style>
}
 800c4ee:	4628      	mov	r0, r5
 800c4f0:	b003      	add	sp, #12
 800c4f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BG, &lv_style_plain);
 800c4f6:	4a3d      	ldr	r2, [pc, #244]	; (800c5ec <lv_tabview_create+0x298>)
 800c4f8:	4631      	mov	r1, r6
 800c4fa:	4628      	mov	r0, r5
 800c4fc:	f00a f8c6 	bl	801668c <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_BTN_BG, &lv_style_transp);
 800c500:	4a3b      	ldr	r2, [pc, #236]	; (800c5f0 <lv_tabview_create+0x29c>)
 800c502:	2102      	movs	r1, #2
 800c504:	4628      	mov	r0, r5
 800c506:	f00a f8c1 	bl	801668c <lv_tabview_set_style>
            lv_tabview_set_style(new_tabview, LV_TABVIEW_STYLE_INDIC, &lv_style_plain_color);
 800c50a:	4a3a      	ldr	r2, [pc, #232]	; (800c5f4 <lv_tabview_create+0x2a0>)
 800c50c:	2101      	movs	r1, #1
 800c50e:	e7eb      	b.n	800c4e8 <lv_tabview_create+0x194>
        lv_tabview_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 800c510:	4630      	mov	r0, r6
 800c512:	f003 fad5 	bl	800fac0 <lv_obj_get_ext_attr>
 800c516:	4680      	mov	r8, r0
        ext->btns                   = lv_btnm_create(new_tabview, copy_ext->btns);
 800c518:	6801      	ldr	r1, [r0, #0]
 800c51a:	4628      	mov	r0, r5
        ext->point_last.x           = 0;
 800c51c:	6127      	str	r7, [r4, #16]
        ext->btns                   = lv_btnm_create(new_tabview, copy_ext->btns);
 800c51e:	f7fb fc29 	bl	8007d74 <lv_btnm_create>
        ext->indic                  = lv_obj_create(ext->btns, copy_ext->indic);
 800c522:	f8d8 1004 	ldr.w	r1, [r8, #4]
        ext->btns                   = lv_btnm_create(new_tabview, copy_ext->btns);
 800c526:	6020      	str	r0, [r4, #0]
        ext->indic                  = lv_obj_create(ext->btns, copy_ext->indic);
 800c528:	f7f6 fa78 	bl	8002a1c <lv_obj_create>
        ext->content                = lv_cont_create(new_tabview, copy_ext->content);
 800c52c:	f8d8 1008 	ldr.w	r1, [r8, #8]
        ext->indic                  = lv_obj_create(ext->btns, copy_ext->indic);
 800c530:	6060      	str	r0, [r4, #4]
        ext->content                = lv_cont_create(new_tabview, copy_ext->content);
 800c532:	4628      	mov	r0, r5
 800c534:	f7fb ffd6 	bl	80084e4 <lv_cont_create>
        ext->anim_time = copy_ext->anim_time;
 800c538:	f8b8 3018 	ldrh.w	r3, [r8, #24]
        ext->content                = lv_cont_create(new_tabview, copy_ext->content);
 800c53c:	60a0      	str	r0, [r4, #8]
        ext->tab_name_ptr = lv_mem_alloc(sizeof(char *));
 800c53e:	2004      	movs	r0, #4
        ext->anim_time = copy_ext->anim_time;
 800c540:	8323      	strh	r3, [r4, #24]
        ext->tab_name_ptr = lv_mem_alloc(sizeof(char *));
 800c542:	f7f7 f895 	bl	8003670 <lv_mem_alloc>
 800c546:	4601      	mov	r1, r0
 800c548:	60e0      	str	r0, [r4, #12]
        lv_mem_assert(ext->tab_name_ptr);
 800c54a:	b930      	cbnz	r0, 800c55a <lv_tabview_create+0x206>
 800c54c:	4b1f      	ldr	r3, [pc, #124]	; (800c5cc <lv_tabview_create+0x278>)
 800c54e:	22a4      	movs	r2, #164	; 0xa4
 800c550:	491f      	ldr	r1, [pc, #124]	; (800c5d0 <lv_tabview_create+0x27c>)
 800c552:	2003      	movs	r0, #3
 800c554:	f7f7 f85e 	bl	8003614 <lv_log_add>
 800c558:	e7fe      	b.n	800c558 <lv_tabview_create+0x204>
        ext->tab_name_ptr[0] = "";
 800c55a:	4b20      	ldr	r3, [pc, #128]	; (800c5dc <lv_tabview_create+0x288>)
 800c55c:	6003      	str	r3, [r0, #0]
        lv_btnm_set_map(ext->btns, ext->tab_name_ptr);
 800c55e:	6820      	ldr	r0, [r4, #0]
 800c560:	f008 fa76 	bl	8014a50 <lv_btnm_set_map>
        for(i = 0; i < copy_ext->tab_cnt; i++) {
 800c564:	fa1f f987 	uxth.w	r9, r7
 800c568:	f8b8 3016 	ldrh.w	r3, [r8, #22]
 800c56c:	454b      	cmp	r3, r9
 800c56e:	d803      	bhi.n	800c578 <lv_tabview_create+0x224>
        lv_obj_refresh_style(new_tabview);
 800c570:	4628      	mov	r0, r5
 800c572:	f003 f924 	bl	800f7be <lv_obj_refresh_style>
    return new_tabview;
 800c576:	e7ba      	b.n	800c4ee <lv_tabview_create+0x19a>
            new_tab  = lv_tabview_add_tab(new_tabview, copy_ext->tab_name_ptr[i]);
 800c578:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c57c:	b2ba      	uxth	r2, r7
 800c57e:	4628      	mov	r0, r5
 800c580:	3701      	adds	r7, #1
 800c582:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c586:	f7ff fddb 	bl	800c140 <lv_tabview_add_tab>
            copy_tab = lv_tabview_get_tab(copy, i);
 800c58a:	4649      	mov	r1, r9
            new_tab  = lv_tabview_add_tab(new_tabview, copy_ext->tab_name_ptr[i]);
 800c58c:	4604      	mov	r4, r0
            copy_tab = lv_tabview_get_tab(copy, i);
 800c58e:	4630      	mov	r0, r6
 800c590:	f009 ffa8 	bl	80164e4 <lv_tabview_get_tab>
            lv_page_set_style(new_tab, LV_PAGE_STYLE_BG, lv_page_get_style(copy_tab, LV_PAGE_STYLE_BG));
 800c594:	2100      	movs	r1, #0
            copy_tab = lv_tabview_get_tab(copy, i);
 800c596:	4681      	mov	r9, r0
            lv_page_set_style(new_tab, LV_PAGE_STYLE_BG, lv_page_get_style(copy_tab, LV_PAGE_STYLE_BG));
 800c598:	f009 f92b 	bl	80157f2 <lv_page_get_style>
 800c59c:	2100      	movs	r1, #0
 800c59e:	4602      	mov	r2, r0
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	f009 f8e4 	bl	801576e <lv_page_set_style>
            lv_page_set_style(new_tab, LV_PAGE_STYLE_SCRL, lv_page_get_style(copy_tab, LV_PAGE_STYLE_SCRL));
 800c5a6:	2101      	movs	r1, #1
 800c5a8:	4648      	mov	r0, r9
 800c5aa:	f009 f922 	bl	80157f2 <lv_page_get_style>
 800c5ae:	2101      	movs	r1, #1
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	f009 f8db 	bl	801576e <lv_page_set_style>
            lv_page_set_style(new_tab, LV_PAGE_STYLE_SB, lv_page_get_style(copy_tab, LV_PAGE_STYLE_SB));
 800c5b8:	2102      	movs	r1, #2
 800c5ba:	4648      	mov	r0, r9
 800c5bc:	f009 f919 	bl	80157f2 <lv_page_get_style>
 800c5c0:	2102      	movs	r1, #2
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	f009 f8d2 	bl	801576e <lv_page_set_style>
 800c5ca:	e7cb      	b.n	800c564 <lv_tabview_create+0x210>
 800c5cc:	080176f4 	.word	0x080176f4
 800c5d0:	0801c848 	.word	0x0801c848
 800c5d4:	200289a4 	.word	0x200289a4
 800c5d8:	0800c009 	.word	0x0800c009
 800c5dc:	0801ca18 	.word	0x0801ca18
 800c5e0:	2002e15c 	.word	0x2002e15c
 800c5e4:	08016525 	.word	0x08016525
 800c5e8:	200206c8 	.word	0x200206c8
 800c5ec:	20020524 	.word	0x20020524
 800c5f0:	20020650 	.word	0x20020650
 800c5f4:	20020560 	.word	0x20020560

0800c5f8 <text_area_event_handler>:
    style_kb_pr.body.border.color = LV_COLOR_SILVER;

}

static void text_area_event_handler(lv_obj_t * text_area, lv_event_t event)
{
 800c5f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    (void) text_area;    /*Unused*/

    /*Text area is on the scrollable part of the page but we need the page itself*/
    lv_obj_t * parent = lv_obj_get_parent(lv_obj_get_parent(ta));
 800c5fc:	4e30      	ldr	r6, [pc, #192]	; (800c6c0 <text_area_event_handler+0xc8>)
{
 800c5fe:	460c      	mov	r4, r1
 800c600:	b08d      	sub	sp, #52	; 0x34
    lv_obj_t * parent = lv_obj_get_parent(lv_obj_get_parent(ta));
 800c602:	6830      	ldr	r0, [r6, #0]
 800c604:	f003 f97a 	bl	800f8fc <lv_obj_get_parent>
 800c608:	f003 f978 	bl	800f8fc <lv_obj_get_parent>

    if(event == LV_EVENT_CLICKED) {
 800c60c:	2c06      	cmp	r4, #6
    lv_obj_t * parent = lv_obj_get_parent(lv_obj_get_parent(ta));
 800c60e:	4680      	mov	r8, r0
    if(event == LV_EVENT_CLICKED) {
 800c610:	d152      	bne.n	800c6b8 <text_area_event_handler+0xc0>
        if(kb == NULL) {
 800c612:	4c2c      	ldr	r4, [pc, #176]	; (800c6c4 <text_area_event_handler+0xcc>)
 800c614:	6825      	ldr	r5, [r4, #0]
 800c616:	2d00      	cmp	r5, #0
 800c618:	d14e      	bne.n	800c6b8 <text_area_event_handler+0xc0>
            kb = lv_kb_create(parent, NULL);
 800c61a:	4629      	mov	r1, r5
 800c61c:	f7f8 ff68 	bl	80054f0 <lv_kb_create>
 800c620:	4607      	mov	r7, r0
 800c622:	6020      	str	r0, [r4, #0]
            lv_obj_set_size(kb, lv_obj_get_width_fit(parent), lv_obj_get_height_fit(parent) / 2);
 800c624:	4640      	mov	r0, r8
 800c626:	f003 f9c1 	bl	800f9ac <lv_obj_get_width_fit>
 800c62a:	4681      	mov	r9, r0
 800c62c:	4640      	mov	r0, r8
 800c62e:	f003 f9cb 	bl	800f9c8 <lv_obj_get_height_fit>
 800c632:	4649      	mov	r1, r9
 800c634:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800c638:	f340 024f 	sbfx	r2, r0, #1, #16
 800c63c:	4638      	mov	r0, r7
 800c63e:	f003 f865 	bl	800f70c <lv_obj_set_size>
            lv_obj_align(kb, ta, LV_ALIGN_OUT_BOTTOM_MID, 0, 0);
 800c642:	462b      	mov	r3, r5
 800c644:	220d      	movs	r2, #13
 800c646:	9500      	str	r5, [sp, #0]
 800c648:	6831      	ldr	r1, [r6, #0]
 800c64a:	6820      	ldr	r0, [r4, #0]
 800c64c:	f002 fe86 	bl	800f35c <lv_obj_align>
            lv_kb_set_ta(kb, ta);
 800c650:	6831      	ldr	r1, [r6, #0]
 800c652:	6820      	ldr	r0, [r4, #0]
 800c654:	f007 fd3f 	bl	80140d6 <lv_kb_set_ta>
            lv_kb_set_style(kb, LV_KB_STYLE_BG, &style_kb);
 800c658:	4a1b      	ldr	r2, [pc, #108]	; (800c6c8 <text_area_event_handler+0xd0>)
 800c65a:	4629      	mov	r1, r5
 800c65c:	6820      	ldr	r0, [r4, #0]
 800c65e:	f007 fd5e 	bl	801411e <lv_kb_set_style>
            lv_kb_set_style(kb, LV_KB_STYLE_BTN_REL, &style_kb_rel);
 800c662:	4a1a      	ldr	r2, [pc, #104]	; (800c6cc <text_area_event_handler+0xd4>)
 800c664:	2101      	movs	r1, #1
 800c666:	6820      	ldr	r0, [r4, #0]
 800c668:	f007 fd59 	bl	801411e <lv_kb_set_style>
            lv_kb_set_style(kb, LV_KB_STYLE_BTN_PR, &style_kb_pr);
 800c66c:	4a18      	ldr	r2, [pc, #96]	; (800c6d0 <text_area_event_handler+0xd8>)
 800c66e:	2102      	movs	r1, #2
 800c670:	6820      	ldr	r0, [r4, #0]
 800c672:	f007 fd54 	bl	801411e <lv_kb_set_style>
            lv_obj_set_event_cb(kb, keyboard_event_cb);
 800c676:	4917      	ldr	r1, [pc, #92]	; (800c6d4 <text_area_event_handler+0xdc>)
 800c678:	6820      	ldr	r0, [r4, #0]
 800c67a:	f002 fd4f 	bl	800f11c <lv_obj_set_event_cb>

#if LV_USE_ANIMATION
            lv_anim_t a;
            a.var = kb;
 800c67e:	6823      	ldr	r3, [r4, #0]
 800c680:	9302      	str	r3, [sp, #8]
            a.start = LV_VER_RES;
 800c682:	f7f6 f819 	bl	80026b8 <lv_disp_get_default>
 800c686:	f7f6 f82f 	bl	80026e8 <lv_disp_get_ver_res>
 800c68a:	9006      	str	r0, [sp, #24]
            a.end = lv_obj_get_y(kb);
 800c68c:	6820      	ldr	r0, [r4, #0]
 800c68e:	f003 f976 	bl	800f97e <lv_obj_get_y>
            a.exec_cb = (lv_anim_exec_xcb_t)lv_obj_set_y;
 800c692:	4b11      	ldr	r3, [pc, #68]	; (800c6d8 <text_area_event_handler+0xe0>)
            a.end = lv_obj_get_y(kb);
 800c694:	9007      	str	r0, [sp, #28]
            a.time = 300;
            a.playback = 0;
            a.playback_pause = 0;
            a.repeat = 0;
            a.repeat_pause = 0;
            lv_anim_create(&a);
 800c696:	a802      	add	r0, sp, #8
            a.exec_cb = (lv_anim_exec_xcb_t)lv_obj_set_y;
 800c698:	9303      	str	r3, [sp, #12]
            a.path_cb = lv_anim_path_linear;
 800c69a:	4b10      	ldr	r3, [pc, #64]	; (800c6dc <text_area_event_handler+0xe4>)
            a.ready_cb = NULL;
 800c69c:	e9cd 3504 	strd	r3, r5, [sp, #16]
            a.playback = 0;
 800c6a0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800c6a4:	f023 0303 	bic.w	r3, r3, #3
 800c6a8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
            a.time = 300;
 800c6ac:	f44f 7396 	mov.w	r3, #300	; 0x12c
            a.playback_pause = 0;
 800c6b0:	e9cd 3508 	strd	r3, r5, [sp, #32]
            lv_anim_create(&a);
 800c6b4:	f7f7 facc 	bl	8003c50 <lv_anim_create>
#endif
        }
    }

}
 800c6b8:	b00d      	add	sp, #52	; 0x34
 800c6ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6be:	bf00      	nop
 800c6c0:	20028cc4 	.word	0x20028cc4
 800c6c4:	200289b4 	.word	0x200289b4
 800c6c8:	20028ae4 	.word	0x20028ae4
 800c6cc:	20028b5c 	.word	0x20028b5c
 800c6d0:	20028b20 	.word	0x20028b20
 800c6d4:	0800c6f5 	.word	0x0800c6f5
 800c6d8:	0800f34d 	.word	0x0800f34d
 800c6dc:	0801057d 	.word	0x0801057d

0800c6e0 <kb_hide_anim_end>:
    lv_obj_align(mbox, parent, LV_ALIGN_IN_TOP_MID, 0, LV_DPI / 2);
}

#if LV_USE_ANIMATION
static void kb_hide_anim_end(lv_anim_t * a)
{
 800c6e0:	b508      	push	{r3, lr}
    lv_obj_del(a->var);
 800c6e2:	6800      	ldr	r0, [r0, #0]
 800c6e4:	f003 f8a0 	bl	800f828 <lv_obj_del>
    kb = NULL;
 800c6e8:	4b01      	ldr	r3, [pc, #4]	; (800c6f0 <kb_hide_anim_end+0x10>)
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	601a      	str	r2, [r3, #0]
}
 800c6ee:	bd08      	pop	{r3, pc}
 800c6f0:	200289b4 	.word	0x200289b4

0800c6f4 <keyboard_event_cb>:
{
 800c6f4:	b530      	push	{r4, r5, lr}
 800c6f6:	460c      	mov	r4, r1
    lv_kb_def_event_cb(kb, event);
 800c6f8:	4d13      	ldr	r5, [pc, #76]	; (800c748 <keyboard_event_cb+0x54>)
{
 800c6fa:	b08b      	sub	sp, #44	; 0x2c
    if(event == LV_EVENT_APPLY || event == LV_EVENT_CANCEL) {
 800c6fc:	3c11      	subs	r4, #17
    lv_kb_def_event_cb(kb, event);
 800c6fe:	6828      	ldr	r0, [r5, #0]
 800c700:	f7f8 ff98 	bl	8005634 <lv_kb_def_event_cb>
    if(event == LV_EVENT_APPLY || event == LV_EVENT_CANCEL) {
 800c704:	2c01      	cmp	r4, #1
 800c706:	d81d      	bhi.n	800c744 <keyboard_event_cb+0x50>
        a.var = kb;
 800c708:	6828      	ldr	r0, [r5, #0]
 800c70a:	9000      	str	r0, [sp, #0]
        a.start = lv_obj_get_y(kb);
 800c70c:	f003 f937 	bl	800f97e <lv_obj_get_y>
 800c710:	9004      	str	r0, [sp, #16]
        a.end = LV_VER_RES;
 800c712:	f7f5 ffd1 	bl	80026b8 <lv_disp_get_default>
 800c716:	f7f5 ffe7 	bl	80026e8 <lv_disp_get_ver_res>
        a.exec_cb = (lv_anim_exec_xcb_t)lv_obj_set_y;
 800c71a:	4b0c      	ldr	r3, [pc, #48]	; (800c74c <keyboard_event_cb+0x58>)
        a.playback_pause = 0;
 800c71c:	f44f 7296 	mov.w	r2, #300	; 0x12c
        a.end = LV_VER_RES;
 800c720:	9005      	str	r0, [sp, #20]
        a.exec_cb = (lv_anim_exec_xcb_t)lv_obj_set_y;
 800c722:	9301      	str	r3, [sp, #4]
        lv_anim_create(&a);
 800c724:	4668      	mov	r0, sp
        a.path_cb = lv_anim_path_linear;
 800c726:	4b0a      	ldr	r3, [pc, #40]	; (800c750 <keyboard_event_cb+0x5c>)
 800c728:	9302      	str	r3, [sp, #8]
        a.ready_cb = kb_hide_anim_end;
 800c72a:	4b0a      	ldr	r3, [pc, #40]	; (800c754 <keyboard_event_cb+0x60>)
 800c72c:	9303      	str	r3, [sp, #12]
        a.playback = 0;
 800c72e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800c732:	f023 0303 	bic.w	r3, r3, #3
 800c736:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        a.playback_pause = 0;
 800c73a:	2300      	movs	r3, #0
 800c73c:	e9cd 2306 	strd	r2, r3, [sp, #24]
        lv_anim_create(&a);
 800c740:	f7f7 fa86 	bl	8003c50 <lv_anim_create>
}
 800c744:	b00b      	add	sp, #44	; 0x2c
 800c746:	bd30      	pop	{r4, r5, pc}
 800c748:	200289b4 	.word	0x200289b4
 800c74c:	0800f34d 	.word	0x0800f34d
 800c750:	0801057d 	.word	0x0801057d
 800c754:	0800c6e1 	.word	0x0800c6e1

0800c758 <list_btn_event_handler>:
 * @return LV_RES_OK because the button is not deleted in the function
 */
static void list_btn_event_handler(lv_obj_t * btn, lv_event_t event)
{

    if(event == LV_EVENT_SHORT_CLICKED) {
 800c758:	2903      	cmp	r1, #3
{
 800c75a:	b538      	push	{r3, r4, r5, lr}
 800c75c:	4605      	mov	r5, r0
    if(event == LV_EVENT_SHORT_CLICKED) {
 800c75e:	d10e      	bne.n	800c77e <list_btn_event_handler+0x26>
        lv_ta_add_char(ta, '\n');
 800c760:	4c07      	ldr	r4, [pc, #28]	; (800c780 <list_btn_event_handler+0x28>)
 800c762:	210a      	movs	r1, #10
 800c764:	6820      	ldr	r0, [r4, #0]
 800c766:	f7f9 fda5 	bl	80062b4 <lv_ta_add_char>
        lv_ta_add_text(ta, lv_list_get_btn_text(btn));
 800c76a:	6824      	ldr	r4, [r4, #0]
 800c76c:	4628      	mov	r0, r5
 800c76e:	f7fc f849 	bl	8008804 <lv_list_get_btn_text>
 800c772:	4601      	mov	r1, r0
 800c774:	4620      	mov	r0, r4
    }
}
 800c776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_ta_add_text(ta, lv_list_get_btn_text(btn));
 800c77a:	f7f9 bce1 	b.w	8006140 <lv_ta_add_text>
}
 800c77e:	bd38      	pop	{r3, r4, r5, pc}
 800c780:	20028cc4 	.word	0x20028cc4

0800c784 <slider_event_handler.part.3>:
static void slider_event_handler(lv_obj_t * slider, lv_event_t event)
 800c784:	b508      	push	{r3, lr}
        int16_t v = lv_slider_get_value(slider);
 800c786:	f009 fb94 	bl	8015eb2 <lv_slider_get_value>
        v = 1000 * 100 / v; /*Convert to range modify values linearly*/
 800c78a:	4a05      	ldr	r2, [pc, #20]	; (800c7a0 <slider_event_handler.part.3+0x1c>)
        lv_chart_set_range(chart, 0, v);
 800c78c:	4b05      	ldr	r3, [pc, #20]	; (800c7a4 <slider_event_handler.part.3+0x20>)
 800c78e:	2100      	movs	r1, #0
        v = 1000 * 100 / v; /*Convert to range modify values linearly*/
 800c790:	fb92 f2f0 	sdiv	r2, r2, r0
        lv_chart_set_range(chart, 0, v);
 800c794:	6818      	ldr	r0, [r3, #0]
 800c796:	b212      	sxth	r2, r2
}
 800c798:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        lv_chart_set_range(chart, 0, v);
 800c79c:	f009 b8f6 	b.w	801598c <lv_chart_set_range>
 800c7a0:	000186a0 	.word	0x000186a0
 800c7a4:	200289b0 	.word	0x200289b0

0800c7a8 <demo_create>:
{
 800c7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_coord_t hres = lv_disp_get_hor_res(NULL);
 800c7ac:	2000      	movs	r0, #0
{
 800c7ae:	b087      	sub	sp, #28
    lv_style_copy(&style_tv_btn_bg, &lv_style_plain);
 800c7b0:	f8df 841c 	ldr.w	r8, [pc, #1052]	; 800cbd0 <demo_create+0x428>
    lv_coord_t hres = lv_disp_get_hor_res(NULL);
 800c7b4:	f7f5 ff86 	bl	80026c4 <lv_disp_get_hor_res>
    lv_style_copy(&style_tv_btn_bg, &lv_style_plain);
 800c7b8:	f8df a418 	ldr.w	sl, [pc, #1048]	; 800cbd4 <demo_create+0x42c>
    lv_coord_t hres = lv_disp_get_hor_res(NULL);
 800c7bc:	4607      	mov	r7, r0
    lv_coord_t vres = lv_disp_get_ver_res(NULL);
 800c7be:	2000      	movs	r0, #0
    lv_style_copy(&style_tv_btn_rel, &lv_style_btn_rel);
 800c7c0:	f8df b414 	ldr.w	fp, [pc, #1044]	; 800cbd8 <demo_create+0x430>
    lv_coord_t vres = lv_disp_get_ver_res(NULL);
 800c7c4:	f7f5 ff90 	bl	80026e8 <lv_disp_get_ver_res>
    lv_style_copy(&style_tv_btn_bg, &lv_style_plain);
 800c7c8:	4651      	mov	r1, sl
    lv_coord_t vres = lv_disp_get_ver_res(NULL);
 800c7ca:	4681      	mov	r9, r0
    lv_style_copy(&style_tv_btn_bg, &lv_style_plain);
 800c7cc:	4640      	mov	r0, r8
 800c7ce:	f003 fa7c 	bl	800fcca <lv_style_copy>
    style_tv_btn_bg.body.main_color = lv_color_hex(0x487fb7);
 800c7d2:	f644 33f6 	movw	r3, #19446	; 0x4bf6
    style_tv_btn_bg.body.padding.top = 0;
 800c7d6:	2400      	movs	r4, #0
    lv_style_copy(&style_tv_btn_pr, &lv_style_btn_pr);
 800c7d8:	4edf      	ldr	r6, [pc, #892]	; (800cb58 <demo_create+0x3b0>)
    style_tv_btn_bg.body.main_color = lv_color_hex(0x487fb7);
 800c7da:	f8a8 3002 	strh.w	r3, [r8, #2]
    lv_style_copy(&style_tv_btn_rel, &lv_style_btn_rel);
 800c7de:	4658      	mov	r0, fp
    style_tv_btn_bg.body.grad_color = lv_color_hex(0x487fb7);
 800c7e0:	f8a8 3004 	strh.w	r3, [r8, #4]
    lv_style_copy(&style_tv_btn_rel, &lv_style_btn_rel);
 800c7e4:	49dd      	ldr	r1, [pc, #884]	; (800cb5c <demo_create+0x3b4>)
    style_tv_btn_bg.body.padding.top = 0;
 800c7e6:	f8a8 4016 	strh.w	r4, [r8, #22]
    style_tv_btn_bg.body.padding.bottom = 0;
 800c7ea:	f8a8 4018 	strh.w	r4, [r8, #24]
    lv_style_copy(&style_tv_btn_rel, &lv_style_btn_rel);
 800c7ee:	f003 fa6c 	bl	800fcca <lv_style_copy>
    lv_style_copy(&style_tv_btn_pr, &lv_style_btn_pr);
 800c7f2:	4630      	mov	r0, r6
 800c7f4:	49da      	ldr	r1, [pc, #872]	; (800cb60 <demo_create+0x3b8>)
    style_tv_btn_rel.body.opa = LV_OPA_TRANSP;
 800c7f6:	f88b 4008 	strb.w	r4, [fp, #8]
    style_tv_btn_rel.body.border.width = 0;
 800c7fa:	f8ab 400c 	strh.w	r4, [fp, #12]
    lv_style_copy(&style_tv_btn_pr, &lv_style_btn_pr);
 800c7fe:	f003 fa64 	bl	800fcca <lv_style_copy>
    style_tv_btn_pr.body.opa = LV_OPA_50;
 800c802:	f04f 037f 	mov.w	r3, #127	; 0x7f
    lv_obj_t * tv = lv_tabview_create(lv_disp_get_scr_act(NULL), NULL);
 800c806:	4620      	mov	r0, r4
    style_tv_btn_pr.body.radius = 0;
 800c808:	80f4      	strh	r4, [r6, #6]
    style_tv_btn_pr.body.opa = LV_OPA_50;
 800c80a:	7233      	strb	r3, [r6, #8]
    style_tv_btn_pr.body.main_color = LV_COLOR_WHITE;
 800c80c:	4bd5      	ldr	r3, [pc, #852]	; (800cb64 <demo_create+0x3bc>)
    style_tv_btn_pr.body.border.width = 0;
 800c80e:	81b4      	strh	r4, [r6, #12]
    style_tv_btn_pr.body.main_color = LV_COLOR_WHITE;
 800c810:	8819      	ldrh	r1, [r3, #0]
 800c812:	f8ad 100c 	strh.w	r1, [sp, #12]
 800c816:	b289      	uxth	r1, r1
 800c818:	8071      	strh	r1, [r6, #2]
    style_tv_btn_pr.body.grad_color = LV_COLOR_WHITE;
 800c81a:	80b1      	strh	r1, [r6, #4]
    style_tv_btn_pr.text.color = LV_COLOR_GRAY;
 800c81c:	8859      	ldrh	r1, [r3, #2]
 800c81e:	f8ad 100e 	strh.w	r1, [sp, #14]
 800c822:	b289      	uxth	r1, r1
 800c824:	8431      	strh	r1, [r6, #32]
    lv_obj_t * tv = lv_tabview_create(lv_disp_get_scr_act(NULL), NULL);
 800c826:	f7f5 ff93 	bl	8002750 <lv_disp_get_scr_act>
 800c82a:	4621      	mov	r1, r4
 800c82c:	f7ff fd92 	bl	800c354 <lv_tabview_create>
 800c830:	4605      	mov	r5, r0
    lv_obj_set_size(tv, hres, vres);
 800c832:	464a      	mov	r2, r9
 800c834:	4639      	mov	r1, r7
 800c836:	f002 ff69 	bl	800f70c <lv_obj_set_size>
    lv_obj_t * tab1 = lv_tabview_add_tab(tv, "Write");
 800c83a:	49cb      	ldr	r1, [pc, #812]	; (800cb68 <demo_create+0x3c0>)
 800c83c:	4628      	mov	r0, r5
 800c83e:	f7ff fc7f 	bl	800c140 <lv_tabview_add_tab>
    lv_obj_t * tab2 = lv_tabview_add_tab(tv, "List");
 800c842:	49ca      	ldr	r1, [pc, #808]	; (800cb6c <demo_create+0x3c4>)
    lv_obj_t * tab1 = lv_tabview_add_tab(tv, "Write");
 800c844:	4681      	mov	r9, r0
    lv_obj_t * tab2 = lv_tabview_add_tab(tv, "List");
 800c846:	4628      	mov	r0, r5
 800c848:	f7ff fc7a 	bl	800c140 <lv_tabview_add_tab>
    lv_obj_t * tab3 = lv_tabview_add_tab(tv, "Chart");
 800c84c:	49c8      	ldr	r1, [pc, #800]	; (800cb70 <demo_create+0x3c8>)
    lv_obj_t * tab2 = lv_tabview_add_tab(tv, "List");
 800c84e:	4607      	mov	r7, r0
    lv_obj_t * tab3 = lv_tabview_add_tab(tv, "Chart");
 800c850:	4628      	mov	r0, r5
 800c852:	f7ff fc75 	bl	800c140 <lv_tabview_add_tab>
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BG, &style_tv_btn_bg);
 800c856:	4642      	mov	r2, r8
    lv_obj_t * tab3 = lv_tabview_add_tab(tv, "Chart");
 800c858:	9002      	str	r0, [sp, #8]
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BG, &style_tv_btn_bg);
 800c85a:	4621      	mov	r1, r4
 800c85c:	4628      	mov	r0, r5
 800c85e:	f009 ff15 	bl	801668c <lv_tabview_set_style>
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BTN_BG, &style_tv_btn_bg);
 800c862:	4642      	mov	r2, r8
 800c864:	4628      	mov	r0, r5
 800c866:	2102      	movs	r1, #2
 800c868:	f009 ff10 	bl	801668c <lv_tabview_set_style>
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_INDIC, &lv_style_plain);
 800c86c:	4652      	mov	r2, sl
 800c86e:	4628      	mov	r0, r5
 800c870:	2101      	movs	r1, #1
 800c872:	f009 ff0b 	bl	801668c <lv_tabview_set_style>
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BTN_REL, &style_tv_btn_rel);
 800c876:	465a      	mov	r2, fp
 800c878:	4628      	mov	r0, r5
 800c87a:	2103      	movs	r1, #3
 800c87c:	f009 ff06 	bl	801668c <lv_tabview_set_style>
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BTN_PR, &style_tv_btn_pr);
 800c880:	4632      	mov	r2, r6
 800c882:	4628      	mov	r0, r5
 800c884:	2104      	movs	r1, #4
 800c886:	f009 ff01 	bl	801668c <lv_tabview_set_style>
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BTN_TGL_REL, &style_tv_btn_rel);
 800c88a:	465a      	mov	r2, fp
 800c88c:	4628      	mov	r0, r5
 800c88e:	2105      	movs	r1, #5
 800c890:	f009 fefc 	bl	801668c <lv_tabview_set_style>
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BTN_TGL_PR, &style_tv_btn_pr);
 800c894:	4628      	mov	r0, r5
    lv_page_set_style(parent, LV_PAGE_STYLE_BG, &lv_style_transp_fit);
 800c896:	4db7      	ldr	r5, [pc, #732]	; (800cb74 <demo_create+0x3cc>)
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BTN_TGL_PR, &style_tv_btn_pr);
 800c898:	4632      	mov	r2, r6
 800c89a:	2106      	movs	r1, #6
    lv_style_copy(&style_ta, &lv_style_pretty);
 800c89c:	f8df 833c 	ldr.w	r8, [pc, #828]	; 800cbdc <demo_create+0x434>
    lv_tabview_set_style(tv, LV_TABVIEW_STYLE_BTN_TGL_PR, &style_tv_btn_pr);
 800c8a0:	f009 fef4 	bl	801668c <lv_tabview_set_style>
    lv_page_set_style(parent, LV_PAGE_STYLE_BG, &lv_style_transp_fit);
 800c8a4:	462a      	mov	r2, r5
 800c8a6:	4621      	mov	r1, r4
 800c8a8:	4648      	mov	r0, r9
 800c8aa:	f008 ff60 	bl	801576e <lv_page_set_style>
    lv_page_set_style(parent, LV_PAGE_STYLE_SCRL, &lv_style_transp_fit);
 800c8ae:	462a      	mov	r2, r5
 800c8b0:	4648      	mov	r0, r9
 800c8b2:	2101      	movs	r1, #1
 800c8b4:	f008 ff5b 	bl	801576e <lv_page_set_style>
    lv_page_set_sb_mode(parent, LV_SB_MODE_OFF);
 800c8b8:	4621      	mov	r1, r4
 800c8ba:	4648      	mov	r0, r9
    ta = lv_ta_create(parent, NULL);
 800c8bc:	4eae      	ldr	r6, [pc, #696]	; (800cb78 <demo_create+0x3d0>)
    lv_page_set_sb_mode(parent, LV_SB_MODE_OFF);
 800c8be:	f008 ff1a 	bl	80156f6 <lv_page_set_sb_mode>
    lv_style_copy(&style_ta, &lv_style_pretty);
 800c8c2:	4640      	mov	r0, r8
 800c8c4:	49ad      	ldr	r1, [pc, #692]	; (800cb7c <demo_create+0x3d4>)
 800c8c6:	f003 fa00 	bl	800fcca <lv_style_copy>
    style_ta.body.opa = LV_OPA_30;
 800c8ca:	234c      	movs	r3, #76	; 0x4c
    ta = lv_ta_create(parent, NULL);
 800c8cc:	4621      	mov	r1, r4
 800c8ce:	4648      	mov	r0, r9
    style_ta.body.opa = LV_OPA_30;
 800c8d0:	f888 3008 	strb.w	r3, [r8, #8]
    style_ta.text.color = lv_color_hex3(0x222);
 800c8d4:	f242 1304 	movw	r3, #8452	; 0x2104
    style_ta.body.radius = 0;
 800c8d8:	f8a8 4006 	strh.w	r4, [r8, #6]
    style_ta.text.color = lv_color_hex3(0x222);
 800c8dc:	f8a8 3020 	strh.w	r3, [r8, #32]
    ta = lv_ta_create(parent, NULL);
 800c8e0:	f7f9 fb0c 	bl	8005efc <lv_ta_create>
 800c8e4:	6030      	str	r0, [r6, #0]
 800c8e6:	9005      	str	r0, [sp, #20]
 * @param page pointer to a page object
 * @return the width of the scrollable
 */
static inline lv_coord_t lv_page_get_scrl_width(const lv_obj_t * page)
{
    return lv_obj_get_width(lv_page_get_scrl(page));
 800c8e8:	4648      	mov	r0, r9
 800c8ea:	f008 ff70 	bl	80157ce <lv_page_get_scrl>
    lv_style_copy(&style_kb_pr, &lv_style_plain);
 800c8ee:	f8df b2f0 	ldr.w	fp, [pc, #752]	; 800cbe0 <demo_create+0x438>
 800c8f2:	f003 f84a 	bl	800f98a <lv_obj_get_width>
 800c8f6:	9004      	str	r0, [sp, #16]
    lv_obj_set_size(ta, lv_page_get_scrl_width(parent), lv_obj_get_height(parent) / 2);
 800c8f8:	4648      	mov	r0, r9
    lv_style_copy(&style_kb, &lv_style_plain);
 800c8fa:	f8df 92e8 	ldr.w	r9, [pc, #744]	; 800cbe4 <demo_create+0x43c>
    lv_obj_set_size(ta, lv_page_get_scrl_width(parent), lv_obj_get_height(parent) / 2);
 800c8fe:	f003 f84a 	bl	800f996 <lv_obj_get_height>
 800c902:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800c906:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
 800c90a:	f340 024f 	sbfx	r2, r0, #1, #16
 800c90e:	4618      	mov	r0, r3
 800c910:	f002 fefc 	bl	800f70c <lv_obj_set_size>
    lv_ta_set_style(ta, LV_TA_STYLE_BG, &style_ta);
 800c914:	4642      	mov	r2, r8
 800c916:	4621      	mov	r1, r4
 800c918:	6830      	ldr	r0, [r6, #0]
 800c91a:	f007 fdb0 	bl	801447e <lv_ta_set_style>
    lv_ta_set_text(ta, "");
 800c91e:	6830      	ldr	r0, [r6, #0]
 800c920:	4997      	ldr	r1, [pc, #604]	; (800cb80 <demo_create+0x3d8>)
    style_kb.body.main_color = lv_color_hex3(0x333);
 800c922:	f243 1886 	movw	r8, #12678	; 0x3186
    lv_ta_set_text(ta, "");
 800c926:	f7f9 fe0d 	bl	8006544 <lv_ta_set_text>
    lv_obj_set_event_cb(ta, text_area_event_handler);
 800c92a:	6830      	ldr	r0, [r6, #0]
 800c92c:	4995      	ldr	r1, [pc, #596]	; (800cb84 <demo_create+0x3dc>)
 800c92e:	f002 fbf5 	bl	800f11c <lv_obj_set_event_cb>
    lv_style_copy(&style_kb, &lv_style_plain);
 800c932:	4651      	mov	r1, sl
 800c934:	4648      	mov	r0, r9
 800c936:	f003 f9c8 	bl	800fcca <lv_style_copy>
    lv_ta_set_text_sel(ta, true);
 800c93a:	6830      	ldr	r0, [r6, #0]
 800c93c:	2101      	movs	r1, #1
    style_kb_rel.body.border.width = 1;
 800c93e:	2601      	movs	r6, #1
    lv_ta_set_text_sel(ta, true);
 800c940:	f007 fc7a 	bl	8014238 <lv_ta_set_text_sel>
    lv_style_copy(&style_kb_rel, &lv_style_plain);
 800c944:	4b90      	ldr	r3, [pc, #576]	; (800cb88 <demo_create+0x3e0>)
    style_kb.body.opa = LV_OPA_70;
 800c946:	f06f 014d 	mvn.w	r1, #77	; 0x4d
    style_kb.body.main_color = lv_color_hex3(0x333);
 800c94a:	f8a9 8002 	strh.w	r8, [r9, #2]
    style_kb.body.grad_color = lv_color_hex3(0x333);
 800c94e:	f8a9 8004 	strh.w	r8, [r9, #4]
    lv_style_copy(&style_kb_rel, &lv_style_plain);
 800c952:	4618      	mov	r0, r3
    style_kb.body.opa = LV_OPA_70;
 800c954:	f889 1008 	strb.w	r1, [r9, #8]
    lv_style_copy(&style_kb_rel, &lv_style_plain);
 800c958:	4651      	mov	r1, sl
    style_kb.body.padding.top = 0;
 800c95a:	f8a9 4016 	strh.w	r4, [r9, #22]
    style_kb.body.padding.right = 0;
 800c95e:	e9c9 4406 	strd	r4, r4, [r9, #24]
    lv_style_copy(&style_kb_rel, &lv_style_plain);
 800c962:	f003 f9b2 	bl	800fcca <lv_style_copy>
    style_kb_rel.body.border.color = LV_COLOR_SILVER;
 800c966:	4a7f      	ldr	r2, [pc, #508]	; (800cb64 <demo_create+0x3bc>)
    style_kb_rel.body.border.width = 1;
 800c968:	4b87      	ldr	r3, [pc, #540]	; (800cb88 <demo_create+0x3e0>)
    lv_style_copy(&style_kb_pr, &lv_style_plain);
 800c96a:	4651      	mov	r1, sl
    style_kb_rel.text.color = LV_COLOR_WHITE;
 800c96c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    style_kb_rel.body.border.color = LV_COLOR_SILVER;
 800c970:	f8b2 9004 	ldrh.w	r9, [r2, #4]
    style_kb_rel.body.border.opa = LV_OPA_50;
 800c974:	f04f 027f 	mov.w	r2, #127	; 0x7f
    style_kb_rel.body.main_color = lv_color_hex3(0x333);    /*Recommended if LV_VDB_SIZE == 0 and bpp > 1 fonts are used*/
 800c978:	f8a3 8002 	strh.w	r8, [r3, #2]
    style_kb_rel.body.grad_color = lv_color_hex3(0x333);
 800c97c:	f8c3 8004 	str.w	r8, [r3, #4]
    style_kb_rel.text.color = LV_COLOR_WHITE;
 800c980:	8418      	strh	r0, [r3, #32]
    lv_style_copy(&style_kb_pr, &lv_style_plain);
 800c982:	4658      	mov	r0, fp
    style_kb_rel.body.border.width = 1;
 800c984:	819e      	strh	r6, [r3, #12]
    style_kb_rel.body.border.color = LV_COLOR_SILVER;
 800c986:	f8a3 900a 	strh.w	r9, [r3, #10]
    style_kb_rel.body.border.opa = LV_OPA_50;
 800c98a:	73da      	strb	r2, [r3, #15]
    style_kb_rel.body.opa = LV_OPA_TRANSP;
 800c98c:	721c      	strb	r4, [r3, #8]
    lv_style_copy(&style_kb_pr, &lv_style_plain);
 800c98e:	f003 f99c 	bl	800fcca <lv_style_copy>
    style_kb_pr.body.main_color = LV_COLOR_WHITE;
 800c992:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    style_kb_pr.body.opa = LV_OPA_50;
 800c996:	f04f 027f 	mov.w	r2, #127	; 0x7f
    style_kb_pr.body.radius = 0;
 800c99a:	f8ab 4006 	strh.w	r4, [fp, #6]
    style_kb_pr.body.main_color = LV_COLOR_WHITE;
 800c99e:	f8ab 0002 	strh.w	r0, [fp, #2]
    style_kb_pr.body.grad_color = LV_COLOR_WHITE;
 800c9a2:	f8ab 0004 	strh.w	r0, [fp, #4]
    lv_coord_t hres = lv_disp_get_hor_res(NULL);
 800c9a6:	4620      	mov	r0, r4
    style_kb_pr.body.opa = LV_OPA_50;
 800c9a8:	f88b 2008 	strb.w	r2, [fp, #8]
    style_kb_pr.body.border.width = 1;
 800c9ac:	f8ab 600c 	strh.w	r6, [fp, #12]
    style_kb_pr.body.border.color = LV_COLOR_SILVER;
 800c9b0:	f8ab 900a 	strh.w	r9, [fp, #10]
    lv_coord_t hres = lv_disp_get_hor_res(NULL);
 800c9b4:	f7f5 fe86 	bl	80026c4 <lv_disp_get_hor_res>
    lv_page_set_style(parent, LV_PAGE_STYLE_BG, &lv_style_transp_fit);
 800c9b8:	462a      	mov	r2, r5
    lv_coord_t hres = lv_disp_get_hor_res(NULL);
 800c9ba:	9004      	str	r0, [sp, #16]
    lv_page_set_style(parent, LV_PAGE_STYLE_BG, &lv_style_transp_fit);
 800c9bc:	4621      	mov	r1, r4
 800c9be:	4638      	mov	r0, r7
    lv_style_copy(&style_btn_rel, &lv_style_btn_rel);
 800c9c0:	f8df a224 	ldr.w	sl, [pc, #548]	; 800cbe8 <demo_create+0x440>
    lv_page_set_style(parent, LV_PAGE_STYLE_BG, &lv_style_transp_fit);
 800c9c4:	f008 fed3 	bl	801576e <lv_page_set_style>
    lv_page_set_style(parent, LV_PAGE_STYLE_SCRL, &lv_style_transp_fit);
 800c9c8:	462a      	mov	r2, r5
 800c9ca:	4631      	mov	r1, r6
 800c9cc:	4638      	mov	r0, r7
    lv_list_set_style(list, LV_LIST_STYLE_BG, &lv_style_transp_tight);
 800c9ce:	f8df b21c 	ldr.w	fp, [pc, #540]	; 800cbec <demo_create+0x444>
    lv_page_set_style(parent, LV_PAGE_STYLE_SCRL, &lv_style_transp_fit);
 800c9d2:	f008 fecc 	bl	801576e <lv_page_set_style>
    lv_page_set_sb_mode(parent, LV_SB_MODE_OFF);
 800c9d6:	4621      	mov	r1, r4
 800c9d8:	4638      	mov	r0, r7
 800c9da:	f008 fe8c 	bl	80156f6 <lv_page_set_sb_mode>
    lv_style_copy(&style_btn_rel, &lv_style_btn_rel);
 800c9de:	4650      	mov	r0, sl
 800c9e0:	495e      	ldr	r1, [pc, #376]	; (800cb5c <demo_create+0x3b4>)
 800c9e2:	f003 f972 	bl	800fcca <lv_style_copy>
    style_btn_rel.body.main_color = lv_color_hex3(0x333);
 800c9e6:	f8aa 8002 	strh.w	r8, [sl, #2]
    lv_style_copy(&style_btn_pr, &style_btn_rel);
 800c9ea:	f8df 8204 	ldr.w	r8, [pc, #516]	; 800cbf0 <demo_create+0x448>
    style_btn_rel.body.border.opa = LV_OPA_50;
 800c9ee:	f04f 027f 	mov.w	r2, #127	; 0x7f
    style_btn_rel.body.grad_color = LV_COLOR_BLACK;
 800c9f2:	f8ca 4004 	str.w	r4, [sl, #4]
    lv_style_copy(&style_btn_pr, &style_btn_rel);
 800c9f6:	4651      	mov	r1, sl
 800c9f8:	4640      	mov	r0, r8
    style_btn_rel.body.border.opa = LV_OPA_50;
 800c9fa:	f88a 200f 	strb.w	r2, [sl, #15]
    style_btn_rel.body.border.color = LV_COLOR_SILVER;
 800c9fe:	f8aa 900a 	strh.w	r9, [sl, #10]
    style_btn_rel.body.border.width = 1;
 800ca02:	f8aa 600c 	strh.w	r6, [sl, #12]
    lv_style_copy(&style_btn_pr, &style_btn_rel);
 800ca06:	f003 f960 	bl	800fcca <lv_style_copy>
    style_btn_pr.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 800ca0a:	f245 43bb 	movw	r3, #21691	; 0x54bb
    lv_obj_t * list = lv_list_create(parent, NULL);
 800ca0e:	4621      	mov	r1, r4
 800ca10:	4638      	mov	r0, r7
    style_btn_pr.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 800ca12:	f8a8 3002 	strh.w	r3, [r8, #2]
    style_btn_pr.body.grad_color = lv_color_make(0x37, 0x62, 0x90);
 800ca16:	f243 3312 	movw	r3, #13074	; 0x3312
 800ca1a:	f8a8 3004 	strh.w	r3, [r8, #4]
    style_btn_pr.text.color = lv_color_make(0xbb, 0xd5, 0xf1);
 800ca1e:	f64b 63be 	movw	r3, #48830	; 0xbebe
 800ca22:	f8a8 3020 	strh.w	r3, [r8, #32]
    lv_obj_t * list = lv_list_create(parent, NULL);
 800ca26:	f7fb ff23 	bl	8008870 <lv_list_create>
 800ca2a:	4681      	mov	r9, r0
    lv_obj_set_height(list, 2 * lv_obj_get_height(parent) / 3);
 800ca2c:	4638      	mov	r0, r7
 800ca2e:	f002 ffb2 	bl	800f996 <lv_obj_get_height>
 800ca32:	2303      	movs	r3, #3
 800ca34:	fa00 f106 	lsl.w	r1, r0, r6
 800ca38:	4648      	mov	r0, r9
 800ca3a:	fb91 f1f3 	sdiv	r1, r1, r3
 800ca3e:	b209      	sxth	r1, r1
 800ca40:	f002 feb5 	bl	800f7ae <lv_obj_set_height>
    lv_list_set_style(list, LV_LIST_STYLE_BG, &lv_style_transp_tight);
 800ca44:	465a      	mov	r2, fp
 800ca46:	4621      	mov	r1, r4
 800ca48:	4648      	mov	r0, r9
 800ca4a:	f008 fb5c 	bl	8015106 <lv_list_set_style>
    lv_list_set_style(list, LV_LIST_STYLE_SCRL, &lv_style_transp_tight);
 800ca4e:	465a      	mov	r2, fp
 800ca50:	4631      	mov	r1, r6
 800ca52:	4648      	mov	r0, r9
 800ca54:	f008 fb57 	bl	8015106 <lv_list_set_style>
    lv_list_set_style(list, LV_LIST_STYLE_BTN_REL, &style_btn_rel);
 800ca58:	4652      	mov	r2, sl
 800ca5a:	4648      	mov	r0, r9
 800ca5c:	2104      	movs	r1, #4
 800ca5e:	f008 fb52 	bl	8015106 <lv_list_set_style>
    lv_list_set_style(list, LV_LIST_STYLE_BTN_PR, &style_btn_pr);
 800ca62:	4642      	mov	r2, r8
    lv_obj_align(list, NULL, LV_ALIGN_IN_TOP_MID, 0, LV_DPI / 4);
 800ca64:	f04f 0819 	mov.w	r8, #25
    lv_list_set_style(list, LV_LIST_STYLE_BTN_PR, &style_btn_pr);
 800ca68:	4648      	mov	r0, r9
 800ca6a:	2105      	movs	r1, #5
    lv_obj_set_event_cb(list_btn, list_btn_event_handler);
 800ca6c:	f8df a184 	ldr.w	sl, [pc, #388]	; 800cbf4 <demo_create+0x44c>
    lv_list_set_style(list, LV_LIST_STYLE_BTN_PR, &style_btn_pr);
 800ca70:	f008 fb49 	bl	8015106 <lv_list_set_style>
    lv_obj_align(list, NULL, LV_ALIGN_IN_TOP_MID, 0, LV_DPI / 4);
 800ca74:	4623      	mov	r3, r4
 800ca76:	f8cd 8000 	str.w	r8, [sp]
 800ca7a:	4621      	mov	r1, r4
 800ca7c:	4648      	mov	r0, r9
 800ca7e:	2202      	movs	r2, #2
 800ca80:	f002 fc6c 	bl	800f35c <lv_obj_align>
    list_btn = lv_list_add_btn(list, LV_SYMBOL_FILE, "New");
 800ca84:	4a41      	ldr	r2, [pc, #260]	; (800cb8c <demo_create+0x3e4>)
 800ca86:	4942      	ldr	r1, [pc, #264]	; (800cb90 <demo_create+0x3e8>)
 800ca88:	4648      	mov	r0, r9
 800ca8a:	f7fb fded 	bl	8008668 <lv_list_add_btn>
    lv_obj_set_event_cb(list_btn, list_btn_event_handler);
 800ca8e:	4651      	mov	r1, sl
 800ca90:	f002 fb44 	bl	800f11c <lv_obj_set_event_cb>
    list_btn = lv_list_add_btn(list, LV_SYMBOL_DIRECTORY, "Open");
 800ca94:	4a3f      	ldr	r2, [pc, #252]	; (800cb94 <demo_create+0x3ec>)
 800ca96:	4940      	ldr	r1, [pc, #256]	; (800cb98 <demo_create+0x3f0>)
 800ca98:	4648      	mov	r0, r9
 800ca9a:	f7fb fde5 	bl	8008668 <lv_list_add_btn>
    lv_obj_set_event_cb(list_btn, list_btn_event_handler);
 800ca9e:	4651      	mov	r1, sl
 800caa0:	f002 fb3c 	bl	800f11c <lv_obj_set_event_cb>
    list_btn = lv_list_add_btn(list, LV_SYMBOL_TRASH, "Delete");
 800caa4:	4a3d      	ldr	r2, [pc, #244]	; (800cb9c <demo_create+0x3f4>)
 800caa6:	493e      	ldr	r1, [pc, #248]	; (800cba0 <demo_create+0x3f8>)
 800caa8:	4648      	mov	r0, r9
 800caaa:	f7fb fddd 	bl	8008668 <lv_list_add_btn>
    lv_obj_set_event_cb(list_btn, list_btn_event_handler);
 800caae:	4651      	mov	r1, sl
 800cab0:	f002 fb34 	bl	800f11c <lv_obj_set_event_cb>
    list_btn = lv_list_add_btn(list, LV_SYMBOL_EDIT, "Edit");
 800cab4:	4a3b      	ldr	r2, [pc, #236]	; (800cba4 <demo_create+0x3fc>)
 800cab6:	493c      	ldr	r1, [pc, #240]	; (800cba8 <demo_create+0x400>)
 800cab8:	4648      	mov	r0, r9
 800caba:	f7fb fdd5 	bl	8008668 <lv_list_add_btn>
    lv_obj_set_event_cb(list_btn, list_btn_event_handler);
 800cabe:	4651      	mov	r1, sl
 800cac0:	f002 fb2c 	bl	800f11c <lv_obj_set_event_cb>
    list_btn = lv_list_add_btn(list, LV_SYMBOL_SAVE, "Save");
 800cac4:	4a39      	ldr	r2, [pc, #228]	; (800cbac <demo_create+0x404>)
 800cac6:	493a      	ldr	r1, [pc, #232]	; (800cbb0 <demo_create+0x408>)
 800cac8:	4648      	mov	r0, r9
 800caca:	f7fb fdcd 	bl	8008668 <lv_list_add_btn>
    lv_obj_set_event_cb(list_btn, list_btn_event_handler);
 800cace:	4651      	mov	r1, sl
 800cad0:	f002 fb24 	bl	800f11c <lv_obj_set_event_cb>
    list_btn = lv_list_add_btn(list, LV_SYMBOL_WIFI, "WiFi");
 800cad4:	4a37      	ldr	r2, [pc, #220]	; (800cbb4 <demo_create+0x40c>)
 800cad6:	4938      	ldr	r1, [pc, #224]	; (800cbb8 <demo_create+0x410>)
 800cad8:	4648      	mov	r0, r9
 800cada:	f7fb fdc5 	bl	8008668 <lv_list_add_btn>
    lv_obj_set_event_cb(list_btn, list_btn_event_handler);
 800cade:	4651      	mov	r1, sl
 800cae0:	f002 fb1c 	bl	800f11c <lv_obj_set_event_cb>
    list_btn = lv_list_add_btn(list, LV_SYMBOL_GPS, "GPS");
 800cae4:	4a35      	ldr	r2, [pc, #212]	; (800cbbc <demo_create+0x414>)
 800cae6:	4936      	ldr	r1, [pc, #216]	; (800cbc0 <demo_create+0x418>)
 800cae8:	4648      	mov	r0, r9
 800caea:	f7fb fdbd 	bl	8008668 <lv_list_add_btn>
    lv_obj_set_event_cb(list_btn, list_btn_event_handler);
 800caee:	4651      	mov	r1, sl
 800caf0:	f002 fb14 	bl	800f11c <lv_obj_set_event_cb>
    lv_obj_t * mbox = lv_mbox_create(parent, NULL);
 800caf4:	4621      	mov	r1, r4
 800caf6:	4638      	mov	r0, r7
 800caf8:	f7fc f9e6 	bl	8008ec8 <lv_mbox_create>
    lv_mbox_set_text(mbox, "Click a button to copy its text to the Text area ");
 800cafc:	4931      	ldr	r1, [pc, #196]	; (800cbc4 <demo_create+0x41c>)
    lv_obj_t * mbox = lv_mbox_create(parent, NULL);
 800cafe:	4681      	mov	r9, r0
    lv_mbox_set_text(mbox, "Click a button to copy its text to the Text area ");
 800cb00:	f008 fbe0 	bl	80152c4 <lv_mbox_set_text>
    lv_obj_set_width(mbox, hres - LV_DPI);
 800cb04:	9b04      	ldr	r3, [sp, #16]
 800cb06:	4648      	mov	r0, r9
 800cb08:	f1a3 0164 	sub.w	r1, r3, #100	; 0x64
 800cb0c:	b209      	sxth	r1, r1
 800cb0e:	f002 fe47 	bl	800f7a0 <lv_obj_set_width>
    lv_mbox_add_btns(mbox, mbox_btns);    /*The default action is close*/
 800cb12:	4648      	mov	r0, r9
 800cb14:	492c      	ldr	r1, [pc, #176]	; (800cbc8 <demo_create+0x420>)
 800cb16:	f7fc fa5b 	bl	8008fd0 <lv_mbox_add_btns>
    lv_obj_align(mbox, parent, LV_ALIGN_IN_TOP_MID, 0, LV_DPI / 2);
 800cb1a:	2332      	movs	r3, #50	; 0x32
 800cb1c:	4639      	mov	r1, r7
 800cb1e:	2202      	movs	r2, #2
 800cb20:	9300      	str	r3, [sp, #0]
 800cb22:	4648      	mov	r0, r9
 800cb24:	4623      	mov	r3, r4
    lv_style_copy(&style_chart, &lv_style_pretty);
 800cb26:	4f29      	ldr	r7, [pc, #164]	; (800cbcc <demo_create+0x424>)
    lv_obj_align(mbox, parent, LV_ALIGN_IN_TOP_MID, 0, LV_DPI / 2);
 800cb28:	f002 fc18 	bl	800f35c <lv_obj_align>
    lv_coord_t vres = lv_disp_get_ver_res(NULL);
 800cb2c:	4620      	mov	r0, r4
 800cb2e:	f7f5 fddb 	bl	80026e8 <lv_disp_get_ver_res>
    lv_page_set_style(parent, LV_PAGE_STYLE_BG, &lv_style_transp_fit);
 800cb32:	462a      	mov	r2, r5
    lv_coord_t vres = lv_disp_get_ver_res(NULL);
 800cb34:	9004      	str	r0, [sp, #16]
    lv_page_set_style(parent, LV_PAGE_STYLE_BG, &lv_style_transp_fit);
 800cb36:	4621      	mov	r1, r4
 800cb38:	9802      	ldr	r0, [sp, #8]
    style_chart.body.opa = LV_OPA_60;
 800cb3a:	f04f 0999 	mov.w	r9, #153	; 0x99
    lv_page_set_style(parent, LV_PAGE_STYLE_BG, &lv_style_transp_fit);
 800cb3e:	f008 fe16 	bl	801576e <lv_page_set_style>
    lv_page_set_style(parent, LV_PAGE_STYLE_SCRL, &lv_style_transp_fit);
 800cb42:	462a      	mov	r2, r5
 800cb44:	4631      	mov	r1, r6
 800cb46:	9802      	ldr	r0, [sp, #8]
 800cb48:	f008 fe11 	bl	801576e <lv_page_set_style>
    lv_page_set_scrl_height(parent, lv_obj_get_height(parent));
 800cb4c:	9802      	ldr	r0, [sp, #8]
 800cb4e:	f002 ff22 	bl	800f996 <lv_obj_get_height>
 800cb52:	4605      	mov	r5, r0
 800cb54:	e050      	b.n	800cbf8 <demo_create+0x450>
 800cb56:	bf00      	nop
 800cb58:	20028c4c 	.word	0x20028c4c
 800cb5c:	20020470 	.word	0x20020470
 800cb60:	20020434 	.word	0x20020434
 800cb64:	08017236 	.word	0x08017236
 800cb68:	0801c8b7 	.word	0x0801c8b7
 800cb6c:	0801c8bd 	.word	0x0801c8bd
 800cb70:	0801c8c2 	.word	0x0801c8c2
 800cb74:	2002068c 	.word	0x2002068c
 800cb78:	20028cc4 	.word	0x20028cc4
 800cb7c:	2002059c 	.word	0x2002059c
 800cb80:	0801ca18 	.word	0x0801ca18
 800cb84:	0800c5f9 	.word	0x0800c5f9
 800cb88:	20028b5c 	.word	0x20028b5c
 800cb8c:	0801c8c8 	.word	0x0801c8c8
 800cb90:	0801c8cc 	.word	0x0801c8cc
 800cb94:	0801c8d0 	.word	0x0801c8d0
 800cb98:	0801c8d5 	.word	0x0801c8d5
 800cb9c:	0801c8d9 	.word	0x0801c8d9
 800cba0:	0801c8e0 	.word	0x0801c8e0
 800cba4:	0801c8e4 	.word	0x0801c8e4
 800cba8:	0801c8e9 	.word	0x0801c8e9
 800cbac:	0801c8ed 	.word	0x0801c8ed
 800cbb0:	0801c8f2 	.word	0x0801c8f2
 800cbb4:	0801c8f6 	.word	0x0801c8f6
 800cbb8:	0801c8fb 	.word	0x0801c8fb
 800cbbc:	0801c8ff 	.word	0x0801c8ff
 800cbc0:	0801c903 	.word	0x0801c903
 800cbc4:	0801c907 	.word	0x0801c907
 800cbc8:	2002e160 	.word	0x2002e160
 800cbcc:	20028a6c 	.word	0x20028a6c
 800cbd0:	20028c10 	.word	0x20028c10
 800cbd4:	20020524 	.word	0x20020524
 800cbd8:	20028c88 	.word	0x20028c88
 800cbdc:	20028bd4 	.word	0x20028bd4
 800cbe0:	20028b20 	.word	0x20028b20
 800cbe4:	20028ae4 	.word	0x20028ae4
 800cbe8:	20028a30 	.word	0x20028a30
 800cbec:	200206c8 	.word	0x200206c8
 800cbf0:	200289f4 	.word	0x200289f4
 800cbf4:	0800c759 	.word	0x0800c759
    lv_obj_set_height(lv_page_get_scrl(page), h);
 800cbf8:	9802      	ldr	r0, [sp, #8]
 800cbfa:	f008 fde8 	bl	80157ce <lv_page_get_scrl>
 800cbfe:	4629      	mov	r1, r5
 800cc00:	f002 fdd5 	bl	800f7ae <lv_obj_set_height>
    lv_page_set_sb_mode(parent, LV_SB_MODE_OFF);
 800cc04:	4621      	mov	r1, r4
 800cc06:	9802      	ldr	r0, [sp, #8]
 800cc08:	f008 fd75 	bl	80156f6 <lv_page_set_sb_mode>
    lv_style_copy(&style_chart, &lv_style_pretty);
 800cc0c:	4638      	mov	r0, r7
 800cc0e:	4979      	ldr	r1, [pc, #484]	; (800cdf4 <demo_create+0x64c>)
    chart = lv_chart_create(parent, NULL);
 800cc10:	4d79      	ldr	r5, [pc, #484]	; (800cdf8 <demo_create+0x650>)
    lv_style_copy(&style_chart, &lv_style_pretty);
 800cc12:	f003 f85a 	bl	800fcca <lv_style_copy>
    style_chart.line.color = LV_COLOR_GRAY;
 800cc16:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    chart = lv_chart_create(parent, NULL);
 800cc1a:	4621      	mov	r1, r4
 800cc1c:	9802      	ldr	r0, [sp, #8]
    style_chart.line.color = LV_COLOR_GRAY;
 800cc1e:	86ba      	strh	r2, [r7, #52]	; 0x34
    style_chart.body.opa = LV_OPA_60;
 800cc20:	f887 9008 	strb.w	r9, [r7, #8]
    style_chart.body.radius = 0;
 800cc24:	80fc      	strh	r4, [r7, #6]
    chart = lv_chart_create(parent, NULL);
 800cc26:	f7fd ff0b 	bl	800aa40 <lv_chart_create>
 800cc2a:	4682      	mov	sl, r0
 800cc2c:	6028      	str	r0, [r5, #0]
    lv_obj_set_size(chart, 2 * lv_obj_get_width(parent) / 3, lv_obj_get_height(parent) / 2);
 800cc2e:	9802      	ldr	r0, [sp, #8]
 800cc30:	f002 feab 	bl	800f98a <lv_obj_get_width>
 800cc34:	4683      	mov	fp, r0
 800cc36:	9802      	ldr	r0, [sp, #8]
 800cc38:	f002 fead 	bl	800f996 <lv_obj_get_height>
 800cc3c:	fa0b f106 	lsl.w	r1, fp, r6
 800cc40:	2303      	movs	r3, #3
 800cc42:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    ser1 = lv_chart_add_series(chart, LV_COLOR_RED);
 800cc46:	f44f 4b78 	mov.w	fp, #63488	; 0xf800
    lv_obj_set_size(chart, 2 * lv_obj_get_width(parent) / 3, lv_obj_get_height(parent) / 2);
 800cc4a:	f340 024f 	sbfx	r2, r0, #1, #16
 800cc4e:	4650      	mov	r0, sl
    style_bar.body.padding.top = LV_DPI / 10;
 800cc50:	f04f 0a0a 	mov.w	sl, #10
    lv_obj_set_size(chart, 2 * lv_obj_get_width(parent) / 3, lv_obj_get_height(parent) / 2);
 800cc54:	fb91 f1f3 	sdiv	r1, r1, r3
 800cc58:	b209      	sxth	r1, r1
 800cc5a:	f002 fd57 	bl	800f70c <lv_obj_set_size>
    lv_obj_align(chart, NULL,  LV_ALIGN_IN_TOP_MID, 0, LV_DPI / 4);
 800cc5e:	4623      	mov	r3, r4
 800cc60:	2202      	movs	r2, #2
 800cc62:	f8cd 8000 	str.w	r8, [sp]
 800cc66:	4621      	mov	r1, r4
 800cc68:	6828      	ldr	r0, [r5, #0]
 800cc6a:	f002 fb77 	bl	800f35c <lv_obj_align>
    lv_chart_set_type(chart, LV_CHART_TYPE_COLUMN);
 800cc6e:	6828      	ldr	r0, [r5, #0]
 800cc70:	2102      	movs	r1, #2
    style_bar.body.radius = LV_RADIUS_CIRCLE;
 800cc72:	f647 4818 	movw	r8, #31768	; 0x7c18
    lv_chart_set_type(chart, LV_CHART_TYPE_COLUMN);
 800cc76:	f008 fe9f 	bl	80159b8 <lv_chart_set_type>
 * @param style pointer to a style
 */
static inline void lv_chart_set_style(lv_obj_t * chart, lv_chart_style_t type, const lv_style_t * style)
{
    (void)type; /*Unused*/
    lv_obj_set_style(chart, style);
 800cc7a:	4639      	mov	r1, r7
 800cc7c:	6828      	ldr	r0, [r5, #0]
 800cc7e:	f002 fe61 	bl	800f944 <lv_obj_set_style>
    lv_chart_set_series_opa(chart, LV_OPA_70);
 800cc82:	6828      	ldr	r0, [r5, #0]
 800cc84:	21b2      	movs	r1, #178	; 0xb2
 800cc86:	f008 fea6 	bl	80159d6 <lv_chart_set_series_opa>
    ser1 = lv_chart_add_series(chart, LV_COLOR_RED);
 800cc8a:	4659      	mov	r1, fp
 800cc8c:	6828      	ldr	r0, [r5, #0]
 800cc8e:	f7fd ff81 	bl	800ab94 <lv_chart_add_series>
 800cc92:	4607      	mov	r7, r0
    lv_chart_set_next(chart, ser1, 40);
 800cc94:	4601      	mov	r1, r0
 800cc96:	2228      	movs	r2, #40	; 0x28
 800cc98:	6828      	ldr	r0, [r5, #0]
 800cc9a:	f008 fead 	bl	80159f8 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 30);
 800cc9e:	4639      	mov	r1, r7
 800cca0:	6828      	ldr	r0, [r5, #0]
 800cca2:	221e      	movs	r2, #30
 800cca4:	f008 fea8 	bl	80159f8 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 47);
 800cca8:	4639      	mov	r1, r7
 800ccaa:	6828      	ldr	r0, [r5, #0]
 800ccac:	222f      	movs	r2, #47	; 0x2f
 800ccae:	f008 fea3 	bl	80159f8 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 59);
 800ccb2:	4639      	mov	r1, r7
 800ccb4:	6828      	ldr	r0, [r5, #0]
 800ccb6:	223b      	movs	r2, #59	; 0x3b
 800ccb8:	f008 fe9e 	bl	80159f8 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 59);
 800ccbc:	4639      	mov	r1, r7
 800ccbe:	6828      	ldr	r0, [r5, #0]
 800ccc0:	223b      	movs	r2, #59	; 0x3b
 800ccc2:	f008 fe99 	bl	80159f8 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 31);
 800ccc6:	4639      	mov	r1, r7
 800ccc8:	6828      	ldr	r0, [r5, #0]
 800ccca:	221f      	movs	r2, #31
 800cccc:	f008 fe94 	bl	80159f8 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 55);
 800ccd0:	4639      	mov	r1, r7
 800ccd2:	6828      	ldr	r0, [r5, #0]
 800ccd4:	2237      	movs	r2, #55	; 0x37
 800ccd6:	f008 fe8f 	bl	80159f8 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 70);
 800ccda:	4639      	mov	r1, r7
 800ccdc:	6828      	ldr	r0, [r5, #0]
 800ccde:	2246      	movs	r2, #70	; 0x46
 800cce0:	f008 fe8a 	bl	80159f8 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 82);
 800cce4:	4639      	mov	r1, r7
 800cce6:	6828      	ldr	r0, [r5, #0]
 800cce8:	2252      	movs	r2, #82	; 0x52
 800ccea:	f008 fe85 	bl	80159f8 <lv_chart_set_next>
    lv_chart_set_next(chart, ser1, 91);
 800ccee:	4639      	mov	r1, r7
    lv_style_copy(&style_bar, &lv_style_pretty);
 800ccf0:	4f42      	ldr	r7, [pc, #264]	; (800cdfc <demo_create+0x654>)
    lv_chart_set_next(chart, ser1, 91);
 800ccf2:	225b      	movs	r2, #91	; 0x5b
 800ccf4:	6828      	ldr	r0, [r5, #0]
 800ccf6:	f008 fe7f 	bl	80159f8 <lv_chart_set_next>
    lv_style_copy(&style_bar, &lv_style_pretty);
 800ccfa:	4638      	mov	r0, r7
 800ccfc:	493d      	ldr	r1, [pc, #244]	; (800cdf4 <demo_create+0x64c>)
 800ccfe:	f002 ffe4 	bl	800fcca <lv_style_copy>
    style_bar.body.grad_color =  LV_COLOR_GRAY;
 800cd02:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    style_bar.body.opa = LV_OPA_60;
 800cd06:	f887 9008 	strb.w	r9, [r7, #8]
    lv_style_copy(&style_indic, &lv_style_pretty);
 800cd0a:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800ce0c <demo_create+0x664>
    style_bar.body.grad_color =  LV_COLOR_GRAY;
 800cd0e:	80bb      	strh	r3, [r7, #4]
    style_bar.body.border.color = LV_COLOR_WHITE;
 800cd10:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    lv_style_copy(&style_indic, &lv_style_pretty);
 800cd14:	4648      	mov	r0, r9
    style_bar.body.main_color =  LV_COLOR_BLACK;
 800cd16:	807c      	strh	r4, [r7, #2]
    style_bar.body.padding.bottom = LV_DPI / 10;
 800cd18:	f8c7 a018 	str.w	sl, [r7, #24]
    lv_style_copy(&style_indic, &lv_style_pretty);
 800cd1c:	4935      	ldr	r1, [pc, #212]	; (800cdf4 <demo_create+0x64c>)
    style_bar.body.radius = LV_RADIUS_CIRCLE;
 800cd1e:	f8a7 8006 	strh.w	r8, [r7, #6]
    style_bar.body.border.color = LV_COLOR_WHITE;
 800cd22:	817b      	strh	r3, [r7, #10]
    style_bar.body.padding.top = LV_DPI / 10;
 800cd24:	f8a7 a016 	strh.w	sl, [r7, #22]
    style_bar.body.padding.right = 0;
 800cd28:	83bc      	strh	r4, [r7, #28]
    lv_style_copy(&style_indic, &lv_style_pretty);
 800cd2a:	f002 ffce 	bl	800fcca <lv_style_copy>
    style_indic.body.grad_color =  LV_COLOR_MAROON;
 800cd2e:	4b34      	ldr	r3, [pc, #208]	; (800ce00 <demo_create+0x658>)
    style_indic.body.padding.top = LV_DPI / 30;
 800cd30:	f04f 0203 	mov.w	r2, #3
    style_indic.body.main_color =  LV_COLOR_RED;
 800cd34:	f8a9 b002 	strh.w	fp, [r9, #2]
    style_indic.body.grad_color =  LV_COLOR_MAROON;
 800cd38:	f8c9 3004 	str.w	r3, [r9, #4]
    style_indic.body.shadow.color = LV_COLOR_RED;
 800cd3c:	4b31      	ldr	r3, [pc, #196]	; (800ce04 <demo_create+0x65c>)
    lv_style_copy(&style_knob, &lv_style_pretty);
 800cd3e:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 800ce10 <demo_create+0x668>
    style_indic.body.shadow.color = LV_COLOR_RED;
 800cd42:	f8c9 3010 	str.w	r3, [r9, #16]
    style_indic.body.padding.bottom = LV_DPI / 30;
 800cd46:	f04f 1303 	mov.w	r3, #196611	; 0x30003
    lv_style_copy(&style_knob, &lv_style_pretty);
 800cd4a:	4658      	mov	r0, fp
 800cd4c:	4929      	ldr	r1, [pc, #164]	; (800cdf4 <demo_create+0x64c>)
    style_indic.body.padding.bottom = LV_DPI / 30;
 800cd4e:	f8c9 3018 	str.w	r3, [r9, #24]
    style_indic.body.padding.top = LV_DPI / 30;
 800cd52:	f8a9 2016 	strh.w	r2, [r9, #22]
    style_indic.body.padding.right = LV_DPI / 30;
 800cd56:	f8a9 201c 	strh.w	r2, [r9, #28]
    lv_style_copy(&style_knob, &lv_style_pretty);
 800cd5a:	f002 ffb6 	bl	800fcca <lv_style_copy>
    style_knob.body.opa = LV_OPA_70;
 800cd5e:	f06f 014d 	mvn.w	r1, #77	; 0x4d
    lv_obj_t * slider = lv_slider_create(parent, NULL);
 800cd62:	9802      	ldr	r0, [sp, #8]
    style_knob.body.radius = LV_RADIUS_CIRCLE;
 800cd64:	f8ab 8006 	strh.w	r8, [fp, #6]
    style_knob.body.opa = LV_OPA_70;
 800cd68:	f88b 1008 	strb.w	r1, [fp, #8]
    lv_obj_t * slider = lv_slider_create(parent, NULL);
 800cd6c:	4621      	mov	r1, r4
 800cd6e:	f7fe fcc7 	bl	800b700 <lv_slider_create>
 800cd72:	4680      	mov	r8, r0
    lv_slider_set_style(slider, LV_SLIDER_STYLE_BG, &style_bar);
 800cd74:	463a      	mov	r2, r7
 800cd76:	4621      	mov	r1, r4
 800cd78:	f009 f87f 	bl	8015e7a <lv_slider_set_style>
    lv_slider_set_style(slider, LV_SLIDER_STYLE_INDIC, &style_indic);
 800cd7c:	464a      	mov	r2, r9
 800cd7e:	4631      	mov	r1, r6
 800cd80:	4640      	mov	r0, r8
 800cd82:	f009 f87a 	bl	8015e7a <lv_slider_set_style>
    lv_slider_set_style(slider, LV_SLIDER_STYLE_KNOB, &style_knob);
 800cd86:	465a      	mov	r2, fp
 800cd88:	2102      	movs	r1, #2
 800cd8a:	4640      	mov	r0, r8
 800cd8c:	f009 f875 	bl	8015e7a <lv_slider_set_style>
    lv_obj_set_size(slider, lv_obj_get_width(chart), LV_DPI / 3);
 800cd90:	6828      	ldr	r0, [r5, #0]
 800cd92:	f002 fdfa 	bl	800f98a <lv_obj_get_width>
 800cd96:	2221      	movs	r2, #33	; 0x21
 800cd98:	4601      	mov	r1, r0
 800cd9a:	4640      	mov	r0, r8
 800cd9c:	f002 fcb6 	bl	800f70c <lv_obj_set_size>
    lv_obj_align(slider, chart, LV_ALIGN_OUT_BOTTOM_MID, 0, (vres - chart->coords.y2 - lv_obj_get_height(slider)) / 2); /*Align to below the chart*/
 800cda0:	682e      	ldr	r6, [r5, #0]
 800cda2:	9b04      	ldr	r3, [sp, #16]
 800cda4:	f9b6 0016 	ldrsh.w	r0, [r6, #22]
 800cda8:	1a1d      	subs	r5, r3, r0
 800cdaa:	4640      	mov	r0, r8
 800cdac:	f002 fdf3 	bl	800f996 <lv_obj_get_height>
 800cdb0:	4623      	mov	r3, r4
 800cdb2:	1a28      	subs	r0, r5, r0
 800cdb4:	220d      	movs	r2, #13
 800cdb6:	4631      	mov	r1, r6
 800cdb8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800cdbc:	f340 004f 	sbfx	r0, r0, #1, #16
 800cdc0:	9000      	str	r0, [sp, #0]
 800cdc2:	4640      	mov	r0, r8
 800cdc4:	f002 faca 	bl	800f35c <lv_obj_align>
    lv_obj_set_event_cb(slider, slider_event_handler);
 800cdc8:	4640      	mov	r0, r8
 800cdca:	490f      	ldr	r1, [pc, #60]	; (800ce08 <demo_create+0x660>)
 800cdcc:	f002 f9a6 	bl	800f11c <lv_obj_set_event_cb>
 * @param min minimum value
 * @param max maximum value
 */
static inline void lv_slider_set_range(lv_obj_t * slider, int16_t min, int16_t max)
{
    lv_bar_set_range(slider, min, max);
 800cdd0:	4651      	mov	r1, sl
 800cdd2:	4640      	mov	r0, r8
 800cdd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cdd8:	f007 fc39 	bl	801464e <lv_bar_set_range>
    lv_bar_set_value(slider, value, anim);
 800cddc:	4640      	mov	r0, r8
 800cdde:	4622      	mov	r2, r4
 800cde0:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 800cde4:	f7f9 fdc2 	bl	800696c <lv_bar_set_value>
    if(event == LV_EVENT_VALUE_CHANGED) {
 800cde8:	4640      	mov	r0, r8
}
 800cdea:	b007      	add	sp, #28
 800cdec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdf0:	f7ff bcc8 	b.w	800c784 <slider_event_handler.part.3>
 800cdf4:	2002059c 	.word	0x2002059c
 800cdf8:	200289b0 	.word	0x200289b0
 800cdfc:	200289b8 	.word	0x200289b8
 800ce00:	7c188000 	.word	0x7c188000
 800ce04:	000af800 	.word	0x000af800
 800ce08:	08016713 	.word	0x08016713
 800ce0c:	20028aa8 	.word	0x20028aa8
 800ce10:	20028b98 	.word	0x20028b98

0800ce14 <_IntExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
 800ce14:	4804      	ldr	r0, [pc, #16]	; (800ce28 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
 800ce16:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
 800ce18:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
 800ce1a:	4288      	cmp	r0, r1
    beq _EXIT_EXC
 800ce1c:	d003      	beq.n	800ce26 <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
 800ce1e:	4903      	ldr	r1, [pc, #12]	; (800ce2c <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
 800ce20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
 800ce24:	600a      	str	r2, [r1, #0]

0800ce26 <_EXIT_EXC>:
    mov lr, r1
#else
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */
    bx lr
 800ce26:	4770      	bx	lr
    ldr r0, =_kernel
 800ce28:	20028e14 	.word	0x20028e14
    ldr r1, =_SCS_ICSR
 800ce2c:	e000ed04 	.word	0xe000ed04

0800ce30 <z_IntLibInit>:
 * @return N/A
 */

void z_IntLibInit(void)
{
	int irq = 0;
 800ce30:	2300      	movs	r3, #0
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ce32:	4804      	ldr	r0, [pc, #16]	; (800ce44 <z_IntLibInit+0x14>)
 800ce34:	2110      	movs	r1, #16
 800ce36:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 800ce38:	3301      	adds	r3, #1
 800ce3a:	2b6e      	cmp	r3, #110	; 0x6e
 800ce3c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 800ce40:	d1f9      	bne.n	800ce36 <z_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 800ce42:	4770      	bx	lr
 800ce44:	e000e100 	.word	0xe000e100

0800ce48 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
 800ce48:	4a09      	ldr	r2, [pc, #36]	; (800ce70 <__swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 800ce4a:	490a      	ldr	r1, [pc, #40]	; (800ce74 <__swap+0x2c>)
	_current->arch.basepri = key;
 800ce4c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 800ce4e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
 800ce50:	65d8      	str	r0, [r3, #92]	; 0x5c
	_current->arch.swap_return_value = _k_neg_eagain;
 800ce52:	6619      	str	r1, [r3, #96]	; 0x60

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800ce54:	4908      	ldr	r1, [pc, #32]	; (800ce78 <__swap+0x30>)
 800ce56:	684b      	ldr	r3, [r1, #4]
 800ce58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce5c:	604b      	str	r3, [r1, #4]
 800ce5e:	2300      	movs	r3, #0
 800ce60:	f383 8811 	msr	BASEPRI, r3
 800ce64:	f3bf 8f6f 	isb	sy
	irq_unlock(0);

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 800ce68:	6893      	ldr	r3, [r2, #8]
}
 800ce6a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800ce6c:	4770      	bx	lr
 800ce6e:	bf00      	nop
 800ce70:	20028e14 	.word	0x20028e14
 800ce74:	0801740c 	.word	0x0801740c
 800ce78:	e000ed00 	.word	0xe000ed00

0800ce7c <__pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 800ce7c:	490f      	ldr	r1, [pc, #60]	; (800cebc <__pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
 800ce7e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 800ce80:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
 800ce84:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
 800ce86:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 800ce8a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 800ce8e:	2010      	movs	r0, #16
    msr BASEPRI, r0
 800ce90:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 800ce94:	f3bf 8f6f 	isb	sy
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
 800ce98:	4f09      	ldr	r7, [pc, #36]	; (800cec0 <__pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 800ce9a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 800ce9e:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
 800cea0:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
 800cea2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 800cea4:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
    movs.n r3, #0
 800cea6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 800cea8:	65d3      	str	r3, [r2, #92]	; 0x5c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 800ceaa:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 800ceae:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
 800ceb2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

    msr PSP, ip
 800ceb6:	f38c 8809 	msr	PSP, ip
    pop {r0, lr}
#endif
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
 800ceba:	4770      	bx	lr
    ldr r1, =_kernel
 800cebc:	20028e14 	.word	0x20028e14
    ldr v4, =_SCS_ICSR
 800cec0:	e000ed04 	.word	0xe000ed04

0800cec4 <__svc>:
 * - System Calls (User mode)
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
 800cec4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 800cec8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 800ceca:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 800cece:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 800ced2:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read encoding */
    ldrh r1, [r1, #-2]
 800ced4:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call (if user mode supported)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
 800ced8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
 800cedc:	2902      	cmp	r1, #2
    beq _oops
 800cede:	d0ff      	beq.n	800cee0 <_oops>

0800cee0 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {r0, lr}
 800cee0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 800cee2:	f009 fc1d 	bl	8016720 <z_do_kernel_oops>
    pop {r0, pc}
 800cee6:	bd01      	pop	{r0, pc}

0800cee8 <MpuFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t MpuFault(NANO_ESF *esf, int fromHardFault)
 800cee8:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****\n");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 800ceea:	4c1c      	ldr	r4, [pc, #112]	; (800cf5c <MpuFault.isra.2+0x74>)
static u32_t MpuFault(NANO_ESF *esf, int fromHardFault)
 800ceec:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** MPU FAULT *****\n");
 800ceee:	481c      	ldr	r0, [pc, #112]	; (800cf60 <MpuFault.isra.2+0x78>)
 800cef0:	f001 fabe 	bl	800e470 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 800cef4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800cef6:	06d1      	lsls	r1, r2, #27
 800cef8:	d502      	bpl.n	800cf00 <MpuFault.isra.2+0x18>
		PR_FAULT_INFO("  Stacking error (context area might be"
 800cefa:	481a      	ldr	r0, [pc, #104]	; (800cf64 <MpuFault.isra.2+0x7c>)
 800cefc:	f001 fab8 	bl	800e470 <printk>
			" not valid)\n");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 800cf00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cf02:	071a      	lsls	r2, r3, #28
 800cf04:	d502      	bpl.n	800cf0c <MpuFault.isra.2+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
 800cf06:	4818      	ldr	r0, [pc, #96]	; (800cf68 <MpuFault.isra.2+0x80>)
 800cf08:	f001 fab2 	bl	800e470 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 800cf0c:	4c13      	ldr	r4, [pc, #76]	; (800cf5c <MpuFault.isra.2+0x74>)
 800cf0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cf10:	079b      	lsls	r3, r3, #30
 800cf12:	d50e      	bpl.n	800cf32 <MpuFault.isra.2+0x4a>
		PR_FAULT_INFO("  Data Access Violation\n");
 800cf14:	4815      	ldr	r0, [pc, #84]	; (800cf6c <MpuFault.isra.2+0x84>)
 800cf16:	f001 faab 	bl	800e470 <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
 800cf1a:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 800cf1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cf1e:	0618      	lsls	r0, r3, #24
 800cf20:	d507      	bpl.n	800cf32 <MpuFault.isra.2+0x4a>
			PR_EXC("  MMFAR Address: 0x%x\n", mmfar);
 800cf22:	4813      	ldr	r0, [pc, #76]	; (800cf70 <MpuFault.isra.2+0x88>)
 800cf24:	f001 faa4 	bl	800e470 <printk>
			if (fromHardFault) {
 800cf28:	b11d      	cbz	r5, 800cf32 <MpuFault.isra.2+0x4a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 800cf2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cf2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf30:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 800cf32:	4c0a      	ldr	r4, [pc, #40]	; (800cf5c <MpuFault.isra.2+0x74>)
 800cf34:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800cf36:	07d2      	lsls	r2, r2, #31
 800cf38:	d502      	bpl.n	800cf40 <MpuFault.isra.2+0x58>
		PR_FAULT_INFO("  Instruction Access Violation\n");
 800cf3a:	480e      	ldr	r0, [pc, #56]	; (800cf74 <MpuFault.isra.2+0x8c>)
 800cf3c:	f001 fa98 	bl	800e470 <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 800cf40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cf42:	069b      	lsls	r3, r3, #26
 800cf44:	d502      	bpl.n	800cf4c <MpuFault.isra.2+0x64>
		PR_FAULT_INFO(
 800cf46:	480c      	ldr	r0, [pc, #48]	; (800cf78 <MpuFault.isra.2+0x90>)
 800cf48:	f001 fa92 	bl	800e470 <printk>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
 800cf4c:	4b03      	ldr	r3, [pc, #12]	; (800cf5c <MpuFault.isra.2+0x74>)
	if (MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
 800cf4e:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
 800cf50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 800cf52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf54:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 800cf58:	629a      	str	r2, [r3, #40]	; 0x28
}
 800cf5a:	bd38      	pop	{r3, r4, r5, pc}
 800cf5c:	e000ed00 	.word	0xe000ed00
 800cf60:	0801c9ce 	.word	0x0801c9ce
 800cf64:	0801c9e5 	.word	0x0801c9e5
 800cf68:	0801ca19 	.word	0x0801ca19
 800cf6c:	0801ca2d 	.word	0x0801ca2d
 800cf70:	0801ca46 	.word	0x0801ca46
 800cf74:	0801ca5d 	.word	0x0801ca5d
 800cf78:	0801ca7d 	.word	0x0801ca7d

0800cf7c <BusFault.isra.3>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int BusFault(NANO_ESF *esf, int fromHardFault)
 800cf7c:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 800cf7e:	4c1e      	ldr	r4, [pc, #120]	; (800cff8 <BusFault.isra.3+0x7c>)
static int BusFault(NANO_ESF *esf, int fromHardFault)
 800cf80:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** BUS FAULT *****\n");
 800cf82:	481e      	ldr	r0, [pc, #120]	; (800cffc <BusFault.isra.3+0x80>)
 800cf84:	f001 fa74 	bl	800e470 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 800cf88:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800cf8a:	04d1      	lsls	r1, r2, #19
 800cf8c:	d502      	bpl.n	800cf94 <BusFault.isra.3+0x18>
		PR_FAULT_INFO("  Stacking error\n");
 800cf8e:	481c      	ldr	r0, [pc, #112]	; (800d000 <BusFault.isra.3+0x84>)
 800cf90:	f001 fa6e 	bl	800e470 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 800cf94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cf96:	051a      	lsls	r2, r3, #20
 800cf98:	d502      	bpl.n	800cfa0 <BusFault.isra.3+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
 800cf9a:	481a      	ldr	r0, [pc, #104]	; (800d004 <BusFault.isra.3+0x88>)
 800cf9c:	f001 fa68 	bl	800e470 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 800cfa0:	4c15      	ldr	r4, [pc, #84]	; (800cff8 <BusFault.isra.3+0x7c>)
 800cfa2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cfa4:	059b      	lsls	r3, r3, #22
 800cfa6:	d50e      	bpl.n	800cfc6 <BusFault.isra.3+0x4a>
		PR_FAULT_INFO("  Precise data bus error\n");
 800cfa8:	4817      	ldr	r0, [pc, #92]	; (800d008 <BusFault.isra.3+0x8c>)
 800cfaa:	f001 fa61 	bl	800e470 <printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 800cfae:	6ba1      	ldr	r1, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 800cfb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cfb2:	0418      	lsls	r0, r3, #16
 800cfb4:	d507      	bpl.n	800cfc6 <BusFault.isra.3+0x4a>
			PR_EXC("  BFAR Address: 0x%x\n", bfar);
 800cfb6:	4815      	ldr	r0, [pc, #84]	; (800d00c <BusFault.isra.3+0x90>)
 800cfb8:	f001 fa5a 	bl	800e470 <printk>
			if (fromHardFault) {
 800cfbc:	b11d      	cbz	r5, 800cfc6 <BusFault.isra.3+0x4a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 800cfbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cfc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cfc4:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 800cfc6:	4c0c      	ldr	r4, [pc, #48]	; (800cff8 <BusFault.isra.3+0x7c>)
 800cfc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cfca:	0559      	lsls	r1, r3, #21
 800cfcc:	d502      	bpl.n	800cfd4 <BusFault.isra.3+0x58>
		PR_FAULT_INFO("  Imprecise data bus error\n");
 800cfce:	4810      	ldr	r0, [pc, #64]	; (800d010 <BusFault.isra.3+0x94>)
 800cfd0:	f001 fa4e 	bl	800e470 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 800cfd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cfd6:	05da      	lsls	r2, r3, #23
 800cfd8:	d509      	bpl.n	800cfee <BusFault.isra.3+0x72>
		PR_FAULT_INFO("  Instruction bus error\n");
 800cfda:	480e      	ldr	r0, [pc, #56]	; (800d014 <BusFault.isra.3+0x98>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
 800cfdc:	f001 fa48 	bl	800e470 <printk>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800cfe0:	4a05      	ldr	r2, [pc, #20]	; (800cff8 <BusFault.isra.3+0x7c>)
	if (MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
 800cfe2:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800cfe4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800cfe6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800cfea:	6293      	str	r3, [r2, #40]	; 0x28
}
 800cfec:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 800cfee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cff0:	049b      	lsls	r3, r3, #18
 800cff2:	d5f5      	bpl.n	800cfe0 <BusFault.isra.3+0x64>
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
 800cff4:	4808      	ldr	r0, [pc, #32]	; (800d018 <BusFault.isra.3+0x9c>)
 800cff6:	e7f1      	b.n	800cfdc <BusFault.isra.3+0x60>
 800cff8:	e000ed00 	.word	0xe000ed00
 800cffc:	0801c940 	.word	0x0801c940
 800d000:	0801c957 	.word	0x0801c957
 800d004:	0801ca19 	.word	0x0801ca19
 800d008:	0801c969 	.word	0x0801c969
 800d00c:	0801c983 	.word	0x0801c983
 800d010:	0801c999 	.word	0x0801c999
 800d014:	0801c9b5 	.word	0x0801c9b5
 800d018:	0801ca7d 	.word	0x0801ca7d

0800d01c <UsageFault.isra.4>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t UsageFault(const NANO_ESF *esf)
 800d01c:	b510      	push	{r4, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****\n");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 800d01e:	4c19      	ldr	r4, [pc, #100]	; (800d084 <UsageFault.isra.4+0x68>)
	PR_FAULT_INFO("***** USAGE FAULT *****\n");
 800d020:	4819      	ldr	r0, [pc, #100]	; (800d088 <UsageFault.isra.4+0x6c>)
 800d022:	f001 fa25 	bl	800e470 <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 800d026:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d028:	0193      	lsls	r3, r2, #6
 800d02a:	d502      	bpl.n	800d032 <UsageFault.isra.4+0x16>
		PR_FAULT_INFO("  Division by zero\n");
 800d02c:	4817      	ldr	r0, [pc, #92]	; (800d08c <UsageFault.isra.4+0x70>)
 800d02e:	f001 fa1f 	bl	800e470 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 800d032:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d034:	01dc      	lsls	r4, r3, #7
 800d036:	d502      	bpl.n	800d03e <UsageFault.isra.4+0x22>
		PR_FAULT_INFO("  Unaligned memory access\n");
 800d038:	4815      	ldr	r0, [pc, #84]	; (800d090 <UsageFault.isra.4+0x74>)
 800d03a:	f001 fa19 	bl	800e470 <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 800d03e:	4c11      	ldr	r4, [pc, #68]	; (800d084 <UsageFault.isra.4+0x68>)
 800d040:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d042:	0310      	lsls	r0, r2, #12
 800d044:	d502      	bpl.n	800d04c <UsageFault.isra.4+0x30>
		PR_FAULT_INFO("  No coprocessor instructions\n");
 800d046:	4813      	ldr	r0, [pc, #76]	; (800d094 <UsageFault.isra.4+0x78>)
 800d048:	f001 fa12 	bl	800e470 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 800d04c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d04e:	0359      	lsls	r1, r3, #13
 800d050:	d502      	bpl.n	800d058 <UsageFault.isra.4+0x3c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
 800d052:	4811      	ldr	r0, [pc, #68]	; (800d098 <UsageFault.isra.4+0x7c>)
 800d054:	f001 fa0c 	bl	800e470 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 800d058:	4c0a      	ldr	r4, [pc, #40]	; (800d084 <UsageFault.isra.4+0x68>)
 800d05a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d05c:	0392      	lsls	r2, r2, #14
 800d05e:	d502      	bpl.n	800d066 <UsageFault.isra.4+0x4a>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
 800d060:	480e      	ldr	r0, [pc, #56]	; (800d09c <UsageFault.isra.4+0x80>)
 800d062:	f001 fa05 	bl	800e470 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 800d066:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d068:	03db      	lsls	r3, r3, #15
 800d06a:	d502      	bpl.n	800d072 <UsageFault.isra.4+0x56>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
 800d06c:	480c      	ldr	r0, [pc, #48]	; (800d0a0 <UsageFault.isra.4+0x84>)
 800d06e:	f001 f9ff 	bl	800e470 <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 800d072:	4a04      	ldr	r2, [pc, #16]	; (800d084 <UsageFault.isra.4+0x68>)

	return reason;
}
 800d074:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 800d076:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800d078:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 800d07c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800d080:	6293      	str	r3, [r2, #40]	; 0x28
}
 800d082:	bd10      	pop	{r4, pc}
 800d084:	e000ed00 	.word	0xe000ed00
 800d088:	0801caad 	.word	0x0801caad
 800d08c:	0801cac6 	.word	0x0801cac6
 800d090:	0801cada 	.word	0x0801cada
 800d094:	0801caf5 	.word	0x0801caf5
 800d098:	0801cb14 	.word	0x0801cb14
 800d09c:	0801cb3a 	.word	0x0801cb3a
 800d0a0:	0801cb55 	.word	0x0801cb55

0800d0a4 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(NANO_ESF *esf, u32_t exc_return)
{
 800d0a4:	b570      	push	{r4, r5, r6, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800d0a6:	4d28      	ldr	r5, [pc, #160]	; (800d148 <_Fault+0xa4>)
{
 800d0a8:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800d0aa:	686b      	ldr	r3, [r5, #4]
 800d0ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
	switch (fault) {
 800d0b0:	1ed1      	subs	r1, r2, #3
 800d0b2:	2909      	cmp	r1, #9
 800d0b4:	d83b      	bhi.n	800d12e <_Fault+0x8a>
 800d0b6:	e8df f001 	tbb	[pc, r1]
 800d0ba:	3405      	.short	0x3405
 800d0bc:	3a3a2936 	.word	0x3a3a2936
 800d0c0:	383a3a3a 	.word	0x383a3a3a
	PR_FAULT_INFO("***** HARD FAULT *****\n");
 800d0c4:	4821      	ldr	r0, [pc, #132]	; (800d14c <_Fault+0xa8>)
 800d0c6:	f001 f9d3 	bl	800e470 <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800d0ca:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 800d0cc:	f014 0402 	ands.w	r4, r4, #2
 800d0d0:	d004      	beq.n	800d0dc <_Fault+0x38>
		PR_EXC("  Bus fault on vector table read\n");
 800d0d2:	481f      	ldr	r0, [pc, #124]	; (800d150 <_Fault+0xac>)
	PR_FAULT_INFO(
 800d0d4:	f001 f9cc 	bl	800e470 <printk>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
 800d0d8:	2400      	movs	r4, #0
 800d0da:	e01c      	b.n	800d116 <_Fault+0x72>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 800d0dc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d0de:	005b      	lsls	r3, r3, #1
 800d0e0:	d519      	bpl.n	800d116 <_Fault+0x72>
		PR_EXC("  Fault escalation (see below)\n");
 800d0e2:	481c      	ldr	r0, [pc, #112]	; (800d154 <_Fault+0xb0>)
 800d0e4:	f001 f9c4 	bl	800e470 <printk>
		if (SCB_MMFSR != 0) {
 800d0e8:	4b1b      	ldr	r3, [pc, #108]	; (800d158 <_Fault+0xb4>)
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	b11b      	cbz	r3, 800d0f6 <_Fault+0x52>
			reason = MpuFault(esf, 1);
 800d0ee:	2001      	movs	r0, #1
		reason = MpuFault(esf, 0);
 800d0f0:	f7ff fefa 	bl	800cee8 <MpuFault.isra.2>
 800d0f4:	e00c      	b.n	800d110 <_Fault+0x6c>
		} else if (SCB_BFSR != 0) {
 800d0f6:	4b19      	ldr	r3, [pc, #100]	; (800d15c <_Fault+0xb8>)
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	b11b      	cbz	r3, 800d104 <_Fault+0x60>
			reason = BusFault(esf, 1);
 800d0fc:	2001      	movs	r0, #1
		reason = BusFault(esf, 0);
 800d0fe:	f7ff ff3d 	bl	800cf7c <BusFault.isra.3>
 800d102:	e005      	b.n	800d110 <_Fault+0x6c>
		} else if (SCB_UFSR != 0) {
 800d104:	4b16      	ldr	r3, [pc, #88]	; (800d160 <_Fault+0xbc>)
 800d106:	881b      	ldrh	r3, [r3, #0]
 800d108:	b29b      	uxth	r3, r3
 800d10a:	b123      	cbz	r3, 800d116 <_Fault+0x72>
			reason = UsageFault(esf);
 800d10c:	f7ff ff86 	bl	800d01c <UsageFault.isra.4>
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = FaultHandle(esf, fault);

	if (reason == _NANO_ERR_RECOVERABLE) {
 800d110:	2806      	cmp	r0, #6
			reason = UsageFault(esf);
 800d112:	4604      	mov	r4, r0
	if (reason == _NANO_ERR_RECOVERABLE) {
 800d114:	d017      	beq.n	800d146 <_Fault+0xa2>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_NanoFatalErrorHandler(reason, esf);
 800d116:	4631      	mov	r1, r6
 800d118:	4620      	mov	r0, r4
}
 800d11a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_NanoFatalErrorHandler(reason, esf);
 800d11e:	f000 b89b 	b.w	800d258 <z_NanoFatalErrorHandler>
		reason = MpuFault(esf, 0);
 800d122:	2000      	movs	r0, #0
 800d124:	e7e4      	b.n	800d0f0 <_Fault+0x4c>
		reason = BusFault(esf, 0);
 800d126:	2000      	movs	r0, #0
 800d128:	e7e9      	b.n	800d0fe <_Fault+0x5a>
	PR_FAULT_INFO(
 800d12a:	480e      	ldr	r0, [pc, #56]	; (800d164 <_Fault+0xc0>)
 800d12c:	e7d2      	b.n	800d0d4 <_Fault+0x30>
	PR_FAULT_INFO("***** %s %d) *****\n",
 800d12e:	f413 7ff8 	tst.w	r3, #496	; 0x1f0
 800d132:	4b0d      	ldr	r3, [pc, #52]	; (800d168 <_Fault+0xc4>)
 800d134:	490d      	ldr	r1, [pc, #52]	; (800d16c <_Fault+0xc8>)
 800d136:	f1a2 0210 	sub.w	r2, r2, #16
 800d13a:	bf18      	it	ne
 800d13c:	4619      	movne	r1, r3
 800d13e:	480c      	ldr	r0, [pc, #48]	; (800d170 <_Fault+0xcc>)
 800d140:	f001 f996 	bl	800e470 <printk>
	if (reason == _NANO_ERR_RECOVERABLE) {
 800d144:	e7c8      	b.n	800d0d8 <_Fault+0x34>
}
 800d146:	bd70      	pop	{r4, r5, r6, pc}
 800d148:	e000ed00 	.word	0xe000ed00
 800d14c:	0801cbaf 	.word	0x0801cbaf
 800d150:	0801cbc7 	.word	0x0801cbc7
 800d154:	0801cbe9 	.word	0x0801cbe9
 800d158:	e000ed28 	.word	0xe000ed28
 800d15c:	e000ed29 	.word	0xe000ed29
 800d160:	e000ed2a 	.word	0xe000ed2a
 800d164:	0801cc09 	.word	0x0801cc09
 800d168:	0801cb96 	.word	0x0801cb96
 800d16c:	0801cb81 	.word	0x0801cb81
 800d170:	0801cc40 	.word	0x0801cc40

0800d174 <z_FaultInit>:
 */
void z_FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 800d174:	4a02      	ldr	r2, [pc, #8]	; (800d180 <z_FaultInit+0xc>)
 800d176:	6953      	ldr	r3, [r2, #20]
 800d178:	f043 0310 	orr.w	r3, r3, #16
 800d17c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 800d17e:	4770      	bx	lr
 800d180:	e000ed00 	.word	0xe000ed00

0800d184 <z_arch_irq_enable>:
 *
 * @return N/A
 */
void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 800d184:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 800d186:	2b00      	cmp	r3, #0
 800d188:	db08      	blt.n	800d19c <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d18a:	2201      	movs	r2, #1
 800d18c:	f000 001f 	and.w	r0, r0, #31
 800d190:	095b      	lsrs	r3, r3, #5
 800d192:	fa02 f000 	lsl.w	r0, r2, r0
 800d196:	4a02      	ldr	r2, [pc, #8]	; (800d1a0 <z_arch_irq_enable+0x1c>)
 800d198:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 800d19c:	4770      	bx	lr
 800d19e:	bf00      	nop
 800d1a0:	e000e100 	.word	0xe000e100

0800d1a4 <z_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 800d1a4:	b243      	sxtb	r3, r0
	prio += _IRQ_PRIO_OFFSET;
 800d1a6:	3101      	adds	r1, #1
  if ((int32_t)(IRQn) >= 0)
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	ea4f 1101 	mov.w	r1, r1, lsl #4
 800d1ae:	b2c9      	uxtb	r1, r1
 800d1b0:	db06      	blt.n	800d1c0 <z_irq_priority_set+0x1c>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d1b2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800d1b6:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800d1ba:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 800d1be:	4770      	bx	lr
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d1c0:	f000 000f 	and.w	r0, r0, #15
 800d1c4:	4b01      	ldr	r3, [pc, #4]	; (800d1cc <z_irq_priority_set+0x28>)
 800d1c6:	5419      	strb	r1, [r3, r0]
}
 800d1c8:	4770      	bx	lr
 800d1ca:	bf00      	nop
 800d1cc:	e000ed14 	.word	0xe000ed14

0800d1d0 <z_new_thread>:

void z_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
 800d1d0:	b570      	push	{r4, r5, r6, lr}
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
 800d1d2:	188c      	adds	r4, r1, r2
{
 800d1d4:	461e      	mov	r6, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
 800d1d6:	2204      	movs	r2, #4
 800d1d8:	9b08      	ldr	r3, [sp, #32]
 800d1da:	9907      	ldr	r1, [sp, #28]
 800d1dc:	4605      	mov	r5, r0
 800d1de:	f009 fd80 	bl	8016ce2 <z_init_thread_base>
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
 800d1e2:	f1a4 0320 	sub.w	r3, r4, #32
#else
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
 800d1e6:	490b      	ldr	r1, [pc, #44]	; (800d214 <z_new_thread+0x44>)

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
 800d1e8:	2200      	movs	r2, #0
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
 800d1ea:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
 800d1ee:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
 800d1f2:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
 800d1f6:	6199      	str	r1, [r3, #24]

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
 800d1f8:	9904      	ldr	r1, [sp, #16]
	pInitCtx->basic.a1 = (u32_t)pEntry;
 800d1fa:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
 800d1fc:	6059      	str	r1, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
 800d1fe:	9905      	ldr	r1, [sp, #20]
 800d200:	6099      	str	r1, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
 800d202:	9906      	ldr	r1, [sp, #24]
 800d204:	60d9      	str	r1, [r3, #12]
	pInitCtx->basic.xpsr =
 800d206:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800d20a:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
 800d20c:	64ab      	str	r3, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
 800d20e:	65ea      	str	r2, [r5, #92]	; 0x5c

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 800d210:	bd70      	pop	{r4, r5, r6, pc}
 800d212:	bf00      	nop
 800d214:	0800e15d 	.word	0x0800e15d

0800d218 <z_CpuIdleInit>:
 *
 * void z_CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, z_CpuIdleInit)
	ldr r1, =_SCB_SCR
 800d218:	4901      	ldr	r1, [pc, #4]	; (800d220 <z_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
 800d21a:	2210      	movs	r2, #16
	str r2, [r1]
 800d21c:	600a      	str	r2, [r1, #0]
	bx lr
 800d21e:	4770      	bx	lr
	ldr r1, =_SCB_SCR
 800d220:	e000ed10 	.word	0xe000ed10

0800d224 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
 800d224:	4040      	eors	r0, r0
	msr BASEPRI, r0
 800d226:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
 800d22a:	bf30      	wfi

	bx lr
 800d22c:	4770      	bx	lr
 800d22e:	bf00      	nop

0800d230 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
 800d230:	4040      	eors	r0, r0
	msr BASEPRI, r0
 800d232:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE) && \
	!defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
 800d236:	f8df c01c 	ldr.w	ip, [pc, #28]	; 800d254 <__bus_fault+0x24>
	ldr ip, [ip]
 800d23a:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
 800d23e:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
 800d242:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
 800d244:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
 800d248:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
 800d24c:	b501      	push	{r0, lr}
	bl _Fault
 800d24e:	f7ff ff29 	bl	800d0a4 <_Fault>

	pop {r0, pc}
 800d252:	bd01      	pop	{r0, pc}
	ldr ip, =_SCS_ICSR
 800d254:	e000ed04 	.word	0xe000ed04

0800d258 <z_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void z_NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
 800d258:	b538      	push	{r3, r4, r5, lr}
 800d25a:	4604      	mov	r4, r0
 800d25c:	460d      	mov	r5, r1
	const char *thread_name = k_thread_name_get(k_current_get());
#endif

	LOG_PANIC();

	switch (reason) {
 800d25e:	2805      	cmp	r0, #5
 800d260:	d81a      	bhi.n	800d298 <z_NanoFatalErrorHandler+0x40>
 800d262:	e8df f000 	tbb	[pc, r0]
 800d266:	1903      	.short	0x1903
 800d268:	17151319 	.word	0x17151319
	case _NANO_ERR_HW_EXCEPTION:
		printk("***** Hardware exception *****\n");
 800d26c:	480d      	ldr	r0, [pc, #52]	; (800d2a4 <z_NanoFatalErrorHandler+0x4c>)
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
 800d26e:	f001 f8ff 	bl	800e470 <printk>

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
 800d272:	f000 fd4f 	bl	800dd14 <z_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p"
 800d276:	69aa      	ldr	r2, [r5, #24]
 800d278:	4601      	mov	r1, r0
 800d27a:	480b      	ldr	r0, [pc, #44]	; (800d2a8 <z_NanoFatalErrorHandler+0x50>)
 800d27c:	f001 f8f8 	bl	800e470 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	z_SysFatalErrorHandler(reason, pEsf);
 800d280:	4629      	mov	r1, r5
 800d282:	4620      	mov	r0, r4
}
 800d284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_SysFatalErrorHandler(reason, pEsf);
 800d288:	f000 b818 	b.w	800d2bc <z_SysFatalErrorHandler>
		printk("**** Kernel Allocation Failure! ****\n");
 800d28c:	4807      	ldr	r0, [pc, #28]	; (800d2ac <z_NanoFatalErrorHandler+0x54>)
 800d28e:	e7ee      	b.n	800d26e <z_NanoFatalErrorHandler+0x16>
		printk("***** Kernel OOPS! *****\n");
 800d290:	4807      	ldr	r0, [pc, #28]	; (800d2b0 <z_NanoFatalErrorHandler+0x58>)
 800d292:	e7ec      	b.n	800d26e <z_NanoFatalErrorHandler+0x16>
		printk("***** Kernel Panic! *****\n");
 800d294:	4807      	ldr	r0, [pc, #28]	; (800d2b4 <z_NanoFatalErrorHandler+0x5c>)
 800d296:	e7ea      	b.n	800d26e <z_NanoFatalErrorHandler+0x16>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
 800d298:	4601      	mov	r1, r0
 800d29a:	4807      	ldr	r0, [pc, #28]	; (800d2b8 <z_NanoFatalErrorHandler+0x60>)
 800d29c:	f001 f8e8 	bl	800e470 <printk>
		break;
 800d2a0:	e7e7      	b.n	800d272 <z_NanoFatalErrorHandler+0x1a>
 800d2a2:	bf00      	nop
 800d2a4:	0801cc54 	.word	0x0801cc54
 800d2a8:	0801ccf2 	.word	0x0801ccf2
 800d2ac:	0801cc74 	.word	0x0801cc74
 800d2b0:	0801cc9a 	.word	0x0801cc9a
 800d2b4:	0801ccb4 	.word	0x0801ccb4
 800d2b8:	0801cccf 	.word	0x0801cccf

0800d2bc <z_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
 800d2bc:	2805      	cmp	r0, #5
{
 800d2be:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
 800d2c0:	d00c      	beq.n	800d2dc <z_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || z_is_thread_essential()) {
 800d2c2:	f000 fd2d 	bl	800dd20 <k_is_in_isr>
 800d2c6:	b160      	cbz	r0, 800d2e2 <z_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
 800d2c8:	f000 fd2a 	bl	800dd20 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
 800d2cc:	490c      	ldr	r1, [pc, #48]	; (800d300 <z_SysFatalErrorHandler+0x44>)
 800d2ce:	4b0d      	ldr	r3, [pc, #52]	; (800d304 <z_SysFatalErrorHandler+0x48>)
 800d2d0:	2800      	cmp	r0, #0
 800d2d2:	bf08      	it	eq
 800d2d4:	4619      	moveq	r1, r3
 800d2d6:	480c      	ldr	r0, [pc, #48]	; (800d308 <z_SysFatalErrorHandler+0x4c>)
 800d2d8:	f001 f8ca 	bl	800e470 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
 800d2dc:	f7ff ffa2 	bl	800d224 <k_cpu_idle>
 800d2e0:	e7fc      	b.n	800d2dc <z_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || z_is_thread_essential()) {
 800d2e2:	f000 fd2d 	bl	800dd40 <z_is_thread_essential>
 800d2e6:	2800      	cmp	r0, #0
 800d2e8:	d1ee      	bne.n	800d2c8 <z_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
 800d2ea:	4c08      	ldr	r4, [pc, #32]	; (800d30c <z_SysFatalErrorHandler+0x50>)
 800d2ec:	4808      	ldr	r0, [pc, #32]	; (800d310 <z_SysFatalErrorHandler+0x54>)
 800d2ee:	68a1      	ldr	r1, [r4, #8]
 800d2f0:	f001 f8be 	bl	800e470 <printk>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
 800d2f4:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
 800d2f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2fa:	f000 b80b 	b.w	800d314 <z_impl_k_thread_abort>
 800d2fe:	bf00      	nop
 800d300:	0801cd2e 	.word	0x0801cd2e
 800d304:	0801cd32 	.word	0x0801cd32
 800d308:	0801cd43 	.word	0x0801cd43
 800d30c:	20028e14 	.word	0x20028e14
 800d310:	0801cd63 	.word	0x0801cd63

0800d314 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
 800d314:	b538      	push	{r3, r4, r5, lr}
 800d316:	4605      	mov	r5, r0
	__asm__ volatile(
 800d318:	f04f 0310 	mov.w	r3, #16
 800d31c:	f3ef 8411 	mrs	r4, BASEPRI
 800d320:	f383 8811 	msr	BASEPRI, r3
 800d324:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
 800d328:	f009 fcbc 	bl	8016ca4 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
 800d32c:	4b0a      	ldr	r3, [pc, #40]	; (800d358 <z_impl_k_thread_abort+0x44>)
 800d32e:	689b      	ldr	r3, [r3, #8]
 800d330:	42ab      	cmp	r3, r5
 800d332:	d10b      	bne.n	800d34c <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
 800d334:	4b09      	ldr	r3, [pc, #36]	; (800d35c <z_impl_k_thread_abort+0x48>)
 800d336:	685a      	ldr	r2, [r3, #4]
 800d338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d33c:	b912      	cbnz	r2, 800d344 <z_impl_k_thread_abort+0x30>
#ifndef CONFIG_ARM
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_out();
#endif
#endif
	ret = __swap(key);
 800d33e:	4620      	mov	r0, r4
 800d340:	f7ff fd82 	bl	800ce48 <__swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800d344:	685a      	ldr	r2, [r3, #4]
 800d346:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d34a:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
 800d34c:	4620      	mov	r0, r4
}
 800d34e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
 800d352:	f009 bc3a 	b.w	8016bca <z_reschedule_irqlock>
 800d356:	bf00      	nop
 800d358:	20028e14 	.word	0x20028e14
 800d35c:	e000ed00 	.word	0xe000ed00

0800d360 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {r0,lr}		/* r0, lr are now the first items on the stack */
 800d360:	b501      	push	{r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
#endif

	mrs r0, IPSR	/* get exception number */
 800d362:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 800d366:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 800d36a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
 800d36e:	4904      	ldr	r1, [pc, #16]	; (800d380 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 800d370:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 800d372:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
 800d374:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 800d376:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * _IntExit() */
	ldr r0, =_IntExit
 800d37a:	4802      	ldr	r0, [pc, #8]	; (800d384 <_isr_wrapper+0x24>)
	bx r0
 800d37c:	4700      	bx	r0
 800d37e:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 800d380:	08016dc8 	.word	0x08016dc8
	ldr r0, =_IntExit
 800d384:	0800ce15 	.word	0x0800ce15

0800d388 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 800d388:	2010      	movs	r0, #16
    msr BASEPRI, r0
 800d38a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
 800d38e:	4808      	ldr	r0, [pc, #32]	; (800d3b0 <__reset+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
 800d390:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 800d394:	1840      	adds	r0, r0, r1
    msr PSP, r0
 800d396:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 800d39a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 800d39e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 800d3a0:	4308      	orrs	r0, r1
    msr CONTROL, r0
 800d3a2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 800d3a6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
 800d3aa:	f000 f807 	bl	800d3bc <_PrepC>
 800d3ae:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
 800d3b0:	2002d228 	.word	0x2002d228

0800d3b4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 800d3b4:	bf30      	wfi
    b z_SysNmiOnReset
 800d3b6:	f7ff bffd 	b.w	800d3b4 <z_SysNmiOnReset>
 800d3ba:	bf00      	nop

0800d3bc <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
 800d3bc:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 800d3be:	4b08      	ldr	r3, [pc, #32]	; (800d3e0 <_PrepC+0x24>)
 800d3c0:	4a08      	ldr	r2, [pc, #32]	; (800d3e4 <_PrepC+0x28>)
 800d3c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d3c6:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 800d3c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d3cc:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
 800d3d0:	f000 f9da 	bl	800d788 <z_bss_zero>
	z_data_copy();
 800d3d4:	f000 f9e2 	bl	800d79c <z_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0U;
#endif
	z_IntLibInit();
 800d3d8:	f7ff fd2a 	bl	800ce30 <z_IntLibInit>
	z_cstart();
 800d3dc:	f000 fa10 	bl	800d800 <z_cstart>
 800d3e0:	08000000 	.word	0x08000000
 800d3e4:	e000ed00 	.word	0xe000ed00

0800d3e8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 800d3e8:	4b01      	ldr	r3, [pc, #4]	; (800d3f0 <__stdout_hook_install+0x8>)
 800d3ea:	6018      	str	r0, [r3, #0]
}
 800d3ec:	4770      	bx	lr
 800d3ee:	bf00      	nop
 800d3f0:	2002e168 	.word	0x2002e168

0800d3f4 <pinmux_stm32_init>:
	{STM32_PIN_PG14, STM32F7_PINMUX_FUNC_PG14_ETH},
#endif /* CONFIG_ETH_STM32_HAL */
};

static int pinmux_stm32_init(struct device *port)
{
 800d3f4:	b508      	push	{r3, lr}
	ARG_UNUSED(port);

	stm32_setup_pins(pinconf, ARRAY_SIZE(pinconf));
 800d3f6:	2104      	movs	r1, #4
 800d3f8:	4802      	ldr	r0, [pc, #8]	; (800d404 <pinmux_stm32_init+0x10>)
 800d3fa:	f7f3 fac1 	bl	8000980 <stm32_setup_pins>

	return 0;
}
 800d3fe:	2000      	movs	r0, #0
 800d400:	bd08      	pop	{r3, pc}
 800d402:	bf00      	nop
 800d404:	080172d0 	.word	0x080172d0

0800d408 <gpio_stm32_init>:
 *
 * @return 0
 */
static int gpio_stm32_init(struct device *device)
{
	const struct gpio_stm32_config *cfg = device->config->config_info;
 800d408:	6803      	ldr	r3, [r0, #0]
 800d40a:	4807      	ldr	r0, [pc, #28]	; (800d428 <gpio_stm32_init+0x20>)
{
 800d40c:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = device->config->config_info;
 800d40e:	689c      	ldr	r4, [r3, #8]
 800d410:	f000 f994 	bl	800d73c <z_impl_device_get_binding>
 800d414:	6843      	ldr	r3, [r0, #4]
 800d416:	f104 0108 	add.w	r1, r4, #8
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	4798      	blx	r3

	/* enable clock for subsystem */
	struct device *clk =
		device_get_binding(STM32_CLOCK_CONTROL_NAME);

	if (clock_control_on(clk,
 800d41e:	2800      	cmp	r0, #0
		}
	}
#endif  /* PWR_CR2_IOSV */

	return 0;
}
 800d420:	bf18      	it	ne
 800d422:	f06f 0004 	mvnne.w	r0, #4
 800d426:	bd10      	pop	{r4, pc}
 800d428:	08017534 	.word	0x08017534

0800d42c <gpio_stm32_enable_int>:
{
 800d42c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d42e:	4605      	mov	r5, r0
 800d430:	481c      	ldr	r0, [pc, #112]	; (800d4a4 <gpio_stm32_enable_int+0x78>)
 800d432:	460c      	mov	r4, r1
 800d434:	f000 f982 	bl	800d73c <z_impl_device_get_binding>
	struct stm32_pclken pclken = {
 800d438:	491b      	ldr	r1, [pc, #108]	; (800d4a8 <gpio_stm32_enable_int+0x7c>)
 800d43a:	4602      	mov	r2, r0
 800d43c:	466b      	mov	r3, sp
 800d43e:	c903      	ldmia	r1, {r0, r1}
 800d440:	e883 0003 	stmia.w	r3, {r0, r1}
 800d444:	6851      	ldr	r1, [r2, #4]
 800d446:	4610      	mov	r0, r2
 800d448:	680e      	ldr	r6, [r1, #0]
 800d44a:	4619      	mov	r1, r3
 800d44c:	47b0      	blx	r6
	if (pin > 15) {
 800d44e:	2c0f      	cmp	r4, #15
 800d450:	dc25      	bgt.n	800d49e <gpio_stm32_enable_int+0x72>
	line = (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800d452:	4263      	negs	r3, r4
 800d454:	f004 0103 	and.w	r1, r4, #3
 800d458:	f003 0303 	and.w	r3, r3, #3
 800d45c:	bf58      	it	pl
 800d45e:	4259      	negpl	r1, r3
 800d460:	2c00      	cmp	r4, #0
 800d462:	f101 0104 	add.w	r1, r1, #4
 800d466:	bfb8      	it	lt
 800d468:	3403      	addlt	r4, #3
 800d46a:	008b      	lsls	r3, r1, #2
 800d46c:	210f      	movs	r1, #15
 800d46e:	4099      	lsls	r1, r3
 800d470:	ea41 01a4 	orr.w	r1, r1, r4, asr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800d474:	b2cb      	uxtb	r3, r1
 800d476:	0c09      	lsrs	r1, r1, #16
 800d478:	009b      	lsls	r3, r3, #2
 800d47a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d47e:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800d482:	689a      	ldr	r2, [r3, #8]
 800d484:	ea22 0201 	bic.w	r2, r2, r1
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d488:	fa91 f1a1 	rbit	r1, r1
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 800d48c:	fab1 f181 	clz	r1, r1
	return 0;
 800d490:	2000      	movs	r0, #0
 800d492:	fa05 f101 	lsl.w	r1, r5, r1
 800d496:	4311      	orrs	r1, r2
 800d498:	6099      	str	r1, [r3, #8]
}
 800d49a:	b002      	add	sp, #8
 800d49c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
 800d49e:	f06f 0015 	mvn.w	r0, #21
 800d4a2:	e7fa      	b.n	800d49a <gpio_stm32_enable_int+0x6e>
 800d4a4:	08017534 	.word	0x08017534
 800d4a8:	08017228 	.word	0x08017228

0800d4ac <gpio_stm32_config>:
{
 800d4ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d4b0:	461d      	mov	r5, r3
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 800d4b2:	6803      	ldr	r3, [r0, #0]
{
 800d4b4:	4680      	mov	r8, r0
 800d4b6:	4616      	mov	r6, r2
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 800d4b8:	689f      	ldr	r7, [r3, #8]
	if ((flags & GPIO_POL_MASK) == GPIO_POL_INV) {
 800d4ba:	f005 0380 	and.w	r3, r5, #128	; 0x80
 800d4be:	430b      	orrs	r3, r1
 800d4c0:	d005      	beq.n	800d4ce <gpio_stm32_config+0x22>
		return -ENOTSUP;
 800d4c2:	f06f 0422 	mvn.w	r4, #34	; 0x22
}
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	b002      	add	sp, #8
 800d4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	map_res = gpio_stm32_flags_to_conf(flags, &pincfg);
 800d4ce:	a901      	add	r1, sp, #4
 800d4d0:	4628      	mov	r0, r5
 800d4d2:	f009 fa1a 	bl	801690a <gpio_stm32_flags_to_conf>
	if (map_res != 0) {
 800d4d6:	4604      	mov	r4, r0
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	d1f4      	bne.n	800d4c6 <gpio_stm32_config+0x1a>
	if (gpio_stm32_configure(cfg->base, pin, pincfg, 0) != 0) {
 800d4dc:	4603      	mov	r3, r0
 800d4de:	9a01      	ldr	r2, [sp, #4]
 800d4e0:	4631      	mov	r1, r6
 800d4e2:	6838      	ldr	r0, [r7, #0]
 800d4e4:	f009 fa2e 	bl	8016944 <gpio_stm32_configure>
 800d4e8:	4604      	mov	r4, r0
 800d4ea:	bb10      	cbnz	r0, 800d532 <gpio_stm32_config+0x86>
	if (IS_ENABLED(CONFIG_EXTI_STM32) && (flags & GPIO_INT) != 0) {
 800d4ec:	07a9      	lsls	r1, r5, #30
 800d4ee:	d5ea      	bpl.n	800d4c6 <gpio_stm32_config+0x1a>
		if (stm32_exti_set_callback(pin, cfg->port,
 800d4f0:	4643      	mov	r3, r8
 800d4f2:	4a13      	ldr	r2, [pc, #76]	; (800d540 <gpio_stm32_config+0x94>)
 800d4f4:	6879      	ldr	r1, [r7, #4]
 800d4f6:	4630      	mov	r0, r6
 800d4f8:	f7f3 f938 	bl	800076c <stm32_exti_set_callback>
 800d4fc:	b9e0      	cbnz	r0, 800d538 <gpio_stm32_config+0x8c>
		gpio_stm32_enable_int(cfg->port, pin);
 800d4fe:	4631      	mov	r1, r6
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f7ff ff93 	bl	800d42c <gpio_stm32_enable_int>
		if ((flags & GPIO_INT_EDGE) != 0) {
 800d506:	06aa      	lsls	r2, r5, #26
 800d508:	d5db      	bpl.n	800d4c2 <gpio_stm32_config+0x16>
			if ((flags & GPIO_INT_DOUBLE_EDGE) != 0) {
 800d50a:	066b      	lsls	r3, r5, #25
 800d50c:	d40f      	bmi.n	800d52e <gpio_stm32_config+0x82>
				edge = STM32_EXTI_TRIG_FALLING;
 800d50e:	f015 0f04 	tst.w	r5, #4
 800d512:	bf14      	ite	ne
 800d514:	2101      	movne	r1, #1
 800d516:	2102      	moveq	r1, #2
			stm32_exti_trigger(pin, edge);
 800d518:	4630      	mov	r0, r6
 800d51a:	f7f3 f90f 	bl	800073c <stm32_exti_trigger>
		if (stm32_exti_enable(pin) != 0) {
 800d51e:	4630      	mov	r0, r6
 800d520:	f7f3 f8f2 	bl	8000708 <stm32_exti_enable>
			return -ENOSYS;
 800d524:	2800      	cmp	r0, #0
 800d526:	bf18      	it	ne
 800d528:	f06f 0446 	mvnne.w	r4, #70	; 0x46
 800d52c:	e7cb      	b.n	800d4c6 <gpio_stm32_config+0x1a>
				edge = STM32_EXTI_TRIG_RISING |
 800d52e:	2103      	movs	r1, #3
 800d530:	e7f2      	b.n	800d518 <gpio_stm32_config+0x6c>
		return -EIO;
 800d532:	f06f 0404 	mvn.w	r4, #4
 800d536:	e7c6      	b.n	800d4c6 <gpio_stm32_config+0x1a>
			return -EBUSY;
 800d538:	f06f 040f 	mvn.w	r4, #15
 800d53c:	e7c3      	b.n	800d4c6 <gpio_stm32_config+0x1a>
 800d53e:	bf00      	nop
 800d540:	0801680f 	.word	0x0801680f

0800d544 <uart_stm32_configure>:
	return UART_CFG_PARITY_NONE;
}

static int uart_stm32_configure(struct device *dev,
				const struct uart_config *cfg)
{
 800d544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct uart_stm32_data *data = DEV_DATA(dev);
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800d548:	6803      	ldr	r3, [r0, #0]
{
 800d54a:	460d      	mov	r5, r1
	const u32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 800d54c:	790a      	ldrb	r2, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800d54e:	689b      	ldr	r3, [r3, #8]
	switch (parity) {
 800d550:	2a01      	cmp	r2, #1
	struct uart_stm32_data *data = DEV_DATA(dev);
 800d552:	6886      	ldr	r6, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800d554:	681c      	ldr	r4, [r3, #0]
	switch (parity) {
 800d556:	f000 8089 	beq.w	800d66c <uart_stm32_configure+0x128>
		return LL_USART_PARITY_NONE;
 800d55a:	2a02      	cmp	r2, #2
 800d55c:	bf0c      	ite	eq
 800d55e:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 800d562:	2100      	movne	r1, #0
	const u32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800d564:	f895 9005 	ldrb.w	r9, [r5, #5]
	const u32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits);
 800d568:	f895 8006 	ldrb.w	r8, [r5, #6]
 800d56c:	f1b9 0f02 	cmp.w	r9, #2
 800d570:	bf96      	itet	ls
 800d572:	4b43      	ldrls	r3, [pc, #268]	; (800d680 <uart_stm32_configure+0x13c>)
	const u32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800d574:	f44f 5e00 	movhi.w	lr, #8192	; 0x2000
 800d578:	f833 e019 	ldrhls.w	lr, [r3, r9, lsl #1]
	switch (db) {
 800d57c:	f1b8 0f02 	cmp.w	r8, #2
 800d580:	d077      	beq.n	800d672 <uart_stm32_configure+0x12e>
		return LL_USART_DATAWIDTH_8B;
 800d582:	f1b8 0f04 	cmp.w	r8, #4
 800d586:	bf0c      	ite	eq
 800d588:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 800d58c:	2300      	movne	r3, #0
	const u32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 800d58e:	79ef      	ldrb	r7, [r5, #7]

	/* Hardware doesn't support mark or space parity */
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 800d590:	3a03      	subs	r2, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 800d592:	2f01      	cmp	r7, #1
 800d594:	bf14      	ite	ne
 800d596:	f04f 0c00 	movne.w	ip, #0
 800d59a:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 800d59e:	2a01      	cmp	r2, #1
 800d5a0:	d96a      	bls.n	800d678 <uart_stm32_configure+0x134>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    UART_CFG_STOP_BITS_0_5 == cfg->stop_bits) {
		return -ENOTSUP;
	}
#else
	if (UART_CFG_STOP_BITS_0_5 == cfg->stop_bits) {
 800d5a2:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 800d5a6:	d067      	beq.n	800d678 <uart_stm32_configure+0x134>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((UART_CFG_DATA_BITS_5 == cfg->data_bits) ||
 800d5a8:	f1b8 0f01 	cmp.w	r8, #1
 800d5ac:	d964      	bls.n	800d678 <uart_stm32_configure+0x134>
		) {
		return -ENOTSUP;
	}

	/* Driver supports only RTS CTS flow control */
	if (UART_CFG_FLOW_CTRL_NONE != cfg->flow_ctrl) {
 800d5ae:	b307      	cbz	r7, 800d5f2 <uart_stm32_configure+0xae>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 800d5b0:	4a34      	ldr	r2, [pc, #208]	; (800d684 <uart_stm32_configure+0x140>)
 800d5b2:	4294      	cmp	r4, r2
 800d5b4:	d01b      	beq.n	800d5ee <uart_stm32_configure+0xaa>
 800d5b6:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 800d5ba:	4294      	cmp	r4, r2
 800d5bc:	d017      	beq.n	800d5ee <uart_stm32_configure+0xaa>
 800d5be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d5c2:	4294      	cmp	r4, r2
 800d5c4:	d013      	beq.n	800d5ee <uart_stm32_configure+0xaa>
 800d5c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d5ca:	4294      	cmp	r4, r2
 800d5cc:	d00f      	beq.n	800d5ee <uart_stm32_configure+0xaa>
 800d5ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d5d2:	4294      	cmp	r4, r2
 800d5d4:	d00b      	beq.n	800d5ee <uart_stm32_configure+0xaa>
 800d5d6:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 800d5da:	4294      	cmp	r4, r2
 800d5dc:	d007      	beq.n	800d5ee <uart_stm32_configure+0xaa>
 800d5de:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 800d5e2:	4294      	cmp	r4, r2
 800d5e4:	d003      	beq.n	800d5ee <uart_stm32_configure+0xaa>
 800d5e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d5ea:	4294      	cmp	r4, r2
 800d5ec:	d144      	bne.n	800d678 <uart_stm32_configure+0x134>
 800d5ee:	2f01      	cmp	r7, #1
 800d5f0:	d142      	bne.n	800d678 <uart_stm32_configure+0x134>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800d5f2:	6822      	ldr	r2, [r4, #0]
 800d5f4:	f022 0201 	bic.w	r2, r2, #1
 800d5f8:	6022      	str	r2, [r4, #0]
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  */
__STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800d5fa:	6822      	ldr	r2, [r4, #0]
 800d5fc:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
		}
	}

	LL_USART_Disable(UartInstance);

	if (parity != uart_stm32_get_parity(dev)) {
 800d600:	4291      	cmp	r1, r2
 800d602:	d004      	beq.n	800d60e <uart_stm32_configure+0xca>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 800d604:	6827      	ldr	r7, [r4, #0]
 800d606:	f427 67c0 	bic.w	r7, r7, #1536	; 0x600
 800d60a:	430f      	orrs	r7, r1
 800d60c:	6027      	str	r7, [r4, #0]
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  */
__STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800d60e:	6862      	ldr	r2, [r4, #4]
 800d610:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 800d614:	4596      	cmp	lr, r2
 800d616:	d005      	beq.n	800d624 <uart_stm32_configure+0xe0>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800d618:	6861      	ldr	r1, [r4, #4]
 800d61a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800d61e:	ea41 010e 	orr.w	r1, r1, lr
 800d622:	6061      	str	r1, [r4, #4]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800d624:	6822      	ldr	r2, [r4, #0]
 800d626:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
		uart_stm32_set_stopbits(dev, stopbits);
	}

	if (databits != uart_stm32_get_databits(dev)) {
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d004      	beq.n	800d638 <uart_stm32_configure+0xf4>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 800d62e:	6822      	ldr	r2, [r4, #0]
 800d630:	f022 2210 	bic.w	r2, r2, #268439552	; 0x10001000
 800d634:	431a      	orrs	r2, r3
 800d636:	6022      	str	r2, [r4, #0]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800d638:	68a3      	ldr	r3, [r4, #8]
 800d63a:	f403 7340 	and.w	r3, r3, #768	; 0x300
		uart_stm32_set_databits(dev, databits);
	}

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 800d63e:	459c      	cmp	ip, r3
 800d640:	d005      	beq.n	800d64e <uart_stm32_configure+0x10a>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800d642:	68a3      	ldr	r3, [r4, #8]
 800d644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d648:	ea43 030c 	orr.w	r3, r3, ip
 800d64c:	60a3      	str	r3, [r4, #8]
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

	if (cfg->baudrate != data->baud_rate) {
 800d64e:	6829      	ldr	r1, [r5, #0]
 800d650:	6833      	ldr	r3, [r6, #0]
 800d652:	4299      	cmp	r1, r3
 800d654:	d003      	beq.n	800d65e <uart_stm32_configure+0x11a>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 800d656:	f009 f9fa 	bl	8016a4e <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 800d65a:	682b      	ldr	r3, [r5, #0]
 800d65c:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800d65e:	6823      	ldr	r3, [r4, #0]
	}

	LL_USART_Enable(UartInstance);
	return 0;
 800d660:	2000      	movs	r0, #0
 800d662:	f043 0301 	orr.w	r3, r3, #1
 800d666:	6023      	str	r3, [r4, #0]
};
 800d668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return LL_USART_PARITY_ODD;
 800d66c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d670:	e778      	b.n	800d564 <uart_stm32_configure+0x20>
		return LL_USART_DATAWIDTH_7B;
 800d672:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d676:	e78a      	b.n	800d58e <uart_stm32_configure+0x4a>
		return -ENOTSUP;
 800d678:	f06f 0022 	mvn.w	r0, #34	; 0x22
 800d67c:	e7f4      	b.n	800d668 <uart_stm32_configure+0x124>
 800d67e:	bf00      	nop
 800d680:	08017504 	.word	0x08017504
 800d684:	40011000 	.word	0x40011000

0800d688 <uart_stm32_init>:
 *
 * @return 0
 */
static int uart_stm32_init(struct device *dev)
{
	const struct uart_stm32_config *config = DEV_CFG(dev);
 800d688:	6803      	ldr	r3, [r0, #0]
{
 800d68a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 800d68e:	f8d3 8008 	ldr.w	r8, [r3, #8]
{
 800d692:	4605      	mov	r5, r0
	struct uart_stm32_data *data = DEV_DATA(dev);
 800d694:	6887      	ldr	r7, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800d696:	4646      	mov	r6, r8
 800d698:	481c      	ldr	r0, [pc, #112]	; (800d70c <uart_stm32_init+0x84>)
 800d69a:	f856 4b08 	ldr.w	r4, [r6], #8
 800d69e:	f000 f84d 	bl	800d73c <z_impl_device_get_binding>
 800d6a2:	6843      	ldr	r3, [r0, #4]
 800d6a4:	4631      	mov	r1, r6
	data->clock = clk;
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	4798      	blx	r3

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 800d6ac:	4606      	mov	r6, r0
 800d6ae:	bb48      	cbnz	r0, 800d704 <uart_stm32_init+0x7c>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800d6b0:	6823      	ldr	r3, [r4, #0]
 800d6b2:	f023 0301 	bic.w	r3, r3, #1
 800d6b6:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800d6b8:	6823      	ldr	r3, [r4, #0]
 800d6ba:	f043 030c 	orr.w	r3, r3, #12
 800d6be:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800d6c0:	6823      	ldr	r3, [r4, #0]
 800d6c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d6c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800d6ca:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800d6cc:	6863      	ldr	r3, [r4, #4]
 800d6ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800d6d2:	6063      	str	r3, [r4, #4]
	LL_USART_ConfigCharacter(UartInstance,
				 LL_USART_DATAWIDTH_8B,
				 LL_USART_PARITY_NONE,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 800d6d4:	f898 3010 	ldrb.w	r3, [r8, #16]
 800d6d8:	b133      	cbz	r3, 800d6e8 <uart_stm32_init+0x60>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800d6da:	682b      	ldr	r3, [r5, #0]
 800d6dc:	689b      	ldr	r3, [r3, #8]
 800d6de:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800d6e0:	6893      	ldr	r3, [r2, #8]
 800d6e2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d6e6:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 800d6e8:	6839      	ldr	r1, [r7, #0]
 800d6ea:	4628      	mov	r0, r5
 800d6ec:	f009 f9af 	bl	8016a4e <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800d6f0:	6823      	ldr	r3, [r4, #0]
 800d6f2:	f043 0301 	orr.w	r3, r3, #1
 800d6f6:	6023      	str	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800d6f8:	69e3      	ldr	r3, [r4, #28]
 800d6fa:	029b      	lsls	r3, r3, #10
 800d6fc:	d5fc      	bpl.n	800d6f8 <uart_stm32_init+0x70>

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	config->uconf.irq_config_func(dev);
#endif
	return 0;
}
 800d6fe:	4630      	mov	r0, r6
 800d700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
 800d704:	f06f 0604 	mvn.w	r6, #4
 800d708:	e7f9      	b.n	800d6fe <uart_stm32_init+0x76>
 800d70a:	bf00      	nop
 800d70c:	08017534 	.word	0x08017534

0800d710 <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
 800d710:	4b09      	ldr	r3, [pc, #36]	; (800d738 <z_sys_device_do_config_level+0x28>)
{
 800d712:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
 800d714:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800d718:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
 800d71a:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
 800d71c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 800d720:	42a5      	cmp	r5, r4
 800d722:	d800      	bhi.n	800d726 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
 800d724:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
 800d726:	6823      	ldr	r3, [r4, #0]
 800d728:	4620      	mov	r0, r4
 800d72a:	685b      	ldr	r3, [r3, #4]
 800d72c:	4798      	blx	r3
		if (retval != 0) {
 800d72e:	b100      	cbz	r0, 800d732 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
 800d730:	6066      	str	r6, [r4, #4]
								info++) {
 800d732:	340c      	adds	r4, #12
 800d734:	e7f4      	b.n	800d720 <z_sys_device_do_config_level+0x10>
 800d736:	bf00      	nop
 800d738:	080173f8 	.word	0x080173f8

0800d73c <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
 800d73c:	4b10      	ldr	r3, [pc, #64]	; (800d780 <z_impl_device_get_binding+0x44>)
{
 800d73e:	b570      	push	{r4, r5, r6, lr}
 800d740:	4605      	mov	r5, r0
	for (info = __device_init_start; info != __device_init_end; info++) {
 800d742:	4c10      	ldr	r4, [pc, #64]	; (800d784 <z_impl_device_get_binding+0x48>)
 800d744:	461e      	mov	r6, r3
 800d746:	429c      	cmp	r4, r3
 800d748:	d104      	bne.n	800d754 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
 800d74a:	4c0e      	ldr	r4, [pc, #56]	; (800d784 <z_impl_device_get_binding+0x48>)
 800d74c:	42b4      	cmp	r4, r6
 800d74e:	d109      	bne.n	800d764 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
 800d750:	2400      	movs	r4, #0
 800d752:	e012      	b.n	800d77a <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
 800d754:	6862      	ldr	r2, [r4, #4]
 800d756:	b11a      	cbz	r2, 800d760 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
 800d758:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
 800d75a:	6812      	ldr	r2, [r2, #0]
 800d75c:	42aa      	cmp	r2, r5
 800d75e:	d00c      	beq.n	800d77a <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
 800d760:	340c      	adds	r4, #12
 800d762:	e7f0      	b.n	800d746 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
 800d764:	6863      	ldr	r3, [r4, #4]
 800d766:	b90b      	cbnz	r3, 800d76c <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
 800d768:	340c      	adds	r4, #12
 800d76a:	e7ef      	b.n	800d74c <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
 800d76c:	6823      	ldr	r3, [r4, #0]
 800d76e:	4628      	mov	r0, r5
 800d770:	6819      	ldr	r1, [r3, #0]
 800d772:	f008 fff1 	bl	8016758 <strcmp>
 800d776:	2800      	cmp	r0, #0
 800d778:	d1f6      	bne.n	800d768 <z_impl_device_get_binding+0x2c>
}
 800d77a:	4620      	mov	r0, r4
 800d77c:	bd70      	pop	{r4, r5, r6, pc}
 800d77e:	bf00      	nop
 800d780:	2002e978 	.word	0x2002e978
 800d784:	2002e888 	.word	0x2002e888

0800d788 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 800d788:	4802      	ldr	r0, [pc, #8]	; (800d794 <z_bss_zero+0xc>)
 800d78a:	2100      	movs	r1, #0
 800d78c:	4a02      	ldr	r2, [pc, #8]	; (800d798 <z_bss_zero+0x10>)
 800d78e:	1a12      	subs	r2, r2, r0
 800d790:	f009 b818 	b.w	80167c4 <memset>
 800d794:	20020000 	.word	0x20020000
 800d798:	2002cce8 	.word	0x2002cce8

0800d79c <z_data_copy>:
 * @return N/A
 */
void z_data_copy(void)
{
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
 800d79c:	4806      	ldr	r0, [pc, #24]	; (800d7b8 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 800d79e:	4a07      	ldr	r2, [pc, #28]	; (800d7bc <z_data_copy+0x20>)
 800d7a0:	4907      	ldr	r1, [pc, #28]	; (800d7c0 <z_data_copy+0x24>)
 800d7a2:	1a12      	subs	r2, r2, r0
{
 800d7a4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 800d7a6:	f008 ffe3 	bl	8016770 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
 800d7aa:	4a06      	ldr	r2, [pc, #24]	; (800d7c4 <z_data_copy+0x28>)
 800d7ac:	4906      	ldr	r1, [pc, #24]	; (800d7c8 <z_data_copy+0x2c>)
 800d7ae:	4807      	ldr	r0, [pc, #28]	; (800d7cc <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 800d7b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
 800d7b4:	f008 bfdc 	b.w	8016770 <memcpy>
 800d7b8:	2002da28 	.word	0x2002da28
 800d7bc:	2002e98c 	.word	0x2002e98c
 800d7c0:	0801ce24 	.word	0x0801ce24
 800d7c4:	00000000 	.word	0x00000000
 800d7c8:	0801ce24 	.word	0x0801ce24
 800d7cc:	20020000 	.word	0x20020000

0800d7d0 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 800d7d0:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
 800d7d2:	2002      	movs	r0, #2
 800d7d4:	f7ff ff9c 	bl	800d710 <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
 800d7d8:	4807      	ldr	r0, [pc, #28]	; (800d7f8 <bg_thread_main+0x28>)
 800d7da:	f000 fe49 	bl	800e470 <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
 800d7de:	2003      	movs	r0, #3
 800d7e0:	f7ff ff96 	bl	800d710 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
 800d7e4:	f000 faf0 	bl	800ddc8 <z_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
 800d7e8:	f000 fc3c 	bl	800e064 <main>

	/* Mark nonessenrial since main() has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
 800d7ec:	4a03      	ldr	r2, [pc, #12]	; (800d7fc <bg_thread_main+0x2c>)
 800d7ee:	7b13      	ldrb	r3, [r2, #12]
 800d7f0:	f023 0301 	bic.w	r3, r3, #1
 800d7f4:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 800d7f6:	bd08      	pop	{r3, pc}
 800d7f8:	0801cdd1 	.word	0x0801cdd1
 800d7fc:	20028db0 	.word	0x20028db0

0800d800 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
 800d800:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_InterruptStackSetup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
 800d802:	4b3a      	ldr	r3, [pc, #232]	; (800d8ec <z_cstart+0xec>)
 800d804:	b0a0      	sub	sp, #128	; 0x80
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800d806:	f383 8808 	msr	MSP, r3
 800d80a:	4d39      	ldr	r5, [pc, #228]	; (800d8f0 <z_cstart+0xf0>)
 800d80c:	2400      	movs	r4, #0
 800d80e:	23f0      	movs	r3, #240	; 0xf0
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
 800d810:	4e38      	ldr	r6, [pc, #224]	; (800d8f4 <z_cstart+0xf4>)
	struct k_thread dummy_thread = {
 800d812:	2701      	movs	r7, #1
 800d814:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 800d818:	77ec      	strb	r4, [r5, #31]
 800d81a:	762c      	strb	r4, [r5, #24]
 800d81c:	766c      	strb	r4, [r5, #25]
 800d81e:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 800d820:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d822:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800d826:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void kernel_arch_init(void)
{
	z_InterruptStackSetup();
	z_ExcSetup();
	z_FaultInit();
 800d828:	f7ff fca4 	bl	800d174 <z_FaultInit>
	z_CpuIdleInit();
 800d82c:	f7ff fcf4 	bl	800d218 <z_CpuIdleInit>
static ALWAYS_INLINE void z_clearfaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 800d830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d834:	4621      	mov	r1, r4
 800d836:	2264      	movs	r2, #100	; 0x64
 800d838:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 800d83a:	62eb      	str	r3, [r5, #44]	; 0x2c
 800d83c:	ab07      	add	r3, sp, #28
	_kernel.ready_q.cache = _main_thread;
 800d83e:	4d2e      	ldr	r5, [pc, #184]	; (800d8f8 <z_cstart+0xf8>)
	struct k_thread dummy_thread = {
 800d840:	4618      	mov	r0, r3
 800d842:	f008 ffbf 	bl	80167c4 <memset>
	_current = &dummy_thread;
 800d846:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 800d848:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
 800d84a:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 800d84e:	f7ff ff5f 	bl	800d710 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 800d852:	4638      	mov	r0, r7
 800d854:	f7ff ff5c 	bl	800d710 <z_sys_device_do_config_level>
	z_sched_init();
 800d858:	f000 fa06 	bl	800dc68 <z_sched_init>
	z_setup_new_thread(_main_thread, _main_stack,
 800d85c:	4b27      	ldr	r3, [pc, #156]	; (800d8fc <z_cstart+0xfc>)
	_kernel.ready_q.cache = _main_thread;
 800d85e:	6235      	str	r5, [r6, #32]
	z_setup_new_thread(_main_thread, _main_stack,
 800d860:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d864:	4926      	ldr	r1, [pc, #152]	; (800d900 <z_cstart+0x100>)
 800d866:	4628      	mov	r0, r5
 800d868:	e9cd 7304 	strd	r7, r3, [sp, #16]
 800d86c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800d870:	e9cd 4400 	strd	r4, r4, [sp]
 800d874:	4b23      	ldr	r3, [pc, #140]	; (800d904 <z_cstart+0x104>)
 800d876:	4634      	mov	r4, r6
 800d878:	f000 fa8e 	bl	800dd98 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800d87c:	7b6b      	ldrb	r3, [r5, #13]
 800d87e:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 800d882:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800d886:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 800d888:	d104      	bne.n	800d894 <z_cstart+0x94>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
 800d88a:	69ab      	ldr	r3, [r5, #24]
 800d88c:	b913      	cbnz	r3, 800d894 <z_cstart+0x94>
		z_add_thread_to_ready_q(thread);
 800d88e:	4628      	mov	r0, r5
 800d890:	f000 f8ec 	bl	800da6c <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
 800d894:	4b1c      	ldr	r3, [pc, #112]	; (800d908 <z_cstart+0x108>)
 800d896:	2201      	movs	r2, #1
 800d898:	4e1c      	ldr	r6, [pc, #112]	; (800d90c <z_cstart+0x10c>)
 800d89a:	9305      	str	r3, [sp, #20]
 800d89c:	230f      	movs	r3, #15
 800d89e:	491c      	ldr	r1, [pc, #112]	; (800d910 <z_cstart+0x110>)
 800d8a0:	4630      	mov	r0, r6
 800d8a2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800d8ac:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800d8b0:	9300      	str	r3, [sp, #0]
 800d8b2:	4b18      	ldr	r3, [pc, #96]	; (800d914 <z_cstart+0x114>)
 800d8b4:	f000 fa70 	bl	800dd98 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800d8b8:	7b73      	ldrb	r3, [r6, #13]
	_kernel.cpus[0].idle_thread = _idle_thread;
 800d8ba:	60e6      	str	r6, [r4, #12]
 800d8bc:	f023 0304 	bic.w	r3, r3, #4
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
 800d8c0:	60a5      	str	r5, [r4, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 800d8c2:	4a15      	ldr	r2, [pc, #84]	; (800d918 <z_cstart+0x118>)
 800d8c4:	7373      	strb	r3, [r6, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 800d8c6:	4b15      	ldr	r3, [pc, #84]	; (800d91c <z_cstart+0x11c>)
	list->tail = (sys_dnode_t *)list;
 800d8c8:	e9c4 3306 	strd	r3, r3, [r4, #24]
 800d8cc:	4b0d      	ldr	r3, [pc, #52]	; (800d904 <z_cstart+0x104>)
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f382 8809 	msr	PSP, r2
 800d8d4:	b663      	cpsie	if
 800d8d6:	f04f 0100 	mov.w	r1, #0
 800d8da:	f381 8811 	msr	BASEPRI, r1
 800d8de:	f3bf 8f6f 	isb	sy
 800d8e2:	2100      	movs	r1, #0
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	f000 fc38 	bl	800e15c <z_thread_entry>
	"bl z_thread_entry \n\t"   /* z_thread_entry(_main, 0, 0, 0); */
	:
	: "r" (_main), "r" (start_of_main_stack)
	);

	CODE_UNREACHABLE;
 800d8ec:	2002da28 	.word	0x2002da28
 800d8f0:	e000ed00 	.word	0xe000ed00
 800d8f4:	20028e14 	.word	0x20028e14
 800d8f8:	20028db0 	.word	0x20028db0
 800d8fc:	0801ce18 	.word	0x0801ce18
 800d900:	2002cce8 	.word	0x2002cce8
 800d904:	0800d7d1 	.word	0x0800d7d1
 800d908:	0801ce1d 	.word	0x0801ce1d
 800d90c:	20028d4c 	.word	0x20028d4c
 800d910:	2002d0e8 	.word	0x2002d0e8
 800d914:	08016d95 	.word	0x08016d95
 800d918:	2002d0e8 	.word	0x2002d0e8
 800d91c:	20028e2c 	.word	0x20028e2c

0800d920 <reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

static void reset_time_slice(void)
{
 800d920:	b508      	push	{r3, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 800d922:	f7f3 f8ff 	bl	8000b24 <z_clock_elapsed>
 800d926:	4b05      	ldr	r3, [pc, #20]	; (800d93c <reset_time_slice+0x1c>)
 800d928:	4a05      	ldr	r2, [pc, #20]	; (800d940 <reset_time_slice+0x20>)

	z_set_timeout_expiry(slice_time, false);
 800d92a:	2100      	movs	r1, #0
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	4418      	add	r0, r3
 800d930:	6110      	str	r0, [r2, #16]
	z_set_timeout_expiry(slice_time, false);
 800d932:	4618      	mov	r0, r3
}
 800d934:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_set_timeout_expiry(slice_time, false);
 800d938:	f009 ba01 	b.w	8016d3e <z_set_timeout_expiry>
 800d93c:	20028e48 	.word	0x20028e48
 800d940:	20028e14 	.word	0x20028e14

0800d944 <resched.part.15>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d944:	f3ef 8005 	mrs	r0, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
 800d948:	280d      	cmp	r0, #13
 800d94a:	d809      	bhi.n	800d960 <resched.part.15+0x1c>
 800d94c:	b128      	cbz	r0, 800d95a <resched.part.15+0x16>
 800d94e:	4b05      	ldr	r3, [pc, #20]	; (800d964 <resched.part.15+0x20>)
 800d950:	6858      	ldr	r0, [r3, #4]
 800d952:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
 800d956:	f3c0 20c0 	ubfx	r0, r0, #11, #1
	}
	_current_cpu->swap_ok = 0;
#endif

	return z_arch_irq_unlocked(key) && !z_is_in_isr();
}
 800d95a:	f080 0001 	eor.w	r0, r0, #1
 800d95e:	4770      	bx	lr
 800d960:	2001      	movs	r0, #1
 800d962:	e7fa      	b.n	800d95a <resched.part.15+0x16>
 800d964:	e000ed00 	.word	0xe000ed00

0800d968 <k_sched_time_slice_set>:
{
 800d968:	b510      	push	{r4, lr}
 800d96a:	f04f 0310 	mov.w	r3, #16
 800d96e:	f3ef 8411 	mrs	r4, BASEPRI
 800d972:	f383 8811 	msr	BASEPRI, r3
 800d976:	f3bf 8f6f 	isb	sy
		_current_cpu->slice_ticks = 0;
 800d97a:	2200      	movs	r2, #0
 800d97c:	4b06      	ldr	r3, [pc, #24]	; (800d998 <k_sched_time_slice_set+0x30>)
 800d97e:	611a      	str	r2, [r3, #16]
		slice_time = z_ms_to_ticks(slice);
 800d980:	4b06      	ldr	r3, [pc, #24]	; (800d99c <k_sched_time_slice_set+0x34>)
 800d982:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
 800d984:	4b06      	ldr	r3, [pc, #24]	; (800d9a0 <k_sched_time_slice_set+0x38>)
 800d986:	6019      	str	r1, [r3, #0]
		reset_time_slice();
 800d988:	f7ff ffca 	bl	800d920 <reset_time_slice>
	__asm__ volatile(
 800d98c:	f384 8811 	msr	BASEPRI, r4
 800d990:	f3bf 8f6f 	isb	sy
}
 800d994:	bd10      	pop	{r4, pc}
 800d996:	bf00      	nop
 800d998:	20028e14 	.word	0x20028e14
 800d99c:	20028e48 	.word	0x20028e48
 800d9a0:	20028e44 	.word	0x20028e44

0800d9a4 <k_sched_lock>:
	__asm__ volatile(
 800d9a4:	f04f 0310 	mov.w	r3, #16
 800d9a8:	f3ef 8111 	mrs	r1, BASEPRI
 800d9ac:	f383 8811 	msr	BASEPRI, r3
 800d9b0:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
 800d9b4:	4b04      	ldr	r3, [pc, #16]	; (800d9c8 <k_sched_lock+0x24>)
 800d9b6:	689a      	ldr	r2, [r3, #8]
 800d9b8:	7bd3      	ldrb	r3, [r2, #15]
 800d9ba:	3b01      	subs	r3, #1
 800d9bc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 800d9be:	f381 8811 	msr	BASEPRI, r1
 800d9c2:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
 800d9c6:	4770      	bx	lr
 800d9c8:	20028e14 	.word	0x20028e14

0800d9cc <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
 800d9cc:	4b09      	ldr	r3, [pc, #36]	; (800d9f4 <z_priq_dumb_remove+0x28>)
 800d9ce:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d9d2:	4282      	cmp	r2, r0
 800d9d4:	d105      	bne.n	800d9e2 <z_priq_dumb_remove+0x16>
 800d9d6:	689b      	ldr	r3, [r3, #8]
 800d9d8:	428b      	cmp	r3, r1
 800d9da:	d102      	bne.n	800d9e2 <z_priq_dumb_remove+0x16>
 800d9dc:	7b4b      	ldrb	r3, [r1, #13]
 800d9de:	06db      	lsls	r3, r3, #27
 800d9e0:	d106      	bne.n	800d9f0 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
 800d9e2:	e9d1 3200 	ldrd	r3, r2, [r1]
 800d9e6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 800d9e8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800d9ea:	2300      	movs	r3, #0
	node->prev = NULL;
 800d9ec:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
 800d9f0:	4770      	bx	lr
 800d9f2:	bf00      	nop
 800d9f4:	20028e14 	.word	0x20028e14

0800d9f8 <update_cache>:
{
 800d9f8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
 800d9fa:	4c0d      	ldr	r4, [pc, #52]	; (800da30 <update_cache+0x38>)
{
 800d9fc:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
 800d9fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800da02:	f009 f8fc 	bl	8016bfe <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
 800da06:	4605      	mov	r5, r0
 800da08:	b900      	cbnz	r0, 800da0c <update_cache+0x14>
 800da0a:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
 800da0c:	68a3      	ldr	r3, [r4, #8]
 800da0e:	b94a      	cbnz	r2, 800da24 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
 800da10:	7b5a      	ldrb	r2, [r3, #13]
 800da12:	06d2      	lsls	r2, r2, #27
 800da14:	d106      	bne.n	800da24 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 800da16:	69aa      	ldr	r2, [r5, #24]
 800da18:	b922      	cbnz	r2, 800da24 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
 800da1a:	89da      	ldrh	r2, [r3, #14]
 800da1c:	2a7f      	cmp	r2, #127	; 0x7f
 800da1e:	d901      	bls.n	800da24 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
 800da20:	6223      	str	r3, [r4, #32]
}
 800da22:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
 800da24:	429d      	cmp	r5, r3
 800da26:	d001      	beq.n	800da2c <update_cache+0x34>
			reset_time_slice();
 800da28:	f7ff ff7a 	bl	800d920 <reset_time_slice>
		_kernel.ready_q.cache = th;
 800da2c:	6225      	str	r5, [r4, #32]
}
 800da2e:	e7f8      	b.n	800da22 <update_cache+0x2a>
 800da30:	20028e14 	.word	0x20028e14

0800da34 <k_sched_unlock>:
{
 800da34:	b510      	push	{r4, lr}
	__asm__ volatile(
 800da36:	f04f 0310 	mov.w	r3, #16
 800da3a:	f3ef 8411 	mrs	r4, BASEPRI
 800da3e:	f383 8811 	msr	BASEPRI, r3
 800da42:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 800da46:	4b08      	ldr	r3, [pc, #32]	; (800da68 <k_sched_unlock+0x34>)
		update_cache(1);
 800da48:	2001      	movs	r0, #1
		++_current->base.sched_locked;
 800da4a:	689a      	ldr	r2, [r3, #8]
 800da4c:	7bd3      	ldrb	r3, [r2, #15]
 800da4e:	3301      	adds	r3, #1
 800da50:	73d3      	strb	r3, [r2, #15]
		update_cache(1);
 800da52:	f7ff ffd1 	bl	800d9f8 <update_cache>
	__asm__ volatile(
 800da56:	f384 8811 	msr	BASEPRI, r4
 800da5a:	f3bf 8f6f 	isb	sy
}
 800da5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 800da62:	f009 b8c2 	b.w	8016bea <z_reschedule_unlocked>
 800da66:	bf00      	nop
 800da68:	20028e14 	.word	0x20028e14

0800da6c <z_add_thread_to_ready_q>:
{
 800da6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 800da6e:	f04f 0310 	mov.w	r3, #16
 800da72:	f3ef 8411 	mrs	r4, BASEPRI
 800da76:	f383 8811 	msr	BASEPRI, r3
 800da7a:	f3bf 8f6f 	isb	sy
	return list->head == list;
 800da7e:	4a15      	ldr	r2, [pc, #84]	; (800dad4 <z_add_thread_to_ready_q+0x68>)
 800da80:	4611      	mov	r1, r2
 800da82:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800da86:	428b      	cmp	r3, r1
 800da88:	d01d      	beq.n	800dac6 <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800da8a:	b1e3      	cbz	r3, 800dac6 <z_add_thread_to_ready_q+0x5a>
 800da8c:	6a96      	ldr	r6, [r2, #40]	; 0x28
	if (t1->base.prio < t2->base.prio) {
 800da8e:	f990 500e 	ldrsb.w	r5, [r0, #14]
 800da92:	f993 700e 	ldrsb.w	r7, [r3, #14]
 800da96:	42af      	cmp	r7, r5
 800da98:	dd10      	ble.n	800dabc <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
 800da9a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800da9c:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
 800daa0:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 800daa2:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
 800daa4:	7b43      	ldrb	r3, [r0, #13]
 800daa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800daaa:	7343      	strb	r3, [r0, #13]
		update_cache(0);
 800daac:	2000      	movs	r0, #0
 800daae:	f7ff ffa3 	bl	800d9f8 <update_cache>
	__asm__ volatile(
 800dab2:	f384 8811 	msr	BASEPRI, r4
 800dab6:	f3bf 8f6f 	isb	sy
}
 800daba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 800dabc:	42b3      	cmp	r3, r6
 800dabe:	d002      	beq.n	800dac6 <z_add_thread_to_ready_q+0x5a>
 800dac0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d1e5      	bne.n	800da92 <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
 800dac6:	6a93      	ldr	r3, [r2, #40]	; 0x28
	node->next = list;
 800dac8:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
 800daca:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
 800dacc:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800dace:	6018      	str	r0, [r3, #0]
	list->tail = node;
 800dad0:	6290      	str	r0, [r2, #40]	; 0x28
 800dad2:	e7e7      	b.n	800daa4 <z_add_thread_to_ready_q+0x38>
 800dad4:	20028e14 	.word	0x20028e14

0800dad8 <z_move_thread_to_end_of_prio_q>:
{
 800dad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dada:	4604      	mov	r4, r0
	__asm__ volatile(
 800dadc:	f04f 0310 	mov.w	r3, #16
 800dae0:	f3ef 8711 	mrs	r7, BASEPRI
 800dae4:	f383 8811 	msr	BASEPRI, r3
 800dae8:	f3bf 8f6f 	isb	sy
		_priq_run_remove(&_kernel.ready_q.runq, thread);
 800daec:	4d19      	ldr	r5, [pc, #100]	; (800db54 <z_move_thread_to_end_of_prio_q+0x7c>)
 800daee:	4601      	mov	r1, r0
 800daf0:	f105 0624 	add.w	r6, r5, #36	; 0x24
 800daf4:	4630      	mov	r0, r6
 800daf6:	f7ff ff69 	bl	800d9cc <z_priq_dumb_remove>
	return list->head == list;
 800dafa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dafc:	462a      	mov	r2, r5
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800dafe:	42b3      	cmp	r3, r6
 800db00:	d020      	beq.n	800db44 <z_move_thread_to_end_of_prio_q+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800db02:	b1fb      	cbz	r3, 800db44 <z_move_thread_to_end_of_prio_q+0x6c>
 800db04:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	if (t1->base.prio < t2->base.prio) {
 800db06:	f994 100e 	ldrsb.w	r1, [r4, #14]
 800db0a:	f993 500e 	ldrsb.w	r5, [r3, #14]
 800db0e:	428d      	cmp	r5, r1
 800db10:	dd13      	ble.n	800db3a <z_move_thread_to_end_of_prio_q+0x62>
	node->prev = successor->prev;
 800db12:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
 800db14:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
 800db18:	600c      	str	r4, [r1, #0]
	successor->prev = node;
 800db1a:	605c      	str	r4, [r3, #4]
 800db1c:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
 800db1e:	6890      	ldr	r0, [r2, #8]
 800db20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db24:	7363      	strb	r3, [r4, #13]
 800db26:	1b03      	subs	r3, r0, r4
 800db28:	4258      	negs	r0, r3
 800db2a:	4158      	adcs	r0, r3
 800db2c:	f7ff ff64 	bl	800d9f8 <update_cache>
	__asm__ volatile(
 800db30:	f387 8811 	msr	BASEPRI, r7
 800db34:	f3bf 8f6f 	isb	sy
}
 800db38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 800db3a:	4283      	cmp	r3, r0
 800db3c:	d002      	beq.n	800db44 <z_move_thread_to_end_of_prio_q+0x6c>
 800db3e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800db40:	2b00      	cmp	r3, #0
 800db42:	d1e2      	bne.n	800db0a <z_move_thread_to_end_of_prio_q+0x32>
	node->prev = list->tail;
 800db44:	6a93      	ldr	r3, [r2, #40]	; 0x28
	node->next = list;
 800db46:	6026      	str	r6, [r4, #0]
	node->prev = list->tail;
 800db48:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 800db4a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800db4c:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800db4e:	6294      	str	r4, [r2, #40]	; 0x28
 800db50:	e7e4      	b.n	800db1c <z_move_thread_to_end_of_prio_q+0x44>
 800db52:	bf00      	nop
 800db54:	20028e14 	.word	0x20028e14

0800db58 <z_time_slice>:
	if (pending_current == _current) {
 800db58:	4914      	ldr	r1, [pc, #80]	; (800dbac <z_time_slice+0x54>)
 800db5a:	4a15      	ldr	r2, [pc, #84]	; (800dbb0 <z_time_slice+0x58>)
 800db5c:	688b      	ldr	r3, [r1, #8]
{
 800db5e:	b510      	push	{r4, lr}
	if (pending_current == _current) {
 800db60:	6814      	ldr	r4, [r2, #0]
 800db62:	42a3      	cmp	r3, r4
 800db64:	d103      	bne.n	800db6e <z_time_slice+0x16>
}
 800db66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			reset_time_slice();
 800db6a:	f7ff bed9 	b.w	800d920 <reset_time_slice>
	pending_current = NULL;
 800db6e:	2400      	movs	r4, #0
 800db70:	6014      	str	r4, [r2, #0]
	if (slice_time && sliceable(_current)) {
 800db72:	4a10      	ldr	r2, [pc, #64]	; (800dbb4 <z_time_slice+0x5c>)
 800db74:	6812      	ldr	r2, [r2, #0]
 800db76:	b1ba      	cbz	r2, 800dba8 <z_time_slice+0x50>
		&& !z_is_thread_timeout_active(t);
 800db78:	89da      	ldrh	r2, [r3, #14]
 800db7a:	2a7f      	cmp	r2, #127	; 0x7f
 800db7c:	d814      	bhi.n	800dba8 <z_time_slice+0x50>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
 800db7e:	4a0e      	ldr	r2, [pc, #56]	; (800dbb8 <z_time_slice+0x60>)
 800db80:	f993 400e 	ldrsb.w	r4, [r3, #14]
 800db84:	6812      	ldr	r2, [r2, #0]
 800db86:	4294      	cmp	r4, r2
 800db88:	db0e      	blt.n	800dba8 <z_time_slice+0x50>
	return thread == _idle_thread;
 800db8a:	4a0c      	ldr	r2, [pc, #48]	; (800dbbc <z_time_slice+0x64>)
		&& !is_idle(t)
 800db8c:	6812      	ldr	r2, [r2, #0]
 800db8e:	4293      	cmp	r3, r2
 800db90:	d00a      	beq.n	800dba8 <z_time_slice+0x50>
		&& !z_is_thread_timeout_active(t);
 800db92:	699a      	ldr	r2, [r3, #24]
 800db94:	b942      	cbnz	r2, 800dba8 <z_time_slice+0x50>
		if (ticks >= _current_cpu->slice_ticks) {
 800db96:	690a      	ldr	r2, [r1, #16]
 800db98:	4282      	cmp	r2, r0
 800db9a:	dc03      	bgt.n	800dba4 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7ff ff9b 	bl	800dad8 <z_move_thread_to_end_of_prio_q>
 800dba2:	e7e0      	b.n	800db66 <z_time_slice+0xe>
			_current_cpu->slice_ticks -= ticks;
 800dba4:	1a12      	subs	r2, r2, r0
 800dba6:	610a      	str	r2, [r1, #16]
}
 800dba8:	bd10      	pop	{r4, pc}
 800dbaa:	bf00      	nop
 800dbac:	20028e14 	.word	0x20028e14
 800dbb0:	20028e40 	.word	0x20028e40
 800dbb4:	20028e48 	.word	0x20028e48
 800dbb8:	20028e44 	.word	0x20028e44
 800dbbc:	08017410 	.word	0x08017410

0800dbc0 <z_remove_thread_from_ready_q>:
{
 800dbc0:	b538      	push	{r3, r4, r5, lr}
 800dbc2:	4604      	mov	r4, r0
	__asm__ volatile(
 800dbc4:	f04f 0310 	mov.w	r3, #16
 800dbc8:	f3ef 8511 	mrs	r5, BASEPRI
 800dbcc:	f383 8811 	msr	BASEPRI, r3
 800dbd0:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 800dbd4:	7b43      	ldrb	r3, [r0, #13]
 800dbd6:	065a      	lsls	r2, r3, #25
 800dbd8:	d507      	bpl.n	800dbea <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 800dbda:	4601      	mov	r1, r0
 800dbdc:	4809      	ldr	r0, [pc, #36]	; (800dc04 <z_remove_thread_from_ready_q+0x44>)
 800dbde:	f7ff fef5 	bl	800d9cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 800dbe2:	7b63      	ldrb	r3, [r4, #13]
 800dbe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbe8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 800dbea:	4b07      	ldr	r3, [pc, #28]	; (800dc08 <z_remove_thread_from_ready_q+0x48>)
 800dbec:	6898      	ldr	r0, [r3, #8]
 800dbee:	1b03      	subs	r3, r0, r4
 800dbf0:	4258      	negs	r0, r3
 800dbf2:	4158      	adcs	r0, r3
 800dbf4:	f7ff ff00 	bl	800d9f8 <update_cache>
	__asm__ volatile(
 800dbf8:	f385 8811 	msr	BASEPRI, r5
 800dbfc:	f3bf 8f6f 	isb	sy
}
 800dc00:	bd38      	pop	{r3, r4, r5, pc}
 800dc02:	bf00      	nop
 800dc04:	20028e38 	.word	0x20028e38
 800dc08:	20028e14 	.word	0x20028e14

0800dc0c <z_tick_sleep.part.16>:

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

static s32_t z_tick_sleep(s32_t ticks)
 800dc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
 800dc0e:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
 800dc10:	f009 f8af 	bl	8016d72 <z_tick_get_32>
 800dc14:	1834      	adds	r4, r6, r0
	__asm__ volatile(
 800dc16:	f04f 0310 	mov.w	r3, #16
 800dc1a:	f3ef 8711 	mrs	r7, BASEPRI
 800dc1e:	f383 8811 	msr	BASEPRI, r3
 800dc22:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 800dc26:	4d0d      	ldr	r5, [pc, #52]	; (800dc5c <z_tick_sleep.part.16+0x50>)
 800dc28:	4b0d      	ldr	r3, [pc, #52]	; (800dc60 <z_tick_sleep.part.16+0x54>)
 800dc2a:	68a8      	ldr	r0, [r5, #8]
 800dc2c:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
 800dc2e:	f7ff ffc7 	bl	800dbc0 <z_remove_thread_from_ready_q>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 800dc32:	68a8      	ldr	r0, [r5, #8]
 800dc34:	4632      	mov	r2, r6
 800dc36:	490b      	ldr	r1, [pc, #44]	; (800dc64 <z_tick_sleep.part.16+0x58>)
 800dc38:	3018      	adds	r0, #24
 800dc3a:	f000 f949 	bl	800ded0 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
 800dc3e:	68aa      	ldr	r2, [r5, #8]
 800dc40:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800dc42:	7b53      	ldrb	r3, [r2, #13]
 800dc44:	f043 0310 	orr.w	r3, r3, #16
 800dc48:	7353      	strb	r3, [r2, #13]
 800dc4a:	f7ff f8fd 	bl	800ce48 <__swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
 800dc4e:	f009 f890 	bl	8016d72 <z_tick_get_32>
 800dc52:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
 800dc54:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800dc58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	20028e14 	.word	0x20028e14
 800dc60:	20028e40 	.word	0x20028e40
 800dc64:	08016c0b 	.word	0x08016c0b

0800dc68 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 800dc68:	4b04      	ldr	r3, [pc, #16]	; (800dc7c <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 800dc6a:	2100      	movs	r1, #0
 800dc6c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800dc70:	4608      	mov	r0, r1
	list->tail = (sys_dnode_t *)list;
 800dc72:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
 800dc76:	f7ff be77 	b.w	800d968 <k_sched_time_slice_set>
 800dc7a:	bf00      	nop
 800dc7c:	20028e14 	.word	0x20028e14

0800dc80 <z_impl_k_yield>:
{
 800dc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!is_idle(_current)) {
 800dc82:	4c22      	ldr	r4, [pc, #136]	; (800dd0c <z_impl_k_yield+0x8c>)
 800dc84:	4b22      	ldr	r3, [pc, #136]	; (800dd10 <z_impl_k_yield+0x90>)
 800dc86:	68a2      	ldr	r2, [r4, #8]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	429a      	cmp	r2, r3
 800dc8c:	d025      	beq.n	800dcda <z_impl_k_yield+0x5a>
 800dc8e:	f04f 0310 	mov.w	r3, #16
 800dc92:	f3ef 8611 	mrs	r6, BASEPRI
 800dc96:	f383 8811 	msr	BASEPRI, r3
 800dc9a:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
 800dc9e:	f104 0524 	add.w	r5, r4, #36	; 0x24
 800dca2:	68a1      	ldr	r1, [r4, #8]
 800dca4:	4628      	mov	r0, r5
 800dca6:	f7ff fe91 	bl	800d9cc <z_priq_dumb_remove>
	return list->head == list;
 800dcaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
				_priq_run_add(&_kernel.ready_q.runq,
 800dcac:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800dcae:	42ab      	cmp	r3, r5
 800dcb0:	d024      	beq.n	800dcfc <z_impl_k_yield+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800dcb2:	b31b      	cbz	r3, 800dcfc <z_impl_k_yield+0x7c>
 800dcb4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (t1->base.prio < t2->base.prio) {
 800dcb6:	f992 000e 	ldrsb.w	r0, [r2, #14]
 800dcba:	f993 700e 	ldrsb.w	r7, [r3, #14]
 800dcbe:	4287      	cmp	r7, r0
 800dcc0:	dd17      	ble.n	800dcf2 <z_impl_k_yield+0x72>
	node->prev = successor->prev;
 800dcc2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
 800dcc4:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
 800dcc8:	600a      	str	r2, [r1, #0]
	successor->prev = node;
 800dcca:	605a      	str	r2, [r3, #4]
			update_cache(1);
 800dccc:	2001      	movs	r0, #1
 800dcce:	f7ff fe93 	bl	800d9f8 <update_cache>
	__asm__ volatile(
 800dcd2:	f386 8811 	msr	BASEPRI, r6
 800dcd6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800dcda:	f04f 0310 	mov.w	r3, #16
 800dcde:	f3ef 8011 	mrs	r0, BASEPRI
 800dce2:	f383 8811 	msr	BASEPRI, r3
 800dce6:	f3bf 8f6f 	isb	sy
}
 800dcea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dcee:	f7ff b8ab 	b.w	800ce48 <__swap>
	return (node == list->tail) ? NULL : node->next;
 800dcf2:	4299      	cmp	r1, r3
 800dcf4:	d002      	beq.n	800dcfc <z_impl_k_yield+0x7c>
 800dcf6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d1de      	bne.n	800dcba <z_impl_k_yield+0x3a>
	node->prev = list->tail;
 800dcfc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	node->next = list;
 800dcfe:	6015      	str	r5, [r2, #0]
	node->prev = list->tail;
 800dd00:	6053      	str	r3, [r2, #4]
	list->tail->next = node;
 800dd02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dd04:	601a      	str	r2, [r3, #0]
	list->tail = node;
 800dd06:	62a2      	str	r2, [r4, #40]	; 0x28
 800dd08:	e7e0      	b.n	800dccc <z_impl_k_yield+0x4c>
 800dd0a:	bf00      	nop
 800dd0c:	20028e14 	.word	0x20028e14
 800dd10:	08017410 	.word	0x08017410

0800dd14 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
 800dd14:	4b01      	ldr	r3, [pc, #4]	; (800dd1c <z_impl_k_current_get+0x8>)
 800dd16:	6898      	ldr	r0, [r3, #8]
 800dd18:	4770      	bx	lr
 800dd1a:	bf00      	nop
 800dd1c:	20028e14 	.word	0x20028e14

0800dd20 <k_is_in_isr>:
 800dd20:	f3ef 8005 	mrs	r0, IPSR
 800dd24:	280d      	cmp	r0, #13
 800dd26:	d807      	bhi.n	800dd38 <k_is_in_isr+0x18>
 800dd28:	b138      	cbz	r0, 800dd3a <k_is_in_isr+0x1a>
 800dd2a:	4b04      	ldr	r3, [pc, #16]	; (800dd3c <k_is_in_isr+0x1c>)
 800dd2c:	6858      	ldr	r0, [r3, #4]
 800dd2e:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
 800dd32:	f3c0 20c0 	ubfx	r0, r0, #11, #1
 800dd36:	4770      	bx	lr
 800dd38:	2001      	movs	r0, #1
}

bool k_is_in_isr(void)
{
	return z_is_in_isr();
}
 800dd3a:	4770      	bx	lr
 800dd3c:	e000ed00 	.word	0xe000ed00

0800dd40 <z_is_thread_essential>:
 *
 * Returns true if current thread is essential, false if it is not.
 */
bool z_is_thread_essential(void)
{
	return (_current->base.user_options & K_ESSENTIAL) == K_ESSENTIAL;
 800dd40:	4b02      	ldr	r3, [pc, #8]	; (800dd4c <z_is_thread_essential+0xc>)
 800dd42:	689b      	ldr	r3, [r3, #8]
 800dd44:	7b18      	ldrb	r0, [r3, #12]
}
 800dd46:	f000 0001 	and.w	r0, r0, #1
 800dd4a:	4770      	bx	lr
 800dd4c:	20028e14 	.word	0x20028e14

0800dd50 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
 800dd50:	b510      	push	{r4, lr}
 800dd52:	4602      	mov	r2, r0
 800dd54:	f04f 0310 	mov.w	r3, #16
 800dd58:	f3ef 8411 	mrs	r4, BASEPRI
 800dd5c:	f383 8811 	msr	BASEPRI, r3
 800dd60:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
 800dd64:	7b43      	ldrb	r3, [r0, #13]
 800dd66:	0759      	lsls	r1, r3, #29
 800dd68:	d404      	bmi.n	800dd74 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
 800dd6a:	f384 8811 	msr	BASEPRI, r4
 800dd6e:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
 800dd72:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800dd74:	f023 0304 	bic.w	r3, r3, #4
 800dd78:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
 800dd7a:	f008 ff8a 	bl	8016c92 <z_is_thread_ready>
 800dd7e:	b110      	cbz	r0, 800dd86 <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
 800dd80:	4610      	mov	r0, r2
 800dd82:	f7ff fe73 	bl	800da6c <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
 800dd86:	4621      	mov	r1, r4
 800dd88:	4802      	ldr	r0, [pc, #8]	; (800dd94 <z_impl_k_thread_start+0x44>)
}
 800dd8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
 800dd8e:	f008 bf0d 	b.w	8016bac <z_reschedule>
 800dd92:	bf00      	nop
 800dd94:	2002cce6 	.word	0x2002cce6

0800dd98 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
 800dd98:	b530      	push	{r4, r5, lr}
 800dd9a:	b087      	sub	sp, #28
 800dd9c:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800dd9e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800dda0:	9504      	str	r5, [sp, #16]
 800dda2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800dda4:	9503      	str	r5, [sp, #12]
 800dda6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dda8:	9502      	str	r5, [sp, #8]
 800ddaa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ddac:	9501      	str	r5, [sp, #4]
 800ddae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ddb0:	9500      	str	r5, [sp, #0]
 800ddb2:	f7ff fa0d 	bl	800d1d0 <z_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 800ddb6:	4b03      	ldr	r3, [pc, #12]	; (800ddc4 <z_setup_new_thread+0x2c>)
 800ddb8:	689b      	ldr	r3, [r3, #8]
 800ddba:	b103      	cbz	r3, 800ddbe <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 800ddbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddbe:	65a3      	str	r3, [r4, #88]	; 0x58
	sys_trace_thread_create(new_thread);
}
 800ddc0:	b007      	add	sp, #28
 800ddc2:	bd30      	pop	{r4, r5, pc}
 800ddc4:	20028e14 	.word	0x20028e14

0800ddc8 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
 800ddc8:	b5f0      	push	{r4, r5, r6, r7, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
 800ddca:	4e1f      	ldr	r6, [pc, #124]	; (800de48 <z_init_static_threads+0x80>)
{
 800ddcc:	b087      	sub	sp, #28
 800ddce:	4d1f      	ldr	r5, [pc, #124]	; (800de4c <z_init_static_threads+0x84>)
 800ddd0:	4637      	mov	r7, r6
	_FOREACH_STATIC_THREAD(thread_data) {
 800ddd2:	42b5      	cmp	r5, r6
 800ddd4:	f105 0430 	add.w	r4, r5, #48	; 0x30
 800ddd8:	d30a      	bcc.n	800ddf0 <z_init_static_threads+0x28>
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
 800ddda:	4c1c      	ldr	r4, [pc, #112]	; (800de4c <z_init_static_threads+0x84>)
	k_sched_lock();
 800dddc:	f7ff fde2 	bl	800d9a4 <k_sched_lock>
 800dde0:	4d1b      	ldr	r5, [pc, #108]	; (800de50 <z_init_static_threads+0x88>)
	_FOREACH_STATIC_THREAD(thread_data) {
 800dde2:	42bc      	cmp	r4, r7
 800dde4:	d321      	bcc.n	800de2a <z_init_static_threads+0x62>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
 800dde6:	b007      	add	sp, #28
 800dde8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 800ddec:	f7ff be22 	b.w	800da34 <k_sched_unlock>
		z_setup_new_thread(
 800ddf0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ddf4:	9305      	str	r3, [sp, #20]
 800ddf6:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800ddfa:	9304      	str	r3, [sp, #16]
 800ddfc:	f854 3c14 	ldr.w	r3, [r4, #-20]
 800de00:	9303      	str	r3, [sp, #12]
 800de02:	f854 3c18 	ldr.w	r3, [r4, #-24]
 800de06:	9302      	str	r3, [sp, #8]
 800de08:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 800de0c:	9301      	str	r3, [sp, #4]
 800de0e:	f854 3c20 	ldr.w	r3, [r4, #-32]
 800de12:	9300      	str	r3, [sp, #0]
 800de14:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 800de18:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 800de1c:	f7ff ffbc 	bl	800dd98 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 800de20:	f854 3c30 	ldr.w	r3, [r4, #-48]
 800de24:	64dd      	str	r5, [r3, #76]	; 0x4c
 800de26:	4625      	mov	r5, r4
 800de28:	e7d3      	b.n	800ddd2 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
 800de2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800de2c:	1c53      	adds	r3, r2, #1
 800de2e:	d003      	beq.n	800de38 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
 800de30:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
 800de32:	b91a      	cbnz	r2, 800de3c <z_init_static_threads+0x74>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
 800de34:	f7ff ff8c 	bl	800dd50 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 800de38:	3430      	adds	r4, #48	; 0x30
 800de3a:	e7d2      	b.n	800dde2 <z_init_static_threads+0x1a>
 800de3c:	3201      	adds	r2, #1
 800de3e:	4629      	mov	r1, r5
 800de40:	3018      	adds	r0, #24
 800de42:	f000 f845 	bl	800ded0 <z_add_timeout>
 800de46:	e7f7      	b.n	800de38 <z_init_static_threads+0x70>
 800de48:	2002e978 	.word	0x2002e978
 800de4c:	2002e978 	.word	0x2002e978
 800de50:	08016c0b 	.word	0x08016c0b

0800de54 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
 800de54:	4b03      	ldr	r3, [pc, #12]	; (800de64 <elapsed+0x10>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	b90b      	cbnz	r3, 800de5e <elapsed+0xa>
 800de5a:	f7f2 be63 	b.w	8000b24 <z_clock_elapsed>
}
 800de5e:	2000      	movs	r0, #0
 800de60:	4770      	bx	lr
 800de62:	bf00      	nop
 800de64:	20028e4c 	.word	0x20028e4c

0800de68 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800de68:	6803      	ldr	r3, [r0, #0]
 800de6a:	b140      	cbz	r0, 800de7e <remove_timeout+0x16>
 800de6c:	4a07      	ldr	r2, [pc, #28]	; (800de8c <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
 800de6e:	6852      	ldr	r2, [r2, #4]
 800de70:	4290      	cmp	r0, r2
 800de72:	d004      	beq.n	800de7e <remove_timeout+0x16>
	if (next(t) != NULL) {
 800de74:	b11b      	cbz	r3, 800de7e <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
 800de76:	689a      	ldr	r2, [r3, #8]
 800de78:	6881      	ldr	r1, [r0, #8]
 800de7a:	440a      	add	r2, r1
 800de7c:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
 800de7e:	6842      	ldr	r2, [r0, #4]
 800de80:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 800de82:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800de84:	2300      	movs	r3, #0
	node->prev = NULL;
 800de86:	e9c0 3300 	strd	r3, r3, [r0]
}
 800de8a:	4770      	bx	lr
 800de8c:	2002e17c 	.word	0x2002e17c

0800de90 <next_timeout>:

static s32_t next_timeout(void)
{
 800de90:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
 800de92:	4b0d      	ldr	r3, [pc, #52]	; (800dec8 <next_timeout+0x38>)
 800de94:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800de96:	429c      	cmp	r4, r3
 800de98:	d011      	beq.n	800debe <next_timeout+0x2e>
	struct _timeout *to = first();
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - elapsed());
 800de9a:	b184      	cbz	r4, 800debe <next_timeout+0x2e>
 800de9c:	68a5      	ldr	r5, [r4, #8]
 800de9e:	f7ff ffd9 	bl	800de54 <elapsed>
 800dea2:	1a28      	subs	r0, r5, r0
 800dea4:	2800      	cmp	r0, #0
 800dea6:	db0d      	blt.n	800dec4 <next_timeout+0x34>
 800dea8:	68a4      	ldr	r4, [r4, #8]
 800deaa:	f7ff ffd3 	bl	800de54 <elapsed>
 800deae:	1a20      	subs	r0, r4, r0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 800deb0:	4b06      	ldr	r3, [pc, #24]	; (800decc <next_timeout+0x3c>)
 800deb2:	691b      	ldr	r3, [r3, #16]
 800deb4:	b113      	cbz	r3, 800debc <next_timeout+0x2c>
 800deb6:	4298      	cmp	r0, r3
 800deb8:	bfa8      	it	ge
 800deba:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 800debc:	bd38      	pop	{r3, r4, r5, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - elapsed());
 800debe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800dec2:	e7f5      	b.n	800deb0 <next_timeout+0x20>
 800dec4:	2000      	movs	r0, #0
 800dec6:	e7f3      	b.n	800deb0 <next_timeout+0x20>
 800dec8:	2002e17c 	.word	0x2002e17c
 800decc:	20028e14 	.word	0x20028e14

0800ded0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
 800ded0:	b570      	push	{r4, r5, r6, lr}
 800ded2:	4604      	mov	r4, r0
 800ded4:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 800ded6:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
 800ded8:	f04f 0310 	mov.w	r3, #16
 800dedc:	f3ef 8511 	mrs	r5, BASEPRI
 800dee0:	f383 8811 	msr	BASEPRI, r3
 800dee4:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
 800dee8:	f7ff ffb4 	bl	800de54 <elapsed>
	return list->head == list;
 800deec:	4b18      	ldr	r3, [pc, #96]	; (800df50 <z_add_timeout+0x80>)
 800deee:	2e01      	cmp	r6, #1
 800def0:	bfac      	ite	ge
 800def2:	1980      	addge	r0, r0, r6
 800def4:	3001      	addlt	r0, #1
 800def6:	681a      	ldr	r2, [r3, #0]
 800def8:	60a0      	str	r0, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800defa:	429a      	cmp	r2, r3
 800defc:	d001      	beq.n	800df02 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800defe:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
 800df00:	b932      	cbnz	r2, 800df10 <z_add_timeout+0x40>
	node->prev = list->tail;
 800df02:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 800df04:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
 800df06:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
 800df08:	685a      	ldr	r2, [r3, #4]
 800df0a:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800df0c:	605c      	str	r4, [r3, #4]
 800df0e:	e00a      	b.n	800df26 <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
 800df10:	6890      	ldr	r0, [r2, #8]
 800df12:	68a1      	ldr	r1, [r4, #8]
 800df14:	4288      	cmp	r0, r1
 800df16:	dd15      	ble.n	800df44 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
 800df18:	1a41      	subs	r1, r0, r1
 800df1a:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
 800df1c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 800df1e:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
 800df22:	600c      	str	r4, [r1, #0]
	successor->prev = node;
 800df24:	6054      	str	r4, [r2, #4]
	return list->head == list;
 800df26:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800df28:	429a      	cmp	r2, r3
 800df2a:	d006      	beq.n	800df3a <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 800df2c:	4294      	cmp	r4, r2
 800df2e:	d104      	bne.n	800df3a <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
 800df30:	f7ff ffae 	bl	800de90 <next_timeout>
 800df34:	2100      	movs	r1, #0
 800df36:	f7f2 fda5 	bl	8000a84 <z_clock_set_timeout>
	__asm__ volatile(
 800df3a:	f385 8811 	msr	BASEPRI, r5
 800df3e:	f3bf 8f6f 	isb	sy
		}
	}
}
 800df42:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
 800df44:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 800df46:	42b2      	cmp	r2, r6
 800df48:	60a1      	str	r1, [r4, #8]
 800df4a:	d0da      	beq.n	800df02 <z_add_timeout+0x32>
 800df4c:	6812      	ldr	r2, [r2, #0]
 800df4e:	e7d7      	b.n	800df00 <z_add_timeout+0x30>
 800df50:	2002e17c 	.word	0x2002e17c

0800df54 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
 800df54:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800df58:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 800df5a:	f7ff fdfd 	bl	800db58 <z_time_slice>
	__asm__ volatile(
 800df5e:	f04f 0310 	mov.w	r3, #16
 800df62:	f3ef 8511 	mrs	r5, BASEPRI
 800df66:	f383 8811 	msr	BASEPRI, r3
 800df6a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 800df6e:	4f21      	ldr	r7, [pc, #132]	; (800dff4 <z_clock_announce+0xa0>)
 800df70:	4e21      	ldr	r6, [pc, #132]	; (800dff8 <z_clock_announce+0xa4>)
	return list->head == list;
 800df72:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800dffc <z_clock_announce+0xa8>
 800df76:	46b8      	mov	r8, r7
 800df78:	6034      	str	r4, [r6, #0]
 800df7a:	f8d9 4000 	ldr.w	r4, [r9]
 800df7e:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800df80:	454c      	cmp	r4, r9
 800df82:	e9d7 bc00 	ldrd	fp, ip, [r7]
 800df86:	d005      	beq.n	800df94 <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
 800df88:	b124      	cbz	r4, 800df94 <z_clock_announce+0x40>
 800df8a:	68a3      	ldr	r3, [r4, #8]
 800df8c:	4293      	cmp	r3, r2
 800df8e:	dd15      	ble.n	800dfbc <z_clock_announce+0x68>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 800df90:	1a9b      	subs	r3, r3, r2
 800df92:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
 800df94:	eb1b 0002 	adds.w	r0, fp, r2
	announce_remaining = 0;
 800df98:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
 800df9c:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
 800dfa0:	6034      	str	r4, [r6, #0]
	curr_tick += announce_remaining;
 800dfa2:	e9c8 0100 	strd	r0, r1, [r8]

	z_clock_set_timeout(next_timeout(), false);
 800dfa6:	f7ff ff73 	bl	800de90 <next_timeout>
 800dfaa:	4621      	mov	r1, r4
 800dfac:	f7f2 fd6a 	bl	8000a84 <z_clock_set_timeout>
	__asm__ volatile(
 800dfb0:	f385 8811 	msr	BASEPRI, r5
 800dfb4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 800dfb8:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
 800dfbc:	eb1b 0003 	adds.w	r0, fp, r3
 800dfc0:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
 800dfc4:	1ad3      	subs	r3, r2, r3
 800dfc6:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
 800dfc8:	2300      	movs	r3, #0
		curr_tick += dt;
 800dfca:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
 800dfce:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	f7ff ff49 	bl	800de68 <remove_timeout>
 800dfd6:	f385 8811 	msr	BASEPRI, r5
 800dfda:	f3bf 8f6f 	isb	sy
		t->fn(t);
 800dfde:	68e3      	ldr	r3, [r4, #12]
 800dfe0:	4798      	blx	r3
	__asm__ volatile(
 800dfe2:	f04f 0310 	mov.w	r3, #16
 800dfe6:	f3ef 8511 	mrs	r5, BASEPRI
 800dfea:	f383 8811 	msr	BASEPRI, r3
 800dfee:	f3bf 8f6f 	isb	sy
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 800dff2:	e7c2      	b.n	800df7a <z_clock_announce+0x26>
 800dff4:	20020000 	.word	0x20020000
 800dff8:	20028e4c 	.word	0x20028e4c
 800dffc:	2002e17c 	.word	0x2002e17c

0800e000 <z_tick_get>:

s64_t z_tick_get(void)
{
 800e000:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
 800e004:	f04f 0310 	mov.w	r3, #16
 800e008:	f3ef 8411 	mrs	r4, BASEPRI
 800e00c:	f383 8811 	msr	BASEPRI, r3
 800e010:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
 800e014:	f7f2 fd86 	bl	8000b24 <z_clock_elapsed>
 800e018:	4b07      	ldr	r3, [pc, #28]	; (800e038 <z_tick_get+0x38>)
 800e01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01e:	eb12 0b00 	adds.w	fp, r2, r0
 800e022:	f143 0c00 	adc.w	ip, r3, #0
 800e026:	4658      	mov	r0, fp
 800e028:	4661      	mov	r1, ip
	__asm__ volatile(
 800e02a:	f384 8811 	msr	BASEPRI, r4
 800e02e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 800e032:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
 800e036:	bf00      	nop
 800e038:	20020000 	.word	0x20020000

0800e03c <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
 800e03c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
 800e03e:	4c07      	ldr	r4, [pc, #28]	; (800e05c <init_static_pools+0x20>)
 800e040:	4d07      	ldr	r5, [pc, #28]	; (800e060 <init_static_pools+0x24>)
 800e042:	42ac      	cmp	r4, r5
 800e044:	d301      	bcc.n	800e04a <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
 800e046:	2000      	movs	r0, #0
 800e048:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 800e04a:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
 800e04e:	4620      	mov	r0, r4
	list->tail = (sys_dnode_t *)list;
 800e050:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800e054:	f000 f838 	bl	800e0c8 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
 800e058:	341c      	adds	r4, #28
 800e05a:	e7f2      	b.n	800e042 <init_static_pools+0x6>
 800e05c:	2002e978 	.word	0x2002e978
 800e060:	2002e978 	.word	0x2002e978

0800e064 <main>:

//static void SystemClock_Config(void);
//static void CPU_CACHE_Enable(void);

int main(void)
{
 800e064:	b508      	push	{r3, lr}


	//HAL_Init();
	//SystemClock_Config();
	lv_init();
 800e066:	f7f4 fc27 	bl	80028b8 <lv_init>
	tft_init();
 800e06a:	f7f4 f993 	bl	8002394 <tft_init>
	//touchpad_init();
	demo_create();
 800e06e:	f7fe fb9b 	bl	800c7a8 <demo_create>
	//benchmark_create();
	//lv_test_theme_2(); */

	while(1) {
		lv_task_handler();
 800e072:	f7f5 febb 	bl	8003dec <lv_task_handler>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, ms)
 800e076:	2005      	movs	r0, #5
 800e078:	f008 fdf8 	bl	8016c6c <z_impl_k_sleep>
 800e07c:	e7f9      	b.n	800e072 <main+0xe>

0800e07e <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
 800e07e:	b570      	push	{r4, r5, r6, lr}
 800e080:	68c6      	ldr	r6, [r0, #12]
 800e082:	250c      	movs	r5, #12
	u32_t *bitarray = level <= p->max_inline_level ?
 800e084:	f990 000b 	ldrsb.w	r0, [r0, #11]
 800e088:	434d      	muls	r5, r1
		&p->levels[level].bits : p->levels[level].bits_p;
 800e08a:	4288      	cmp	r0, r1

	*word = &bitarray[bn / 32];
 800e08c:	4610      	mov	r0, r2
 800e08e:	eb06 0405 	add.w	r4, r6, r5
		&p->levels[level].bits : p->levels[level].bits_p;
 800e092:	bfb8      	it	lt
 800e094:	5974      	ldrlt	r4, [r6, r5]
	*word = &bitarray[bn / 32];
 800e096:	2a00      	cmp	r2, #0
 800e098:	bfb8      	it	lt
 800e09a:	f102 001f 	addlt.w	r0, r2, #31
 800e09e:	1140      	asrs	r0, r0, #5
 800e0a0:	eb04 0180 	add.w	r1, r4, r0, lsl #2

	return bn & 0x1f;
}
 800e0a4:	f002 001f 	and.w	r0, r2, #31
	*word = &bitarray[bn / 32];
 800e0a8:	6019      	str	r1, [r3, #0]
}
 800e0aa:	bd70      	pop	{r4, r5, r6, pc}

0800e0ac <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
 800e0ac:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
 800e0ae:	ab01      	add	r3, sp, #4
 800e0b0:	f7ff ffe5 	bl	800e07e <get_bit_ptr>

	*word |= (1<<bit);
 800e0b4:	9a01      	ldr	r2, [sp, #4]
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	fa03 f000 	lsl.w	r0, r3, r0
 800e0bc:	6813      	ldr	r3, [r2, #0]
 800e0be:	4303      	orrs	r3, r0
 800e0c0:	6013      	str	r3, [r2, #0]
}
 800e0c2:	b003      	add	sp, #12
 800e0c4:	f85d fb04 	ldr.w	pc, [sp], #4

0800e0c8 <z_sys_mem_pool_base_init>:

	return block_end <= (parent + parent_sz);
}

void z_sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
 800e0c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 800e0cc:	6843      	ldr	r3, [r0, #4]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);

	p->max_inline_level = -1;
 800e0ce:	22ff      	movs	r2, #255	; 0xff
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 800e0d0:	8906      	ldrh	r6, [r0, #8]
{
 800e0d2:	4604      	mov	r4, r0
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
 800e0d4:	6805      	ldr	r5, [r0, #0]

	for (i = 0; i < p->n_levels; i++) {
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
 800e0d6:	f04f 0e0c 	mov.w	lr, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 800e0da:	435e      	muls	r6, r3
	for (i = 0; i < p->n_levels; i++) {
 800e0dc:	f890 c00a 	ldrb.w	ip, [r0, #10]
	p->max_inline_level = -1;
 800e0e0:	72c2      	strb	r2, [r0, #11]
	for (i = 0; i < p->n_levels; i++) {
 800e0e2:	2000      	movs	r0, #0
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
 800e0e4:	4435      	add	r5, r6
	for (i = 0; i < p->n_levels; i++) {
 800e0e6:	4584      	cmp	ip, r0
 800e0e8:	dc05      	bgt.n	800e0f6 <z_sys_mem_pool_base_init+0x2e>
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
 800e0ea:	2500      	movs	r5, #0
 800e0ec:	8923      	ldrh	r3, [r4, #8]
 800e0ee:	42ab      	cmp	r3, r5
 800e0f0:	dc21      	bgt.n	800e136 <z_sys_mem_pool_base_init+0x6e>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
 800e0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sys_dlist_init(&p->levels[i].free_list);
 800e0f6:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800e0fa:	fb0e f700 	mul.w	r7, lr, r0
		int nblocks = buflen / sz;
 800e0fe:	fbb6 f1f3 	udiv	r1, r6, r3
		sys_dlist_init(&p->levels[i].free_list);
 800e102:	eb08 0207 	add.w	r2, r8, r7
		if (nblocks <= 32) {
 800e106:	2920      	cmp	r1, #32
		sys_dlist_init(&p->levels[i].free_list);
 800e108:	f102 0904 	add.w	r9, r2, #4
 800e10c:	e9c2 9901 	strd	r9, r9, [r2, #4]
		if (nblocks <= 32) {
 800e110:	dc06      	bgt.n	800e120 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
 800e112:	72e0      	strb	r0, [r4, #11]
		sz = _ALIGN4(sz / 4);
 800e114:	089b      	lsrs	r3, r3, #2
	for (i = 0; i < p->n_levels; i++) {
 800e116:	3001      	adds	r0, #1
		sz = _ALIGN4(sz / 4);
 800e118:	3303      	adds	r3, #3
 800e11a:	f023 0303 	bic.w	r3, r3, #3
 800e11e:	e7e2      	b.n	800e0e6 <z_sys_mem_pool_base_init+0x1e>
			bits += (nblocks + 31)/32;
 800e120:	f111 021f 	adds.w	r2, r1, #31
			p->levels[i].bits_p = bits;
 800e124:	f848 5007 	str.w	r5, [r8, r7]
			bits += (nblocks + 31)/32;
 800e128:	bf48      	it	mi
 800e12a:	f101 023e 	addmi.w	r2, r1, #62	; 0x3e
 800e12e:	1152      	asrs	r2, r2, #5
 800e130:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800e134:	e7ee      	b.n	800e114 <z_sys_mem_pool_base_init+0x4c>
		sys_dlist_append(&p->levels[0].free_list, block);
 800e136:	68e3      	ldr	r3, [r4, #12]
	return (u8_t *)p->buf + lsz * block;
 800e138:	6862      	ldr	r2, [r4, #4]
 800e13a:	6820      	ldr	r0, [r4, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
 800e13c:	1d1e      	adds	r6, r3, #4
	return (u8_t *)p->buf + lsz * block;
 800e13e:	436a      	muls	r2, r5
 800e140:	1881      	adds	r1, r0, r2
	node->next = list;
 800e142:	5086      	str	r6, [r0, r2]
	node->prev = list->tail;
 800e144:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
 800e146:	4620      	mov	r0, r4
 800e148:	604a      	str	r2, [r1, #4]
	list->tail->next = node;
 800e14a:	689a      	ldr	r2, [r3, #8]
 800e14c:	6011      	str	r1, [r2, #0]
 800e14e:	462a      	mov	r2, r5
	list->tail = node;
 800e150:	6099      	str	r1, [r3, #8]
 800e152:	2100      	movs	r1, #0
 800e154:	f7ff ffaa 	bl	800e0ac <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
 800e158:	3501      	adds	r5, #1
 800e15a:	e7c7      	b.n	800e0ec <z_sys_mem_pool_base_init+0x24>

0800e15c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 800e15c:	b508      	push	{r3, lr}
 800e15e:	4604      	mov	r4, r0
 800e160:	4608      	mov	r0, r1
 800e162:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 800e164:	461a      	mov	r2, r3
 800e166:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
 800e168:	f7ff fdd4 	bl	800dd14 <z_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
 800e16c:	f7ff f8d2 	bl	800d314 <z_impl_k_thread_abort>

0800e170 <z_arch_printk_char_out>:
}
 800e170:	2000      	movs	r0, #0
 800e172:	4770      	bx	lr

0800e174 <print_err>:
{
 800e174:	b570      	push	{r4, r5, r6, lr}
 800e176:	460d      	mov	r5, r1
 800e178:	4604      	mov	r4, r0
	out('E', ctx);
 800e17a:	2045      	movs	r0, #69	; 0x45
 800e17c:	47a0      	blx	r4
	out('R', ctx);
 800e17e:	4629      	mov	r1, r5
 800e180:	2052      	movs	r0, #82	; 0x52
 800e182:	47a0      	blx	r4
	out('R', ctx);
 800e184:	4629      	mov	r1, r5
 800e186:	4623      	mov	r3, r4
 800e188:	2052      	movs	r0, #82	; 0x52
}
 800e18a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
 800e18e:	4718      	bx	r3

0800e190 <z_vprintk>:
{
 800e190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
 800e194:	f04f 0800 	mov.w	r8, #0
{
 800e198:	b08b      	sub	sp, #44	; 0x2c
 800e19a:	461c      	mov	r4, r3
 800e19c:	4606      	mov	r6, r0
 800e19e:	1e53      	subs	r3, r2, #1
 800e1a0:	460f      	mov	r7, r1
	int min_width = -1;
 800e1a2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
 800e1a6:	46c1      	mov	r9, r8
 800e1a8:	9302      	str	r3, [sp, #8]
			might_format = 0;
 800e1aa:	2500      	movs	r5, #0
					break;
 800e1ac:	e005      	b.n	800e1ba <z_vprintk+0x2a>
		if (!might_format) {
 800e1ae:	b96d      	cbnz	r5, 800e1cc <z_vprintk+0x3c>
			if (*fmt != '%') {
 800e1b0:	2825      	cmp	r0, #37	; 0x25
 800e1b2:	f000 814f 	beq.w	800e454 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
 800e1b6:	4639      	mov	r1, r7
 800e1b8:	47b0      	blx	r6
	while (*fmt) {
 800e1ba:	9b02      	ldr	r3, [sp, #8]
 800e1bc:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800e1c0:	9302      	str	r3, [sp, #8]
 800e1c2:	2800      	cmp	r0, #0
 800e1c4:	d1f3      	bne.n	800e1ae <z_vprintk+0x1e>
}
 800e1c6:	b00b      	add	sp, #44	; 0x2c
 800e1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
 800e1cc:	2864      	cmp	r0, #100	; 0x64
 800e1ce:	d06e      	beq.n	800e2ae <z_vprintk+0x11e>
 800e1d0:	d81a      	bhi.n	800e208 <z_vprintk+0x78>
 800e1d2:	2839      	cmp	r0, #57	; 0x39
 800e1d4:	d80a      	bhi.n	800e1ec <z_vprintk+0x5c>
 800e1d6:	2831      	cmp	r0, #49	; 0x31
 800e1d8:	d260      	bcs.n	800e29c <z_vprintk+0x10c>
 800e1da:	282d      	cmp	r0, #45	; 0x2d
 800e1dc:	f000 8140 	beq.w	800e460 <z_vprintk+0x2d0>
 800e1e0:	2830      	cmp	r0, #48	; 0x30
 800e1e2:	d04c      	beq.n	800e27e <z_vprintk+0xee>
 800e1e4:	2825      	cmp	r0, #37	; 0x25
 800e1e6:	d107      	bne.n	800e1f8 <z_vprintk+0x68>
				out((int)'%', ctx);
 800e1e8:	4639      	mov	r1, r7
 800e1ea:	e00b      	b.n	800e204 <z_vprintk+0x74>
			switch (*fmt) {
 800e1ec:	2858      	cmp	r0, #88	; 0x58
 800e1ee:	f000 80bb 	beq.w	800e368 <z_vprintk+0x1d8>
 800e1f2:	2863      	cmp	r0, #99	; 0x63
 800e1f4:	f000 812a 	beq.w	800e44c <z_vprintk+0x2bc>
					out((int)'%', ctx);
 800e1f8:	4639      	mov	r1, r7
 800e1fa:	2025      	movs	r0, #37	; 0x25
 800e1fc:	47b0      	blx	r6
					out((int)*fmt, ctx);
 800e1fe:	9b02      	ldr	r3, [sp, #8]
 800e200:	4639      	mov	r1, r7
 800e202:	7818      	ldrb	r0, [r3, #0]
 800e204:	47b0      	blx	r6
 800e206:	e7d0      	b.n	800e1aa <z_vprintk+0x1a>
			switch (*fmt) {
 800e208:	2870      	cmp	r0, #112	; 0x70
 800e20a:	f000 80a3 	beq.w	800e354 <z_vprintk+0x1c4>
 800e20e:	d811      	bhi.n	800e234 <z_vprintk+0xa4>
 800e210:	2869      	cmp	r0, #105	; 0x69
 800e212:	d04c      	beq.n	800e2ae <z_vprintk+0x11e>
 800e214:	286c      	cmp	r0, #108	; 0x6c
 800e216:	d105      	bne.n	800e224 <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
 800e218:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 800e21c:	d12a      	bne.n	800e274 <z_vprintk+0xe4>
					length_mod = 'L';
 800e21e:	f04f 084c 	mov.w	r8, #76	; 0x4c
 800e222:	e7ca      	b.n	800e1ba <z_vprintk+0x2a>
			switch (*fmt) {
 800e224:	2868      	cmp	r0, #104	; 0x68
 800e226:	d1e7      	bne.n	800e1f8 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
 800e228:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
 800e22c:	d122      	bne.n	800e274 <z_vprintk+0xe4>
					length_mod = 'H';
 800e22e:	f04f 0848 	mov.w	r8, #72	; 0x48
 800e232:	e7c2      	b.n	800e1ba <z_vprintk+0x2a>
			switch (*fmt) {
 800e234:	2875      	cmp	r0, #117	; 0x75
 800e236:	d071      	beq.n	800e31c <z_vprintk+0x18c>
 800e238:	d818      	bhi.n	800e26c <z_vprintk+0xdc>
 800e23a:	2873      	cmp	r0, #115	; 0x73
 800e23c:	d1dc      	bne.n	800e1f8 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
 800e23e:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
 800e242:	46ab      	mov	fp, r5
 800e244:	465b      	mov	r3, fp
 800e246:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800e24a:	2800      	cmp	r0, #0
 800e24c:	f040 80fb 	bne.w	800e446 <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
 800e250:	f1b9 0f03 	cmp.w	r9, #3
 800e254:	f040 810a 	bne.w	800e46c <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
 800e258:	1b5d      	subs	r5, r3, r5
 800e25a:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
 800e25e:	2d00      	cmp	r5, #0
 800e260:	dda3      	ble.n	800e1aa <z_vprintk+0x1a>
						out(' ', ctx);
 800e262:	4639      	mov	r1, r7
 800e264:	2020      	movs	r0, #32
 800e266:	47b0      	blx	r6
 800e268:	3d01      	subs	r5, #1
 800e26a:	e7f8      	b.n	800e25e <z_vprintk+0xce>
			switch (*fmt) {
 800e26c:	2878      	cmp	r0, #120	; 0x78
 800e26e:	d07b      	beq.n	800e368 <z_vprintk+0x1d8>
 800e270:	287a      	cmp	r0, #122	; 0x7a
 800e272:	d1c1      	bne.n	800e1f8 <z_vprintk+0x68>
				} else if (length_mod == 0) {
 800e274:	f1b8 0f00 	cmp.w	r8, #0
 800e278:	d1be      	bne.n	800e1f8 <z_vprintk+0x68>
 800e27a:	4680      	mov	r8, r0
 800e27c:	e79d      	b.n	800e1ba <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
 800e27e:	f1ba 0f00 	cmp.w	sl, #0
 800e282:	da0e      	bge.n	800e2a2 <z_vprintk+0x112>
 800e284:	f1b9 0f00 	cmp.w	r9, #0
 800e288:	f000 80ed 	beq.w	800e466 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
 800e28c:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
 800e290:	f1b9 0f00 	cmp.w	r9, #0
 800e294:	bf08      	it	eq
 800e296:	f04f 0902 	moveq.w	r9, #2
 800e29a:	e78e      	b.n	800e1ba <z_vprintk+0x2a>
				if (min_width < 0) {
 800e29c:	f1ba 0f00 	cmp.w	sl, #0
 800e2a0:	dbf4      	blt.n	800e28c <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
 800e2a2:	230a      	movs	r3, #10
 800e2a4:	fb03 0a0a 	mla	sl, r3, sl, r0
 800e2a8:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
 800e2ac:	e7f0      	b.n	800e290 <z_vprintk+0x100>
				if (length_mod == 'z') {
 800e2ae:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
 800e2b2:	d102      	bne.n	800e2ba <z_vprintk+0x12a>
					d = va_arg(ap, int);
 800e2b4:	f854 5b04 	ldr.w	r5, [r4], #4
 800e2b8:	e01f      	b.n	800e2fa <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
 800e2ba:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 800e2be:	d0f9      	beq.n	800e2b4 <z_vprintk+0x124>
				} else if (length_mod == 'L') {
 800e2c0:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
 800e2c4:	d1f6      	bne.n	800e2b4 <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
 800e2c6:	3407      	adds	r4, #7
					if (lld > __LONG_MAX__ ||
 800e2c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					long long lld = va_arg(ap, long long);
 800e2cc:	f024 0407 	bic.w	r4, r4, #7
 800e2d0:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
 800e2d4:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
 800e2d8:	9106      	str	r1, [sp, #24]
 800e2da:	f143 0100 	adc.w	r1, r3, #0
 800e2de:	9107      	str	r1, [sp, #28]
 800e2e0:	2100      	movs	r1, #0
 800e2e2:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 800e2e6:	4561      	cmp	r1, ip
 800e2e8:	bf08      	it	eq
 800e2ea:	4558      	cmpeq	r0, fp
 800e2ec:	d204      	bcs.n	800e2f8 <z_vprintk+0x168>
						print_err(out, ctx);
 800e2ee:	4639      	mov	r1, r7
 800e2f0:	4630      	mov	r0, r6
 800e2f2:	f7ff ff3f 	bl	800e174 <print_err>
						break;
 800e2f6:	e758      	b.n	800e1aa <z_vprintk+0x1a>
					d = lld;
 800e2f8:	4615      	mov	r5, r2
				if (d < 0) {
 800e2fa:	2d00      	cmp	r5, #0
 800e2fc:	da05      	bge.n	800e30a <z_vprintk+0x17a>
					d = -d;
 800e2fe:	426d      	negs	r5, r5
					min_width--;
 800e300:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					out((int)'-', ctx);
 800e304:	4639      	mov	r1, r7
 800e306:	202d      	movs	r0, #45	; 0x2d
 800e308:	47b0      	blx	r6
				_printk_dec_ulong(out, ctx, d, padding,
 800e30a:	464b      	mov	r3, r9
 800e30c:	462a      	mov	r2, r5
 800e30e:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
 800e312:	4639      	mov	r1, r7
 800e314:	4630      	mov	r0, r6
 800e316:	f7f2 f8eb 	bl	80004f0 <_printk_dec_ulong>
				break;
 800e31a:	e746      	b.n	800e1aa <z_vprintk+0x1a>
				if (length_mod == 'z') {
 800e31c:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
 800e320:	d102      	bne.n	800e328 <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
 800e322:	f854 2b04 	ldr.w	r2, [r4], #4
 800e326:	e011      	b.n	800e34c <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
 800e328:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 800e32c:	d0f9      	beq.n	800e322 <z_vprintk+0x192>
				} else if (length_mod == 'L') {
 800e32e:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
 800e332:	d1f6      	bne.n	800e322 <z_vprintk+0x192>
					unsigned long long llu =
 800e334:	3407      	adds	r4, #7
					if (llu > ~0UL) {
 800e336:	2100      	movs	r1, #0
 800e338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
 800e33c:	f024 0407 	bic.w	r4, r4, #7
 800e340:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
 800e344:	4299      	cmp	r1, r3
 800e346:	bf08      	it	eq
 800e348:	4290      	cmpeq	r0, r2
 800e34a:	d3d0      	bcc.n	800e2ee <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
 800e34c:	f8cd a000 	str.w	sl, [sp]
 800e350:	464b      	mov	r3, r9
 800e352:	e7de      	b.n	800e312 <z_vprintk+0x182>
				  out('0', ctx);
 800e354:	4639      	mov	r1, r7
 800e356:	2030      	movs	r0, #48	; 0x30
				  min_width = 8;
 800e358:	f04f 0a08 	mov.w	sl, #8
				  padding = PAD_ZERO_BEFORE;
 800e35c:	f04f 0901 	mov.w	r9, #1
				  out('0', ctx);
 800e360:	47b0      	blx	r6
				  out('x', ctx);
 800e362:	4639      	mov	r1, r7
 800e364:	2078      	movs	r0, #120	; 0x78
 800e366:	47b0      	blx	r6
				if (*fmt == 'p') {
 800e368:	9b02      	ldr	r3, [sp, #8]
 800e36a:	781b      	ldrb	r3, [r3, #0]
 800e36c:	2b70      	cmp	r3, #112	; 0x70
 800e36e:	d104      	bne.n	800e37a <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
 800e370:	f854 3b04 	ldr.w	r3, [r4], #4
 800e374:	9304      	str	r3, [sp, #16]
 800e376:	2300      	movs	r3, #0
 800e378:	e00d      	b.n	800e396 <z_vprintk+0x206>
				} else if (length_mod == 'l') {
 800e37a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 800e37e:	d0f7      	beq.n	800e370 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
 800e380:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
 800e384:	d1f4      	bne.n	800e370 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
 800e386:	3407      	adds	r4, #7
 800e388:	f024 0307 	bic.w	r3, r4, #7
 800e38c:	461c      	mov	r4, r3
 800e38e:	685b      	ldr	r3, [r3, #4]
 800e390:	f854 2b08 	ldr.w	r2, [r4], #8
 800e394:	9204      	str	r2, [sp, #16]
	int digits = 0;
 800e396:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
 800e398:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
 800e39a:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
 800e39e:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
 800e3a0:	9105      	str	r1, [sp, #20]
		shift -= 4;
 800e3a2:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
 800e3a6:	9804      	ldr	r0, [sp, #16]
 800e3a8:	f1cb 0c20 	rsb	ip, fp, #32
 800e3ac:	f1ab 0120 	sub.w	r1, fp, #32
 800e3b0:	fa20 f00b 	lsr.w	r0, r0, fp
 800e3b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 800e3b8:	fa23 f101 	lsr.w	r1, r3, r1
 800e3bc:	ea40 000c 	orr.w	r0, r0, ip
 800e3c0:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
 800e3c2:	f010 000f 	ands.w	r0, r0, #15
 800e3c6:	d108      	bne.n	800e3da <z_vprintk+0x24a>
 800e3c8:	9905      	ldr	r1, [sp, #20]
 800e3ca:	b911      	cbnz	r1, 800e3d2 <z_vprintk+0x242>
 800e3cc:	f1bb 0f00 	cmp.w	fp, #0
 800e3d0:	d124      	bne.n	800e41c <z_vprintk+0x28c>
			nibble += nibble > 9 ? 87 : 48;
 800e3d2:	2130      	movs	r1, #48	; 0x30
 800e3d4:	e005      	b.n	800e3e2 <z_vprintk+0x252>
			found_largest_digit = 1;
 800e3d6:	9505      	str	r5, [sp, #20]
 800e3d8:	e7e3      	b.n	800e3a2 <z_vprintk+0x212>
			nibble += nibble > 9 ? 87 : 48;
 800e3da:	2809      	cmp	r0, #9
 800e3dc:	bf8c      	ite	hi
 800e3de:	2157      	movhi	r1, #87	; 0x57
 800e3e0:	2130      	movls	r1, #48	; 0x30
 800e3e2:	4408      	add	r0, r1
			out((int)nibble, ctx);
 800e3e4:	4639      	mov	r1, r7
 800e3e6:	9308      	str	r3, [sp, #32]
 800e3e8:	b240      	sxtb	r0, r0
 800e3ea:	9205      	str	r2, [sp, #20]
 800e3ec:	47b0      	blx	r6
			digits++;
 800e3ee:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
 800e3f0:	9a05      	ldr	r2, [sp, #20]
			digits++;
 800e3f2:	3301      	adds	r3, #1
 800e3f4:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
 800e3f6:	9b08      	ldr	r3, [sp, #32]
 800e3f8:	f1bb 0f00 	cmp.w	fp, #0
 800e3fc:	d1eb      	bne.n	800e3d6 <z_vprintk+0x246>
	if (padding == PAD_SPACE_AFTER) {
 800e3fe:	f1b9 0f03 	cmp.w	r9, #3
 800e402:	f47f aed2 	bne.w	800e1aa <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
 800e406:	9b03      	ldr	r3, [sp, #12]
 800e408:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
 800e40c:	2d00      	cmp	r5, #0
 800e40e:	f77f aecc 	ble.w	800e1aa <z_vprintk+0x1a>
			out(' ', ctx);
 800e412:	4639      	mov	r1, r7
 800e414:	2020      	movs	r0, #32
 800e416:	47b0      	blx	r6
 800e418:	3d01      	subs	r5, #1
 800e41a:	e7f7      	b.n	800e40c <z_vprintk+0x27c>
		if (remaining-- <= min_width) {
 800e41c:	1e51      	subs	r1, r2, #1
 800e41e:	4592      	cmp	sl, r2
 800e420:	9108      	str	r1, [sp, #32]
 800e422:	db07      	blt.n	800e434 <z_vprintk+0x2a4>
			if (padding == PAD_ZERO_BEFORE) {
 800e424:	f1b9 0f01 	cmp.w	r9, #1
 800e428:	d106      	bne.n	800e438 <z_vprintk+0x2a8>
				out('0', ctx);
 800e42a:	4639      	mov	r1, r7
 800e42c:	2030      	movs	r0, #48	; 0x30
 800e42e:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
 800e430:	47b0      	blx	r6
 800e432:	9b09      	ldr	r3, [sp, #36]	; 0x24
					x = va_arg(ap, unsigned int);
 800e434:	9a08      	ldr	r2, [sp, #32]
 800e436:	e7b4      	b.n	800e3a2 <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
 800e438:	f1b9 0f02 	cmp.w	r9, #2
 800e43c:	d1fa      	bne.n	800e434 <z_vprintk+0x2a4>
 800e43e:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
 800e440:	4639      	mov	r1, r7
 800e442:	2020      	movs	r0, #32
 800e444:	e7f4      	b.n	800e430 <z_vprintk+0x2a0>
					out((int)(*s++), ctx);
 800e446:	4639      	mov	r1, r7
 800e448:	47b0      	blx	r6
 800e44a:	e6fb      	b.n	800e244 <z_vprintk+0xb4>
				out(c, ctx);
 800e44c:	4639      	mov	r1, r7
 800e44e:	f854 0b04 	ldr.w	r0, [r4], #4
 800e452:	e6d7      	b.n	800e204 <z_vprintk+0x74>
				length_mod = 0;
 800e454:	46a8      	mov	r8, r5
				padding = PAD_NONE;
 800e456:	46a9      	mov	r9, r5
				min_width = -1;
 800e458:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
 800e45c:	2501      	movs	r5, #1
 800e45e:	e6ac      	b.n	800e1ba <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
 800e460:	f04f 0903 	mov.w	r9, #3
 800e464:	e6a9      	b.n	800e1ba <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
 800e466:	f04f 0901 	mov.w	r9, #1
 800e46a:	e6a6      	b.n	800e1ba <z_vprintk+0x2a>
			might_format = 0;
 800e46c:	4605      	mov	r5, r0
		++fmt;
 800e46e:	e6a4      	b.n	800e1ba <z_vprintk+0x2a>

0800e470 <printk>:
{
 800e470:	b40f      	push	{r0, r1, r2, r3}
 800e472:	b507      	push	{r0, r1, r2, lr}
 800e474:	a904      	add	r1, sp, #16
 800e476:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 800e47a:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
 800e47c:	f7f2 f88c 	bl	8000598 <vprintk>
}
 800e480:	b003      	add	sp, #12
 800e482:	f85d eb04 	ldr.w	lr, [sp], #4
 800e486:	b004      	add	sp, #16
 800e488:	4770      	bx	lr

0800e48a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 800e48a:	4770      	bx	lr

0800e48c <HAL_GetTick>:

K_SYSCALL_DECLARE1(K_SYSCALL_K_TIMER_USER_DATA_GET, k_timer_user_data_get, void *, struct k_timer *, timer)

K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)

K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
 800e48c:	f008 bc75 	b.w	8016d7a <z_impl_k_uptime_get_32>

0800e490 <HAL_Delay>:
 *	  on variable incremented.
 * @param Delay: specifies the delay time length, in milliseconds.
 * @return None
 */
void HAL_Delay(__IO uint32_t Delay)
{
 800e490:	b082      	sub	sp, #8
 800e492:	9001      	str	r0, [sp, #4]
	k_sleep(Delay);
 800e494:	9801      	ldr	r0, [sp, #4]
}
 800e496:	b002      	add	sp, #8
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, ms)
 800e498:	f008 bbe8 	b.w	8016c6c <z_impl_k_sleep>

0800e49c <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 800e49c:	4602      	mov	r2, r0
 800e49e:	2101      	movs	r1, #1
 800e4a0:	2000      	movs	r0, #0
 800e4a2:	f7f2 b911 	b.w	80006c8 <__stm32_exti_isr>

0800e4a6 <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 800e4a6:	4602      	mov	r2, r0
 800e4a8:	2102      	movs	r1, #2
 800e4aa:	2001      	movs	r0, #1
 800e4ac:	f7f2 b90c 	b.w	80006c8 <__stm32_exti_isr>

0800e4b0 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 800e4b0:	4602      	mov	r2, r0
 800e4b2:	2103      	movs	r1, #3
 800e4b4:	2002      	movs	r0, #2
 800e4b6:	f7f2 b907 	b.w	80006c8 <__stm32_exti_isr>

0800e4ba <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 800e4ba:	4602      	mov	r2, r0
 800e4bc:	2104      	movs	r1, #4
 800e4be:	2003      	movs	r0, #3
 800e4c0:	f7f2 b902 	b.w	80006c8 <__stm32_exti_isr>

0800e4c4 <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 800e4c4:	4602      	mov	r2, r0
 800e4c6:	2105      	movs	r1, #5
 800e4c8:	2004      	movs	r0, #4
 800e4ca:	f7f2 b8fd 	b.w	80006c8 <__stm32_exti_isr>

0800e4ce <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 800e4ce:	4602      	mov	r2, r0
 800e4d0:	210a      	movs	r1, #10
 800e4d2:	2005      	movs	r0, #5
 800e4d4:	f7f2 b8f8 	b.w	80006c8 <__stm32_exti_isr>

0800e4d8 <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 800e4d8:	4602      	mov	r2, r0
 800e4da:	2110      	movs	r1, #16
 800e4dc:	200a      	movs	r0, #10
 800e4de:	f7f2 b8f3 	b.w	80006c8 <__stm32_exti_isr>

0800e4e2 <__stm32_exti_isr_16>:
	__stm32_exti_isr(16, 17, arg);
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	2111      	movs	r1, #17
 800e4e6:	2010      	movs	r0, #16
 800e4e8:	f7f2 b8ee 	b.w	80006c8 <__stm32_exti_isr>

0800e4ec <__stm32_exti_isr_18>:
	__stm32_exti_isr(18, 19, arg);
 800e4ec:	4602      	mov	r2, r0
 800e4ee:	2113      	movs	r1, #19
 800e4f0:	2012      	movs	r0, #18
 800e4f2:	f7f2 b8e9 	b.w	80006c8 <__stm32_exti_isr>

0800e4f6 <__stm32_exti_isr_21>:
	__stm32_exti_isr(21, 22, arg);
 800e4f6:	4602      	mov	r2, r0
 800e4f8:	2116      	movs	r1, #22
 800e4fa:	2015      	movs	r0, #21
 800e4fc:	f7f2 b8e4 	b.w	80006c8 <__stm32_exti_isr>

0800e500 <__stm32_exti_isr_22>:
	__stm32_exti_isr(22, 23, arg);
 800e500:	4602      	mov	r2, r0
 800e502:	2117      	movs	r1, #23
 800e504:	2016      	movs	r0, #22
 800e506:	f7f2 b8df 	b.w	80006c8 <__stm32_exti_isr>

0800e50a <__stm32_exti_isr_23>:
	__stm32_exti_isr(23, 24, arg);
 800e50a:	4602      	mov	r2, r0
 800e50c:	2118      	movs	r1, #24
 800e50e:	2017      	movs	r0, #23
 800e510:	f7f2 b8da 	b.w	80006c8 <__stm32_exti_isr>

0800e514 <stm32_exti_init>:
      defined(CONFIG_SOC_SERIES_STM32F7X) || \
      defined(CONFIG_SOC_SERIES_STM32L1X) || \
      defined(CONFIG_SOC_SERIES_STM32L4X) || \
      defined(CONFIG_SOC_SERIES_STM32MP1X) || \
      defined(CONFIG_SOC_SERIES_STM32WBX)
	IRQ_CONNECT(EXTI0_IRQn,
 800e514:	2200      	movs	r2, #0
 800e516:	2006      	movs	r0, #6
{
 800e518:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 800e51a:	4611      	mov	r1, r2
 800e51c:	f7fe fe42 	bl	800d1a4 <z_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 800e520:	2200      	movs	r2, #0
 800e522:	2007      	movs	r0, #7
 800e524:	4611      	mov	r1, r2
 800e526:	f7fe fe3d 	bl	800d1a4 <z_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 800e52a:	2200      	movs	r2, #0
 800e52c:	2008      	movs	r0, #8
 800e52e:	4611      	mov	r1, r2
 800e530:	f7fe fe38 	bl	800d1a4 <z_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 800e534:	2200      	movs	r2, #0
 800e536:	2009      	movs	r0, #9
 800e538:	4611      	mov	r1, r2
 800e53a:	f7fe fe33 	bl	800d1a4 <z_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 800e53e:	2200      	movs	r2, #0
 800e540:	200a      	movs	r0, #10
 800e542:	4611      	mov	r1, r2
 800e544:	f7fe fe2e 	bl	800d1a4 <z_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_GET(exti_stm32),
		0);
#ifndef CONFIG_SOC_SERIES_STM32MP1X
	IRQ_CONNECT(EXTI9_5_IRQn,
 800e548:	2200      	movs	r2, #0
 800e54a:	2017      	movs	r0, #23
 800e54c:	4611      	mov	r1, r2
 800e54e:	f7fe fe29 	bl	800d1a4 <z_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 800e552:	2200      	movs	r2, #0
 800e554:	2028      	movs	r0, #40	; 0x28
 800e556:	4611      	mov	r1, r2
 800e558:	f7fe fe24 	bl	800d1a4 <z_irq_priority_set>
#endif /* CONFIG_SOC_SERIES_STM32MP1X */

#if defined(CONFIG_SOC_SERIES_STM32F2X) || \
      defined(CONFIG_SOC_SERIES_STM32F4X) || \
      defined(CONFIG_SOC_SERIES_STM32F7X)
	IRQ_CONNECT(PVD_IRQn,
 800e55c:	2200      	movs	r2, #0
 800e55e:	2001      	movs	r0, #1
 800e560:	4611      	mov	r1, r2
 800e562:	f7fe fe1f 	bl	800d1a4 <z_irq_priority_set>
		CONFIG_EXTI_STM32_PVD_IRQ_PRI,
		__stm32_exti_isr_16, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(OTG_FS_WKUP_IRQn,
 800e566:	2200      	movs	r2, #0
 800e568:	202a      	movs	r0, #42	; 0x2a
 800e56a:	4611      	mov	r1, r2
 800e56c:	f7fe fe1a 	bl	800d1a4 <z_irq_priority_set>
		CONFIG_EXTI_STM32_OTG_FS_WKUP_IRQ_PRI,
		__stm32_exti_isr_18, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(TAMP_STAMP_IRQn,
 800e570:	2200      	movs	r2, #0
 800e572:	2002      	movs	r0, #2
 800e574:	4611      	mov	r1, r2
 800e576:	f7fe fe15 	bl	800d1a4 <z_irq_priority_set>
		CONFIG_EXTI_STM32_TAMP_STAMP_IRQ_PRI,
		__stm32_exti_isr_21, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(RTC_WKUP_IRQn,
 800e57a:	2200      	movs	r2, #0
 800e57c:	2003      	movs	r0, #3
 800e57e:	4611      	mov	r1, r2
 800e580:	f7fe fe10 	bl	800d1a4 <z_irq_priority_set>
		CONFIG_EXTI_STM32_RTC_WKUP_IRQ_PRI,
		__stm32_exti_isr_22, DEVICE_GET(exti_stm32),
		0);
#endif
#if CONFIG_SOC_SERIES_STM32F7X
	IRQ_CONNECT(LPTIM1_IRQn,
 800e584:	2200      	movs	r2, #0
 800e586:	205d      	movs	r0, #93	; 0x5d
 800e588:	4611      	mov	r1, r2
 800e58a:	f7fe fe0b 	bl	800d1a4 <z_irq_priority_set>
}
 800e58e:	2000      	movs	r0, #0
 800e590:	bd08      	pop	{r3, pc}

0800e592 <config_pll_init>:
	pllinit->PLLN = CONFIG_CLOCK_STM32_PLL_N_MULTIPLIER;
 800e592:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800e596:	2219      	movs	r2, #25
 800e598:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLP = pllp(CONFIG_CLOCK_STM32_PLL_P_DIVISOR);
 800e59c:	2300      	movs	r3, #0
 800e59e:	6083      	str	r3, [r0, #8]
}
 800e5a0:	4770      	bx	lr

0800e5a2 <LL_RCC_MSI_Disable>:
 * @brief Function kept for driver genericity
 */
void LL_RCC_MSI_Disable(void)
{
	/* Do nothing */
}
 800e5a2:	4770      	bx	lr

0800e5a4 <HAL_DMA_DeInit>:
{
 800e5a4:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 800e5a6:	4605      	mov	r5, r0
 800e5a8:	b320      	cbz	r0, 800e5f4 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800e5aa:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800e5ae:	b2e4      	uxtb	r4, r4
 800e5b0:	2c02      	cmp	r4, #2
 800e5b2:	d01d      	beq.n	800e5f0 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 800e5b4:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 800e5b6:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 800e5b8:	681a      	ldr	r2, [r3, #0]
 800e5ba:	f022 0201 	bic.w	r2, r2, #1
 800e5be:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800e5c0:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 800e5c2:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 800e5c4:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 800e5c6:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 800e5c8:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 800e5ca:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800e5cc:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800e5ce:	f7f2 fb09 	bl	8000be4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e5d2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800e5d4:	233f      	movs	r3, #63	; 0x3f
 800e5d6:	4093      	lsls	r3, r2
 800e5d8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e5da:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 800e5dc:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 800e5e0:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 800e5e4:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 800e5e8:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 800e5ec:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
}
 800e5f0:	4620      	mov	r0, r4
 800e5f2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e5f4:	2401      	movs	r4, #1
 800e5f6:	e7fb      	b.n	800e5f0 <HAL_DMA_DeInit+0x4c>

0800e5f8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 800e5f8:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800e5fa:	6804      	ldr	r4, [r0, #0]
 800e5fc:	9d04      	ldr	r5, [sp, #16]
 800e5fe:	6c66      	ldr	r6, [r4, #68]	; 0x44
 800e600:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800e604:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 800e608:	4333      	orrs	r3, r6
 800e60a:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800e60c:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800e60e:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800e610:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e614:	d130      	bne.n	800e678 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800e616:	6886      	ldr	r6, [r0, #8]
 800e618:	b11e      	cbz	r6, 800e622 <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800e61a:	2e01      	cmp	r6, #1
 800e61c:	d103      	bne.n	800e626 <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800e61e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U );
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800e622:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800e624:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800e626:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800e628:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800e62c:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800e630:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800e632:	d107      	bne.n	800e644 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 800e634:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
 800e636:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800e638:	02c9      	lsls	r1, r1, #11
 800e63a:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 800e63e:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800e642:	e7ee      	b.n	800e622 <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800e644:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800e646:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800e64a:	d10a      	bne.n	800e662 <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 800e64c:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 800e64e:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800e650:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 800e652:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800e654:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 800e658:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 800e65c:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 800e660:	e7df      	b.n	800e622 <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 800e662:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 800e664:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800e666:	0209      	lsls	r1, r1, #8
      tmp1 = (tmp1 >> 28U);
 800e668:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800e66a:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 800e66e:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
 800e672:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 800e676:	e7d4      	b.n	800e622 <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800e678:	60e1      	str	r1, [r4, #12]
}
 800e67a:	e7d3      	b.n	800e624 <DMA2D_SetConfig+0x2c>

0800e67c <HAL_DMA2D_MspInit>:
}
 800e67c:	4770      	bx	lr

0800e67e <HAL_DMA2D_Init>:
{
 800e67e:	b510      	push	{r4, lr}
  if(hdma2d == NULL)
 800e680:	4604      	mov	r4, r0
 800e682:	b380      	cbz	r0, 800e6e6 <HAL_DMA2D_Init+0x68>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800e684:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800e688:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800e68c:	b91b      	cbnz	r3, 800e696 <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 800e68e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_DMA2D_MspInit(hdma2d);
 800e692:	f7ff fff3 	bl	800e67c <HAL_DMA2D_MspInit>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800e696:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800e698:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800e69a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800e69e:	6823      	ldr	r3, [r4, #0]
 800e6a0:	681a      	ldr	r2, [r3, #0]
 800e6a2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800e6a6:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800e6a8:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800e6aa:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800e6ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6ae:	f022 0207 	bic.w	r2, r2, #7
 800e6b2:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800e6b4:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800e6b6:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800e6b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e6ba:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 800e6be:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800e6c2:	430a      	orrs	r2, r1
 800e6c4:	641a      	str	r2, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800e6c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800e6c8:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800e6cc:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800e6d0:	0552      	lsls	r2, r2, #21
 800e6d2:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800e6d6:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800e6d8:	430a      	orrs	r2, r1
 800e6da:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800e6dc:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800e6de:	6560      	str	r0, [r4, #84]	; 0x54
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800e6e0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800e6e4:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 800e6e6:	2001      	movs	r0, #1
 800e6e8:	e7fc      	b.n	800e6e4 <HAL_DMA2D_Init+0x66>

0800e6ea <HAL_DMA2D_Start_IT>:
{
 800e6ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 800e6ec:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
{
 800e6f0:	4605      	mov	r5, r0
  __HAL_LOCK(hdma2d);
 800e6f2:	2c01      	cmp	r4, #1
 800e6f4:	f04f 0402 	mov.w	r4, #2
 800e6f8:	d013      	beq.n	800e722 <HAL_DMA2D_Start_IT+0x38>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800e6fa:	f880 4051 	strb.w	r4, [r0, #81]	; 0x51
  __HAL_LOCK(hdma2d);
 800e6fe:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800e700:	9c06      	ldr	r4, [sp, #24]
  __HAL_LOCK(hdma2d);
 800e702:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800e706:	9400      	str	r4, [sp, #0]
 800e708:	f7ff ff76 	bl	800e5f8 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800e70c:	682b      	ldr	r3, [r5, #0]
  return HAL_OK;
 800e70e:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800e710:	681a      	ldr	r2, [r3, #0]
 800e712:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 800e716:	601a      	str	r2, [r3, #0]
  __HAL_DMA2D_ENABLE(hdma2d);
 800e718:	681a      	ldr	r2, [r3, #0]
 800e71a:	4332      	orrs	r2, r6
 800e71c:	601a      	str	r2, [r3, #0]
}
 800e71e:	b002      	add	sp, #8
 800e720:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 800e722:	4620      	mov	r0, r4
 800e724:	e7fb      	b.n	800e71e <HAL_DMA2D_Start_IT+0x34>

0800e726 <DSI_ShortWrite>:
{
 800e726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e72a:	4607      	mov	r7, r0
 800e72c:	460d      	mov	r5, r1
 800e72e:	4614      	mov	r4, r2
 800e730:	461e      	mov	r6, r3
  tickstart = HAL_GetTick();
 800e732:	f7ff feab 	bl	800e48c <HAL_GetTick>
 800e736:	4680      	mov	r8, r0
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800e73c:	07d2      	lsls	r2, r2, #31
 800e73e:	d50a      	bpl.n	800e756 <DSI_ShortWrite+0x30>
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800e740:	ea44 2106 	orr.w	r1, r4, r6, lsl #8
 800e744:	9c06      	ldr	r4, [sp, #24]
  return HAL_OK;
 800e746:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800e748:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e74c:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
 800e750:	66d9      	str	r1, [r3, #108]	; 0x6c
}
 800e752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 800e756:	f7ff fe99 	bl	800e48c <HAL_GetTick>
 800e75a:	eba0 0008 	sub.w	r0, r0, r8
 800e75e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e762:	d9e9      	bls.n	800e738 <DSI_ShortWrite+0x12>
      return HAL_TIMEOUT;
 800e764:	2003      	movs	r0, #3
 800e766:	e7f4      	b.n	800e752 <DSI_ShortWrite+0x2c>

0800e768 <HAL_DSI_MspInit>:
}
 800e768:	4770      	bx	lr

0800e76a <HAL_DSI_MspDeInit>:
 800e76a:	4770      	bx	lr

0800e76c <HAL_DSI_DeInit>:
{
 800e76c:	b530      	push	{r4, r5, lr}
  if (hdsi == NULL)
 800e76e:	4605      	mov	r5, r0
{
 800e770:	b085      	sub	sp, #20
  if (hdsi == NULL)
 800e772:	2800      	cmp	r0, #0
 800e774:	d042      	beq.n	800e7fc <HAL_DSI_DeInit+0x90>
  hdsi->State = HAL_DSI_STATE_BUSY;
 800e776:	2303      	movs	r3, #3
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800e778:	2400      	movs	r4, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 800e77a:	7443      	strb	r3, [r0, #17]
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800e77c:	6803      	ldr	r3, [r0, #0]
 800e77e:	9400      	str	r4, [sp, #0]
 800e780:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e784:	f022 0208 	bic.w	r2, r2, #8
 800e788:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800e78c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e790:	f002 0208 	and.w	r2, r2, #8
 800e794:	9200      	str	r2, [sp, #0]
 800e796:	9a00      	ldr	r2, [sp, #0]
  __HAL_DSI_DISABLE(hdsi);
 800e798:	9401      	str	r4, [sp, #4]
 800e79a:	685a      	ldr	r2, [r3, #4]
 800e79c:	f022 0201 	bic.w	r2, r2, #1
 800e7a0:	605a      	str	r2, [r3, #4]
 800e7a2:	685a      	ldr	r2, [r3, #4]
 800e7a4:	f002 0201 	and.w	r2, r2, #1
 800e7a8:	9201      	str	r2, [sp, #4]
 800e7aa:	9a01      	ldr	r2, [sp, #4]
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800e7ac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e7b0:	f022 0206 	bic.w	r2, r2, #6
 800e7b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  __HAL_DSI_PLL_DISABLE(hdsi);
 800e7b8:	9402      	str	r4, [sp, #8]
 800e7ba:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800e7be:	f022 0201 	bic.w	r2, r2, #1
 800e7c2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800e7c6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800e7ca:	f002 0201 	and.w	r2, r2, #1
 800e7ce:	9202      	str	r2, [sp, #8]
 800e7d0:	9a02      	ldr	r2, [sp, #8]
  __HAL_DSI_REG_DISABLE(hdsi);
 800e7d2:	9403      	str	r4, [sp, #12]
 800e7d4:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800e7d8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800e7dc:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800e7e0:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800e7e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e7e8:	9303      	str	r3, [sp, #12]
 800e7ea:	9b03      	ldr	r3, [sp, #12]
  HAL_DSI_MspDeInit(hdsi);
 800e7ec:	f7ff ffbd 	bl	800e76a <HAL_DSI_MspDeInit>
  return HAL_OK;
 800e7f0:	4620      	mov	r0, r4
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800e7f2:	616c      	str	r4, [r5, #20]
  __HAL_UNLOCK(hdsi);
 800e7f4:	742c      	strb	r4, [r5, #16]
  hdsi->State = HAL_DSI_STATE_RESET;
 800e7f6:	746c      	strb	r4, [r5, #17]
}
 800e7f8:	b005      	add	sp, #20
 800e7fa:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800e7fc:	2001      	movs	r0, #1
 800e7fe:	e7fb      	b.n	800e7f8 <HAL_DSI_DeInit+0x8c>

0800e800 <HAL_DSI_ConfigAdaptedCommandMode>:
  __HAL_LOCK(hdsi);
 800e800:	7c03      	ldrb	r3, [r0, #16]
 800e802:	2b01      	cmp	r3, #1
{
 800e804:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdsi);
 800e806:	d06a      	beq.n	800e8de <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800e808:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800e80a:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800e80c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e80e:	f042 0201 	orr.w	r2, r2, #1
 800e812:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800e814:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800e818:	f022 0201 	bic.w	r2, r2, #1
 800e81c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800e820:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800e824:	f042 0201 	orr.w	r2, r2, #1
 800e828:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800e82c:	68da      	ldr	r2, [r3, #12]
 800e82e:	f022 0203 	bic.w	r2, r2, #3
 800e832:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800e834:	68da      	ldr	r2, [r3, #12]
 800e836:	4322      	orrs	r2, r4
 800e838:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800e83a:	695a      	ldr	r2, [r3, #20]
 800e83c:	f022 0207 	bic.w	r2, r2, #7
 800e840:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800e842:	695c      	ldr	r4, [r3, #20]
 800e844:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 800e848:	432a      	orrs	r2, r5
 800e84a:	694d      	ldr	r5, [r1, #20]
 800e84c:	432a      	orrs	r2, r5
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800e84e:	684d      	ldr	r5, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800e850:	4322      	orrs	r2, r4
 800e852:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800e854:	691a      	ldr	r2, [r3, #16]
 800e856:	f022 020f 	bic.w	r2, r2, #15
 800e85a:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800e85c:	691c      	ldr	r4, [r3, #16]
 800e85e:	432c      	orrs	r4, r5
 800e860:	611c      	str	r4, [r3, #16]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800e862:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 800e866:	f024 040e 	bic.w	r4, r4, #14
 800e86a:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800e86e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800e872:	688c      	ldr	r4, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800e874:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800e878:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800e87c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e87e:	0c12      	lsrs	r2, r2, #16
 800e880:	0412      	lsls	r2, r2, #16
 800e882:	665a      	str	r2, [r3, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800e884:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e886:	4322      	orrs	r2, r4
 800e888:	665a      	str	r2, [r3, #100]	; 0x64
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 800e88a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800e88e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800e892:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800e896:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 800e89a:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 800e89e:	432a      	orrs	r2, r5
 800e8a0:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800e8a2:	432a      	orrs	r2, r5
 800e8a4:	6a0d      	ldr	r5, [r1, #32]
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800e8a6:	6a89      	ldr	r1, [r1, #40]	; 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800e8a8:	432a      	orrs	r2, r5
 800e8aa:	4322      	orrs	r2, r4
 800e8ac:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800e8b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e8b2:	f022 0201 	bic.w	r2, r2, #1
 800e8b6:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800e8b8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e8ba:	430a      	orrs	r2, r1
 800e8bc:	669a      	str	r2, [r3, #104]	; 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800e8be:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800e8c2:	f042 0201 	orr.w	r2, r2, #1
 800e8c6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800e8ca:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800e8ce:	f042 0202 	orr.w	r2, r2, #2
 800e8d2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  __HAL_UNLOCK(hdsi);
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	7403      	strb	r3, [r0, #16]
  return HAL_OK;
 800e8da:	4618      	mov	r0, r3
}
 800e8dc:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800e8de:	2002      	movs	r0, #2
 800e8e0:	e7fc      	b.n	800e8dc <HAL_DSI_ConfigAdaptedCommandMode+0xdc>

0800e8e2 <HAL_DSI_ConfigPhyTimer>:
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800e8e2:	7c03      	ldrb	r3, [r0, #16]
 800e8e4:	2b01      	cmp	r3, #1
{
 800e8e6:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdsi);
 800e8e8:	d035      	beq.n	800e956 <HAL_DSI_ConfigPhyTimer+0x74>
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800e8ea:	6803      	ldr	r3, [r0, #0]
  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800e8ec:	e9d1 2400 	ldrd	r2, r4, [r1]
 800e8f0:	4294      	cmp	r4, r2
 800e8f2:	bf38      	it	cc
 800e8f4:	4614      	movcc	r4, r2
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800e8f6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e8fa:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800e8fe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800e902:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e906:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e90a:	4322      	orrs	r2, r4
 800e90c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800e910:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800e914:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800e918:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800e91c:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800e920:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800e924:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800e926:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800e92a:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800e92c:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800e92e:	432a      	orrs	r2, r5
 800e930:	4322      	orrs	r2, r4
 800e932:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800e936:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800e93a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800e93e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800e942:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800e946:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800e94a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800e94e:	2300      	movs	r3, #0
 800e950:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800e952:	4618      	mov	r0, r3
}
 800e954:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800e956:	2002      	movs	r0, #2
 800e958:	e7fc      	b.n	800e954 <HAL_DSI_ConfigPhyTimer+0x72>

0800e95a <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800e95a:	7c03      	ldrb	r3, [r0, #16]
{
 800e95c:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 800e95e:	2b01      	cmp	r3, #1
 800e960:	d01c      	beq.n	800e99c <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800e962:	6802      	ldr	r2, [r0, #0]
 800e964:	2300      	movs	r3, #0
 800e966:	9300      	str	r3, [sp, #0]
 800e968:	6851      	ldr	r1, [r2, #4]
 800e96a:	f041 0101 	orr.w	r1, r1, #1
 800e96e:	6051      	str	r1, [r2, #4]
 800e970:	6851      	ldr	r1, [r2, #4]
 800e972:	f001 0101 	and.w	r1, r1, #1
 800e976:	9100      	str	r1, [sp, #0]
 800e978:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800e97a:	9301      	str	r3, [sp, #4]
 800e97c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 800e980:	f041 0108 	orr.w	r1, r1, #8
 800e984:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 800e988:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800e98c:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800e98e:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800e990:	f002 0208 	and.w	r2, r2, #8
 800e994:	9201      	str	r2, [sp, #4]
 800e996:	9a01      	ldr	r2, [sp, #4]
}
 800e998:	b002      	add	sp, #8
 800e99a:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800e99c:	2002      	movs	r0, #2
 800e99e:	e7fb      	b.n	800e998 <HAL_DSI_Start+0x3e>

0800e9a0 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800e9a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800e9a2:	7c05      	ldrb	r5, [r0, #16]
{
 800e9a4:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800e9a6:	2d01      	cmp	r5, #1
 800e9a8:	d009      	beq.n	800e9be <HAL_DSI_ShortWrite+0x1e>
 800e9aa:	2501      	movs	r5, #1
 800e9ac:	7405      	strb	r5, [r0, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800e9ae:	9d06      	ldr	r5, [sp, #24]
 800e9b0:	9500      	str	r5, [sp, #0]
 800e9b2:	f7ff feb8 	bl	800e726 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	7423      	strb	r3, [r4, #16]

  return status;
}
 800e9ba:	b003      	add	sp, #12
 800e9bc:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800e9be:	2002      	movs	r0, #2
 800e9c0:	e7fb      	b.n	800e9ba <HAL_DSI_ShortWrite+0x1a>

0800e9c2 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800e9c2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c6:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800e9c8:	7c03      	ldrb	r3, [r0, #16]
{
 800e9ca:	4606      	mov	r6, r0
 800e9cc:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 800e9ce:	2b01      	cmp	r3, #1
{
 800e9d0:	4615      	mov	r5, r2
 800e9d2:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
  __HAL_LOCK(hdsi);
 800e9d6:	d052      	beq.n	800ea7e <HAL_DSI_LongWrite+0xbc>
 800e9d8:	2301      	movs	r3, #1
 800e9da:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800e9dc:	f7ff fd56 	bl	800e48c <HAL_GetTick>
 800e9e0:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800e9e2:	6832      	ldr	r2, [r6, #0]
 800e9e4:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800e9e6:	f013 0a01 	ands.w	sl, r3, #1
 800e9ea:	d019      	beq.n	800ea20 <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800e9ec:	2c03      	cmp	r4, #3
 800e9ee:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 800e9f0:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800e9f4:	bf28      	it	cs
 800e9f6:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 800e9f8:	4283      	cmp	r3, r0
 800e9fa:	d11d      	bne.n	800ea38 <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 800e9fc:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 800e9fe:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 800ea00:	f8c2 9070 	str.w	r9, [r2, #112]	; 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800ea04:	bb10      	cbnz	r0, 800ea4c <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800ea06:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800ea08:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 800ea0c:	0223      	lsls	r3, r4, #8
 800ea0e:	0224      	lsls	r4, r4, #8
 800ea10:	b29b      	uxth	r3, r3
 800ea12:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800ea16:	431d      	orrs	r5, r3
 800ea18:	432c      	orrs	r4, r5
 800ea1a:	66d4      	str	r4, [r2, #108]	; 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800ea1c:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 800ea1e:	e009      	b.n	800ea34 <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800ea20:	f7ff fd34 	bl	800e48c <HAL_GetTick>
 800ea24:	eba0 000b 	sub.w	r0, r0, fp
 800ea28:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ea2c:	d9d9      	bls.n	800e9e2 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 800ea2e:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800ea30:	f886 a010 	strb.w	sl, [r6, #16]
}
 800ea34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800ea38:	f818 1003 	ldrb.w	r1, [r8, r3]
 800ea3c:	3301      	adds	r3, #1
 800ea3e:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 800ea42:	fa01 f10c 	lsl.w	r1, r1, ip
 800ea46:	ea49 0901 	orr.w	r9, r9, r1
 800ea4a:	e7d5      	b.n	800e9f8 <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800ea4c:	2804      	cmp	r0, #4
    fifoword = 0U;
 800ea4e:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800ea52:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 800ea54:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800ea56:	bf28      	it	cs
 800ea58:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800ea5c:	f813 8001 	ldrb.w	r8, [r3, r1]
 800ea60:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 800ea64:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800ea66:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 800ea6a:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800ea6c:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 800ea70:	d1f4      	bne.n	800ea5c <HAL_DSI_LongWrite+0x9a>
    hdsi->Instance->GPDR = fifoword;
 800ea72:	f8c2 c070 	str.w	ip, [r2, #112]	; 0x70
    uicounter -= nbBytes;
 800ea76:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 800ea7a:	4473      	add	r3, lr
 800ea7c:	e7c2      	b.n	800ea04 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 800ea7e:	2002      	movs	r0, #2
 800ea80:	e7d8      	b.n	800ea34 <HAL_DSI_LongWrite+0x72>

0800ea82 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ea82:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ea84:	f8d1 c000 	ldr.w	ip, [r1]
{
 800ea88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ea8c:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ea8e:	6804      	ldr	r4, [r0, #0]
 800ea90:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ea92:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ea96:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ea98:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800ea9a:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800ea9e:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800eaa2:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800eaa4:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800eaa8:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800eaac:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800eaae:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800eab0:	68e0      	ldr	r0, [r4, #12]
 800eab2:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800eab6:	4430      	add	r0, r6
 800eab8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800eabc:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800eabe:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800eac0:	68e0      	ldr	r0, [r4, #12]
 800eac2:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800eac6:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800eac8:	6898      	ldr	r0, [r3, #8]
 800eaca:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 800eace:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ead0:	6888      	ldr	r0, [r1, #8]
 800ead2:	68e6      	ldr	r6, [r4, #12]
 800ead4:	3001      	adds	r0, #1
 800ead6:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800eada:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800eadc:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800eade:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800eae2:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800eae4:	6918      	ldr	r0, [r3, #16]
 800eae6:	f020 0007 	bic.w	r0, r0, #7
 800eaea:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800eaec:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800eaee:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800eaf0:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800eaf4:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800eaf8:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800eafc:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800eb00:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800eb04:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800eb08:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800eb0c:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800eb0e:	6958      	ldr	r0, [r3, #20]
 800eb10:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800eb14:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800eb16:	6948      	ldr	r0, [r1, #20]
 800eb18:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800eb1a:	69d8      	ldr	r0, [r3, #28]
 800eb1c:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800eb20:	f020 0007 	bic.w	r0, r0, #7
 800eb24:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800eb26:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 800eb2a:	4305      	orrs	r5, r0
 800eb2c:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800eb2e:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800eb30:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800eb32:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800eb36:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800eb38:	b31e      	cbz	r6, 800eb82 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800eb3a:	2e01      	cmp	r6, #1
 800eb3c:	d023      	beq.n	800eb86 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800eb3e:	1eb0      	subs	r0, r6, #2
 800eb40:	2802      	cmp	r0, #2
 800eb42:	d922      	bls.n	800eb8a <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800eb44:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 800eb46:	bf0c      	ite	eq
 800eb48:	2002      	moveq	r0, #2
 800eb4a:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800eb4c:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800eb4e:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800eb52:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 800eb56:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800eb58:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800eb5a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800eb5c:	4345      	muls	r5, r0
 800eb5e:	4378      	muls	r0, r7
 800eb60:	3003      	adds	r0, #3
 800eb62:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800eb66:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800eb68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800eb6a:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 800eb6e:	f020 0007 	bic.w	r0, r0, #7
 800eb72:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800eb74:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800eb76:	58a3      	ldr	r3, [r4, r2]
 800eb78:	f043 0301 	orr.w	r3, r3, #1
 800eb7c:	50a3      	str	r3, [r4, r2]
}
 800eb7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800eb82:	2004      	movs	r0, #4
 800eb84:	e7e2      	b.n	800eb4c <LTDC_SetConfig+0xca>
    tmp = 3U;
 800eb86:	2003      	movs	r0, #3
 800eb88:	e7e0      	b.n	800eb4c <LTDC_SetConfig+0xca>
    tmp = 2U;
 800eb8a:	2002      	movs	r0, #2
 800eb8c:	e7de      	b.n	800eb4c <LTDC_SetConfig+0xca>

0800eb8e <HAL_LTDC_MspInit>:
}
 800eb8e:	4770      	bx	lr

0800eb90 <HAL_LTDC_MspDeInit>:
 800eb90:	4770      	bx	lr

0800eb92 <HAL_LTDC_DeInit>:
{
 800eb92:	b510      	push	{r4, lr}
 800eb94:	4604      	mov	r4, r0
  HAL_LTDC_MspDeInit(hltdc);
 800eb96:	f7ff fffb 	bl	800eb90 <HAL_LTDC_MspDeInit>
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800eb9a:	2000      	movs	r0, #0
 800eb9c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  __HAL_UNLOCK(hltdc);
 800eba0:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_RESET;
 800eba4:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
}
 800eba8:	bd10      	pop	{r4, pc}

0800ebaa <HAL_LTDC_ConfigLayer>:
{
 800ebaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 800ebac:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 800ebb0:	4606      	mov	r6, r0
 800ebb2:	468c      	mov	ip, r1
 800ebb4:	4696      	mov	lr, r2
  __HAL_LOCK(hltdc);
 800ebb6:	2b01      	cmp	r3, #1
 800ebb8:	f04f 0002 	mov.w	r0, #2
 800ebbc:	d01d      	beq.n	800ebfa <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ebbe:	2434      	movs	r4, #52	; 0x34
 800ebc0:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ebc2:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  __HAL_LOCK(hltdc);
 800ebc6:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ebc8:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800ebcc:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ebd0:	3438      	adds	r4, #56	; 0x38
 800ebd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ebd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ebd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ebd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ebda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ebdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ebde:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800ebe0:	4630      	mov	r0, r6
 800ebe2:	4672      	mov	r2, lr
 800ebe4:	4661      	mov	r1, ip
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ebe6:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800ebe8:	f7ff ff4b 	bl	800ea82 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800ebec:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800ebee:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800ebf0:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800ebf2:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800ebf6:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 800ebfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ebfc <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800ebfc:	4770      	bx	lr

0800ebfe <HAL_SDRAM_Init>:
{
 800ebfe:	b538      	push	{r3, r4, r5, lr}
 800ec00:	460d      	mov	r5, r1
  if(hsdram == NULL)
 800ec02:	4604      	mov	r4, r0
 800ec04:	b1c8      	cbz	r0, 800ec3a <HAL_SDRAM_Init+0x3c>
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800ec06:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800ec0a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ec0e:	b91b      	cbnz	r3, 800ec18 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 800ec10:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800ec14:	f7ff fff2 	bl	800ebfc <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ec18:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ec1a:	1d21      	adds	r1, r4, #4
 800ec1c:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ec1e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ec22:	f7f2 fde9 	bl	80017f8 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800ec26:	6862      	ldr	r2, [r4, #4]
 800ec28:	4629      	mov	r1, r5
 800ec2a:	6820      	ldr	r0, [r4, #0]
 800ec2c:	f000 f830 	bl	800ec90 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ec30:	2301      	movs	r3, #1
  return HAL_OK;
 800ec32:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ec34:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800ec38:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ec3a:	2001      	movs	r0, #1
 800ec3c:	e7fc      	b.n	800ec38 <HAL_SDRAM_Init+0x3a>

0800ec3e <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ec3e:	b538      	push	{r3, r4, r5, lr}
 800ec40:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ec42:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
{
 800ec46:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ec48:	b2c0      	uxtb	r0, r0
 800ec4a:	2802      	cmp	r0, #2
 800ec4c:	d00d      	beq.n	800ec6a <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }

  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ec4e:	2302      	movs	r3, #2

  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800ec50:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ec52:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800ec56:	f000 f85f 	bl	800ed18 <FMC_SDRAM_SendCommand>

  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ec5a:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }

  return HAL_OK;
 800ec5c:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ec5e:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800ec60:	bf0c      	ite	eq
 800ec62:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 800ec64:	2301      	movne	r3, #1
 800ec66:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800ec6a:	bd38      	pop	{r3, r4, r5, pc}

0800ec6c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800ec6c:	b510      	push	{r4, lr}
 800ec6e:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ec70:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800ec74:	b2c0      	uxtb	r0, r0
 800ec76:	2802      	cmp	r0, #2
 800ec78:	d009      	beq.n	800ec8e <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  }

  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ec7a:	2302      	movs	r3, #2

  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800ec7c:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ec7e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800ec82:	f000 f85c 	bl	800ed3e <FMC_SDRAM_ProgramRefreshRate>

  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ec86:	2301      	movs	r3, #1

  return HAL_OK;
 800ec88:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ec8a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800ec8e:	bd10      	pop	{r4, pc}

0800ec90 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank != FMC_SDRAM_BANK2)
 800ec90:	68cb      	ldr	r3, [r1, #12]
 800ec92:	2a01      	cmp	r2, #1
{
 800ec94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec96:	680c      	ldr	r4, [r1, #0]
 800ec98:	f103 37ff 	add.w	r7, r3, #4294967295	; 0xffffffff
 800ec9c:	694b      	ldr	r3, [r1, #20]
 800ec9e:	688e      	ldr	r6, [r1, #8]
 800eca0:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800eca4:	690d      	ldr	r5, [r1, #16]
 800eca6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ecaa:	684c      	ldr	r4, [r1, #4]
 800ecac:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800ecb0:	6989      	ldr	r1, [r1, #24]
 800ecb2:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800ecb6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ecba:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800ecbe:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800ecc2:	ea4f 2606 	mov.w	r6, r6, lsl #8
 800ecc6:	ea4f 1404 	mov.w	r4, r4, lsl #4
 800ecca:	ea4f 4505 	mov.w	r5, r5, lsl #16
 800ecce:	ea4f 6101 	mov.w	r1, r1, lsl #24
 800ecd2:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  if (Bank != FMC_SDRAM_BANK2)
 800ecd6:	d00c      	beq.n	800ecf2 <FMC_SDRAM_Timing_Init+0x62>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));

    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ecd8:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ecdc:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ecde:	4323      	orrs	r3, r4
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ece0:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ece4:	4333      	orrs	r3, r6
 800ece6:	432b      	orrs	r3, r5
 800ece8:	430b      	orrs	r3, r1
 800ecea:	4313      	orrs	r3, r2
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ecec:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }

  return HAL_OK;
}
 800ecee:	2000      	movs	r0, #0
 800ecf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ecf2:	6887      	ldr	r7, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ecf4:	ea44 0206 	orr.w	r2, r4, r6
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800ecf8:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ecfc:	ea42 020c 	orr.w	r2, r2, ip
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800ed00:	f427 4770 	bic.w	r7, r7, #61440	; 0xf000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ed04:	432a      	orrs	r2, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800ed06:	433b      	orrs	r3, r7
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800ed08:	68c7      	ldr	r7, [r0, #12]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ed0a:	430a      	orrs	r2, r1
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ed0c:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ed10:	6083      	str	r3, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ed12:	433a      	orrs	r2, r7
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800ed14:	60c2      	str	r2, [r0, #12]
 800ed16:	e7ea      	b.n	800ecee <FMC_SDRAM_Timing_Init+0x5e>

0800ed18 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800ed18:	e9d1 3200 	ldrd	r3, r2, [r1]
{
 800ed1c:	b513      	push	{r0, r1, r4, lr}
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800ed1e:	4313      	orrs	r3, r2
                    ((Command->ModeRegisterDefinition) << 9)
 800ed20:	68ca      	ldr	r2, [r1, #12]
{
 800ed22:	4604      	mov	r4, r0
  __IO uint32_t tmpr = 0;
 800ed24:	2000      	movs	r0, #0
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800ed26:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 800ed2a:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t tmpr = 0;
 800ed2c:	9001      	str	r0, [sp, #4]
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800ed2e:	3a01      	subs	r2, #1
 800ed30:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800ed34:	9301      	str	r3, [sp, #4]
                    );

  Device->SDCMR = tmpr;
 800ed36:	9b01      	ldr	r3, [sp, #4]
 800ed38:	6123      	str	r3, [r4, #16]

  return HAL_OK;
}
 800ed3a:	b002      	add	sp, #8
 800ed3c:	bd10      	pop	{r4, pc}

0800ed3e <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800ed3e:	6943      	ldr	r3, [r0, #20]
 800ed40:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800ed44:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 800ed46:	2000      	movs	r0, #0
 800ed48:	4770      	bx	lr

0800ed4a <OTM8009A_IO_Delay>:
 800ed4a:	f7ff bba1 	b.w	800e490 <HAL_Delay>

0800ed4e <lv_disp_buf_init>:
{
 800ed4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed50:	4604      	mov	r4, r0
 800ed52:	460d      	mov	r5, r1
 800ed54:	4617      	mov	r7, r2
 800ed56:	461e      	mov	r6, r3
    memset(disp_buf, 0, sizeof(lv_disp_buf_t));
 800ed58:	221c      	movs	r2, #28
 800ed5a:	2100      	movs	r1, #0
 800ed5c:	f007 fd32 	bl	80167c4 <memset>
    disp_buf->buf2    = buf2;
 800ed60:	e9c4 5700 	strd	r5, r7, [r4]
    disp_buf->size    = size_in_px_cnt;
 800ed64:	e9c4 5602 	strd	r5, r6, [r4, #8]
}
 800ed68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ed6a <lv_disp_flush_ready>:
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
    disp_drv->buffer->flushing = 0;
 800ed6a:	6842      	ldr	r2, [r0, #4]
 800ed6c:	7e13      	ldrb	r3, [r2, #24]
 800ed6e:	f36f 0300 	bfc	r3, #0, #1
 800ed72:	7613      	strb	r3, [r2, #24]
#if LV_COLOR_SCREEN_TRANSP
    if(disp_drv->screen_transp) {
        memset(disp_drv->buffer->buf_act, 0x00, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif
}
 800ed74:	4770      	bx	lr

0800ed76 <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
 800ed76:	6840      	ldr	r0, [r0, #4]
 800ed78:	4770      	bx	lr

0800ed7a <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 800ed7a:	6843      	ldr	r3, [r0, #4]
 800ed7c:	6818      	ldr	r0, [r3, #0]
 800ed7e:	b118      	cbz	r0, 800ed88 <lv_disp_is_double_buf+0xe>
 800ed80:	6858      	ldr	r0, [r3, #4]
 800ed82:	3000      	adds	r0, #0
 800ed84:	bf18      	it	ne
 800ed86:	2001      	movne	r0, #1
        return true;
    else
        return false;
}
 800ed88:	4770      	bx	lr

0800ed8a <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
 800ed8a:	b508      	push	{r3, lr}
 800ed8c:	4602      	mov	r2, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 800ed8e:	f7ff fff4 	bl	800ed7a <lv_disp_is_double_buf>
 800ed92:	b140      	cbz	r0, 800eda6 <lv_disp_is_true_double_buf+0x1c>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
 800ed94:	8853      	ldrh	r3, [r2, #2]
 800ed96:	8810      	ldrh	r0, [r2, #0]
 800ed98:	fb10 f003 	smulbb	r0, r0, r3
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 800ed9c:	6853      	ldr	r3, [r2, #4]
 800ed9e:	68db      	ldr	r3, [r3, #12]
 800eda0:	1ac3      	subs	r3, r0, r3
 800eda2:	4258      	negs	r0, r3
 800eda4:	4158      	adcs	r0, r3
        return true;
    } else {
        return false;
    }
}
 800eda6:	bd08      	pop	{r3, pc}

0800eda8 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 800eda8:	b510      	push	{r4, lr}
 800edaa:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
 800edac:	f7f3 fcb8 	bl	8002720 <lv_tick_get>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 800edb0:	1b00      	subs	r0, r0, r4
 800edb2:	bd10      	pop	{r4, pc}

0800edb4 <obj_to_foreground>:

    if(group->focus_cb) group->focus_cb(group);
}

static void obj_to_foreground(lv_obj_t * obj)
{
 800edb4:	b510      	push	{r4, lr}
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
 800edb6:	2400      	movs	r4, #0
    while(i != NULL) {
 800edb8:	b928      	cbnz	r0, 800edc6 <obj_to_foreground+0x12>
        if(i->top != 0) last_top = i;
        i = lv_obj_get_parent(i);
    }

    if(last_top != NULL) {
 800edba:	b16c      	cbz	r4, 800edd8 <obj_to_foreground+0x24>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
 800edbc:	4620      	mov	r0, r4
    }
}
 800edbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_obj_move_foreground(last_top);
 800edc2:	f000 ba65 	b.w	800f290 <lv_obj_move_foreground>
        if(i->top != 0) last_top = i;
 800edc6:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800edca:	f013 0f20 	tst.w	r3, #32
 800edce:	bf18      	it	ne
 800edd0:	4604      	movne	r4, r0
        i = lv_obj_get_parent(i);
 800edd2:	f000 fd93 	bl	800f8fc <lv_obj_get_parent>
 800edd6:	e7ef      	b.n	800edb8 <obj_to_foreground+0x4>
}
 800edd8:	bd10      	pop	{r4, pc}

0800edda <focus_next_core.part.0>:
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 800edda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edde:	4605      	mov	r5, r0
 800ede0:	468a      	mov	sl, r1
 800ede2:	4691      	mov	r9, r2
    lv_obj_t ** obj_next     = group->obj_focus;
 800ede4:	68c4      	ldr	r4, [r0, #12]
    bool can_begin           = true;
 800ede6:	2701      	movs	r7, #1
    lv_obj_t ** obj_sentinel = NULL;
 800ede8:	2600      	movs	r6, #0
        if(obj_next == NULL) {
 800edea:	2c00      	cmp	r4, #0
 800edec:	d14b      	bne.n	800ee86 <focus_next_core.part.0+0xac>
            if(group->wrap || obj_sentinel == NULL) {
 800edee:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
 800edf2:	06db      	lsls	r3, r3, #27
 800edf4:	d401      	bmi.n	800edfa <focus_next_core.part.0+0x20>
 800edf6:	2e00      	cmp	r6, #0
 800edf8:	d14e      	bne.n	800ee98 <focus_next_core.part.0+0xbe>
                if(!can_begin) return;
 800edfa:	2f00      	cmp	r7, #0
 800edfc:	d04c      	beq.n	800ee98 <focus_next_core.part.0+0xbe>
                obj_next  = begin(&group->obj_ll);
 800edfe:	4628      	mov	r0, r5
 800ee00:	47d0      	blx	sl
 800ee02:	4604      	mov	r4, r0
        if(obj_sentinel == NULL) {
 800ee04:	2e00      	cmp	r6, #0
 800ee06:	d13a      	bne.n	800ee7e <focus_next_core.part.0+0xa4>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 800ee08:	2800      	cmp	r0, #0
 800ee0a:	d045      	beq.n	800ee98 <focus_next_core.part.0+0xbe>
 800ee0c:	4606      	mov	r6, r0
                can_begin = false;
 800ee0e:	2700      	movs	r7, #0
        if(!lv_obj_get_hidden(*obj_next)) break;
 800ee10:	6820      	ldr	r0, [r4, #0]
 800ee12:	f000 fde7 	bl	800f9e4 <lv_obj_get_hidden>
 800ee16:	4680      	mov	r8, r0
 800ee18:	2800      	cmp	r0, #0
 800ee1a:	d1e6      	bne.n	800edea <focus_next_core.part.0+0x10>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 800ee1c:	68eb      	ldr	r3, [r5, #12]
 800ee1e:	42a3      	cmp	r3, r4
 800ee20:	d03a      	beq.n	800ee98 <focus_next_core.part.0+0xbe>
    if(group->obj_focus) {
 800ee22:	b183      	cbz	r3, 800ee46 <focus_next_core.part.0+0x6c>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 800ee24:	6818      	ldr	r0, [r3, #0]
 800ee26:	4642      	mov	r2, r8
 800ee28:	2110      	movs	r1, #16
 800ee2a:	69c3      	ldr	r3, [r0, #28]
 800ee2c:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 800ee2e:	68eb      	ldr	r3, [r5, #12]
 800ee30:	4642      	mov	r2, r8
 800ee32:	210d      	movs	r1, #13
 800ee34:	6818      	ldr	r0, [r3, #0]
 800ee36:	f000 f973 	bl	800f120 <lv_event_send>
        if(res != LV_RES_OK) return;
 800ee3a:	2801      	cmp	r0, #1
 800ee3c:	d12c      	bne.n	800ee98 <focus_next_core.part.0+0xbe>
        lv_obj_invalidate(*group->obj_focus);
 800ee3e:	68eb      	ldr	r3, [r5, #12]
 800ee40:	6818      	ldr	r0, [r3, #0]
 800ee42:	f000 f9d5 	bl	800f1f0 <lv_obj_invalidate>
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 800ee46:	6820      	ldr	r0, [r4, #0]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	210f      	movs	r1, #15
    group->obj_focus = obj_next;
 800ee4c:	60ec      	str	r4, [r5, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 800ee4e:	69c3      	ldr	r3, [r0, #28]
 800ee50:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 800ee52:	68eb      	ldr	r3, [r5, #12]
 800ee54:	2200      	movs	r2, #0
 800ee56:	210c      	movs	r1, #12
 800ee58:	6818      	ldr	r0, [r3, #0]
 800ee5a:	f000 f961 	bl	800f120 <lv_event_send>
    if(res != LV_RES_OK) return;
 800ee5e:	2801      	cmp	r0, #1
 800ee60:	d11a      	bne.n	800ee98 <focus_next_core.part.0+0xbe>
    obj_to_foreground(*group->obj_focus);
 800ee62:	68eb      	ldr	r3, [r5, #12]
 800ee64:	6818      	ldr	r0, [r3, #0]
 800ee66:	f7ff ffa5 	bl	800edb4 <obj_to_foreground>
    lv_obj_invalidate(*group->obj_focus);
 800ee6a:	68eb      	ldr	r3, [r5, #12]
 800ee6c:	6818      	ldr	r0, [r3, #0]
 800ee6e:	f000 f9bf 	bl	800f1f0 <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 800ee72:	69ab      	ldr	r3, [r5, #24]
 800ee74:	b183      	cbz	r3, 800ee98 <focus_next_core.part.0+0xbe>
 800ee76:	4628      	mov	r0, r5
}
 800ee78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(group->focus_cb) group->focus_cb(group);
 800ee7c:	4718      	bx	r3
                can_begin = false;
 800ee7e:	2700      	movs	r7, #0
        if(obj_next == NULL) continue;
 800ee80:	2c00      	cmp	r4, #0
 800ee82:	d1c5      	bne.n	800ee10 <focus_next_core.part.0+0x36>
 800ee84:	e7b3      	b.n	800edee <focus_next_core.part.0+0x14>
        if(obj_sentinel == NULL) {
 800ee86:	2e00      	cmp	r6, #0
 800ee88:	bf08      	it	eq
 800ee8a:	4626      	moveq	r6, r4
            obj_next = move(&group->obj_ll, obj_next);
 800ee8c:	4621      	mov	r1, r4
 800ee8e:	4628      	mov	r0, r5
 800ee90:	47c8      	blx	r9
            if(obj_next == obj_sentinel) return;
 800ee92:	42b0      	cmp	r0, r6
            obj_next = move(&group->obj_ll, obj_next);
 800ee94:	4604      	mov	r4, r0
            if(obj_next == obj_sentinel) return;
 800ee96:	d1f3      	bne.n	800ee80 <focus_next_core.part.0+0xa6>
}
 800ee98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ee9c <lv_group_refocus>:
{
 800ee9c:	b538      	push	{r3, r4, r5, lr}
    uint8_t temp_wrap = g->wrap;
 800ee9e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 800eea2:	4604      	mov	r4, r0
    uint8_t temp_wrap = g->wrap;
 800eea4:	f3c3 1500 	ubfx	r5, r3, #4, #1
    g->wrap           = 1;
 800eea8:	f043 0310 	orr.w	r3, r3, #16
 800eeac:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 800eeb0:	071b      	lsls	r3, r3, #28
 800eeb2:	d408      	bmi.n	800eec6 <lv_group_refocus+0x2a>
        lv_group_focus_next(g);
 800eeb4:	f7f3 fc94 	bl	80027e0 <lv_group_focus_next>
    g->wrap = temp_wrap;
 800eeb8:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800eebc:	f365 1304 	bfi	r3, r5, #4, #1
 800eec0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800eec4:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_prev(g);
 800eec6:	f7f3 fc99 	bl	80027fc <lv_group_focus_prev>
 800eeca:	e7f5      	b.n	800eeb8 <lv_group_refocus+0x1c>

0800eecc <lv_group_remove_obj>:
{
 800eecc:	b570      	push	{r4, r5, r6, lr}
    lv_group_t * g = obj->group_p;
 800eece:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
{
 800eed0:	4606      	mov	r6, r0
    if(g == NULL) return;
 800eed2:	b364      	cbz	r4, 800ef2e <lv_group_remove_obj+0x62>
    if(g->obj_focus == NULL) return; /*Just to be sure (Not possible if there is at least one object in the group)*/
 800eed4:	68e3      	ldr	r3, [r4, #12]
 800eed6:	b353      	cbz	r3, 800ef2e <lv_group_remove_obj+0x62>
    if(*g->obj_focus == obj) {
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	4283      	cmp	r3, r0
 800eedc:	d116      	bne.n	800ef0c <lv_group_remove_obj+0x40>
        if(lv_ll_get_head(&g->obj_ll) == g->obj_focus && lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 800eede:	4620      	mov	r0, r4
 800eee0:	f001 f8de 	bl	80100a0 <lv_ll_get_head>
 800eee4:	68e3      	ldr	r3, [r4, #12]
 800eee6:	4283      	cmp	r3, r0
 800eee8:	d122      	bne.n	800ef30 <lv_group_remove_obj+0x64>
 800eeea:	4620      	mov	r0, r4
 800eeec:	f001 f8db 	bl	80100a6 <lv_ll_get_tail>
 800eef0:	68e3      	ldr	r3, [r4, #12]
 800eef2:	4298      	cmp	r0, r3
 800eef4:	d11c      	bne.n	800ef30 <lv_group_remove_obj+0x64>
            (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 800eef6:	6800      	ldr	r0, [r0, #0]
 800eef8:	2200      	movs	r2, #0
 800eefa:	2110      	movs	r1, #16
 800eefc:	69c3      	ldr	r3, [r0, #28]
 800eefe:	4798      	blx	r3
    if(*g->obj_focus == obj) {
 800ef00:	68e3      	ldr	r3, [r4, #12]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	42b3      	cmp	r3, r6
        g->obj_focus = NULL;
 800ef06:	bf04      	itt	eq
 800ef08:	2300      	moveq	r3, #0
 800ef0a:	60e3      	streq	r3, [r4, #12]
    LV_LL_READ(g->obj_ll, i)
 800ef0c:	4620      	mov	r0, r4
 800ef0e:	f001 f8c7 	bl	80100a0 <lv_ll_get_head>
 800ef12:	4605      	mov	r5, r0
 800ef14:	b158      	cbz	r0, 800ef2e <lv_group_remove_obj+0x62>
        if(*i == obj) {
 800ef16:	682b      	ldr	r3, [r5, #0]
            lv_ll_rem(&g->obj_ll, i);
 800ef18:	4629      	mov	r1, r5
 800ef1a:	4620      	mov	r0, r4
        if(*i == obj) {
 800ef1c:	42b3      	cmp	r3, r6
 800ef1e:	d10b      	bne.n	800ef38 <lv_group_remove_obj+0x6c>
            lv_ll_rem(&g->obj_ll, i);
 800ef20:	f001 f914 	bl	801014c <lv_ll_rem>
            lv_mem_free(i);
 800ef24:	4628      	mov	r0, r5
 800ef26:	f7f4 fbe5 	bl	80036f4 <lv_mem_free>
            obj->group_p = NULL;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	62f3      	str	r3, [r6, #44]	; 0x2c
}
 800ef2e:	bd70      	pop	{r4, r5, r6, pc}
            lv_group_refocus(g);
 800ef30:	4620      	mov	r0, r4
 800ef32:	f7ff ffb3 	bl	800ee9c <lv_group_refocus>
 800ef36:	e7e3      	b.n	800ef00 <lv_group_remove_obj+0x34>
    LV_LL_READ(g->obj_ll, i)
 800ef38:	f001 f8b8 	bl	80100ac <lv_ll_get_next>
 800ef3c:	e7e9      	b.n	800ef12 <lv_group_remove_obj+0x46>

0800ef3e <lv_group_mod_style>:
{
 800ef3e:	b538      	push	{r3, r4, r5, lr}
    lv_style_copy(&group->style_tmp, style);
 800ef40:	f100 051c 	add.w	r5, r0, #28
{
 800ef44:	4604      	mov	r4, r0
    lv_style_copy(&group->style_tmp, style);
 800ef46:	4628      	mov	r0, r5
 800ef48:	f000 febf 	bl	800fcca <lv_style_copy>
    if(group->editing) {
 800ef4c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800ef50:	079b      	lsls	r3, r3, #30
        if(group->style_mod_edit_cb) group->style_mod_edit_cb(group, &group->style_tmp);
 800ef52:	bf4c      	ite	mi
 800ef54:	6963      	ldrmi	r3, [r4, #20]
        if(group->style_mod_cb) group->style_mod_cb(group, &group->style_tmp);
 800ef56:	6923      	ldrpl	r3, [r4, #16]
 800ef58:	b113      	cbz	r3, 800ef60 <lv_group_mod_style+0x22>
 800ef5a:	4629      	mov	r1, r5
 800ef5c:	4620      	mov	r0, r4
 800ef5e:	4798      	blx	r3
}
 800ef60:	4628      	mov	r0, r5
 800ef62:	bd38      	pop	{r3, r4, r5, pc}

0800ef64 <lv_group_get_focused>:
    if(!group) return NULL;
 800ef64:	b110      	cbz	r0, 800ef6c <lv_group_get_focused+0x8>
    if(group->obj_focus == NULL) return NULL;
 800ef66:	68c0      	ldr	r0, [r0, #12]
 800ef68:	b100      	cbz	r0, 800ef6c <lv_group_get_focused+0x8>
    return *group->obj_focus;
 800ef6a:	6800      	ldr	r0, [r0, #0]
}
 800ef6c:	4770      	bx	lr

0800ef6e <lv_group_set_editing>:
{
 800ef6e:	b538      	push	{r3, r4, r5, lr}
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 800ef70:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 800ef74:	4604      	mov	r4, r0
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 800ef76:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800ef7a:	428a      	cmp	r2, r1
 800ef7c:	d018      	beq.n	800efb0 <lv_group_set_editing+0x42>
    group->editing     = en_val;
 800ef7e:	f361 0341 	bfi	r3, r1, #1, #1
 800ef82:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    lv_obj_t * focused = lv_group_get_focused(group);
 800ef86:	f7ff ffed 	bl	800ef64 <lv_group_get_focused>
    if(focused) {
 800ef8a:	4605      	mov	r5, r0
 800ef8c:	b920      	cbnz	r0, 800ef98 <lv_group_set_editing+0x2a>
    lv_obj_invalidate(focused);
 800ef8e:	4628      	mov	r0, r5
}
 800ef90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(focused);
 800ef94:	f000 b92c 	b.w	800f1f0 <lv_obj_invalidate>
        focused->signal_cb(focused, LV_SIGNAL_FOCUS, NULL); /*Focus again to properly leave/open edit/navigate mode*/
 800ef98:	69c3      	ldr	r3, [r0, #28]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	210f      	movs	r1, #15
 800ef9e:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 800efa0:	68e3      	ldr	r3, [r4, #12]
 800efa2:	2200      	movs	r2, #0
 800efa4:	210c      	movs	r1, #12
 800efa6:	6818      	ldr	r0, [r3, #0]
 800efa8:	f000 f8ba 	bl	800f120 <lv_event_send>
        if(res != LV_RES_OK) return;
 800efac:	2801      	cmp	r0, #1
 800efae:	d0ee      	beq.n	800ef8e <lv_group_set_editing+0x20>
}
 800efb0:	bd38      	pop	{r3, r4, r5, pc}

0800efb2 <lv_group_get_editing>:
    if(!group) return false;
 800efb2:	b118      	cbz	r0, 800efbc <lv_group_get_editing+0xa>
    return group->editing ? true : false;
 800efb4:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 800efb8:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
 800efbc:	4770      	bx	lr

0800efbe <lv_indev_reset.part.2>:
        lv_indev_t * i = lv_indev_get_next(NULL);
 800efbe:	2000      	movs	r0, #0
void lv_indev_reset(lv_indev_t * indev)
 800efc0:	b508      	push	{r3, lr}
            i = lv_indev_get_next(i);
 800efc2:	f7f3 fbbb 	bl	800273c <lv_indev_get_next>
        while(i) {
 800efc6:	b900      	cbnz	r0, 800efca <lv_indev_reset.part.2+0xc>
}
 800efc8:	bd08      	pop	{r3, pc}
            i->proc.reset_query = 1;
 800efca:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800efce:	f043 0302 	orr.w	r3, r3, #2
 800efd2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800efd6:	e7f4      	b.n	800efc2 <lv_indev_reset.part.2+0x4>

0800efd8 <lv_indev_init>:
    if(indev)
 800efd8:	f7ff bff1 	b.w	800efbe <lv_indev_reset.part.2>

0800efdc <lv_indev_get_type>:
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 800efdc:	b100      	cbz	r0, 800efe0 <lv_indev_get_type+0x4>
    return indev->driver.type;
 800efde:	7800      	ldrb	r0, [r0, #0]
}
 800efe0:	4770      	bx	lr

0800efe2 <lv_indev_reset>:
    if(indev)
 800efe2:	b130      	cbz	r0, 800eff2 <lv_indev_reset+0x10>
        indev->proc.reset_query = 1;
 800efe4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800efe8:	f043 0302 	orr.w	r3, r3, #2
 800efec:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
}
 800eff0:	4770      	bx	lr
 800eff2:	f7ff bfe4 	b.w	800efbe <lv_indev_reset.part.2>

0800eff6 <lv_indev_reset_long_press>:
    indev->proc.long_pr_sent         = 0;
 800eff6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800effa:	f36f 0300 	bfc	r3, #0, #1
{
 800effe:	b510      	push	{r4, lr}
 800f000:	4604      	mov	r4, r0
    indev->proc.long_pr_sent         = 0;
 800f002:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    indev->proc.longpr_rep_timestamp = lv_tick_get();
 800f006:	f7f3 fb8b 	bl	8002720 <lv_tick_get>
 800f00a:	64e0      	str	r0, [r4, #76]	; 0x4c
    indev->proc.pr_timestamp         = lv_tick_get();
 800f00c:	f7f3 fb88 	bl	8002720 <lv_tick_get>
 800f010:	64a0      	str	r0, [r4, #72]	; 0x48
}
 800f012:	bd10      	pop	{r4, pc}

0800f014 <lv_indev_get_point>:
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
 800f014:	7803      	ldrb	r3, [r0, #0]
 800f016:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800f01a:	2b01      	cmp	r3, #1
        point->x = indev->proc.types.pointer.act_point.x;
 800f01c:	bf09      	itett	eq
 800f01e:	f9b0 3024 	ldrsheq.w	r3, [r0, #36]	; 0x24
        point->x = -1;
 800f022:	f64f 73ff 	movwne	r3, #65535	; 0xffff
        point->x = indev->proc.types.pointer.act_point.x;
 800f026:	800b      	strheq	r3, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 800f028:	f9b0 3026 	ldrsheq.w	r3, [r0, #38]	; 0x26
        point->x = -1;
 800f02c:	bf18      	it	ne
 800f02e:	800b      	strhne	r3, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 800f030:	804b      	strh	r3, [r1, #2]
}
 800f032:	4770      	bx	lr

0800f034 <lv_indev_is_dragging>:
    if(indev == NULL) return false;
 800f034:	b150      	cbz	r0, 800f04c <lv_indev_is_dragging+0x18>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
 800f036:	7803      	ldrb	r3, [r0, #0]
 800f038:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800f03c:	2b01      	cmp	r3, #1
 800f03e:	d104      	bne.n	800f04a <lv_indev_is_dragging+0x16>
    return indev->proc.types.pointer.drag_in_prog == 0 ? false : true;
 800f040:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 800f044:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800f048:	4770      	bx	lr
    if(indev == NULL) return false;
 800f04a:	2000      	movs	r0, #0
}
 800f04c:	4770      	bx	lr

0800f04e <lv_indev_get_vect>:
    if(indev == NULL) {
 800f04e:	b918      	cbnz	r0, 800f058 <lv_indev_get_vect+0xa>
        point->x = 0;
 800f050:	2300      	movs	r3, #0
 800f052:	800b      	strh	r3, [r1, #0]
        point->y = indev->proc.types.pointer.vect.y;
 800f054:	804b      	strh	r3, [r1, #2]
}
 800f056:	4770      	bx	lr
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
 800f058:	7803      	ldrb	r3, [r0, #0]
 800f05a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800f05e:	2b01      	cmp	r3, #1
 800f060:	d1f6      	bne.n	800f050 <lv_indev_get_vect+0x2>
        point->x = indev->proc.types.pointer.vect.x;
 800f062:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
 800f066:	800b      	strh	r3, [r1, #0]
        point->y = indev->proc.types.pointer.vect.y;
 800f068:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 800f06c:	e7f2      	b.n	800f054 <lv_indev_get_vect+0x6>

0800f06e <refresh_children_position>:
{
 800f06e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    LV_LL_READ(obj->child_ll, i)
 800f070:	1d07      	adds	r7, r0, #4
{
 800f072:	460d      	mov	r5, r1
 800f074:	4616      	mov	r6, r2
    LV_LL_READ(obj->child_ll, i)
 800f076:	4638      	mov	r0, r7
 800f078:	f001 f812 	bl	80100a0 <lv_ll_get_head>
 800f07c:	4604      	mov	r4, r0
 800f07e:	b900      	cbnz	r0, 800f082 <refresh_children_position+0x14>
}
 800f080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        i->coords.x1 += x_diff;
 800f082:	8a23      	ldrh	r3, [r4, #16]
        refresh_children_position(i, x_diff, y_diff);
 800f084:	4629      	mov	r1, r5
 800f086:	4620      	mov	r0, r4
 800f088:	4632      	mov	r2, r6
        i->coords.x1 += x_diff;
 800f08a:	442b      	add	r3, r5
 800f08c:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
 800f08e:	8a63      	ldrh	r3, [r4, #18]
 800f090:	4433      	add	r3, r6
 800f092:	8263      	strh	r3, [r4, #18]
        i->coords.x2 += x_diff;
 800f094:	8aa3      	ldrh	r3, [r4, #20]
 800f096:	442b      	add	r3, r5
 800f098:	82a3      	strh	r3, [r4, #20]
        i->coords.y2 += y_diff;
 800f09a:	8ae3      	ldrh	r3, [r4, #22]
 800f09c:	4433      	add	r3, r6
 800f09e:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
 800f0a0:	f7ff ffe5 	bl	800f06e <refresh_children_position>
    LV_LL_READ(obj->child_ll, i)
 800f0a4:	4621      	mov	r1, r4
 800f0a6:	4638      	mov	r0, r7
 800f0a8:	f001 f800 	bl	80100ac <lv_ll_get_next>
 800f0ac:	e7e6      	b.n	800f07c <refresh_children_position+0xe>

0800f0ae <lv_obj_set_click>:
    obj->click = (en == true ? 1 : 0);
 800f0ae:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800f0b2:	f361 0300 	bfi	r3, r1, #0, #1
 800f0b6:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
}
 800f0ba:	4770      	bx	lr

0800f0bc <lv_obj_set_drag>:
    if(en == true) lv_obj_set_click(obj, true); /*Drag is useless without enabled clicking*/
 800f0bc:	b129      	cbz	r1, 800f0ca <lv_obj_set_drag+0xe>
    obj->click = (en == true ? 1 : 0);
 800f0be:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800f0c2:	f043 0301 	orr.w	r3, r3, #1
 800f0c6:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    obj->drag = (en == true ? 1 : 0);
 800f0ca:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800f0ce:	f361 0341 	bfi	r3, r1, #1, #1
 800f0d2:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
}
 800f0d6:	4770      	bx	lr

0800f0d8 <lv_obj_set_drag_throw>:
    obj->drag_throw = (en == true ? 1 : 0);
 800f0d8:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800f0dc:	f361 0382 	bfi	r3, r1, #2, #1
 800f0e0:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
}
 800f0e4:	4770      	bx	lr

0800f0e6 <lv_obj_set_drag_parent>:
    obj->drag_parent = (en == true ? 1 : 0);
 800f0e6:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800f0ea:	f361 03c3 	bfi	r3, r1, #3, #1
 800f0ee:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
}
 800f0f2:	4770      	bx	lr

0800f0f4 <lv_obj_set_parent_event>:
    obj->parent_event = (en == true ? 1 : 0);
 800f0f4:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800f0f8:	f361 13c7 	bfi	r3, r1, #7, #1
 800f0fc:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
}
 800f100:	4770      	bx	lr

0800f102 <lv_obj_set_protect>:
    obj->protect |= prot;
 800f102:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800f106:	4319      	orrs	r1, r3
 800f108:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
}
 800f10c:	4770      	bx	lr

0800f10e <lv_obj_clear_protect>:
    obj->protect &= prot;
 800f10e:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800f112:	ea23 0101 	bic.w	r1, r3, r1
 800f116:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
}
 800f11a:	4770      	bx	lr

0800f11c <lv_obj_set_event_cb>:
    obj->event_cb = event_cb;
 800f11c:	6181      	str	r1, [r0, #24]
}
 800f11e:	4770      	bx	lr

0800f120 <lv_event_send>:
{
 800f120:	4613      	mov	r3, r2
    if(obj == NULL) return LV_RES_OK;
 800f122:	b120      	cbz	r0, 800f12e <lv_event_send+0xe>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 800f124:	460a      	mov	r2, r1
 800f126:	4601      	mov	r1, r0
 800f128:	6980      	ldr	r0, [r0, #24]
 800f12a:	f7f3 bbfd 	b.w	8002928 <lv_event_send_func>
}
 800f12e:	2001      	movs	r0, #1
 800f130:	4770      	bx	lr

0800f132 <delete_children>:
{
 800f132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    i = lv_ll_get_head(&(obj->child_ll));
 800f136:	1d05      	adds	r5, r0, #4
{
 800f138:	4604      	mov	r4, r0
    i = lv_ll_get_head(&(obj->child_ll));
 800f13a:	4628      	mov	r0, r5
 800f13c:	f000 ffb0 	bl	80100a0 <lv_ll_get_head>
    return obj->group_p;
 800f140:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    i = lv_ll_get_head(&(obj->child_ll));
 800f142:	4606      	mov	r6, r0
    if(group) lv_group_remove_obj(obj);
 800f144:	b117      	cbz	r7, 800f14c <delete_children+0x1a>
 800f146:	4620      	mov	r0, r4
 800f148:	f7ff fec0 	bl	800eecc <lv_group_remove_obj>
    while(i != NULL) {
 800f14c:	bb16      	cbnz	r6, 800f194 <delete_children+0x62>
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
 800f14e:	4632      	mov	r2, r6
 800f150:	2113      	movs	r1, #19
 800f152:	4620      	mov	r0, r4
 800f154:	f7ff ffe4 	bl	800f120 <lv_event_send>
    lv_event_mark_deleted(obj);
 800f158:	4620      	mov	r0, r4
 800f15a:	f7f3 fb9f 	bl	800289c <lv_event_mark_deleted>
    lv_anim_del(obj, NULL);
 800f15e:	4631      	mov	r1, r6
 800f160:	f7f4 fd48 	bl	8003bf4 <lv_anim_del>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800f164:	4630      	mov	r0, r6
        indev = lv_indev_get_next(indev);
 800f166:	f7f3 fae9 	bl	800273c <lv_indev_get_next>
 800f16a:	4605      	mov	r5, r0
    while(indev) {
 800f16c:	b9e0      	cbnz	r0, 800f1a8 <delete_children+0x76>
    lv_ll_rem(&(par->child_ll), obj);
 800f16e:	6820      	ldr	r0, [r4, #0]
 800f170:	4621      	mov	r1, r4
 800f172:	3004      	adds	r0, #4
 800f174:	f000 ffea 	bl	801014c <lv_ll_rem>
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
 800f178:	69e3      	ldr	r3, [r4, #28]
 800f17a:	462a      	mov	r2, r5
 800f17c:	4629      	mov	r1, r5
 800f17e:	4620      	mov	r0, r4
 800f180:	4798      	blx	r3
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
 800f182:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f184:	b108      	cbz	r0, 800f18a <delete_children+0x58>
 800f186:	f7f4 fab5 	bl	80036f4 <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 800f18a:	4620      	mov	r0, r4
}
 800f18c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_mem_free(obj); /*Free the object itself*/
 800f190:	f7f4 bab0 	b.w	80036f4 <lv_mem_free>
        i_next = lv_ll_get_next(&(obj->child_ll), i);
 800f194:	4631      	mov	r1, r6
 800f196:	4628      	mov	r0, r5
 800f198:	f000 ff88 	bl	80100ac <lv_ll_get_next>
 800f19c:	4680      	mov	r8, r0
        delete_children(i);
 800f19e:	4630      	mov	r0, r6
 800f1a0:	f7ff ffc7 	bl	800f132 <delete_children>
        i = i_next;
 800f1a4:	4646      	mov	r6, r8
 800f1a6:	e7d1      	b.n	800f14c <delete_children+0x1a>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 800f1a8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800f1aa:	42a3      	cmp	r3, r4
 800f1ac:	d002      	beq.n	800f1b4 <delete_children+0x82>
 800f1ae:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800f1b0:	42a3      	cmp	r3, r4
 800f1b2:	d102      	bne.n	800f1ba <delete_children+0x88>
            lv_indev_reset(indev);
 800f1b4:	4628      	mov	r0, r5
 800f1b6:	f7ff ff14 	bl	800efe2 <lv_indev_reset>
        if(indev->proc.types.pointer.last_pressed == obj) {
 800f1ba:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800f1bc:	42a3      	cmp	r3, r4
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800f1be:	6dab      	ldr	r3, [r5, #88]	; 0x58
            indev->proc.types.pointer.last_pressed = NULL;
 800f1c0:	bf08      	it	eq
 800f1c2:	642e      	streq	r6, [r5, #64]	; 0x40
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800f1c4:	42bb      	cmp	r3, r7
 800f1c6:	d106      	bne.n	800f1d6 <delete_children+0xa4>
 800f1c8:	f7f3 fb62 	bl	8002890 <lv_indev_get_obj_act>
 800f1cc:	4284      	cmp	r4, r0
 800f1ce:	d102      	bne.n	800f1d6 <delete_children+0xa4>
            lv_indev_reset(indev);
 800f1d0:	4628      	mov	r0, r5
 800f1d2:	f7ff ff06 	bl	800efe2 <lv_indev_reset>
        indev = lv_indev_get_next(indev);
 800f1d6:	4628      	mov	r0, r5
 800f1d8:	e7c5      	b.n	800f166 <delete_children+0x34>

0800f1da <lv_obj_set_signal_cb>:
    obj->signal_cb = signal_cb;
 800f1da:	61c1      	str	r1, [r0, #28]
}
 800f1dc:	4770      	bx	lr

0800f1de <lv_obj_set_design_cb>:
    obj->design_cb = design_cb;
 800f1de:	6201      	str	r1, [r0, #32]
}
 800f1e0:	4770      	bx	lr

0800f1e2 <lv_obj_allocate_ext_attr>:
{
 800f1e2:	b510      	push	{r4, lr}
 800f1e4:	4604      	mov	r4, r0
    obj->ext_attr = lv_mem_realloc(obj->ext_attr, ext_size);
 800f1e6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800f1e8:	f7f4 faae 	bl	8003748 <lv_mem_realloc>
 800f1ec:	6260      	str	r0, [r4, #36]	; 0x24
}
 800f1ee:	bd10      	pop	{r4, pc}

0800f1f0 <lv_obj_invalidate>:
    return obj->hidden == 0 ? false : true;
 800f1f0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
{
 800f1f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(lv_obj_get_hidden(obj)) return;
 800f1f6:	06da      	lsls	r2, r3, #27
{
 800f1f8:	4606      	mov	r6, r0
    if(lv_obj_get_hidden(obj)) return;
 800f1fa:	d439      	bmi.n	800f270 <lv_obj_invalidate+0x80>
 800f1fc:	4604      	mov	r4, r0
    return obj->par;
 800f1fe:	6823      	ldr	r3, [r4, #0]
    } while(par != NULL);
 800f200:	bb53      	cbnz	r3, 800f258 <lv_obj_invalidate+0x68>
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 800f202:	4620      	mov	r0, r4
 800f204:	f7f3 fbd8 	bl	80029b8 <lv_obj_get_disp>
 800f208:	4607      	mov	r7, r0
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 800f20a:	f7f3 faa1 	bl	8002750 <lv_disp_get_scr_act>
 800f20e:	4284      	cmp	r4, r0
 800f210:	d124      	bne.n	800f25c <lv_obj_invalidate+0x6c>
    memcpy(dest, src, sizeof(lv_area_t));
 800f212:	2208      	movs	r2, #8
 800f214:	f106 0110 	add.w	r1, r6, #16
 800f218:	4668      	mov	r0, sp
        lv_coord_t ext_size = obj->ext_draw_pad;
 800f21a:	f9b6 4034 	ldrsh.w	r4, [r6, #52]	; 0x34
    return obj->par;
 800f21e:	6835      	ldr	r5, [r6, #0]
 800f220:	f007 faa6 	bl	8016770 <memcpy>
        area_trunc.x1 -= ext_size;
 800f224:	f8bd 3000 	ldrh.w	r3, [sp]
 800f228:	1b1b      	subs	r3, r3, r4
 800f22a:	f8ad 3000 	strh.w	r3, [sp]
        area_trunc.y1 -= ext_size;
 800f22e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f232:	1b1b      	subs	r3, r3, r4
 800f234:	f8ad 3002 	strh.w	r3, [sp, #2]
        area_trunc.x2 += ext_size;
 800f238:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f23c:	4423      	add	r3, r4
 800f23e:	f8ad 3004 	strh.w	r3, [sp, #4]
        area_trunc.y2 += ext_size;
 800f242:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f246:	441c      	add	r4, r3
 800f248:	f8ad 4006 	strh.w	r4, [sp, #6]
        while(par != NULL) {
 800f24c:	b995      	cbnz	r5, 800f274 <lv_obj_invalidate+0x84>
        if(union_ok) lv_inv_area(disp, &area_trunc);
 800f24e:	4669      	mov	r1, sp
 800f250:	4638      	mov	r0, r7
 800f252:	f7f3 fe4b 	bl	8002eec <lv_inv_area>
 800f256:	e00b      	b.n	800f270 <lv_obj_invalidate+0x80>
    } while(par != NULL);
 800f258:	461c      	mov	r4, r3
 800f25a:	e7d0      	b.n	800f1fe <lv_obj_invalidate+0xe>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 800f25c:	4638      	mov	r0, r7
 800f25e:	f7f3 fa8d 	bl	800277c <lv_disp_get_layer_top>
 800f262:	4284      	cmp	r4, r0
 800f264:	d0d5      	beq.n	800f212 <lv_obj_invalidate+0x22>
       obj_scr == lv_disp_get_layer_sys(disp)) {
 800f266:	4638      	mov	r0, r7
 800f268:	f7f3 fa9e 	bl	80027a8 <lv_disp_get_layer_sys>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 800f26c:	4284      	cmp	r4, r0
 800f26e:	d0d0      	beq.n	800f212 <lv_obj_invalidate+0x22>
}
 800f270:	b003      	add	sp, #12
 800f272:	bdf0      	pop	{r4, r5, r6, r7, pc}
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 800f274:	f105 0210 	add.w	r2, r5, #16
 800f278:	4669      	mov	r1, sp
 800f27a:	4668      	mov	r0, sp
 800f27c:	f001 f9df 	bl	801063e <lv_area_intersect>
            if(union_ok == false) break;       /*If no common parts with parent break;*/
 800f280:	2800      	cmp	r0, #0
 800f282:	d0f5      	beq.n	800f270 <lv_obj_invalidate+0x80>
    return obj->hidden == 0 ? false : true;
 800f284:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
 800f288:	06db      	lsls	r3, r3, #27
 800f28a:	d4f1      	bmi.n	800f270 <lv_obj_invalidate+0x80>
    return obj->par;
 800f28c:	682d      	ldr	r5, [r5, #0]
 800f28e:	e7dd      	b.n	800f24c <lv_obj_invalidate+0x5c>

0800f290 <lv_obj_move_foreground>:
{
 800f290:	b570      	push	{r4, r5, r6, lr}
    return obj->par;
 800f292:	6804      	ldr	r4, [r0, #0]
{
 800f294:	4605      	mov	r5, r0
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 800f296:	1d26      	adds	r6, r4, #4
 800f298:	4630      	mov	r0, r6
 800f29a:	f000 ff01 	bl	80100a0 <lv_ll_get_head>
 800f29e:	4285      	cmp	r5, r0
 800f2a0:	d012      	beq.n	800f2c8 <lv_obj_move_foreground+0x38>
    lv_obj_invalidate(parent);
 800f2a2:	4620      	mov	r0, r4
 800f2a4:	f7ff ffa4 	bl	800f1f0 <lv_obj_invalidate>
    lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
 800f2a8:	462a      	mov	r2, r5
 800f2aa:	4631      	mov	r1, r6
 800f2ac:	4630      	mov	r0, r6
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	f000 ff9a 	bl	80101e8 <lv_ll_chg_list>
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 800f2b4:	69e3      	ldr	r3, [r4, #28]
 800f2b6:	462a      	mov	r2, r5
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	2101      	movs	r1, #1
 800f2bc:	4798      	blx	r3
    lv_obj_invalidate(parent);
 800f2be:	4620      	mov	r0, r4
}
 800f2c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(parent);
 800f2c4:	f7ff bf94 	b.w	800f1f0 <lv_obj_invalidate>
}
 800f2c8:	bd70      	pop	{r4, r5, r6, pc}

0800f2ca <lv_obj_set_pos>:
{
 800f2ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    lv_obj_t * par = obj->par;
 800f2cc:	6807      	ldr	r7, [r0, #0]
{
 800f2ce:	4604      	mov	r4, r0
    diff.x = x - obj->coords.x1;
 800f2d0:	8a03      	ldrh	r3, [r0, #16]
 800f2d2:	8a3d      	ldrh	r5, [r7, #16]
    diff.y = y - obj->coords.y1;
 800f2d4:	8a7e      	ldrh	r6, [r7, #18]
    diff.x = x - obj->coords.x1;
 800f2d6:	1aed      	subs	r5, r5, r3
    diff.y = y - obj->coords.y1;
 800f2d8:	8a43      	ldrh	r3, [r0, #18]
 800f2da:	1af6      	subs	r6, r6, r3
    diff.x = x - obj->coords.x1;
 800f2dc:	440d      	add	r5, r1
    diff.y = y - obj->coords.y1;
 800f2de:	4416      	add	r6, r2
    diff.x = x - obj->coords.x1;
 800f2e0:	b22d      	sxth	r5, r5
    diff.y = y - obj->coords.y1;
 800f2e2:	b236      	sxth	r6, r6
    if(diff.x == 0 && diff.y == 0) return;
 800f2e4:	ea55 0306 	orrs.w	r3, r5, r6
 800f2e8:	d025      	beq.n	800f336 <lv_obj_set_pos+0x6c>
    lv_obj_invalidate(obj);
 800f2ea:	f7ff ff81 	bl	800f1f0 <lv_obj_invalidate>
 800f2ee:	2208      	movs	r2, #8
 800f2f0:	f104 0110 	add.w	r1, r4, #16
 800f2f4:	4668      	mov	r0, sp
 800f2f6:	f007 fa3b 	bl	8016770 <memcpy>
    obj->coords.x1 += diff.x;
 800f2fa:	8a23      	ldrh	r3, [r4, #16]
    refresh_children_position(obj, diff.x, diff.y);
 800f2fc:	4632      	mov	r2, r6
 800f2fe:	4629      	mov	r1, r5
    obj->coords.x1 += diff.x;
 800f300:	442b      	add	r3, r5
    refresh_children_position(obj, diff.x, diff.y);
 800f302:	4620      	mov	r0, r4
    obj->coords.x1 += diff.x;
 800f304:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
 800f306:	8a63      	ldrh	r3, [r4, #18]
 800f308:	4433      	add	r3, r6
 800f30a:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
 800f30c:	8aa3      	ldrh	r3, [r4, #20]
 800f30e:	442b      	add	r3, r5
 800f310:	82a3      	strh	r3, [r4, #20]
    obj->coords.y2 += diff.y;
 800f312:	8ae3      	ldrh	r3, [r4, #22]
 800f314:	4433      	add	r3, r6
 800f316:	82e3      	strh	r3, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
 800f318:	f7ff fea9 	bl	800f06e <refresh_children_position>
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 800f31c:	69e3      	ldr	r3, [r4, #28]
 800f31e:	466a      	mov	r2, sp
 800f320:	2102      	movs	r1, #2
 800f322:	4620      	mov	r0, r4
 800f324:	4798      	blx	r3
    par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 800f326:	69fb      	ldr	r3, [r7, #28]
 800f328:	4622      	mov	r2, r4
 800f32a:	2101      	movs	r1, #1
 800f32c:	4638      	mov	r0, r7
 800f32e:	4798      	blx	r3
    lv_obj_invalidate(obj);
 800f330:	4620      	mov	r0, r4
 800f332:	f7ff ff5d 	bl	800f1f0 <lv_obj_invalidate>
}
 800f336:	b003      	add	sp, #12
 800f338:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f33a <lv_obj_set_x>:
{
 800f33a:	b410      	push	{r4}
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800f33c:	6804      	ldr	r4, [r0, #0]
 800f33e:	8a42      	ldrh	r2, [r0, #18]
 800f340:	8a63      	ldrh	r3, [r4, #18]
}
 800f342:	bc10      	pop	{r4}
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800f344:	1ad2      	subs	r2, r2, r3
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
 800f346:	b212      	sxth	r2, r2
 800f348:	f7ff bfbf 	b.w	800f2ca <lv_obj_set_pos>

0800f34c <lv_obj_set_y>:
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800f34c:	6802      	ldr	r2, [r0, #0]
 800f34e:	8a03      	ldrh	r3, [r0, #16]
 800f350:	8a12      	ldrh	r2, [r2, #16]
 800f352:	1a9b      	subs	r3, r3, r2
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
 800f354:	460a      	mov	r2, r1
 800f356:	b219      	sxth	r1, r3
 800f358:	f7ff bfb7 	b.w	800f2ca <lv_obj_set_pos>

0800f35c <lv_obj_align>:
{
 800f35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return obj->par;
 800f360:	6805      	ldr	r5, [r0, #0]
{
 800f362:	4616      	mov	r6, r2
 800f364:	4604      	mov	r4, r0
 800f366:	4698      	mov	r8, r3
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800f368:	f9b5 c010 	ldrsh.w	ip, [r5, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800f36c:	f9b5 e012 	ldrsh.w	lr, [r5, #18]
    if(base == NULL) {
 800f370:	2900      	cmp	r1, #0
 800f372:	bf18      	it	ne
 800f374:	460d      	movne	r5, r1
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800f376:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
{
 800f37a:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800f37e:	f9b0 0012 	ldrsh.w	r0, [r0, #18]
    switch(align) {
 800f382:	f9b5 9012 	ldrsh.w	r9, [r5, #18]
 800f386:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 800f38a:	2e14      	cmp	r6, #20
 800f38c:	d816      	bhi.n	800f3bc <lv_obj_align+0x60>
 800f38e:	e8df f016 	tbh	[pc, r6, lsl #1]
 800f392:	001c      	.short	0x001c
 800f394:	003d00fb 	.word	0x003d00fb
 800f398:	0055004f 	.word	0x0055004f
 800f39c:	0071005c 	.word	0x0071005c
 800f3a0:	00a40077 	.word	0x00a40077
 800f3a4:	00ae00aa 	.word	0x00ae00aa
 800f3a8:	00c800c2 	.word	0x00c800c2
 800f3ac:	00e000cb 	.word	0x00e000cb
 800f3b0:	00ea00e6 	.word	0x00ea00e6
 800f3b4:	00f200ee 	.word	0x00f200ee
 800f3b8:	00f800f5 	.word	0x00f800f5
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800f3bc:	eba2 010c 	sub.w	r1, r2, ip
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800f3c0:	eba0 020e 	sub.w	r2, r0, lr
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800f3c4:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800f3c6:	b212      	sxth	r2, r2
            break;
 800f3c8:	e06c      	b.n	800f4a4 <lv_obj_align+0x148>
    return area_p->x2 - area_p->x1 + 1;
 800f3ca:	8aa9      	ldrh	r1, [r5, #20]
 800f3cc:	3101      	adds	r1, #1
 800f3ce:	1ac9      	subs	r1, r1, r3
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800f3d0:	b209      	sxth	r1, r1
 800f3d2:	eb01 7ad1 	add.w	sl, r1, r1, lsr #31
 800f3d6:	8aa1      	ldrh	r1, [r4, #20]
 800f3d8:	3101      	adds	r1, #1
 800f3da:	1a8a      	subs	r2, r1, r2
 800f3dc:	b212      	sxth	r2, r2
 800f3de:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800f3e2:	1051      	asrs	r1, r2, #1
 800f3e4:	ebc1 016a 	rsb	r1, r1, sl, asr #1
    return area_p->y2 - area_p->y1 + 1;
 800f3e8:	8aea      	ldrh	r2, [r5, #22]
    return area_p->x2 - area_p->x1 + 1;
 800f3ea:	b209      	sxth	r1, r1
    return area_p->y2 - area_p->y1 + 1;
 800f3ec:	3201      	adds	r2, #1
 800f3ee:	eba2 0209 	sub.w	r2, r2, r9
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800f3f2:	b212      	sxth	r2, r2
 800f3f4:	eb02 7ad2 	add.w	sl, r2, r2, lsr #31
 800f3f8:	8ae2      	ldrh	r2, [r4, #22]
 800f3fa:	3201      	adds	r2, #1
 800f3fc:	1a10      	subs	r0, r2, r0
 800f3fe:	b200      	sxth	r0, r0
 800f400:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800f404:	1042      	asrs	r2, r0, #1
 800f406:	ebc2 026a 	rsb	r2, r2, sl, asr #1
 800f40a:	e7dc      	b.n	800f3c6 <lv_obj_align+0x6a>
    return area_p->x2 - area_p->x1 + 1;
 800f40c:	8aa9      	ldrh	r1, [r5, #20]
 800f40e:	3101      	adds	r1, #1
 800f410:	1ac9      	subs	r1, r1, r3
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800f412:	b209      	sxth	r1, r1
 800f414:	eb01 70d1 	add.w	r0, r1, r1, lsr #31
 800f418:	8aa1      	ldrh	r1, [r4, #20]
 800f41a:	3101      	adds	r1, #1
 800f41c:	1a8a      	subs	r2, r1, r2
 800f41e:	b212      	sxth	r2, r2
 800f420:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800f424:	1051      	asrs	r1, r2, #1
 800f426:	ebc1 0160 	rsb	r1, r1, r0, asr #1
 800f42a:	b209      	sxth	r1, r1
            new_y = 0;
 800f42c:	2200      	movs	r2, #0
            break;
 800f42e:	e039      	b.n	800f4a4 <lv_obj_align+0x148>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800f430:	8aa1      	ldrh	r1, [r4, #20]
 800f432:	1a51      	subs	r1, r2, r1
 800f434:	8aaa      	ldrh	r2, [r5, #20]
 800f436:	4411      	add	r1, r2
 800f438:	1ac9      	subs	r1, r1, r3
 800f43a:	e7f6      	b.n	800f42a <lv_obj_align+0xce>
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800f43c:	8ae2      	ldrh	r2, [r4, #22]
 800f43e:	1a82      	subs	r2, r0, r2
 800f440:	8ae8      	ldrh	r0, [r5, #22]
 800f442:	4402      	add	r2, r0
    return area_p->y2 - area_p->y1 + 1;
 800f444:	eba2 0209 	sub.w	r2, r2, r9
 800f448:	e02a      	b.n	800f4a0 <lv_obj_align+0x144>
    return area_p->x2 - area_p->x1 + 1;
 800f44a:	8aa9      	ldrh	r1, [r5, #20]
 800f44c:	3101      	adds	r1, #1
 800f44e:	1ac9      	subs	r1, r1, r3
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800f450:	b209      	sxth	r1, r1
 800f452:	eb01 7ad1 	add.w	sl, r1, r1, lsr #31
 800f456:	8aa1      	ldrh	r1, [r4, #20]
 800f458:	3101      	adds	r1, #1
 800f45a:	1a8a      	subs	r2, r1, r2
 800f45c:	b212      	sxth	r2, r2
 800f45e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800f462:	1051      	asrs	r1, r2, #1
 800f464:	ebc1 016a 	rsb	r1, r1, sl, asr #1
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800f468:	8ae2      	ldrh	r2, [r4, #22]
 800f46a:	b209      	sxth	r1, r1
 800f46c:	1a82      	subs	r2, r0, r2
 800f46e:	8ae8      	ldrh	r0, [r5, #22]
 800f470:	4402      	add	r2, r0
 800f472:	e06b      	b.n	800f54c <lv_obj_align+0x1f0>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800f474:	8aa1      	ldrh	r1, [r4, #20]
 800f476:	1a51      	subs	r1, r2, r1
 800f478:	8aaa      	ldrh	r2, [r5, #20]
 800f47a:	4411      	add	r1, r2
 800f47c:	1ac9      	subs	r1, r1, r3
 800f47e:	e7f3      	b.n	800f468 <lv_obj_align+0x10c>
    return area_p->y2 - area_p->y1 + 1;
 800f480:	8aea      	ldrh	r2, [r5, #22]
 800f482:	3201      	adds	r2, #1
 800f484:	eba2 0209 	sub.w	r2, r2, r9
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800f488:	b212      	sxth	r2, r2
 800f48a:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
 800f48e:	8ae2      	ldrh	r2, [r4, #22]
 800f490:	3201      	adds	r2, #1
 800f492:	1a10      	subs	r0, r2, r0
 800f494:	b200      	sxth	r0, r0
 800f496:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800f49a:	1042      	asrs	r2, r0, #1
 800f49c:	ebc2 0261 	rsb	r2, r2, r1, asr #1
 800f4a0:	b212      	sxth	r2, r2
            new_x = 0;
 800f4a2:	2100      	movs	r1, #0
    new_y -= par_abs_y;
 800f4a4:	eba7 0e0e 	sub.w	lr, r7, lr
    new_x -= par_abs_x;
 800f4a8:	eba8 0c0c 	sub.w	ip, r8, ip
    lv_obj_set_pos(obj, new_x, new_y);
 800f4ac:	4620      	mov	r0, r4
    new_x -= par_abs_x;
 800f4ae:	4463      	add	r3, ip
    new_y -= par_abs_y;
 800f4b0:	44f1      	add	r9, lr
    new_x -= par_abs_x;
 800f4b2:	4419      	add	r1, r3
    new_y -= par_abs_y;
 800f4b4:	444a      	add	r2, r9
    lv_obj_set_pos(obj, new_x, new_y);
 800f4b6:	b209      	sxth	r1, r1
 800f4b8:	b212      	sxth	r2, r2
 800f4ba:	f7ff ff06 	bl	800f2ca <lv_obj_set_pos>
    obj->realign.origo_align = 0;
 800f4be:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    obj->realign.align       = align;
 800f4c2:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    obj->realign.origo_align = 0;
 800f4c6:	f36f 0341 	bfc	r3, #1, #1
    obj->realign.xofs        = x_mod;
 800f4ca:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 800f4ce:	87e7      	strh	r7, [r4, #62]	; 0x3e
    obj->realign.base        = base;
 800f4d0:	63a5      	str	r5, [r4, #56]	; 0x38
    obj->realign.origo_align = 0;
 800f4d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 800f4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800f4da:	8aa1      	ldrh	r1, [r4, #20]
 800f4dc:	1a51      	subs	r1, r2, r1
 800f4de:	8aaa      	ldrh	r2, [r5, #20]
 800f4e0:	4411      	add	r1, r2
    return area_p->x2 - area_p->x1 + 1;
 800f4e2:	1ac9      	subs	r1, r1, r3
 800f4e4:	e780      	b.n	800f3e8 <lv_obj_align+0x8c>
    return area_p->y2 - area_p->y1 + 1;
 800f4e6:	8ae2      	ldrh	r2, [r4, #22]
 800f4e8:	3201      	adds	r2, #1
            new_y = -lv_obj_get_height(obj);
 800f4ea:	1a82      	subs	r2, r0, r2
 800f4ec:	e7d8      	b.n	800f4a0 <lv_obj_align+0x144>
    return area_p->x2 - area_p->x1 + 1;
 800f4ee:	8aa9      	ldrh	r1, [r5, #20]
 800f4f0:	3101      	adds	r1, #1
 800f4f2:	1ac9      	subs	r1, r1, r3
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800f4f4:	b209      	sxth	r1, r1
 800f4f6:	eb01 7ad1 	add.w	sl, r1, r1, lsr #31
 800f4fa:	8aa1      	ldrh	r1, [r4, #20]
 800f4fc:	3101      	adds	r1, #1
 800f4fe:	1a8a      	subs	r2, r1, r2
 800f500:	b212      	sxth	r2, r2
 800f502:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800f506:	1051      	asrs	r1, r2, #1
 800f508:	ebc1 016a 	rsb	r1, r1, sl, asr #1
    return area_p->y2 - area_p->y1 + 1;
 800f50c:	8ae2      	ldrh	r2, [r4, #22]
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800f50e:	b209      	sxth	r1, r1
 800f510:	3201      	adds	r2, #1
            new_y = -lv_obj_get_height(obj);
 800f512:	1a82      	subs	r2, r0, r2
 800f514:	e757      	b.n	800f3c6 <lv_obj_align+0x6a>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800f516:	8aa1      	ldrh	r1, [r4, #20]
 800f518:	1a51      	subs	r1, r2, r1
 800f51a:	8aaa      	ldrh	r2, [r5, #20]
 800f51c:	4411      	add	r1, r2
 800f51e:	1ac9      	subs	r1, r1, r3
 800f520:	e7f4      	b.n	800f50c <lv_obj_align+0x1b0>
 800f522:	8aea      	ldrh	r2, [r5, #22]
 800f524:	3201      	adds	r2, #1
 800f526:	e78d      	b.n	800f444 <lv_obj_align+0xe8>
    return area_p->x2 - area_p->x1 + 1;
 800f528:	8aa9      	ldrh	r1, [r5, #20]
 800f52a:	3101      	adds	r1, #1
 800f52c:	1ac9      	subs	r1, r1, r3
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800f52e:	b209      	sxth	r1, r1
 800f530:	eb01 70d1 	add.w	r0, r1, r1, lsr #31
 800f534:	8aa1      	ldrh	r1, [r4, #20]
 800f536:	3101      	adds	r1, #1
 800f538:	1a8a      	subs	r2, r1, r2
 800f53a:	b212      	sxth	r2, r2
 800f53c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800f540:	1051      	asrs	r1, r2, #1
 800f542:	ebc1 0160 	rsb	r1, r1, r0, asr #1
    return area_p->y2 - area_p->y1 + 1;
 800f546:	8aea      	ldrh	r2, [r5, #22]
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800f548:	b209      	sxth	r1, r1
 800f54a:	3201      	adds	r2, #1
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800f54c:	eba2 0209 	sub.w	r2, r2, r9
 800f550:	e739      	b.n	800f3c6 <lv_obj_align+0x6a>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800f552:	8aa1      	ldrh	r1, [r4, #20]
 800f554:	1a51      	subs	r1, r2, r1
 800f556:	8aaa      	ldrh	r2, [r5, #20]
 800f558:	4411      	add	r1, r2
 800f55a:	1ac9      	subs	r1, r1, r3
 800f55c:	e7f3      	b.n	800f546 <lv_obj_align+0x1ea>
    return area_p->x2 - area_p->x1 + 1;
 800f55e:	8aa1      	ldrh	r1, [r4, #20]
 800f560:	3101      	adds	r1, #1
            new_x = -lv_obj_get_width(obj);
 800f562:	1a51      	subs	r1, r2, r1
 800f564:	e761      	b.n	800f42a <lv_obj_align+0xce>
 800f566:	8aa1      	ldrh	r1, [r4, #20]
 800f568:	3101      	adds	r1, #1
            new_x = -lv_obj_get_width(obj);
 800f56a:	1a51      	subs	r1, r2, r1
 800f56c:	e73c      	b.n	800f3e8 <lv_obj_align+0x8c>
 800f56e:	8aa1      	ldrh	r1, [r4, #20]
 800f570:	3101      	adds	r1, #1
            new_x = -lv_obj_get_width(obj);
 800f572:	1a51      	subs	r1, r2, r1
 800f574:	e778      	b.n	800f468 <lv_obj_align+0x10c>
 800f576:	8aa9      	ldrh	r1, [r5, #20]
 800f578:	3101      	adds	r1, #1
 800f57a:	e75d      	b.n	800f438 <lv_obj_align+0xdc>
 800f57c:	8aa9      	ldrh	r1, [r5, #20]
 800f57e:	3101      	adds	r1, #1
 800f580:	e7af      	b.n	800f4e2 <lv_obj_align+0x186>
 800f582:	8aa9      	ldrh	r1, [r5, #20]
 800f584:	3101      	adds	r1, #1
 800f586:	e779      	b.n	800f47c <lv_obj_align+0x120>
            new_y = 0;
 800f588:	2200      	movs	r2, #0
            new_x = 0;
 800f58a:	4611      	mov	r1, r2
 800f58c:	e78a      	b.n	800f4a4 <lv_obj_align+0x148>

0800f58e <lv_obj_align_origo>:
{
 800f58e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f592:	4605      	mov	r5, r0
 800f594:	4616      	mov	r6, r2
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800f596:	f9b0 b010 	ldrsh.w	fp, [r0, #16]
{
 800f59a:	4698      	mov	r8, r3
 800f59c:	f8b5 9014 	ldrh.w	r9, [r5, #20]
    return area_p->y2 - area_p->y1 + 1;
 800f5a0:	8aea      	ldrh	r2, [r5, #22]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800f5a2:	f9b5 a012 	ldrsh.w	sl, [r5, #18]
    return area_p->x2 - area_p->x1 + 1;
 800f5a6:	f109 0901 	add.w	r9, r9, #1
    return area_p->y2 - area_p->y1 + 1;
 800f5aa:	3201      	adds	r2, #1
    return obj->par;
 800f5ac:	6804      	ldr	r4, [r0, #0]
    return area_p->x2 - area_p->x1 + 1;
 800f5ae:	eba9 090b 	sub.w	r9, r9, fp
{
 800f5b2:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
    return area_p->y2 - area_p->y1 + 1;
 800f5b6:	eba2 020a 	sub.w	r2, r2, sl
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800f5ba:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 800f5be:	fa0f f989 	sxth.w	r9, r9
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800f5c2:	f9b4 c012 	ldrsh.w	ip, [r4, #18]
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 800f5c6:	b212      	sxth	r2, r2
    if(base == NULL) {
 800f5c8:	2900      	cmp	r1, #0
 800f5ca:	bf18      	it	ne
 800f5cc:	460c      	movne	r4, r1
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 800f5ce:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 800f5d2:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800f5d6:	f9b4 e012 	ldrsh.w	lr, [r4, #18]
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 800f5da:	ea4f 0969 	mov.w	r9, r9, asr #1
 800f5de:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 800f5e2:	1052      	asrs	r2, r2, #1
    switch(align) {
 800f5e4:	2e14      	cmp	r6, #20
 800f5e6:	d80c      	bhi.n	800f602 <lv_obj_align_origo+0x74>
 800f5e8:	e8df f006 	tbb	[pc, r6]
 800f5ec:	67425e2c 	.word	0x67425e2c
 800f5f0:	61754d64 	.word	0x61754d64
 800f5f4:	67425e6e 	.word	0x67425e6e
 800f5f8:	5e754d64 	.word	0x5e754d64
 800f5fc:	6e676461 	.word	0x6e676461
 800f600:	75          	.byte	0x75
 800f601:	00          	.byte	0x00
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800f602:	ebab 0100 	sub.w	r1, fp, r0
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800f606:	ebaa 020c 	sub.w	r2, sl, ip
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800f60a:	b209      	sxth	r1, r1
    new_y -= par_abs_y;
 800f60c:	eba7 0c0c 	sub.w	ip, r7, ip
    new_x -= par_abs_x;
 800f610:	eba8 0000 	sub.w	r0, r8, r0
            new_y = lv_obj_get_height(base) - obj_h_half;
 800f614:	b212      	sxth	r2, r2
    new_x -= par_abs_x;
 800f616:	4403      	add	r3, r0
    new_y -= par_abs_y;
 800f618:	44e6      	add	lr, ip
    lv_obj_set_pos(obj, new_x, new_y);
 800f61a:	4628      	mov	r0, r5
    new_x -= par_abs_x;
 800f61c:	4419      	add	r1, r3
    new_y -= par_abs_y;
 800f61e:	4472      	add	r2, lr
    lv_obj_set_pos(obj, new_x, new_y);
 800f620:	b209      	sxth	r1, r1
 800f622:	b212      	sxth	r2, r2
 800f624:	f7ff fe51 	bl	800f2ca <lv_obj_set_pos>
    obj->realign.origo_align = 1;
 800f628:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    obj->realign.align       = align;
 800f62c:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
    obj->realign.origo_align = 1;
 800f630:	f043 0302 	orr.w	r3, r3, #2
    obj->realign.xofs        = x_mod;
 800f634:	f8a5 803c 	strh.w	r8, [r5, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 800f638:	87ef      	strh	r7, [r5, #62]	; 0x3e
    obj->realign.base        = base;
 800f63a:	63ac      	str	r4, [r5, #56]	; 0x38
    obj->realign.origo_align = 1;
 800f63c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
}
 800f640:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return area_p->x2 - area_p->x1 + 1;
 800f644:	8aa1      	ldrh	r1, [r4, #20]
 800f646:	3101      	adds	r1, #1
 800f648:	1ac9      	subs	r1, r1, r3
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 800f64a:	b209      	sxth	r1, r1
 800f64c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800f650:	ebc9 0161 	rsb	r1, r9, r1, asr #1
    return area_p->y2 - area_p->y1 + 1;
 800f654:	f8b4 9016 	ldrh.w	r9, [r4, #22]
            new_x = lv_obj_get_width(base) - obj_w_half;
 800f658:	b209      	sxth	r1, r1
 800f65a:	f109 0901 	add.w	r9, r9, #1
 800f65e:	eba9 090e 	sub.w	r9, r9, lr
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800f662:	fa0f f989 	sxth.w	r9, r9
 800f666:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
 800f66a:	ebc2 0269 	rsb	r2, r2, r9, asr #1
 800f66e:	e7cd      	b.n	800f60c <lv_obj_align_origo+0x7e>
    return area_p->x2 - area_p->x1 + 1;
 800f670:	8aa1      	ldrh	r1, [r4, #20]
 800f672:	3101      	adds	r1, #1
 800f674:	1ac9      	subs	r1, r1, r3
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 800f676:	b209      	sxth	r1, r1
 800f678:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800f67c:	ebc9 0161 	rsb	r1, r9, r1, asr #1
            new_x = lv_obj_get_width(base) - obj_w_half;
 800f680:	b209      	sxth	r1, r1
            new_y = -obj_h_half;
 800f682:	4252      	negs	r2, r2
 800f684:	e7c2      	b.n	800f60c <lv_obj_align_origo+0x7e>
 800f686:	8aa1      	ldrh	r1, [r4, #20]
 800f688:	3101      	adds	r1, #1
 800f68a:	1ac9      	subs	r1, r1, r3
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 800f68c:	b209      	sxth	r1, r1
 800f68e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800f692:	ebc9 0161 	rsb	r1, r9, r1, asr #1
            new_y = lv_obj_get_height(base) - obj_h_half;
 800f696:	f1c2 0201 	rsb	r2, r2, #1
 800f69a:	f8b4 9016 	ldrh.w	r9, [r4, #22]
            new_x = lv_obj_get_width(base) - obj_w_half;
 800f69e:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) - obj_h_half;
 800f6a0:	444a      	add	r2, r9
 800f6a2:	eba2 020e 	sub.w	r2, r2, lr
 800f6a6:	e7b1      	b.n	800f60c <lv_obj_align_origo+0x7e>
            new_x = -obj_w_half;
 800f6a8:	f1c9 0100 	rsb	r1, r9, #0
 800f6ac:	e7e8      	b.n	800f680 <lv_obj_align_origo+0xf2>
            new_x = -obj_w_half;
 800f6ae:	f1c9 0100 	rsb	r1, r9, #0
 800f6b2:	e7cf      	b.n	800f654 <lv_obj_align_origo+0xc6>
            new_x = -obj_w_half;
 800f6b4:	f1c9 0100 	rsb	r1, r9, #0
 800f6b8:	e7ed      	b.n	800f696 <lv_obj_align_origo+0x108>
            new_x = lv_obj_get_width(base) - obj_w_half;
 800f6ba:	f1c9 0101 	rsb	r1, r9, #1
 800f6be:	f8b4 9014 	ldrh.w	r9, [r4, #20]
 800f6c2:	4449      	add	r1, r9
 800f6c4:	1ac9      	subs	r1, r1, r3
 800f6c6:	e7db      	b.n	800f680 <lv_obj_align_origo+0xf2>
            new_x = lv_obj_get_width(base) - obj_w_half;
 800f6c8:	f1c9 0101 	rsb	r1, r9, #1
 800f6cc:	f8b4 9014 	ldrh.w	r9, [r4, #20]
 800f6d0:	4449      	add	r1, r9
 800f6d2:	1ac9      	subs	r1, r1, r3
 800f6d4:	e7be      	b.n	800f654 <lv_obj_align_origo+0xc6>
            new_x = lv_obj_get_width(base) - obj_w_half;
 800f6d6:	f1c9 0101 	rsb	r1, r9, #1
 800f6da:	f8b4 9014 	ldrh.w	r9, [r4, #20]
 800f6de:	4449      	add	r1, r9
 800f6e0:	1ac9      	subs	r1, r1, r3
 800f6e2:	e7d8      	b.n	800f696 <lv_obj_align_origo+0x108>

0800f6e4 <lv_obj_realign>:
{
 800f6e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if(obj->realign.origo_align)
 800f6e6:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800f6ea:	f9b0 503e 	ldrsh.w	r5, [r0, #62]	; 0x3e
 800f6ee:	07a4      	lsls	r4, r4, #30
 800f6f0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800f6f2:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800f6f6:	f9b0 303c 	ldrsh.w	r3, [r0, #60]	; 0x3c
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800f6fa:	9500      	str	r5, [sp, #0]
    if(obj->realign.origo_align)
 800f6fc:	d503      	bpl.n	800f706 <lv_obj_realign+0x22>
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800f6fe:	f7ff ff46 	bl	800f58e <lv_obj_align_origo>
}
 800f702:	b003      	add	sp, #12
 800f704:	bd30      	pop	{r4, r5, pc}
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800f706:	f7ff fe29 	bl	800f35c <lv_obj_align>
}
 800f70a:	e7fa      	b.n	800f702 <lv_obj_realign+0x1e>

0800f70c <lv_obj_set_size>:
 800f70c:	8a83      	ldrh	r3, [r0, #20]
{
 800f70e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f710:	3301      	adds	r3, #1
 800f712:	4615      	mov	r5, r2
 800f714:	8a02      	ldrh	r2, [r0, #16]
 800f716:	4604      	mov	r4, r0
 800f718:	460e      	mov	r6, r1
 800f71a:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 800f71c:	b21b      	sxth	r3, r3
 800f71e:	4299      	cmp	r1, r3
 800f720:	d106      	bne.n	800f730 <lv_obj_set_size+0x24>
    return area_p->y2 - area_p->y1 + 1;
 800f722:	8ac3      	ldrh	r3, [r0, #22]
 800f724:	8a42      	ldrh	r2, [r0, #18]
 800f726:	3301      	adds	r3, #1
 800f728:	1a9b      	subs	r3, r3, r2
 800f72a:	b21b      	sxth	r3, r3
 800f72c:	429d      	cmp	r5, r3
 800f72e:	d02b      	beq.n	800f788 <lv_obj_set_size+0x7c>
    lv_obj_invalidate(obj);
 800f730:	4620      	mov	r0, r4
    obj->coords.x2 = obj->coords.x1 + w - 1;
 800f732:	3e01      	subs	r6, #1
    lv_obj_invalidate(obj);
 800f734:	f7ff fd5c 	bl	800f1f0 <lv_obj_invalidate>
    memcpy(dest, src, sizeof(lv_area_t));
 800f738:	2208      	movs	r2, #8
 800f73a:	f104 0110 	add.w	r1, r4, #16
 800f73e:	4668      	mov	r0, sp
 800f740:	f007 f816 	bl	8016770 <memcpy>
    obj->coords.x2 = obj->coords.x1 + w - 1;
 800f744:	8a23      	ldrh	r3, [r4, #16]
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800f746:	3d01      	subs	r5, #1
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 800f748:	466a      	mov	r2, sp
    obj->coords.x2 = obj->coords.x1 + w - 1;
 800f74a:	441e      	add	r6, r3
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800f74c:	8a63      	ldrh	r3, [r4, #18]
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 800f74e:	2102      	movs	r1, #2
 800f750:	4620      	mov	r0, r4
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800f752:	441d      	add	r5, r3
    obj->coords.x2 = obj->coords.x1 + w - 1;
 800f754:	82a6      	strh	r6, [r4, #20]
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 800f756:	69e3      	ldr	r3, [r4, #28]
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800f758:	82e5      	strh	r5, [r4, #22]
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 800f75a:	4798      	blx	r3
    return obj->par;
 800f75c:	6820      	ldr	r0, [r4, #0]
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 800f75e:	b118      	cbz	r0, 800f768 <lv_obj_set_size+0x5c>
 800f760:	69c3      	ldr	r3, [r0, #28]
 800f762:	4622      	mov	r2, r4
 800f764:	2101      	movs	r1, #1
 800f766:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
 800f768:	1d26      	adds	r6, r4, #4
 800f76a:	4630      	mov	r0, r6
 800f76c:	f000 fc98 	bl	80100a0 <lv_ll_get_head>
 800f770:	4605      	mov	r5, r0
 800f772:	b958      	cbnz	r0, 800f78c <lv_obj_set_size+0x80>
    lv_obj_invalidate(obj);
 800f774:	4620      	mov	r0, r4
 800f776:	f7ff fd3b 	bl	800f1f0 <lv_obj_invalidate>
    if(obj->realign.auto_realign) lv_obj_realign(obj);
 800f77a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800f77e:	07db      	lsls	r3, r3, #31
 800f780:	d502      	bpl.n	800f788 <lv_obj_set_size+0x7c>
 800f782:	4620      	mov	r0, r4
 800f784:	f7ff ffae 	bl	800f6e4 <lv_obj_realign>
}
 800f788:	b002      	add	sp, #8
 800f78a:	bd70      	pop	{r4, r5, r6, pc}
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
 800f78c:	69eb      	ldr	r3, [r5, #28]
 800f78e:	2200      	movs	r2, #0
 800f790:	2103      	movs	r1, #3
 800f792:	4628      	mov	r0, r5
 800f794:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
 800f796:	4629      	mov	r1, r5
 800f798:	4630      	mov	r0, r6
 800f79a:	f000 fc87 	bl	80100ac <lv_ll_get_next>
 800f79e:	e7e7      	b.n	800f770 <lv_obj_set_size+0x64>

0800f7a0 <lv_obj_set_width>:
    return area_p->y2 - area_p->y1 + 1;
 800f7a0:	8ac2      	ldrh	r2, [r0, #22]
 800f7a2:	8a43      	ldrh	r3, [r0, #18]
 800f7a4:	3201      	adds	r2, #1
 800f7a6:	1ad2      	subs	r2, r2, r3
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
 800f7a8:	b212      	sxth	r2, r2
 800f7aa:	f7ff bfaf 	b.w	800f70c <lv_obj_set_size>

0800f7ae <lv_obj_set_height>:
    return area_p->x2 - area_p->x1 + 1;
 800f7ae:	8a83      	ldrh	r3, [r0, #20]
 800f7b0:	8a02      	ldrh	r2, [r0, #16]
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	1a9b      	subs	r3, r3, r2
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
 800f7b6:	460a      	mov	r2, r1
 800f7b8:	b219      	sxth	r1, r3
 800f7ba:	f7ff bfa7 	b.w	800f70c <lv_obj_set_size>

0800f7be <lv_obj_refresh_style>:
{
 800f7be:	b510      	push	{r4, lr}
 800f7c0:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 800f7c2:	f7ff fd15 	bl	800f1f0 <lv_obj_invalidate>
    obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	2104      	movs	r1, #4
 800f7ca:	69e3      	ldr	r3, [r4, #28]
 800f7cc:	4620      	mov	r0, r4
 800f7ce:	4798      	blx	r3
    lv_obj_invalidate(obj);
 800f7d0:	4620      	mov	r0, r4
}
 800f7d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(obj);
 800f7d6:	f7ff bd0b 	b.w	800f1f0 <lv_obj_invalidate>

0800f7da <lv_obj_set_hidden>:
    if(!obj->hidden) lv_obj_invalidate(obj); /*Invalidate when not hidden (hidden objects are ignored) */
 800f7da:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800f7de:	06da      	lsls	r2, r3, #27
{
 800f7e0:	b570      	push	{r4, r5, r6, lr}
 800f7e2:	4604      	mov	r4, r0
 800f7e4:	460d      	mov	r5, r1
    if(!obj->hidden) lv_obj_invalidate(obj); /*Invalidate when not hidden (hidden objects are ignored) */
 800f7e6:	d401      	bmi.n	800f7ec <lv_obj_set_hidden+0x12>
 800f7e8:	f7ff fd02 	bl	800f1f0 <lv_obj_invalidate>
    obj->hidden = en == false ? 0 : 1;
 800f7ec:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800f7f0:	f365 1304 	bfi	r3, r5, #4, #1
 800f7f4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    if(!obj->hidden) lv_obj_invalidate(obj); /*Invalidate when not hidden (hidden objects are ignored) */
 800f7f8:	06db      	lsls	r3, r3, #27
 800f7fa:	d402      	bmi.n	800f802 <lv_obj_set_hidden+0x28>
 800f7fc:	4620      	mov	r0, r4
 800f7fe:	f7ff fcf7 	bl	800f1f0 <lv_obj_invalidate>
    return obj->par;
 800f802:	6820      	ldr	r0, [r4, #0]
    par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 800f804:	4622      	mov	r2, r4
 800f806:	2101      	movs	r1, #1
 800f808:	69c3      	ldr	r3, [r0, #28]
}
 800f80a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 800f80e:	4718      	bx	r3

0800f810 <lv_obj_refresh_ext_draw_pad>:
    obj->ext_draw_pad = 0;
 800f810:	2200      	movs	r2, #0
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 800f812:	69c3      	ldr	r3, [r0, #28]
 800f814:	2105      	movs	r1, #5
{
 800f816:	b510      	push	{r4, lr}
 800f818:	4604      	mov	r4, r0
    obj->ext_draw_pad = 0;
 800f81a:	8682      	strh	r2, [r0, #52]	; 0x34
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 800f81c:	4798      	blx	r3
    lv_obj_invalidate(obj);
 800f81e:	4620      	mov	r0, r4
}
 800f820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(obj);
 800f824:	f7ff bce4 	b.w	800f1f0 <lv_obj_invalidate>

0800f828 <lv_obj_del>:
{
 800f828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f82c:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 800f82e:	f7ff fcdf 	bl	800f1f0 <lv_obj_invalidate>
    return obj->group_p;
 800f832:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    if(group) lv_group_remove_obj(obj);
 800f834:	b117      	cbz	r7, 800f83c <lv_obj_del+0x14>
 800f836:	4620      	mov	r0, r4
 800f838:	f7ff fb48 	bl	800eecc <lv_group_remove_obj>
    i = lv_ll_get_head(&(obj->child_ll));
 800f83c:	1d26      	adds	r6, r4, #4
    lv_anim_del(obj, NULL);
 800f83e:	2100      	movs	r1, #0
 800f840:	4620      	mov	r0, r4
 800f842:	f7f4 f9d7 	bl	8003bf4 <lv_anim_del>
    i = lv_ll_get_head(&(obj->child_ll));
 800f846:	4630      	mov	r0, r6
 800f848:	f000 fc2a 	bl	80100a0 <lv_ll_get_head>
 800f84c:	4605      	mov	r5, r0
    while(i != NULL) {
 800f84e:	bb5d      	cbnz	r5, 800f8a8 <lv_obj_del+0x80>
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
 800f850:	462a      	mov	r2, r5
 800f852:	2113      	movs	r1, #19
 800f854:	4620      	mov	r0, r4
 800f856:	f7ff fc63 	bl	800f120 <lv_event_send>
    lv_event_mark_deleted(obj);
 800f85a:	4620      	mov	r0, r4
 800f85c:	f7f3 f81e 	bl	800289c <lv_event_mark_deleted>
    return obj->par;
 800f860:	6826      	ldr	r6, [r4, #0]
    if(par == NULL) { /*It is a screen*/
 800f862:	bb5e      	cbnz	r6, 800f8bc <lv_obj_del+0x94>
        lv_disp_t * d = lv_obj_get_disp(obj);
 800f864:	f7f3 f8a8 	bl	80029b8 <lv_obj_get_disp>
        lv_ll_rem(&d->scr_ll, obj);
 800f868:	4621      	mov	r1, r4
 800f86a:	3028      	adds	r0, #40	; 0x28
        lv_ll_rem(&(par->child_ll), obj);
 800f86c:	f000 fc6e 	bl	801014c <lv_ll_rem>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800f870:	2000      	movs	r0, #0
 800f872:	f7f2 ff63 	bl	800273c <lv_indev_get_next>
            indev->proc.types.pointer.last_pressed = NULL;
 800f876:	f04f 0800 	mov.w	r8, #0
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800f87a:	4605      	mov	r5, r0
    while(indev) {
 800f87c:	bb0d      	cbnz	r5, 800f8c2 <lv_obj_del+0x9a>
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
 800f87e:	69e3      	ldr	r3, [r4, #28]
 800f880:	462a      	mov	r2, r5
 800f882:	4629      	mov	r1, r5
 800f884:	4620      	mov	r0, r4
 800f886:	4798      	blx	r3
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
 800f888:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f88a:	b108      	cbz	r0, 800f890 <lv_obj_del+0x68>
 800f88c:	f7f3 ff32 	bl	80036f4 <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 800f890:	4620      	mov	r0, r4
 800f892:	f7f3 ff2f 	bl	80036f4 <lv_mem_free>
    if(par != NULL) {
 800f896:	b126      	cbz	r6, 800f8a2 <lv_obj_del+0x7a>
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, NULL);
 800f898:	69f3      	ldr	r3, [r6, #28]
 800f89a:	2200      	movs	r2, #0
 800f89c:	2101      	movs	r1, #1
 800f89e:	4630      	mov	r0, r6
 800f8a0:	4798      	blx	r3
}
 800f8a2:	2000      	movs	r0, #0
 800f8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        i_next = lv_ll_get_next(&(obj->child_ll), i);
 800f8a8:	4629      	mov	r1, r5
 800f8aa:	4630      	mov	r0, r6
 800f8ac:	f000 fbfe 	bl	80100ac <lv_ll_get_next>
 800f8b0:	4680      	mov	r8, r0
        delete_children(i);
 800f8b2:	4628      	mov	r0, r5
 800f8b4:	f7ff fc3d 	bl	800f132 <delete_children>
        i = i_next;
 800f8b8:	4645      	mov	r5, r8
 800f8ba:	e7c8      	b.n	800f84e <lv_obj_del+0x26>
        lv_ll_rem(&(par->child_ll), obj);
 800f8bc:	4621      	mov	r1, r4
 800f8be:	1d30      	adds	r0, r6, #4
 800f8c0:	e7d4      	b.n	800f86c <lv_obj_del+0x44>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 800f8c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800f8c4:	42a3      	cmp	r3, r4
 800f8c6:	d002      	beq.n	800f8ce <lv_obj_del+0xa6>
 800f8c8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800f8ca:	42a3      	cmp	r3, r4
 800f8cc:	d102      	bne.n	800f8d4 <lv_obj_del+0xac>
            lv_indev_reset(indev);
 800f8ce:	4628      	mov	r0, r5
 800f8d0:	f7ff fb87 	bl	800efe2 <lv_indev_reset>
        if(indev->proc.types.pointer.last_pressed == obj) {
 800f8d4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800f8d6:	42a3      	cmp	r3, r4
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800f8d8:	6dab      	ldr	r3, [r5, #88]	; 0x58
            indev->proc.types.pointer.last_pressed = NULL;
 800f8da:	bf08      	it	eq
 800f8dc:	f8c5 8040 	streq.w	r8, [r5, #64]	; 0x40
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800f8e0:	42bb      	cmp	r3, r7
 800f8e2:	d106      	bne.n	800f8f2 <lv_obj_del+0xca>
 800f8e4:	f7f2 ffd4 	bl	8002890 <lv_indev_get_obj_act>
 800f8e8:	4284      	cmp	r4, r0
 800f8ea:	d102      	bne.n	800f8f2 <lv_obj_del+0xca>
            lv_indev_reset(indev);
 800f8ec:	4628      	mov	r0, r5
 800f8ee:	f7ff fb78 	bl	800efe2 <lv_indev_reset>
        indev = lv_indev_get_next(indev);
 800f8f2:	4628      	mov	r0, r5
 800f8f4:	f7f2 ff22 	bl	800273c <lv_indev_get_next>
 800f8f8:	4605      	mov	r5, r0
 800f8fa:	e7bf      	b.n	800f87c <lv_obj_del+0x54>

0800f8fc <lv_obj_get_parent>:
}
 800f8fc:	6800      	ldr	r0, [r0, #0]
 800f8fe:	4770      	bx	lr

0800f900 <lv_obj_get_child>:
    if(child == NULL) {
 800f900:	3004      	adds	r0, #4
 800f902:	b909      	cbnz	r1, 800f908 <lv_obj_get_child+0x8>
        result = lv_ll_get_head(&obj->child_ll);
 800f904:	f000 bbcc 	b.w	80100a0 <lv_ll_get_head>
        result = lv_ll_get_next(&obj->child_ll, child);
 800f908:	f000 bbd0 	b.w	80100ac <lv_ll_get_next>

0800f90c <refresh_children_style>:
{
 800f90c:	b538      	push	{r3, r4, r5, lr}
 800f90e:	4605      	mov	r5, r0
        result = lv_ll_get_head(&obj->child_ll);
 800f910:	3004      	adds	r0, #4
 800f912:	f000 fbc5 	bl	80100a0 <lv_ll_get_head>
        child = lv_obj_get_child(obj, child);
 800f916:	4604      	mov	r4, r0
    while(child != NULL) {
 800f918:	b900      	cbnz	r0, 800f91c <refresh_children_style+0x10>
}
 800f91a:	bd38      	pop	{r3, r4, r5, pc}
        if(child->style_p == NULL) {
 800f91c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f91e:	b953      	cbnz	r3, 800f936 <refresh_children_style+0x2a>
            refresh_children_style(child); /*Check children too*/
 800f920:	4620      	mov	r0, r4
 800f922:	f7ff fff3 	bl	800f90c <refresh_children_style>
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
 800f926:	4620      	mov	r0, r4
 800f928:	f7ff ff49 	bl	800f7be <lv_obj_refresh_style>
        child = lv_obj_get_child(obj, child);
 800f92c:	4621      	mov	r1, r4
 800f92e:	4628      	mov	r0, r5
 800f930:	f7ff ffe6 	bl	800f900 <lv_obj_get_child>
 800f934:	e7ef      	b.n	800f916 <refresh_children_style+0xa>
        } else if(child->style_p->glass) {
 800f936:	781b      	ldrb	r3, [r3, #0]
 800f938:	07db      	lsls	r3, r3, #31
 800f93a:	d5f7      	bpl.n	800f92c <refresh_children_style+0x20>
            refresh_children_style(child);
 800f93c:	4620      	mov	r0, r4
 800f93e:	f7ff ffe5 	bl	800f90c <refresh_children_style>
 800f942:	e7f3      	b.n	800f92c <refresh_children_style+0x20>

0800f944 <lv_obj_set_style>:
{
 800f944:	b510      	push	{r4, lr}
 800f946:	4604      	mov	r4, r0
    obj->style_p = style;
 800f948:	6281      	str	r1, [r0, #40]	; 0x28
    refresh_children_style(obj);
 800f94a:	f7ff ffdf 	bl	800f90c <refresh_children_style>
    lv_obj_refresh_style(obj);
 800f94e:	4620      	mov	r0, r4
}
 800f950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_refresh_style(obj);
 800f954:	f7ff bf33 	b.w	800f7be <lv_obj_refresh_style>

0800f958 <lv_obj_get_child_back>:
    if(child == NULL) {
 800f958:	3004      	adds	r0, #4
 800f95a:	b909      	cbnz	r1, 800f960 <lv_obj_get_child_back+0x8>
        result = lv_ll_get_tail(&obj->child_ll);
 800f95c:	f000 bba3 	b.w	80100a6 <lv_ll_get_tail>
        result = lv_ll_get_prev(&obj->child_ll, child);
 800f960:	f000 bbb4 	b.w	80100cc <lv_ll_get_prev>

0800f964 <lv_obj_get_coords>:
{
 800f964:	460b      	mov	r3, r1
    memcpy(dest, src, sizeof(lv_area_t));
 800f966:	2208      	movs	r2, #8
 800f968:	f100 0110 	add.w	r1, r0, #16
 800f96c:	4618      	mov	r0, r3
 800f96e:	f006 beff 	b.w	8016770 <memcpy>

0800f972 <lv_obj_get_x>:
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800f972:	6803      	ldr	r3, [r0, #0]
 800f974:	8a00      	ldrh	r0, [r0, #16]
 800f976:	8a1b      	ldrh	r3, [r3, #16]
 800f978:	1ac0      	subs	r0, r0, r3
}
 800f97a:	b200      	sxth	r0, r0
 800f97c:	4770      	bx	lr

0800f97e <lv_obj_get_y>:
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800f97e:	6803      	ldr	r3, [r0, #0]
 800f980:	8a40      	ldrh	r0, [r0, #18]
 800f982:	8a5b      	ldrh	r3, [r3, #18]
 800f984:	1ac0      	subs	r0, r0, r3
}
 800f986:	b200      	sxth	r0, r0
 800f988:	4770      	bx	lr

0800f98a <lv_obj_get_width>:
    return area_p->x2 - area_p->x1 + 1;
 800f98a:	8a83      	ldrh	r3, [r0, #20]
 800f98c:	8a00      	ldrh	r0, [r0, #16]
 800f98e:	3301      	adds	r3, #1
 800f990:	1a18      	subs	r0, r3, r0
}
 800f992:	b200      	sxth	r0, r0
 800f994:	4770      	bx	lr

0800f996 <lv_obj_get_height>:
    return area_p->y2 - area_p->y1 + 1;
 800f996:	8ac3      	ldrh	r3, [r0, #22]
 800f998:	8a40      	ldrh	r0, [r0, #18]
 800f99a:	3301      	adds	r3, #1
 800f99c:	1a18      	subs	r0, r3, r0
}
 800f99e:	b200      	sxth	r0, r0
 800f9a0:	4770      	bx	lr

0800f9a2 <lv_obj_get_auto_realign>:
    return obj->realign.auto_realign ? true : false;
 800f9a2:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800f9a6:	f000 0001 	and.w	r0, r0, #1
 800f9aa:	4770      	bx	lr

0800f9ac <lv_obj_get_width_fit>:
{
 800f9ac:	b510      	push	{r4, lr}
 800f9ae:	4604      	mov	r4, r0
    const lv_style_t * style = lv_obj_get_style(obj);
 800f9b0:	f7f3 f9c6 	bl	8002d40 <lv_obj_get_style>
    return area_p->x2 - area_p->x1 + 1;
 800f9b4:	8aa3      	ldrh	r3, [r4, #20]
 800f9b6:	8a22      	ldrh	r2, [r4, #16]
 800f9b8:	3301      	adds	r3, #1
 800f9ba:	1a9b      	subs	r3, r3, r2
    return lv_obj_get_width(obj) - style->body.padding.left - style->body.padding.right;
 800f9bc:	8b42      	ldrh	r2, [r0, #26]
 800f9be:	8b80      	ldrh	r0, [r0, #28]
 800f9c0:	1a9b      	subs	r3, r3, r2
 800f9c2:	1a18      	subs	r0, r3, r0
}
 800f9c4:	b200      	sxth	r0, r0
 800f9c6:	bd10      	pop	{r4, pc}

0800f9c8 <lv_obj_get_height_fit>:
{
 800f9c8:	b510      	push	{r4, lr}
 800f9ca:	4604      	mov	r4, r0
    const lv_style_t * style = lv_obj_get_style(obj);
 800f9cc:	f7f3 f9b8 	bl	8002d40 <lv_obj_get_style>
    return area_p->y2 - area_p->y1 + 1;
 800f9d0:	8ae3      	ldrh	r3, [r4, #22]
 800f9d2:	8a62      	ldrh	r2, [r4, #18]
 800f9d4:	3301      	adds	r3, #1
 800f9d6:	1a9b      	subs	r3, r3, r2
    return lv_obj_get_height(obj) - style->body.padding.top - style->body.padding.bottom;
 800f9d8:	8ac2      	ldrh	r2, [r0, #22]
 800f9da:	8b00      	ldrh	r0, [r0, #24]
 800f9dc:	1a9b      	subs	r3, r3, r2
 800f9de:	1a18      	subs	r0, r3, r0
}
 800f9e0:	b200      	sxth	r0, r0
 800f9e2:	bd10      	pop	{r4, pc}

0800f9e4 <lv_obj_get_hidden>:
    return obj->hidden == 0 ? false : true;
 800f9e4:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 800f9e8:	f3c0 1000 	ubfx	r0, r0, #4, #1
 800f9ec:	4770      	bx	lr

0800f9ee <lv_obj_get_opa_scale>:
    while(parent) {
 800f9ee:	b908      	cbnz	r0, 800f9f4 <lv_obj_get_opa_scale+0x6>
    return LV_OPA_COVER;
 800f9f0:	20ff      	movs	r0, #255	; 0xff
}
 800f9f2:	4770      	bx	lr
        if(parent->opa_scale_en) return parent->opa_scale;
 800f9f4:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800f9f8:	065b      	lsls	r3, r3, #25
 800f9fa:	d502      	bpl.n	800fa02 <lv_obj_get_opa_scale+0x14>
 800f9fc:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
 800fa00:	4770      	bx	lr
    return obj->par;
 800fa02:	6800      	ldr	r0, [r0, #0]
 800fa04:	e7f3      	b.n	800f9ee <lv_obj_get_opa_scale>

0800fa06 <lv_obj_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 800fa06:	2a02      	cmp	r2, #2
{
 800fa08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fa0a:	4604      	mov	r4, r0
 800fa0c:	460d      	mov	r5, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 800fa0e:	d13d      	bne.n	800fa8c <lv_obj_design+0x86>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
 800fa10:	f100 0610 	add.w	r6, r0, #16
 800fa14:	4628      	mov	r0, r5
 800fa16:	4631      	mov	r1, r6
 800fa18:	f000 fe93 	bl	8010742 <lv_area_is_in>
 800fa1c:	b398      	cbz	r0, 800fa86 <lv_obj_design+0x80>
        const lv_style_t * style = lv_obj_get_style(obj);
 800fa1e:	4620      	mov	r0, r4
 800fa20:	f7f3 f98e 	bl	8002d40 <lv_obj_get_style>
        if(style->body.opa < LV_OPA_MAX) return false;
 800fa24:	7a03      	ldrb	r3, [r0, #8]
 800fa26:	2bfa      	cmp	r3, #250	; 0xfa
 800fa28:	d92d      	bls.n	800fa86 <lv_obj_design+0x80>
        lv_coord_t r = style->body.radius;
 800fa2a:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
        if(r == LV_RADIUS_CIRCLE) return false;
 800fa2e:	f647 4318 	movw	r3, #31768	; 0x7c18
 800fa32:	429c      	cmp	r4, r3
 800fa34:	d027      	beq.n	800fa86 <lv_obj_design+0x80>
    memcpy(dest, src, sizeof(lv_area_t));
 800fa36:	4631      	mov	r1, r6
 800fa38:	2208      	movs	r2, #8
 800fa3a:	4668      	mov	r0, sp
 800fa3c:	f006 fe98 	bl	8016770 <memcpy>
        area_tmp.x1 += r;
 800fa40:	f8bd 3000 	ldrh.w	r3, [sp]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 800fa44:	4669      	mov	r1, sp
 800fa46:	4628      	mov	r0, r5
        area_tmp.x1 += r;
 800fa48:	4423      	add	r3, r4
 800fa4a:	f8ad 3000 	strh.w	r3, [sp]
        area_tmp.x2 -= r;
 800fa4e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800fa52:	1b1b      	subs	r3, r3, r4
 800fa54:	f8ad 3004 	strh.w	r3, [sp, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 800fa58:	f000 fe73 	bl	8010742 <lv_area_is_in>
 800fa5c:	b198      	cbz	r0, 800fa86 <lv_obj_design+0x80>
 800fa5e:	4631      	mov	r1, r6
 800fa60:	2208      	movs	r2, #8
 800fa62:	4668      	mov	r0, sp
 800fa64:	f006 fe84 	bl	8016770 <memcpy>
        area_tmp.y1 += r;
 800fa68:	f8bd 3002 	ldrh.w	r3, [sp, #2]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 800fa6c:	4669      	mov	r1, sp
 800fa6e:	4628      	mov	r0, r5
        area_tmp.y1 += r;
 800fa70:	4423      	add	r3, r4
 800fa72:	f8ad 3002 	strh.w	r3, [sp, #2]
        area_tmp.y2 -= r;
 800fa76:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800fa7a:	1b1c      	subs	r4, r3, r4
 800fa7c:	f8ad 4006 	strh.w	r4, [sp, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 800fa80:	f000 fe5f 	bl	8010742 <lv_area_is_in>
 800fa84:	b900      	cbnz	r0, 800fa88 <lv_obj_design+0x82>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
 800fa86:	2000      	movs	r0, #0
}
 800fa88:	b002      	add	sp, #8
 800fa8a:	bd70      	pop	{r4, r5, r6, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 800fa8c:	b95a      	cbnz	r2, 800faa6 <lv_obj_design+0xa0>
        const lv_style_t * style = lv_obj_get_style(obj);
 800fa8e:	f7f3 f957 	bl	8002d40 <lv_obj_get_style>
 800fa92:	4602      	mov	r2, r0
        lv_draw_rect(&obj->coords, mask_p, style, lv_obj_get_opa_scale(obj));
 800fa94:	4620      	mov	r0, r4
 800fa96:	f7ff ffaa 	bl	800f9ee <lv_obj_get_opa_scale>
 800fa9a:	4629      	mov	r1, r5
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	f104 0010 	add.w	r0, r4, #16
 800faa2:	f001 fdda 	bl	801165a <lv_draw_rect>
    return true;
 800faa6:	2001      	movs	r0, #1
 800faa8:	e7ee      	b.n	800fa88 <lv_obj_design+0x82>

0800faaa <lv_obj_is_protected>:
    return (obj->protect & prot) == 0 ? false : true;
 800faaa:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800faae:	4219      	tst	r1, r3
}
 800fab0:	bf14      	ite	ne
 800fab2:	2001      	movne	r0, #1
 800fab4:	2000      	moveq	r0, #0
 800fab6:	4770      	bx	lr

0800fab8 <lv_obj_get_signal_cb>:
}
 800fab8:	69c0      	ldr	r0, [r0, #28]
 800faba:	4770      	bx	lr

0800fabc <lv_obj_get_design_cb>:
}
 800fabc:	6a00      	ldr	r0, [r0, #32]
 800fabe:	4770      	bx	lr

0800fac0 <lv_obj_get_ext_attr>:
}
 800fac0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800fac2:	4770      	bx	lr

0800fac4 <lv_obj_get_type>:
{
 800fac4:	b530      	push	{r4, r5, lr}
 800fac6:	460c      	mov	r4, r1
 800fac8:	b089      	sub	sp, #36	; 0x24
 800faca:	4605      	mov	r5, r0
    memset(buf, 0, sizeof(lv_obj_type_t));
 800facc:	2220      	movs	r2, #32
 800face:	2100      	movs	r1, #0
 800fad0:	4620      	mov	r0, r4
 800fad2:	f006 fe77 	bl	80167c4 <memset>
    memset(&tmp, 0, sizeof(lv_obj_type_t));
 800fad6:	2220      	movs	r2, #32
 800fad8:	2100      	movs	r1, #0
 800fada:	4668      	mov	r0, sp
 800fadc:	f006 fe72 	bl	80167c4 <memset>
    obj->signal_cb(obj, LV_SIGNAL_GET_TYPE, &tmp);
 800fae0:	69eb      	ldr	r3, [r5, #28]
 800fae2:	466a      	mov	r2, sp
 800fae4:	2106      	movs	r1, #6
 800fae6:	4628      	mov	r0, r5
 800fae8:	4798      	blx	r3
    for(cnt = 0; cnt < LV_MAX_ANCESTOR_NUM; cnt++) {
 800faea:	466a      	mov	r2, sp
    obj->signal_cb(obj, LV_SIGNAL_GET_TYPE, &tmp);
 800faec:	2300      	movs	r3, #0
        if(tmp.type[cnt] == NULL) break;
 800faee:	f852 0b04 	ldr.w	r0, [r2], #4
 800faf2:	b2d9      	uxtb	r1, r3
 800faf4:	b940      	cbnz	r0, 800fb08 <lv_obj_get_type+0x44>
 800faf6:	eb0d 0381 	add.w	r3, sp, r1, lsl #2
 800fafa:	2200      	movs	r2, #0
    for(i = 0; i < cnt; i++) {
 800fafc:	b2d0      	uxtb	r0, r2
 800fafe:	3b04      	subs	r3, #4
 800fb00:	4281      	cmp	r1, r0
 800fb02:	d806      	bhi.n	800fb12 <lv_obj_get_type+0x4e>
}
 800fb04:	b009      	add	sp, #36	; 0x24
 800fb06:	bd30      	pop	{r4, r5, pc}
 800fb08:	3301      	adds	r3, #1
    for(cnt = 0; cnt < LV_MAX_ANCESTOR_NUM; cnt++) {
 800fb0a:	2b08      	cmp	r3, #8
 800fb0c:	d1ef      	bne.n	800faee <lv_obj_get_type+0x2a>
 800fb0e:	4619      	mov	r1, r3
 800fb10:	e7f1      	b.n	800faf6 <lv_obj_get_type+0x32>
        buf->type[i] = tmp.type[cnt - 1 - i];
 800fb12:	6818      	ldr	r0, [r3, #0]
 800fb14:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
 800fb18:	3201      	adds	r2, #1
 800fb1a:	e7ef      	b.n	800fafc <lv_obj_get_type+0x38>

0800fb1c <lv_obj_get_group>:
}
 800fb1c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800fb1e:	4770      	bx	lr

0800fb20 <lv_obj_is_focused>:
{
 800fb20:	b510      	push	{r4, lr}
 800fb22:	4604      	mov	r4, r0
    if(obj->group_p) {
 800fb24:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800fb26:	b120      	cbz	r0, 800fb32 <lv_obj_is_focused+0x12>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
 800fb28:	f7ff fa1c 	bl	800ef64 <lv_group_get_focused>
 800fb2c:	1a23      	subs	r3, r4, r0
 800fb2e:	4258      	negs	r0, r3
 800fb30:	4158      	adcs	r0, r3
}
 800fb32:	bd10      	pop	{r4, pc}

0800fb34 <lv_refr_get_top_obj>:
{
 800fb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb36:	460c      	mov	r4, r1
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 800fb38:	3110      	adds	r1, #16
{
 800fb3a:	4606      	mov	r6, r0
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 800fb3c:	f000 fe01 	bl	8010742 <lv_area_is_in>
 800fb40:	b908      	cbnz	r0, 800fb46 <lv_refr_get_top_obj+0x12>
    lv_obj_t * found_p = NULL;
 800fb42:	2000      	movs	r0, #0
}
 800fb44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 800fb46:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800fb4a:	06db      	lsls	r3, r3, #27
 800fb4c:	d4f9      	bmi.n	800fb42 <lv_refr_get_top_obj+0xe>
        LV_LL_READ(obj->child_ll, i)
 800fb4e:	1d27      	adds	r7, r4, #4
 800fb50:	4638      	mov	r0, r7
 800fb52:	f000 faa5 	bl	80100a0 <lv_ll_get_head>
 800fb56:	4605      	mov	r5, r0
 800fb58:	b998      	cbnz	r0, 800fb82 <lv_refr_get_top_obj+0x4e>
            const lv_style_t * style = lv_obj_get_style(obj);
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	f7f3 f8f0 	bl	8002d40 <lv_obj_get_style>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 800fb60:	7a03      	ldrb	r3, [r0, #8]
 800fb62:	2bff      	cmp	r3, #255	; 0xff
 800fb64:	d1ed      	bne.n	800fb42 <lv_refr_get_top_obj+0xe>
 800fb66:	6a23      	ldr	r3, [r4, #32]
 800fb68:	2202      	movs	r2, #2
 800fb6a:	4631      	mov	r1, r6
 800fb6c:	4620      	mov	r0, r4
 800fb6e:	4798      	blx	r3
 800fb70:	2800      	cmp	r0, #0
 800fb72:	d0e6      	beq.n	800fb42 <lv_refr_get_top_obj+0xe>
               lv_obj_get_opa_scale(obj) == LV_OPA_COVER) {
 800fb74:	4620      	mov	r0, r4
 800fb76:	f7ff ff3a 	bl	800f9ee <lv_obj_get_opa_scale>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 800fb7a:	28ff      	cmp	r0, #255	; 0xff
 800fb7c:	d1e1      	bne.n	800fb42 <lv_refr_get_top_obj+0xe>
 800fb7e:	4620      	mov	r0, r4
    return found_p;
 800fb80:	e7e0      	b.n	800fb44 <lv_refr_get_top_obj+0x10>
            found_p = lv_refr_get_top_obj(area_p, i);
 800fb82:	4629      	mov	r1, r5
 800fb84:	4630      	mov	r0, r6
 800fb86:	f7ff ffd5 	bl	800fb34 <lv_refr_get_top_obj>
            if(found_p != NULL) {
 800fb8a:	2800      	cmp	r0, #0
 800fb8c:	d1da      	bne.n	800fb44 <lv_refr_get_top_obj+0x10>
        LV_LL_READ(obj->child_ll, i)
 800fb8e:	4629      	mov	r1, r5
 800fb90:	4638      	mov	r0, r7
 800fb92:	f000 fa8b 	bl	80100ac <lv_ll_get_next>
 800fb96:	e7de      	b.n	800fb56 <lv_refr_get_top_obj+0x22>

0800fb98 <lv_refr_obj>:
{
 800fb98:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(obj->hidden != 0) return;
 800fb9a:	f890 6030 	ldrb.w	r6, [r0, #48]	; 0x30
{
 800fb9e:	b08b      	sub	sp, #44	; 0x2c
 800fba0:	4604      	mov	r4, r0
 800fba2:	460f      	mov	r7, r1
    if(obj->hidden != 0) return;
 800fba4:	f016 0610 	ands.w	r6, r6, #16
 800fba8:	d138      	bne.n	800fc1c <lv_refr_obj+0x84>
    lv_obj_get_coords(obj, &obj_area);
 800fbaa:	a904      	add	r1, sp, #16
    lv_coord_t ext_size = obj->ext_draw_pad;
 800fbac:	f9b0 5034 	ldrsh.w	r5, [r0, #52]	; 0x34
    lv_obj_get_coords(obj, &obj_area);
 800fbb0:	f7ff fed8 	bl	800f964 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 800fbb4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 800fbb8:	aa04      	add	r2, sp, #16
 800fbba:	4639      	mov	r1, r7
    obj_area.x1 -= ext_size;
 800fbbc:	1b5b      	subs	r3, r3, r5
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 800fbbe:	a802      	add	r0, sp, #8
    obj_area.x1 -= ext_size;
 800fbc0:	f8ad 3010 	strh.w	r3, [sp, #16]
    obj_area.y1 -= ext_size;
 800fbc4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800fbc8:	1b5b      	subs	r3, r3, r5
 800fbca:	f8ad 3012 	strh.w	r3, [sp, #18]
    obj_area.x2 += ext_size;
 800fbce:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800fbd2:	442b      	add	r3, r5
 800fbd4:	f8ad 3014 	strh.w	r3, [sp, #20]
    obj_area.y2 += ext_size;
 800fbd8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800fbdc:	441d      	add	r5, r3
 800fbde:	f8ad 5016 	strh.w	r5, [sp, #22]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 800fbe2:	f000 fd2c 	bl	801063e <lv_area_intersect>
    if(union_ok != false) {
 800fbe6:	b1c8      	cbz	r0, 800fc1c <lv_refr_obj+0x84>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
 800fbe8:	4632      	mov	r2, r6
 800fbea:	6a23      	ldr	r3, [r4, #32]
 800fbec:	a902      	add	r1, sp, #8
 800fbee:	4620      	mov	r0, r4
 800fbf0:	4798      	blx	r3
        lv_obj_get_coords(obj, &obj_area);
 800fbf2:	a904      	add	r1, sp, #16
 800fbf4:	4620      	mov	r0, r4
 800fbf6:	f7ff feb5 	bl	800f964 <lv_obj_get_coords>
        union_ok = lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 800fbfa:	aa04      	add	r2, sp, #16
 800fbfc:	4639      	mov	r1, r7
 800fbfe:	4668      	mov	r0, sp
 800fc00:	f000 fd1d 	bl	801063e <lv_area_intersect>
        if(union_ok != false) {
 800fc04:	b128      	cbz	r0, 800fc12 <lv_refr_obj+0x7a>
            LV_LL_READ_BACK(obj->child_ll, child_p)
 800fc06:	1d26      	adds	r6, r4, #4
 800fc08:	4630      	mov	r0, r6
 800fc0a:	f000 fa4c 	bl	80100a6 <lv_ll_get_tail>
 800fc0e:	4605      	mov	r5, r0
 800fc10:	b930      	cbnz	r0, 800fc20 <lv_refr_obj+0x88>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
 800fc12:	6a23      	ldr	r3, [r4, #32]
 800fc14:	2201      	movs	r2, #1
 800fc16:	a902      	add	r1, sp, #8
 800fc18:	4620      	mov	r0, r4
 800fc1a:	4798      	blx	r3
}
 800fc1c:	b00b      	add	sp, #44	; 0x2c
 800fc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lv_obj_get_coords(child_p, &child_area);
 800fc20:	a908      	add	r1, sp, #32
 800fc22:	4628      	mov	r0, r5
 800fc24:	f7ff fe9e 	bl	800f964 <lv_obj_get_coords>
                ext_size = child_p->ext_draw_pad;
 800fc28:	f9b5 3034 	ldrsh.w	r3, [r5, #52]	; 0x34
                child_area.x1 -= ext_size;
 800fc2c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 800fc30:	4669      	mov	r1, sp
 800fc32:	a806      	add	r0, sp, #24
                child_area.x1 -= ext_size;
 800fc34:	1ad2      	subs	r2, r2, r3
 800fc36:	f8ad 2020 	strh.w	r2, [sp, #32]
                child_area.y1 -= ext_size;
 800fc3a:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 800fc3e:	1ad2      	subs	r2, r2, r3
 800fc40:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
                child_area.x2 += ext_size;
 800fc44:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800fc48:	441a      	add	r2, r3
 800fc4a:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                child_area.y2 += ext_size;
 800fc4e:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800fc52:	4413      	add	r3, r2
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 800fc54:	aa08      	add	r2, sp, #32
                child_area.y2 += ext_size;
 800fc56:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 800fc5a:	f000 fcf0 	bl	801063e <lv_area_intersect>
                if(union_ok) {
 800fc5e:	b118      	cbz	r0, 800fc68 <lv_refr_obj+0xd0>
                    lv_refr_obj(child_p, &mask_child);
 800fc60:	a906      	add	r1, sp, #24
 800fc62:	4628      	mov	r0, r5
 800fc64:	f7ff ff98 	bl	800fb98 <lv_refr_obj>
            LV_LL_READ_BACK(obj->child_ll, child_p)
 800fc68:	4629      	mov	r1, r5
 800fc6a:	4630      	mov	r0, r6
 800fc6c:	f000 fa2e 	bl	80100cc <lv_ll_get_prev>
 800fc70:	e7cd      	b.n	800fc0e <lv_refr_obj+0x76>

0800fc72 <lv_refr_init>:
}
 800fc72:	4770      	bx	lr

0800fc74 <lv_color_mix>:
    return color.full;
#endif
}

static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 800fc74:	b570      	push	{r4, r5, r6, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800fc76:	b293      	uxth	r3, r2
 800fc78:	f3c1 25c4 	ubfx	r5, r1, #11, #5
 800fc7c:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800fc80:	f3c0 24c4 	ubfx	r4, r0, #11, #5
    uint16_t g_2   = (c2.ch.green_h << 3) + c2.ch.green_l;
    uint16_t g_out = (uint16_t)((uint16_t)g_1 * mix + (g_2 * (255 - mix))) >> 8;
    ret.ch.green_h = g_out >> 3;
    ret.ch.green_l = g_out & 0x7;
#else
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800fc84:	f3c1 1645 	ubfx	r6, r1, #5, #6
#endif
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800fc88:	f001 011f 	and.w	r1, r1, #31
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800fc8c:	fb15 f502 	smulbb	r5, r5, r2
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800fc90:	fb16 f602 	smulbb	r6, r6, r2
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800fc94:	fb04 5403 	mla	r4, r4, r3, r5
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800fc98:	fb11 f102 	smulbb	r1, r1, r2
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800fc9c:	f3c0 1545 	ubfx	r5, r0, #5, #6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800fca0:	f000 001f 	and.w	r0, r0, #31
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800fca4:	f3c4 2404 	ubfx	r4, r4, #8, #5
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800fca8:	fb05 6503 	mla	r5, r5, r3, r6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800fcac:	fb00 1303 	mla	r3, r0, r3, r1
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 800fcb0:	f04f 0000 	mov.w	r0, #0
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800fcb4:	f3c5 2505 	ubfx	r5, r5, #8, #6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800fcb8:	f3c3 2307 	ubfx	r3, r3, #8, #8
    return ret;
 800fcbc:	f363 0004 	bfi	r0, r3, #0, #5
 800fcc0:	f365 104a 	bfi	r0, r5, #5, #6
 800fcc4:	f364 20cf 	bfi	r0, r4, #11, #5
}
 800fcc8:	bd70      	pop	{r4, r5, r6, pc}

0800fcca <lv_style_copy>:
 * @param dest pointer to the destination style
 * @param src pointer to the source style
 */
void lv_style_copy(lv_style_t * dest, const lv_style_t * src)
{
    memcpy(dest, src, sizeof(lv_style_t));
 800fcca:	223c      	movs	r2, #60	; 0x3c
 800fccc:	f006 bd50 	b.w	8016770 <memcpy>

0800fcd0 <lv_style_mix>:
 * @param end end style
 * @param res store the result style here
 * @param ratio the ratio of mix [0..256]; 0: `start` style; 256: `end` style
 */
void lv_style_mix(const lv_style_t * start, const lv_style_t * end, lv_style_t * res, uint16_t ratio)
{
 800fcd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcd4:	4614      	mov	r4, r2
 800fcd6:	461f      	mov	r7, r3
    STYLE_ATTR_MIX(body.opa, ratio);
 800fcd8:	7a02      	ldrb	r2, [r0, #8]
{
 800fcda:	460d      	mov	r5, r1
    STYLE_ATTR_MIX(body.opa, ratio);
 800fcdc:	7a0b      	ldrb	r3, [r1, #8]
{
 800fcde:	4606      	mov	r6, r0
    STYLE_ATTR_MIX(body.opa, ratio);
 800fce0:	429a      	cmp	r2, r3
 800fce2:	bf1f      	itttt	ne
 800fce4:	1a9b      	subne	r3, r3, r2
 800fce6:	437b      	mulne	r3, r7
 800fce8:	eb02 2323 	addne.w	r3, r2, r3, asr #8
 800fcec:	b2db      	uxtbne	r3, r3
 800fcee:	7223      	strb	r3, [r4, #8]
    STYLE_ATTR_MIX(body.radius, ratio);
 800fcf0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800fcf4:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	bf1e      	ittt	ne
 800fcfc:	1a9b      	subne	r3, r3, r2
 800fcfe:	437b      	mulne	r3, r7
 800fd00:	eb02 2323 	addne.w	r3, r2, r3, asr #8
    STYLE_ATTR_MIX(body.border.width, ratio);
 800fd04:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    STYLE_ATTR_MIX(body.radius, ratio);
 800fd08:	bf18      	it	ne
 800fd0a:	b21b      	sxthne	r3, r3
 800fd0c:	80e3      	strh	r3, [r4, #6]
    STYLE_ATTR_MIX(body.border.width, ratio);
 800fd0e:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800fd12:	429a      	cmp	r2, r3
 800fd14:	bf1f      	itttt	ne
 800fd16:	1a9b      	subne	r3, r3, r2
 800fd18:	437b      	mulne	r3, r7
 800fd1a:	eb02 2323 	addne.w	r3, r2, r3, asr #8
 800fd1e:	b21b      	sxthne	r3, r3
 800fd20:	81a3      	strh	r3, [r4, #12]
    STYLE_ATTR_MIX(body.border.opa, ratio);
 800fd22:	7bcb      	ldrb	r3, [r1, #15]
 800fd24:	7bc2      	ldrb	r2, [r0, #15]
 800fd26:	429a      	cmp	r2, r3
 800fd28:	bf1f      	itttt	ne
 800fd2a:	1a9b      	subne	r3, r3, r2
 800fd2c:	437b      	mulne	r3, r7
 800fd2e:	eb02 2323 	addne.w	r3, r2, r3, asr #8
 800fd32:	b2db      	uxtbne	r3, r3
 800fd34:	73e3      	strb	r3, [r4, #15]
    STYLE_ATTR_MIX(body.shadow.width, ratio);
 800fd36:	f9b1 3012 	ldrsh.w	r3, [r1, #18]
 800fd3a:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
 800fd3e:	429a      	cmp	r2, r3
 800fd40:	bf1e      	ittt	ne
 800fd42:	1a9b      	subne	r3, r3, r2
 800fd44:	437b      	mulne	r3, r7
 800fd46:	eb02 2323 	addne.w	r3, r2, r3, asr #8
    STYLE_ATTR_MIX(body.padding.left, ratio);
 800fd4a:	f9b0 201a 	ldrsh.w	r2, [r0, #26]
    STYLE_ATTR_MIX(body.shadow.width, ratio);
 800fd4e:	bf18      	it	ne
 800fd50:	b21b      	sxthne	r3, r3
 800fd52:	8263      	strh	r3, [r4, #18]
    STYLE_ATTR_MIX(body.padding.left, ratio);
 800fd54:	f9b1 301a 	ldrsh.w	r3, [r1, #26]
 800fd58:	429a      	cmp	r2, r3
 800fd5a:	bf1e      	ittt	ne
 800fd5c:	1a9b      	subne	r3, r3, r2
 800fd5e:	437b      	mulne	r3, r7
 800fd60:	eb02 2323 	addne.w	r3, r2, r3, asr #8
    STYLE_ATTR_MIX(body.padding.right, ratio);
 800fd64:	f9b0 201c 	ldrsh.w	r2, [r0, #28]
    STYLE_ATTR_MIX(body.padding.left, ratio);
 800fd68:	bf18      	it	ne
 800fd6a:	b21b      	sxthne	r3, r3
 800fd6c:	8363      	strh	r3, [r4, #26]
    STYLE_ATTR_MIX(body.padding.right, ratio);
 800fd6e:	f9b1 301c 	ldrsh.w	r3, [r1, #28]
 800fd72:	429a      	cmp	r2, r3
 800fd74:	bf1e      	ittt	ne
 800fd76:	1a9b      	subne	r3, r3, r2
 800fd78:	437b      	mulne	r3, r7
 800fd7a:	eb02 2323 	addne.w	r3, r2, r3, asr #8
    STYLE_ATTR_MIX(body.padding.top, ratio);
 800fd7e:	f9b0 2016 	ldrsh.w	r2, [r0, #22]
    STYLE_ATTR_MIX(body.padding.right, ratio);
 800fd82:	bf18      	it	ne
 800fd84:	b21b      	sxthne	r3, r3
 800fd86:	83a3      	strh	r3, [r4, #28]
    STYLE_ATTR_MIX(body.padding.top, ratio);
 800fd88:	f9b1 3016 	ldrsh.w	r3, [r1, #22]
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	bf1e      	ittt	ne
 800fd90:	1a9b      	subne	r3, r3, r2
 800fd92:	437b      	mulne	r3, r7
 800fd94:	eb02 2323 	addne.w	r3, r2, r3, asr #8
    STYLE_ATTR_MIX(body.padding.bottom, ratio);
 800fd98:	f9b0 2018 	ldrsh.w	r2, [r0, #24]
    STYLE_ATTR_MIX(body.padding.top, ratio);
 800fd9c:	bf18      	it	ne
 800fd9e:	b21b      	sxthne	r3, r3
 800fda0:	82e3      	strh	r3, [r4, #22]
    STYLE_ATTR_MIX(body.padding.bottom, ratio);
 800fda2:	f9b1 3018 	ldrsh.w	r3, [r1, #24]
 800fda6:	429a      	cmp	r2, r3
 800fda8:	bf1e      	ittt	ne
 800fdaa:	1a9b      	subne	r3, r3, r2
 800fdac:	437b      	mulne	r3, r7
 800fdae:	eb02 2323 	addne.w	r3, r2, r3, asr #8
    STYLE_ATTR_MIX(body.padding.inner, ratio);
 800fdb2:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    STYLE_ATTR_MIX(body.padding.bottom, ratio);
 800fdb6:	bf18      	it	ne
 800fdb8:	b21b      	sxthne	r3, r3
 800fdba:	8323      	strh	r3, [r4, #24]
    STYLE_ATTR_MIX(body.padding.inner, ratio);
 800fdbc:	f9b1 301e 	ldrsh.w	r3, [r1, #30]
 800fdc0:	429a      	cmp	r2, r3
 800fdc2:	bf1e      	ittt	ne
 800fdc4:	1a9b      	subne	r3, r3, r2
 800fdc6:	437b      	mulne	r3, r7
 800fdc8:	eb02 2323 	addne.w	r3, r2, r3, asr #8
    STYLE_ATTR_MIX(text.line_space, ratio);
 800fdcc:	f9b0 202a 	ldrsh.w	r2, [r0, #42]	; 0x2a
    STYLE_ATTR_MIX(body.padding.inner, ratio);
 800fdd0:	bf18      	it	ne
 800fdd2:	b21b      	sxthne	r3, r3
 800fdd4:	83e3      	strh	r3, [r4, #30]
    STYLE_ATTR_MIX(text.line_space, ratio);
 800fdd6:	f9b1 302a 	ldrsh.w	r3, [r1, #42]	; 0x2a
 800fdda:	429a      	cmp	r2, r3
 800fddc:	bf1e      	ittt	ne
 800fdde:	1a9b      	subne	r3, r3, r2
 800fde0:	437b      	mulne	r3, r7
 800fde2:	eb02 2323 	addne.w	r3, r2, r3, asr #8
    STYLE_ATTR_MIX(text.letter_space, ratio);
 800fde6:	f9b0 2028 	ldrsh.w	r2, [r0, #40]	; 0x28
    STYLE_ATTR_MIX(text.line_space, ratio);
 800fdea:	bf18      	it	ne
 800fdec:	b21b      	sxthne	r3, r3
 800fdee:	8563      	strh	r3, [r4, #42]	; 0x2a
    STYLE_ATTR_MIX(text.letter_space, ratio);
 800fdf0:	f9b1 3028 	ldrsh.w	r3, [r1, #40]	; 0x28
 800fdf4:	429a      	cmp	r2, r3
 800fdf6:	bf1f      	itttt	ne
 800fdf8:	1a9b      	subne	r3, r3, r2
 800fdfa:	437b      	mulne	r3, r7
 800fdfc:	eb02 2323 	addne.w	r3, r2, r3, asr #8
 800fe00:	b21b      	sxthne	r3, r3
 800fe02:	8523      	strh	r3, [r4, #40]	; 0x28
    STYLE_ATTR_MIX(text.opa, ratio);
 800fe04:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 800fe08:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 800fe0c:	429a      	cmp	r2, r3
 800fe0e:	bf1f      	itttt	ne
 800fe10:	1a9b      	subne	r3, r3, r2
 800fe12:	437b      	mulne	r3, r7
 800fe14:	eb02 2323 	addne.w	r3, r2, r3, asr #8
 800fe18:	b2db      	uxtbne	r3, r3
 800fe1a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    STYLE_ATTR_MIX(line.width, ratio);
 800fe1e:	f9b1 3036 	ldrsh.w	r3, [r1, #54]	; 0x36
 800fe22:	f9b0 2036 	ldrsh.w	r2, [r0, #54]	; 0x36
 800fe26:	429a      	cmp	r2, r3
 800fe28:	bf1f      	itttt	ne
 800fe2a:	1a9b      	subne	r3, r3, r2
 800fe2c:	437b      	mulne	r3, r7
 800fe2e:	eb02 2323 	addne.w	r3, r2, r3, asr #8
 800fe32:	b21b      	sxthne	r3, r3
 800fe34:	86e3      	strh	r3, [r4, #54]	; 0x36
    STYLE_ATTR_MIX(line.opa, ratio);
 800fe36:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 800fe3a:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	bf1f      	itttt	ne
 800fe42:	1a9b      	subne	r3, r3, r2
 800fe44:	437b      	mulne	r3, r7
 800fe46:	eb02 2323 	addne.w	r3, r2, r3, asr #8
 800fe4a:	b2db      	uxtbne	r3, r3
 800fe4c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    STYLE_ATTR_MIX(image.intense, ratio);
 800fe50:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 800fe54:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 800fe58:	429a      	cmp	r2, r3
 800fe5a:	bf1f      	itttt	ne
 800fe5c:	1a9b      	subne	r3, r3, r2
 800fe5e:	437b      	mulne	r3, r7
 800fe60:	eb02 2323 	addne.w	r3, r2, r3, asr #8
 800fe64:	b2db      	uxtbne	r3, r3
 800fe66:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    STYLE_ATTR_MIX(image.opa, ratio);
 800fe6a:	f891 3033 	ldrb.w	r3, [r1, #51]	; 0x33
 800fe6e:	f890 2033 	ldrb.w	r2, [r0, #51]	; 0x33
 800fe72:	429a      	cmp	r2, r3
 800fe74:	bf1f      	itttt	ne
 800fe76:	1a9b      	subne	r3, r3, r2
 800fe78:	437b      	mulne	r3, r7
 800fe7a:	eb02 2323 	addne.w	r3, r2, r3, asr #8
 800fe7e:	b2db      	uxtbne	r3, r3

    lv_opa_t opa = ratio == STYLE_MIX_MAX ? LV_OPA_COVER : ratio;
 800fe80:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 800fe84:	bf14      	ite	ne
 800fe86:	46b8      	movne	r8, r7
 800fe88:	f04f 08ff 	moveq.w	r8, #255	; 0xff
 800fe8c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 800fe90:	fa5f f888 	uxtb.w	r8, r8

    res->body.main_color   = lv_color_mix(end->body.main_color, start->body.main_color, opa);
 800fe94:	8841      	ldrh	r1, [r0, #2]
 800fe96:	8868      	ldrh	r0, [r5, #2]
 800fe98:	4642      	mov	r2, r8
 800fe9a:	f7ff feeb 	bl	800fc74 <lv_color_mix>
    res->body.grad_color   = lv_color_mix(end->body.grad_color, start->body.grad_color, opa);
 800fe9e:	4642      	mov	r2, r8
    res->body.main_color   = lv_color_mix(end->body.main_color, start->body.main_color, opa);
 800fea0:	8060      	strh	r0, [r4, #2]
    res->body.grad_color   = lv_color_mix(end->body.grad_color, start->body.grad_color, opa);
 800fea2:	88b1      	ldrh	r1, [r6, #4]
 800fea4:	88a8      	ldrh	r0, [r5, #4]
 800fea6:	f7ff fee5 	bl	800fc74 <lv_color_mix>
    res->body.border.color = lv_color_mix(end->body.border.color, start->body.border.color, opa);
 800feaa:	4642      	mov	r2, r8
    res->body.grad_color   = lv_color_mix(end->body.grad_color, start->body.grad_color, opa);
 800feac:	80a0      	strh	r0, [r4, #4]
    res->body.border.color = lv_color_mix(end->body.border.color, start->body.border.color, opa);
 800feae:	8971      	ldrh	r1, [r6, #10]
 800feb0:	8968      	ldrh	r0, [r5, #10]
 800feb2:	f7ff fedf 	bl	800fc74 <lv_color_mix>
    res->body.shadow.color = lv_color_mix(end->body.shadow.color, start->body.shadow.color, opa);
 800feb6:	4642      	mov	r2, r8
    res->body.border.color = lv_color_mix(end->body.border.color, start->body.border.color, opa);
 800feb8:	8160      	strh	r0, [r4, #10]
    res->body.shadow.color = lv_color_mix(end->body.shadow.color, start->body.shadow.color, opa);
 800feba:	8a31      	ldrh	r1, [r6, #16]
 800febc:	8a28      	ldrh	r0, [r5, #16]
 800febe:	f7ff fed9 	bl	800fc74 <lv_color_mix>
    res->text.color        = lv_color_mix(end->text.color, start->text.color, opa);
 800fec2:	4642      	mov	r2, r8
    res->body.shadow.color = lv_color_mix(end->body.shadow.color, start->body.shadow.color, opa);
 800fec4:	8220      	strh	r0, [r4, #16]
    res->text.color        = lv_color_mix(end->text.color, start->text.color, opa);
 800fec6:	8c31      	ldrh	r1, [r6, #32]
 800fec8:	8c28      	ldrh	r0, [r5, #32]
 800feca:	f7ff fed3 	bl	800fc74 <lv_color_mix>
    res->image.color       = lv_color_mix(end->image.color, start->image.color, opa);
 800fece:	4642      	mov	r2, r8
    res->text.color        = lv_color_mix(end->text.color, start->text.color, opa);
 800fed0:	8420      	strh	r0, [r4, #32]
    res->image.color       = lv_color_mix(end->image.color, start->image.color, opa);
 800fed2:	8e31      	ldrh	r1, [r6, #48]	; 0x30
 800fed4:	8e28      	ldrh	r0, [r5, #48]	; 0x30
 800fed6:	f7ff fecd 	bl	800fc74 <lv_color_mix>
    res->line.color        = lv_color_mix(end->line.color, start->line.color, opa);
 800feda:	4642      	mov	r2, r8
    res->image.color       = lv_color_mix(end->image.color, start->image.color, opa);
 800fedc:	8620      	strh	r0, [r4, #48]	; 0x30
    res->line.color        = lv_color_mix(end->line.color, start->line.color, opa);
 800fede:	8eb1      	ldrh	r1, [r6, #52]	; 0x34
 800fee0:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 800fee2:	f7ff fec7 	bl	800fc74 <lv_color_mix>

    if(ratio < (STYLE_MIX_MAX >> 1)) {
 800fee6:	2f7f      	cmp	r7, #127	; 0x7f
    res->line.color        = lv_color_mix(end->line.color, start->line.color, opa);
 800fee8:	86a0      	strh	r0, [r4, #52]	; 0x34
    if(ratio < (STYLE_MIX_MAX >> 1)) {
 800feea:	7823      	ldrb	r3, [r4, #0]
 800feec:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800fef0:	d812      	bhi.n	800ff18 <lv_style_mix+0x248>
        res->body.border.part = start->body.border.part;
 800fef2:	7bb1      	ldrb	r1, [r6, #14]
 800fef4:	73a1      	strb	r1, [r4, #14]
        res->glass            = start->glass;
 800fef6:	7831      	ldrb	r1, [r6, #0]
 800fef8:	f361 0300 	bfi	r3, r1, #0, #1
 800fefc:	7023      	strb	r3, [r4, #0]
        res->text.font        = start->text.font;
 800fefe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ff00:	6263      	str	r3, [r4, #36]	; 0x24
        res->body.shadow.type = start->body.shadow.type;
 800ff02:	7d33      	ldrb	r3, [r6, #20]
 800ff04:	7523      	strb	r3, [r4, #20]
        res->line.rounded     = start->line.rounded;
 800ff06:	f896 1039 	ldrb.w	r1, [r6, #57]	; 0x39
    } else {
        res->body.border.part = end->body.border.part;
        res->glass            = end->glass;
        res->text.font        = end->text.font;
        res->body.shadow.type = end->body.shadow.type;
        res->line.rounded     = end->line.rounded;
 800ff0a:	4613      	mov	r3, r2
 800ff0c:	f361 0300 	bfi	r3, r1, #0, #1
 800ff10:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    }
}
 800ff14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        res->body.border.part = end->body.border.part;
 800ff18:	7ba9      	ldrb	r1, [r5, #14]
 800ff1a:	73a1      	strb	r1, [r4, #14]
        res->glass            = end->glass;
 800ff1c:	7829      	ldrb	r1, [r5, #0]
 800ff1e:	f361 0300 	bfi	r3, r1, #0, #1
 800ff22:	7023      	strb	r3, [r4, #0]
        res->text.font        = end->text.font;
 800ff24:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ff26:	6263      	str	r3, [r4, #36]	; 0x24
        res->body.shadow.type = end->body.shadow.type;
 800ff28:	7d2b      	ldrb	r3, [r5, #20]
 800ff2a:	7523      	strb	r3, [r4, #20]
        res->line.rounded     = end->line.rounded;
 800ff2c:	f895 1039 	ldrb.w	r1, [r5, #57]	; 0x39
 800ff30:	e7eb      	b.n	800ff0a <lv_style_mix+0x23a>

0800ff32 <lv_fs_get_real_path>:
    path++; /*Ignore the driver letter*/
 800ff32:	1c42      	adds	r2, r0, #1
 800ff34:	4610      	mov	r0, r2
    while(*path != '\0') {
 800ff36:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ff3a:	b12b      	cbz	r3, 800ff48 <lv_fs_get_real_path+0x16>
        if(*path == ':' || *path == '\\' || *path == '/') {
 800ff3c:	2b3a      	cmp	r3, #58	; 0x3a
 800ff3e:	d0f9      	beq.n	800ff34 <lv_fs_get_real_path+0x2>
 800ff40:	2b5c      	cmp	r3, #92	; 0x5c
 800ff42:	d0f7      	beq.n	800ff34 <lv_fs_get_real_path+0x2>
 800ff44:	2b2f      	cmp	r3, #47	; 0x2f
 800ff46:	d0f5      	beq.n	800ff34 <lv_fs_get_real_path+0x2>
}
 800ff48:	4770      	bx	lr

0800ff4a <lv_fs_close>:
{
 800ff4a:	b538      	push	{r3, r4, r5, lr}
 800ff4c:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 800ff4e:	6840      	ldr	r0, [r0, #4]
 800ff50:	b160      	cbz	r0, 800ff6c <lv_fs_close+0x22>
    if(file_p->drv->close_cb == NULL) {
 800ff52:	6903      	ldr	r3, [r0, #16]
 800ff54:	b163      	cbz	r3, 800ff70 <lv_fs_close+0x26>
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 800ff56:	6821      	ldr	r1, [r4, #0]
 800ff58:	4798      	blx	r3
 800ff5a:	4605      	mov	r5, r0
    lv_mem_free(file_p->file_d); /*Clean up*/
 800ff5c:	6820      	ldr	r0, [r4, #0]
 800ff5e:	f7f3 fbc9 	bl	80036f4 <lv_mem_free>
    file_p->file_d = NULL;
 800ff62:	2300      	movs	r3, #0
    file_p->drv    = NULL;
 800ff64:	e9c4 3300 	strd	r3, r3, [r4]
}
 800ff68:	4628      	mov	r0, r5
 800ff6a:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
 800ff6c:	250b      	movs	r5, #11
 800ff6e:	e7fb      	b.n	800ff68 <lv_fs_close+0x1e>
        return LV_FS_RES_NOT_IMP;
 800ff70:	2509      	movs	r5, #9
 800ff72:	e7f9      	b.n	800ff68 <lv_fs_close+0x1e>

0800ff74 <lv_fs_read>:
{
 800ff74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ff76:	4606      	mov	r6, r0
    if(br != NULL) *br = 0;
 800ff78:	461c      	mov	r4, r3
 800ff7a:	b10b      	cbz	r3, 800ff80 <lv_fs_read+0xc>
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	6023      	str	r3, [r4, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 800ff80:	6870      	ldr	r0, [r6, #4]
 800ff82:	b170      	cbz	r0, 800ffa2 <lv_fs_read+0x2e>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 800ff84:	6985      	ldr	r5, [r0, #24]
 800ff86:	b175      	cbz	r5, 800ffa6 <lv_fs_read+0x32>
    uint32_t br_tmp = 0;
 800ff88:	2300      	movs	r3, #0
 800ff8a:	9303      	str	r3, [sp, #12]
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 800ff8c:	ab03      	add	r3, sp, #12
 800ff8e:	9300      	str	r3, [sp, #0]
 800ff90:	4613      	mov	r3, r2
 800ff92:	460a      	mov	r2, r1
 800ff94:	6831      	ldr	r1, [r6, #0]
 800ff96:	47a8      	blx	r5
    if(br != NULL) *br = br_tmp;
 800ff98:	b10c      	cbz	r4, 800ff9e <lv_fs_read+0x2a>
 800ff9a:	9b03      	ldr	r3, [sp, #12]
 800ff9c:	6023      	str	r3, [r4, #0]
}
 800ff9e:	b004      	add	sp, #16
 800ffa0:	bd70      	pop	{r4, r5, r6, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 800ffa2:	200b      	movs	r0, #11
 800ffa4:	e7fb      	b.n	800ff9e <lv_fs_read+0x2a>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 800ffa6:	2009      	movs	r0, #9
 800ffa8:	e7f9      	b.n	800ff9e <lv_fs_read+0x2a>

0800ffaa <lv_fs_seek>:
    if(file_p->drv == NULL) {
 800ffaa:	6843      	ldr	r3, [r0, #4]
{
 800ffac:	460a      	mov	r2, r1
 800ffae:	b410      	push	{r4}
    if(file_p->drv == NULL) {
 800ffb0:	b133      	cbz	r3, 800ffc0 <lv_fs_seek+0x16>
    if(file_p->drv->seek_cb == NULL) {
 800ffb2:	6a1c      	ldr	r4, [r3, #32]
 800ffb4:	b13c      	cbz	r4, 800ffc6 <lv_fs_seek+0x1c>
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 800ffb6:	6801      	ldr	r1, [r0, #0]
 800ffb8:	4618      	mov	r0, r3
 800ffba:	4623      	mov	r3, r4
}
 800ffbc:	bc10      	pop	{r4}
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 800ffbe:	4718      	bx	r3
        return LV_FS_RES_INV_PARAM;
 800ffc0:	200b      	movs	r0, #11
}
 800ffc2:	bc10      	pop	{r4}
 800ffc4:	4770      	bx	lr
        return LV_FS_RES_NOT_IMP;
 800ffc6:	2009      	movs	r0, #9
 800ffc8:	e7fb      	b.n	800ffc2 <lv_fs_seek+0x18>

0800ffca <node_set_next.isra.0>:
 * Set the 'next node pointer' of a node
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
 800ffca:	b507      	push	{r0, r1, r2, lr}
 800ffcc:	9201      	str	r2, [sp, #4]
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 800ffce:	b149      	cbz	r1, 800ffe4 <node_set_next.isra.0+0x1a>

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
    if(next)
 800ffd0:	6800      	ldr	r0, [r0, #0]
 800ffd2:	3004      	adds	r0, #4
 800ffd4:	4408      	add	r0, r1
 800ffd6:	4611      	mov	r1, r2
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 800ffd8:	2204      	movs	r2, #4
    if(next)
 800ffda:	b131      	cbz	r1, 800ffea <node_set_next.isra.0+0x20>
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 800ffdc:	eb0d 0102 	add.w	r1, sp, r2
 800ffe0:	f006 fbc6 	bl	8016770 <memcpy>
    else
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
}
 800ffe4:	b003      	add	sp, #12
 800ffe6:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 800ffea:	f006 fbeb 	bl	80167c4 <memset>
 800ffee:	e7f9      	b.n	800ffe4 <node_set_next.isra.0+0x1a>

0800fff0 <node_set_prev.isra.2>:
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
 800fff0:	b507      	push	{r0, r1, r2, lr}
 800fff2:	9201      	str	r2, [sp, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 800fff4:	b141      	cbz	r1, 8010008 <node_set_prev.isra.2+0x18>
    if(prev)
 800fff6:	6800      	ldr	r0, [r0, #0]
 800fff8:	4408      	add	r0, r1
 800fffa:	4611      	mov	r1, r2
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 800fffc:	2204      	movs	r2, #4
    if(prev)
 800fffe:	b131      	cbz	r1, 801000e <node_set_prev.isra.2+0x1e>
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 8010000:	eb0d 0102 	add.w	r1, sp, r2
 8010004:	f006 fbb4 	bl	8016770 <memcpy>
}
 8010008:	b003      	add	sp, #12
 801000a:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(act + LL_PREV_P_OFFSET(ll_p), 0, node_p_size);
 801000e:	f006 fbd9 	bl	80167c4 <memset>
 8010012:	e7f9      	b.n	8010008 <node_set_prev.isra.2+0x18>

08010014 <lv_ll_init>:
    ll_p->head = NULL;
 8010014:	2300      	movs	r3, #0
    ll_p->tail = NULL;
 8010016:	e9c0 3301 	strd	r3, r3, [r0, #4]
    if(node_size & 0x3) {
 801001a:	078b      	lsls	r3, r1, #30
        node_size = node_size & (~0x3);
 801001c:	bf1c      	itt	ne
 801001e:	f021 0103 	bicne.w	r1, r1, #3
        node_size += 4;
 8010022:	3104      	addne	r1, #4
    ll_p->n_size = node_size;
 8010024:	6001      	str	r1, [r0, #0]
}
 8010026:	4770      	bx	lr

08010028 <lv_ll_ins_head>:
{
 8010028:	b538      	push	{r3, r4, r5, lr}
 801002a:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 801002c:	6800      	ldr	r0, [r0, #0]
 801002e:	3008      	adds	r0, #8
 8010030:	f7f3 fb1e 	bl	8003670 <lv_mem_alloc>
    if(n_new != NULL) {
 8010034:	4605      	mov	r5, r0
 8010036:	b198      	cbz	r0, 8010060 <lv_ll_ins_head+0x38>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 8010038:	4601      	mov	r1, r0
 801003a:	2200      	movs	r2, #0
 801003c:	4620      	mov	r0, r4
 801003e:	f7ff ffd7 	bl	800fff0 <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 8010042:	4629      	mov	r1, r5
 8010044:	6862      	ldr	r2, [r4, #4]
 8010046:	4620      	mov	r0, r4
 8010048:	f7ff ffbf 	bl	800ffca <node_set_next.isra.0>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 801004c:	6861      	ldr	r1, [r4, #4]
 801004e:	b119      	cbz	r1, 8010058 <lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
 8010050:	462a      	mov	r2, r5
 8010052:	4620      	mov	r0, r4
 8010054:	f7ff ffcc 	bl	800fff0 <node_set_prev.isra.2>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8010058:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 801005a:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 801005c:	b903      	cbnz	r3, 8010060 <lv_ll_ins_head+0x38>
            ll_p->tail = n_new;
 801005e:	60a5      	str	r5, [r4, #8]
}
 8010060:	4628      	mov	r0, r5
 8010062:	bd38      	pop	{r3, r4, r5, pc}

08010064 <lv_ll_ins_tail>:
{
 8010064:	b538      	push	{r3, r4, r5, lr}
 8010066:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8010068:	6800      	ldr	r0, [r0, #0]
 801006a:	3008      	adds	r0, #8
 801006c:	f7f3 fb00 	bl	8003670 <lv_mem_alloc>
    if(n_new == NULL) return NULL;
 8010070:	4605      	mov	r5, r0
 8010072:	b198      	cbz	r0, 801009c <lv_ll_ins_tail+0x38>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 8010074:	4601      	mov	r1, r0
 8010076:	2200      	movs	r2, #0
 8010078:	4620      	mov	r0, r4
 801007a:	f7ff ffa6 	bl	800ffca <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
 801007e:	4629      	mov	r1, r5
 8010080:	68a2      	ldr	r2, [r4, #8]
 8010082:	4620      	mov	r0, r4
 8010084:	f7ff ffb4 	bl	800fff0 <node_set_prev.isra.2>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 8010088:	68a1      	ldr	r1, [r4, #8]
 801008a:	b119      	cbz	r1, 8010094 <lv_ll_ins_tail+0x30>
            node_set_next(ll_p, ll_p->tail, n_new);
 801008c:	462a      	mov	r2, r5
 801008e:	4620      	mov	r0, r4
 8010090:	f7ff ff9b 	bl	800ffca <node_set_next.isra.0>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8010094:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 8010096:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8010098:	b903      	cbnz	r3, 801009c <lv_ll_ins_tail+0x38>
            ll_p->head = n_new;
 801009a:	6065      	str	r5, [r4, #4]
}
 801009c:	4628      	mov	r0, r5
 801009e:	bd38      	pop	{r3, r4, r5, pc}

080100a0 <lv_ll_get_head>:
    if(ll_p != NULL) {
 80100a0:	b100      	cbz	r0, 80100a4 <lv_ll_get_head+0x4>
        head = ll_p->head;
 80100a2:	6840      	ldr	r0, [r0, #4]
}
 80100a4:	4770      	bx	lr

080100a6 <lv_ll_get_tail>:
    if(ll_p != NULL) {
 80100a6:	b100      	cbz	r0, 80100aa <lv_ll_get_tail+0x4>
        tail = ll_p->tail;
 80100a8:	6880      	ldr	r0, [r0, #8]
}
 80100aa:	4770      	bx	lr

080100ac <lv_ll_get_next>:
    void * next = NULL;
 80100ac:	2300      	movs	r3, #0
{
 80100ae:	b507      	push	{r0, r1, r2, lr}
    void * next = NULL;
 80100b0:	9301      	str	r3, [sp, #4]
    if(ll_p != NULL) {
 80100b2:	b138      	cbz	r0, 80100c4 <lv_ll_get_next+0x18>
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 80100b4:	6803      	ldr	r3, [r0, #0]
 80100b6:	2204      	movs	r2, #4
 80100b8:	3304      	adds	r3, #4
 80100ba:	eb0d 0002 	add.w	r0, sp, r2
 80100be:	4419      	add	r1, r3
 80100c0:	f006 fb56 	bl	8016770 <memcpy>
}
 80100c4:	9801      	ldr	r0, [sp, #4]
 80100c6:	b003      	add	sp, #12
 80100c8:	f85d fb04 	ldr.w	pc, [sp], #4

080100cc <lv_ll_get_prev>:
    void * prev = NULL;
 80100cc:	2300      	movs	r3, #0
{
 80100ce:	b507      	push	{r0, r1, r2, lr}
    void * prev = NULL;
 80100d0:	9301      	str	r3, [sp, #4]
    if(ll_p != NULL) {
 80100d2:	b130      	cbz	r0, 80100e2 <lv_ll_get_prev+0x16>
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 80100d4:	6803      	ldr	r3, [r0, #0]
 80100d6:	2204      	movs	r2, #4
 80100d8:	4419      	add	r1, r3
 80100da:	eb0d 0002 	add.w	r0, sp, r2
 80100de:	f006 fb47 	bl	8016770 <memcpy>
}
 80100e2:	9801      	ldr	r0, [sp, #4]
 80100e4:	b003      	add	sp, #12
 80100e6:	f85d fb04 	ldr.w	pc, [sp], #4

080100ea <lv_ll_ins_prev>:
{
 80100ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100ec:	460e      	mov	r6, r1
    if(NULL == ll_p || NULL == n_act) return NULL;
 80100ee:	4605      	mov	r5, r0
 80100f0:	b340      	cbz	r0, 8010144 <lv_ll_ins_prev+0x5a>
 80100f2:	b349      	cbz	r1, 8010148 <lv_ll_ins_prev+0x5e>
    if(lv_ll_get_head(ll_p) == n_act) {
 80100f4:	6843      	ldr	r3, [r0, #4]
 80100f6:	4299      	cmp	r1, r3
 80100f8:	d103      	bne.n	8010102 <lv_ll_ins_prev+0x18>
}
 80100fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        n_new = lv_ll_ins_head(ll_p);
 80100fe:	f7ff bf93 	b.w	8010028 <lv_ll_ins_head>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8010102:	6800      	ldr	r0, [r0, #0]
 8010104:	3008      	adds	r0, #8
 8010106:	f7f3 fab3 	bl	8003670 <lv_mem_alloc>
        if(n_new == NULL) return NULL;
 801010a:	4604      	mov	r4, r0
 801010c:	b1c0      	cbz	r0, 8010140 <lv_ll_ins_prev+0x56>
        n_prev = lv_ll_get_prev(ll_p, n_act);
 801010e:	4631      	mov	r1, r6
 8010110:	4628      	mov	r0, r5
 8010112:	f7ff ffdb 	bl	80100cc <lv_ll_get_prev>
 8010116:	4607      	mov	r7, r0
        node_set_next(ll_p, n_prev, n_new);
 8010118:	4601      	mov	r1, r0
 801011a:	4622      	mov	r2, r4
 801011c:	4628      	mov	r0, r5
 801011e:	f7ff ff54 	bl	800ffca <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, n_prev);
 8010122:	463a      	mov	r2, r7
 8010124:	4621      	mov	r1, r4
 8010126:	4628      	mov	r0, r5
 8010128:	f7ff ff62 	bl	800fff0 <node_set_prev.isra.2>
        node_set_prev(ll_p, n_act, n_new);
 801012c:	4622      	mov	r2, r4
 801012e:	4631      	mov	r1, r6
 8010130:	4628      	mov	r0, r5
 8010132:	f7ff ff5d 	bl	800fff0 <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, n_act);
 8010136:	4632      	mov	r2, r6
 8010138:	4621      	mov	r1, r4
 801013a:	4628      	mov	r0, r5
 801013c:	f7ff ff45 	bl	800ffca <node_set_next.isra.0>
}
 8010140:	4620      	mov	r0, r4
 8010142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(NULL == ll_p || NULL == n_act) return NULL;
 8010144:	4604      	mov	r4, r0
 8010146:	e7fb      	b.n	8010140 <lv_ll_ins_prev+0x56>
 8010148:	460c      	mov	r4, r1
 801014a:	e7f9      	b.n	8010140 <lv_ll_ins_prev+0x56>

0801014c <lv_ll_rem>:
{
 801014c:	b570      	push	{r4, r5, r6, lr}
 801014e:	460d      	mov	r5, r1
    if(ll_p != NULL) {
 8010150:	4604      	mov	r4, r0
 8010152:	b308      	cbz	r0, 8010198 <lv_ll_rem+0x4c>
    if(lv_ll_get_head(ll_p) == node_p) {
 8010154:	6843      	ldr	r3, [r0, #4]
 8010156:	4299      	cmp	r1, r3
 8010158:	d10e      	bne.n	8010178 <lv_ll_rem+0x2c>
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 801015a:	4629      	mov	r1, r5
 801015c:	4620      	mov	r0, r4
 801015e:	f7ff ffa5 	bl	80100ac <lv_ll_get_next>
 8010162:	4601      	mov	r1, r0
 8010164:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
 8010166:	b908      	cbnz	r0, 801016c <lv_ll_rem+0x20>
            ll_p->tail = NULL;
 8010168:	60a0      	str	r0, [r4, #8]
}
 801016a:	bd70      	pop	{r4, r5, r6, pc}
            node_set_prev(ll_p, ll_p->head, NULL);
 801016c:	2200      	movs	r2, #0
        node_set_prev(ll_p, n_next, n_prev);
 801016e:	4620      	mov	r0, r4
}
 8010170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        node_set_prev(ll_p, n_next, n_prev);
 8010174:	f7ff bf3c 	b.w	800fff0 <node_set_prev.isra.2>
    } else if(lv_ll_get_tail(ll_p) == node_p) {
 8010178:	6883      	ldr	r3, [r0, #8]
 801017a:	4299      	cmp	r1, r3
 801017c:	d10e      	bne.n	801019c <lv_ll_rem+0x50>
        ll_p->tail = lv_ll_get_prev(ll_p, node_p);
 801017e:	f7ff ffa5 	bl	80100cc <lv_ll_get_prev>
 8010182:	4601      	mov	r1, r0
 8010184:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
 8010186:	b908      	cbnz	r0, 801018c <lv_ll_rem+0x40>
            ll_p->head = NULL;
 8010188:	6060      	str	r0, [r4, #4]
 801018a:	e7ee      	b.n	801016a <lv_ll_rem+0x1e>
            node_set_next(ll_p, ll_p->tail, NULL);
 801018c:	4620      	mov	r0, r4
 801018e:	2200      	movs	r2, #0
}
 8010190:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            node_set_next(ll_p, ll_p->tail, NULL);
 8010194:	f7ff bf19 	b.w	800ffca <node_set_next.isra.0>
    if(lv_ll_get_head(ll_p) == node_p) {
 8010198:	2900      	cmp	r1, #0
 801019a:	d0de      	beq.n	801015a <lv_ll_rem+0xe>
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
 801019c:	4629      	mov	r1, r5
 801019e:	4620      	mov	r0, r4
 80101a0:	f7ff ff94 	bl	80100cc <lv_ll_get_prev>
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 80101a4:	4629      	mov	r1, r5
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
 80101a6:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 80101a8:	4620      	mov	r0, r4
 80101aa:	f7ff ff7f 	bl	80100ac <lv_ll_get_next>
 80101ae:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
 80101b0:	4602      	mov	r2, r0
 80101b2:	4631      	mov	r1, r6
 80101b4:	4620      	mov	r0, r4
 80101b6:	f7ff ff08 	bl	800ffca <node_set_next.isra.0>
        node_set_prev(ll_p, n_next, n_prev);
 80101ba:	4632      	mov	r2, r6
 80101bc:	4629      	mov	r1, r5
 80101be:	e7d6      	b.n	801016e <lv_ll_rem+0x22>

080101c0 <lv_ll_clear>:
{
 80101c0:	b570      	push	{r4, r5, r6, lr}
    if(ll_p != NULL) {
 80101c2:	4605      	mov	r5, r0
 80101c4:	b108      	cbz	r0, 80101ca <lv_ll_clear+0xa>
        head = ll_p->head;
 80101c6:	6844      	ldr	r4, [r0, #4]
    while(i != NULL) {
 80101c8:	b904      	cbnz	r4, 80101cc <lv_ll_clear+0xc>
}
 80101ca:	bd70      	pop	{r4, r5, r6, pc}
        i_next = lv_ll_get_next(ll_p, i);
 80101cc:	4621      	mov	r1, r4
 80101ce:	4628      	mov	r0, r5
 80101d0:	f7ff ff6c 	bl	80100ac <lv_ll_get_next>
        lv_ll_rem(ll_p, i);
 80101d4:	4621      	mov	r1, r4
        i_next = lv_ll_get_next(ll_p, i);
 80101d6:	4606      	mov	r6, r0
        lv_ll_rem(ll_p, i);
 80101d8:	4628      	mov	r0, r5
 80101da:	f7ff ffb7 	bl	801014c <lv_ll_rem>
        lv_mem_free(i);
 80101de:	4620      	mov	r0, r4
 80101e0:	f7f3 fa88 	bl	80036f4 <lv_mem_free>
        i = i_next;
 80101e4:	4634      	mov	r4, r6
 80101e6:	e7ef      	b.n	80101c8 <lv_ll_clear+0x8>

080101e8 <lv_ll_chg_list>:
{
 80101e8:	b570      	push	{r4, r5, r6, lr}
 80101ea:	461e      	mov	r6, r3
 80101ec:	460c      	mov	r4, r1
    lv_ll_rem(ll_ori_p, node);
 80101ee:	4611      	mov	r1, r2
{
 80101f0:	4615      	mov	r5, r2
    lv_ll_rem(ll_ori_p, node);
 80101f2:	f7ff ffab 	bl	801014c <lv_ll_rem>
    if(head) {
 80101f6:	b1a6      	cbz	r6, 8010222 <lv_ll_chg_list+0x3a>
        node_set_prev(ll_new_p, node, NULL);
 80101f8:	2200      	movs	r2, #0
 80101fa:	4629      	mov	r1, r5
 80101fc:	4620      	mov	r0, r4
 80101fe:	f7ff fef7 	bl	800fff0 <node_set_prev.isra.2>
        node_set_next(ll_new_p, node, ll_new_p->head);
 8010202:	4629      	mov	r1, r5
 8010204:	6862      	ldr	r2, [r4, #4]
 8010206:	4620      	mov	r0, r4
 8010208:	f7ff fedf 	bl	800ffca <node_set_next.isra.0>
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 801020c:	6861      	ldr	r1, [r4, #4]
 801020e:	b119      	cbz	r1, 8010218 <lv_ll_chg_list+0x30>
            node_set_prev(ll_new_p, ll_new_p->head, node);
 8010210:	462a      	mov	r2, r5
 8010212:	4620      	mov	r0, r4
 8010214:	f7ff feec 	bl	800fff0 <node_set_prev.isra.2>
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 8010218:	68a3      	ldr	r3, [r4, #8]
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
 801021a:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 801021c:	b903      	cbnz	r3, 8010220 <lv_ll_chg_list+0x38>
            ll_new_p->tail = node;
 801021e:	60a5      	str	r5, [r4, #8]
}
 8010220:	bd70      	pop	{r4, r5, r6, pc}
        node_set_prev(ll_new_p, node, ll_new_p->tail);
 8010222:	68a2      	ldr	r2, [r4, #8]
 8010224:	4629      	mov	r1, r5
 8010226:	4620      	mov	r0, r4
 8010228:	f7ff fee2 	bl	800fff0 <node_set_prev.isra.2>
        node_set_next(ll_new_p, node, NULL);
 801022c:	4629      	mov	r1, r5
 801022e:	4632      	mov	r2, r6
 8010230:	4620      	mov	r0, r4
 8010232:	f7ff feca 	bl	800ffca <node_set_next.isra.0>
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
 8010236:	68a1      	ldr	r1, [r4, #8]
 8010238:	b119      	cbz	r1, 8010242 <lv_ll_chg_list+0x5a>
            node_set_next(ll_new_p, ll_new_p->tail, node);
 801023a:	462a      	mov	r2, r5
 801023c:	4620      	mov	r0, r4
 801023e:	f7ff fec4 	bl	800ffca <node_set_next.isra.0>
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 8010242:	6863      	ldr	r3, [r4, #4]
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
 8010244:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 8010246:	2b00      	cmp	r3, #0
 8010248:	d1ea      	bne.n	8010220 <lv_ll_chg_list+0x38>
            ll_new_p->head = node;
 801024a:	6065      	str	r5, [r4, #4]
}
 801024c:	e7e8      	b.n	8010220 <lv_ll_chg_list+0x38>

0801024e <lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
 801024e:	4291      	cmp	r1, r2
{
 8010250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010252:	4604      	mov	r4, r0
 8010254:	460d      	mov	r5, r1
 8010256:	4617      	mov	r7, r2
    if(n_act == n_after) return; /*Can't move before itself*/
 8010258:	d022      	beq.n	80102a0 <lv_ll_move_before+0x52>
    if(n_after != NULL)
 801025a:	b312      	cbz	r2, 80102a2 <lv_ll_move_before+0x54>
        n_before = lv_ll_get_prev(ll_p, n_after);
 801025c:	4611      	mov	r1, r2
 801025e:	f7ff ff35 	bl	80100cc <lv_ll_get_prev>
 8010262:	4606      	mov	r6, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
 8010264:	42ae      	cmp	r6, r5
 8010266:	d01b      	beq.n	80102a0 <lv_ll_move_before+0x52>
    lv_ll_rem(ll_p, n_act);
 8010268:	4629      	mov	r1, r5
 801026a:	4620      	mov	r0, r4
 801026c:	f7ff ff6e 	bl	801014c <lv_ll_rem>
    node_set_next(ll_p, n_before, n_act);
 8010270:	462a      	mov	r2, r5
 8010272:	4631      	mov	r1, r6
 8010274:	4620      	mov	r0, r4
 8010276:	f7ff fea8 	bl	800ffca <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
 801027a:	4632      	mov	r2, r6
 801027c:	4629      	mov	r1, r5
 801027e:	4620      	mov	r0, r4
 8010280:	f7ff feb6 	bl	800fff0 <node_set_prev.isra.2>
    node_set_prev(ll_p, n_after, n_act);
 8010284:	462a      	mov	r2, r5
 8010286:	4639      	mov	r1, r7
 8010288:	4620      	mov	r0, r4
 801028a:	f7ff feb1 	bl	800fff0 <node_set_prev.isra.2>
    node_set_next(ll_p, n_act, n_after);
 801028e:	463a      	mov	r2, r7
 8010290:	4629      	mov	r1, r5
 8010292:	4620      	mov	r0, r4
 8010294:	f7ff fe99 	bl	800ffca <node_set_next.isra.0>
    if(n_after == NULL) ll_p->tail = n_act;
 8010298:	b907      	cbnz	r7, 801029c <lv_ll_move_before+0x4e>
 801029a:	60a5      	str	r5, [r4, #8]
    if(n_before == NULL) ll_p->head = n_act;
 801029c:	b906      	cbnz	r6, 80102a0 <lv_ll_move_before+0x52>
 801029e:	6065      	str	r5, [r4, #4]
}
 80102a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ll_p != NULL) {
 80102a2:	b108      	cbz	r0, 80102a8 <lv_ll_move_before+0x5a>
        tail = ll_p->tail;
 80102a4:	6886      	ldr	r6, [r0, #8]
 80102a6:	e7dd      	b.n	8010264 <lv_ll_move_before+0x16>
    void * tail = NULL;
 80102a8:	4606      	mov	r6, r0
 80102aa:	e7db      	b.n	8010264 <lv_ll_move_before+0x16>

080102ac <lv_ll_is_empty>:
    if(ll_p == NULL) return true;
 80102ac:	b130      	cbz	r0, 80102bc <lv_ll_is_empty+0x10>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 80102ae:	6843      	ldr	r3, [r0, #4]
 80102b0:	b933      	cbnz	r3, 80102c0 <lv_ll_is_empty+0x14>
 80102b2:	6880      	ldr	r0, [r0, #8]
 80102b4:	fab0 f080 	clz	r0, r0
 80102b8:	0940      	lsrs	r0, r0, #5
 80102ba:	4770      	bx	lr
    if(ll_p == NULL) return true;
 80102bc:	2001      	movs	r0, #1
 80102be:	4770      	bx	lr
    return false;
 80102c0:	2000      	movs	r0, #0
}
 80102c2:	4770      	bx	lr

080102c4 <ent_trunc>:
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
 80102c4:	078b      	lsls	r3, r1, #30
        size += 4;
    }
#endif

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 80102c6:	6803      	ldr	r3, [r0, #0]
        size = size & (~0x3);
 80102c8:	bf18      	it	ne
 80102ca:	f021 0103 	bicne.w	r1, r1, #3
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 80102ce:	f3c3 035e 	ubfx	r3, r3, #1, #31
        size += 4;
 80102d2:	bf18      	it	ne
 80102d4:	3104      	addne	r1, #4
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 80102d6:	1d0a      	adds	r2, r1, #4
 80102d8:	4293      	cmp	r3, r2
{
 80102da:	b510      	push	{r4, lr}
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 80102dc:	d011      	beq.n	8010302 <ent_trunc+0x3e>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
 80102de:	428b      	cmp	r3, r1
 80102e0:	d00a      	beq.n	80102f8 <ent_trunc+0x34>
        uint8_t * e_data             = &e->first_data;
 80102e2:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
        after_new_e->header.s.d_size = e->header.s.d_size - size - sizeof(lv_mem_header_t);
 80102e4:	3b04      	subs	r3, #4
        after_new_e->header.s.used   = 0;
 80102e6:	5c54      	ldrb	r4, [r2, r1]
        after_new_e->header.s.d_size = e->header.s.d_size - size - sizeof(lv_mem_header_t);
 80102e8:	1a5b      	subs	r3, r3, r1
        after_new_e->header.s.used   = 0;
 80102ea:	f36f 0400 	bfc	r4, #0, #1
 80102ee:	5454      	strb	r4, [r2, r1]
        after_new_e->header.s.d_size = e->header.s.d_size - size - sizeof(lv_mem_header_t);
 80102f0:	5854      	ldr	r4, [r2, r1]
 80102f2:	f363 045f 	bfi	r4, r3, #1, #31
 80102f6:	5054      	str	r4, [r2, r1]
    }

    /* Set the new size for the original entry */
    e->header.s.d_size = size;
 80102f8:	6803      	ldr	r3, [r0, #0]
 80102fa:	f361 035f 	bfi	r3, r1, #1, #31
 80102fe:	6003      	str	r3, [r0, #0]
}
 8010300:	bd10      	pop	{r4, pc}
 8010302:	4619      	mov	r1, r3
 8010304:	e7f8      	b.n	80102f8 <ent_trunc+0x34>

08010306 <lv_txt_utf8_size>:
    if((str[0] & 0x80) == 0)
 8010306:	7803      	ldrb	r3, [r0, #0]
 8010308:	061a      	lsls	r2, r3, #24
 801030a:	d50e      	bpl.n	801032a <lv_txt_utf8_size+0x24>
    else if((str[0] & 0xE0) == 0xC0)
 801030c:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 8010310:	2ac0      	cmp	r2, #192	; 0xc0
 8010312:	d00c      	beq.n	801032e <lv_txt_utf8_size+0x28>
    else if((str[0] & 0xF0) == 0xE0)
 8010314:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8010318:	2ae0      	cmp	r2, #224	; 0xe0
 801031a:	d00a      	beq.n	8010332 <lv_txt_utf8_size+0x2c>
    else if((str[0] & 0xF8) == 0xF0)
 801031c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8010320:	2bf0      	cmp	r3, #240	; 0xf0
        return 4;
 8010322:	bf14      	ite	ne
 8010324:	2001      	movne	r0, #1
 8010326:	2004      	moveq	r0, #4
 8010328:	4770      	bx	lr
        return 1;
 801032a:	2001      	movs	r0, #1
 801032c:	4770      	bx	lr
        return 2;
 801032e:	2002      	movs	r0, #2
 8010330:	4770      	bx	lr
        return 3;
 8010332:	2003      	movs	r0, #3
}
 8010334:	4770      	bx	lr

08010336 <lv_txt_utf8_next>:
    uint32_t i_tmp = 0;
 8010336:	2300      	movs	r3, #0
{
 8010338:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t i_tmp = 0;
 801033a:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 801033c:	b901      	cbnz	r1, 8010340 <lv_txt_utf8_next+0xa>
 801033e:	a901      	add	r1, sp, #4
    if((txt[*i] & 0x80) == 0) {
 8010340:	680a      	ldr	r2, [r1, #0]
 8010342:	5c83      	ldrb	r3, [r0, r2]
 8010344:	1c54      	adds	r4, r2, #1
 8010346:	061d      	lsls	r5, r3, #24
 8010348:	d403      	bmi.n	8010352 <lv_txt_utf8_next+0x1c>
        result = txt[*i];
 801034a:	4618      	mov	r0, r3
        (*i)++;
 801034c:	600c      	str	r4, [r1, #0]
}
 801034e:	b002      	add	sp, #8
 8010350:	bd70      	pop	{r4, r5, r6, pc}
        if((txt[*i] & 0xE0) == 0xC0) {
 8010352:	f003 05e0 	and.w	r5, r3, #224	; 0xe0
 8010356:	2dc0      	cmp	r5, #192	; 0xc0
 8010358:	d110      	bne.n	801037c <lv_txt_utf8_next+0x46>
            (*i)++;
 801035a:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801035c:	5d00      	ldrb	r0, [r0, r4]
 801035e:	f000 04c0 	and.w	r4, r0, #192	; 0xc0
 8010362:	2c80      	cmp	r4, #128	; 0x80
 8010364:	d001      	beq.n	801036a <lv_txt_utf8_next+0x34>
    uint32_t result = 0;
 8010366:	2000      	movs	r0, #0
 8010368:	e7f1      	b.n	801034e <lv_txt_utf8_next+0x18>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 801036a:	019b      	lsls	r3, r3, #6
            result += (txt[*i] & 0x3F);
 801036c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            (*i)++;
 8010370:	3202      	adds	r2, #2
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 8010372:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
 8010376:	4418      	add	r0, r3
            (*i)++;
 8010378:	600a      	str	r2, [r1, #0]
 801037a:	e7e8      	b.n	801034e <lv_txt_utf8_next+0x18>
        else if((txt[*i] & 0xF0) == 0xE0) {
 801037c:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 8010380:	2de0      	cmp	r5, #224	; 0xe0
 8010382:	d117      	bne.n	80103b4 <lv_txt_utf8_next+0x7e>
            (*i)++;
 8010384:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8010386:	5d04      	ldrb	r4, [r0, r4]
 8010388:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 801038c:	2d80      	cmp	r5, #128	; 0x80
 801038e:	d1ea      	bne.n	8010366 <lv_txt_utf8_next+0x30>
            (*i)++;
 8010390:	1c95      	adds	r5, r2, #2
 8010392:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8010394:	5d45      	ldrb	r5, [r0, r5]
 8010396:	f005 00c0 	and.w	r0, r5, #192	; 0xc0
 801039a:	2880      	cmp	r0, #128	; 0x80
 801039c:	d1e3      	bne.n	8010366 <lv_txt_utf8_next+0x30>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 801039e:	0318      	lsls	r0, r3, #12
            result += (txt[*i] & 0x3F);
 80103a0:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 80103a4:	01a3      	lsls	r3, r4, #6
            (*i)++;
 80103a6:	3203      	adds	r2, #3
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 80103a8:	b280      	uxth	r0, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 80103aa:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 80103ae:	4428      	add	r0, r5
            result += (txt[*i] & 0x3F);
 80103b0:	4418      	add	r0, r3
            (*i)++;
 80103b2:	e7e1      	b.n	8010378 <lv_txt_utf8_next+0x42>
        else if((txt[*i] & 0xF8) == 0xF0) {
 80103b4:	f003 05f8 	and.w	r5, r3, #248	; 0xf8
            (*i)++;
 80103b8:	600c      	str	r4, [r1, #0]
        else if((txt[*i] & 0xF8) == 0xF0) {
 80103ba:	2df0      	cmp	r5, #240	; 0xf0
 80103bc:	d1d3      	bne.n	8010366 <lv_txt_utf8_next+0x30>
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 80103be:	5d04      	ldrb	r4, [r0, r4]
 80103c0:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 80103c4:	2d80      	cmp	r5, #128	; 0x80
 80103c6:	d1ce      	bne.n	8010366 <lv_txt_utf8_next+0x30>
            (*i)++;
 80103c8:	1c95      	adds	r5, r2, #2
 80103ca:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 80103cc:	5d45      	ldrb	r5, [r0, r5]
 80103ce:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
 80103d2:	2e80      	cmp	r6, #128	; 0x80
 80103d4:	d1c7      	bne.n	8010366 <lv_txt_utf8_next+0x30>
            (*i)++;
 80103d6:	1cd6      	adds	r6, r2, #3
 80103d8:	600e      	str	r6, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 80103da:	5d86      	ldrb	r6, [r0, r6]
 80103dc:	f006 00c0 	and.w	r0, r6, #192	; 0xc0
 80103e0:	2880      	cmp	r0, #128	; 0x80
 80103e2:	d1c0      	bne.n	8010366 <lv_txt_utf8_next+0x30>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 80103e4:	049b      	lsls	r3, r3, #18
            result += txt[*i] & 0x3F;
 80103e6:	f006 063f 	and.w	r6, r6, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 80103ea:	0320      	lsls	r0, r4, #12
            (*i)++;
 80103ec:	3204      	adds	r2, #4
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 80103ee:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 80103f2:	f400 307c 	and.w	r0, r0, #258048	; 0x3f000
 80103f6:	4303      	orrs	r3, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 80103f8:	01a8      	lsls	r0, r5, #6
 80103fa:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += txt[*i] & 0x3F;
 80103fe:	4430      	add	r0, r6
 8010400:	4418      	add	r0, r3
            (*i)++;
 8010402:	e7b9      	b.n	8010378 <lv_txt_utf8_next+0x42>

08010404 <lv_txt_unicode_to_utf8>:
    if(letter_uni < 128) return letter_uni;
 8010404:	287f      	cmp	r0, #127	; 0x7f
{
 8010406:	b082      	sub	sp, #8
    if(letter_uni < 128) return letter_uni;
 8010408:	d911      	bls.n	801042e <lv_txt_unicode_to_utf8+0x2a>
    if(letter_uni < 0x0800) {
 801040a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 801040e:	d210      	bcs.n	8010432 <lv_txt_unicode_to_utf8+0x2e>
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 8010410:	0983      	lsrs	r3, r0, #6
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8010412:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 8010416:	f063 033f 	orn	r3, r3, #63	; 0x3f
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 801041a:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 801041e:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[2] = 0;
 8010422:	2300      	movs	r3, #0
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8010424:	f88d 0005 	strb.w	r0, [sp, #5]
        bytes[2] = 0;
 8010428:	f8ad 3006 	strh.w	r3, [sp, #6]
    return *res_p;
 801042c:	9801      	ldr	r0, [sp, #4]
}
 801042e:	b002      	add	sp, #8
 8010430:	4770      	bx	lr
    } else if(letter_uni < 0x010000) {
 8010432:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8010436:	d214      	bcs.n	8010462 <lv_txt_unicode_to_utf8+0x5e>
        bytes[0] = ((letter_uni >> 12) & 0x0F) | 0xE0;
 8010438:	0b03      	lsrs	r3, r0, #12
 801043a:	f063 031f 	orn	r3, r3, #31
 801043e:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8010442:	f3c0 1385 	ubfx	r3, r0, #6, #6
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8010446:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
 801044a:	f063 037f 	orn	r3, r3, #127	; 0x7f
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
 801044e:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8010452:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[3] = 0;
 8010456:	2300      	movs	r3, #0
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8010458:	f88d 0006 	strb.w	r0, [sp, #6]
        bytes[3] = 0;
 801045c:	f88d 3007 	strb.w	r3, [sp, #7]
 8010460:	e7e4      	b.n	801042c <lv_txt_unicode_to_utf8+0x28>
    } else if(letter_uni < 0x110000) {
 8010462:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 8010466:	d2e1      	bcs.n	801042c <lv_txt_unicode_to_utf8+0x28>
        bytes[0] = ((letter_uni >> 18) & 0x07) | 0xF0;
 8010468:	0c83      	lsrs	r3, r0, #18
 801046a:	f063 030f 	orn	r3, r3, #15
 801046e:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 12) & 0x3F) | 0x80;
 8010472:	f3c0 3305 	ubfx	r3, r0, #12, #6
 8010476:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801047a:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
 801047e:	f3c0 1385 	ubfx	r3, r0, #6, #6
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8010482:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8010486:	f063 037f 	orn	r3, r3, #127	; 0x7f
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
 801048a:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
 801048e:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8010492:	f88d 0007 	strb.w	r0, [sp, #7]
 8010496:	e7c9      	b.n	801042c <lv_txt_unicode_to_utf8+0x28>

08010498 <lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8010498:	2923      	cmp	r1, #35	; 0x23
{
 801049a:	4602      	mov	r2, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 801049c:	d117      	bne.n	80104ce <lv_txt_is_cmd+0x36>
 801049e:	7803      	ldrb	r3, [r0, #0]
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 80104a0:	b91b      	cbnz	r3, 80104aa <lv_txt_is_cmd+0x12>
            *state = LV_TXT_CMD_STATE_PAR;
 80104a2:	2301      	movs	r3, #1
 80104a4:	7003      	strb	r3, [r0, #0]
            ret    = true;
 80104a6:	2001      	movs	r0, #1
 80104a8:	e004      	b.n	80104b4 <lv_txt_is_cmd+0x1c>
        else if(*state == LV_TXT_CMD_STATE_PAR) {
 80104aa:	2b01      	cmp	r3, #1
 80104ac:	f04f 0000 	mov.w	r0, #0
 80104b0:	d109      	bne.n	80104c6 <lv_txt_is_cmd+0x2e>
            *state = LV_TXT_CMD_STATE_WAIT;
 80104b2:	7010      	strb	r0, [r2, #0]
    if(*state == LV_TXT_CMD_STATE_PAR) {
 80104b4:	7813      	ldrb	r3, [r2, #0]
 80104b6:	2b01      	cmp	r3, #1
 80104b8:	d104      	bne.n	80104c4 <lv_txt_is_cmd+0x2c>
        if(c == ' ') {
 80104ba:	2920      	cmp	r1, #32
        ret = true;
 80104bc:	4618      	mov	r0, r3
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 80104be:	bf04      	itt	eq
 80104c0:	2102      	moveq	r1, #2
 80104c2:	7011      	strbeq	r1, [r2, #0]
}
 80104c4:	4770      	bx	lr
        else if(*state == LV_TXT_CMD_STATE_IN) {
 80104c6:	2b02      	cmp	r3, #2
 80104c8:	d1f4      	bne.n	80104b4 <lv_txt_is_cmd+0x1c>
            *state = LV_TXT_CMD_STATE_WAIT;
 80104ca:	7010      	strb	r0, [r2, #0]
 80104cc:	e7eb      	b.n	80104a6 <lv_txt_is_cmd+0xe>
    bool ret = false;
 80104ce:	2000      	movs	r0, #0
 80104d0:	e7f0      	b.n	80104b4 <lv_txt_is_cmd+0x1c>

080104d2 <lv_txt_get_size>:
{
 80104d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104d6:	b087      	sub	sp, #28
    size_res->x = 0;
 80104d8:	2500      	movs	r5, #0
{
 80104da:	4604      	mov	r4, r0
 80104dc:	4616      	mov	r6, r2
 80104de:	9304      	str	r3, [sp, #16]
    if(text == NULL) return;
 80104e0:	4689      	mov	r9, r1
{
 80104e2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80104e6:	f9bd b040 	ldrsh.w	fp, [sp, #64]	; 0x40
 80104ea:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 80104ee:	9303      	str	r3, [sp, #12]
    size_res->x = 0;
 80104f0:	8005      	strh	r5, [r0, #0]
    size_res->y = 0;
 80104f2:	8045      	strh	r5, [r0, #2]
    if(text == NULL) return;
 80104f4:	b1f9      	cbz	r1, 8010536 <lv_txt_get_size+0x64>
    if(font == NULL) return;
 80104f6:	b1f2      	cbz	r2, 8010536 <lv_txt_get_size+0x64>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80104f8:	f013 0f02 	tst.w	r3, #2
    uint8_t letter_height = lv_font_get_line_height(font);
 80104fc:	7a17      	ldrb	r7, [r2, #8]
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80104fe:	f647 4318 	movw	r3, #31768	; 0x7c18
 8010502:	bf18      	it	ne
 8010504:	469a      	movne	sl, r3
        size_res->y += line_space;
 8010506:	eb0b 0307 	add.w	r3, fp, r7
 801050a:	9305      	str	r3, [sp, #20]
    while(text[line_start] != '\0') {
 801050c:	f819 3005 	ldrb.w	r3, [r9, r5]
 8010510:	eb09 0805 	add.w	r8, r9, r5
 8010514:	b993      	cbnz	r3, 801053c <lv_txt_get_size+0x6a>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 8010516:	b155      	cbz	r5, 801052e <lv_txt_get_size+0x5c>
 8010518:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801051c:	2b0a      	cmp	r3, #10
 801051e:	d001      	beq.n	8010524 <lv_txt_get_size+0x52>
 8010520:	2b0d      	cmp	r3, #13
 8010522:	d104      	bne.n	801052e <lv_txt_get_size+0x5c>
        size_res->y += letter_height + line_space;
 8010524:	8862      	ldrh	r2, [r4, #2]
 8010526:	eb0b 0307 	add.w	r3, fp, r7
 801052a:	4413      	add	r3, r2
 801052c:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
 801052e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8010532:	b9fb      	cbnz	r3, 8010574 <lv_txt_get_size+0xa2>
        size_res->y = letter_height;
 8010534:	8067      	strh	r7, [r4, #2]
}
 8010536:	b007      	add	sp, #28
 8010538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 801053c:	9b03      	ldr	r3, [sp, #12]
 801053e:	4631      	mov	r1, r6
 8010540:	9a04      	ldr	r2, [sp, #16]
 8010542:	4640      	mov	r0, r8
 8010544:	9300      	str	r3, [sp, #0]
 8010546:	4653      	mov	r3, sl
 8010548:	f7f3 f996 	bl	8003878 <lv_txt_get_next_line>
        size_res->y += line_space;
 801054c:	8863      	ldrh	r3, [r4, #2]
 801054e:	9a05      	ldr	r2, [sp, #20]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 8010550:	4601      	mov	r1, r0
 8010552:	4405      	add	r5, r0
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 8010554:	4640      	mov	r0, r8
        size_res->y += line_space;
 8010556:	4413      	add	r3, r2
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 8010558:	4632      	mov	r2, r6
        size_res->y += line_space;
 801055a:	8063      	strh	r3, [r4, #2]
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 801055c:	9b03      	ldr	r3, [sp, #12]
 801055e:	9300      	str	r3, [sp, #0]
 8010560:	9b04      	ldr	r3, [sp, #16]
 8010562:	f7f3 fa0d 	bl	8003980 <lv_txt_get_width>
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 8010566:	f9b4 3000 	ldrsh.w	r3, [r4]
 801056a:	4298      	cmp	r0, r3
 801056c:	bfb8      	it	lt
 801056e:	4618      	movlt	r0, r3
 8010570:	8020      	strh	r0, [r4, #0]
        line_start  = new_line_start;
 8010572:	e7cb      	b.n	801050c <lv_txt_get_size+0x3a>
        size_res->y -= line_space;
 8010574:	eba3 030b 	sub.w	r3, r3, fp
 8010578:	8063      	strh	r3, [r4, #2]
 801057a:	e7dc      	b.n	8010536 <lv_txt_get_size+0x64>

0801057c <lv_anim_path_linear>:
    if(a->time == a->act_time) {
 801057c:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 8010580:	8b02      	ldrh	r2, [r0, #24]
 8010582:	429a      	cmp	r2, r3
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
 8010584:	bf16      	itet	ne
 8010586:	029b      	lslne	r3, r3, #10
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
 8010588:	f44f 6380 	moveq.w	r3, #1024	; 0x400
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
 801058c:	fb93 f3f2 	sdivne	r3, r3, r2
    new_value = (int32_t)step * (a->end - a->start);
 8010590:	e9d0 2004 	ldrd	r2, r0, [r0, #16]
 8010594:	1a80      	subs	r0, r0, r2
 8010596:	4343      	muls	r3, r0
    new_value += a->start;
 8010598:	eb02 23a3 	add.w	r3, r2, r3, asr #10
}
 801059c:	b218      	sxth	r0, r3
 801059e:	4770      	bx	lr

080105a0 <lv_anim_speed_to_time>:
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
 80105a0:	1a89      	subs	r1, r1, r2
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 80105a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
 80105a6:	2900      	cmp	r1, #0
 80105a8:	bfb8      	it	lt
 80105aa:	4249      	neglt	r1, r1
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 80105ac:	434a      	muls	r2, r1
 80105ae:	fbb2 f0f0 	udiv	r0, r2, r0
    if(time > UINT16_MAX) time = UINT16_MAX;
 80105b2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80105b6:	da04      	bge.n	80105c2 <lv_anim_speed_to_time+0x22>
    if(time == 0) {
 80105b8:	2800      	cmp	r0, #0
        time++;
 80105ba:	bf08      	it	eq
 80105bc:	2001      	moveq	r0, #1
}
 80105be:	b280      	uxth	r0, r0
 80105c0:	4770      	bx	lr
    if(time > UINT16_MAX) time = UINT16_MAX;
 80105c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80105c6:	e7fa      	b.n	80105be <lv_anim_speed_to_time+0x1e>

080105c8 <lv_anim_path_step>:
    if(a->act_time >= a->time)
 80105c8:	f9b0 201a 	ldrsh.w	r2, [r0, #26]
 80105cc:	8b03      	ldrh	r3, [r0, #24]
 80105ce:	429a      	cmp	r2, r3
        return a->end;
 80105d0:	bfac      	ite	ge
 80105d2:	f9b0 0014 	ldrshge.w	r0, [r0, #20]
        return a->start;
 80105d6:	f9b0 0010 	ldrshlt.w	r0, [r0, #16]
}
 80105da:	4770      	bx	lr

080105dc <lv_area_set>:
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
    area_p->x1 = x1;
    area_p->y1 = y1;
    area_p->x2 = x2;
 80105dc:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 80105de:	f9bd 3000 	ldrsh.w	r3, [sp]
    area_p->x1 = x1;
 80105e2:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 80105e4:	8042      	strh	r2, [r0, #2]
    area_p->y2 = y2;
 80105e6:	80c3      	strh	r3, [r0, #6]
}
 80105e8:	4770      	bx	lr

080105ea <lv_area_set_width>:
 * @param area_p pointer to an area
 * @param w the new width of the area (w == 1 makes x1 == x2)
 */
void lv_area_set_width(lv_area_t * area_p, lv_coord_t w)
{
    area_p->x2 = area_p->x1 + w - 1;
 80105ea:	3901      	subs	r1, #1
 80105ec:	8803      	ldrh	r3, [r0, #0]
 80105ee:	4419      	add	r1, r3
 80105f0:	8081      	strh	r1, [r0, #4]
}
 80105f2:	4770      	bx	lr

080105f4 <lv_area_set_height>:
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
    area_p->y2 = area_p->y1 + h - 1;
 80105f4:	3901      	subs	r1, #1
 80105f6:	8843      	ldrh	r3, [r0, #2]
 80105f8:	4419      	add	r1, r3
 80105fa:	80c1      	strh	r1, [r0, #6]
}
 80105fc:	4770      	bx	lr

080105fe <lv_area_set_pos>:
 * @param area_p pointer to an area
 * @param x the new x coordinate of the area
 * @param y the new y coordinate of the area
 */
void lv_area_set_pos(lv_area_t * area_p, lv_coord_t x, lv_coord_t y)
{
 80105fe:	b570      	push	{r4, r5, r6, lr}
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 8010600:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 8010604:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    return area_p->x2 - area_p->x1 + 1;
 8010608:	f9b0 5000 	ldrsh.w	r5, [r0]
    return area_p->y2 - area_p->y1 + 1;
 801060c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    lv_coord_t w = lv_area_get_width(area_p);
    lv_coord_t h = lv_area_get_height(area_p);
    area_p->x1   = x;
 8010610:	8001      	strh	r1, [r0, #0]
    area_p->x2 = area_p->x1 + w - 1;
 8010612:	4431      	add	r1, r6
    area_p->y1   = y;
 8010614:	8042      	strh	r2, [r0, #2]
    area_p->y2 = area_p->y1 + h - 1;
 8010616:	4422      	add	r2, r4
    area_p->x2 = area_p->x1 + w - 1;
 8010618:	1b49      	subs	r1, r1, r5
    area_p->y2 = area_p->y1 + h - 1;
 801061a:	1ad2      	subs	r2, r2, r3
    area_p->x2 = area_p->x1 + w - 1;
 801061c:	8081      	strh	r1, [r0, #4]
    area_p->y2 = area_p->y1 + h - 1;
 801061e:	80c2      	strh	r2, [r0, #6]
    lv_area_set_width(area_p, w);
    lv_area_set_height(area_p, h);
}
 8010620:	bd70      	pop	{r4, r5, r6, pc}

08010622 <lv_area_get_size>:
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 8010622:	f9b0 3000 	ldrsh.w	r3, [r0]
 8010626:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801062a:	1ad2      	subs	r2, r2, r3
 801062c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8010630:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8010634:	3301      	adds	r3, #1
 8010636:	1a18      	subs	r0, r3, r0

    return size;
}
 8010638:	fb02 0000 	mla	r0, r2, r0, r0
 801063c:	4770      	bx	lr

0801063e <lv_area_intersect>:
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    /* Get the smaller area from 'a1_p' and 'a2_p' */
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 801063e:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 8010642:	b570      	push	{r4, r5, r6, lr}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 8010644:	f9b2 5000 	ldrsh.w	r5, [r2]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 8010648:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 801064c:	429d      	cmp	r5, r3
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 801064e:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 8010652:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 8010656:	bfb8      	it	lt
 8010658:	461d      	movlt	r5, r3
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 801065a:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801065e:	42a3      	cmp	r3, r4
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 8010660:	8005      	strh	r5, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 8010662:	bfb8      	it	lt
 8010664:	4623      	movlt	r3, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8010666:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 801066a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 801066e:	42b4      	cmp	r4, r6
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 8010670:	8043      	strh	r3, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8010672:	bfa8      	it	ge
 8010674:	4634      	movge	r4, r6
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 8010676:	428a      	cmp	r2, r1
 8010678:	bfa8      	it	ge
 801067a:	460a      	movge	r2, r1

    /*If x1 or y1 greater then x2 or y2 then the areas union is empty*/
    bool union_ok = true;
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 801067c:	42a5      	cmp	r5, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 801067e:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 8010680:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 8010682:	dc04      	bgt.n	801068e <lv_area_intersect+0x50>
 8010684:	4293      	cmp	r3, r2
 8010686:	bfcc      	ite	gt
 8010688:	2000      	movgt	r0, #0
 801068a:	2001      	movle	r0, #1
        union_ok = false;
    }

    return union_ok;
}
 801068c:	bd70      	pop	{r4, r5, r6, pc}
        union_ok = false;
 801068e:	2000      	movs	r0, #0
 8010690:	e7fc      	b.n	801068c <lv_area_intersect+0x4e>

08010692 <lv_area_join>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 8010692:	f9b2 3000 	ldrsh.w	r3, [r2]
{
 8010696:	b510      	push	{r4, lr}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 8010698:	f9b1 4000 	ldrsh.w	r4, [r1]
 801069c:	42a3      	cmp	r3, r4
 801069e:	bfa8      	it	ge
 80106a0:	4623      	movge	r3, r4
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 80106a2:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 80106a6:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 80106a8:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80106ac:	42a3      	cmp	r3, r4
 80106ae:	bfa8      	it	ge
 80106b0:	4623      	movge	r3, r4
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 80106b2:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 80106b6:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 80106b8:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 80106bc:	42a3      	cmp	r3, r4
 80106be:	bfb8      	it	lt
 80106c0:	4623      	movlt	r3, r4
 80106c2:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 80106c4:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 80106c8:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 80106cc:	4293      	cmp	r3, r2
 80106ce:	bfb8      	it	lt
 80106d0:	4613      	movlt	r3, r2
 80106d2:	80c3      	strh	r3, [r0, #6]
}
 80106d4:	bd10      	pop	{r4, pc}

080106d6 <lv_area_is_point_on>:
 */
bool lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p)
{
    bool is_on = false;

    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 80106d6:	f9b1 3000 	ldrsh.w	r3, [r1]
 80106da:	f9b0 2000 	ldrsh.w	r2, [r0]
 80106de:	429a      	cmp	r2, r3
 80106e0:	dc10      	bgt.n	8010704 <lv_area_is_point_on+0x2e>
 80106e2:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80106e6:	429a      	cmp	r2, r3
 80106e8:	db0c      	blt.n	8010704 <lv_area_is_point_on+0x2e>
 80106ea:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80106ee:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80106f2:	429a      	cmp	r2, r3
 80106f4:	dc06      	bgt.n	8010704 <lv_area_is_point_on+0x2e>
 80106f6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80106fa:	4298      	cmp	r0, r3
 80106fc:	bfb4      	ite	lt
 80106fe:	2000      	movlt	r0, #0
 8010700:	2001      	movge	r0, #1
 8010702:	4770      	bx	lr
    bool is_on = false;
 8010704:	2000      	movs	r0, #0
        is_on = true;
    }

    return is_on;
}
 8010706:	4770      	bx	lr

08010708 <lv_area_is_on>:
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 8010708:	f9b0 2000 	ldrsh.w	r2, [r0]
 801070c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8010710:	429a      	cmp	r2, r3
 8010712:	dc14      	bgt.n	801073e <lv_area_is_on+0x36>
 8010714:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8010718:	f9b1 3000 	ldrsh.w	r3, [r1]
 801071c:	429a      	cmp	r2, r3
 801071e:	db0e      	blt.n	801073e <lv_area_is_on+0x36>
 8010720:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8010724:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8010728:	429a      	cmp	r2, r3
 801072a:	dc08      	bgt.n	801073e <lv_area_is_on+0x36>
 801072c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8010730:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8010734:	4298      	cmp	r0, r3
 8010736:	bfb4      	ite	lt
 8010738:	2000      	movlt	r0, #0
 801073a:	2001      	movge	r0, #1
 801073c:	4770      	bx	lr
        return true;
    } else {
        return false;
 801073e:	2000      	movs	r0, #0
    }
}
 8010740:	4770      	bx	lr

08010742 <lv_area_is_in>:
 */
bool lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p)
{
    bool is_in = false;

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8010742:	f9b0 2000 	ldrsh.w	r2, [r0]
 8010746:	f9b1 3000 	ldrsh.w	r3, [r1]
 801074a:	429a      	cmp	r2, r3
 801074c:	db14      	blt.n	8010778 <lv_area_is_in+0x36>
 801074e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8010752:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8010756:	429a      	cmp	r2, r3
 8010758:	db0e      	blt.n	8010778 <lv_area_is_in+0x36>
 801075a:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801075e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8010762:	429a      	cmp	r2, r3
 8010764:	dc08      	bgt.n	8010778 <lv_area_is_in+0x36>
 8010766:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801076a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801076e:	4298      	cmp	r0, r3
 8010770:	bfcc      	ite	gt
 8010772:	2000      	movgt	r0, #0
 8010774:	2001      	movle	r0, #1
 8010776:	4770      	bx	lr
    bool is_in = false;
 8010778:	2000      	movs	r0, #0
       ain_p->y2 <= aholder_p->y2) {
        is_in = true;
    }

    return is_in;
}
 801077a:	4770      	bx	lr

0801077c <lv_circ_init>:
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
void lv_circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
    c->x = radius;
 801077c:	8002      	strh	r2, [r0, #0]
    c->y = 0;
 801077e:	2300      	movs	r3, #0
    *tmp = 1 - radius;
 8010780:	f1c2 0201 	rsb	r2, r2, #1
    c->y = 0;
 8010784:	8043      	strh	r3, [r0, #2]
    *tmp = 1 - radius;
 8010786:	800a      	strh	r2, [r1, #0]
}
 8010788:	4770      	bx	lr

0801078a <lv_circ_cont>:
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
bool lv_circ_cont(lv_point_t * c)
{
    return c->y <= c->x ? true : false;
 801078a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801078e:	f9b0 0000 	ldrsh.w	r0, [r0]
}
 8010792:	4282      	cmp	r2, r0
 8010794:	bfcc      	ite	gt
 8010796:	2000      	movgt	r0, #0
 8010798:	2001      	movle	r0, #1
 801079a:	4770      	bx	lr

0801079c <lv_circ_next>:
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
void lv_circ_next(lv_point_t * c, lv_coord_t * tmp)
{
    c->y++;
 801079c:	8843      	ldrh	r3, [r0, #2]
 801079e:	3301      	adds	r3, #1
 80107a0:	b21b      	sxth	r3, r3
 80107a2:	8043      	strh	r3, [r0, #2]

    if(*tmp <= 0) {
 80107a4:	f9b1 2000 	ldrsh.w	r2, [r1]
 80107a8:	2a00      	cmp	r2, #0
        (*tmp) += 2 * c->y + 1; // Change in decision criterion for y -> y+1
    } else {
        c->x--;
 80107aa:	bfc1      	itttt	gt
 80107ac:	8802      	ldrhgt	r2, [r0, #0]
 80107ae:	f102 32ff 	addgt.w	r2, r2, #4294967295	; 0xffffffff
 80107b2:	b212      	sxthgt	r2, r2
 80107b4:	8002      	strhgt	r2, [r0, #0]
        (*tmp) += 2 * (c->y - c->x) + 1; // Change for y -> y+1, x -> x-1
 80107b6:	bfc4      	itt	gt
 80107b8:	1a9b      	subgt	r3, r3, r2
 80107ba:	880a      	ldrhgt	r2, [r1, #0]
 80107bc:	3201      	adds	r2, #1
 80107be:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80107c2:	800b      	strh	r3, [r1, #0]
    }
}
 80107c4:	4770      	bx	lr

080107c6 <lv_task_ready>:
{
 80107c6:	b510      	push	{r4, lr}
 80107c8:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
 80107ca:	f7f1 ffa9 	bl	8002720 <lv_tick_get>
 80107ce:	6823      	ldr	r3, [r4, #0]
 80107d0:	43db      	mvns	r3, r3
 80107d2:	4403      	add	r3, r0
 80107d4:	6063      	str	r3, [r4, #4]
}
 80107d6:	bd10      	pop	{r4, pc}

080107d8 <lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                        int32_t (*cmp)(const void * pRef, const void * pElement))
{
 80107d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107dc:	9d08      	ldr	r5, [sp, #32]
 80107de:	4681      	mov	r9, r0
 80107e0:	4688      	mov	r8, r1
 80107e2:	4614      	mov	r4, r2
 80107e4:	469a      	mov	sl, r3
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 80107e6:	b90c      	cbnz	r4, 80107ec <lv_utils_bsearch+0x14>
            middle = base;
        } else {
            return (char *)middle;
        }
    }
    return NULL;
 80107e8:	4626      	mov	r6, r4
 80107ea:	e010      	b.n	801080e <lv_utils_bsearch+0x36>
        middle += (n / 2) * size;
 80107ec:	0867      	lsrs	r7, r4, #1
        if((c = (*cmp)(key, middle)) > 0) {
 80107ee:	4648      	mov	r0, r9
        middle += (n / 2) * size;
 80107f0:	fb0a 8607 	mla	r6, sl, r7, r8
        if((c = (*cmp)(key, middle)) > 0) {
 80107f4:	4631      	mov	r1, r6
 80107f6:	47a8      	blx	r5
 80107f8:	2800      	cmp	r0, #0
 80107fa:	dd07      	ble.n	801080c <lv_utils_bsearch+0x34>
            n    = (n / 2) - ((n & 1) == 0);
 80107fc:	43e4      	mvns	r4, r4
            base = (middle += size);
 80107fe:	eb06 080a 	add.w	r8, r6, sl
 8010802:	f004 0401 	and.w	r4, r4, #1
            n    = (n / 2) - ((n & 1) == 0);
 8010806:	1b3f      	subs	r7, r7, r4
{
 8010808:	463c      	mov	r4, r7
 801080a:	e7ec      	b.n	80107e6 <lv_utils_bsearch+0xe>
        } else if(c < 0) {
 801080c:	d1fc      	bne.n	8010808 <lv_utils_bsearch+0x30>
}
 801080e:	4630      	mov	r0, r6
 8010810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010814 <lv_draw_aa_ver_seg>:
 * @param color color of pixels
 * @param opa maximum opacity
 */
void lv_draw_aa_ver_seg(lv_coord_t x, lv_coord_t y, lv_coord_t length, const lv_area_t * mask, lv_color_t color,
                        lv_opa_t opa)
{
 8010814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bool aa_inv = false;
    if(length < 0) {
 8010818:	1e14      	subs	r4, r2, #0
{
 801081a:	4680      	mov	r8, r0
 801081c:	4689      	mov	r9, r1
 801081e:	469a      	mov	sl, r3
        aa_inv = true;
        length = -length;
 8010820:	bfb8      	it	lt
 8010822:	4264      	neglt	r4, r4
{
 8010824:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
        aa_inv = true;
 8010828:	bfb6      	itet	lt
 801082a:	2601      	movlt	r6, #1
    bool aa_inv = false;
 801082c:	2600      	movge	r6, #0
        length = -length;
 801082e:	b224      	sxthlt	r4, r4
    }

    lv_coord_t i;
    for(i = 0; i < length; i++) {
 8010830:	2500      	movs	r5, #0
 8010832:	b229      	sxth	r1, r5
 8010834:	fa1f fb85 	uxth.w	fp, r5
 8010838:	428c      	cmp	r4, r1
 801083a:	dc02      	bgt.n	8010842 <lv_draw_aa_ver_seg+0x2e>
        lv_opa_t px_opa = lv_draw_aa_get_opa(length, i, opa);
        if(aa_inv) px_opa = opa - px_opa;
        lv_draw_px(x, y + i, mask, color, px_opa);
    }
}
 801083c:	b003      	add	sp, #12
 801083e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_opa_t px_opa = lv_draw_aa_get_opa(length, i, opa);
 8010842:	463a      	mov	r2, r7
 8010844:	4620      	mov	r0, r4
 8010846:	f7f3 fbdf 	bl	8004008 <lv_draw_aa_get_opa>
        if(aa_inv) px_opa = opa - px_opa;
 801084a:	b10e      	cbz	r6, 8010850 <lv_draw_aa_ver_seg+0x3c>
 801084c:	1a38      	subs	r0, r7, r0
 801084e:	b2c0      	uxtb	r0, r0
        lv_draw_px(x, y + i, mask, color, px_opa);
 8010850:	eb0b 0109 	add.w	r1, fp, r9
 8010854:	9000      	str	r0, [sp, #0]
 8010856:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801085a:	4652      	mov	r2, sl
 801085c:	b209      	sxth	r1, r1
 801085e:	4640      	mov	r0, r8
 8010860:	f002 fdfa 	bl	8013458 <lv_draw_px>
 8010864:	3501      	adds	r5, #1
 8010866:	e7e4      	b.n	8010832 <lv_draw_aa_ver_seg+0x1e>

08010868 <lv_draw_aa_hor_seg>:
 * @param color color of pixels
 * @param opa maximum opacity
 */
void lv_draw_aa_hor_seg(lv_coord_t x, lv_coord_t y, lv_coord_t length, const lv_area_t * mask, lv_color_t color,
                        lv_opa_t opa)
{
 8010868:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bool aa_inv = false;
    if(length < 0) {
 801086c:	1e14      	subs	r4, r2, #0
{
 801086e:	4680      	mov	r8, r0
 8010870:	4689      	mov	r9, r1
 8010872:	469a      	mov	sl, r3
        aa_inv = true;
        length = -length;
 8010874:	bfb8      	it	lt
 8010876:	4264      	neglt	r4, r4
{
 8010878:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
        aa_inv = true;
 801087c:	bfb6      	itet	lt
 801087e:	2601      	movlt	r6, #1
    bool aa_inv = false;
 8010880:	2600      	movge	r6, #0
        length = -length;
 8010882:	b224      	sxthlt	r4, r4
    }

    lv_coord_t i;
    for(i = 0; i < length; i++) {
 8010884:	2500      	movs	r5, #0
 8010886:	b229      	sxth	r1, r5
 8010888:	fa1f fb85 	uxth.w	fp, r5
 801088c:	428c      	cmp	r4, r1
 801088e:	dc02      	bgt.n	8010896 <lv_draw_aa_hor_seg+0x2e>
        lv_opa_t px_opa = lv_draw_aa_get_opa(length, i, opa);
        if(aa_inv) px_opa = opa - px_opa;
        lv_draw_px(x + i, y, mask, color, px_opa);
    }
}
 8010890:	b003      	add	sp, #12
 8010892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_opa_t px_opa = lv_draw_aa_get_opa(length, i, opa);
 8010896:	463a      	mov	r2, r7
 8010898:	4620      	mov	r0, r4
 801089a:	f7f3 fbb5 	bl	8004008 <lv_draw_aa_get_opa>
        if(aa_inv) px_opa = opa - px_opa;
 801089e:	b10e      	cbz	r6, 80108a4 <lv_draw_aa_hor_seg+0x3c>
 80108a0:	1a38      	subs	r0, r7, r0
 80108a2:	b2c0      	uxtb	r0, r0
        lv_draw_px(x + i, y, mask, color, px_opa);
 80108a4:	44c3      	add	fp, r8
 80108a6:	9000      	str	r0, [sp, #0]
 80108a8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80108ac:	4652      	mov	r2, sl
 80108ae:	4649      	mov	r1, r9
 80108b0:	fa0f f08b 	sxth.w	r0, fp
 80108b4:	f002 fdd0 	bl	8013458 <lv_draw_px>
 80108b8:	3501      	adds	r5, #1
 80108ba:	e7e4      	b.n	8010886 <lv_draw_aa_hor_seg+0x1e>

080108bc <lv_img_color_format_is_chroma_keyed>:
    switch(cf) {
 80108bc:	280a      	cmp	r0, #10
 80108be:	d807      	bhi.n	80108d0 <lv_img_color_format_is_chroma_keyed+0x14>
bool lv_img_color_format_is_chroma_keyed(lv_img_cf_t cf)
 80108c0:	2301      	movs	r3, #1
 80108c2:	4083      	lsls	r3, r0
 80108c4:	f413 6ff9 	tst.w	r3, #1992	; 0x7c8
 80108c8:	bf14      	ite	ne
 80108ca:	2001      	movne	r0, #1
 80108cc:	2000      	moveq	r0, #0
 80108ce:	4770      	bx	lr
        default: is_chroma_keyed = false; break;
 80108d0:	2000      	movs	r0, #0
}
 80108d2:	4770      	bx	lr

080108d4 <lv_img_color_format_has_alpha>:
    switch(cf) {
 80108d4:	3802      	subs	r0, #2
 80108d6:	b2c0      	uxtb	r0, r0
 80108d8:	280c      	cmp	r0, #12
 80108da:	d809      	bhi.n	80108f0 <lv_img_color_format_has_alpha+0x1c>
 80108dc:	2301      	movs	r3, #1
 80108de:	fa03 f000 	lsl.w	r0, r3, r0
 80108e2:	f641 6309 	movw	r3, #7689	; 0x1e09
 80108e6:	4218      	tst	r0, r3
 80108e8:	bf14      	ite	ne
 80108ea:	2001      	movne	r0, #1
 80108ec:	2000      	moveq	r0, #0
 80108ee:	4770      	bx	lr
        default: has_alpha = false; break;
 80108f0:	2000      	movs	r0, #0
}
 80108f2:	4770      	bx	lr

080108f4 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
 80108f4:	b150      	cbz	r0, 801090c <lv_img_src_get_type+0x18>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 80108f6:	7803      	ldrb	r3, [r0, #0]
 80108f8:	f1a3 0220 	sub.w	r2, r3, #32
 80108fc:	2a5f      	cmp	r2, #95	; 0x5f
 80108fe:	d907      	bls.n	8010910 <lv_img_src_get_type+0x1c>
    } else if(u8_p[0] >= 0x80) {
 8010900:	f013 0f80 	tst.w	r3, #128	; 0x80
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
 8010904:	bf0c      	ite	eq
 8010906:	2000      	moveq	r0, #0
 8010908:	2002      	movne	r0, #2
 801090a:	4770      	bx	lr
    if(src == NULL) return img_src_type;
 801090c:	2003      	movs	r0, #3
 801090e:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 8010910:	2001      	movs	r0, #1
}
 8010912:	4770      	bx	lr

08010914 <line_init>:
#endif
    }
}

static void line_init(line_draw_t * line, const lv_point_t * p1, const lv_point_t * p2)
{
 8010914:	b530      	push	{r4, r5, lr}
    line->p1.x = p1->x;
 8010916:	f9b1 5000 	ldrsh.w	r5, [r1]
    line->p1.y = p1->y;
 801091a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    line->p1.x = p1->x;
 801091e:	8005      	strh	r5, [r0, #0]
    line->p2.x = p2->x;
 8010920:	f9b2 1000 	ldrsh.w	r1, [r2]
    line->p1.y = p1->y;
 8010924:	8044      	strh	r4, [r0, #2]
    line->p2.y = p2->y;

    line->dx  = LV_MATH_ABS(line->p2.x - line->p1.x);
 8010926:	1b4b      	subs	r3, r1, r5
    line->p2.y = p2->y;
 8010928:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
    line->p2.x = p2->x;
 801092c:	8081      	strh	r1, [r0, #4]
    line->dx  = LV_MATH_ABS(line->p2.x - line->p1.x);
 801092e:	2b00      	cmp	r3, #0
    line->p2.y = p2->y;
 8010930:	80c2      	strh	r2, [r0, #6]
    line->sy  = line->p1.y < line->p2.y ? 1 : -1;
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
    line->e2  = 0;
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/

    line->p_act.x = line->p1.x;
 8010932:	8105      	strh	r5, [r0, #8]
    line->dx  = LV_MATH_ABS(line->p2.x - line->p1.x);
 8010934:	bfb8      	it	lt
 8010936:	425b      	neglt	r3, r3
    line->sx  = line->p1.x < line->p2.x ? 1 : -1;
 8010938:	428d      	cmp	r5, r1
 801093a:	bfb4      	ite	lt
 801093c:	2101      	movlt	r1, #1
 801093e:	f04f 31ff 	movge.w	r1, #4294967295	; 0xffffffff
    line->p_act.y = line->p1.y;
 8010942:	8144      	strh	r4, [r0, #10]
    line->sx  = line->p1.x < line->p2.x ? 1 : -1;
 8010944:	81c1      	strh	r1, [r0, #14]
    line->dy  = LV_MATH_ABS(line->p2.y - line->p1.y);
 8010946:	1b11      	subs	r1, r2, r4
    line->dx  = LV_MATH_ABS(line->p2.x - line->p1.x);
 8010948:	b21b      	sxth	r3, r3
    line->dy  = LV_MATH_ABS(line->p2.y - line->p1.y);
 801094a:	2900      	cmp	r1, #0
    line->dx  = LV_MATH_ABS(line->p2.x - line->p1.x);
 801094c:	8183      	strh	r3, [r0, #12]
    line->dy  = LV_MATH_ABS(line->p2.y - line->p1.y);
 801094e:	bfb8      	it	lt
 8010950:	4249      	neglt	r1, r1
    line->sy  = line->p1.y < line->p2.y ? 1 : -1;
 8010952:	4294      	cmp	r4, r2
 8010954:	bfb4      	ite	lt
 8010956:	2201      	movlt	r2, #1
 8010958:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    line->dy  = LV_MATH_ABS(line->p2.y - line->p1.y);
 801095c:	b209      	sxth	r1, r1
    line->sy  = line->p1.y < line->p2.y ? 1 : -1;
 801095e:	8242      	strh	r2, [r0, #18]
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
 8010960:	428b      	cmp	r3, r1
    line->dy  = LV_MATH_ABS(line->p2.y - line->p1.y);
 8010962:	8201      	strh	r1, [r0, #16]
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
 8010964:	bfd5      	itete	le
 8010966:	424a      	negle	r2, r1
 8010968:	eb03 72d3 	addgt.w	r2, r3, r3, lsr #31
 801096c:	eb02 72d2 	addle.w	r2, r2, r2, lsr #31
 8010970:	1052      	asrgt	r2, r2, #1
 8010972:	bfd8      	it	le
 8010974:	f342 024f 	sbfxle	r2, r2, #1, #16
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/
 8010978:	428b      	cmp	r3, r1
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
 801097a:	8282      	strh	r2, [r0, #20]
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/
 801097c:	bfd8      	it	le
 801097e:	2300      	movle	r3, #0
    line->e2  = 0;
 8010980:	f04f 0200 	mov.w	r2, #0
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/
 8010984:	bfc8      	it	gt
 8010986:	2301      	movgt	r3, #1
    line->e2  = 0;
 8010988:	82c2      	strh	r2, [r0, #22]
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/
 801098a:	7603      	strb	r3, [r0, #24]
}
 801098c:	bd30      	pop	{r4, r5, pc}

0801098e <line_next>:

static bool line_next(line_draw_t * line)
{
    if(line->p_act.x == line->p2.x && line->p_act.y == line->p2.y) return false;
 801098e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8010992:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8010996:	428b      	cmp	r3, r1
{
 8010998:	b530      	push	{r4, r5, lr}
    if(line->p_act.x == line->p2.x && line->p_act.y == line->p2.y) return false;
 801099a:	d105      	bne.n	80109a8 <line_next+0x1a>
 801099c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80109a0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d019      	beq.n	80109dc <line_next+0x4e>
    line->e2 = line->err;
    if(line->e2 > -line->dx) {
 80109a8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    line->e2 = line->err;
 80109ac:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
    if(line->e2 > -line->dx) {
 80109b0:	425d      	negs	r5, r3
 80109b2:	f9b0 4010 	ldrsh.w	r4, [r0, #16]
    line->e2 = line->err;
 80109b6:	82c2      	strh	r2, [r0, #22]
    if(line->e2 > -line->dx) {
 80109b8:	42aa      	cmp	r2, r5
 80109ba:	dd04      	ble.n	80109c6 <line_next+0x38>
        line->err -= line->dy;
 80109bc:	1b15      	subs	r5, r2, r4
 80109be:	8285      	strh	r5, [r0, #20]
        line->p_act.x += line->sx;
 80109c0:	89c5      	ldrh	r5, [r0, #14]
 80109c2:	4429      	add	r1, r5
 80109c4:	8101      	strh	r1, [r0, #8]
    }
    if(line->e2 < line->dy) {
 80109c6:	42a2      	cmp	r2, r4
 80109c8:	da06      	bge.n	80109d8 <line_next+0x4a>
        line->err += line->dx;
 80109ca:	8a82      	ldrh	r2, [r0, #20]
 80109cc:	4413      	add	r3, r2
        line->p_act.y += line->sy;
 80109ce:	8a42      	ldrh	r2, [r0, #18]
        line->err += line->dx;
 80109d0:	8283      	strh	r3, [r0, #20]
        line->p_act.y += line->sy;
 80109d2:	8943      	ldrh	r3, [r0, #10]
 80109d4:	4413      	add	r3, r2
 80109d6:	8143      	strh	r3, [r0, #10]
    }
    return true;
 80109d8:	2001      	movs	r0, #1
 80109da:	e000      	b.n	80109de <line_next+0x50>
    if(line->p_act.x == line->p2.x && line->p_act.y == line->p2.y) return false;
 80109dc:	2000      	movs	r0, #0
}
 80109de:	bd30      	pop	{r4, r5, pc}

080109e0 <lv_draw_line>:
{
 80109e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(style->line.width == 0) return;
 80109e4:	f9b3 7036 	ldrsh.w	r7, [r3, #54]	; 0x36
{
 80109e8:	b09f      	sub	sp, #124	; 0x7c
 80109ea:	4616      	mov	r6, r2
 80109ec:	461c      	mov	r4, r3
 80109ee:	f89d 50a0 	ldrb.w	r5, [sp, #160]	; 0xa0
    if(style->line.width == 0) return;
 80109f2:	2f00      	cmp	r7, #0
 80109f4:	f000 8090 	beq.w	8010b18 <lv_draw_line+0x138>
    if(point1->x == point2->x && point1->y == point2->y) return;
 80109f8:	f9b0 3000 	ldrsh.w	r3, [r0]
 80109fc:	f9b1 2000 	ldrsh.w	r2, [r1]
 8010a00:	4293      	cmp	r3, r2
 8010a02:	d106      	bne.n	8010a12 <lv_draw_line+0x32>
 8010a04:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8010a08:	f9b1 c002 	ldrsh.w	ip, [r1, #2]
 8010a0c:	45e6      	cmp	lr, ip
 8010a0e:	f000 8083 	beq.w	8010b18 <lv_draw_line+0x138>
    if(point1->x < mask->x1 - style->line.width && point2->x < mask->x1 - style->line.width) return;
 8010a12:	f9b6 c000 	ldrsh.w	ip, [r6]
 8010a16:	ebac 0c07 	sub.w	ip, ip, r7
 8010a1a:	4563      	cmp	r3, ip
 8010a1c:	da01      	bge.n	8010a22 <lv_draw_line+0x42>
 8010a1e:	4594      	cmp	ip, r2
 8010a20:	dc7a      	bgt.n	8010b18 <lv_draw_line+0x138>
    if(point1->x > mask->x2 + style->line.width && point2->x > mask->x2 + style->line.width) return;
 8010a22:	f9b6 c004 	ldrsh.w	ip, [r6, #4]
 8010a26:	44bc      	add	ip, r7
 8010a28:	4563      	cmp	r3, ip
 8010a2a:	dd01      	ble.n	8010a30 <lv_draw_line+0x50>
 8010a2c:	4594      	cmp	ip, r2
 8010a2e:	db73      	blt.n	8010b18 <lv_draw_line+0x138>
    if(point1->y < mask->y1 - style->line.width && point2->y < mask->y1 - style->line.width) return;
 8010a30:	f9b6 c002 	ldrsh.w	ip, [r6, #2]
 8010a34:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8010a38:	ebac 0c07 	sub.w	ip, ip, r7
 8010a3c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8010a40:	4560      	cmp	r0, ip
 8010a42:	da01      	bge.n	8010a48 <lv_draw_line+0x68>
 8010a44:	458c      	cmp	ip, r1
 8010a46:	dc67      	bgt.n	8010b18 <lv_draw_line+0x138>
    if(point1->y > mask->y2 + style->line.width && point2->y > mask->y2 + style->line.width) return;
 8010a48:	f9b6 c006 	ldrsh.w	ip, [r6, #6]
 8010a4c:	4467      	add	r7, ip
 8010a4e:	42b8      	cmp	r0, r7
 8010a50:	dd01      	ble.n	8010a56 <lv_draw_line+0x76>
 8010a52:	428f      	cmp	r7, r1
 8010a54:	db60      	blt.n	8010b18 <lv_draw_line+0x138>
    if(LV_MATH_ABS(point1->x - point2->x) > LV_MATH_ABS(point1->y - point2->y)) {
 8010a56:	eba3 0c02 	sub.w	ip, r3, r2
 8010a5a:	1a47      	subs	r7, r0, r1
 8010a5c:	f1bc 0f00 	cmp.w	ip, #0
 8010a60:	bfb8      	it	lt
 8010a62:	f1cc 0c00 	rsblt	ip, ip, #0
 8010a66:	2f00      	cmp	r7, #0
 8010a68:	bfb8      	it	lt
 8010a6a:	427f      	neglt	r7, r7
 8010a6c:	45bc      	cmp	ip, r7
 8010a6e:	dd56      	ble.n	8010b1e <lv_draw_line+0x13e>
        if(point1->x < point2->x) {
 8010a70:	4293      	cmp	r3, r2
            p1.y = point1->y;
 8010a72:	bfbd      	ittte	lt
 8010a74:	f8ad 0032 	strhlt.w	r0, [sp, #50]	; 0x32
            p2.x = point2->x;
 8010a78:	f8ad 2034 	strhlt.w	r2, [sp, #52]	; 0x34
            p2.y = point2->y;
 8010a7c:	f8ad 1036 	strhlt.w	r1, [sp, #54]	; 0x36
            p1.x = point2->x;
 8010a80:	f8ad 2030 	strhge.w	r2, [sp, #48]	; 0x30
    line_init(&main_line, &p1, &p2);
 8010a84:	aa0d      	add	r2, sp, #52	; 0x34
            p1.y = point2->y;
 8010a86:	bfa8      	it	ge
 8010a88:	f8ad 1032 	strhge.w	r1, [sp, #50]	; 0x32
    line_init(&main_line, &p1, &p2);
 8010a8c:	a90c      	add	r1, sp, #48	; 0x30
            p2.y = point1->y;
 8010a8e:	bfa8      	it	ge
 8010a90:	f8ad 0036 	strhge.w	r0, [sp, #54]	; 0x36
    line_init(&main_line, &p1, &p2);
 8010a94:	a810      	add	r0, sp, #64	; 0x40
            p1.x = point1->x;
 8010a96:	bfb4      	ite	lt
 8010a98:	f8ad 3030 	strhlt.w	r3, [sp, #48]	; 0x30
            p2.x = point1->x;
 8010a9c:	f8ad 3034 	strhge.w	r3, [sp, #52]	; 0x34
    line_init(&main_line, &p1, &p2);
 8010aa0:	f7ff ff38 	bl	8010914 <line_init>
    if(main_line.p1.y == main_line.p2.y) {
 8010aa4:	f9bd e042 	ldrsh.w	lr, [sp, #66]	; 0x42
 8010aa8:	f9bd 7046 	ldrsh.w	r7, [sp, #70]	; 0x46
 8010aac:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8010ab0:	45be      	cmp	lr, r7
 8010ab2:	f9bd c044 	ldrsh.w	ip, [sp, #68]	; 0x44
 8010ab6:	d134      	bne.n	8010b22 <lv_draw_line+0x142>
    lv_coord_t width      = style->line.width - 1;
 8010ab8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t)style->line.opa * opa_scale) >> 8;
 8010aba:	2dff      	cmp	r5, #255	; 0xff
    lv_coord_t width      = style->line.width - 1;
 8010abc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8010ac0:	b21b      	sxth	r3, r3
    lv_coord_t width_half = width >> 1;
 8010ac2:	ea4f 0063 	mov.w	r0, r3, asr #1
    lv_coord_t width_1    = width & 0x1;
 8010ac6:	f003 0201 	and.w	r2, r3, #1
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t)style->line.opa * opa_scale) >> 8;
 8010aca:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    act_area.y1 = main_line->p1.y - width_half - width_1;
 8010ace:	4402      	add	r2, r0
    act_area.y2 = main_line->p2.y + width_half;
 8010ad0:	4407      	add	r7, r0
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t)style->line.opa * opa_scale) >> 8;
 8010ad2:	bf18      	it	ne
 8010ad4:	436b      	mulne	r3, r5
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 8010ad6:	4608      	mov	r0, r1
    act_area.y1 = main_line->p1.y - width_half - width_1;
 8010ad8:	ebae 0202 	sub.w	r2, lr, r2
    act_area.y2 = main_line->p2.y + width_half;
 8010adc:	b23f      	sxth	r7, r7
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t)style->line.opa * opa_scale) >> 8;
 8010ade:	bf18      	it	ne
 8010ae0:	0a1b      	lsrne	r3, r3, #8
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 8010ae2:	4561      	cmp	r1, ip
    act_area.y1 = main_line->p1.y - width_half - width_1;
 8010ae4:	b212      	sxth	r2, r2
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 8010ae6:	bfa8      	it	ge
 8010ae8:	4660      	movge	r0, ip
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 8010aea:	4561      	cmp	r1, ip
 8010aec:	bfb8      	it	lt
 8010aee:	4661      	movlt	r1, ip
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 8010af0:	42ba      	cmp	r2, r7
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 8010af2:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 8010af6:	f8ad 1060 	strh.w	r1, [sp, #96]	; 0x60
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 8010afa:	4611      	mov	r1, r2
 8010afc:	bfa8      	it	ge
 8010afe:	4639      	movge	r1, r7
 8010b00:	f8ad 105e 	strh.w	r1, [sp, #94]	; 0x5e
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 8010b04:	42ba      	cmp	r2, r7
    lv_draw_fill(&draw_area, mask, style->line.color, opa);
 8010b06:	4631      	mov	r1, r6
 8010b08:	a817      	add	r0, sp, #92	; 0x5c
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 8010b0a:	bfb8      	it	lt
 8010b0c:	463a      	movlt	r2, r7
 8010b0e:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
    lv_draw_fill(&draw_area, mask, style->line.color, opa);
 8010b12:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8010b14:	f002 fcf0 	bl	80134f8 <lv_draw_fill>
}
 8010b18:	b01f      	add	sp, #124	; 0x7c
 8010b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(point1->y < point2->y) {
 8010b1e:	4288      	cmp	r0, r1
 8010b20:	e7a7      	b.n	8010a72 <lv_draw_line+0x92>
    else if(main_line.p1.x == main_line.p2.x) {
 8010b22:	4561      	cmp	r1, ip
 8010b24:	d128      	bne.n	8010b78 <lv_draw_line+0x198>
    lv_coord_t width      = style->line.width - 1;
 8010b26:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t)style->line.opa * opa_scale) >> 8;
 8010b28:	2dff      	cmp	r5, #255	; 0xff
    lv_coord_t width      = style->line.width - 1;
 8010b2a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8010b2e:	b21b      	sxth	r3, r3
    lv_coord_t width_half = width >> 1;
 8010b30:	ea4f 0863 	mov.w	r8, r3, asr #1
    lv_coord_t width_1    = width & 0x1;
 8010b34:	f003 0201 	and.w	r2, r3, #1
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t)style->line.opa * opa_scale) >> 8;
 8010b38:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    act_area.x1 = main_line->p1.x - width_half;
 8010b3c:	eba1 0108 	sub.w	r1, r1, r8
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t)style->line.opa * opa_scale) >> 8;
 8010b40:	bf18      	it	ne
 8010b42:	436b      	mulne	r3, r5
    act_area.x1 = main_line->p1.x - width_half;
 8010b44:	b208      	sxth	r0, r1
    act_area.x2 = main_line->p2.x + width_half + width_1;
 8010b46:	eb08 0102 	add.w	r1, r8, r2
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t)style->line.opa * opa_scale) >> 8;
 8010b4a:	bf18      	it	ne
 8010b4c:	0a1b      	lsrne	r3, r3, #8
    act_area.x2 = main_line->p2.x + width_half + width_1;
 8010b4e:	4461      	add	r1, ip
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 8010b50:	4602      	mov	r2, r0
    act_area.x2 = main_line->p2.x + width_half + width_1;
 8010b52:	b209      	sxth	r1, r1
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 8010b54:	4288      	cmp	r0, r1
 8010b56:	bfa8      	it	ge
 8010b58:	460a      	movge	r2, r1
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 8010b5a:	4288      	cmp	r0, r1
 8010b5c:	bfb8      	it	lt
 8010b5e:	4608      	movlt	r0, r1
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 8010b60:	45be      	cmp	lr, r7
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 8010b62:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 8010b66:	4672      	mov	r2, lr
 8010b68:	bfa8      	it	ge
 8010b6a:	463a      	movge	r2, r7
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 8010b6c:	f8ad 0060 	strh.w	r0, [sp, #96]	; 0x60
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 8010b70:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
 8010b74:	4672      	mov	r2, lr
 8010b76:	e7c5      	b.n	8010b04 <lv_draw_line+0x124>
        bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8010b78:	f7f2 fa14 	bl	8002fa4 <lv_refr_get_disp_refreshing>
 8010b7c:	f7f1 fdc6 	bl	800270c <lv_disp_get_antialiasing>
 8010b80:	4680      	mov	r8, r0
 8010b82:	4607      	mov	r7, r0
        if(aa) {
 8010b84:	b1e0      	cbz	r0, 8010bc0 <lv_draw_line+0x1e0>
            if(main_line.hor) {
 8010b86:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8010b8a:	2f00      	cmp	r7, #0
 8010b8c:	d054      	beq.n	8010c38 <lv_draw_line+0x258>
                if(main_line.p1.y < main_line.p2.y) {
 8010b8e:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8010b92:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8010b96:	429a      	cmp	r2, r3
 8010b98:	da38      	bge.n	8010c0c <lv_draw_line+0x22c>
                    p_tmp.x = main_line.p2.x;
 8010b9a:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
                    p_tmp.y = main_line.p2.y - 1;
 8010b9e:	3b01      	subs	r3, #1
                    line_init(&main_line, &p1, &p_tmp);
 8010ba0:	a90c      	add	r1, sp, #48	; 0x30
 8010ba2:	a810      	add	r0, sp, #64	; 0x40
                    p_tmp.x = main_line.p2.x;
 8010ba4:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
                    line_init(&main_line, &p1, &p_tmp);
 8010ba8:	aa17      	add	r2, sp, #92	; 0x5c
                    p_tmp.y = main_line.p2.y - 1;
 8010baa:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                    line_init(&main_line, &p1, &p_tmp);
 8010bae:	f7ff feb1 	bl	8010914 <line_init>
                    main_line.sy = LV_MATH_ABS(main_line.sy); /*The sign can change if the line becomes horizontal*/
 8010bb2:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	bfb8      	it	lt
 8010bba:	425b      	neglt	r3, r3
 8010bbc:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t)style->line.opa * opa_scale) >> 8;
 8010bc0:	2dff      	cmp	r5, #255	; 0xff
 8010bc2:	f894 b038 	ldrb.w	fp, [r4, #56]	; 0x38
 8010bc6:	bf1c      	itt	ne
 8010bc8:	fb0b fb05 	mulne.w	fp, fp, r5
 8010bcc:	ea4f 2b1b 	movne.w	fp, fp, lsr #8
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8010bd0:	f7f2 f9e8 	bl	8002fa4 <lv_refr_get_disp_refreshing>
 8010bd4:	f7f1 fd9a 	bl	800270c <lv_disp_get_antialiasing>
    vect_main.x = main_line->p2.x - main_line->p1.x;
 8010bd8:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8010bdc:	9004      	str	r0, [sp, #16]
    vect_main.x = main_line->p2.x - main_line->p1.x;
 8010bde:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	; 0x40
    vect_main.y = main_line->p2.y - main_line->p1.y;
 8010be2:	f9bd 0046 	ldrsh.w	r0, [sp, #70]	; 0x46
 8010be6:	f9bd c042 	ldrsh.w	ip, [sp, #66]	; 0x42
    vect_main.x = main_line->p2.x - main_line->p1.x;
 8010bea:	1b4b      	subs	r3, r1, r5
    if(main_line->hor) {
 8010bec:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
    vect_main.y = main_line->p2.y - main_line->p1.y;
 8010bf0:	eba0 020c 	sub.w	r2, r0, ip
    vect_main.x = main_line->p2.x - main_line->p1.x;
 8010bf4:	b21b      	sxth	r3, r3
    vect_main.y = main_line->p2.y - main_line->p1.y;
 8010bf6:	b212      	sxth	r2, r2
    if(main_line->hor) {
 8010bf8:	f1be 0f00 	cmp.w	lr, #0
 8010bfc:	d04c      	beq.n	8010c98 <lv_draw_line+0x2b8>
        if(main_line->p1.y < main_line->p2.y + dir_ori) {
 8010bfe:	4438      	add	r0, r7
 8010c00:	4584      	cmp	ip, r0
 8010c02:	da4c      	bge.n	8010c9e <lv_draw_line+0x2be>
            vect_norm.x = -vect_main.y;
 8010c04:	4252      	negs	r2, r2
 8010c06:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8010c0a:	e04b      	b.n	8010ca4 <lv_draw_line+0x2c4>
                } else if(main_line.p1.y > main_line.p2.y) {
 8010c0c:	dd12      	ble.n	8010c34 <lv_draw_line+0x254>
                    p_tmp.x = main_line.p2.x;
 8010c0e:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
                    p_tmp.y = main_line.p2.y + 1;
 8010c12:	3301      	adds	r3, #1
                    line_init(&main_line, &p1, &p_tmp);
 8010c14:	a90c      	add	r1, sp, #48	; 0x30
 8010c16:	a810      	add	r0, sp, #64	; 0x40
                    p_tmp.x = main_line.p2.x;
 8010c18:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
                    line_init(&main_line, &p1, &p_tmp);
 8010c1c:	aa17      	add	r2, sp, #92	; 0x5c
                    p_tmp.y = main_line.p2.y + 1;
 8010c1e:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                    line_init(&main_line, &p1, &p_tmp);
 8010c22:	f7ff fe77 	bl	8010914 <line_init>
                    main_line.sy = -LV_MATH_ABS(main_line.sy); /*The sign can change if the line becomes horizontal*/
 8010c26:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	bfc8      	it	gt
 8010c2e:	425b      	neggt	r3, r3
 8010c30:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        bool dir_ori = false;
 8010c34:	2700      	movs	r7, #0
 8010c36:	e7c3      	b.n	8010bc0 <lv_draw_line+0x1e0>
                if(main_line.p1.x < main_line.p2.x) {
 8010c38:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8010c3c:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 8010c40:	429a      	cmp	r2, r3
 8010c42:	da14      	bge.n	8010c6e <lv_draw_line+0x28e>
                    p_tmp.x = main_line.p2.x - 1;
 8010c44:	3b01      	subs	r3, #1
                    line_init(&main_line, &p1, &p_tmp);
 8010c46:	aa17      	add	r2, sp, #92	; 0x5c
 8010c48:	a90c      	add	r1, sp, #48	; 0x30
 8010c4a:	a810      	add	r0, sp, #64	; 0x40
                    p_tmp.x = main_line.p2.x - 1;
 8010c4c:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                    dir_ori = true;
 8010c50:	4647      	mov	r7, r8
                    p_tmp.y = main_line.p2.y;
 8010c52:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 8010c56:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                    line_init(&main_line, &p1, &p_tmp);
 8010c5a:	f7ff fe5b 	bl	8010914 <line_init>
                    main_line.sx = LV_MATH_ABS(main_line.sx); /*The sign can change if the line becomes vertical*/
 8010c5e:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	bfb8      	it	lt
 8010c66:	425b      	neglt	r3, r3
 8010c68:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 8010c6c:	e7a8      	b.n	8010bc0 <lv_draw_line+0x1e0>
                } else if(main_line.p1.x > main_line.p2.x) {
 8010c6e:	dda7      	ble.n	8010bc0 <lv_draw_line+0x1e0>
                    p_tmp.x = main_line.p2.x + 1;
 8010c70:	3301      	adds	r3, #1
                    line_init(&main_line, &p1, &p_tmp);
 8010c72:	aa17      	add	r2, sp, #92	; 0x5c
 8010c74:	a90c      	add	r1, sp, #48	; 0x30
 8010c76:	a810      	add	r0, sp, #64	; 0x40
                    p_tmp.x = main_line.p2.x + 1;
 8010c78:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                    p_tmp.y = main_line.p2.y;
 8010c7c:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 8010c80:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                    line_init(&main_line, &p1, &p_tmp);
 8010c84:	f7ff fe46 	bl	8010914 <line_init>
                    main_line.sx = -LV_MATH_ABS(main_line.sx); /*The sign can change if the line becomes vertical*/
 8010c88:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	bfc8      	it	gt
 8010c90:	425b      	neggt	r3, r3
 8010c92:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 8010c96:	e793      	b.n	8010bc0 <lv_draw_line+0x1e0>
        if(main_line->p1.x < main_line->p2.x + dir_ori) {
 8010c98:	4439      	add	r1, r7
 8010c9a:	428d      	cmp	r5, r1
 8010c9c:	dab2      	bge.n	8010c04 <lv_draw_line+0x224>
            vect_norm.y = -vect_main.x;
 8010c9e:	425b      	negs	r3, r3
            vect_norm.x = vect_main.y;
 8010ca0:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
            vect_norm.y = vect_main.x;
 8010ca4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    vect_norm.x = vect_norm.x << 4;
 8010ca8:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
    width = style->line.width;
 8010cac:	f9b4 9036 	ldrsh.w	r9, [r4, #54]	; 0x36
    vect_norm.x = vect_norm.x << 4;
 8010cb0:	011b      	lsls	r3, r3, #4
    lv_point_t * pattern = lv_draw_get_buf(width * 2 * sizeof(lv_point_t));
 8010cb2:	ea4f 00c9 	mov.w	r0, r9, lsl #3
    vect_norm.x = vect_norm.x << 4;
 8010cb6:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
    vect_norm.y = vect_norm.y << 4;
 8010cba:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8010cbe:	011b      	lsls	r3, r3, #4
 8010cc0:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    lv_point_t * pattern = lv_draw_get_buf(width * 2 * sizeof(lv_point_t));
 8010cc4:	f7f3 f962 	bl	8003f8c <lv_draw_get_buf>
 8010cc8:	4605      	mov	r5, r0
    if(width != 0) {
 8010cca:	f1b9 0f00 	cmp.w	r9, #0
 8010cce:	f000 83c9 	beq.w	8011464 <lv_draw_line+0xa84>
        lv_point_t p0 = {0, 0};
 8010cd2:	f04f 0800 	mov.w	r8, #0
        line_init(&pattern_line, &p0, &vect_norm);
 8010cd6:	aa0e      	add	r2, sp, #56	; 0x38
 8010cd8:	a90f      	add	r1, sp, #60	; 0x3c
 8010cda:	a817      	add	r0, sp, #92	; 0x5c
        lv_point_t p0 = {0, 0};
 8010cdc:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
        line_init(&pattern_line, &p0, &vect_norm);
 8010ce0:	f7ff fe18 	bl	8010914 <line_init>
        uint32_t width_sqr = width * width;
 8010ce4:	fb09 fa09 	mul.w	sl, r9, r9
            pattern[i].y = pattern_line.p_act.y;
 8010ce8:	1cab      	adds	r3, r5, #2
 8010cea:	fa0f f288 	sxth.w	r2, r8
 8010cee:	9206      	str	r2, [sp, #24]
            pattern[i].x = pattern_line.p_act.x;
 8010cf0:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8010cf4:	f825 2028 	strh.w	r2, [r5, r8, lsl #2]
            pattern[i].y = pattern_line.p_act.y;
 8010cf8:	f9bd 1066 	ldrsh.w	r1, [sp, #102]	; 0x66
 8010cfc:	f823 1028 	strh.w	r1, [r3, r8, lsl #2]
            uint32_t sqr = pattern_line.p_act.x * pattern_line.p_act.x + pattern_line.p_act.y * pattern_line.p_act.y;
 8010d00:	f9bd 1066 	ldrsh.w	r1, [sp, #102]	; 0x66
 8010d04:	4349      	muls	r1, r1
 8010d06:	fb02 1202 	mla	r2, r2, r2, r1
            if(sqr >= width_sqr) {
 8010d0a:	4592      	cmp	sl, r2
 8010d0c:	d81d      	bhi.n	8010d4a <lv_draw_line+0x36a>
                if(aa) width--;
 8010d0e:	9b04      	ldr	r3, [sp, #16]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	f000 83aa 	beq.w	801146a <lv_draw_line+0xa8a>
 8010d16:	9b06      	ldr	r3, [sp, #24]
 8010d18:	3b01      	subs	r3, #1
 8010d1a:	b21b      	sxth	r3, r3
 8010d1c:	9306      	str	r3, [sp, #24]
        if(width == 0) width_safe = 1;
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	f040 83a7 	bne.w	8011472 <lv_draw_line+0xa92>
 8010d24:	2301      	movs	r3, #1
 8010d26:	9306      	str	r3, [sp, #24]
        if(main_line->hor && main_line->p1.y >= main_line->p2.y + dir_ori) pattern[0].y--;
 8010d28:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	f000 838b 	beq.w	8011448 <lv_draw_line+0xa68>
 8010d32:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8010d36:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8010d3a:	441f      	add	r7, r3
 8010d3c:	42ba      	cmp	r2, r7
 8010d3e:	db02      	blt.n	8010d46 <lv_draw_line+0x366>
 8010d40:	886b      	ldrh	r3, [r5, #2]
 8010d42:	3b01      	subs	r3, #1
 8010d44:	806b      	strh	r3, [r5, #2]
 8010d46:	2300      	movs	r3, #0
 8010d48:	e388      	b.n	801145c <lv_draw_line+0xa7c>
 8010d4a:	f108 0801 	add.w	r8, r8, #1
            line_next(&pattern_line);
 8010d4e:	a817      	add	r0, sp, #92	; 0x5c
 8010d50:	9303      	str	r3, [sp, #12]
 8010d52:	f7ff fe1c 	bl	801098e <line_next>
        for(i = 0; i < (lv_coord_t)sizeof(pattern); i++) {
 8010d56:	f1b8 0f04 	cmp.w	r8, #4
 8010d5a:	9b03      	ldr	r3, [sp, #12]
 8010d5c:	d1c5      	bne.n	8010cea <lv_draw_line+0x30a>
    if(aa) {
 8010d5e:	f8cd 9018 	str.w	r9, [sp, #24]
 8010d62:	e386      	b.n	8011472 <lv_draw_line+0xa92>
        pattern[i].x -= x_center_ofs;
 8010d64:	9b07      	ldr	r3, [sp, #28]
 8010d66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010d68:	881b      	ldrh	r3, [r3, #0]
 8010d6a:	1a5b      	subs	r3, r3, r1
 8010d6c:	9907      	ldr	r1, [sp, #28]
 8010d6e:	b21b      	sxth	r3, r3
        pattern[i].y -= y_center_ofs;
 8010d70:	f8b1 c002 	ldrh.w	ip, [r1, #2]
        pattern[i].x -= x_center_ofs;
 8010d74:	800b      	strh	r3, [r1, #0]
        pattern[i].y -= y_center_ofs;
 8010d76:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010d78:	ebac 0c01 	sub.w	ip, ip, r1
 8010d7c:	9907      	ldr	r1, [sp, #28]
 8010d7e:	fa0f fc8c 	sxth.w	ip, ip
 8010d82:	f8a1 c002 	strh.w	ip, [r1, #2]
        if(aa) {
 8010d86:	9904      	ldr	r1, [sp, #16]
 8010d88:	2900      	cmp	r1, #0
 8010d8a:	d047      	beq.n	8010e1c <lv_draw_line+0x43c>
            if(i != 0) {
 8010d8c:	9908      	ldr	r1, [sp, #32]
 8010d8e:	2900      	cmp	r1, #0
 8010d90:	d044      	beq.n	8010e1c <lv_draw_line+0x43c>
                if(main_line->hor) {
 8010d92:	2a00      	cmp	r2, #0
 8010d94:	d05a      	beq.n	8010e4c <lv_draw_line+0x46c>
                    if(pattern[i - 1].x != pattern[i].x) {
 8010d96:	9a07      	ldr	r2, [sp, #28]
 8010d98:	f932 2c04 	ldrsh.w	r2, [r2, #-4]
 8010d9c:	429a      	cmp	r2, r3
 8010d9e:	d03d      	beq.n	8010e1c <lv_draw_line+0x43c>
                        lv_coord_t seg_w = pattern[i].y - pattern[aa_last_corner].y;
 8010da0:	eb05 0987 	add.w	r9, r5, r7, lsl #2
 8010da4:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8010da8:	f835 2027 	ldrh.w	r2, [r5, r7, lsl #2]
 8010dac:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
 8010db0:	3801      	subs	r0, #1
 8010db2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8010db6:	ebac 0803 	sub.w	r8, ip, r3
 8010dba:	4410      	add	r0, r2
                        if(main_line->sy < 0) {
 8010dbc:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
                        lv_coord_t seg_w = pattern[i].y - pattern[aa_last_corner].y;
 8010dc0:	fa0f f888 	sxth.w	r8, r8
                        if(main_line->sy < 0) {
 8010dc4:	2a00      	cmp	r2, #0
 8010dc6:	b200      	sxth	r0, r0
 8010dc8:	f1c8 0a00 	rsb	sl, r8, #0
 8010dcc:	fa0f fa8a 	sxth.w	sl, sl
 8010dd0:	da2b      	bge.n	8010e2a <lv_draw_line+0x44a>
                            lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 8010dd2:	3101      	adds	r1, #1
 8010dd4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8010dd6:	f8cd b004 	str.w	fp, [sp, #4]
 8010dda:	4642      	mov	r2, r8
 8010ddc:	4461      	add	r1, ip
 8010dde:	f8ad 3000 	strh.w	r3, [sp]
 8010de2:	4633      	mov	r3, r6
 8010de4:	b209      	sxth	r1, r1
 8010de6:	f7ff fd15 	bl	8010814 <lv_draw_aa_ver_seg>
                            lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 8010dea:	f8bd 1046 	ldrh.w	r1, [sp, #70]	; 0x46
 8010dee:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8010df2:	3101      	adds	r1, #1
 8010df4:	4419      	add	r1, r3
 8010df6:	4441      	add	r1, r8
                            lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 8010df8:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
 8010dfc:	4652      	mov	r2, sl
 8010dfe:	f835 3027 	ldrh.w	r3, [r5, r7, lsl #2]
 8010e02:	b209      	sxth	r1, r1
 8010e04:	3001      	adds	r0, #1
 8010e06:	f8cd b004 	str.w	fp, [sp, #4]
 8010e0a:	4418      	add	r0, r3
 8010e0c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8010e0e:	b200      	sxth	r0, r0
 8010e10:	f8ad 3000 	strh.w	r3, [sp]
 8010e14:	4633      	mov	r3, r6
 8010e16:	f7ff fcfd 	bl	8010814 <lv_draw_aa_ver_seg>
                            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
 8010e1a:	9f08      	ldr	r7, [sp, #32]
 8010e1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e1e:	3301      	adds	r3, #1
 8010e20:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e22:	9b07      	ldr	r3, [sp, #28]
 8010e24:	3304      	adds	r3, #4
 8010e26:	9307      	str	r3, [sp, #28]
 8010e28:	e33c      	b.n	80114a4 <lv_draw_line+0xac4>
                            lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 8010e2a:	4419      	add	r1, r3
 8010e2c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8010e2e:	f8cd b004 	str.w	fp, [sp, #4]
 8010e32:	4642      	mov	r2, r8
 8010e34:	f8ad 3000 	strh.w	r3, [sp]
 8010e38:	b209      	sxth	r1, r1
 8010e3a:	4633      	mov	r3, r6
 8010e3c:	f7ff fcea 	bl	8010814 <lv_draw_aa_ver_seg>
                            lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 8010e40:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 8010e44:	f8b9 1002 	ldrh.w	r1, [r9, #2]
 8010e48:	4419      	add	r1, r3
 8010e4a:	e7d5      	b.n	8010df8 <lv_draw_line+0x418>
                    if(pattern[i - 1].y != pattern[i].y) {
 8010e4c:	9a07      	ldr	r2, [sp, #28]
 8010e4e:	f932 2c02 	ldrsh.w	r2, [r2, #-2]
 8010e52:	4562      	cmp	r2, ip
 8010e54:	d0e2      	beq.n	8010e1c <lv_draw_line+0x43c>
                        lv_coord_t seg_w = pattern[i].x - pattern[aa_last_corner].x;
 8010e56:	eb05 0a87 	add.w	sl, r5, r7, lsl #2
 8010e5a:	f935 2027 	ldrsh.w	r2, [r5, r7, lsl #2]
 8010e5e:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 8010e62:	f8ba c002 	ldrh.w	ip, [sl, #2]
 8010e66:	eba3 0802 	sub.w	r8, r3, r2
 8010e6a:	3901      	subs	r1, #1
 8010e6c:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 8010e70:	fa0f f888 	sxth.w	r8, r8
                        if(main_line->sx < 0) {
 8010e74:	4461      	add	r1, ip
 8010e76:	f9bd c04e 	ldrsh.w	ip, [sp, #78]	; 0x4e
 8010e7a:	f1c8 0900 	rsb	r9, r8, #0
 8010e7e:	f1bc 0f00 	cmp.w	ip, #0
 8010e82:	b209      	sxth	r1, r1
 8010e84:	fa0f f989 	sxth.w	r9, r9
 8010e88:	da24      	bge.n	8010ed4 <lv_draw_line+0x4f4>
                            lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w + 1,
 8010e8a:	3001      	adds	r0, #1
 8010e8c:	f8cd b004 	str.w	fp, [sp, #4]
 8010e90:	4642      	mov	r2, r8
 8010e92:	4418      	add	r0, r3
 8010e94:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8010e96:	b200      	sxth	r0, r0
 8010e98:	f8ad 3000 	strh.w	r3, [sp]
 8010e9c:	4633      	mov	r3, r6
 8010e9e:	f7ff fce3 	bl	8010868 <lv_draw_aa_hor_seg>
                            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w + 1,
 8010ea2:	f8bd 1046 	ldrh.w	r1, [sp, #70]	; 0x46
 8010ea6:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8010eaa:	3101      	adds	r1, #1
 8010eac:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
 8010eb0:	4419      	add	r1, r3
 8010eb2:	3001      	adds	r0, #1
 8010eb4:	f835 3027 	ldrh.w	r3, [r5, r7, lsl #2]
 8010eb8:	4418      	add	r0, r3
 8010eba:	4440      	add	r0, r8
                            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
 8010ebc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8010ebe:	464a      	mov	r2, r9
 8010ec0:	f8cd b004 	str.w	fp, [sp, #4]
 8010ec4:	b209      	sxth	r1, r1
 8010ec6:	f8ad 3000 	strh.w	r3, [sp]
 8010eca:	b200      	sxth	r0, r0
 8010ecc:	4633      	mov	r3, r6
 8010ece:	f7ff fccb 	bl	8010868 <lv_draw_aa_hor_seg>
 8010ed2:	e7a2      	b.n	8010e1a <lv_draw_line+0x43a>
                            lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x,
 8010ed4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8010ed6:	4410      	add	r0, r2
 8010ed8:	f8cd b004 	str.w	fp, [sp, #4]
 8010edc:	4642      	mov	r2, r8
 8010ede:	f8ad 3000 	strh.w	r3, [sp]
 8010ee2:	b200      	sxth	r0, r0
 8010ee4:	4633      	mov	r3, r6
 8010ee6:	f7ff fcbf 	bl	8010868 <lv_draw_aa_hor_seg>
                            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
 8010eea:	f8bd 1046 	ldrh.w	r1, [sp, #70]	; 0x46
 8010eee:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8010ef2:	3101      	adds	r1, #1
 8010ef4:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
 8010ef8:	4419      	add	r1, r3
 8010efa:	f835 3027 	ldrh.w	r3, [r5, r7, lsl #2]
 8010efe:	4418      	add	r0, r3
 8010f00:	e7dc      	b.n	8010ebc <lv_draw_line+0x4dc>
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 8010f02:	4419      	add	r1, r3
 8010f04:	f8cd b004 	str.w	fp, [sp, #4]
 8010f08:	4633      	mov	r3, r6
 8010f0a:	f8ad e000 	strh.w	lr, [sp]
 8010f0e:	b209      	sxth	r1, r1
 8010f10:	f7ff fc80 	bl	8010814 <lv_draw_aa_ver_seg>
                                   main_line->p2.y + pattern[aa_last_corner].y, -(seg_w + main_line->sy), mask,
 8010f14:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 8010f18:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
                                   main_line->p2.y + pattern[aa_last_corner].y, -(seg_w + main_line->sy), mask,
 8010f1c:	443a      	add	r2, r7
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 8010f1e:	f8b9 1002 	ldrh.w	r1, [r9, #2]
 8010f22:	4252      	negs	r2, r2
 8010f24:	4419      	add	r1, r3
 8010f26:	e30c      	b.n	8011542 <lv_draw_line+0xb62>
            lv_coord_t seg_w = pattern[width_safe - 1].x - pattern[aa_last_corner].x;
 8010f28:	9a07      	ldr	r2, [sp, #28]
 8010f2a:	3b01      	subs	r3, #1
            if(main_line->sx < 0) {
 8010f2c:	f9bd a04e 	ldrsh.w	sl, [sp, #78]	; 0x4e
            lv_coord_t seg_w = pattern[width_safe - 1].x - pattern[aa_last_corner].x;
 8010f30:	f935 c022 	ldrsh.w	ip, [r5, r2, lsl #2]
 8010f34:	4419      	add	r1, r3
            if(main_line->sx < 0) {
 8010f36:	f1ba 0f00 	cmp.w	sl, #0
 8010f3a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
            lv_coord_t seg_w = pattern[width_safe - 1].x - pattern[aa_last_corner].x;
 8010f3c:	ebac 070e 	sub.w	r7, ip, lr
 8010f40:	b209      	sxth	r1, r1
 8010f42:	b23f      	sxth	r7, r7
            if(main_line->sx < 0) {
 8010f44:	eb07 020a 	add.w	r2, r7, sl
 8010f48:	b212      	sxth	r2, r2
 8010f4a:	da24      	bge.n	8010f96 <lv_draw_line+0x5b6>
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w,
 8010f4c:	4460      	add	r0, ip
 8010f4e:	f8ad 3000 	strh.w	r3, [sp]
 8010f52:	f8cd b004 	str.w	fp, [sp, #4]
 8010f56:	4633      	mov	r3, r6
 8010f58:	b200      	sxth	r0, r0
 8010f5a:	f7ff fc85 	bl	8010868 <lv_draw_aa_hor_seg>
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w,
 8010f5e:	f8bd 1046 	ldrh.w	r1, [sp, #70]	; 0x46
 8010f62:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8010f66:	3101      	adds	r1, #1
                                   main_line->p2.y + pattern[aa_last_corner].y + 1, -(seg_w + main_line->sx), mask,
 8010f68:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w,
 8010f6c:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
 8010f70:	4419      	add	r1, r3
 8010f72:	f835 3008 	ldrh.w	r3, [r5, r8]
                                   main_line->p2.y + pattern[aa_last_corner].y + 1, -(seg_w + main_line->sx), mask,
 8010f76:	443a      	add	r2, r7
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w,
 8010f78:	4418      	add	r0, r3
 8010f7a:	4252      	negs	r2, r2
 8010f7c:	4438      	add	r0, r7
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
 8010f7e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8010f80:	b212      	sxth	r2, r2
 8010f82:	f8cd b004 	str.w	fp, [sp, #4]
 8010f86:	b209      	sxth	r1, r1
 8010f88:	f8ad 3000 	strh.w	r3, [sp]
 8010f8c:	b200      	sxth	r0, r0
 8010f8e:	4633      	mov	r3, r6
 8010f90:	f7ff fc6a 	bl	8010868 <lv_draw_aa_hor_seg>
 8010f94:	e2e6      	b.n	8011564 <lv_draw_line+0xb84>
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x,
 8010f96:	4470      	add	r0, lr
 8010f98:	f8ad 3000 	strh.w	r3, [sp]
 8010f9c:	f8cd b004 	str.w	fp, [sp, #4]
 8010fa0:	4633      	mov	r3, r6
 8010fa2:	b200      	sxth	r0, r0
 8010fa4:	f7ff fc60 	bl	8010868 <lv_draw_aa_hor_seg>
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
 8010fa8:	f8bd 1046 	ldrh.w	r1, [sp, #70]	; 0x46
 8010fac:	f8b9 3002 	ldrh.w	r3, [r9, #2]
                                   main_line->p2.y + pattern[aa_last_corner].y + 1, -(seg_w + main_line->sx), mask,
 8010fb0:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
 8010fb4:	3101      	adds	r1, #1
 8010fb6:	f835 0008 	ldrh.w	r0, [r5, r8]
                                   main_line->p2.y + pattern[aa_last_corner].y + 1, -(seg_w + main_line->sx), mask,
 8010fba:	443a      	add	r2, r7
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
 8010fbc:	4419      	add	r1, r3
 8010fbe:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8010fc2:	4252      	negs	r2, r2
 8010fc4:	4418      	add	r0, r3
 8010fc6:	e7da      	b.n	8010f7e <lv_draw_line+0x59e>
    if(aa) {
 8010fc8:	9b04      	ldr	r3, [sp, #16]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	f040 82ca 	bne.w	8011564 <lv_draw_line+0xb84>
    lv_coord_t aa_shift2 = 0;
 8010fd0:	f8dd a010 	ldr.w	sl, [sp, #16]
    lv_coord_t aa_shift1 = 0;
 8010fd4:	46d1      	mov	r9, sl
 8010fd6:	e2da      	b.n	801158e <lv_draw_line+0xbae>
            if(main_line->sy < 0) {
 8010fd8:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
 8010fdc:	e2cd      	b.n	801157a <lv_draw_line+0xb9a>
                draw_area.x1 = prev_p.x + pattern[i].x;
 8010fde:	8839      	ldrh	r1, [r7, #0]
                draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x - 1;
 8010fe0:	3a01      	subs	r2, #1
                draw_area.x1 = prev_p.x + pattern[i].x;
 8010fe2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8010fe6:	fa01 f383 	sxtah	r3, r1, r3
                draw_area.y1 = prev_p.y + pattern[i].y;
 8010fea:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
                draw_area.x1 = prev_p.x + pattern[i].x;
 8010fee:	b21b      	sxth	r3, r3
 8010ff0:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                draw_area.y1 = prev_p.y + pattern[i].y;
 8010ff4:	8878      	ldrh	r0, [r7, #2]
 8010ff6:	fa00 f181 	sxtah	r1, r0, r1
                draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x - 1;
 8010ffa:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8010ffe:	b200      	sxth	r0, r0
                draw_area.y1 = prev_p.y + pattern[i].y;
 8011000:	b209      	sxth	r1, r1
                draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x - 1;
 8011002:	1a12      	subs	r2, r2, r0
                lv_draw_fill(&draw_area, mask, style->line.color, opa);
 8011004:	a817      	add	r0, sp, #92	; 0x5c
                draw_area.y1 = prev_p.y + pattern[i].y;
 8011006:	f8ad 105e 	strh.w	r1, [sp, #94]	; 0x5e
                draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x - 1;
 801100a:	4413      	add	r3, r2
                draw_area.y2 = draw_area.y1;
 801100c:	f8ad 1062 	strh.w	r1, [sp, #98]	; 0x62
                lv_draw_fill(&draw_area, mask, style->line.color, opa);
 8011010:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8011012:	4631      	mov	r1, r6
                draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x - 1;
 8011014:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                lv_draw_fill(&draw_area, mask, style->line.color, opa);
 8011018:	465b      	mov	r3, fp
 801101a:	f002 fa6d 	bl	80134f8 <lv_draw_fill>
                if(i != 0 && pattern[i].x != pattern[i - 1].x && !first_run) {
 801101e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011020:	b1b3      	cbz	r3, 8011050 <lv_draw_line+0x670>
 8011022:	f9b7 2000 	ldrsh.w	r2, [r7]
 8011026:	f937 3c04 	ldrsh.w	r3, [r7, #-4]
 801102a:	429a      	cmp	r2, r3
 801102c:	d010      	beq.n	8011050 <lv_draw_line+0x670>
 801102e:	f1b8 0f00 	cmp.w	r8, #0
 8011032:	d10d      	bne.n	8011050 <lv_draw_line+0x670>
                    lv_draw_px(draw_area.x1, draw_area.y1 - main_line->sy, mask, style->line.color, opa);
 8011034:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 8011038:	4632      	mov	r2, r6
 801103a:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
 801103e:	f8cd b000 	str.w	fp, [sp]
 8011042:	1ac9      	subs	r1, r1, r3
 8011044:	f9bd 005c 	ldrsh.w	r0, [sp, #92]	; 0x5c
 8011048:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801104a:	b209      	sxth	r1, r1
 801104c:	f002 fa04 	bl	8013458 <lv_draw_px>
 8011050:	9b08      	ldr	r3, [sp, #32]
 8011052:	3704      	adds	r7, #4
 8011054:	3301      	adds	r3, #1
 8011056:	9308      	str	r3, [sp, #32]
 8011058:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
            for(i = 0; i < width; i++) {
 801105c:	9903      	ldr	r1, [sp, #12]
 801105e:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 8011062:	428b      	cmp	r3, r1
 8011064:	9309      	str	r3, [sp, #36]	; 0x24
 8011066:	dbba      	blt.n	8010fde <lv_draw_line+0x5fe>
            if(aa) {
 8011068:	9b04      	ldr	r3, [sp, #16]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d036      	beq.n	80110dc <lv_draw_line+0x6fc>
                lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 801106e:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8011072:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
                                   -(main_line->p_act.x - prev_p.x), mask, style->line.color, opa);
 8011076:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
                lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 801107a:	1a9a      	subs	r2, r3, r2
 801107c:	886b      	ldrh	r3, [r5, #2]
 801107e:	fa03 f181 	sxtah	r1, r3, r1
 8011082:	882b      	ldrh	r3, [r5, #0]
 8011084:	b212      	sxth	r2, r2
 8011086:	f8cd b004 	str.w	fp, [sp, #4]
 801108a:	fa03 f080 	sxtah	r0, r3, r0
 801108e:	eba1 0109 	sub.w	r1, r1, r9
 8011092:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8011094:	b209      	sxth	r1, r1
 8011096:	f8ad 3000 	strh.w	r3, [sp]
 801109a:	b200      	sxth	r0, r0
 801109c:	4633      	mov	r3, r6
 801109e:	f7ff fbe3 	bl	8010868 <lv_draw_aa_hor_seg>
                lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x,
 80110a2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80110a6:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
                                   prev_p.y + pattern[width_safe - 1].y + aa_shift2, main_line->p_act.x - prev_p.x,
 80110aa:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
 80110ae:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
                lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x,
 80110b2:	1a82      	subs	r2, r0, r2
                                   prev_p.y + pattern[width_safe - 1].y + aa_shift2, main_line->p_act.x - prev_p.x,
 80110b4:	9806      	ldr	r0, [sp, #24]
 80110b6:	8840      	ldrh	r0, [r0, #2]
                lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x,
 80110b8:	b212      	sxth	r2, r2
                                   prev_p.y + pattern[width_safe - 1].y + aa_shift2, main_line->p_act.x - prev_p.x,
 80110ba:	fa00 f181 	sxtah	r1, r0, r1
                lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x,
 80110be:	9806      	ldr	r0, [sp, #24]
 80110c0:	8800      	ldrh	r0, [r0, #0]
 80110c2:	4451      	add	r1, sl
 80110c4:	f8cd b004 	str.w	fp, [sp, #4]
 80110c8:	fa00 f083 	sxtah	r0, r0, r3
 80110cc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80110ce:	b209      	sxth	r1, r1
 80110d0:	f8ad 3000 	strh.w	r3, [sp]
 80110d4:	b200      	sxth	r0, r0
 80110d6:	4633      	mov	r3, r6
 80110d8:	f7ff fbc6 	bl	8010868 <lv_draw_aa_hor_seg>
            prev_p.x = main_line->p_act.x;
 80110dc:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
            first_run = false;
 80110e0:	f04f 0800 	mov.w	r8, #0
            prev_p.x = main_line->p_act.x;
 80110e4:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
            prev_p.y = main_line->p_act.y;
 80110e8:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 80110ec:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 * @param line
 * @return
 */
static bool line_next_y(line_draw_t * line)
{
    lv_coord_t last_y = line->p_act.y;
 80110f0:	f9bd 704a 	ldrsh.w	r7, [sp, #74]	; 0x4a

    do {
        if(!line_next(line)) return false;
 80110f4:	a810      	add	r0, sp, #64	; 0x40
 80110f6:	f7ff fc4a 	bl	801098e <line_next>
 80110fa:	2800      	cmp	r0, #0
 80110fc:	f000 8090 	beq.w	8011220 <lv_draw_line+0x840>
    } while(last_y == line->p_act.y);
 8011100:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 8011104:	42bb      	cmp	r3, r7
 8011106:	d0f5      	beq.n	80110f4 <lv_draw_line+0x714>
 8011108:	2300      	movs	r3, #0
 801110a:	462f      	mov	r7, r5
 801110c:	9308      	str	r3, [sp, #32]
 801110e:	e7a3      	b.n	8011058 <lv_draw_line+0x678>
            draw_area.x1 = prev_p.x + pattern[i].x;
 8011110:	9a05      	ldr	r2, [sp, #20]
 8011112:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8011116:	8812      	ldrh	r2, [r2, #0]
            draw_area.y1 = prev_p.y + pattern[i].y;
 8011118:	9905      	ldr	r1, [sp, #20]
            draw_area.x1 = prev_p.x + pattern[i].x;
 801111a:	fa02 f383 	sxtah	r3, r2, r3
            draw_area.y1 = prev_p.y + pattern[i].y;
 801111e:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
            draw_area.x1 = prev_p.x + pattern[i].x;
 8011122:	b21b      	sxth	r3, r3
 8011124:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            draw_area.y1 = prev_p.y + pattern[i].y;
 8011128:	8849      	ldrh	r1, [r1, #2]
 801112a:	fa01 f282 	sxtah	r2, r1, r2
            draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x;
 801112e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8011132:	b208      	sxth	r0, r1
 8011134:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
            draw_area.y1 = prev_p.y + pattern[i].y;
 8011138:	b212      	sxth	r2, r2
            draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x;
 801113a:	1a09      	subs	r1, r1, r0
            lv_draw_fill(&draw_area, mask, style->line.color, opa);
 801113c:	a817      	add	r0, sp, #92	; 0x5c
            draw_area.y1 = prev_p.y + pattern[i].y;
 801113e:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
            draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x;
 8011142:	440b      	add	r3, r1
            draw_area.y2 = draw_area.y1;
 8011144:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
            lv_draw_fill(&draw_area, mask, style->line.color, opa);
 8011148:	4631      	mov	r1, r6
 801114a:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
            draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x;
 801114c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
            lv_draw_fill(&draw_area, mask, style->line.color, opa);
 8011150:	465b      	mov	r3, fp
 8011152:	f002 f9d1 	bl	80134f8 <lv_draw_fill>
            if(i != 0 && pattern[i].x != pattern[i - 1].x && !first_run) {
 8011156:	9b08      	ldr	r3, [sp, #32]
 8011158:	b1bb      	cbz	r3, 801118a <lv_draw_line+0x7aa>
 801115a:	9b05      	ldr	r3, [sp, #20]
 801115c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011160:	f933 3c04 	ldrsh.w	r3, [r3, #-4]
 8011164:	429a      	cmp	r2, r3
 8011166:	d010      	beq.n	801118a <lv_draw_line+0x7aa>
 8011168:	f1b8 0f00 	cmp.w	r8, #0
 801116c:	d10d      	bne.n	801118a <lv_draw_line+0x7aa>
                lv_draw_px(draw_area.x1, draw_area.y1 - main_line->sy, mask, style->line.color, opa);
 801116e:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 8011172:	4632      	mov	r2, r6
 8011174:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
 8011178:	f8cd b000 	str.w	fp, [sp]
 801117c:	1ac9      	subs	r1, r1, r3
 801117e:	f9bd 005c 	ldrsh.w	r0, [sp, #92]	; 0x5c
 8011182:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8011184:	b209      	sxth	r1, r1
 8011186:	f002 f967 	bl	8013458 <lv_draw_px>
 801118a:	9b05      	ldr	r3, [sp, #20]
 801118c:	3701      	adds	r7, #1
 801118e:	3304      	adds	r3, #4
 8011190:	9305      	str	r3, [sp, #20]
 8011192:	b23b      	sxth	r3, r7
        for(i = 0; i < width; i++) {
 8011194:	9a03      	ldr	r2, [sp, #12]
 8011196:	4293      	cmp	r3, r2
 8011198:	9308      	str	r3, [sp, #32]
 801119a:	dbb9      	blt.n	8011110 <lv_draw_line+0x730>
        if(aa) {
 801119c:	9b04      	ldr	r3, [sp, #16]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	f43f acba 	beq.w	8010b18 <lv_draw_line+0x138>
            lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 80111a4:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 80111a8:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
                               -(main_line->p_act.x - prev_p.x + 1), mask, style->line.color, opa);
 80111ac:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80111b0:	b213      	sxth	r3, r2
 80111b2:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 80111b6:	1ad2      	subs	r2, r2, r3
            lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
 80111b8:	886b      	ldrh	r3, [r5, #2]
 80111ba:	fa03 f181 	sxtah	r1, r3, r1
 80111be:	882b      	ldrh	r3, [r5, #0]
 80111c0:	43d2      	mvns	r2, r2
 80111c2:	f8cd b004 	str.w	fp, [sp, #4]
 80111c6:	eba1 0109 	sub.w	r1, r1, r9
 80111ca:	fa03 f080 	sxtah	r0, r3, r0
 80111ce:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80111d0:	b212      	sxth	r2, r2
 80111d2:	b209      	sxth	r1, r1
 80111d4:	f8ad 3000 	strh.w	r3, [sp]
 80111d8:	b200      	sxth	r0, r0
 80111da:	4633      	mov	r3, r6
 80111dc:	f7ff fb44 	bl	8010868 <lv_draw_aa_hor_seg>
            lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 80111e0:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 80111e4:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 80111e8:	3201      	adds	r2, #1
 80111ea:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
                               main_line->p_act.x - prev_p.x + 1, mask, style->line.color, opa);
 80111ee:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
            lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
 80111f2:	1ad2      	subs	r2, r2, r3
 80111f4:	9b06      	ldr	r3, [sp, #24]
 80111f6:	885b      	ldrh	r3, [r3, #2]
 80111f8:	b212      	sxth	r2, r2
 80111fa:	fa03 f181 	sxtah	r1, r3, r1
 80111fe:	9b07      	ldr	r3, [sp, #28]
 8011200:	f835 3023 	ldrh.w	r3, [r5, r3, lsl #2]
 8011204:	4451      	add	r1, sl
 8011206:	f8cd b004 	str.w	fp, [sp, #4]
 801120a:	fa03 f080 	sxtah	r0, r3, r0
 801120e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8011210:	b209      	sxth	r1, r1
 8011212:	f8ad 3000 	strh.w	r3, [sp]
 8011216:	b200      	sxth	r0, r0
 8011218:	4633      	mov	r3, r6
 801121a:	f7ff fb25 	bl	8010868 <lv_draw_aa_hor_seg>
 801121e:	e47b      	b.n	8010b18 <lv_draw_line+0x138>
        if(!line_next(line)) return false;
 8011220:	4607      	mov	r7, r0
 8011222:	e7b6      	b.n	8011192 <lv_draw_line+0x7b2>
                draw_area.x1 = prev_p.x + pattern[i].x;
 8011224:	883b      	ldrh	r3, [r7, #0]
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
 8011226:	3a01      	subs	r2, #1
                draw_area.x1 = prev_p.x + pattern[i].x;
 8011228:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801122c:	fa03 f181 	sxtah	r1, r3, r1
                draw_area.y1 = prev_p.y + pattern[i].y;
 8011230:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
                draw_area.x1 = prev_p.x + pattern[i].x;
 8011234:	b209      	sxth	r1, r1
 8011236:	f8ad 105c 	strh.w	r1, [sp, #92]	; 0x5c
                draw_area.y1 = prev_p.y + pattern[i].y;
 801123a:	8878      	ldrh	r0, [r7, #2]
                draw_area.x2 = draw_area.x1;
 801123c:	f8ad 1060 	strh.w	r1, [sp, #96]	; 0x60
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
 8011240:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
                draw_area.y1 = prev_p.y + pattern[i].y;
 8011244:	fa00 f383 	sxtah	r3, r0, r3
                lv_draw_fill(&draw_area, mask, style->line.color, opa);
 8011248:	a817      	add	r0, sp, #92	; 0x5c
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
 801124a:	b209      	sxth	r1, r1
                draw_area.y1 = prev_p.y + pattern[i].y;
 801124c:	b21b      	sxth	r3, r3
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
 801124e:	1a52      	subs	r2, r2, r1
                lv_draw_fill(&draw_area, mask, style->line.color, opa);
 8011250:	4631      	mov	r1, r6
                draw_area.y1 = prev_p.y + pattern[i].y;
 8011252:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
 8011256:	4413      	add	r3, r2
                lv_draw_fill(&draw_area, mask, style->line.color, opa);
 8011258:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
 801125a:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
                lv_draw_fill(&draw_area, mask, style->line.color, opa);
 801125e:	465b      	mov	r3, fp
 8011260:	f002 f94a 	bl	80134f8 <lv_draw_fill>
                if(i != 0 && pattern[i].y != pattern[i - 1].y && !first_run) {
 8011264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011266:	b1ab      	cbz	r3, 8011294 <lv_draw_line+0x8b4>
 8011268:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801126c:	f937 3c02 	ldrsh.w	r3, [r7, #-2]
 8011270:	429a      	cmp	r2, r3
 8011272:	d00f      	beq.n	8011294 <lv_draw_line+0x8b4>
 8011274:	9b08      	ldr	r3, [sp, #32]
 8011276:	b96b      	cbnz	r3, 8011294 <lv_draw_line+0x8b4>
                    lv_draw_px(draw_area.x1 - main_line->sx, draw_area.y1, mask, style->line.color, opa);
 8011278:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801127c:	4632      	mov	r2, r6
 801127e:	f8bd 005c 	ldrh.w	r0, [sp, #92]	; 0x5c
 8011282:	f8cd b000 	str.w	fp, [sp]
 8011286:	1ac0      	subs	r0, r0, r3
 8011288:	f9bd 105e 	ldrsh.w	r1, [sp, #94]	; 0x5e
 801128c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801128e:	b200      	sxth	r0, r0
 8011290:	f002 f8e2 	bl	8013458 <lv_draw_px>
 8011294:	f108 0801 	add.w	r8, r8, #1
 8011298:	3704      	adds	r7, #4
 801129a:	fa0f f388 	sxth.w	r3, r8
            for(i = 0; i < width; i++) {
 801129e:	9903      	ldr	r1, [sp, #12]
 80112a0:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	; 0x4a
 80112a4:	428b      	cmp	r3, r1
 80112a6:	9309      	str	r3, [sp, #36]	; 0x24
 80112a8:	dbbc      	blt.n	8011224 <lv_draw_line+0x844>
            if(aa) {
 80112aa:	9b04      	ldr	r3, [sp, #16]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d036      	beq.n	801131e <lv_draw_line+0x93e>
                lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 80112b0:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 80112b4:	f8bd 703e 	ldrh.w	r7, [sp, #62]	; 0x3e
                                   -(main_line->p_act.y - prev_p.y), mask, style->line.color, opa);
 80112b8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
                lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 80112bc:	8869      	ldrh	r1, [r5, #2]
 80112be:	1a9a      	subs	r2, r3, r2
 80112c0:	882b      	ldrh	r3, [r5, #0]
 80112c2:	fa01 f187 	sxtah	r1, r1, r7
 80112c6:	f8cd b004 	str.w	fp, [sp, #4]
 80112ca:	fa03 f080 	sxtah	r0, r3, r0
 80112ce:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80112d0:	b212      	sxth	r2, r2
 80112d2:	eba0 0009 	sub.w	r0, r0, r9
 80112d6:	f8ad 3000 	strh.w	r3, [sp]
 80112da:	b209      	sxth	r1, r1
 80112dc:	4633      	mov	r3, r6
 80112de:	b200      	sxth	r0, r0
 80112e0:	f7ff fa98 	bl	8010814 <lv_draw_aa_ver_seg>
                lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2,
 80112e4:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 80112e8:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
                                   prev_p.y + pattern[width_safe - 1].y, main_line->p_act.y - prev_p.y, mask,
 80112ec:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80112f0:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
                lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2,
 80112f4:	1a8a      	subs	r2, r1, r2
 80112f6:	9906      	ldr	r1, [sp, #24]
 80112f8:	8849      	ldrh	r1, [r1, #2]
 80112fa:	b212      	sxth	r2, r2
 80112fc:	fa01 f183 	sxtah	r1, r1, r3
 8011300:	9b06      	ldr	r3, [sp, #24]
 8011302:	881b      	ldrh	r3, [r3, #0]
 8011304:	b209      	sxth	r1, r1
 8011306:	f8cd b004 	str.w	fp, [sp, #4]
 801130a:	fa03 f080 	sxtah	r0, r3, r0
 801130e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8011310:	4450      	add	r0, sl
 8011312:	f8ad 3000 	strh.w	r3, [sp]
 8011316:	4633      	mov	r3, r6
 8011318:	b200      	sxth	r0, r0
 801131a:	f7ff fa7b 	bl	8010814 <lv_draw_aa_ver_seg>
            prev_p.x = main_line->p_act.x;
 801131e:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 8011322:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
            prev_p.y = main_line->p_act.y;
 8011326:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 801132a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            first_run = false;
 801132e:	2300      	movs	r3, #0
 8011330:	e13c      	b.n	80115ac <lv_draw_line+0xbcc>
            draw_area.x1 = prev_p.x + pattern[i].x;
 8011332:	9b05      	ldr	r3, [sp, #20]
            lv_draw_fill(&draw_area, mask, style->line.color, opa);
 8011334:	a817      	add	r0, sp, #92	; 0x5c
            draw_area.x1 = prev_p.x + pattern[i].x;
 8011336:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801133a:	881b      	ldrh	r3, [r3, #0]
            draw_area.y1 = prev_p.y + pattern[i].y;
 801133c:	9905      	ldr	r1, [sp, #20]
            draw_area.x1 = prev_p.x + pattern[i].x;
 801133e:	fa03 f282 	sxtah	r2, r3, r2
            draw_area.y1 = prev_p.y + pattern[i].y;
 8011342:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
            draw_area.x1 = prev_p.x + pattern[i].x;
 8011346:	b212      	sxth	r2, r2
 8011348:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
            draw_area.y1 = prev_p.y + pattern[i].y;
 801134c:	8849      	ldrh	r1, [r1, #2]
            draw_area.x2 = draw_area.x1;
 801134e:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y;
 8011352:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
            draw_area.y1 = prev_p.y + pattern[i].y;
 8011356:	fa01 f383 	sxtah	r3, r1, r3
            draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y;
 801135a:	b211      	sxth	r1, r2
 801135c:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
            draw_area.y1 = prev_p.y + pattern[i].y;
 8011360:	b21b      	sxth	r3, r3
            draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y;
 8011362:	1a52      	subs	r2, r2, r1
            lv_draw_fill(&draw_area, mask, style->line.color, opa);
 8011364:	4631      	mov	r1, r6
            draw_area.y1 = prev_p.y + pattern[i].y;
 8011366:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
            draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y;
 801136a:	4413      	add	r3, r2
            lv_draw_fill(&draw_area, mask, style->line.color, opa);
 801136c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
            draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y;
 801136e:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_fill(&draw_area, mask, style->line.color, opa);
 8011372:	465b      	mov	r3, fp
 8011374:	f002 f8c0 	bl	80134f8 <lv_draw_fill>
            if(i != 0 && pattern[i].y != pattern[i - 1].y && !first_run) {
 8011378:	f1b8 0f00 	cmp.w	r8, #0
 801137c:	d016      	beq.n	80113ac <lv_draw_line+0x9cc>
 801137e:	9b05      	ldr	r3, [sp, #20]
 8011380:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011384:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 8011388:	429a      	cmp	r2, r3
 801138a:	d00f      	beq.n	80113ac <lv_draw_line+0x9cc>
 801138c:	9b08      	ldr	r3, [sp, #32]
 801138e:	b96b      	cbnz	r3, 80113ac <lv_draw_line+0x9cc>
                lv_draw_px(draw_area.x1 - main_line->sx, draw_area.y1, mask, style->line.color, opa);
 8011390:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8011394:	4632      	mov	r2, r6
 8011396:	f8bd 005c 	ldrh.w	r0, [sp, #92]	; 0x5c
 801139a:	f8cd b000 	str.w	fp, [sp]
 801139e:	1ac0      	subs	r0, r0, r3
 80113a0:	f9bd 105e 	ldrsh.w	r1, [sp, #94]	; 0x5e
 80113a4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80113a6:	b200      	sxth	r0, r0
 80113a8:	f002 f856 	bl	8013458 <lv_draw_px>
 80113ac:	9b05      	ldr	r3, [sp, #20]
 80113ae:	3701      	adds	r7, #1
 80113b0:	3304      	adds	r3, #4
 80113b2:	9305      	str	r3, [sp, #20]
 80113b4:	fa0f f887 	sxth.w	r8, r7
        for(i = 0; i < width; i++) {
 80113b8:	9b03      	ldr	r3, [sp, #12]
 80113ba:	4598      	cmp	r8, r3
 80113bc:	dbb9      	blt.n	8011332 <lv_draw_line+0x952>
        if(aa) {
 80113be:	9b04      	ldr	r3, [sp, #16]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	f43f aba9 	beq.w	8010b18 <lv_draw_line+0x138>
            lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 80113c6:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 80113ca:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
                               -(main_line->p_act.y - prev_p.y + 1), mask, style->line.color, opa);
 80113ce:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 80113d2:	b213      	sxth	r3, r2
 80113d4:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 80113d8:	1ad2      	subs	r2, r2, r3
            lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
 80113da:	886b      	ldrh	r3, [r5, #2]
 80113dc:	fa03 f181 	sxtah	r1, r3, r1
 80113e0:	882b      	ldrh	r3, [r5, #0]
 80113e2:	43d2      	mvns	r2, r2
 80113e4:	f8cd b004 	str.w	fp, [sp, #4]
 80113e8:	fa03 f080 	sxtah	r0, r3, r0
 80113ec:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80113ee:	b212      	sxth	r2, r2
 80113f0:	eba0 0009 	sub.w	r0, r0, r9
 80113f4:	f8ad 3000 	strh.w	r3, [sp]
 80113f8:	b209      	sxth	r1, r1
 80113fa:	4633      	mov	r3, r6
 80113fc:	b200      	sxth	r0, r0
 80113fe:	f7ff fa09 	bl	8010814 <lv_draw_aa_ver_seg>
            lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 8011402:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 8011406:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 801140a:	3201      	adds	r2, #1
 801140c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
                               main_line->p_act.y - prev_p.y + 1, mask, style->line.color, opa);
 8011410:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
            lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
 8011414:	1a52      	subs	r2, r2, r1
 8011416:	9906      	ldr	r1, [sp, #24]
 8011418:	8849      	ldrh	r1, [r1, #2]
 801141a:	b212      	sxth	r2, r2
 801141c:	fa01 f183 	sxtah	r1, r1, r3
 8011420:	9b07      	ldr	r3, [sp, #28]
 8011422:	f835 3023 	ldrh.w	r3, [r5, r3, lsl #2]
 8011426:	b209      	sxth	r1, r1
 8011428:	f8cd b004 	str.w	fp, [sp, #4]
 801142c:	fa03 f080 	sxtah	r0, r3, r0
 8011430:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8011432:	4450      	add	r0, sl
 8011434:	f8ad 3000 	strh.w	r3, [sp]
 8011438:	4633      	mov	r3, r6
 801143a:	b200      	sxth	r0, r0
 801143c:	f7ff f9ea 	bl	8010814 <lv_draw_aa_ver_seg>
 8011440:	f7ff bb6a 	b.w	8010b18 <lv_draw_line+0x138>
static bool line_next_x(line_draw_t * line)
{
    lv_coord_t last_x = line->p_act.x;

    do {
        if(!line_next(line)) return false;
 8011444:	4607      	mov	r7, r0
 8011446:	e7b5      	b.n	80113b4 <lv_draw_line+0x9d4>
        if(!main_line->hor && main_line->p1.x >= main_line->p2.x + dir_ori) pattern[0].x--;
 8011448:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
 801144c:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8011450:	4417      	add	r7, r2
 8011452:	42b9      	cmp	r1, r7
 8011454:	db02      	blt.n	801145c <lv_draw_line+0xa7c>
 8011456:	882a      	ldrh	r2, [r5, #0]
 8011458:	3a01      	subs	r2, #1
 801145a:	802a      	strh	r2, [r5, #0]
        if(main_line->hor && main_line->p1.y >= main_line->p2.y + dir_ori) pattern[0].y--;
 801145c:	9303      	str	r3, [sp, #12]
    lv_coord_t x_center_ofs = 0;
 801145e:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8011462:	e01a      	b.n	801149a <lv_draw_line+0xaba>
    if(aa) {
 8011464:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8011468:	e45d      	b.n	8010d26 <lv_draw_line+0x346>
    if(width != 0) {
 801146a:	9b06      	ldr	r3, [sp, #24]
 801146c:	2b00      	cmp	r3, #0
 801146e:	f43f ac5b 	beq.w	8010d28 <lv_draw_line+0x348>
        x_center_ofs = pattern[width - 1].x / 2;
 8011472:	9b06      	ldr	r3, [sp, #24]
 8011474:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011478:	3b01      	subs	r3, #1
 801147a:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 801147e:	f935 3023 	ldrsh.w	r3, [r5, r3, lsl #2]
 8011482:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8011486:	105b      	asrs	r3, r3, #1
 8011488:	9309      	str	r3, [sp, #36]	; 0x24
        y_center_ofs = pattern[width - 1].y / 2;
 801148a:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801148e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8011492:	105b      	asrs	r3, r3, #1
 8011494:	930a      	str	r3, [sp, #40]	; 0x28
 8011496:	9b06      	ldr	r3, [sp, #24]
 8011498:	9303      	str	r3, [sp, #12]
                            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w + 1,
 801149a:	2300      	movs	r3, #0
 801149c:	9505      	str	r5, [sp, #20]
 801149e:	9507      	str	r5, [sp, #28]
 80114a0:	461f      	mov	r7, r3
 80114a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80114a4:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
    for(i = 0; i < width; i++) {
 80114a8:	9903      	ldr	r1, [sp, #12]
 80114aa:	9308      	str	r3, [sp, #32]
 80114ac:	428b      	cmp	r3, r1
 80114ae:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 80114b2:	f6ff ac57 	blt.w	8010d64 <lv_draw_line+0x384>
    if(width != 0 && aa) { /*Due to rounding error with very thin lines it looks ugly*/
 80114b6:	9b06      	ldr	r3, [sp, #24]
 80114b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80114bc:	3b01      	subs	r3, #1
 80114be:	9307      	str	r3, [sp, #28]
 80114c0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80114c4:	9306      	str	r3, [sp, #24]
 80114c6:	2900      	cmp	r1, #0
 80114c8:	f43f ad7e 	beq.w	8010fc8 <lv_draw_line+0x5e8>
 80114cc:	9b04      	ldr	r3, [sp, #16]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	f43f ad7e 	beq.w	8010fd0 <lv_draw_line+0x5f0>
 80114d4:	ea4f 0887 	mov.w	r8, r7, lsl #2
 80114d8:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 80114dc:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
        if(main_line->hor) {
 80114e0:	eb05 0908 	add.w	r9, r5, r8
 80114e4:	f935 e027 	ldrsh.w	lr, [r5, r7, lsl #2]
 80114e8:	f9b9 1002 	ldrsh.w	r1, [r9, #2]
 80114ec:	2a00      	cmp	r2, #0
 80114ee:	f43f ad1b 	beq.w	8010f28 <lv_draw_line+0x548>
            lv_coord_t seg_w = pattern[width_safe - 1].y - pattern[aa_last_corner].y;
 80114f2:	9a06      	ldr	r2, [sp, #24]
 80114f4:	3801      	subs	r0, #1
            if(main_line->sy < 0) {
 80114f6:	f9bd a052 	ldrsh.w	sl, [sp, #82]	; 0x52
            lv_coord_t seg_w = pattern[width_safe - 1].y - pattern[aa_last_corner].y;
 80114fa:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 80114fe:	4470      	add	r0, lr
            if(main_line->sy < 0) {
 8011500:	f1ba 0f00 	cmp.w	sl, #0
 8011504:	f8b4 e034 	ldrh.w	lr, [r4, #52]	; 0x34
            lv_coord_t seg_w = pattern[width_safe - 1].y - pattern[aa_last_corner].y;
 8011508:	ebac 0701 	sub.w	r7, ip, r1
 801150c:	b200      	sxth	r0, r0
 801150e:	b23f      	sxth	r7, r7
            if(main_line->sy < 0) {
 8011510:	eb07 020a 	add.w	r2, r7, sl
 8011514:	b212      	sxth	r2, r2
 8011516:	f6bf acf4 	bge.w	8010f02 <lv_draw_line+0x522>
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
 801151a:	eb0c 0103 	add.w	r1, ip, r3
 801151e:	f8cd b004 	str.w	fp, [sp, #4]
 8011522:	4633      	mov	r3, r6
 8011524:	f8ad e000 	strh.w	lr, [sp]
 8011528:	b209      	sxth	r1, r1
 801152a:	f7ff f973 	bl	8010814 <lv_draw_aa_ver_seg>
                                   main_line->p2.y + pattern[aa_last_corner].y + seg_w, -(seg_w + main_line->sy), mask,
 801152e:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 8011532:	f8bd 1046 	ldrh.w	r1, [sp, #70]	; 0x46
 8011536:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801153a:	443a      	add	r2, r7
 801153c:	4419      	add	r1, r3
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 801153e:	4252      	negs	r2, r2
 8011540:	4439      	add	r1, r7
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
 8011542:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
 8011546:	b212      	sxth	r2, r2
 8011548:	f835 3008 	ldrh.w	r3, [r5, r8]
 801154c:	b209      	sxth	r1, r1
 801154e:	3001      	adds	r0, #1
 8011550:	f8cd b004 	str.w	fp, [sp, #4]
 8011554:	4418      	add	r0, r3
 8011556:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8011558:	b200      	sxth	r0, r0
 801155a:	f8ad 3000 	strh.w	r3, [sp]
 801155e:	4633      	mov	r3, r6
 8011560:	f7ff f958 	bl	8010814 <lv_draw_aa_ver_seg>
        if(main_line->hor == false) {
 8011564:	9b03      	ldr	r3, [sp, #12]
 8011566:	1c19      	adds	r1, r3, #0
 8011568:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801156c:	bf18      	it	ne
 801156e:	2101      	movne	r1, #1
 8011570:	2b00      	cmp	r3, #0
 8011572:	f47f ad31 	bne.w	8010fd8 <lv_draw_line+0x5f8>
            if(main_line->sx < 0) {
 8011576:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
            if(main_line->sy < 0) {
 801157a:	2b00      	cmp	r3, #0
                aa_shift2 = width == 0 ? 0 : aa_shift1;
 801157c:	bfb9      	ittee	lt
 801157e:	f1c1 0a00 	rsblt	sl, r1, #0
                aa_shift1 = -1;
 8011582:	f04f 39ff 	movlt.w	r9, #4294967295	; 0xffffffff
                aa_shift1 = width == 0 ? 0 : aa_shift2;
 8011586:	fa0f f981 	sxthge.w	r9, r1
                aa_shift2 = 1;
 801158a:	f04f 0a01 	movge.w	sl, #1
    prev_p.x = main_line->p1.x;
 801158e:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    if(main_line->hor) {
 8011592:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
    prev_p.x = main_line->p1.x;
 8011596:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    prev_p.y = main_line->p1.y;
 801159a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801159e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if(main_line->hor) {
 80115a2:	f1b8 0f00 	cmp.w	r8, #0
 80115a6:	f47f ada3 	bne.w	80110f0 <lv_draw_line+0x710>
    bool first_run = true;
 80115aa:	2301      	movs	r3, #1
    lv_coord_t last_x = line->p_act.x;
 80115ac:	f9bd 7048 	ldrsh.w	r7, [sp, #72]	; 0x48
            first_run = false;
 80115b0:	9308      	str	r3, [sp, #32]
        if(!line_next(line)) return false;
 80115b2:	a810      	add	r0, sp, #64	; 0x40
 80115b4:	f7ff f9eb 	bl	801098e <line_next>
 80115b8:	2800      	cmp	r0, #0
 80115ba:	f43f af43 	beq.w	8011444 <lv_draw_line+0xa64>
    } while(last_x == line->p_act.x);
 80115be:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 80115c2:	42bb      	cmp	r3, r7
 80115c4:	d0f5      	beq.n	80115b2 <lv_draw_line+0xbd2>
 80115c6:	462f      	mov	r7, r5
 80115c8:	f04f 0800 	mov.w	r8, #0
 80115cc:	e665      	b.n	801129a <lv_draw_line+0x8ba>

080115ce <lv_color_mix>:
{
 80115ce:	b570      	push	{r4, r5, r6, lr}
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 80115d0:	b293      	uxth	r3, r2
 80115d2:	f3c1 25c4 	ubfx	r5, r1, #11, #5
 80115d6:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80115da:	f3c0 24c4 	ubfx	r4, r0, #11, #5
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 80115de:	f3c1 1645 	ubfx	r6, r1, #5, #6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 80115e2:	f001 011f 	and.w	r1, r1, #31
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 80115e6:	fb15 f502 	smulbb	r5, r5, r2
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 80115ea:	fb16 f602 	smulbb	r6, r6, r2
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 80115ee:	fb04 5403 	mla	r4, r4, r3, r5
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 80115f2:	fb11 f102 	smulbb	r1, r1, r2
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 80115f6:	f3c0 1545 	ubfx	r5, r0, #5, #6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 80115fa:	f000 001f 	and.w	r0, r0, #31
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 80115fe:	f3c4 2404 	ubfx	r4, r4, #8, #5
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8011602:	fb05 6503 	mla	r5, r5, r3, r6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8011606:	fb00 1303 	mla	r3, r0, r3, r1
    return ret;
 801160a:	f04f 0000 	mov.w	r0, #0
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 801160e:	f3c5 2505 	ubfx	r5, r5, #8, #6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8011612:	f3c3 2307 	ubfx	r3, r3, #8, #8
    return ret;
 8011616:	f363 0004 	bfi	r0, r3, #0, #5
 801161a:	f365 104a 	bfi	r0, r5, #5, #6
 801161e:	f364 20cf 	bfi	r0, r4, #11, #5
}
 8011622:	bd70      	pop	{r4, r5, r6, pc}

08011624 <lv_draw_cont_radius_corr>:
{
 8011624:	b570      	push	{r4, r5, r6, lr}
 8011626:	460e      	mov	r6, r1
 8011628:	4604      	mov	r4, r0
 801162a:	4615      	mov	r5, r2
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 801162c:	f7f1 fcba 	bl	8002fa4 <lv_refr_get_disp_refreshing>
 8011630:	f7f1 f86c 	bl	800270c <lv_disp_get_antialiasing>
    if(r >= (w >> 1)) {
 8011634:	1071      	asrs	r1, r6, #1
 8011636:	428c      	cmp	r4, r1
 8011638:	db03      	blt.n	8011642 <lv_draw_cont_radius_corr+0x1e>
        r = (w >> 1);
 801163a:	b28c      	uxth	r4, r1
        if(r != 0) r--;
 801163c:	b10c      	cbz	r4, 8011642 <lv_draw_cont_radius_corr+0x1e>
 801163e:	3c01      	subs	r4, #1
 8011640:	b2a4      	uxth	r4, r4
    if(r >= (h >> 1)) {
 8011642:	106a      	asrs	r2, r5, #1
 8011644:	4294      	cmp	r4, r2
 8011646:	db03      	blt.n	8011650 <lv_draw_cont_radius_corr+0x2c>
        r = (h >> 1);
 8011648:	b294      	uxth	r4, r2
        if(r != 0) r--;
 801164a:	b124      	cbz	r4, 8011656 <lv_draw_cont_radius_corr+0x32>
 801164c:	3c01      	subs	r4, #1
 801164e:	b2a4      	uxth	r4, r4
    if(r > 0) r -= aa;
 8011650:	b10c      	cbz	r4, 8011656 <lv_draw_cont_radius_corr+0x32>
 8011652:	1a24      	subs	r4, r4, r0
 8011654:	b2a4      	uxth	r4, r4
}
 8011656:	4620      	mov	r0, r4
 8011658:	bd70      	pop	{r4, r5, r6, pc}

0801165a <lv_draw_rect>:
{
 801165a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801165e:	4692      	mov	sl, r2
 8011660:	b0a9      	sub	sp, #164	; 0xa4
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 8011662:	88c2      	ldrh	r2, [r0, #6]
 8011664:	4683      	mov	fp, r0
 8011666:	9308      	str	r3, [sp, #32]
 8011668:	4689      	mov	r9, r1
 801166a:	3201      	adds	r2, #1
 801166c:	8843      	ldrh	r3, [r0, #2]
 801166e:	1ad2      	subs	r2, r2, r3
 8011670:	b212      	sxth	r2, r2
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 8011672:	2a00      	cmp	r2, #0
 8011674:	f340 8638 	ble.w	80122e8 <lv_draw_rect+0xc8e>
    return area_p->x2 - area_p->x1 + 1;
 8011678:	8881      	ldrh	r1, [r0, #4]
 801167a:	8803      	ldrh	r3, [r0, #0]
 801167c:	3101      	adds	r1, #1
 801167e:	1ac9      	subs	r1, r1, r3
 8011680:	b209      	sxth	r1, r1
 8011682:	2900      	cmp	r1, #0
 8011684:	f340 8630 	ble.w	80122e8 <lv_draw_rect+0xc8e>
    if(style->body.shadow.width != 0) {
 8011688:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
 801168c:	2b00      	cmp	r3, #0
 801168e:	f000 82bc 	beq.w	8011c0a <lv_draw_rect+0x5b0>
    radius            = lv_draw_cont_radius_corr(radius, width, height);
 8011692:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8011696:	f7ff ffc5 	bl	8011624 <lv_draw_cont_radius_corr>
    memcpy(dest, src, sizeof(lv_area_t));
 801169a:	4659      	mov	r1, fp
 801169c:	b204      	sxth	r4, r0
 801169e:	2208      	movs	r2, #8
 80116a0:	a81e      	add	r0, sp, #120	; 0x78
 80116a2:	f005 f865 	bl	8016770 <memcpy>
    area_tmp.x1 += radius;
 80116a6:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 80116aa:	a91e      	add	r1, sp, #120	; 0x78
 80116ac:	4648      	mov	r0, r9
    area_tmp.x1 += radius;
 80116ae:	4423      	add	r3, r4
 80116b0:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    area_tmp.x2 -= radius;
 80116b4:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 80116b8:	1b1b      	subs	r3, r3, r4
 80116ba:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 80116be:	f7ff f840 	bl	8010742 <lv_area_is_in>
 80116c2:	2800      	cmp	r0, #0
 80116c4:	f040 82a1 	bne.w	8011c0a <lv_draw_rect+0x5b0>
 80116c8:	2208      	movs	r2, #8
 80116ca:	4659      	mov	r1, fp
 80116cc:	a81e      	add	r0, sp, #120	; 0x78
 80116ce:	f005 f84f 	bl	8016770 <memcpy>
    area_tmp.y1 += radius;
 80116d2:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 80116d6:	a91e      	add	r1, sp, #120	; 0x78
 80116d8:	4648      	mov	r0, r9
    area_tmp.y1 += radius;
 80116da:	4423      	add	r3, r4
 80116dc:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    area_tmp.y2 -= radius;
 80116e0:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
 80116e4:	1b1c      	subs	r4, r3, r4
 80116e6:	f8ad 407e 	strh.w	r4, [sp, #126]	; 0x7e
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 80116ea:	f7ff f82a 	bl	8010742 <lv_area_is_in>
 80116ee:	4605      	mov	r5, r0
 80116f0:	2800      	cmp	r0, #0
 80116f2:	f040 828a 	bne.w	8011c0a <lv_draw_rect+0x5b0>
    if(style->body.shadow.type == LV_SHADOW_FULL) {
 80116f6:	f89a 3014 	ldrb.w	r3, [sl, #20]
 80116fa:	2b01      	cmp	r3, #1
 80116fc:	f040 8206 	bne.w	8011b0c <lv_draw_rect+0x4b2>
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8011700:	f7f1 fc50 	bl	8002fa4 <lv_refr_get_disp_refreshing>
 8011704:	f7f1 f802 	bl	800270c <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 8011708:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
    return area_p->y2 - area_p->y1 + 1;
 801170c:	f8bb 2006 	ldrh.w	r2, [fp, #6]
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8011710:	4604      	mov	r4, r0
    lv_coord_t swidth = style->body.shadow.width;
 8011712:	9305      	str	r3, [sp, #20]
    return area_p->x2 - area_p->x1 + 1;
 8011714:	f8bb 1004 	ldrh.w	r1, [fp, #4]
    return area_p->y2 - area_p->y1 + 1;
 8011718:	3201      	adds	r2, #1
 801171a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
    radius += aa;
 801171e:	b224      	sxth	r4, r4
    return area_p->x2 - area_p->x1 + 1;
 8011720:	3101      	adds	r1, #1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011722:	f8ba 0006 	ldrh.w	r0, [sl, #6]
    return area_p->y2 - area_p->y1 + 1;
 8011726:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 8011728:	f8bb 3000 	ldrh.w	r3, [fp]
 801172c:	1ac9      	subs	r1, r1, r3
 801172e:	b212      	sxth	r2, r2
 8011730:	b209      	sxth	r1, r1
 8011732:	f7ff ff77 	bl	8011624 <lv_draw_cont_radius_corr>
    radius += aa;
 8011736:	fa04 f080 	sxtah	r0, r4, r0
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 801173a:	9a05      	ldr	r2, [sp, #20]
    radius += aa;
 801173c:	b203      	sxth	r3, r0
 801173e:	9302      	str	r3, [sp, #8]
    int16_t filter_width = 2 * swidth + 1;
 8011740:	9b05      	ldr	r3, [sp, #20]
 8011742:	005f      	lsls	r7, r3, #1
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8011744:	9b02      	ldr	r3, [sp, #8]
    int16_t filter_width = 2 * swidth + 1;
 8011746:	3701      	adds	r7, #1
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8011748:	4413      	add	r3, r2
    int16_t filter_width = 2 * swidth + 1;
 801174a:	b23f      	sxth	r7, r7
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 801174c:	1d18      	adds	r0, r3, #4
 801174e:	9307      	str	r3, [sp, #28]
 8011750:	f020 0003 	bic.w	r0, r0, #3
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 8011754:	1cfe      	adds	r6, r7, #3
    curve_x_size *= sizeof(lv_coord_t);
 8011756:	ea4f 0840 	mov.w	r8, r0, lsl #1
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 801175a:	f026 0603 	bic.w	r6, r6, #3
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 801175e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011762:	4430      	add	r0, r6
 8011764:	f7f2 fc12 	bl	8003f8c <lv_draw_get_buf>
    uint32_t * line_1d_blur = (uint32_t *)&draw_buf[curve_x_size];
 8011768:	4603      	mov	r3, r0
    memset(curve_x, 0, curve_x_size);
 801176a:	4629      	mov	r1, r5
    lv_circ_init(&circ, &circ_tmp, radius);
 801176c:	ad1d      	add	r5, sp, #116	; 0x74
    uint32_t * line_1d_blur = (uint32_t *)&draw_buf[curve_x_size];
 801176e:	4443      	add	r3, r8
    memset(curve_x, 0, curve_x_size);
 8011770:	4642      	mov	r2, r8
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 8011772:	9003      	str	r0, [sp, #12]
    uint32_t * line_1d_blur = (uint32_t *)&draw_buf[curve_x_size];
 8011774:	9309      	str	r3, [sp, #36]	; 0x24
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
 8011776:	4603      	mov	r3, r0
 8011778:	4433      	add	r3, r6
    lv_circ_init(&circ, &circ_tmp, radius);
 801177a:	f10d 0672 	add.w	r6, sp, #114	; 0x72
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
 801177e:	930a      	str	r3, [sp, #40]	; 0x28
    memset(curve_x, 0, curve_x_size);
 8011780:	f005 f820 	bl	80167c4 <memset>
    lv_circ_init(&circ, &circ_tmp, radius);
 8011784:	9a02      	ldr	r2, [sp, #8]
 8011786:	4631      	mov	r1, r6
 8011788:	4628      	mov	r0, r5
 801178a:	f7fe fff7 	bl	801077c <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 801178e:	4628      	mov	r0, r5
 8011790:	f7fe fffb 	bl	801078a <lv_circ_cont>
 8011794:	2800      	cmp	r0, #0
 8011796:	d149      	bne.n	801182c <lv_draw_rect+0x1d2>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8011798:	9a08      	ldr	r2, [sp, #32]
                             (filter_width * filter_width);
 801179a:	fb07 f507 	mul.w	r5, r7, r7
 801179e:	f89a 3008 	ldrb.w	r3, [sl, #8]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 80117a2:	2aff      	cmp	r2, #255	; 0xff
 80117a4:	bf18      	it	ne
 80117a6:	4353      	mulne	r3, r2
                             (filter_width * filter_width);
 80117a8:	f04f 0200 	mov.w	r2, #0
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 80117ac:	bf18      	it	ne
 80117ae:	0a1b      	lsrne	r3, r3, #8
    for(line = 0; line < filter_width; line++) {
 80117b0:	ebc3 51c3 	rsb	r1, r3, r3, lsl #23
 80117b4:	fb13 f307 	smulbb	r3, r3, r7
 80117b8:	0249      	lsls	r1, r1, #9
 80117ba:	025b      	lsls	r3, r3, #9
 80117bc:	b210      	sxth	r0, r2
 80117be:	4287      	cmp	r7, r0
 80117c0:	dc44      	bgt.n	801184c <lv_draw_rect+0x1f2>
    ofs_rb.x = coords->x2 - radius - aa;
 80117c2:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 80117c6:	9a02      	ldr	r2, [sp, #8]
 80117c8:	1b1b      	subs	r3, r3, r4
 80117ca:	1a9b      	subs	r3, r3, r2
 80117cc:	b21b      	sxth	r3, r3
 80117ce:	9313      	str	r3, [sp, #76]	; 0x4c
    ofs_rb.y = coords->y2 - radius - aa;
 80117d0:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 80117d4:	1b1b      	subs	r3, r3, r4
 80117d6:	1a9b      	subs	r3, r3, r2
 80117d8:	b21b      	sxth	r3, r3
 80117da:	930b      	str	r3, [sp, #44]	; 0x2c
    ofs_rt.y = coords->y1 + radius + aa;
 80117dc:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80117e0:	4423      	add	r3, r4
 80117e2:	4413      	add	r3, r2
 80117e4:	b21b      	sxth	r3, r3
 80117e6:	930c      	str	r3, [sp, #48]	; 0x30
    ofs_lb.x = coords->x1 + radius + aa;
 80117e8:	f8bb 3000 	ldrh.w	r3, [fp]
 80117ec:	441c      	add	r4, r3
 80117ee:	4414      	add	r4, r2
 80117f0:	b223      	sxth	r3, r4
 80117f2:	9314      	str	r3, [sp, #80]	; 0x50
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
 80117f4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80117f8:	9311      	str	r3, [sp, #68]	; 0x44
 80117fa:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80117fe:	9315      	str	r3, [sp, #84]	; 0x54
    ofs_lb.x = coords->x1 + radius + aa;
 8011800:	9306      	str	r3, [sp, #24]
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 8011802:	9b05      	ldr	r3, [sp, #20]
 8011804:	425b      	negs	r3, r3
 8011806:	9312      	str	r3, [sp, #72]	; 0x48
 8011808:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 801180c:	9316      	str	r3, [sp, #88]	; 0x58
 801180e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011810:	9a06      	ldr	r2, [sp, #24]
 8011812:	1a9b      	subs	r3, r3, r2
 8011814:	fa0f f883 	sxth.w	r8, r3
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
 8011818:	9b07      	ldr	r3, [sp, #28]
 801181a:	4543      	cmp	r3, r8
 801181c:	f2c0 81f5 	blt.w	8011c0a <lv_draw_rect+0x5b0>
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 8011820:	9b03      	ldr	r3, [sp, #12]
 8011822:	eb03 0048 	add.w	r0, r3, r8, lsl #1
        for(col = 0; col <= radius + swidth; col++) { /*Check all pixels in a 1D blur line (from the origo to last
 8011826:	2300      	movs	r3, #0
 8011828:	9304      	str	r3, [sp, #16]
 801182a:	e038      	b.n	801189e <lv_draw_rect+0x244>
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 801182c:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
        lv_circ_next(&circ, &circ_tmp);
 8011830:	4628      	mov	r0, r5
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 8011832:	9903      	ldr	r1, [sp, #12]
 8011834:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 8011838:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 801183c:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 8011840:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        lv_circ_next(&circ, &circ_tmp);
 8011844:	4631      	mov	r1, r6
 8011846:	f7fe ffa9 	bl	801079c <lv_circ_next>
 801184a:	e7a0      	b.n	801178e <lv_draw_rect+0x134>
        line_1d_blur[line] = (uint32_t)((uint32_t)(filter_width - line) * (opa * 2) << SHADOW_OPA_EXTRA_PRECISION) /
 801184c:	fbb3 f0f5 	udiv	r0, r3, r5
 8011850:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011852:	440b      	add	r3, r1
 8011854:	f846 0022 	str.w	r0, [r6, r2, lsl #2]
 8011858:	3201      	adds	r2, #1
 801185a:	e7af      	b.n	80117bc <lv_draw_rect+0x162>
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 801185c:	9a16      	ldr	r2, [sp, #88]	; 0x58
            uint32_t px_opa_sum = 0;
 801185e:	2100      	movs	r1, #0
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 8011860:	9b05      	ldr	r3, [sp, #20]
 8011862:	4293      	cmp	r3, r2
 8011864:	da01      	bge.n	801186a <lv_draw_rect+0x210>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
 8011866:	2200      	movs	r2, #0
 8011868:	e010      	b.n	801188c <lv_draw_rect+0x232>
                if(line + line_rel < 0) { /*Below the radius, here is the blur of the edge */
 801186a:	eb12 0508 	adds.w	r5, r2, r8
 801186e:	f140 80a6 	bpl.w	80119be <lv_draw_rect+0x364>
                    col_rel = radius - curve_x[line] - col;
 8011872:	9c02      	ldr	r4, [sp, #8]
 8011874:	8803      	ldrh	r3, [r0, #0]
 8011876:	1ae3      	subs	r3, r4, r3
 8011878:	9c04      	ldr	r4, [sp, #16]
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 801187a:	1b1b      	subs	r3, r3, r4
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 801187c:	9c12      	ldr	r4, [sp, #72]	; 0x48
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 801187e:	b21b      	sxth	r3, r3
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 8011880:	42a3      	cmp	r3, r4
 8011882:	f280 80a7 	bge.w	80119d4 <lv_draw_rect+0x37a>
                    if(line_rel == -swidth)
 8011886:	1b14      	subs	r4, r2, r4
 8011888:	4262      	negs	r2, r4
 801188a:	4162      	adcs	r2, r4
            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 801188c:	9c04      	ldr	r4, [sp, #16]
 801188e:	0a09      	lsrs	r1, r1, #8
 8011890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011892:	5519      	strb	r1, [r3, r4]
            if(line_ready) {
 8011894:	4623      	mov	r3, r4
 8011896:	3301      	adds	r3, #1
 8011898:	b29b      	uxth	r3, r3
 801189a:	9304      	str	r3, [sp, #16]
 801189c:	b91a      	cbnz	r2, 80118a6 <lv_draw_rect+0x24c>
        for(col = 0; col <= radius + swidth; col++) { /*Check all pixels in a 1D blur line (from the origo to last
 801189e:	9b07      	ldr	r3, [sp, #28]
 80118a0:	9a04      	ldr	r2, [sp, #16]
 80118a2:	4293      	cmp	r3, r2
 80118a4:	dada      	bge.n	801185c <lv_draw_rect+0x202>
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 80118a6:	9b03      	ldr	r3, [sp, #12]
        for(d = 1; d < col; d++) {
 80118a8:	2501      	movs	r5, #1
        point_rt.y = ofs_rt.y - line;
 80118aa:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 80118ae:	f933 2018 	ldrsh.w	r2, [r3, r8, lsl #1]
        point_lt.x = ofs_lt.x - curve_x[line] - 1;
 80118b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
        point_rb.y = ofs_rb.y + line;
 80118b4:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
        point_lt.x = ofs_lt.x - curve_x[line] - 1;
 80118b8:	3b01      	subs	r3, #1
 80118ba:	1a9b      	subs	r3, r3, r2
 80118bc:	b29b      	uxth	r3, r3
 80118be:	9310      	str	r3, [sp, #64]	; 0x40
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 80118c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80118c2:	3301      	adds	r3, #1
 80118c4:	4413      	add	r3, r2
 80118c6:	b29b      	uxth	r3, r3
 80118c8:	930d      	str	r3, [sp, #52]	; 0x34
 80118ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118cc:	1c5c      	adds	r4, r3, #1
 80118ce:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80118d2:	930e      	str	r3, [sp, #56]	; 0x38
 80118d4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80118d8:	930f      	str	r3, [sp, #60]	; 0x3c
        for(d = 1; d < col; d++) {
 80118da:	9b04      	ldr	r3, [sp, #16]
 80118dc:	429d      	cmp	r5, r3
 80118de:	f0c0 8088 	bcc.w	80119f2 <lv_draw_rect+0x398>
        if(line == 0) lv_draw_shadow_full_straight(coords, mask, style, line_2d_blur);
 80118e2:	f1b8 0f00 	cmp.w	r8, #0
 80118e6:	d161      	bne.n	80119ac <lv_draw_rect+0x352>
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 80118e8:	f7f1 fb5c 	bl	8002fa4 <lv_refr_get_disp_refreshing>
 80118ec:	f7f0 ff0e 	bl	800270c <lv_disp_get_antialiasing>
    return area_p->y2 - area_p->y1 + 1;
 80118f0:	f8bb 2006 	ldrh.w	r2, [fp, #6]
 80118f4:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80118f8:	4604      	mov	r4, r0
    return area_p->x2 - area_p->x1 + 1;
 80118fa:	f8bb 1004 	ldrh.w	r1, [fp, #4]
    return area_p->y2 - area_p->y1 + 1;
 80118fe:	3201      	adds	r2, #1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011900:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8011904:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 8011906:	3101      	adds	r1, #1
 8011908:	f8bb 3000 	ldrh.w	r3, [fp]
 801190c:	b212      	sxth	r2, r2
    lv_coord_t swidth = style->body.shadow.width;
 801190e:	f9ba 8012 	ldrsh.w	r8, [sl, #18]
 8011912:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011914:	b209      	sxth	r1, r1
 8011916:	f7ff fe85 	bl	8011624 <lv_draw_cont_radius_corr>
    right_area.x1 = coords->x2 + 1 - aa;
 801191a:	f9bb 1004 	ldrsh.w	r1, [fp, #4]
    radius += aa;
 801191e:	b223      	sxth	r3, r4
    left_area.x1 = coords->x1 - 1 + aa;
 8011920:	f9bb 4000 	ldrsh.w	r4, [fp]
    right_area.x1 = coords->x2 + 1 - aa;
 8011924:	1c4a      	adds	r2, r1, #1
    right_area.y1 = coords->y1 + radius + aa;
 8011926:	f9bb 5002 	ldrsh.w	r5, [fp, #2]
    radius += aa;
 801192a:	fa03 f080 	sxtah	r0, r3, r0
    left_area.x1 = coords->x1 - 1 + aa;
 801192e:	1e67      	subs	r7, r4, #1
    right_area.x1 = coords->x2 + 1 - aa;
 8011930:	1ad2      	subs	r2, r2, r3
    top_area.x1 = coords->x1 + radius + aa;
 8011932:	441c      	add	r4, r3
    radius += aa;
 8011934:	b200      	sxth	r0, r0
    right_area.y1 = coords->y1 + radius + aa;
 8011936:	eb03 0c05 	add.w	ip, r3, r5
    right_area.x1 = coords->x2 + 1 - aa;
 801193a:	b212      	sxth	r2, r2
    top_area.x2 = coords->x2 - radius - aa;
 801193c:	1ac9      	subs	r1, r1, r3
    top_area.x1 = coords->x1 + radius + aa;
 801193e:	4404      	add	r4, r0
    top_area.y1 = coords->y1 - 1 + aa;
 8011940:	3d01      	subs	r5, #1
    right_area.x1 = coords->x2 + 1 - aa;
 8011942:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
    right_area.y1 = coords->y1 + radius + aa;
 8011946:	4484      	add	ip, r0
    right_area.x2 = right_area.x1;
 8011948:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
    top_area.x1 = coords->x1 + radius + aa;
 801194c:	b224      	sxth	r4, r4
    right_area.y2 = coords->y2 - radius - aa;
 801194e:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
    left_area.x1 = coords->x1 - 1 + aa;
 8011952:	441f      	add	r7, r3
    top_area.y1 = coords->y1 - 1 + aa;
 8011954:	441d      	add	r5, r3
    right_area.y1 = coords->y1 + radius + aa;
 8011956:	fa0f fc8c 	sxth.w	ip, ip
    right_area.y2 = coords->y2 - radius - aa;
 801195a:	1ad6      	subs	r6, r2, r3
    bottom_area.y1 = coords->y2 + 1 - aa;
 801195c:	3201      	adds	r2, #1
    left_area.x1 = coords->x1 - 1 + aa;
 801195e:	b23f      	sxth	r7, r7
    top_area.x1 = coords->x1 + radius + aa;
 8011960:	f8ad 4090 	strh.w	r4, [sp, #144]	; 0x90
    right_area.y2 = coords->y2 - radius - aa;
 8011964:	1a36      	subs	r6, r6, r0
    bottom_area.y1 = coords->y2 + 1 - aa;
 8011966:	1ad3      	subs	r3, r2, r3
    top_area.x2 = coords->x2 - radius - aa;
 8011968:	1a08      	subs	r0, r1, r0
    top_area.y1 = coords->y1 - 1 + aa;
 801196a:	b22d      	sxth	r5, r5
    right_area.y2 = coords->y2 - radius - aa;
 801196c:	b236      	sxth	r6, r6
    bottom_area.x1 = coords->x1 + radius + aa;
 801196e:	f8ad 4098 	strh.w	r4, [sp, #152]	; 0x98
    top_area.x2 = coords->x2 - radius - aa;
 8011972:	b200      	sxth	r0, r0
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
 8011974:	2401      	movs	r4, #1
    bottom_area.y1 = coords->y2 + 1 - aa;
 8011976:	b21b      	sxth	r3, r3
    right_area.y1 = coords->y1 + radius + aa;
 8011978:	f8ad c082 	strh.w	ip, [sp, #130]	; 0x82
    right_area.y2 = coords->y2 - radius - aa;
 801197c:	f8ad 6086 	strh.w	r6, [sp, #134]	; 0x86
    left_area.x1 = coords->x1 - 1 + aa;
 8011980:	f8ad 7088 	strh.w	r7, [sp, #136]	; 0x88
    left_area.y1 = coords->y1 + radius + aa;
 8011984:	f8ad c08a 	strh.w	ip, [sp, #138]	; 0x8a
    left_area.x2 = left_area.x1;
 8011988:	f8ad 708c 	strh.w	r7, [sp, #140]	; 0x8c
    left_area.y2 = coords->y2 - radius - aa;
 801198c:	f8ad 608e 	strh.w	r6, [sp, #142]	; 0x8e
    top_area.y1 = coords->y1 - 1 + aa;
 8011990:	f8ad 5092 	strh.w	r5, [sp, #146]	; 0x92
    top_area.x2 = coords->x2 - radius - aa;
 8011994:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
    top_area.y2 = top_area.y1;
 8011998:	f8ad 5096 	strh.w	r5, [sp, #150]	; 0x96
    bottom_area.y1 = coords->y2 + 1 - aa;
 801199c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
    bottom_area.x2 = coords->x2 - radius - aa;
 80119a0:	f8ad 009c 	strh.w	r0, [sp, #156]	; 0x9c
    bottom_area.y2 = bottom_area.y1;
 80119a4:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
 80119a8:	45a0      	cmp	r8, r4
 80119aa:	da66      	bge.n	8011a7a <lv_draw_rect+0x420>
 80119ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80119ae:	3301      	adds	r3, #1
 80119b0:	b29b      	uxth	r3, r3
 80119b2:	9311      	str	r3, [sp, #68]	; 0x44
 80119b4:	9b06      	ldr	r3, [sp, #24]
 80119b6:	3b01      	subs	r3, #1
 80119b8:	b29b      	uxth	r3, r3
 80119ba:	9306      	str	r3, [sp, #24]
 80119bc:	e727      	b.n	801180e <lv_draw_rect+0x1b4>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
 80119be:	9b02      	ldr	r3, [sp, #8]
 80119c0:	42ab      	cmp	r3, r5
 80119c2:	f6ff af50 	blt.w	8011866 <lv_draw_rect+0x20c>
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 80119c6:	8803      	ldrh	r3, [r0, #0]
 80119c8:	9c04      	ldr	r4, [sp, #16]
 80119ca:	441c      	add	r4, r3
 80119cc:	9b03      	ldr	r3, [sp, #12]
 80119ce:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 80119d2:	e752      	b.n	801187a <lv_draw_rect+0x220>
                } else if(col_rel > swidth)
 80119d4:	9c05      	ldr	r4, [sp, #20]
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 80119d6:	3201      	adds	r2, #1
                } else if(col_rel > swidth)
 80119d8:	429c      	cmp	r4, r3
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 80119da:	b212      	sxth	r2, r2
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 80119dc:	bfa9      	itett	ge
 80119de:	9c05      	ldrge	r4, [sp, #20]
                    px_opa_sum += line_1d_blur[0]; /*Inside the not blurred area*/
 80119e0:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 80119e2:	1ae3      	subge	r3, r4, r3
 80119e4:	9c09      	ldrge	r4, [sp, #36]	; 0x24
                    px_opa_sum += line_1d_blur[0]; /*Inside the not blurred area*/
 80119e6:	bfb4      	ite	lt
 80119e8:	681b      	ldrlt	r3, [r3, #0]
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 80119ea:	f854 3023 	ldrge.w	r3, [r4, r3, lsl #2]
 80119ee:	4419      	add	r1, r3
 80119f0:	e736      	b.n	8011860 <lv_draw_rect+0x206>
            if(point_lt.x < ofs_lt.x && point_lt.y < ofs_lt.y) {
 80119f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80119f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80119f6:	4293      	cmp	r3, r2
 80119f8:	dd17      	ble.n	8011a2a <lv_draw_rect+0x3d0>
 80119fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80119fc:	42b3      	cmp	r3, r6
 80119fe:	dd08      	ble.n	8011a12 <lv_draw_rect+0x3b8>
                lv_draw_px(point_lt.x, point_lt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8011a00:	7823      	ldrb	r3, [r4, #0]
 8011a02:	464a      	mov	r2, r9
 8011a04:	4631      	mov	r1, r6
 8011a06:	980e      	ldr	r0, [sp, #56]	; 0x38
 8011a08:	9300      	str	r3, [sp, #0]
 8011a0a:	f8ba 3010 	ldrh.w	r3, [sl, #16]
 8011a0e:	f001 fd23 	bl	8013458 <lv_draw_px>
            if(point_lb.x < ofs_lb.x && point_lb.y > ofs_lb.y) {
 8011a12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a14:	42bb      	cmp	r3, r7
 8011a16:	da08      	bge.n	8011a2a <lv_draw_rect+0x3d0>
                lv_draw_px(point_lb.x, point_lb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8011a18:	7823      	ldrb	r3, [r4, #0]
 8011a1a:	464a      	mov	r2, r9
 8011a1c:	4639      	mov	r1, r7
 8011a1e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8011a20:	9300      	str	r3, [sp, #0]
 8011a22:	f8ba 3010 	ldrh.w	r3, [sl, #16]
 8011a26:	f001 fd17 	bl	8013458 <lv_draw_px>
            if(point_rt.x > ofs_rt.x && point_rt.y < ofs_rt.y) {
 8011a2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011a2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011a2e:	4293      	cmp	r3, r2
 8011a30:	da17      	bge.n	8011a62 <lv_draw_rect+0x408>
 8011a32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a34:	42b3      	cmp	r3, r6
 8011a36:	dd08      	ble.n	8011a4a <lv_draw_rect+0x3f0>
                lv_draw_px(point_rt.x, point_rt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8011a38:	7823      	ldrb	r3, [r4, #0]
 8011a3a:	464a      	mov	r2, r9
 8011a3c:	4631      	mov	r1, r6
 8011a3e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8011a40:	9300      	str	r3, [sp, #0]
 8011a42:	f8ba 3010 	ldrh.w	r3, [sl, #16]
 8011a46:	f001 fd07 	bl	8013458 <lv_draw_px>
            if(point_rb.x > ofs_rb.x && point_rb.y > ofs_rb.y) {
 8011a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a4c:	42bb      	cmp	r3, r7
 8011a4e:	da08      	bge.n	8011a62 <lv_draw_rect+0x408>
                lv_draw_px(point_rb.x, point_rb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8011a50:	7823      	ldrb	r3, [r4, #0]
 8011a52:	464a      	mov	r2, r9
 8011a54:	4639      	mov	r1, r7
 8011a56:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8011a58:	9300      	str	r3, [sp, #0]
 8011a5a:	f8ba 3010 	ldrh.w	r3, [sl, #16]
 8011a5e:	f001 fcfb 	bl	8013458 <lv_draw_px>
            point_lt.x--;
 8011a62:	9b10      	ldr	r3, [sp, #64]	; 0x40
        for(d = 1; d < col; d++) {
 8011a64:	3501      	adds	r5, #1
 8011a66:	3401      	adds	r4, #1
 8011a68:	3b01      	subs	r3, #1
 8011a6a:	b2ad      	uxth	r5, r5
 8011a6c:	b29b      	uxth	r3, r3
 8011a6e:	9310      	str	r3, [sp, #64]	; 0x40
 8011a70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a72:	3301      	adds	r3, #1
 8011a74:	b29b      	uxth	r3, r3
 8011a76:	930d      	str	r3, [sp, #52]	; 0x34
 8011a78:	e729      	b.n	80118ce <lv_draw_rect+0x274>
        opa_act = map[d];
 8011a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 8011a7c:	4649      	mov	r1, r9
 8011a7e:	f8ba 2010 	ldrh.w	r2, [sl, #16]
 8011a82:	a820      	add	r0, sp, #128	; 0x80
        opa_act = map[d];
 8011a84:	5d1d      	ldrb	r5, [r3, r4]
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
 8011a86:	3401      	adds	r4, #1
        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 8011a88:	462b      	mov	r3, r5
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
 8011a8a:	b224      	sxth	r4, r4
        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 8011a8c:	f001 fd34 	bl	80134f8 <lv_draw_fill>
        right_area.x1++;
 8011a90:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 8011a94:	f8ba 2010 	ldrh.w	r2, [sl, #16]
 8011a98:	4649      	mov	r1, r9
        right_area.x1++;
 8011a9a:	3301      	adds	r3, #1
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 8011a9c:	a822      	add	r0, sp, #136	; 0x88
        right_area.x1++;
 8011a9e:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
        right_area.x2++;
 8011aa2:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 8011aa6:	3301      	adds	r3, #1
 8011aa8:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 8011aac:	462b      	mov	r3, r5
 8011aae:	f001 fd23 	bl	80134f8 <lv_draw_fill>
        left_area.x1--;
 8011ab2:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 8011ab6:	f8ba 2010 	ldrh.w	r2, [sl, #16]
 8011aba:	4649      	mov	r1, r9
        left_area.x1--;
 8011abc:	3b01      	subs	r3, #1
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 8011abe:	a824      	add	r0, sp, #144	; 0x90
        left_area.x1--;
 8011ac0:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
        left_area.x2--;
 8011ac4:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8011ac8:	3b01      	subs	r3, #1
 8011aca:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 8011ace:	462b      	mov	r3, r5
 8011ad0:	f001 fd12 	bl	80134f8 <lv_draw_fill>
        top_area.y1--;
 8011ad4:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 8011ad8:	f8ba 2010 	ldrh.w	r2, [sl, #16]
 8011adc:	4649      	mov	r1, r9
        top_area.y1--;
 8011ade:	3b01      	subs	r3, #1
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 8011ae0:	a826      	add	r0, sp, #152	; 0x98
        top_area.y1--;
 8011ae2:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
        top_area.y2--;
 8011ae6:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
 8011aea:	3b01      	subs	r3, #1
 8011aec:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 8011af0:	462b      	mov	r3, r5
 8011af2:	f001 fd01 	bl	80134f8 <lv_draw_fill>
        bottom_area.y1++;
 8011af6:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
 8011afa:	3301      	adds	r3, #1
 8011afc:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        bottom_area.y2++;
 8011b00:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
 8011b04:	3301      	adds	r3, #1
 8011b06:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
 8011b0a:	e74d      	b.n	80119a8 <lv_draw_rect+0x34e>
    } else if(style->body.shadow.type == LV_SHADOW_BOTTOM) {
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d17c      	bne.n	8011c0a <lv_draw_rect+0x5b0>
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8011b10:	f7f1 fa48 	bl	8002fa4 <lv_refr_get_disp_refreshing>
 8011b14:	f7f0 fdfa 	bl	800270c <lv_disp_get_antialiasing>
    return area_p->y2 - area_p->y1 + 1;
 8011b18:	f8bb 2006 	ldrh.w	r2, [fp, #6]
 8011b1c:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8011b20:	4604      	mov	r4, r0
    return area_p->x2 - area_p->x1 + 1;
 8011b22:	f8bb 1004 	ldrh.w	r1, [fp, #4]
    return area_p->y2 - area_p->y1 + 1;
 8011b26:	3201      	adds	r2, #1
    radius += aa * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 8011b28:	b224      	sxth	r4, r4
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011b2a:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8011b2e:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 8011b30:	3101      	adds	r1, #1
 8011b32:	f8bb 3000 	ldrh.w	r3, [fp]
    radius += aa * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 8011b36:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011b3a:	b212      	sxth	r2, r2
    lv_coord_t swidth = style->body.shadow.width;
 8011b3c:	f9ba 5012 	ldrsh.w	r5, [sl, #18]
 8011b40:	1ac9      	subs	r1, r1, r3
    swidth += aa;
 8011b42:	4425      	add	r5, r4
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011b44:	b209      	sxth	r1, r1
 8011b46:	f7ff fd6d 	bl	8011624 <lv_draw_cont_radius_corr>
    radius += aa * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 8011b4a:	fa06 f680 	sxtah	r6, r6, r0
    swidth += aa;
 8011b4e:	b22d      	sxth	r5, r5
    radius += aa * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 8011b50:	b236      	sxth	r6, r6
    lv_opa_t line_1d_blur_size = (swidth + 3) & ~0x3;     /*Round to 4*/
 8011b52:	1ce8      	adds	r0, r5, #3
    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
 8011b54:	f106 0804 	add.w	r8, r6, #4
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 8011b58:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
 8011b5c:	f028 0803 	bic.w	r8, r8, #3
    curve_x_size *= sizeof(lv_coord_t);
 8011b60:	ea4f 0848 	mov.w	r8, r8, lsl #1
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 8011b64:	4440      	add	r0, r8
 8011b66:	f7f2 fa11 	bl	8003f8c <lv_draw_get_buf>
    lv_circ_init(&circ, &circ_tmp, radius);
 8011b6a:	4632      	mov	r2, r6
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 8011b6c:	4607      	mov	r7, r0
    lv_opa_t * line_1d_blur = (lv_opa_t *)&draw_buf[curve_x_size];
 8011b6e:	4480      	add	r8, r0
    lv_circ_init(&circ, &circ_tmp, radius);
 8011b70:	a922      	add	r1, sp, #136	; 0x88
 8011b72:	a824      	add	r0, sp, #144	; 0x90
 8011b74:	f7fe fe02 	bl	801077c <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 8011b78:	a824      	add	r0, sp, #144	; 0x90
 8011b7a:	f7fe fe06 	bl	801078a <lv_circ_cont>
 8011b7e:	2800      	cmp	r0, #0
 8011b80:	f040 83b5 	bne.w	80122ee <lv_draw_rect+0xc94>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8011b84:	9a08      	ldr	r2, [sp, #32]
 8011b86:	f89a 3008 	ldrb.w	r3, [sl, #8]
 8011b8a:	2aff      	cmp	r2, #255	; 0xff
 8011b8c:	bf18      	it	ne
 8011b8e:	4353      	mulne	r3, r2
    ofs_lb.x = coords->x1 + radius + aa;
 8011b90:	f04f 0200 	mov.w	r2, #0
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8011b94:	bf18      	it	ne
 8011b96:	0a1b      	lsrne	r3, r3, #8
    for(col = 0; col < swidth; col++) {
 8011b98:	fb13 f105 	smulbb	r1, r3, r5
 8011b9c:	b210      	sxth	r0, r2
 8011b9e:	4285      	cmp	r5, r0
 8011ba0:	f300 83b4 	bgt.w	801230c <lv_draw_rect+0xcb2>
    ofs_l.x = coords->x1 + radius;
 8011ba4:	f8bb 3000 	ldrh.w	r3, [fp]
 8011ba8:	4433      	add	r3, r6
 8011baa:	b21b      	sxth	r3, r3
 8011bac:	9305      	str	r3, [sp, #20]
    ofs_l.y = coords->y2 - radius + 1 - aa;
 8011bae:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 8011bb2:	3301      	adds	r3, #1
 8011bb4:	1b1c      	subs	r4, r3, r4
 8011bb6:	b223      	sxth	r3, r4
 8011bb8:	9306      	str	r3, [sp, #24]
 8011bba:	1b9b      	subs	r3, r3, r6
 8011bbc:	b21b      	sxth	r3, r3
 8011bbe:	930c      	str	r3, [sp, #48]	; 0x30
    ofs_r.x = coords->x2 - radius;
 8011bc0:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8011bc4:	1b9b      	subs	r3, r3, r6
 8011bc6:	b21b      	sxth	r3, r3
 8011bc8:	9309      	str	r3, [sp, #36]	; 0x24
    for(col = 0; col <= radius; col++) {
 8011bca:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8011bce:	9307      	str	r3, [sp, #28]
    ofs_r.x = coords->x2 - radius;
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	9303      	str	r3, [sp, #12]
 8011bd4:	f9bd 400c 	ldrsh.w	r4, [sp, #12]
 8011bd8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    for(col = 0; col <= radius; col++) {
 8011bdc:	42a6      	cmp	r6, r4
 8011bde:	f280 839d 	bge.w	801231c <lv_draw_rect+0xcc2>
    area_mid.x1 = ofs_l.x + 1;
 8011be2:	9b05      	ldr	r3, [sp, #20]
 8011be4:	3301      	adds	r3, #1
 8011be6:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
    area_mid.y1 = ofs_l.y + radius;
 8011bea:	9b06      	ldr	r3, [sp, #24]
 8011bec:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
    area_mid.x2 = ofs_r.x - 1;
 8011bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bf2:	3b01      	subs	r3, #1
 8011bf4:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
    area_mid.y2 = area_mid.y1;
 8011bf8:	9b06      	ldr	r3, [sp, #24]
 8011bfa:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
 8011bfe:	2300      	movs	r3, #0
 8011c00:	1c5c      	adds	r4, r3, #1
    for(d = 0; d < swidth; d++) {
 8011c02:	b29b      	uxth	r3, r3
 8011c04:	429d      	cmp	r5, r3
 8011c06:	f300 83d3 	bgt.w	80123b0 <lv_draw_rect+0xd56>
    if(lv_area_is_on(coords, mask) == false) return;
 8011c0a:	4649      	mov	r1, r9
 8011c0c:	4658      	mov	r0, fp
 8011c0e:	f7fe fd7b 	bl	8010708 <lv_area_is_on>
 8011c12:	2800      	cmp	r0, #0
 8011c14:	f000 8368 	beq.w	80122e8 <lv_draw_rect+0xc8e>
    if(style->body.opa > LV_OPA_MIN) {
 8011c18:	f89a 3008 	ldrb.w	r3, [sl, #8]
 8011c1c:	2b10      	cmp	r3, #16
 8011c1e:	f240 81b8 	bls.w	8011f92 <lv_draw_rect+0x938>
    uint16_t radius = style->body.radius;
 8011c22:	f8ba 5006 	ldrh.w	r5, [sl, #6]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8011c26:	f7f1 f9bd 	bl	8002fa4 <lv_refr_get_disp_refreshing>
 8011c2a:	f7f0 fd6f 	bl	800270c <lv_disp_get_antialiasing>
    lv_color_t gcolor = style->body.grad_color;
 8011c2e:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 8011c32:	f8bb 6006 	ldrh.w	r6, [fp, #6]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8011c36:	4604      	mov	r4, r0
    lv_color_t gcolor = style->body.grad_color;
 8011c38:	9302      	str	r3, [sp, #8]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011c3a:	4628      	mov	r0, r5
 8011c3c:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8011c40:	3601      	adds	r6, #1
    return area_p->x2 - area_p->x1 + 1;
 8011c42:	f8bb 1004 	ldrh.w	r1, [fp, #4]
    return area_p->y2 - area_p->y1 + 1;
 8011c46:	1af6      	subs	r6, r6, r3
    return area_p->x2 - area_p->x1 + 1;
 8011c48:	f8bb 3000 	ldrh.w	r3, [fp]
 8011c4c:	3101      	adds	r1, #1
 8011c4e:	f89a 7008 	ldrb.w	r7, [sl, #8]
    return area_p->y2 - area_p->y1 + 1;
 8011c52:	b236      	sxth	r6, r6
    lv_color_t mcolor = style->body.main_color;
 8011c54:	f8ba 8002 	ldrh.w	r8, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 8011c58:	1ac9      	subs	r1, r1, r3
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8011c5a:	9b08      	ldr	r3, [sp, #32]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011c5c:	4632      	mov	r2, r6
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8011c5e:	2bff      	cmp	r3, #255	; 0xff
 8011c60:	b209      	sxth	r1, r1
 8011c62:	bf1c      	itt	ne
 8011c64:	435f      	mulne	r7, r3
 8011c66:	0a3f      	lsrne	r7, r7, #8
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011c68:	f7ff fcdc 	bl	8011624 <lv_draw_cont_radius_corr>
    if(radius > height / 2) return;
 8011c6c:	eb06 73d6 	add.w	r3, r6, r6, lsr #31
 8011c70:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8011c74:	f340 83b0 	ble.w	80123d8 <lv_draw_rect+0xd7e>
        if(style->body.radius != 0) {
 8011c78:	f9ba 5006 	ldrsh.w	r5, [sl, #6]
 8011c7c:	2d00      	cmp	r5, #0
 8011c7e:	f000 8188 	beq.w	8011f92 <lv_draw_rect+0x938>
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8011c82:	f7f1 f98f 	bl	8002fa4 <lv_refr_get_disp_refreshing>
 8011c86:	f7f0 fd41 	bl	800270c <lv_disp_get_antialiasing>
    lv_color_t gcolor = style->body.grad_color;
 8011c8a:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8011c8e:	f89a 4008 	ldrb.w	r4, [sl, #8]
    uint16_t radius = style->body.radius;
 8011c92:	b2ad      	uxth	r5, r5
    lv_color_t gcolor = style->body.grad_color;
 8011c94:	9302      	str	r3, [sp, #8]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8011c96:	9b08      	ldr	r3, [sp, #32]
    return area_p->y2 - area_p->y1 + 1;
 8011c98:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 8011c9c:	2bff      	cmp	r3, #255	; 0xff
    return area_p->x2 - area_p->x1 + 1;
 8011c9e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8011ca2:	9014      	str	r0, [sp, #80]	; 0x50
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011ca4:	4628      	mov	r0, r5
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8011ca6:	bf18      	it	ne
 8011ca8:	9b08      	ldrne	r3, [sp, #32]
 8011caa:	f101 0101 	add.w	r1, r1, #1
 8011cae:	bf0c      	ite	eq
 8011cb0:	9404      	streq	r4, [sp, #16]
 8011cb2:	435c      	mulne	r4, r3
    lv_color_t mcolor = style->body.main_color;
 8011cb4:	f8ba 6002 	ldrh.w	r6, [sl, #2]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8011cb8:	bf18      	it	ne
 8011cba:	0a23      	lsrne	r3, r4, #8
    lv_circ_init(&cir, &cir_tmp, radius);
 8011cbc:	ac1e      	add	r4, sp, #120	; 0x78
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8011cbe:	bf18      	it	ne
 8011cc0:	9304      	strne	r3, [sp, #16]
    return area_p->y2 - area_p->y1 + 1;
 8011cc2:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 8011cc6:	3301      	adds	r3, #1
 8011cc8:	1a9b      	subs	r3, r3, r2
 8011cca:	b21b      	sxth	r3, r3
 8011ccc:	9305      	str	r3, [sp, #20]
    return area_p->x2 - area_p->x1 + 1;
 8011cce:	f8bb 3000 	ldrh.w	r3, [fp]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011cd2:	9a05      	ldr	r2, [sp, #20]
 8011cd4:	1ac9      	subs	r1, r1, r3
 8011cd6:	b209      	sxth	r1, r1
 8011cd8:	f7ff fca4 	bl	8011624 <lv_draw_cont_radius_corr>
 8011cdc:	9010      	str	r0, [sp, #64]	; 0x40
    lt_origo.x = coords->x1 + radius + aa;
 8011cde:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    lv_circ_init(&cir, &cir_tmp, radius);
 8011ce2:	4620      	mov	r0, r4
    lt_origo.x = coords->x1 + radius + aa;
 8011ce4:	f8bb 2000 	ldrh.w	r2, [fp]
 8011ce8:	930c      	str	r3, [sp, #48]	; 0x30
 8011cea:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 8011cee:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011cf0:	441a      	add	r2, r3
    lb_origo.y = coords->y2 - radius - aa;
 8011cf2:	f8bb 7006 	ldrh.w	r7, [fp, #6]
    rt_origo.x = coords->x2 - radius - aa;
 8011cf6:	f8bb 5004 	ldrh.w	r5, [fp, #4]
    lt_origo.x = coords->x1 + radius + aa;
 8011cfa:	440a      	add	r2, r1
    lb_origo.y = coords->y2 - radius - aa;
 8011cfc:	1aff      	subs	r7, r7, r3
    lt_origo.x = coords->x1 + radius + aa;
 8011cfe:	b212      	sxth	r2, r2
    lb_origo.y = coords->y2 - radius - aa;
 8011d00:	1a7f      	subs	r7, r7, r1
    lt_origo.x = coords->x1 + radius + aa;
 8011d02:	9206      	str	r2, [sp, #24]
    lt_origo.y = coords->y1 + radius + aa;
 8011d04:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 8011d08:	441a      	add	r2, r3
    rt_origo.x = coords->x2 - radius - aa;
 8011d0a:	1aeb      	subs	r3, r5, r3
    lt_origo.y = coords->y1 + radius + aa;
 8011d0c:	440a      	add	r2, r1
    rt_origo.x = coords->x2 - radius - aa;
 8011d0e:	1a5d      	subs	r5, r3, r1
    lt_origo.y = coords->y1 + radius + aa;
 8011d10:	b212      	sxth	r2, r2
    rt_origo.x = coords->x2 - radius - aa;
 8011d12:	b22b      	sxth	r3, r5
    lt_origo.y = coords->y1 + radius + aa;
 8011d14:	9209      	str	r2, [sp, #36]	; 0x24
    lb_origo.y = coords->y2 - radius - aa;
 8011d16:	b23a      	sxth	r2, r7
    rt_origo.x = coords->x2 - radius - aa;
 8011d18:	9307      	str	r3, [sp, #28]
    lb_origo.y = coords->y2 - radius - aa;
 8011d1a:	920a      	str	r2, [sp, #40]	; 0x28
    rt_origo.x = coords->x2 - radius - aa;
 8011d1c:	460a      	mov	r2, r1
    lv_circ_init(&cir, &cir_tmp, radius);
 8011d1e:	a91d      	add	r1, sp, #116	; 0x74
 8011d20:	f7fe fd2c 	bl	801077c <lv_circ_init>
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 8011d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d26:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 8011d2a:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
 8011d2e:	9806      	ldr	r0, [sp, #24]
 8011d30:	441a      	add	r2, r3
 8011d32:	9b07      	ldr	r3, [sp, #28]
 8011d34:	b212      	sxth	r2, r2
 8011d36:	440b      	add	r3, r1
 8011d38:	1a41      	subs	r1, r0, r1
 8011d3a:	9200      	str	r2, [sp, #0]
 8011d3c:	a824      	add	r0, sp, #144	; 0x90
 8011d3e:	b21b      	sxth	r3, r3
 8011d40:	b209      	sxth	r1, r1
 8011d42:	f7fe fc4b 	bl	80105dc <lv_area_set>
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8011d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d48:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 8011d4c:	f9bd 107a 	ldrsh.w	r1, [sp, #122]	; 0x7a
 8011d50:	9806      	ldr	r0, [sp, #24]
 8011d52:	441a      	add	r2, r3
 8011d54:	9b07      	ldr	r3, [sp, #28]
 8011d56:	b212      	sxth	r2, r2
 8011d58:	440b      	add	r3, r1
 8011d5a:	1a41      	subs	r1, r0, r1
 8011d5c:	9200      	str	r2, [sp, #0]
 8011d5e:	a826      	add	r0, sp, #152	; 0x98
 8011d60:	b21b      	sxth	r3, r3
 8011d62:	b209      	sxth	r1, r1
 8011d64:	f7fe fc3a 	bl	80105dc <lv_area_set>
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8011d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d6a:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 8011d6e:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
 8011d72:	9806      	ldr	r0, [sp, #24]
 8011d74:	1a9a      	subs	r2, r3, r2
 8011d76:	9b07      	ldr	r3, [sp, #28]
 8011d78:	b212      	sxth	r2, r2
 8011d7a:	440b      	add	r3, r1
 8011d7c:	1a41      	subs	r1, r0, r1
 8011d7e:	9200      	str	r2, [sp, #0]
 8011d80:	a822      	add	r0, sp, #136	; 0x88
 8011d82:	b21b      	sxth	r3, r3
 8011d84:	b209      	sxth	r1, r1
 8011d86:	f7fe fc29 	bl	80105dc <lv_area_set>
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8011d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d8c:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 8011d90:	f9bd 107a 	ldrsh.w	r1, [sp, #122]	; 0x7a
 8011d94:	9806      	ldr	r0, [sp, #24]
 8011d96:	1a9a      	subs	r2, r3, r2
 8011d98:	9b07      	ldr	r3, [sp, #28]
 8011d9a:	b212      	sxth	r2, r2
 8011d9c:	440b      	add	r3, r1
 8011d9e:	1a41      	subs	r1, r0, r1
 8011da0:	9200      	str	r2, [sp, #0]
 8011da2:	a820      	add	r0, sp, #128	; 0x80
 8011da4:	b21b      	sxth	r3, r3
 8011da6:	b209      	sxth	r1, r1
 8011da8:	f7fe fc18 	bl	80105dc <lv_area_set>
    lv_coord_t out_x_last      = radius;
 8011dac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    while(lv_circ_cont(&cir)) {
 8011dae:	9419      	str	r4, [sp, #100]	; 0x64
    lv_coord_t out_x_last      = radius;
 8011db0:	9303      	str	r3, [sp, #12]
    lv_coord_t out_y_seg_start = 0;
 8011db2:	2300      	movs	r3, #0
 8011db4:	930d      	str	r3, [sp, #52]	; 0x34
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8011db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011db8:	3301      	adds	r3, #1
 8011dba:	931b      	str	r3, [sp, #108]	; 0x6c
    while(lv_circ_cont(&cir)) {
 8011dbc:	9819      	ldr	r0, [sp, #100]	; 0x64
 8011dbe:	f7fe fce4 	bl	801078a <lv_circ_cont>
 8011dc2:	2800      	cmp	r0, #0
 8011dc4:	f040 8360 	bne.w	8012488 <lv_draw_rect+0xe2e>
    if(mcolor.full == gcolor.full)
 8011dc8:	9b02      	ldr	r3, [sp, #8]
 8011dca:	429e      	cmp	r6, r3
 8011dcc:	f040 8513 	bne.w	80127f6 <lv_draw_rect+0x119c>
        act_color = mcolor;
 8011dd0:	4632      	mov	r2, r6
    lv_draw_fill(&edge_top_area, mask, act_color, opa);
 8011dd2:	9b04      	ldr	r3, [sp, #16]
 8011dd4:	4649      	mov	r1, r9
 8011dd6:	a820      	add	r0, sp, #128	; 0x80
 8011dd8:	f001 fb8e 	bl	80134f8 <lv_draw_fill>
    if(edge_top_area.y1 != mid_top_area.y1) {
 8011ddc:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 8011de0:	f9bd 2082 	ldrsh.w	r2, [sp, #130]	; 0x82
 8011de4:	429a      	cmp	r2, r3
 8011de6:	d009      	beq.n	8011dfc <lv_draw_rect+0x7a2>
        if(mcolor.full == gcolor.full)
 8011de8:	9a02      	ldr	r2, [sp, #8]
 8011dea:	4296      	cmp	r6, r2
 8011dec:	f040 8516 	bne.w	801281c <lv_draw_rect+0x11c2>
            act_color = mcolor;
 8011df0:	4632      	mov	r2, r6
        lv_draw_fill(&mid_top_area, mask, act_color, opa);
 8011df2:	9b04      	ldr	r3, [sp, #16]
 8011df4:	4649      	mov	r1, r9
 8011df6:	a822      	add	r0, sp, #136	; 0x88
 8011df8:	f001 fb7e 	bl	80134f8 <lv_draw_fill>
    if(mcolor.full == gcolor.full)
 8011dfc:	9b02      	ldr	r3, [sp, #8]
 8011dfe:	429e      	cmp	r6, r3
 8011e00:	f040 851d 	bne.w	801283e <lv_draw_rect+0x11e4>
        act_color = mcolor;
 8011e04:	4632      	mov	r2, r6
    lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 8011e06:	9b04      	ldr	r3, [sp, #16]
 8011e08:	4649      	mov	r1, r9
 8011e0a:	a824      	add	r0, sp, #144	; 0x90
 8011e0c:	f001 fb74 	bl	80134f8 <lv_draw_fill>
    if(edge_bot_area.y1 != mid_bot_area.y1) {
 8011e10:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
 8011e14:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 8011e18:	429a      	cmp	r2, r3
 8011e1a:	d009      	beq.n	8011e30 <lv_draw_rect+0x7d6>
        if(mcolor.full == gcolor.full)
 8011e1c:	9a02      	ldr	r2, [sp, #8]
 8011e1e:	4296      	cmp	r6, r2
 8011e20:	f040 8520 	bne.w	8012864 <lv_draw_rect+0x120a>
            act_color = mcolor;
 8011e24:	4632      	mov	r2, r6
        lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 8011e26:	9b04      	ldr	r3, [sp, #16]
 8011e28:	4649      	mov	r1, r9
 8011e2a:	a826      	add	r0, sp, #152	; 0x98
 8011e2c:	f001 fb64 	bl	80134f8 <lv_draw_fill>
    if(aa) {
 8011e30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	f000 80ad 	beq.w	8011f92 <lv_draw_rect+0x938>
        edge_top_area.x1 = coords->x1 + radius + 2;
 8011e38:	f8bb 3000 	ldrh.w	r3, [fp]
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 8011e3c:	4649      	mov	r1, r9
        edge_top_area.x1 = coords->x1 + radius + 2;
 8011e3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 8011e40:	a820      	add	r0, sp, #128	; 0x80
        edge_top_area.x1 = coords->x1 + radius + 2;
 8011e42:	3302      	adds	r3, #2
 8011e44:	4413      	add	r3, r2
 8011e46:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
        edge_top_area.x2 = coords->x2 - radius - 2;
 8011e4a:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8011e4e:	3b02      	subs	r3, #2
 8011e50:	1a9b      	subs	r3, r3, r2
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 8011e52:	f8ba 2002 	ldrh.w	r2, [sl, #2]
        edge_top_area.x2 = coords->x2 - radius - 2;
 8011e56:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
        edge_top_area.y1 = coords->y1;
 8011e5a:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
 8011e5e:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
        edge_top_area.y2 = coords->y1;
 8011e62:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 8011e66:	9b04      	ldr	r3, [sp, #16]
 8011e68:	f001 fb46 	bl	80134f8 <lv_draw_fill>
        edge_top_area.y1 = coords->y2;
 8011e6c:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 8011e70:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8011e74:	4649      	mov	r1, r9
        edge_top_area.y1 = coords->y2;
 8011e76:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 8011e7a:	a820      	add	r0, sp, #128	; 0x80
        edge_top_area.y2 = coords->y2;
 8011e7c:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 8011e80:	9b04      	ldr	r3, [sp, #16]
 8011e82:	f001 fb39 	bl	80134f8 <lv_draw_fill>
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8011e86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011e88:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 8011e8c:	4631      	mov	r1, r6
 8011e8e:	f8bd 0008 	ldrh.w	r0, [sp, #8]
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8011e92:	1a9b      	subs	r3, r3, r2
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 8011e94:	9a03      	ldr	r2, [sp, #12]
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8011e96:	b21b      	sxth	r3, r3
 8011e98:	9311      	str	r3, [sp, #68]	; 0x44
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 8011e9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011e9c:	1a9c      	subs	r4, r3, r2
 8011e9e:	9b05      	ldr	r3, [sp, #20]
 8011ea0:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 8011ea4:	fbb4 f4f3 	udiv	r4, r4, r3
 8011ea8:	b2e4      	uxtb	r4, r4
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 8011eaa:	4622      	mov	r2, r4
 8011eac:	f7ff fb8f 	bl	80115ce <lv_color_mix>
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 8011eb0:	4622      	mov	r2, r4
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 8011eb2:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 8011eb6:	4630      	mov	r0, r6
 8011eb8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8011ebc:	f7ff fb87 	bl	80115ce <lv_color_mix>
 8011ec0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011ec2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011ec4:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
        for(i = 0; i < seg_size; i++) {
 8011ec8:	1a9b      	subs	r3, r3, r2
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8011eca:	9a03      	ldr	r2, [sp, #12]
 8011ecc:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 8011ed0:	9312      	str	r3, [sp, #72]	; 0x48
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	9310      	str	r3, [sp, #64]	; 0x40
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8011ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ed8:	3301      	adds	r3, #1
 8011eda:	4413      	add	r3, r2
 8011edc:	b21b      	sxth	r3, r3
 8011ede:	9315      	str	r3, [sp, #84]	; 0x54
 8011ee0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8011ee4:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8011ee8:	930c      	str	r3, [sp, #48]	; 0x30
        for(i = 0; i < seg_size; i++) {
 8011eea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011eec:	428b      	cmp	r3, r1
 8011eee:	f300 84ca 	bgt.w	8012886 <lv_draw_rect+0x122c>
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 8011ef2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011ef4:	9b03      	ldr	r3, [sp, #12]
 8011ef6:	1a9b      	subs	r3, r3, r2
 8011ef8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	bfb8      	it	lt
 8011efe:	425b      	neglt	r3, r3
 8011f00:	4293      	cmp	r3, r2
 8011f02:	d146      	bne.n	8011f92 <lv_draw_rect+0x938>
            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
 8011f04:	9b03      	ldr	r3, [sp, #12]
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 8011f06:	4631      	mov	r1, r6
 8011f08:	f8bd 0008 	ldrh.w	r0, [sp, #8]
            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
 8011f0c:	ebc3 2403 	rsb	r4, r3, r3, lsl #8
 8011f10:	9b05      	ldr	r3, [sp, #20]
 8011f12:	fbb4 f4f3 	udiv	r4, r4, r3
 8011f16:	b2e4      	uxtb	r4, r4
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 8011f18:	4622      	mov	r2, r4
 8011f1a:	f7ff fb58 	bl	80115ce <lv_color_mix>
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 8011f1e:	4622      	mov	r2, r4
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 8011f20:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 8011f24:	4630      	mov	r0, r6
 8011f26:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8011f2a:	f7ff fb50 	bl	80115ce <lv_color_mix>
            lv_opa_t aa_opa = opa >> 1;
 8011f2e:	9b04      	ldr	r3, [sp, #16]
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom,
 8011f30:	9a03      	ldr	r2, [sp, #12]
            lv_opa_t aa_opa = opa >> 1;
 8011f32:	085c      	lsrs	r4, r3, #1
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom,
 8011f34:	9b07      	ldr	r3, [sp, #28]
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 8011f36:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom,
 8011f3a:	4413      	add	r3, r2
 8011f3c:	9400      	str	r4, [sp, #0]
 8011f3e:	b21d      	sxth	r5, r3
 8011f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f42:	4413      	add	r3, r2
 8011f44:	464a      	mov	r2, r9
 8011f46:	b21f      	sxth	r7, r3
 8011f48:	b283      	uxth	r3, r0
 8011f4a:	4628      	mov	r0, r5
 8011f4c:	4639      	mov	r1, r7
 8011f4e:	f001 fa83 	bl	8013458 <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask, aa_color_hor_bottom,
 8011f52:	9b06      	ldr	r3, [sp, #24]
 8011f54:	9a03      	ldr	r2, [sp, #12]
 8011f56:	4639      	mov	r1, r7
 8011f58:	9400      	str	r4, [sp, #0]
 8011f5a:	1a9e      	subs	r6, r3, r2
 8011f5c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8011f60:	464a      	mov	r2, r9
 8011f62:	b236      	sxth	r6, r6
 8011f64:	4630      	mov	r0, r6
 8011f66:	f001 fa77 	bl	8013458 <lv_draw_px>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask, aa_color_hor_top,
 8011f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f6c:	9a03      	ldr	r2, [sp, #12]
 8011f6e:	4630      	mov	r0, r6
 8011f70:	9400      	str	r4, [sp, #0]
 8011f72:	1a9f      	subs	r7, r3, r2
 8011f74:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8011f78:	464a      	mov	r2, r9
 8011f7a:	b23f      	sxth	r7, r7
 8011f7c:	4639      	mov	r1, r7
 8011f7e:	f001 fa6b 	bl	8013458 <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask, aa_color_hor_top,
 8011f82:	9400      	str	r4, [sp, #0]
 8011f84:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8011f88:	464a      	mov	r2, r9
 8011f8a:	4639      	mov	r1, r7
 8011f8c:	4628      	mov	r0, r5
 8011f8e:	f001 fa63 	bl	8013458 <lv_draw_px>
    if(style->body.border.width != 0 && style->body.border.part != LV_BORDER_NONE &&
 8011f92:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	f000 81a6 	beq.w	80122e8 <lv_draw_rect+0xc8e>
 8011f9c:	f89a 300e 	ldrb.w	r3, [sl, #14]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	f000 81a1 	beq.w	80122e8 <lv_draw_rect+0xc8e>
 8011fa6:	f89a 300f 	ldrb.w	r3, [sl, #15]
 8011faa:	2b0f      	cmp	r3, #15
 8011fac:	f240 819c 	bls.w	80122e8 <lv_draw_rect+0xc8e>
    uint16_t radius = style->body.radius;
 8011fb0:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8011fb4:	9302      	str	r3, [sp, #8]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8011fb6:	f7f0 fff5 	bl	8002fa4 <lv_refr_get_disp_refreshing>
 8011fba:	f7f0 fba7 	bl	800270c <lv_disp_get_antialiasing>
 8011fbe:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8011fc2:	f8bb 3000 	ldrh.w	r3, [fp]
 8011fc6:	4680      	mov	r8, r0
    return area_p->y2 - area_p->y1 + 1;
 8011fc8:	f8bb 2006 	ldrh.w	r2, [fp, #6]
    return area_p->x2 - area_p->x1 + 1;
 8011fcc:	3101      	adds	r1, #1
 8011fce:	f89a 400f 	ldrb.w	r4, [sl, #15]
 8011fd2:	1ac9      	subs	r1, r1, r3
    return area_p->y2 - area_p->y1 + 1;
 8011fd4:	3201      	adds	r2, #1
 8011fd6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
    return area_p->x2 - area_p->x1 + 1;
 8011fda:	b209      	sxth	r1, r1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8011fdc:	9802      	ldr	r0, [sp, #8]
    return area_p->y2 - area_p->y1 + 1;
 8011fde:	1ad2      	subs	r2, r2, r3
    lv_coord_t bwidth = style->body.border.width;
 8011fe0:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
    lv_border_part_t part = style->body.border.part;
 8011fe4:	f89a 600e 	ldrb.w	r6, [sl, #14]
    lv_coord_t bwidth = style->body.border.width;
 8011fe8:	9303      	str	r3, [sp, #12]
 8011fea:	b212      	sxth	r2, r2
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 8011fec:	9b08      	ldr	r3, [sp, #32]
    lv_color_t color      = style->body.border.color;
 8011fee:	f8ba 700a 	ldrh.w	r7, [sl, #10]
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 8011ff2:	2bff      	cmp	r3, #255	; 0xff
 8011ff4:	bf18      	it	ne
 8011ff6:	435c      	mulne	r4, r3
    bwidth--;
 8011ff8:	9b03      	ldr	r3, [sp, #12]
 8011ffa:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 8011ffe:	bf18      	it	ne
 8012000:	0a24      	lsrne	r4, r4, #8
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8012002:	f7ff fb0f 	bl	8011624 <lv_draw_cont_radius_corr>
 8012006:	9002      	str	r0, [sp, #8]
    bwidth--;
 8012008:	b22d      	sxth	r5, r5
    if(radius < bwidth) {
 801200a:	42a8      	cmp	r0, r5
 801200c:	f280 84cf 	bge.w	80129ae <lv_draw_rect+0x1354>
        length_corr = bwidth - radius - aa;
 8012010:	eba5 0308 	sub.w	r3, r5, r8
 8012014:	1a1b      	subs	r3, r3, r0
 8012016:	b21b      	sxth	r3, r3
 8012018:	9305      	str	r3, [sp, #20]
        corner_size = bwidth;
 801201a:	462b      	mov	r3, r5
    if(style->body.radius == 0) {
 801201c:	f006 0102 	and.w	r1, r6, #2
 8012020:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
 8012024:	9104      	str	r1, [sp, #16]
 8012026:	2a00      	cmp	r2, #0
 8012028:	f040 84c8 	bne.w	80129bc <lv_draw_rect+0x1362>
        if(part & LV_BORDER_TOP) {
 801202c:	b1a1      	cbz	r1, 8012058 <lv_draw_rect+0x9fe>
            work_area.x1 = coords->x1;
 801202e:	f8bb 3000 	ldrh.w	r3, [fp]
            lv_draw_fill(&work_area, mask, color, opa);
 8012032:	463a      	mov	r2, r7
 8012034:	4649      	mov	r1, r9
 8012036:	a826      	add	r0, sp, #152	; 0x98
            work_area.x1 = coords->x1;
 8012038:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            work_area.x2 = coords->x2;
 801203c:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8012040:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.y1 = coords->y1;
 8012044:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
 8012048:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y1 + bwidth;
 801204c:	442b      	add	r3, r5
 801204e:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 8012052:	4623      	mov	r3, r4
 8012054:	f001 fa50 	bl	80134f8 <lv_draw_fill>
        if(part & LV_BORDER_RIGHT) {
 8012058:	0731      	lsls	r1, r6, #28
 801205a:	d520      	bpl.n	801209e <lv_draw_rect+0xa44>
            work_area.x1 = coords->x2 - bwidth;
 801205c:	f9bb 3004 	ldrsh.w	r3, [fp, #4]
            lv_draw_fill(&work_area, mask, color, opa);
 8012060:	4649      	mov	r1, r9
 8012062:	a826      	add	r0, sp, #152	; 0x98
            work_area.x1 = coords->x2 - bwidth;
 8012064:	1b5a      	subs	r2, r3, r5
            work_area.x2 = coords->x2;
 8012066:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 801206a:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
            work_area.x1 = coords->x2 - bwidth;
 801206e:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 8012072:	9a04      	ldr	r2, [sp, #16]
 8012074:	2a00      	cmp	r2, #0
 8012076:	9a03      	ldr	r2, [sp, #12]
 8012078:	bf08      	it	eq
 801207a:	2200      	moveq	r2, #0
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 801207c:	f016 0f01 	tst.w	r6, #1
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 8012080:	4413      	add	r3, r2
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 8012082:	9a03      	ldr	r2, [sp, #12]
 8012084:	bf08      	it	eq
 8012086:	2200      	moveq	r2, #0
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 8012088:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 801208c:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
 8012090:	1a9b      	subs	r3, r3, r2
            lv_draw_fill(&work_area, mask, color, opa);
 8012092:	463a      	mov	r2, r7
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 8012094:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 8012098:	4623      	mov	r3, r4
 801209a:	f001 fa2d 	bl	80134f8 <lv_draw_fill>
        if(part & LV_BORDER_LEFT) {
 801209e:	f016 0f04 	tst.w	r6, #4
 80120a2:	f006 0601 	and.w	r6, r6, #1
 80120a6:	d020      	beq.n	80120ea <lv_draw_rect+0xa90>
            work_area.x1 = coords->x1;
 80120a8:	f9bb 3000 	ldrsh.w	r3, [fp]
            lv_draw_fill(&work_area, mask, color, opa);
 80120ac:	4649      	mov	r1, r9
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 80120ae:	9a04      	ldr	r2, [sp, #16]
            lv_draw_fill(&work_area, mask, color, opa);
 80120b0:	a826      	add	r0, sp, #152	; 0x98
            work_area.x1 = coords->x1;
 80120b2:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + bwidth;
 80120b6:	442b      	add	r3, r5
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 80120b8:	2a00      	cmp	r2, #0
 80120ba:	9a03      	ldr	r2, [sp, #12]
            work_area.x2 = coords->x1 + bwidth;
 80120bc:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 80120c0:	bf08      	it	eq
 80120c2:	2200      	moveq	r2, #0
 80120c4:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 80120c8:	2e00      	cmp	r6, #0
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 80120ca:	4413      	add	r3, r2
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 80120cc:	9a03      	ldr	r2, [sp, #12]
 80120ce:	bf08      	it	eq
 80120d0:	2200      	moveq	r2, #0
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 80120d2:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 80120d6:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
 80120da:	9203      	str	r2, [sp, #12]
 80120dc:	1a9b      	subs	r3, r3, r2
            lv_draw_fill(&work_area, mask, color, opa);
 80120de:	463a      	mov	r2, r7
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 80120e0:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 80120e4:	4623      	mov	r3, r4
 80120e6:	f001 fa07 	bl	80134f8 <lv_draw_fill>
        if(part & LV_BORDER_BOTTOM) {
 80120ea:	b1a6      	cbz	r6, 8012116 <lv_draw_rect+0xabc>
            work_area.x1 = coords->x1;
 80120ec:	f8bb 3000 	ldrh.w	r3, [fp]
 80120f0:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            work_area.x2 = coords->x2;
 80120f4:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 80120f8:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.y1 = coords->y2 - bwidth;
 80120fc:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
 8012100:	1b5d      	subs	r5, r3, r5
 8012102:	f8ad 509a 	strh.w	r5, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2;
 8012106:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 801210a:	463a      	mov	r2, r7
 801210c:	4623      	mov	r3, r4
 801210e:	4649      	mov	r1, r9
 8012110:	a826      	add	r0, sp, #152	; 0x98
 8012112:	f001 f9f1 	bl	80134f8 <lv_draw_fill>
        if(style->body.radius != 0) {
 8012116:	f9ba 4006 	ldrsh.w	r4, [sl, #6]
 801211a:	2c00      	cmp	r4, #0
 801211c:	f000 80e4 	beq.w	80122e8 <lv_draw_rect+0xc8e>
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8012120:	f7f0 ff40 	bl	8002fa4 <lv_refr_get_disp_refreshing>
 8012124:	f7f0 faf2 	bl	800270c <lv_disp_get_antialiasing>
    lv_color_t color      = style->body.border.color;
 8012128:	f8ba 300a 	ldrh.w	r3, [sl, #10]
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 801212c:	900e      	str	r0, [sp, #56]	; 0x38
    uint16_t radius       = style->body.radius;
 801212e:	b2a4      	uxth	r4, r4
    lv_color_t color      = style->body.border.color;
 8012130:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    lv_border_part_t part = style->body.border.part;
 8012134:	f89a 300e 	ldrb.w	r3, [sl, #14]
    lv_coord_t bwidth     = style->body.border.width;
 8012138:	f9ba 500c 	ldrsh.w	r5, [sl, #12]
    lv_border_part_t part = style->body.border.part;
 801213c:	9302      	str	r3, [sp, #8]
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
 801213e:	9b08      	ldr	r3, [sp, #32]
 8012140:	2bff      	cmp	r3, #255	; 0xff
 8012142:	f89a 300f 	ldrb.w	r3, [sl, #15]
 8012146:	bf1e      	ittt	ne
 8012148:	9a08      	ldrne	r2, [sp, #32]
 801214a:	4353      	mulne	r3, r2
 801214c:	0a1b      	lsrne	r3, r3, #8
 801214e:	9305      	str	r3, [sp, #20]
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 8012150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012152:	2b00      	cmp	r3, #0
 8012154:	f040 8588 	bne.w	8012c68 <lv_draw_rect+0x160e>
    bwidth--;
 8012158:	3d01      	subs	r5, #1
 801215a:	f8bb 2006 	ldrh.w	r2, [fp, #6]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 801215e:	4620      	mov	r0, r4
 8012160:	f8bb 3002 	ldrh.w	r3, [fp, #2]
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 8012164:	b22d      	sxth	r5, r5
    return area_p->x2 - area_p->x1 + 1;
 8012166:	f8bb 1004 	ldrh.w	r1, [fp, #4]
    return area_p->y2 - area_p->y1 + 1;
 801216a:	3201      	adds	r2, #1
    return area_p->x2 - area_p->x1 + 1;
 801216c:	3101      	adds	r1, #1
    return area_p->y2 - area_p->y1 + 1;
 801216e:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 8012170:	f8bb 3000 	ldrh.w	r3, [fp]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8012174:	b212      	sxth	r2, r2
 8012176:	1ac9      	subs	r1, r1, r3
 8012178:	b209      	sxth	r1, r1
 801217a:	f7ff fa53 	bl	8011624 <lv_draw_cont_radius_corr>
    lt_origo.x = coords->x1 + radius + aa;
 801217e:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 8012182:	f8bb 2000 	ldrh.w	r2, [fp]
 8012186:	b204      	sxth	r4, r0
    lv_circ_init(&cir_out, &tmp_out, radius);
 8012188:	a91e      	add	r1, sp, #120	; 0x78
 801218a:	a822      	add	r0, sp, #136	; 0x88
    lt_origo.x = coords->x1 + radius + aa;
 801218c:	441a      	add	r2, r3
    lv_coord_t radius_in = radius - bwidth;
 801218e:	1b65      	subs	r5, r4, r5
    lt_origo.x = coords->x1 + radius + aa;
 8012190:	4422      	add	r2, r4
 8012192:	b212      	sxth	r2, r2
 8012194:	9203      	str	r2, [sp, #12]
    lt_origo.y = coords->y1 + radius + aa;
 8012196:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 801219a:	441a      	add	r2, r3
 801219c:	4422      	add	r2, r4
 801219e:	b212      	sxth	r2, r2
 80121a0:	9204      	str	r2, [sp, #16]
    lb_origo.y = coords->y2 - radius - aa;
 80121a2:	f8bb 2006 	ldrh.w	r2, [fp, #6]
 80121a6:	1ad2      	subs	r2, r2, r3
 80121a8:	1b12      	subs	r2, r2, r4
 80121aa:	fa0f f882 	sxth.w	r8, r2
    rt_origo.x = coords->x2 - radius - aa;
 80121ae:	f8bb 2004 	ldrh.w	r2, [fp, #4]
    lv_coord_t in_y_seg_start = 0;
 80121b2:	f04f 0b00 	mov.w	fp, #0
    rt_origo.x = coords->x2 - radius - aa;
 80121b6:	1ad3      	subs	r3, r2, r3
    lv_circ_init(&cir_out, &tmp_out, radius);
 80121b8:	4622      	mov	r2, r4
    rt_origo.x = coords->x2 - radius - aa;
 80121ba:	1b1b      	subs	r3, r3, r4
 80121bc:	b21b      	sxth	r3, r3
 80121be:	9307      	str	r3, [sp, #28]
    lv_circ_init(&cir_out, &tmp_out, radius);
 80121c0:	f7fe fadc 	bl	801077c <lv_circ_init>
    lv_coord_t radius_in = radius - bwidth;
 80121c4:	b22b      	sxth	r3, r5
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 80121c6:	a920      	add	r1, sp, #128	; 0x80
 80121c8:	a824      	add	r0, sp, #144	; 0x90
 80121ca:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
    lv_coord_t radius_in = radius - bwidth;
 80121ce:	9306      	str	r3, [sp, #24]
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 80121d0:	f7fe fad4 	bl	801077c <lv_circ_init>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 80121d4:	9b07      	ldr	r3, [sp, #28]
    lv_coord_t out_y_seg_start = 0;
 80121d6:	f8cd b020 	str.w	fp, [sp, #32]
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 80121da:	3b01      	subs	r3, #1
 80121dc:	9314      	str	r3, [sp, #80]	; 0x50
 80121de:	9b02      	ldr	r3, [sp, #8]
 80121e0:	f003 0309 	and.w	r3, r3, #9
 80121e4:	9310      	str	r3, [sp, #64]	; 0x40
    while(cir_out.y <= cir_out.x) {
 80121e6:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 80121ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80121ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80121ee:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
 80121f2:	4293      	cmp	r3, r2
 80121f4:	f280 853b 	bge.w	8012c6e <lv_draw_rect+0x1614>
    if(aa) {
 80121f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d074      	beq.n	80122e8 <lv_draw_rect+0xc8e>
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 80121fe:	4613      	mov	r3, r2
 8012200:	9a08      	ldr	r2, [sp, #32]
 8012202:	1a9b      	subs	r3, r3, r2
 8012204:	b21b      	sxth	r3, r3
 8012206:	930a      	str	r3, [sp, #40]	; 0x28
 8012208:	2300      	movs	r3, #0
 801220a:	9309      	str	r3, [sp, #36]	; 0x24
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 801220c:	9b07      	ldr	r3, [sp, #28]
 801220e:	3301      	adds	r3, #1
 8012210:	4423      	add	r3, r4
 8012212:	b21b      	sxth	r3, r3
 8012214:	930b      	str	r3, [sp, #44]	; 0x2c
 8012216:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
        for(i = 0; i < seg_size; i++) {
 801221a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801221c:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8012220:	428b      	cmp	r3, r1
 8012222:	f300 87b6 	bgt.w	8013192 <lv_draw_rect+0x1b38>
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 8012226:	9b08      	ldr	r3, [sp, #32]
 8012228:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801222a:	1ae3      	subs	r3, r4, r3
 801222c:	2b00      	cmp	r3, #0
 801222e:	bfb8      	it	lt
 8012230:	425b      	neglt	r3, r3
 8012232:	4293      	cmp	r3, r2
 8012234:	d145      	bne.n	80122c2 <lv_draw_rect+0xc68>
            lv_opa_t aa_opa = opa >> 1;
 8012236:	9b05      	ldr	r3, [sp, #20]
 8012238:	085d      	lsrs	r5, r3, #1
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 801223a:	9b02      	ldr	r3, [sp, #8]
 801223c:	f003 0309 	and.w	r3, r3, #9
 8012240:	2b09      	cmp	r3, #9
 8012242:	d10b      	bne.n	801225c <lv_draw_rect+0xc02>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask,
 8012244:	9b07      	ldr	r3, [sp, #28]
 8012246:	eb08 0104 	add.w	r1, r8, r4
 801224a:	9500      	str	r5, [sp, #0]
 801224c:	464a      	mov	r2, r9
 801224e:	1918      	adds	r0, r3, r4
 8012250:	b209      	sxth	r1, r1
 8012252:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8012256:	b200      	sxth	r0, r0
 8012258:	f001 f8fe 	bl	8013458 <lv_draw_px>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 801225c:	9b02      	ldr	r3, [sp, #8]
 801225e:	f003 0305 	and.w	r3, r3, #5
 8012262:	2b05      	cmp	r3, #5
 8012264:	d10b      	bne.n	801227e <lv_draw_rect+0xc24>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask,
 8012266:	9b03      	ldr	r3, [sp, #12]
 8012268:	eb08 0104 	add.w	r1, r8, r4
 801226c:	9500      	str	r5, [sp, #0]
 801226e:	464a      	mov	r2, r9
 8012270:	1b18      	subs	r0, r3, r4
 8012272:	b209      	sxth	r1, r1
 8012274:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8012278:	b200      	sxth	r0, r0
 801227a:	f001 f8ed 	bl	8013458 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 801227e:	9b02      	ldr	r3, [sp, #8]
 8012280:	f003 0306 	and.w	r3, r3, #6
 8012284:	2b06      	cmp	r3, #6
 8012286:	d10b      	bne.n	80122a0 <lv_draw_rect+0xc46>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask,
 8012288:	9b04      	ldr	r3, [sp, #16]
 801228a:	464a      	mov	r2, r9
 801228c:	9500      	str	r5, [sp, #0]
 801228e:	1b19      	subs	r1, r3, r4
 8012290:	9b03      	ldr	r3, [sp, #12]
 8012292:	1b18      	subs	r0, r3, r4
 8012294:	b209      	sxth	r1, r1
 8012296:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 801229a:	b200      	sxth	r0, r0
 801229c:	f001 f8dc 	bl	8013458 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 80122a0:	9b02      	ldr	r3, [sp, #8]
 80122a2:	f003 030a 	and.w	r3, r3, #10
 80122a6:	2b0a      	cmp	r3, #10
 80122a8:	d10b      	bne.n	80122c2 <lv_draw_rect+0xc68>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask,
 80122aa:	9b04      	ldr	r3, [sp, #16]
 80122ac:	464a      	mov	r2, r9
 80122ae:	9500      	str	r5, [sp, #0]
 80122b0:	1b19      	subs	r1, r3, r4
 80122b2:	9b07      	ldr	r3, [sp, #28]
 80122b4:	1918      	adds	r0, r3, r4
 80122b6:	b209      	sxth	r1, r1
 80122b8:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 80122bc:	b200      	sxth	r0, r0
 80122be:	f001 f8cb 	bl	8013458 <lv_draw_px>
        seg_size     = in_y_seg_end - in_y_seg_start;
 80122c2:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
 80122c6:	2600      	movs	r6, #0
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 80122c8:	9a06      	ldr	r2, [sp, #24]
        seg_size     = in_y_seg_end - in_y_seg_start;
 80122ca:	eba3 030b 	sub.w	r3, r3, fp
 80122ce:	b21b      	sxth	r3, r3
 80122d0:	9308      	str	r3, [sp, #32]
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 80122d2:	9b07      	ldr	r3, [sp, #28]
 80122d4:	3b01      	subs	r3, #1
 80122d6:	4413      	add	r3, r2
 80122d8:	b21b      	sxth	r3, r3
 80122da:	930c      	str	r3, [sp, #48]	; 0x30
 80122dc:	b231      	sxth	r1, r6
        for(i = 0; i < seg_size; i++) {
 80122de:	9b08      	ldr	r3, [sp, #32]
 80122e0:	b2b4      	uxth	r4, r6
 80122e2:	428b      	cmp	r3, r1
 80122e4:	f300 87e7 	bgt.w	80132b6 <lv_draw_rect+0x1c5c>
}
 80122e8:	b029      	add	sp, #164	; 0xa4
 80122ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 80122ee:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
        lv_circ_next(&circ, &circ_tmp);
 80122f2:	a922      	add	r1, sp, #136	; 0x88
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 80122f4:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
        lv_circ_next(&circ, &circ_tmp);
 80122f8:	a824      	add	r0, sp, #144	; 0x90
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 80122fa:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 80122fe:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 8012302:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
        lv_circ_next(&circ, &circ_tmp);
 8012306:	f7fe fa49 	bl	801079c <lv_circ_next>
 801230a:	e435      	b.n	8011b78 <lv_draw_rect+0x51e>
        line_1d_blur[col] = (uint32_t)((uint32_t)(swidth - col) * opa / 2) / (swidth);
 801230c:	0848      	lsrs	r0, r1, #1
 801230e:	1ac9      	subs	r1, r1, r3
 8012310:	fbb0 f0f5 	udiv	r0, r0, r5
 8012314:	f808 0002 	strb.w	r0, [r8, r2]
 8012318:	3201      	adds	r2, #1
 801231a:	e43f      	b.n	8011b9c <lv_draw_rect+0x542>
        point_l.x = ofs_l.x - col;
 801231c:	9a05      	ldr	r2, [sp, #20]
        point_l.y = ofs_l.y + curve_x[col];
 801231e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012320:	1ad3      	subs	r3, r2, r3
 8012322:	f937 2014 	ldrsh.w	r2, [r7, r4, lsl #1]
 8012326:	4411      	add	r1, r2
 8012328:	b21b      	sxth	r3, r3
 801232a:	b209      	sxth	r1, r1
 801232c:	930e      	str	r3, [sp, #56]	; 0x38
 801232e:	0063      	lsls	r3, r4, #1
 8012330:	910d      	str	r1, [sp, #52]	; 0x34
        point_r.x = ofs_r.x + col;
 8012332:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 8012336:	910a      	str	r1, [sp, #40]	; 0x28
        int16_t diff = col == 0 ? 0 : curve_x[col - 1] - curve_x[col];
 8012338:	b124      	cbz	r4, 8012344 <lv_draw_rect+0xcea>
 801233a:	443b      	add	r3, r7
 801233c:	f833 4c02 	ldrh.w	r4, [r3, #-2]
 8012340:	1aa4      	subs	r4, r4, r2
 8012342:	b224      	sxth	r4, r4
    ofs_lb.x = coords->x1 + radius + aa;
 8012344:	2300      	movs	r3, #0
 8012346:	9304      	str	r3, [sp, #16]
 8012348:	9b04      	ldr	r3, [sp, #16]
 801234a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801234c:	4413      	add	r3, r2
 801234e:	b21b      	sxth	r3, r3
 8012350:	930b      	str	r3, [sp, #44]	; 0x2c
        for(d = 0; d < swidth; d++) {
 8012352:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8012356:	429d      	cmp	r5, r3
 8012358:	dc07      	bgt.n	801236a <lv_draw_rect+0xd10>
 801235a:	9b03      	ldr	r3, [sp, #12]
 801235c:	3301      	adds	r3, #1
 801235e:	9303      	str	r3, [sp, #12]
 8012360:	9b07      	ldr	r3, [sp, #28]
 8012362:	3301      	adds	r3, #1
 8012364:	b29b      	uxth	r3, r3
 8012366:	9307      	str	r3, [sp, #28]
 8012368:	e434      	b.n	8011bd4 <lv_draw_rect+0x57a>
            if(diff == 0) {
 801236a:	f818 2003 	ldrb.w	r2, [r8, r3]
 801236e:	9202      	str	r2, [sp, #8]
 8012370:	b12c      	cbz	r4, 801237e <lv_draw_rect+0xd24>
                px_opa = (uint16_t)((uint16_t)line_1d_blur[d] + line_1d_blur[d - diff]) >> 1;
 8012372:	1b1b      	subs	r3, r3, r4
 8012374:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012378:	4413      	add	r3, r2
 801237a:	085b      	lsrs	r3, r3, #1
 801237c:	9302      	str	r3, [sp, #8]
            lv_draw_px(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 801237e:	9b02      	ldr	r3, [sp, #8]
 8012380:	464a      	mov	r2, r9
 8012382:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012384:	9300      	str	r3, [sp, #0]
 8012386:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012388:	f8ba 3010 	ldrh.w	r3, [sl, #16]
 801238c:	f001 f864 	bl	8013458 <lv_draw_px>
            if(point_r.x > ofs_l.x) {
 8012390:	9b05      	ldr	r3, [sp, #20]
 8012392:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012394:	4293      	cmp	r3, r2
 8012396:	da08      	bge.n	80123aa <lv_draw_rect+0xd50>
                lv_draw_px(point_r.x, point_r.y, mask, style->body.shadow.color, px_opa);
 8012398:	9b02      	ldr	r3, [sp, #8]
 801239a:	464a      	mov	r2, r9
 801239c:	9300      	str	r3, [sp, #0]
 801239e:	f8ba 3010 	ldrh.w	r3, [sl, #16]
 80123a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80123a6:	f001 f857 	bl	8013458 <lv_draw_px>
            point_r.y++;
 80123aa:	9b04      	ldr	r3, [sp, #16]
 80123ac:	3301      	adds	r3, #1
 80123ae:	e7ca      	b.n	8012346 <lv_draw_rect+0xcec>
        lv_draw_fill(&area_mid, mask, style->body.shadow.color, line_1d_blur[d]);
 80123b0:	f818 3003 	ldrb.w	r3, [r8, r3]
 80123b4:	4649      	mov	r1, r9
 80123b6:	f8ba 2010 	ldrh.w	r2, [sl, #16]
 80123ba:	a826      	add	r0, sp, #152	; 0x98
 80123bc:	f001 f89c 	bl	80134f8 <lv_draw_fill>
        area_mid.y1++;
 80123c0:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
 80123c4:	3301      	adds	r3, #1
 80123c6:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        area_mid.y2++;
 80123ca:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
 80123ce:	3301      	adds	r3, #1
 80123d0:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
 80123d4:	4623      	mov	r3, r4
 80123d6:	e413      	b.n	8011c00 <lv_draw_rect+0x5a6>
    work_area.x1 = coords->x1;
 80123d8:	f8bb 3000 	ldrh.w	r3, [fp]
 80123dc:	b200      	sxth	r0, r0
 80123de:	f8bb 5006 	ldrh.w	r5, [fp, #6]
 80123e2:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
    work_area.x2 = coords->x2;
 80123e6:	f8bb 3004 	ldrh.w	r3, [fp, #4]
    if(mcolor.full == gcolor.full) {
 80123ea:	9902      	ldr	r1, [sp, #8]
    work_area.x2 = coords->x2;
 80123ec:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
    if(mcolor.full == gcolor.full) {
 80123f0:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80123f4:	4588      	cmp	r8, r1
 80123f6:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
 80123fa:	4403      	add	r3, r0
 80123fc:	eba5 0000 	sub.w	r0, r5, r0
 8012400:	b21b      	sxth	r3, r3
 8012402:	b205      	sxth	r5, r0
 8012404:	d117      	bne.n	8012436 <lv_draw_rect+0xddc>
        work_area.y1 = coords->y1 + radius;
 8012406:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        work_area.y2 = coords->y2 - radius;
 801240a:	f8ad 509e 	strh.w	r5, [sp, #158]	; 0x9e
        if(style->body.radius != 0) {
 801240e:	b132      	cbz	r2, 801241e <lv_draw_rect+0xdc4>
            if(aa) {
 8012410:	b164      	cbz	r4, 801242c <lv_draw_rect+0xdd2>
                work_area.y1 += 2;
 8012412:	1c9c      	adds	r4, r3, #2
                work_area.y2 -= 2;
 8012414:	3d02      	subs	r5, #2
                work_area.y1 += 2;
 8012416:	f8ad 409a 	strh.w	r4, [sp, #154]	; 0x9a
                work_area.y2 -= 1;
 801241a:	f8ad 509e 	strh.w	r5, [sp, #158]	; 0x9e
        lv_draw_fill(&work_area, mask, mcolor, opa);
 801241e:	463b      	mov	r3, r7
 8012420:	4642      	mov	r2, r8
 8012422:	4649      	mov	r1, r9
 8012424:	a826      	add	r0, sp, #152	; 0x98
 8012426:	f001 f867 	bl	80134f8 <lv_draw_fill>
 801242a:	e425      	b.n	8011c78 <lv_draw_rect+0x61e>
                work_area.y1 += 1;
 801242c:	1c5c      	adds	r4, r3, #1
                work_area.y2 -= 1;
 801242e:	3d01      	subs	r5, #1
                work_area.y1 += 1;
 8012430:	f8ad 409a 	strh.w	r4, [sp, #154]	; 0x9a
                work_area.y2 -= 1;
 8012434:	e7f1      	b.n	801241a <lv_draw_rect+0xdc0>
        if(style->body.radius != 0) {
 8012436:	b122      	cbz	r2, 8012442 <lv_draw_rect+0xde8>
            if(aa) {
 8012438:	b314      	cbz	r4, 8012480 <lv_draw_rect+0xe26>
                row_start += 2;
 801243a:	1c9c      	adds	r4, r3, #2
                row_end -= 2;
 801243c:	3d02      	subs	r5, #2
                row_start += 2;
 801243e:	b223      	sxth	r3, r4
                row_end -= 1;
 8012440:	b22d      	sxth	r5, r5
        if(row_start < 0) row_start = 0;
 8012442:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
        for(row = row_start; row <= row_end; row++) {
 8012446:	42ac      	cmp	r4, r5
 8012448:	f73f ac16 	bgt.w	8011c78 <lv_draw_rect+0x61e>
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 801244c:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 8012450:	4640      	mov	r0, r8
            work_area.y1 = row;
 8012452:	f8ad 409a 	strh.w	r4, [sp, #154]	; 0x9a
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 8012456:	1b12      	subs	r2, r2, r4
            work_area.y2 = row;
 8012458:	f8ad 409e 	strh.w	r4, [sp, #158]	; 0x9e
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 801245c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
        for(row = row_start; row <= row_end; row++) {
 8012460:	3401      	adds	r4, #1
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 8012462:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
        for(row = row_start; row <= row_end; row++) {
 8012466:	b224      	sxth	r4, r4
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 8012468:	fbb2 f2f6 	udiv	r2, r2, r6
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 801246c:	b2d2      	uxtb	r2, r2
 801246e:	f7ff f8ae 	bl	80115ce <lv_color_mix>
            lv_draw_fill(&work_area, mask, act_color, opa);
 8012472:	463b      	mov	r3, r7
 8012474:	4602      	mov	r2, r0
 8012476:	4649      	mov	r1, r9
 8012478:	a826      	add	r0, sp, #152	; 0x98
 801247a:	f001 f83d 	bl	80134f8 <lv_draw_fill>
 801247e:	e7e2      	b.n	8012446 <lv_draw_rect+0xdec>
                row_start += 1;
 8012480:	1c5c      	adds	r4, r3, #1
                row_end -= 1;
 8012482:	3d01      	subs	r5, #1
                row_start += 1;
 8012484:	b223      	sxth	r3, r4
                row_end -= 1;
 8012486:	e7db      	b.n	8012440 <lv_draw_rect+0xde6>
        if(aa) {
 8012488:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801248a:	2b00      	cmp	r3, #0
 801248c:	d03f      	beq.n	801250e <lv_draw_rect+0xeb4>
 801248e:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
            if(out_x_last != cir.x) {
 8012492:	9a03      	ldr	r2, [sp, #12]
 8012494:	429a      	cmp	r2, r3
 8012496:	d03a      	beq.n	801250e <lv_draw_rect+0xeb4>
 8012498:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 801249c:	4631      	mov	r1, r6
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 801249e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80124a0:	9316      	str	r3, [sp, #88]	; 0x58
 80124a2:	1a9b      	subs	r3, r3, r2
                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 80124a4:	9a03      	ldr	r2, [sp, #12]
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 80124a6:	f8bd 0008 	ldrh.w	r0, [sp, #8]
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 80124aa:	b21b      	sxth	r3, r3
 80124ac:	9311      	str	r3, [sp, #68]	; 0x44
                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 80124ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80124b0:	1a9c      	subs	r4, r3, r2
 80124b2:	9b05      	ldr	r3, [sp, #20]
 80124b4:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 80124b8:	fbb4 f4f3 	udiv	r4, r4, r3
 80124bc:	b2e4      	uxtb	r4, r4
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 80124be:	4622      	mov	r2, r4
 80124c0:	f7ff f885 	bl	80115ce <lv_color_mix>
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 80124c4:	4622      	mov	r2, r4
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 80124c6:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 80124ca:	4630      	mov	r0, r6
 80124cc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80124d0:	f7ff f87d 	bl	80115ce <lv_color_mix>
 80124d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80124d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80124d8:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
                for(i = 0; i < seg_size; i++) {
 80124dc:	1a9b      	subs	r3, r3, r2
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 80124de:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80124e0:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 80124e4:	9315      	str	r3, [sp, #84]	; 0x54
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 80124e6:	2300      	movs	r3, #0
 80124e8:	9313      	str	r3, [sp, #76]	; 0x4c
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 80124ea:	9b03      	ldr	r3, [sp, #12]
 80124ec:	4413      	add	r3, r2
 80124ee:	b21b      	sxth	r3, r3
 80124f0:	931a      	str	r3, [sp, #104]	; 0x68
 80124f2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80124f6:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 80124fa:	9312      	str	r3, [sp, #72]	; 0x48
                for(i = 0; i < seg_size; i++) {
 80124fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80124fe:	428b      	cmp	r3, r1
 8012500:	f300 8097 	bgt.w	8012632 <lv_draw_rect+0xfd8>
                out_x_last      = cir.x;
 8012504:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
 8012508:	9303      	str	r3, [sp, #12]
                out_y_seg_start = out_y_seg_end;
 801250a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801250c:	930d      	str	r3, [sp, #52]	; 0x34
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 801250e:	f9bd 407a 	ldrsh.w	r4, [sp, #122]	; 0x7a
 8012512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 8012514:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 8012516:	18e3      	adds	r3, r4, r3
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 8012518:	f9bd 1082 	ldrsh.w	r1, [sp, #130]	; 0x82
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 801251c:	f9bd 7092 	ldrsh.w	r7, [sp, #146]	; 0x92
 8012520:	930b      	str	r3, [sp, #44]	; 0x2c
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 8012522:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 8012526:	f9bd 508a 	ldrsh.w	r5, [sp, #138]	; 0x8a
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 801252a:	930e      	str	r3, [sp, #56]	; 0x38
 801252c:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
 8012530:	eb02 0803 	add.w	r8, r2, r3
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 8012534:	9a09      	ldr	r2, [sp, #36]	; 0x24
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 8012536:	1ad3      	subs	r3, r2, r3
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 8012538:	1b14      	subs	r4, r2, r4
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 801253a:	4299      	cmp	r1, r3
 801253c:	d009      	beq.n	8012552 <lv_draw_rect+0xef8>
            if(mcolor.full == gcolor.full)
 801253e:	9b02      	ldr	r3, [sp, #8]
 8012540:	429e      	cmp	r6, r3
 8012542:	f040 8112 	bne.w	801276a <lv_draw_rect+0x1110>
                act_color = mcolor;
 8012546:	4632      	mov	r2, r6
            lv_draw_fill(&edge_top_area, mask, act_color, opa);
 8012548:	9b04      	ldr	r3, [sp, #16]
 801254a:	4649      	mov	r1, r9
 801254c:	a820      	add	r0, sp, #128	; 0x80
 801254e:	f000 ffd3 	bl	80134f8 <lv_draw_fill>
        if(mid_top_refr != 0) {
 8012552:	42a5      	cmp	r5, r4
 8012554:	d009      	beq.n	801256a <lv_draw_rect+0xf10>
            if(mcolor.full == gcolor.full)
 8012556:	9b02      	ldr	r3, [sp, #8]
 8012558:	429e      	cmp	r6, r3
 801255a:	f040 8116 	bne.w	801278a <lv_draw_rect+0x1130>
                act_color = mcolor;
 801255e:	4632      	mov	r2, r6
            lv_draw_fill(&mid_top_area, mask, act_color, opa);
 8012560:	9b04      	ldr	r3, [sp, #16]
 8012562:	4649      	mov	r1, r9
 8012564:	a822      	add	r0, sp, #136	; 0x88
 8012566:	f000 ffc7 	bl	80134f8 <lv_draw_fill>
        if(mid_bot_refr != 0) {
 801256a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801256c:	429f      	cmp	r7, r3
 801256e:	d009      	beq.n	8012584 <lv_draw_rect+0xf2a>
            if(mcolor.full == gcolor.full)
 8012570:	9b02      	ldr	r3, [sp, #8]
 8012572:	429e      	cmp	r6, r3
 8012574:	f040 811b 	bne.w	80127ae <lv_draw_rect+0x1154>
                act_color = mcolor;
 8012578:	4632      	mov	r2, r6
            lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 801257a:	9b04      	ldr	r3, [sp, #16]
 801257c:	4649      	mov	r1, r9
 801257e:	a824      	add	r0, sp, #144	; 0x90
 8012580:	f000 ffba 	bl	80134f8 <lv_draw_fill>
        if(edge_bot_refr != 0) {
 8012584:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012586:	4543      	cmp	r3, r8
 8012588:	d009      	beq.n	801259e <lv_draw_rect+0xf44>
            if(mcolor.full == gcolor.full)
 801258a:	9b02      	ldr	r3, [sp, #8]
 801258c:	429e      	cmp	r6, r3
 801258e:	f040 8120 	bne.w	80127d2 <lv_draw_rect+0x1178>
                act_color = mcolor;
 8012592:	4632      	mov	r2, r6
            lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 8012594:	9b04      	ldr	r3, [sp, #16]
 8012596:	4649      	mov	r1, r9
 8012598:	a826      	add	r0, sp, #152	; 0x98
 801259a:	f000 ffad 	bl	80134f8 <lv_draw_fill>
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 801259e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125a0:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 80125a4:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
 80125a8:	9806      	ldr	r0, [sp, #24]
 80125aa:	441a      	add	r2, r3
 80125ac:	9b07      	ldr	r3, [sp, #28]
 80125ae:	b212      	sxth	r2, r2
 80125b0:	440b      	add	r3, r1
 80125b2:	1a41      	subs	r1, r0, r1
 80125b4:	9200      	str	r2, [sp, #0]
 80125b6:	a824      	add	r0, sp, #144	; 0x90
 80125b8:	b21b      	sxth	r3, r3
 80125ba:	b209      	sxth	r1, r1
 80125bc:	f7fe f80e 	bl	80105dc <lv_area_set>
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 80125c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125c2:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 80125c6:	f9bd 107a 	ldrsh.w	r1, [sp, #122]	; 0x7a
 80125ca:	9806      	ldr	r0, [sp, #24]
 80125cc:	441a      	add	r2, r3
 80125ce:	9b07      	ldr	r3, [sp, #28]
 80125d0:	b212      	sxth	r2, r2
 80125d2:	440b      	add	r3, r1
 80125d4:	1a41      	subs	r1, r0, r1
 80125d6:	9200      	str	r2, [sp, #0]
 80125d8:	a826      	add	r0, sp, #152	; 0x98
 80125da:	b21b      	sxth	r3, r3
 80125dc:	b209      	sxth	r1, r1
 80125de:	f7fd fffd 	bl	80105dc <lv_area_set>
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 80125e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125e4:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 80125e8:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
 80125ec:	9806      	ldr	r0, [sp, #24]
 80125ee:	1a9a      	subs	r2, r3, r2
 80125f0:	9b07      	ldr	r3, [sp, #28]
 80125f2:	b212      	sxth	r2, r2
 80125f4:	440b      	add	r3, r1
 80125f6:	1a41      	subs	r1, r0, r1
 80125f8:	9200      	str	r2, [sp, #0]
 80125fa:	a822      	add	r0, sp, #136	; 0x88
 80125fc:	b21b      	sxth	r3, r3
 80125fe:	b209      	sxth	r1, r1
 8012600:	f7fd ffec 	bl	80105dc <lv_area_set>
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8012604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012606:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 801260a:	f9bd 107a 	ldrsh.w	r1, [sp, #122]	; 0x7a
 801260e:	9806      	ldr	r0, [sp, #24]
 8012610:	1a9a      	subs	r2, r3, r2
 8012612:	9b07      	ldr	r3, [sp, #28]
 8012614:	b212      	sxth	r2, r2
 8012616:	440b      	add	r3, r1
 8012618:	1a41      	subs	r1, r0, r1
 801261a:	9200      	str	r2, [sp, #0]
 801261c:	a820      	add	r0, sp, #128	; 0x80
 801261e:	b21b      	sxth	r3, r3
 8012620:	b209      	sxth	r1, r1
 8012622:	f7fd ffdb 	bl	80105dc <lv_area_set>
        lv_circ_next(&cir, &cir_tmp);
 8012626:	a91d      	add	r1, sp, #116	; 0x74
 8012628:	9819      	ldr	r0, [sp, #100]	; 0x64
 801262a:	f7fe f8b7 	bl	801079c <lv_circ_next>
 801262e:	f7ff bbc5 	b.w	8011dbc <lv_draw_rect+0x762>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 8012632:	9b11      	ldr	r3, [sp, #68]	; 0x44
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 8012634:	9a04      	ldr	r2, [sp, #16]
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 8012636:	2b01      	cmp	r3, #1
 8012638:	f000 808f 	beq.w	801275a <lv_draw_rect+0x1100>
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 801263c:	4618      	mov	r0, r3
 801263e:	f7f1 fdf5 	bl	800422c <antialias_get_opa_circ>
 8012642:	900b      	str	r0, [sp, #44]	; 0x2c
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8012644:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8012648:	464a      	mov	r2, r9
 801264a:	9b07      	ldr	r3, [sp, #28]
 801264c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801264e:	18e5      	adds	r5, r4, r3
 8012650:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012652:	441d      	add	r5, r3
 8012654:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012656:	b22d      	sxth	r5, r5
 8012658:	9300      	str	r3, [sp, #0]
 801265a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801265e:	4628      	mov	r0, r5
 8012660:	f000 fefa 	bl	8013458 <lv_draw_px>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 8012664:	9b06      	ldr	r3, [sp, #24]
 8012666:	464a      	mov	r2, r9
 8012668:	991a      	ldr	r1, [sp, #104]	; 0x68
 801266a:	eba3 0804 	sub.w	r8, r3, r4
 801266e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012670:	eba8 0803 	sub.w	r8, r8, r3
 8012674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012676:	fa0f f888 	sxth.w	r8, r8
 801267a:	9300      	str	r3, [sp, #0]
 801267c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8012680:	4640      	mov	r0, r8
 8012682:	f000 fee9 	bl	8013458 <lv_draw_px>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 8012686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012688:	4640      	mov	r0, r8
 801268a:	464a      	mov	r2, r9
 801268c:	1e5f      	subs	r7, r3, #1
 801268e:	9b03      	ldr	r3, [sp, #12]
 8012690:	1aff      	subs	r7, r7, r3
 8012692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012694:	b23f      	sxth	r7, r7
 8012696:	9300      	str	r3, [sp, #0]
 8012698:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801269c:	4639      	mov	r1, r7
 801269e:	f000 fedb 	bl	8013458 <lv_draw_px>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 80126a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126a4:	4639      	mov	r1, r7
 80126a6:	4628      	mov	r0, r5
 80126a8:	9300      	str	r3, [sp, #0]
 80126aa:	464a      	mov	r2, r9
 80126ac:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80126b0:	f000 fed2 	bl	8013458 <lv_draw_px>
                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 80126b4:	9a05      	ldr	r2, [sp, #20]
 80126b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 80126b8:	4630      	mov	r0, r6
 80126ba:	f8bd 1008 	ldrh.w	r1, [sp, #8]
                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 80126be:	fbb3 f3f2 	udiv	r3, r3, r2
 80126c2:	b2db      	uxtb	r3, r3
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 80126c4:	461a      	mov	r2, r3
                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 80126c6:	9317      	str	r3, [sp, #92]	; 0x5c
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 80126c8:	f7fe ff81 	bl	80115ce <lv_color_mix>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 80126cc:	9b07      	ldr	r3, [sp, #28]
 80126ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 80126d0:	4605      	mov	r5, r0
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 80126d2:	1c5f      	adds	r7, r3, #1
 80126d4:	9b03      	ldr	r3, [sp, #12]
 80126d6:	441f      	add	r7, r3
 80126d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126da:	18e3      	adds	r3, r4, r3
 80126dc:	b23f      	sxth	r7, r7
 80126de:	4413      	add	r3, r2
 80126e0:	464a      	mov	r2, r9
 80126e2:	b21b      	sxth	r3, r3
 80126e4:	9318      	str	r3, [sp, #96]	; 0x60
 80126e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126e8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80126ea:	9300      	str	r3, [sp, #0]
 80126ec:	4603      	mov	r3, r0
 80126ee:	4638      	mov	r0, r7
 80126f0:	f000 feb2 	bl	8013458 <lv_draw_px>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 80126f4:	9b06      	ldr	r3, [sp, #24]
 80126f6:	464a      	mov	r2, r9
 80126f8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80126fa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80126fe:	9b03      	ldr	r3, [sp, #12]
 8012700:	eba8 0803 	sub.w	r8, r8, r3
 8012704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012706:	fa0f f888 	sxth.w	r8, r8
 801270a:	9300      	str	r3, [sp, #0]
 801270c:	462b      	mov	r3, r5
 801270e:	4640      	mov	r0, r8
 8012710:	f000 fea2 	bl	8013458 <lv_draw_px>
                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 8012714:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012716:	4631      	mov	r1, r6
 8012718:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 801271c:	f7fe ff57 	bl	80115ce <lv_color_mix>
 8012720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012722:	4605      	mov	r5, r0
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 8012724:	464a      	mov	r2, r9
 8012726:	1b1c      	subs	r4, r3, r4
 8012728:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801272a:	1ae3      	subs	r3, r4, r3
 801272c:	b21c      	sxth	r4, r3
 801272e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012730:	4621      	mov	r1, r4
 8012732:	9300      	str	r3, [sp, #0]
 8012734:	4603      	mov	r3, r0
 8012736:	4640      	mov	r0, r8
 8012738:	f000 fe8e 	bl	8013458 <lv_draw_px>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 801273c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801273e:	464a      	mov	r2, r9
 8012740:	4621      	mov	r1, r4
 8012742:	9300      	str	r3, [sp, #0]
 8012744:	4638      	mov	r0, r7
 8012746:	462b      	mov	r3, r5
 8012748:	f000 fe86 	bl	8013458 <lv_draw_px>
 801274c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801274e:	3301      	adds	r3, #1
 8012750:	9313      	str	r3, [sp, #76]	; 0x4c
 8012752:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012754:	33ff      	adds	r3, #255	; 0xff
 8012756:	9315      	str	r3, [sp, #84]	; 0x54
 8012758:	e6cb      	b.n	80124f2 <lv_draw_rect+0xe98>
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 801275a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801275c:	f7f1 fc54 	bl	8004008 <lv_draw_aa_get_opa>
 8012760:	9b04      	ldr	r3, [sp, #16]
 8012762:	1a18      	subs	r0, r3, r0
 8012764:	b2c3      	uxtb	r3, r0
 8012766:	930b      	str	r3, [sp, #44]	; 0x2c
 8012768:	e76c      	b.n	8012644 <lv_draw_rect+0xfea>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 801276a:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
                act_color = lv_color_mix(mcolor, gcolor, mix);
 801276e:	4630      	mov	r0, r6
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 8012770:	9b05      	ldr	r3, [sp, #20]
 8012772:	1a52      	subs	r2, r2, r1
                act_color = lv_color_mix(mcolor, gcolor, mix);
 8012774:	f8bd 1008 	ldrh.w	r1, [sp, #8]
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 8012778:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 801277c:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 8012780:	b2d2      	uxtb	r2, r2
 8012782:	f7fe ff24 	bl	80115ce <lv_color_mix>
 8012786:	4602      	mov	r2, r0
 8012788:	e6de      	b.n	8012548 <lv_draw_rect+0xeee>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 801278a:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
                act_color = lv_color_mix(mcolor, gcolor, mix);
 801278e:	4630      	mov	r0, r6
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 8012790:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
                act_color = lv_color_mix(mcolor, gcolor, mix);
 8012794:	f8bd 1008 	ldrh.w	r1, [sp, #8]
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 8012798:	1ad2      	subs	r2, r2, r3
 801279a:	9b05      	ldr	r3, [sp, #20]
 801279c:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 80127a0:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 80127a4:	b2d2      	uxtb	r2, r2
 80127a6:	f7fe ff12 	bl	80115ce <lv_color_mix>
 80127aa:	4602      	mov	r2, r0
 80127ac:	e6d8      	b.n	8012560 <lv_draw_rect+0xf06>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 80127ae:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
                act_color = lv_color_mix(mcolor, gcolor, mix);
 80127b2:	4630      	mov	r0, r6
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 80127b4:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
                act_color = lv_color_mix(mcolor, gcolor, mix);
 80127b8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 80127bc:	1ad2      	subs	r2, r2, r3
 80127be:	9b05      	ldr	r3, [sp, #20]
 80127c0:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 80127c4:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 80127c8:	b2d2      	uxtb	r2, r2
 80127ca:	f7fe ff00 	bl	80115ce <lv_color_mix>
 80127ce:	4602      	mov	r2, r0
 80127d0:	e6d3      	b.n	801257a <lv_draw_rect+0xf20>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 80127d2:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
                act_color = lv_color_mix(mcolor, gcolor, mix);
 80127d6:	4630      	mov	r0, r6
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 80127d8:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
                act_color = lv_color_mix(mcolor, gcolor, mix);
 80127dc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 80127e0:	1ad2      	subs	r2, r2, r3
 80127e2:	9b05      	ldr	r3, [sp, #20]
 80127e4:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 80127e8:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
 80127ec:	b2d2      	uxtb	r2, r2
 80127ee:	f7fe feee 	bl	80115ce <lv_color_mix>
 80127f2:	4602      	mov	r2, r0
 80127f4:	e6ce      	b.n	8012594 <lv_draw_rect+0xf3a>
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 80127f6:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
        act_color = lv_color_mix(mcolor, gcolor, mix);
 80127fa:	4630      	mov	r0, r6
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 80127fc:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
        act_color = lv_color_mix(mcolor, gcolor, mix);
 8012800:	f8bd 1008 	ldrh.w	r1, [sp, #8]
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 8012804:	1ad2      	subs	r2, r2, r3
 8012806:	9b05      	ldr	r3, [sp, #20]
 8012808:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 801280c:	fbb2 f2f3 	udiv	r2, r2, r3
        act_color = lv_color_mix(mcolor, gcolor, mix);
 8012810:	b2d2      	uxtb	r2, r2
 8012812:	f7fe fedc 	bl	80115ce <lv_color_mix>
 8012816:	4602      	mov	r2, r0
 8012818:	f7ff badb 	b.w	8011dd2 <lv_draw_rect+0x778>
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 801281c:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
            act_color = lv_color_mix(mcolor, gcolor, mix);
 8012820:	4630      	mov	r0, r6
 8012822:	f8bd 1008 	ldrh.w	r1, [sp, #8]
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 8012826:	1ad2      	subs	r2, r2, r3
 8012828:	9b05      	ldr	r3, [sp, #20]
 801282a:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 801282e:	fbb2 f2f3 	udiv	r2, r2, r3
            act_color = lv_color_mix(mcolor, gcolor, mix);
 8012832:	b2d2      	uxtb	r2, r2
 8012834:	f7fe fecb 	bl	80115ce <lv_color_mix>
 8012838:	4602      	mov	r2, r0
 801283a:	f7ff bada 	b.w	8011df2 <lv_draw_rect+0x798>
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 801283e:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
        act_color = lv_color_mix(mcolor, gcolor, mix);
 8012842:	4630      	mov	r0, r6
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 8012844:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
        act_color = lv_color_mix(mcolor, gcolor, mix);
 8012848:	f8bd 1008 	ldrh.w	r1, [sp, #8]
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 801284c:	1ad2      	subs	r2, r2, r3
 801284e:	9b05      	ldr	r3, [sp, #20]
 8012850:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8012854:	fbb2 f2f3 	udiv	r2, r2, r3
        act_color = lv_color_mix(mcolor, gcolor, mix);
 8012858:	b2d2      	uxtb	r2, r2
 801285a:	f7fe feb8 	bl	80115ce <lv_color_mix>
 801285e:	4602      	mov	r2, r0
 8012860:	f7ff bad1 	b.w	8011e06 <lv_draw_rect+0x7ac>
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 8012864:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
            act_color = lv_color_mix(mcolor, gcolor, mix);
 8012868:	4630      	mov	r0, r6
 801286a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 801286e:	1ad2      	subs	r2, r2, r3
 8012870:	9b05      	ldr	r3, [sp, #20]
 8012872:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8012876:	fbb2 f2f3 	udiv	r2, r2, r3
            act_color = lv_color_mix(mcolor, gcolor, mix);
 801287a:	b2d2      	uxtb	r2, r2
 801287c:	f7fe fea7 	bl	80115ce <lv_color_mix>
 8012880:	4602      	mov	r2, r0
 8012882:	f7ff bad0 	b.w	8011e26 <lv_draw_rect+0x7cc>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 8012886:	9a04      	ldr	r2, [sp, #16]
 8012888:	9811      	ldr	r0, [sp, #68]	; 0x44
 801288a:	f7f1 fbbd 	bl	8004008 <lv_draw_aa_get_opa>
 801288e:	9b04      	ldr	r3, [sp, #16]
 8012890:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8012894:	464a      	mov	r2, r9
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 8012896:	1a18      	subs	r0, r3, r0
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8012898:	9915      	ldr	r1, [sp, #84]	; 0x54
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 801289a:	b2c3      	uxtb	r3, r0
 801289c:	930b      	str	r3, [sp, #44]	; 0x2c
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 801289e:	9b07      	ldr	r3, [sp, #28]
 80128a0:	18e5      	adds	r5, r4, r3
 80128a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80128a4:	441d      	add	r5, r3
 80128a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128a8:	b22d      	sxth	r5, r5
 80128aa:	9300      	str	r3, [sp, #0]
 80128ac:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80128b0:	4628      	mov	r0, r5
 80128b2:	f000 fdd1 	bl	8013458 <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 80128b6:	9b06      	ldr	r3, [sp, #24]
 80128b8:	464a      	mov	r2, r9
 80128ba:	9915      	ldr	r1, [sp, #84]	; 0x54
 80128bc:	eba3 0804 	sub.w	r8, r3, r4
 80128c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80128c2:	eba8 0803 	sub.w	r8, r8, r3
 80128c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128c8:	fa0f f888 	sxth.w	r8, r8
 80128cc:	9300      	str	r3, [sp, #0]
 80128ce:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80128d2:	4640      	mov	r0, r8
 80128d4:	f000 fdc0 	bl	8013458 <lv_draw_px>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 80128d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128da:	4640      	mov	r0, r8
 80128dc:	464a      	mov	r2, r9
 80128de:	1e5f      	subs	r7, r3, #1
 80128e0:	9b03      	ldr	r3, [sp, #12]
 80128e2:	1aff      	subs	r7, r7, r3
 80128e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128e6:	b23f      	sxth	r7, r7
 80128e8:	9300      	str	r3, [sp, #0]
 80128ea:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80128ee:	4639      	mov	r1, r7
 80128f0:	f000 fdb2 	bl	8013458 <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 80128f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128f6:	4639      	mov	r1, r7
 80128f8:	4628      	mov	r0, r5
 80128fa:	9300      	str	r3, [sp, #0]
 80128fc:	464a      	mov	r2, r9
 80128fe:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8012902:	f000 fda9 	bl	8013458 <lv_draw_px>
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 8012906:	9a05      	ldr	r2, [sp, #20]
 8012908:	9b12      	ldr	r3, [sp, #72]	; 0x48
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 801290a:	4630      	mov	r0, r6
 801290c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 8012910:	fbb3 f3f2 	udiv	r3, r3, r2
 8012914:	b2db      	uxtb	r3, r3
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 8012916:	461a      	mov	r2, r3
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 8012918:	9313      	str	r3, [sp, #76]	; 0x4c
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 801291a:	f7fe fe58 	bl	80115ce <lv_color_mix>
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
 801291e:	9b07      	ldr	r3, [sp, #28]
 8012920:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 8012922:	4605      	mov	r5, r0
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
 8012924:	1c5f      	adds	r7, r3, #1
 8012926:	9b03      	ldr	r3, [sp, #12]
 8012928:	441f      	add	r7, r3
 801292a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801292c:	18e3      	adds	r3, r4, r3
 801292e:	b23f      	sxth	r7, r7
 8012930:	4413      	add	r3, r2
 8012932:	464a      	mov	r2, r9
 8012934:	b21b      	sxth	r3, r3
 8012936:	9314      	str	r3, [sp, #80]	; 0x50
 8012938:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801293a:	9914      	ldr	r1, [sp, #80]	; 0x50
 801293c:	9300      	str	r3, [sp, #0]
 801293e:	4603      	mov	r3, r0
 8012940:	4638      	mov	r0, r7
 8012942:	f000 fd89 	bl	8013458 <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, aa_color_ver,
 8012946:	9b06      	ldr	r3, [sp, #24]
 8012948:	464a      	mov	r2, r9
 801294a:	9914      	ldr	r1, [sp, #80]	; 0x50
 801294c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8012950:	9b03      	ldr	r3, [sp, #12]
 8012952:	eba8 0803 	sub.w	r8, r8, r3
 8012956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012958:	fa0f f888 	sxth.w	r8, r8
 801295c:	9300      	str	r3, [sp, #0]
 801295e:	462b      	mov	r3, r5
 8012960:	4640      	mov	r0, r8
 8012962:	f000 fd79 	bl	8013458 <lv_draw_px>
            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 8012966:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012968:	4631      	mov	r1, r6
 801296a:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 801296e:	f7fe fe2e 	bl	80115ce <lv_color_mix>
 8012972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012974:	4605      	mov	r5, r0
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
 8012976:	464a      	mov	r2, r9
 8012978:	1b1c      	subs	r4, r3, r4
 801297a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801297c:	1ae3      	subs	r3, r4, r3
 801297e:	b21c      	sxth	r4, r3
 8012980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012982:	4621      	mov	r1, r4
 8012984:	9300      	str	r3, [sp, #0]
 8012986:	4603      	mov	r3, r0
 8012988:	4640      	mov	r0, r8
 801298a:	f000 fd65 	bl	8013458 <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, aa_color_ver,
 801298e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012990:	464a      	mov	r2, r9
 8012992:	4621      	mov	r1, r4
 8012994:	9300      	str	r3, [sp, #0]
 8012996:	4638      	mov	r0, r7
 8012998:	462b      	mov	r3, r5
 801299a:	f000 fd5d 	bl	8013458 <lv_draw_px>
 801299e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80129a0:	3301      	adds	r3, #1
 80129a2:	9310      	str	r3, [sp, #64]	; 0x40
 80129a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80129a6:	33ff      	adds	r3, #255	; 0xff
 80129a8:	9312      	str	r3, [sp, #72]	; 0x48
 80129aa:	f7ff ba99 	b.w	8011ee0 <lv_draw_rect+0x886>
        corner_size = radius + aa;
 80129ae:	9b02      	ldr	r3, [sp, #8]
    lv_coord_t length_corr = 0;
 80129b0:	2200      	movs	r2, #0
        corner_size = radius + aa;
 80129b2:	4443      	add	r3, r8
    lv_coord_t length_corr = 0;
 80129b4:	9205      	str	r2, [sp, #20]
        corner_size = radius + aa;
 80129b6:	b21b      	sxth	r3, r3
 80129b8:	f7ff bb30 	b.w	801201c <lv_draw_rect+0x9c2>
    corner_size++;
 80129bc:	3301      	adds	r3, #1
    if(part & LV_BORDER_TOP)
 80129be:	9a04      	ldr	r2, [sp, #16]
    corner_size++;
 80129c0:	b21b      	sxth	r3, r3
 80129c2:	9303      	str	r3, [sp, #12]
    if(part & LV_BORDER_TOP)
 80129c4:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
 80129c8:	2a00      	cmp	r2, #0
 80129ca:	f000 814b 	beq.w	8012c64 <lv_draw_rect+0x160a>
        work_area.y1 = coords->y1 + corner_size;
 80129ce:	9a03      	ldr	r2, [sp, #12]
        work_area.y1 = coords->y1 + radius;
 80129d0:	4413      	add	r3, r2
    if(part & LV_BORDER_BOTTOM)
 80129d2:	f016 0201 	ands.w	r2, r6, #1
        work_area.y1 = coords->y1 + radius;
 80129d6:	b21b      	sxth	r3, r3
    if(part & LV_BORDER_BOTTOM)
 80129d8:	9206      	str	r2, [sp, #24]
        work_area.y2 = coords->y2 - corner_size;
 80129da:	bf14      	ite	ne
 80129dc:	9a03      	ldrne	r2, [sp, #12]
        work_area.y2 = coords->y2 - radius;
 80129de:	9a02      	ldreq	r2, [sp, #8]
 80129e0:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
 80129e4:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
 80129e8:	1a9b      	subs	r3, r3, r2
    if(part & LV_BORDER_LEFT) {
 80129ea:	0772      	lsls	r2, r6, #29
        work_area.y2 = coords->y2 - radius;
 80129ec:	b21b      	sxth	r3, r3
 80129ee:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
    if(part & LV_BORDER_LEFT) {
 80129f2:	d50c      	bpl.n	8012a0e <lv_draw_rect+0x13b4>
        work_area.x1 = coords->x1;
 80129f4:	f9bb 3000 	ldrsh.w	r3, [fp]
        lv_draw_fill(&work_area, mask, color, opa);
 80129f8:	463a      	mov	r2, r7
 80129fa:	4649      	mov	r1, r9
 80129fc:	a826      	add	r0, sp, #152	; 0x98
        work_area.x1 = coords->x1;
 80129fe:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        work_area.x2 = work_area.x1 + bwidth;
 8012a02:	442b      	add	r3, r5
 8012a04:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
        lv_draw_fill(&work_area, mask, color, opa);
 8012a08:	4623      	mov	r3, r4
 8012a0a:	f000 fd75 	bl	80134f8 <lv_draw_fill>
    if(part & LV_BORDER_RIGHT) {
 8012a0e:	0733      	lsls	r3, r6, #28
 8012a10:	d50c      	bpl.n	8012a2c <lv_draw_rect+0x13d2>
 8012a12:	f9bb 3004 	ldrsh.w	r3, [fp, #4]
        lv_draw_fill(&work_area, mask, color, opa);
 8012a16:	463a      	mov	r2, r7
 8012a18:	4649      	mov	r1, r9
 8012a1a:	a826      	add	r0, sp, #152	; 0x98
        work_area.x2 = coords->x2;
 8012a1c:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
        work_area.x1 = work_area.x2 - bwidth;
 8012a20:	1b5b      	subs	r3, r3, r5
 8012a22:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        lv_draw_fill(&work_area, mask, color, opa);
 8012a26:	4623      	mov	r3, r4
 8012a28:	f000 fd66 	bl	80134f8 <lv_draw_fill>
    work_area.x1 = coords->x1 + corner_size - length_corr;
 8012a2c:	9a05      	ldr	r2, [sp, #20]
 8012a2e:	9b03      	ldr	r3, [sp, #12]
 8012a30:	1a9b      	subs	r3, r3, r2
 8012a32:	f8bb 2000 	ldrh.w	r2, [fp]
 8012a36:	4413      	add	r3, r2
    work_area.x2 = coords->x2 - corner_size + length_corr;
 8012a38:	9a05      	ldr	r2, [sp, #20]
    work_area.x1 = coords->x1 + corner_size - length_corr;
 8012a3a:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
    work_area.x2 = coords->x2 - corner_size + length_corr;
 8012a3e:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8012a42:	4413      	add	r3, r2
 8012a44:	9a03      	ldr	r2, [sp, #12]
 8012a46:	1a9b      	subs	r3, r3, r2
 8012a48:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
    if(part & LV_BORDER_TOP) {
 8012a4c:	9b04      	ldr	r3, [sp, #16]
 8012a4e:	b163      	cbz	r3, 8012a6a <lv_draw_rect+0x1410>
        work_area.y1 = coords->y1;
 8012a50:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
        lv_draw_fill(&work_area, mask, color, opa);
 8012a54:	463a      	mov	r2, r7
 8012a56:	4649      	mov	r1, r9
 8012a58:	a826      	add	r0, sp, #152	; 0x98
        work_area.y1 = coords->y1;
 8012a5a:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        work_area.y2 = coords->y1 + bwidth;
 8012a5e:	442b      	add	r3, r5
 8012a60:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
        lv_draw_fill(&work_area, mask, color, opa);
 8012a64:	4623      	mov	r3, r4
 8012a66:	f000 fd47 	bl	80134f8 <lv_draw_fill>
    if(part & LV_BORDER_BOTTOM) {
 8012a6a:	9b06      	ldr	r3, [sp, #24]
 8012a6c:	b163      	cbz	r3, 8012a88 <lv_draw_rect+0x142e>
        work_area.y2 = coords->y2;
 8012a6e:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
        lv_draw_fill(&work_area, mask, color, opa);
 8012a72:	463a      	mov	r2, r7
 8012a74:	4649      	mov	r1, r9
 8012a76:	a826      	add	r0, sp, #152	; 0x98
        work_area.y2 = coords->y2;
 8012a78:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
        work_area.y1 = work_area.y2 - bwidth;
 8012a7c:	1b5b      	subs	r3, r3, r5
 8012a7e:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        lv_draw_fill(&work_area, mask, color, opa);
 8012a82:	4623      	mov	r3, r4
 8012a84:	f000 fd38 	bl	80134f8 <lv_draw_fill>
    if(length_corr != 0) {
 8012a88:	9b05      	ldr	r3, [sp, #20]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	f000 8084 	beq.w	8012b98 <lv_draw_rect+0x153e>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8012a90:	f006 0306 	and.w	r3, r6, #6
 8012a94:	2b06      	cmp	r3, #6
 8012a96:	d11c      	bne.n	8012ad2 <lv_draw_rect+0x1478>
            work_area.x1 = coords->x1;
 8012a98:	f9bb 3000 	ldrsh.w	r3, [fp]
            work_area.x2 = coords->x1 + radius + aa;
 8012a9c:	fa0f f188 	sxth.w	r1, r8
 8012aa0:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
            work_area.x1 = coords->x1;
 8012aa4:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + radius + aa;
 8012aa8:	440b      	add	r3, r1
 8012aaa:	4610      	mov	r0, r2
 8012aac:	4413      	add	r3, r2
 8012aae:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.y1 = coords->y1 + radius + 1 + aa;
 8012ab2:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
 8012ab6:	1c5a      	adds	r2, r3, #1
            work_area.y2 = coords->y1 + bwidth;
 8012ab8:	442b      	add	r3, r5
            work_area.y1 = coords->y1 + radius + 1 + aa;
 8012aba:	4411      	add	r1, r2
            work_area.y2 = coords->y1 + bwidth;
 8012abc:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 8012ac0:	4623      	mov	r3, r4
            work_area.y1 = coords->y1 + radius + 1 + aa;
 8012ac2:	1842      	adds	r2, r0, r1
            lv_draw_fill(&work_area, mask, color, opa);
 8012ac4:	4649      	mov	r1, r9
 8012ac6:	a826      	add	r0, sp, #152	; 0x98
            work_area.y1 = coords->y1 + radius + 1 + aa;
 8012ac8:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            lv_draw_fill(&work_area, mask, color, opa);
 8012acc:	463a      	mov	r2, r7
 8012ace:	f000 fd13 	bl	80134f8 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8012ad2:	f006 030a 	and.w	r3, r6, #10
 8012ad6:	2b0a      	cmp	r3, #10
 8012ad8:	d11d      	bne.n	8012b16 <lv_draw_rect+0x14bc>
            work_area.x1 = coords->x2 - radius - aa;
 8012ada:	f9bb c004 	ldrsh.w	ip, [fp, #4]
 8012ade:	fa0f f188 	sxth.w	r1, r8
 8012ae2:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8012ae6:	ebac 0301 	sub.w	r3, ip, r1
            work_area.x2 = coords->x2;
 8012aea:	f8ad c09c 	strh.w	ip, [sp, #156]	; 0x9c
            work_area.x1 = coords->x2 - radius - aa;
 8012aee:	4610      	mov	r0, r2
 8012af0:	1a9b      	subs	r3, r3, r2
 8012af2:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            work_area.y1 = coords->y1 + radius + 1 + aa;
 8012af6:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
 8012afa:	1c5a      	adds	r2, r3, #1
            work_area.y2 = coords->y1 + bwidth;
 8012afc:	442b      	add	r3, r5
            work_area.y1 = coords->y1 + radius + 1 + aa;
 8012afe:	4411      	add	r1, r2
            work_area.y2 = coords->y1 + bwidth;
 8012b00:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 8012b04:	4623      	mov	r3, r4
            work_area.y1 = coords->y1 + radius + 1 + aa;
 8012b06:	1842      	adds	r2, r0, r1
            lv_draw_fill(&work_area, mask, color, opa);
 8012b08:	4649      	mov	r1, r9
 8012b0a:	a826      	add	r0, sp, #152	; 0x98
            work_area.y1 = coords->y1 + radius + 1 + aa;
 8012b0c:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            lv_draw_fill(&work_area, mask, color, opa);
 8012b10:	463a      	mov	r2, r7
 8012b12:	f000 fcf1 	bl	80134f8 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8012b16:	f006 0305 	and.w	r3, r6, #5
 8012b1a:	2b05      	cmp	r3, #5
 8012b1c:	d11c      	bne.n	8012b58 <lv_draw_rect+0x14fe>
            work_area.x2 = coords->x1 + radius + aa;
 8012b1e:	fa0f f088 	sxth.w	r0, r8
            work_area.x1 = coords->x1;
 8012b22:	f9bb 2000 	ldrsh.w	r2, [fp]
            work_area.x2 = coords->x1 + radius + aa;
 8012b26:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
            work_area.x1 = coords->x1;
 8012b2a:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + radius + aa;
 8012b2e:	4402      	add	r2, r0
 8012b30:	4619      	mov	r1, r3
 8012b32:	441a      	add	r2, r3
            work_area.y1 = coords->y2 - bwidth;
 8012b34:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
            work_area.x2 = coords->x1 + radius + aa;
 8012b38:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.y1 = coords->y2 - bwidth;
 8012b3c:	1b5a      	subs	r2, r3, r5
            work_area.y2 = coords->y2 - radius - 1 - aa;
 8012b3e:	3b01      	subs	r3, #1
            work_area.y1 = coords->y2 - bwidth;
 8012b40:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            lv_draw_fill(&work_area, mask, color, opa);
 8012b44:	463a      	mov	r2, r7
            work_area.y2 = coords->y2 - radius - 1 - aa;
 8012b46:	1a1b      	subs	r3, r3, r0
            lv_draw_fill(&work_area, mask, color, opa);
 8012b48:	a826      	add	r0, sp, #152	; 0x98
            work_area.y2 = coords->y2 - radius - 1 - aa;
 8012b4a:	1a5b      	subs	r3, r3, r1
            lv_draw_fill(&work_area, mask, color, opa);
 8012b4c:	4649      	mov	r1, r9
            work_area.y2 = coords->y2 - radius - 1 - aa;
 8012b4e:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 8012b52:	4623      	mov	r3, r4
 8012b54:	f000 fcd0 	bl	80134f8 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8012b58:	f006 0309 	and.w	r3, r6, #9
 8012b5c:	2b09      	cmp	r3, #9
 8012b5e:	d11b      	bne.n	8012b98 <lv_draw_rect+0x153e>
            work_area.x1 = coords->x2 - radius - aa;
 8012b60:	f9bb 3004 	ldrsh.w	r3, [fp, #4]
 8012b64:	fa0f f188 	sxth.w	r1, r8
 8012b68:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8012b6c:	1a5a      	subs	r2, r3, r1
            work_area.x2 = coords->x2;
 8012b6e:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.y1 = coords->y2 - bwidth;
 8012b72:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
            work_area.x1 = coords->x2 - radius - aa;
 8012b76:	1a12      	subs	r2, r2, r0
            work_area.y1 = coords->y2 - bwidth;
 8012b78:	1b5d      	subs	r5, r3, r5
            work_area.y2 = coords->y2 - radius - 1 - aa;
 8012b7a:	3b01      	subs	r3, #1
            work_area.x1 = coords->x2 - radius - aa;
 8012b7c:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            lv_draw_fill(&work_area, mask, color, opa);
 8012b80:	463a      	mov	r2, r7
            work_area.y2 = coords->y2 - radius - 1 - aa;
 8012b82:	1a5b      	subs	r3, r3, r1
            lv_draw_fill(&work_area, mask, color, opa);
 8012b84:	4649      	mov	r1, r9
            work_area.y1 = coords->y2 - bwidth;
 8012b86:	f8ad 509a 	strh.w	r5, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2 - radius - 1 - aa;
 8012b8a:	1a1b      	subs	r3, r3, r0
            lv_draw_fill(&work_area, mask, color, opa);
 8012b8c:	a826      	add	r0, sp, #152	; 0x98
            work_area.y2 = coords->y2 - radius - 1 - aa;
 8012b8e:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 8012b92:	4623      	mov	r3, r4
 8012b94:	f000 fcb0 	bl	80134f8 <lv_draw_fill>
    if(style->body.radius == 0) {
 8012b98:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	f47f aaba 	bne.w	8012116 <lv_draw_rect+0xabc>
        if(part & (LV_BORDER_TOP | LV_BORDER_LEFT)) {
 8012ba2:	f016 0f06 	tst.w	r6, #6
 8012ba6:	d015      	beq.n	8012bd4 <lv_draw_rect+0x157a>
            work_area.x1 = coords->x1;
 8012ba8:	f9bb 2000 	ldrsh.w	r2, [fp]
            work_area.x2 = coords->x1 + aa;
 8012bac:	fa0f f388 	sxth.w	r3, r8
            lv_draw_fill(&work_area, mask, color, opa);
 8012bb0:	4649      	mov	r1, r9
 8012bb2:	a826      	add	r0, sp, #152	; 0x98
            work_area.x1 = coords->x1;
 8012bb4:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + aa;
 8012bb8:	441a      	add	r2, r3
 8012bba:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.y1 = coords->y1;
 8012bbe:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
            work_area.y2 = coords->y1 + aa;
 8012bc2:	4413      	add	r3, r2
            work_area.y1 = coords->y1;
 8012bc4:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            lv_draw_fill(&work_area, mask, color, opa);
 8012bc8:	463a      	mov	r2, r7
            work_area.y2 = coords->y1 + aa;
 8012bca:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 8012bce:	4623      	mov	r3, r4
 8012bd0:	f000 fc92 	bl	80134f8 <lv_draw_fill>
        if(part & (LV_BORDER_TOP | LV_BORDER_RIGHT)) {
 8012bd4:	f016 0f0a 	tst.w	r6, #10
 8012bd8:	d015      	beq.n	8012c06 <lv_draw_rect+0x15ac>
            work_area.x1 = coords->x2 - aa;
 8012bda:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 8012bde:	fa0f f388 	sxth.w	r3, r8
            lv_draw_fill(&work_area, mask, color, opa);
 8012be2:	a826      	add	r0, sp, #152	; 0x98
            work_area.x1 = coords->x2 - aa;
 8012be4:	1ad1      	subs	r1, r2, r3
            work_area.x2 = coords->x2;
 8012be6:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.y1 = coords->y1;
 8012bea:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
            work_area.x1 = coords->x2 - aa;
 8012bee:	f8ad 1098 	strh.w	r1, [sp, #152]	; 0x98
            lv_draw_fill(&work_area, mask, color, opa);
 8012bf2:	4649      	mov	r1, r9
            work_area.y2 = coords->y1 + aa;
 8012bf4:	4413      	add	r3, r2
            work_area.y1 = coords->y1;
 8012bf6:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            lv_draw_fill(&work_area, mask, color, opa);
 8012bfa:	463a      	mov	r2, r7
            work_area.y2 = coords->y1 + aa;
 8012bfc:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 8012c00:	4623      	mov	r3, r4
 8012c02:	f000 fc79 	bl	80134f8 <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_LEFT)) {
 8012c06:	f016 0f05 	tst.w	r6, #5
 8012c0a:	d015      	beq.n	8012c38 <lv_draw_rect+0x15de>
            work_area.x1 = coords->x1;
 8012c0c:	f9bb 2000 	ldrsh.w	r2, [fp]
            work_area.x2 = coords->x1 + aa;
 8012c10:	fa0f f388 	sxth.w	r3, r8
            lv_draw_fill(&work_area, mask, color, opa);
 8012c14:	4649      	mov	r1, r9
 8012c16:	a826      	add	r0, sp, #152	; 0x98
            work_area.x1 = coords->x1;
 8012c18:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.x2 = coords->x1 + aa;
 8012c1c:	441a      	add	r2, r3
 8012c1e:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            work_area.y1 = coords->y2 - aa;
 8012c22:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
 8012c26:	1ad3      	subs	r3, r2, r3
            work_area.y2 = coords->y2;
 8012c28:	f8ad 209e 	strh.w	r2, [sp, #158]	; 0x9e
            lv_draw_fill(&work_area, mask, color, opa);
 8012c2c:	463a      	mov	r2, r7
            work_area.y1 = coords->y2 - aa;
 8012c2e:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            lv_draw_fill(&work_area, mask, color, opa);
 8012c32:	4623      	mov	r3, r4
 8012c34:	f000 fc60 	bl	80134f8 <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_RIGHT)) {
 8012c38:	f016 0f09 	tst.w	r6, #9
 8012c3c:	f43f aa6b 	beq.w	8012116 <lv_draw_rect+0xabc>
            work_area.x1 = coords->x2 - aa;
 8012c40:	f9bb 3004 	ldrsh.w	r3, [fp, #4]
 8012c44:	fa0f f888 	sxth.w	r8, r8
            work_area.x2 = coords->x2;
 8012c48:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            work_area.x1 = coords->x2 - aa;
 8012c4c:	eba3 0208 	sub.w	r2, r3, r8
            work_area.y1 = coords->y2 - aa;
 8012c50:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
            work_area.x1 = coords->x2 - aa;
 8012c54:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            work_area.y1 = coords->y2 - aa;
 8012c58:	eba3 0808 	sub.w	r8, r3, r8
 8012c5c:	f8ad 809a 	strh.w	r8, [sp, #154]	; 0x9a
            work_area.y2 = coords->y2;
 8012c60:	f7ff ba51 	b.w	8012106 <lv_draw_rect+0xaac>
        work_area.y1 = coords->y1 + radius;
 8012c64:	9a02      	ldr	r2, [sp, #8]
 8012c66:	e6b3      	b.n	80129d0 <lv_draw_rect+0x1376>
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 8012c68:	3d02      	subs	r5, #2
 8012c6a:	f7ff ba76 	b.w	801215a <lv_draw_rect+0xb00>
        if(cir_in.y < cir_in.x) {
 8012c6e:	f9bd 2090 	ldrsh.w	r2, [sp, #144]	; 0x90
 8012c72:	f9bd 1092 	ldrsh.w	r1, [sp, #146]	; 0x92
 8012c76:	4291      	cmp	r1, r2
 8012c78:	f280 813d 	bge.w	8012ef6 <lv_draw_rect+0x189c>
            act_w1 = cir_out.x - cir_in.x;
 8012c7c:	1a9a      	subs	r2, r3, r2
 8012c7e:	b212      	sxth	r2, r2
 8012c80:	920a      	str	r2, [sp, #40]	; 0x28
            act_w2 = act_w1 - 1;
 8012c82:	920c      	str	r2, [sp, #48]	; 0x30
        if(aa) {
 8012c84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012c86:	2a00      	cmp	r2, #0
 8012c88:	d036      	beq.n	8012cf8 <lv_draw_rect+0x169e>
            if(out_x_last != cir_out.x) {
 8012c8a:	42a3      	cmp	r3, r4
 8012c8c:	d017      	beq.n	8012cbe <lv_draw_rect+0x1664>
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8012c8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c90:	9a08      	ldr	r2, [sp, #32]
 8012c92:	1a9b      	subs	r3, r3, r2
 8012c94:	b21b      	sxth	r3, r3
 8012c96:	930f      	str	r3, [sp, #60]	; 0x3c
 8012c98:	2300      	movs	r3, #0
 8012c9a:	930d      	str	r3, [sp, #52]	; 0x34
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8012c9c:	9b07      	ldr	r3, [sp, #28]
 8012c9e:	3301      	adds	r3, #1
 8012ca0:	4423      	add	r3, r4
 8012ca2:	b21b      	sxth	r3, r3
 8012ca4:	9311      	str	r3, [sp, #68]	; 0x44
 8012ca6:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
                for(i = 0; i < seg_size; i++) {
 8012caa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012cac:	f8bd 6034 	ldrh.w	r6, [sp, #52]	; 0x34
 8012cb0:	4299      	cmp	r1, r3
 8012cb2:	f2c0 8127 	blt.w	8012f04 <lv_draw_rect+0x18aa>
                out_x_last      = cir_out.x;
 8012cb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012cb8:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 8012cbc:	9308      	str	r3, [sp, #32]
            if(in_x_last != cir_in.x) {
 8012cbe:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8012cc2:	9a06      	ldr	r2, [sp, #24]
 8012cc4:	4293      	cmp	r3, r2
 8012cc6:	d017      	beq.n	8012cf8 <lv_draw_rect+0x169e>
                in_y_seg_end        = cir_out.y;
 8012cc8:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 8012ccc:	2700      	movs	r7, #0
                in_y_seg_end        = cir_out.y;
 8012cce:	930d      	str	r3, [sp, #52]	; 0x34
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 8012cd0:	eba3 030b 	sub.w	r3, r3, fp
 8012cd4:	b21b      	sxth	r3, r3
 8012cd6:	930b      	str	r3, [sp, #44]	; 0x2c
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8012cd8:	4613      	mov	r3, r2
 8012cda:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012cdc:	4413      	add	r3, r2
 8012cde:	b21b      	sxth	r3, r3
 8012ce0:	9313      	str	r3, [sp, #76]	; 0x4c
 8012ce2:	b239      	sxth	r1, r7
                for(i = 0; i < seg_size; i++) {
 8012ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ce6:	b2be      	uxth	r6, r7
 8012ce8:	4299      	cmp	r1, r3
 8012cea:	f2c0 81a3 	blt.w	8013034 <lv_draw_rect+0x19da>
                in_x_last      = cir_in.x;
 8012cee:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
                in_y_seg_start = in_y_seg_end;
 8012cf2:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
                in_x_last      = cir_in.x;
 8012cf6:	9306      	str	r3, [sp, #24]
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8012cf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012cfa:	2b09      	cmp	r3, #9
 8012cfc:	d133      	bne.n	8012d66 <lv_draw_rect+0x170c>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 8012cfe:	9a07      	ldr	r2, [sp, #28]
            lv_draw_fill(&circ_area, mask, color, opa);
 8012d00:	4649      	mov	r1, r9
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 8012d02:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
            lv_draw_fill(&circ_area, mask, color, opa);
 8012d06:	a826      	add	r0, sp, #152	; 0x98
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 8012d08:	4413      	add	r3, r2
 8012d0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012d0c:	b21b      	sxth	r3, r3
 8012d0e:	1a9a      	subs	r2, r3, r2
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT1_X(cir_out);
 8012d10:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 8012d14:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 8012d18:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 8012d1c:	4443      	add	r3, r8
            lv_draw_fill(&circ_area, mask, color, opa);
 8012d1e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 8012d22:	b21b      	sxth	r3, r3
 8012d24:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 8012d28:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 8012d2c:	9b05      	ldr	r3, [sp, #20]
 8012d2e:	f000 fbe3 	bl	80134f8 <lv_draw_fill>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 8012d32:	9a07      	ldr	r2, [sp, #28]
 8012d34:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
            lv_draw_fill(&circ_area, mask, color, opa);
 8012d38:	4649      	mov	r1, r9
 8012d3a:	a826      	add	r0, sp, #152	; 0x98
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 8012d3c:	4413      	add	r3, r2
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 8012d3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 8012d40:	b21b      	sxth	r3, r3
 8012d42:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 8012d46:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 8012d4a:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8012d4e:	4443      	add	r3, r8
 8012d50:	b21b      	sxth	r3, r3
 8012d52:	1a9a      	subs	r2, r3, r2
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out);
 8012d54:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 8012d58:	9b05      	ldr	r3, [sp, #20]
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 8012d5a:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            lv_draw_fill(&circ_area, mask, color, opa);
 8012d5e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8012d62:	f000 fbc9 	bl	80134f8 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8012d66:	9b02      	ldr	r3, [sp, #8]
 8012d68:	f003 0305 	and.w	r3, r3, #5
 8012d6c:	2b05      	cmp	r3, #5
 8012d6e:	d133      	bne.n	8012dd8 <lv_draw_rect+0x177e>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 8012d70:	9a03      	ldr	r2, [sp, #12]
            lv_draw_fill(&circ_area, mask, color, opa);
 8012d72:	4649      	mov	r1, r9
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 8012d74:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
            lv_draw_fill(&circ_area, mask, color, opa);
 8012d78:	a826      	add	r0, sp, #152	; 0x98
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 8012d7a:	1ad3      	subs	r3, r2, r3
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 8012d7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 8012d7e:	b21b      	sxth	r3, r3
 8012d80:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 8012d84:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 8012d88:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8012d8c:	4443      	add	r3, r8
 8012d8e:	b21b      	sxth	r3, r3
 8012d90:	1a9a      	subs	r2, r3, r2
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out);
 8012d92:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 8012d96:	9b05      	ldr	r3, [sp, #20]
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 8012d98:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            lv_draw_fill(&circ_area, mask, color, opa);
 8012d9c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8012da0:	f000 fbaa 	bl	80134f8 <lv_draw_fill>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 8012da4:	9a03      	ldr	r2, [sp, #12]
 8012da6:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
            lv_draw_fill(&circ_area, mask, color, opa);
 8012daa:	4649      	mov	r1, r9
 8012dac:	a826      	add	r0, sp, #152	; 0x98
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 8012dae:	1ad3      	subs	r3, r2, r3
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 8012db0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 8012db2:	b21b      	sxth	r3, r3
 8012db4:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 8012db8:	4413      	add	r3, r2
            lv_draw_fill(&circ_area, mask, color, opa);
 8012dba:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 8012dbe:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 8012dc2:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 8012dc6:	4443      	add	r3, r8
 8012dc8:	b21b      	sxth	r3, r3
 8012dca:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 8012dce:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 8012dd2:	9b05      	ldr	r3, [sp, #20]
 8012dd4:	f000 fb90 	bl	80134f8 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8012dd8:	9b02      	ldr	r3, [sp, #8]
 8012dda:	f003 0306 	and.w	r3, r3, #6
 8012dde:	2b06      	cmp	r3, #6
 8012de0:	d139      	bne.n	8012e56 <lv_draw_rect+0x17fc>
            if(lb_origo.y + LV_CIRC_OCT4_Y(cir_out) > lt_origo.y + LV_CIRC_OCT5_Y(cir_out)) {
 8012de2:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 8012de6:	9904      	ldr	r1, [sp, #16]
 8012de8:	eb08 0203 	add.w	r2, r8, r3
 8012dec:	1acb      	subs	r3, r1, r3
 8012dee:	429a      	cmp	r2, r3
 8012df0:	dd16      	ble.n	8012e20 <lv_draw_rect+0x17c6>
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 8012df2:	9903      	ldr	r1, [sp, #12]
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 8012df4:	b21b      	sxth	r3, r3
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 8012df6:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
                lv_draw_fill(&circ_area, mask, color, opa);
 8012dfa:	a826      	add	r0, sp, #152	; 0x98
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 8012dfc:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 8012e00:	1a8a      	subs	r2, r1, r2
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 8012e02:	990c      	ldr	r1, [sp, #48]	; 0x30
                circ_area.y2 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 8012e04:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 8012e08:	b212      	sxth	r2, r2
                lv_draw_fill(&circ_area, mask, color, opa);
 8012e0a:	9b05      	ldr	r3, [sp, #20]
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 8012e0c:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 8012e10:	440a      	add	r2, r1
                lv_draw_fill(&circ_area, mask, color, opa);
 8012e12:	4649      	mov	r1, r9
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 8012e14:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
                lv_draw_fill(&circ_area, mask, color, opa);
 8012e18:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8012e1c:	f000 fb6c 	bl	80134f8 <lv_draw_fill>
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 8012e20:	9a03      	ldr	r2, [sp, #12]
            lv_draw_fill(&circ_area, mask, color, opa);
 8012e22:	4649      	mov	r1, r9
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 8012e24:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
            lv_draw_fill(&circ_area, mask, color, opa);
 8012e28:	a826      	add	r0, sp, #152	; 0x98
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 8012e2a:	1ad3      	subs	r3, r2, r3
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 8012e2c:	9a04      	ldr	r2, [sp, #16]
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 8012e2e:	b21b      	sxth	r3, r3
 8012e30:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 8012e34:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 8012e38:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8012e3c:	1ad3      	subs	r3, r2, r3
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 8012e3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 8012e40:	b21b      	sxth	r3, r3
 8012e42:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 8012e46:	4413      	add	r3, r2
            lv_draw_fill(&circ_area, mask, color, opa);
 8012e48:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 8012e4c:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 8012e50:	9b05      	ldr	r3, [sp, #20]
 8012e52:	f000 fb51 	bl	80134f8 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8012e56:	9b02      	ldr	r3, [sp, #8]
 8012e58:	f003 030a 	and.w	r3, r3, #10
 8012e5c:	2b0a      	cmp	r3, #10
 8012e5e:	d139      	bne.n	8012ed4 <lv_draw_rect+0x187a>
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 8012e60:	9a07      	ldr	r2, [sp, #28]
            lv_draw_fill(&circ_area, mask, color, opa);
 8012e62:	4649      	mov	r1, r9
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 8012e64:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
            lv_draw_fill(&circ_area, mask, color, opa);
 8012e68:	a826      	add	r0, sp, #152	; 0x98
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 8012e6a:	4413      	add	r3, r2
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 8012e6c:	9a04      	ldr	r2, [sp, #16]
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 8012e6e:	b21b      	sxth	r3, r3
 8012e70:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            circ_area.x2 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 8012e74:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 8012e78:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8012e7c:	1ad3      	subs	r3, r2, r3
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 8012e7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 8012e80:	b21b      	sxth	r3, r3
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 8012e82:	441a      	add	r2, r3
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 8012e84:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            lv_draw_fill(&circ_area, mask, color, opa);
 8012e88:	9b05      	ldr	r3, [sp, #20]
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 8012e8a:	f8ad 209e 	strh.w	r2, [sp, #158]	; 0x9e
            lv_draw_fill(&circ_area, mask, color, opa);
 8012e8e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8012e92:	f000 fb31 	bl	80134f8 <lv_draw_fill>
            if(rb_origo.y + LV_CIRC_OCT1_Y(cir_out) > rt_origo.y + LV_CIRC_OCT8_Y(cir_out)) {
 8012e96:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 8012e9a:	9a04      	ldr	r2, [sp, #16]
 8012e9c:	eb08 0103 	add.w	r1, r8, r3
 8012ea0:	1ad2      	subs	r2, r2, r3
 8012ea2:	4291      	cmp	r1, r2
 8012ea4:	dd16      	ble.n	8012ed4 <lv_draw_rect+0x187a>
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 8012ea6:	9b07      	ldr	r3, [sp, #28]
                lv_draw_fill(&circ_area, mask, color, opa);
 8012ea8:	a826      	add	r0, sp, #152	; 0x98
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 8012eaa:	f8bd 1088 	ldrh.w	r1, [sp, #136]	; 0x88
 8012eae:	4419      	add	r1, r3
 8012eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012eb2:	b209      	sxth	r1, r1
 8012eb4:	1acb      	subs	r3, r1, r3
                circ_area.x2 = rt_origo.x + LV_CIRC_OCT8_X(cir_out);
 8012eb6:	f8ad 109c 	strh.w	r1, [sp, #156]	; 0x9c
                lv_draw_fill(&circ_area, mask, color, opa);
 8012eba:	4649      	mov	r1, r9
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 8012ebc:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 8012ec0:	b213      	sxth	r3, r2
                lv_draw_fill(&circ_area, mask, color, opa);
 8012ec2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 8012ec6:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                circ_area.y2 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 8012eca:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                lv_draw_fill(&circ_area, mask, color, opa);
 8012ece:	9b05      	ldr	r3, [sp, #20]
 8012ed0:	f000 fb12 	bl	80134f8 <lv_draw_fill>
        lv_circ_next(&cir_out, &tmp_out);
 8012ed4:	a91e      	add	r1, sp, #120	; 0x78
 8012ed6:	a822      	add	r0, sp, #136	; 0x88
 8012ed8:	f7fd fc60 	bl	801079c <lv_circ_next>
        if(cir_in.y < cir_in.x) {
 8012edc:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 8012ee0:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8012ee4:	429a      	cmp	r2, r3
 8012ee6:	f6bf a97e 	bge.w	80121e6 <lv_draw_rect+0xb8c>
            lv_circ_next(&cir_in, &tmp_in);
 8012eea:	a920      	add	r1, sp, #128	; 0x80
 8012eec:	a824      	add	r0, sp, #144	; 0x90
 8012eee:	f7fd fc55 	bl	801079c <lv_circ_next>
 8012ef2:	f7ff b978 	b.w	80121e6 <lv_draw_rect+0xb8c>
            act_w1 = cir_out.x - cir_out.y;
 8012ef6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012ef8:	1a9a      	subs	r2, r3, r2
 8012efa:	b212      	sxth	r2, r2
 8012efc:	920a      	str	r2, [sp, #40]	; 0x28
            act_w2 = act_w1 - 1;
 8012efe:	3a01      	subs	r2, #1
 8012f00:	b212      	sxth	r2, r2
 8012f02:	e6be      	b.n	8012c82 <lv_draw_rect+0x1628>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 8012f04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 8012f06:	9a05      	ldr	r2, [sp, #20]
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 8012f08:	2b01      	cmp	r3, #1
 8012f0a:	f000 808c 	beq.w	8013026 <lv_draw_rect+0x19cc>
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f7f1 f98c 	bl	800422c <antialias_get_opa_circ>
 8012f14:	4605      	mov	r5, r0
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8012f16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012f18:	2b09      	cmp	r3, #9
 8012f1a:	d11a      	bne.n	8012f52 <lv_draw_rect+0x18f8>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8012f1c:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 8012f20:	464a      	mov	r2, r9
 8012f22:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8012f26:	eb07 0108 	add.w	r1, r7, r8
 8012f2a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012f2c:	9500      	str	r5, [sp, #0]
 8012f2e:	4431      	add	r1, r6
 8012f30:	b209      	sxth	r1, r1
 8012f32:	f000 fa91 	bl	8013458 <lv_draw_px>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8012f36:	9b07      	ldr	r3, [sp, #28]
 8012f38:	f108 0101 	add.w	r1, r8, #1
 8012f3c:	9500      	str	r5, [sp, #0]
 8012f3e:	18f8      	adds	r0, r7, r3
 8012f40:	464a      	mov	r2, r9
 8012f42:	4421      	add	r1, r4
 8012f44:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8012f48:	4430      	add	r0, r6
 8012f4a:	b209      	sxth	r1, r1
 8012f4c:	b200      	sxth	r0, r0
 8012f4e:	f000 fa83 	bl	8013458 <lv_draw_px>
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8012f52:	9b02      	ldr	r3, [sp, #8]
 8012f54:	f003 0305 	and.w	r3, r3, #5
 8012f58:	2b05      	cmp	r3, #5
 8012f5a:	d11d      	bne.n	8012f98 <lv_draw_rect+0x193e>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 8012f5c:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 8012f60:	f108 0101 	add.w	r1, r8, #1
 8012f64:	9b03      	ldr	r3, [sp, #12]
 8012f66:	464a      	mov	r2, r9
 8012f68:	4421      	add	r1, r4
 8012f6a:	9500      	str	r5, [sp, #0]
 8012f6c:	1bd8      	subs	r0, r3, r7
 8012f6e:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8012f72:	b209      	sxth	r1, r1
 8012f74:	1b80      	subs	r0, r0, r6
 8012f76:	b200      	sxth	r0, r0
 8012f78:	f000 fa6e 	bl	8013458 <lv_draw_px>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 8012f7c:	9b03      	ldr	r3, [sp, #12]
 8012f7e:	eb07 0108 	add.w	r1, r7, r8
 8012f82:	9500      	str	r5, [sp, #0]
 8012f84:	1e58      	subs	r0, r3, #1
 8012f86:	464a      	mov	r2, r9
 8012f88:	4431      	add	r1, r6
 8012f8a:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8012f8e:	1b00      	subs	r0, r0, r4
 8012f90:	b209      	sxth	r1, r1
 8012f92:	b200      	sxth	r0, r0
 8012f94:	f000 fa60 	bl	8013458 <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8012f98:	9b02      	ldr	r3, [sp, #8]
 8012f9a:	f003 0306 	and.w	r3, r3, #6
 8012f9e:	2b06      	cmp	r3, #6
 8012fa0:	d11d      	bne.n	8012fde <lv_draw_rect+0x1984>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 8012fa2:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 8012fa6:	464a      	mov	r2, r9
 8012fa8:	9b04      	ldr	r3, [sp, #16]
 8012faa:	9500      	str	r5, [sp, #0]
 8012fac:	1bd9      	subs	r1, r3, r7
 8012fae:	9b03      	ldr	r3, [sp, #12]
 8012fb0:	1e58      	subs	r0, r3, #1
 8012fb2:	1b89      	subs	r1, r1, r6
 8012fb4:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8012fb8:	1b00      	subs	r0, r0, r4
 8012fba:	b209      	sxth	r1, r1
 8012fbc:	b200      	sxth	r0, r0
 8012fbe:	f000 fa4b 	bl	8013458 <lv_draw_px>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 8012fc2:	9b04      	ldr	r3, [sp, #16]
 8012fc4:	9500      	str	r5, [sp, #0]
 8012fc6:	464a      	mov	r2, r9
 8012fc8:	1e59      	subs	r1, r3, #1
 8012fca:	9b03      	ldr	r3, [sp, #12]
 8012fcc:	1bd8      	subs	r0, r3, r7
 8012fce:	1b09      	subs	r1, r1, r4
 8012fd0:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8012fd4:	1b80      	subs	r0, r0, r6
 8012fd6:	b209      	sxth	r1, r1
 8012fd8:	b200      	sxth	r0, r0
 8012fda:	f000 fa3d 	bl	8013458 <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8012fde:	9b02      	ldr	r3, [sp, #8]
 8012fe0:	f003 030a 	and.w	r3, r3, #10
 8012fe4:	2b0a      	cmp	r3, #10
 8012fe6:	d11a      	bne.n	801301e <lv_draw_rect+0x19c4>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 8012fe8:	9b04      	ldr	r3, [sp, #16]
 8012fea:	464a      	mov	r2, r9
 8012fec:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 8012ff0:	1e59      	subs	r1, r3, #1
 8012ff2:	9b07      	ldr	r3, [sp, #28]
 8012ff4:	9500      	str	r5, [sp, #0]
 8012ff6:	18f8      	adds	r0, r7, r3
 8012ff8:	1b09      	subs	r1, r1, r4
 8012ffa:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8012ffe:	4430      	add	r0, r6
 8013000:	b209      	sxth	r1, r1
 8013002:	b200      	sxth	r0, r0
 8013004:	f000 fa28 	bl	8013458 <lv_draw_px>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 8013008:	9b04      	ldr	r3, [sp, #16]
 801300a:	9500      	str	r5, [sp, #0]
 801300c:	464a      	mov	r2, r9
 801300e:	1bd9      	subs	r1, r3, r7
 8013010:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013012:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8013016:	1b89      	subs	r1, r1, r6
 8013018:	b209      	sxth	r1, r1
 801301a:	f000 fa1d 	bl	8013458 <lv_draw_px>
 801301e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013020:	3301      	adds	r3, #1
 8013022:	930d      	str	r3, [sp, #52]	; 0x34
 8013024:	e63f      	b.n	8012ca6 <lv_draw_rect+0x164c>
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 8013026:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013028:	f7f0 ffee 	bl	8004008 <lv_draw_aa_get_opa>
 801302c:	9b05      	ldr	r3, [sp, #20]
 801302e:	1a18      	subs	r0, r3, r0
 8013030:	b2c5      	uxtb	r5, r0
 8013032:	e770      	b.n	8012f16 <lv_draw_rect+0x18bc>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 8013034:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 8013036:	9a05      	ldr	r2, [sp, #20]
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 8013038:	2b01      	cmp	r3, #1
 801303a:	f000 80a5 	beq.w	8013188 <lv_draw_rect+0x1b2e>
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 801303e:	4618      	mov	r0, r3
 8013040:	f7f1 f8f4 	bl	800422c <antialias_get_opa_circ>
 8013044:	9b05      	ldr	r3, [sp, #20]
 8013046:	1a18      	subs	r0, r3, r0
 8013048:	b2c5      	uxtb	r5, r0
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 801304a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801304c:	2b09      	cmp	r3, #9
 801304e:	d10a      	bne.n	8013066 <lv_draw_rect+0x1a0c>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8013050:	eb08 010b 	add.w	r1, r8, fp
 8013054:	9500      	str	r5, [sp, #0]
 8013056:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 801305a:	464a      	mov	r2, r9
 801305c:	4431      	add	r1, r6
 801305e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013060:	b209      	sxth	r1, r1
 8013062:	f000 f9f9 	bl	8013458 <lv_draw_px>
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8013066:	9b02      	ldr	r3, [sp, #8]
 8013068:	f003 0305 	and.w	r3, r3, #5
 801306c:	2b05      	cmp	r3, #5
 801306e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013070:	d10f      	bne.n	8013092 <lv_draw_rect+0x1a38>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 8013072:	9b06      	ldr	r3, [sp, #24]
 8013074:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8013078:	9500      	str	r5, [sp, #0]
 801307a:	464a      	mov	r2, r9
 801307c:	4419      	add	r1, r3
 801307e:	9b03      	ldr	r3, [sp, #12]
 8013080:	eba3 000b 	sub.w	r0, r3, fp
 8013084:	b209      	sxth	r1, r1
 8013086:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 801308a:	1b80      	subs	r0, r0, r6
 801308c:	b200      	sxth	r0, r0
 801308e:	f000 f9e3 	bl	8013458 <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8013092:	9b02      	ldr	r3, [sp, #8]
 8013094:	f003 0306 	and.w	r3, r3, #6
 8013098:	2b06      	cmp	r3, #6
 801309a:	9311      	str	r3, [sp, #68]	; 0x44
 801309c:	d10f      	bne.n	80130be <lv_draw_rect+0x1a64>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 801309e:	9b04      	ldr	r3, [sp, #16]
 80130a0:	464a      	mov	r2, r9
 80130a2:	9500      	str	r5, [sp, #0]
 80130a4:	eba3 010b 	sub.w	r1, r3, fp
 80130a8:	9b03      	ldr	r3, [sp, #12]
 80130aa:	1c58      	adds	r0, r3, #1
 80130ac:	9b06      	ldr	r3, [sp, #24]
 80130ae:	1b89      	subs	r1, r1, r6
 80130b0:	1ac0      	subs	r0, r0, r3
 80130b2:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 80130b6:	b209      	sxth	r1, r1
 80130b8:	b200      	sxth	r0, r0
 80130ba:	f000 f9cd 	bl	8013458 <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 80130be:	9b02      	ldr	r3, [sp, #8]
 80130c0:	f003 030a 	and.w	r3, r3, #10
 80130c4:	2b0a      	cmp	r3, #10
 80130c6:	9312      	str	r3, [sp, #72]	; 0x48
 80130c8:	d10f      	bne.n	80130ea <lv_draw_rect+0x1a90>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 80130ca:	9b04      	ldr	r3, [sp, #16]
 80130cc:	464a      	mov	r2, r9
 80130ce:	9500      	str	r5, [sp, #0]
 80130d0:	1c59      	adds	r1, r3, #1
 80130d2:	9b06      	ldr	r3, [sp, #24]
 80130d4:	1ac9      	subs	r1, r1, r3
 80130d6:	9b07      	ldr	r3, [sp, #28]
 80130d8:	eb0b 0003 	add.w	r0, fp, r3
 80130dc:	b209      	sxth	r1, r1
 80130de:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 80130e2:	4430      	add	r0, r6
 80130e4:	b200      	sxth	r0, r0
 80130e6:	f000 f9b7 	bl	8013458 <lv_draw_px>
                    if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 80130ea:	9a06      	ldr	r2, [sp, #24]
 80130ec:	eb0b 0307 	add.w	r3, fp, r7
 80130f0:	3a01      	subs	r2, #1
 80130f2:	4293      	cmp	r3, r2
 80130f4:	d046      	beq.n	8013184 <lv_draw_rect+0x1b2a>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 80130f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80130f8:	2b09      	cmp	r3, #9
 80130fa:	d10f      	bne.n	801311c <lv_draw_rect+0x1ac2>
                            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1,
 80130fc:	9b06      	ldr	r3, [sp, #24]
 80130fe:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8013102:	9500      	str	r5, [sp, #0]
 8013104:	464a      	mov	r2, r9
 8013106:	4419      	add	r1, r3
 8013108:	9b07      	ldr	r3, [sp, #28]
 801310a:	eb03 000b 	add.w	r0, r3, fp
 801310e:	b209      	sxth	r1, r1
 8013110:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8013114:	4430      	add	r0, r6
 8013116:	b200      	sxth	r0, r0
 8013118:	f000 f99e 	bl	8013458 <lv_draw_px>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 801311c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801311e:	2b05      	cmp	r3, #5
 8013120:	d10e      	bne.n	8013140 <lv_draw_rect+0x1ae6>
                            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i,
 8013122:	9b03      	ldr	r3, [sp, #12]
 8013124:	eb08 010b 	add.w	r1, r8, fp
 8013128:	9500      	str	r5, [sp, #0]
 801312a:	464a      	mov	r2, r9
 801312c:	1c58      	adds	r0, r3, #1
 801312e:	9b06      	ldr	r3, [sp, #24]
 8013130:	4431      	add	r1, r6
 8013132:	1ac0      	subs	r0, r0, r3
 8013134:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8013138:	b209      	sxth	r1, r1
 801313a:	b200      	sxth	r0, r0
 801313c:	f000 f98c 	bl	8013458 <lv_draw_px>
                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8013140:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013142:	2b06      	cmp	r3, #6
 8013144:	d10f      	bne.n	8013166 <lv_draw_rect+0x1b0c>
                            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1,
 8013146:	9b04      	ldr	r3, [sp, #16]
 8013148:	464a      	mov	r2, r9
 801314a:	9500      	str	r5, [sp, #0]
 801314c:	1c59      	adds	r1, r3, #1
 801314e:	9b06      	ldr	r3, [sp, #24]
 8013150:	1ac9      	subs	r1, r1, r3
 8013152:	9b03      	ldr	r3, [sp, #12]
 8013154:	eba3 000b 	sub.w	r0, r3, fp
 8013158:	b209      	sxth	r1, r1
 801315a:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 801315e:	1b80      	subs	r0, r0, r6
 8013160:	b200      	sxth	r0, r0
 8013162:	f000 f979 	bl	8013458 <lv_draw_px>
                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8013166:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013168:	2b0a      	cmp	r3, #10
 801316a:	d10b      	bne.n	8013184 <lv_draw_rect+0x1b2a>
                            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i,
 801316c:	9b04      	ldr	r3, [sp, #16]
 801316e:	464a      	mov	r2, r9
 8013170:	9500      	str	r5, [sp, #0]
 8013172:	eba3 010b 	sub.w	r1, r3, fp
 8013176:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013178:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 801317c:	1b89      	subs	r1, r1, r6
 801317e:	b209      	sxth	r1, r1
 8013180:	f000 f96a 	bl	8013458 <lv_draw_px>
 8013184:	3701      	adds	r7, #1
 8013186:	e5ac      	b.n	8012ce2 <lv_draw_rect+0x1688>
                        aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 8013188:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801318a:	f7f0 ff3d 	bl	8004008 <lv_draw_aa_get_opa>
 801318e:	4605      	mov	r5, r0
 8013190:	e75b      	b.n	801304a <lv_draw_rect+0x19f0>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 8013192:	9a05      	ldr	r2, [sp, #20]
 8013194:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013196:	f7f0 ff37 	bl	8004008 <lv_draw_aa_get_opa>
 801319a:	9b05      	ldr	r3, [sp, #20]
 801319c:	1a18      	subs	r0, r3, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 801319e:	9b02      	ldr	r3, [sp, #8]
 80131a0:	f003 0309 	and.w	r3, r3, #9
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 80131a4:	b2c5      	uxtb	r5, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 80131a6:	2b09      	cmp	r3, #9
 80131a8:	d11a      	bne.n	80131e0 <lv_draw_rect+0x1b86>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 80131aa:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 80131ae:	464a      	mov	r2, r9
 80131b0:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 80131b4:	eb07 0108 	add.w	r1, r7, r8
 80131b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80131ba:	9500      	str	r5, [sp, #0]
 80131bc:	4431      	add	r1, r6
 80131be:	b209      	sxth	r1, r1
 80131c0:	f000 f94a 	bl	8013458 <lv_draw_px>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 80131c4:	9b07      	ldr	r3, [sp, #28]
 80131c6:	f108 0101 	add.w	r1, r8, #1
 80131ca:	9500      	str	r5, [sp, #0]
 80131cc:	18f8      	adds	r0, r7, r3
 80131ce:	464a      	mov	r2, r9
 80131d0:	4421      	add	r1, r4
 80131d2:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 80131d6:	4430      	add	r0, r6
 80131d8:	b209      	sxth	r1, r1
 80131da:	b200      	sxth	r0, r0
 80131dc:	f000 f93c 	bl	8013458 <lv_draw_px>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 80131e0:	9b02      	ldr	r3, [sp, #8]
 80131e2:	f003 0305 	and.w	r3, r3, #5
 80131e6:	2b05      	cmp	r3, #5
 80131e8:	d11d      	bne.n	8013226 <lv_draw_rect+0x1bcc>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 80131ea:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 80131ee:	f108 0101 	add.w	r1, r8, #1
 80131f2:	9b03      	ldr	r3, [sp, #12]
 80131f4:	464a      	mov	r2, r9
 80131f6:	4421      	add	r1, r4
 80131f8:	9500      	str	r5, [sp, #0]
 80131fa:	1bd8      	subs	r0, r3, r7
 80131fc:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8013200:	b209      	sxth	r1, r1
 8013202:	1b80      	subs	r0, r0, r6
 8013204:	b200      	sxth	r0, r0
 8013206:	f000 f927 	bl	8013458 <lv_draw_px>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 801320a:	9b03      	ldr	r3, [sp, #12]
 801320c:	eb07 0108 	add.w	r1, r7, r8
 8013210:	9500      	str	r5, [sp, #0]
 8013212:	1e58      	subs	r0, r3, #1
 8013214:	464a      	mov	r2, r9
 8013216:	4431      	add	r1, r6
 8013218:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 801321c:	1b00      	subs	r0, r0, r4
 801321e:	b209      	sxth	r1, r1
 8013220:	b200      	sxth	r0, r0
 8013222:	f000 f919 	bl	8013458 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8013226:	9b02      	ldr	r3, [sp, #8]
 8013228:	f003 0306 	and.w	r3, r3, #6
 801322c:	2b06      	cmp	r3, #6
 801322e:	d11d      	bne.n	801326c <lv_draw_rect+0x1c12>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 8013230:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 8013234:	464a      	mov	r2, r9
 8013236:	9b04      	ldr	r3, [sp, #16]
 8013238:	9500      	str	r5, [sp, #0]
 801323a:	1bd9      	subs	r1, r3, r7
 801323c:	9b03      	ldr	r3, [sp, #12]
 801323e:	1e58      	subs	r0, r3, #1
 8013240:	1b89      	subs	r1, r1, r6
 8013242:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8013246:	1b00      	subs	r0, r0, r4
 8013248:	b209      	sxth	r1, r1
 801324a:	b200      	sxth	r0, r0
 801324c:	f000 f904 	bl	8013458 <lv_draw_px>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 8013250:	9b04      	ldr	r3, [sp, #16]
 8013252:	9500      	str	r5, [sp, #0]
 8013254:	464a      	mov	r2, r9
 8013256:	1e59      	subs	r1, r3, #1
 8013258:	9b03      	ldr	r3, [sp, #12]
 801325a:	1bd8      	subs	r0, r3, r7
 801325c:	1b09      	subs	r1, r1, r4
 801325e:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8013262:	1b80      	subs	r0, r0, r6
 8013264:	b209      	sxth	r1, r1
 8013266:	b200      	sxth	r0, r0
 8013268:	f000 f8f6 	bl	8013458 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 801326c:	9b02      	ldr	r3, [sp, #8]
 801326e:	f003 030a 	and.w	r3, r3, #10
 8013272:	2b0a      	cmp	r3, #10
 8013274:	d11a      	bne.n	80132ac <lv_draw_rect+0x1c52>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 8013276:	9b04      	ldr	r3, [sp, #16]
 8013278:	464a      	mov	r2, r9
 801327a:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801327e:	1e59      	subs	r1, r3, #1
 8013280:	9b07      	ldr	r3, [sp, #28]
 8013282:	9500      	str	r5, [sp, #0]
 8013284:	18f8      	adds	r0, r7, r3
 8013286:	1b09      	subs	r1, r1, r4
 8013288:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 801328c:	4430      	add	r0, r6
 801328e:	b209      	sxth	r1, r1
 8013290:	b200      	sxth	r0, r0
 8013292:	f000 f8e1 	bl	8013458 <lv_draw_px>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 8013296:	9b04      	ldr	r3, [sp, #16]
 8013298:	9500      	str	r5, [sp, #0]
 801329a:	464a      	mov	r2, r9
 801329c:	1bd9      	subs	r1, r3, r7
 801329e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80132a0:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 80132a4:	1b89      	subs	r1, r1, r6
 80132a6:	b209      	sxth	r1, r1
 80132a8:	f000 f8d6 	bl	8013458 <lv_draw_px>
 80132ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132ae:	3301      	adds	r3, #1
 80132b0:	9309      	str	r3, [sp, #36]	; 0x24
 80132b2:	f7fe bfb0 	b.w	8012216 <lv_draw_rect+0xbbc>
            lv_opa_t aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 80132b6:	9a05      	ldr	r2, [sp, #20]
 80132b8:	9808      	ldr	r0, [sp, #32]
 80132ba:	f7f0 fea5 	bl	8004008 <lv_draw_aa_get_opa>
 80132be:	9b02      	ldr	r3, [sp, #8]
 80132c0:	4605      	mov	r5, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 80132c2:	f003 0309 	and.w	r3, r3, #9
 80132c6:	2b09      	cmp	r3, #9
 80132c8:	9309      	str	r3, [sp, #36]	; 0x24
 80132ca:	d10a      	bne.n	80132e2 <lv_draw_rect+0x1c88>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 80132cc:	eb0b 0108 	add.w	r1, fp, r8
 80132d0:	9000      	str	r0, [sp, #0]
 80132d2:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 80132d6:	464a      	mov	r2, r9
 80132d8:	4421      	add	r1, r4
 80132da:	980c      	ldr	r0, [sp, #48]	; 0x30
 80132dc:	b209      	sxth	r1, r1
 80132de:	f000 f8bb 	bl	8013458 <lv_draw_px>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 80132e2:	9b02      	ldr	r3, [sp, #8]
 80132e4:	f003 0305 	and.w	r3, r3, #5
 80132e8:	2b05      	cmp	r3, #5
 80132ea:	930a      	str	r3, [sp, #40]	; 0x28
 80132ec:	d10f      	bne.n	801330e <lv_draw_rect+0x1cb4>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 80132ee:	9b06      	ldr	r3, [sp, #24]
 80132f0:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 80132f4:	9500      	str	r5, [sp, #0]
 80132f6:	464a      	mov	r2, r9
 80132f8:	4419      	add	r1, r3
 80132fa:	9b03      	ldr	r3, [sp, #12]
 80132fc:	eba3 000b 	sub.w	r0, r3, fp
 8013300:	b209      	sxth	r1, r1
 8013302:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8013306:	1b00      	subs	r0, r0, r4
 8013308:	b200      	sxth	r0, r0
 801330a:	f000 f8a5 	bl	8013458 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 801330e:	9b02      	ldr	r3, [sp, #8]
 8013310:	f003 0306 	and.w	r3, r3, #6
 8013314:	2b06      	cmp	r3, #6
 8013316:	930b      	str	r3, [sp, #44]	; 0x2c
 8013318:	d10f      	bne.n	801333a <lv_draw_rect+0x1ce0>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 801331a:	9b04      	ldr	r3, [sp, #16]
 801331c:	464a      	mov	r2, r9
 801331e:	9500      	str	r5, [sp, #0]
 8013320:	eba3 010b 	sub.w	r1, r3, fp
 8013324:	9b03      	ldr	r3, [sp, #12]
 8013326:	1c58      	adds	r0, r3, #1
 8013328:	9b06      	ldr	r3, [sp, #24]
 801332a:	1b09      	subs	r1, r1, r4
 801332c:	1ac0      	subs	r0, r0, r3
 801332e:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8013332:	b209      	sxth	r1, r1
 8013334:	b200      	sxth	r0, r0
 8013336:	f000 f88f 	bl	8013458 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 801333a:	9b02      	ldr	r3, [sp, #8]
 801333c:	f003 070a 	and.w	r7, r3, #10
 8013340:	2f0a      	cmp	r7, #10
 8013342:	d10f      	bne.n	8013364 <lv_draw_rect+0x1d0a>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 8013344:	9b04      	ldr	r3, [sp, #16]
 8013346:	464a      	mov	r2, r9
 8013348:	9500      	str	r5, [sp, #0]
 801334a:	1c59      	adds	r1, r3, #1
 801334c:	9b06      	ldr	r3, [sp, #24]
 801334e:	1ac9      	subs	r1, r1, r3
 8013350:	9b07      	ldr	r3, [sp, #28]
 8013352:	eb0b 0003 	add.w	r0, fp, r3
 8013356:	b209      	sxth	r1, r1
 8013358:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 801335c:	4420      	add	r0, r4
 801335e:	b200      	sxth	r0, r0
 8013360:	f000 f87a 	bl	8013458 <lv_draw_px>
            if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 8013364:	9b06      	ldr	r3, [sp, #24]
 8013366:	eb0b 0206 	add.w	r2, fp, r6
 801336a:	3b01      	subs	r3, #1
 801336c:	4293      	cmp	r3, r2
 801336e:	d045      	beq.n	80133fc <lv_draw_rect+0x1da2>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8013370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013372:	2b09      	cmp	r3, #9
 8013374:	d10f      	bne.n	8013396 <lv_draw_rect+0x1d3c>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1, mask,
 8013376:	9b06      	ldr	r3, [sp, #24]
 8013378:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 801337c:	9500      	str	r5, [sp, #0]
 801337e:	464a      	mov	r2, r9
 8013380:	4419      	add	r1, r3
 8013382:	9b07      	ldr	r3, [sp, #28]
 8013384:	eb0b 0003 	add.w	r0, fp, r3
 8013388:	b209      	sxth	r1, r1
 801338a:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 801338e:	4420      	add	r0, r4
 8013390:	b200      	sxth	r0, r0
 8013392:	f000 f861 	bl	8013458 <lv_draw_px>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8013396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013398:	2b05      	cmp	r3, #5
 801339a:	d10e      	bne.n	80133ba <lv_draw_rect+0x1d60>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 801339c:	9b03      	ldr	r3, [sp, #12]
 801339e:	eb0b 0108 	add.w	r1, fp, r8
 80133a2:	9500      	str	r5, [sp, #0]
 80133a4:	464a      	mov	r2, r9
 80133a6:	1c58      	adds	r0, r3, #1
 80133a8:	9b06      	ldr	r3, [sp, #24]
 80133aa:	4421      	add	r1, r4
 80133ac:	1ac0      	subs	r0, r0, r3
 80133ae:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 80133b2:	b209      	sxth	r1, r1
 80133b4:	b200      	sxth	r0, r0
 80133b6:	f000 f84f 	bl	8013458 <lv_draw_px>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 80133ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80133bc:	2b06      	cmp	r3, #6
 80133be:	d10f      	bne.n	80133e0 <lv_draw_rect+0x1d86>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1, mask,
 80133c0:	9b04      	ldr	r3, [sp, #16]
 80133c2:	464a      	mov	r2, r9
 80133c4:	9500      	str	r5, [sp, #0]
 80133c6:	1c59      	adds	r1, r3, #1
 80133c8:	9b06      	ldr	r3, [sp, #24]
 80133ca:	1ac9      	subs	r1, r1, r3
 80133cc:	9b03      	ldr	r3, [sp, #12]
 80133ce:	eba3 000b 	sub.w	r0, r3, fp
 80133d2:	b209      	sxth	r1, r1
 80133d4:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 80133d8:	1b00      	subs	r0, r0, r4
 80133da:	b200      	sxth	r0, r0
 80133dc:	f000 f83c 	bl	8013458 <lv_draw_px>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 80133e0:	2f0a      	cmp	r7, #10
 80133e2:	d10b      	bne.n	80133fc <lv_draw_rect+0x1da2>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 80133e4:	9b04      	ldr	r3, [sp, #16]
 80133e6:	464a      	mov	r2, r9
 80133e8:	9500      	str	r5, [sp, #0]
 80133ea:	eba3 010b 	sub.w	r1, r3, fp
 80133ee:	980c      	ldr	r0, [sp, #48]	; 0x30
 80133f0:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 80133f4:	1b09      	subs	r1, r1, r4
 80133f6:	b209      	sxth	r1, r1
 80133f8:	f000 f82e 	bl	8013458 <lv_draw_px>
 80133fc:	3601      	adds	r6, #1
 80133fe:	f7fe bf6d 	b.w	80122dc <lv_draw_rect+0xc82>

08013402 <lv_color_mix>:
    return color.full;
#endif
}

static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 8013402:	b570      	push	{r4, r5, r6, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8013404:	b293      	uxth	r3, r2
 8013406:	f3c1 25c4 	ubfx	r5, r1, #11, #5
 801340a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801340e:	f3c0 24c4 	ubfx	r4, r0, #11, #5
    uint16_t g_2   = (c2.ch.green_h << 3) + c2.ch.green_l;
    uint16_t g_out = (uint16_t)((uint16_t)g_1 * mix + (g_2 * (255 - mix))) >> 8;
    ret.ch.green_h = g_out >> 3;
    ret.ch.green_l = g_out & 0x7;
#else
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8013412:	f3c1 1645 	ubfx	r6, r1, #5, #6
#endif
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8013416:	f001 011f 	and.w	r1, r1, #31
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 801341a:	fb15 f502 	smulbb	r5, r5, r2
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 801341e:	fb16 f602 	smulbb	r6, r6, r2
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8013422:	fb04 5403 	mla	r4, r4, r3, r5
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8013426:	fb11 f102 	smulbb	r1, r1, r2
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 801342a:	f3c0 1545 	ubfx	r5, r0, #5, #6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 801342e:	f000 001f 	and.w	r0, r0, #31
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8013432:	f3c4 2404 	ubfx	r4, r4, #8, #5
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8013436:	fb05 6503 	mla	r5, r5, r3, r6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 801343a:	fb00 1303 	mla	r3, r0, r3, r1
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 801343e:	f04f 0000 	mov.w	r0, #0
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8013442:	f3c5 2505 	ubfx	r5, r5, #8, #6
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8013446:	f3c3 2307 	ubfx	r3, r3, #8, #8
    return ret;
 801344a:	f363 0004 	bfi	r0, r3, #0, #5
 801344e:	f365 104a 	bfi	r0, r5, #5, #6
 8013452:	f364 20cf 	bfi	r0, r4, #11, #5
}
 8013456:	bd70      	pop	{r4, r5, r6, pc}

08013458 <lv_draw_px>:
{
 8013458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801345c:	b085      	sub	sp, #20
 801345e:	4604      	mov	r4, r0
 8013460:	4689      	mov	r9, r1
 8013462:	461e      	mov	r6, r3
 8013464:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
    if(opa < LV_OPA_MIN) return;
 8013468:	f1b8 0f0f 	cmp.w	r8, #15
 801346c:	d92f      	bls.n	80134ce <lv_draw_px+0x76>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 801346e:	f1b8 0ffc 	cmp.w	r8, #252	; 0xfc
    if(x < mask_p->x1 || x > mask_p->x2 || y < mask_p->y1 || y > mask_p->y2) {
 8013472:	f9b2 3000 	ldrsh.w	r3, [r2]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8013476:	bf28      	it	cs
 8013478:	f04f 08ff 	movcs.w	r8, #255	; 0xff
    if(x < mask_p->x1 || x > mask_p->x2 || y < mask_p->y1 || y > mask_p->y2) {
 801347c:	4283      	cmp	r3, r0
 801347e:	dc26      	bgt.n	80134ce <lv_draw_px+0x76>
 8013480:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8013484:	4283      	cmp	r3, r0
 8013486:	db22      	blt.n	80134ce <lv_draw_px+0x76>
 8013488:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801348c:	428b      	cmp	r3, r1
 801348e:	dc1e      	bgt.n	80134ce <lv_draw_px+0x76>
 8013490:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8013494:	428b      	cmp	r3, r1
 8013496:	db1a      	blt.n	80134ce <lv_draw_px+0x76>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 8013498:	f7ef fd84 	bl	8002fa4 <lv_refr_get_disp_refreshing>
 801349c:	4607      	mov	r7, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 801349e:	f7fb fc6a 	bl	800ed76 <lv_disp_get_buf>
 80134a2:	8a82      	ldrh	r2, [r0, #20]
 80134a4:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 80134a8:	3201      	adds	r2, #1
    y -= vdb->area.y1;
 80134aa:	8a41      	ldrh	r1, [r0, #18]
    x -= vdb->area.x1;
 80134ac:	1ae4      	subs	r4, r4, r3
 80134ae:	1ad5      	subs	r5, r2, r3
    y -= vdb->area.y1;
 80134b0:	eba9 0101 	sub.w	r1, r9, r1
    x -= vdb->area.x1;
 80134b4:	b223      	sxth	r3, r4
 80134b6:	b22a      	sxth	r2, r5
    if(disp->driver.set_px_cb) {
 80134b8:	697d      	ldr	r5, [r7, #20]
    y -= vdb->area.y1;
 80134ba:	b209      	sxth	r1, r1
    if(disp->driver.set_px_cb) {
 80134bc:	b155      	cbz	r5, 80134d4 <lv_draw_px+0x7c>
        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, x, y, color, opa);
 80134be:	f8cd 8008 	str.w	r8, [sp, #8]
 80134c2:	f8ad 6004 	strh.w	r6, [sp, #4]
 80134c6:	9100      	str	r1, [sp, #0]
 80134c8:	6881      	ldr	r1, [r0, #8]
 80134ca:	4638      	mov	r0, r7
 80134cc:	47a8      	blx	r5
}
 80134ce:	b005      	add	sp, #20
 80134d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if(opa == LV_OPA_COVER) {
 80134d4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
        lv_color_t * vdb_px_p = vdb->buf_act;
 80134d8:	6885      	ldr	r5, [r0, #8]
        vdb_px_p += y * vdb_width + x;
 80134da:	fb01 3402 	mla	r4, r1, r2, r3
            if(opa == LV_OPA_COVER) {
 80134de:	d102      	bne.n	80134e6 <lv_draw_px+0x8e>
                *vdb_px_p = color;
 80134e0:	f825 6014 	strh.w	r6, [r5, r4, lsl #1]
 80134e4:	e7f3      	b.n	80134ce <lv_draw_px+0x76>
                *vdb_px_p = lv_color_mix(color, *vdb_px_p, opa);
 80134e6:	4642      	mov	r2, r8
 80134e8:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
 80134ec:	4630      	mov	r0, r6
 80134ee:	f7ff ff88 	bl	8013402 <lv_color_mix>
 80134f2:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
        }
 80134f6:	e7ea      	b.n	80134ce <lv_draw_px+0x76>

080134f8 <lv_draw_fill>:
    if(opa < LV_OPA_MIN) return;
 80134f8:	2b0f      	cmp	r3, #15
{
 80134fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134fe:	4692      	mov	sl, r2
 8013500:	b08b      	sub	sp, #44	; 0x2c
 8013502:	4698      	mov	r8, r3
    if(opa < LV_OPA_MIN) return;
 8013504:	d95d      	bls.n	80135c2 <lv_draw_fill+0xca>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8013506:	2bfc      	cmp	r3, #252	; 0xfc
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
 8013508:	460a      	mov	r2, r1
 801350a:	4601      	mov	r1, r0
 801350c:	a808      	add	r0, sp, #32
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 801350e:	bf34      	ite	cc
 8013510:	4698      	movcc	r8, r3
 8013512:	f04f 08ff 	movcs.w	r8, #255	; 0xff
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
 8013516:	f7fd f892 	bl	801063e <lv_area_intersect>
    if(union_ok == false) {
 801351a:	2800      	cmp	r0, #0
 801351c:	d051      	beq.n	80135c2 <lv_draw_fill+0xca>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 801351e:	f7ef fd41 	bl	8002fa4 <lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8013522:	f7fb fc28 	bl	800ed76 <lv_disp_get_buf>
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 8013526:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 801352a:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 801352e:	f9b0 6012 	ldrsh.w	r6, [r0, #18]
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 8013532:	1ac9      	subs	r1, r1, r3
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 8013534:	f8bd 4022 	ldrh.w	r4, [sp, #34]	; 0x22
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 8013538:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 801353c:	b20a      	sxth	r2, r1
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 801353e:	1ba4      	subs	r4, r4, r6
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 8013540:	1aed      	subs	r5, r5, r3
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 8013542:	9205      	str	r2, [sp, #20]
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 8013544:	b224      	sxth	r4, r4
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 8013546:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 801354a:	b22d      	sxth	r5, r5
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 801354c:	1b92      	subs	r2, r2, r6
 801354e:	8a86      	ldrh	r6, [r0, #20]
 8013550:	b212      	sxth	r2, r2
 8013552:	3601      	adds	r6, #1
 8013554:	9206      	str	r2, [sp, #24]
 8013556:	1af6      	subs	r6, r6, r3
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8013558:	6882      	ldr	r2, [r0, #8]
 801355a:	b236      	sxth	r6, r6
 801355c:	9207      	str	r2, [sp, #28]
{
    /*Set all row in vdb to the given color*/
    lv_coord_t row;
    lv_coord_t col;

    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 801355e:	f7ef fd21 	bl	8002fa4 <lv_refr_get_disp_refreshing>
    if(disp->driver.set_px_cb) {
 8013562:	6941      	ldr	r1, [r0, #20]
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 8013564:	4683      	mov	fp, r0
    if(disp->driver.set_px_cb) {
 8013566:	bb49      	cbnz	r1, 80135bc <lv_draw_fill+0xc4>
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
            }
        }
    } else {
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
 8013568:	fb04 f306 	mul.w	r3, r4, r6
 801356c:	9a07      	ldr	r2, [sp, #28]

        /*Run simpler function without opacity*/
        if(opa == LV_OPA_COVER) {
 801356e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8013572:	ea4f 0646 	mov.w	r6, r6, lsl #1
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
 8013576:	eb02 0743 	add.w	r7, r2, r3, lsl #1
        if(opa == LV_OPA_COVER) {
 801357a:	d045      	beq.n	8013608 <lv_draw_fill+0x110>
#if LV_COLOR_SCREEN_TRANSP
            scr_transp = disp->driver.screen_transp;
#endif

            lv_color_t bg_tmp  = LV_COLOR_BLACK;
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
 801357c:	4642      	mov	r2, r8
 801357e:	4650      	mov	r0, sl
            lv_color_t bg_tmp  = LV_COLOR_BLACK;
 8013580:	4689      	mov	r9, r1
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
 8013582:	f7ff ff3e 	bl	8013402 <lv_color_mix>
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 8013586:	9b06      	ldr	r3, [sp, #24]
 8013588:	42a3      	cmp	r3, r4
 801358a:	db1a      	blt.n	80135c2 <lv_draw_fill+0xca>
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 801358c:	46ab      	mov	fp, r5
 801358e:	e051      	b.n	8013634 <lv_draw_fill+0x13c>
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
 8013590:	f8cd 9000 	str.w	r9, [sp]
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 8013594:	f109 0901 	add.w	r9, r9, #1
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
 8013598:	f8cd 8008 	str.w	r8, [sp, #8]
 801359c:	462b      	mov	r3, r5
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 801359e:	fa0f f989 	sxth.w	r9, r9
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
 80135a2:	f8ad a004 	strh.w	sl, [sp, #4]
 80135a6:	4632      	mov	r2, r6
 80135a8:	9907      	ldr	r1, [sp, #28]
 80135aa:	4658      	mov	r0, fp
 80135ac:	f8db 7014 	ldr.w	r7, [fp, #20]
 80135b0:	47b8      	blx	r7
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 80135b2:	9b06      	ldr	r3, [sp, #24]
 80135b4:	454b      	cmp	r3, r9
 80135b6:	daeb      	bge.n	8013590 <lv_draw_fill+0x98>
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
 80135b8:	3501      	adds	r5, #1
 80135ba:	b22d      	sxth	r5, r5
 80135bc:	9b05      	ldr	r3, [sp, #20]
 80135be:	42ab      	cmp	r3, r5
 80135c0:	da02      	bge.n	80135c8 <lv_draw_fill+0xd0>
}
 80135c2:	b00b      	add	sp, #44	; 0x2c
 80135c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 80135c8:	46a1      	mov	r9, r4
 80135ca:	e7f2      	b.n	80135b2 <lv_draw_fill+0xba>
                mem[col] = color;
 80135cc:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 80135d0:	3301      	adds	r3, #1
 80135d2:	b21b      	sxth	r3, r3
 80135d4:	9a05      	ldr	r2, [sp, #20]
 80135d6:	429a      	cmp	r2, r3
 80135d8:	daf8      	bge.n	80135cc <lv_draw_fill+0xd4>
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 80135da:	3201      	adds	r2, #1
            lv_color_t * mem_first = &mem[fill_area->x1];
 80135dc:	006b      	lsls	r3, r5, #1
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 80135de:	3401      	adds	r4, #1
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 80135e0:	1b55      	subs	r5, r2, r5
            lv_color_t * mem_first = &mem[fill_area->x1];
 80135e2:	eb07 0803 	add.w	r8, r7, r3
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 80135e6:	4433      	add	r3, r6
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 80135e8:	b224      	sxth	r4, r4
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 80135ea:	006d      	lsls	r5, r5, #1
 80135ec:	441f      	add	r7, r3
 80135ee:	b22d      	sxth	r5, r5
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 80135f0:	9b06      	ldr	r3, [sp, #24]
 80135f2:	42a3      	cmp	r3, r4
 80135f4:	dbe5      	blt.n	80135c2 <lv_draw_fill+0xca>
 80135f6:	3401      	adds	r4, #1
                memcpy(&mem[fill_area->x1], mem_first, copy_size);
 80135f8:	4638      	mov	r0, r7
 80135fa:	462a      	mov	r2, r5
 80135fc:	4641      	mov	r1, r8
 80135fe:	f003 f8b7 	bl	8016770 <memcpy>
                mem += mem_width;
 8013602:	4437      	add	r7, r6
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 8013604:	b224      	sxth	r4, r4
 8013606:	e7f3      	b.n	80135f0 <lv_draw_fill+0xf8>
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8013608:	462b      	mov	r3, r5
 801360a:	e7e3      	b.n	80135d4 <lv_draw_fill+0xdc>
                    if(scr_transp == false) {
                        /*If the bg color changed recalculate the result color*/
                        if(mem[col].full != bg_tmp.full) {
 801360c:	f837 101b 	ldrh.w	r1, [r7, fp, lsl #1]
 8013610:	fa1f f289 	uxth.w	r2, r9
 8013614:	eb07 034b 	add.w	r3, r7, fp, lsl #1
 8013618:	4291      	cmp	r1, r2
 801361a:	d006      	beq.n	801362a <lv_draw_fill+0x132>
                            bg_tmp  = mem[col];
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
 801361c:	4642      	mov	r2, r8
 801361e:	4650      	mov	r0, sl
 8013620:	9307      	str	r3, [sp, #28]
                            bg_tmp  = mem[col];
 8013622:	4689      	mov	r9, r1
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
 8013624:	f7ff feed 	bl	8013402 <lv_color_mix>
 8013628:	9b07      	ldr	r3, [sp, #28]
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 801362a:	f10b 0b01 	add.w	fp, fp, #1
                        }

                        mem[col] = opa_tmp;
 801362e:	8018      	strh	r0, [r3, #0]
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8013630:	fa0f fb8b 	sxth.w	fp, fp
 8013634:	9b05      	ldr	r3, [sp, #20]
 8013636:	455b      	cmp	r3, fp
 8013638:	dae8      	bge.n	801360c <lv_draw_fill+0x114>
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 801363a:	3401      	adds	r4, #1
#if LV_COLOR_DEPTH == 32
                        mem[col] = color_mix_2_alpha(mem[col], mem[col].ch.alpha, color, opa);
#endif
                    }
                }
                mem += mem_width;
 801363c:	4437      	add	r7, r6
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 801363e:	b224      	sxth	r4, r4
 8013640:	e7a1      	b.n	8013586 <lv_draw_fill+0x8e>

08013642 <lv_draw_map>:
{
 8013642:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013646:	b093      	sub	sp, #76	; 0x4c
 8013648:	461f      	mov	r7, r3
 801364a:	4606      	mov	r6, r0
 801364c:	4615      	mov	r5, r2
 801364e:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
    if(opa < LV_OPA_MIN) return;
 8013652:	2f0f      	cmp	r7, #15
{
 8013654:	930e      	str	r3, [sp, #56]	; 0x38
 8013656:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 801365a:	930c      	str	r3, [sp, #48]	; 0x30
 801365c:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8013660:	9308      	str	r3, [sp, #32]
    if(opa < LV_OPA_MIN) return;
 8013662:	d975      	bls.n	8013750 <lv_draw_map+0x10e>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8013664:	2ffc      	cmp	r7, #252	; 0xfc
    union_ok = lv_area_intersect(&masked_a, cords_p, mask_p);
 8013666:	460a      	mov	r2, r1
 8013668:	4601      	mov	r1, r0
 801366a:	a810      	add	r0, sp, #64	; 0x40
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 801366c:	bf28      	it	cs
 801366e:	27ff      	movcs	r7, #255	; 0xff
    union_ok = lv_area_intersect(&masked_a, cords_p, mask_p);
 8013670:	f7fc ffe5 	bl	801063e <lv_area_intersect>
    if(union_ok == false) return;
 8013674:	2800      	cmp	r0, #0
 8013676:	d06b      	beq.n	8013750 <lv_draw_map+0x10e>
    uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 8013678:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801367a:	88b4      	ldrh	r4, [r6, #4]
 801367c:	2b00      	cmp	r3, #0
 801367e:	f9b6 2000 	ldrsh.w	r2, [r6]
    if(cords_p->y1 < masked_a.y1) {
 8013682:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 8013686:	f104 0401 	add.w	r4, r4, #1
    uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 801368a:	bf14      	ite	ne
 801368c:	2303      	movne	r3, #3
 801368e:	2302      	moveq	r3, #2
 8013690:	1aa4      	subs	r4, r4, r2
 8013692:	9307      	str	r3, [sp, #28]
    if(cords_p->y1 < masked_a.y1) {
 8013694:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8013698:	b224      	sxth	r4, r4
 801369a:	4299      	cmp	r1, r3
        map_p += (uint32_t)map_width * ((masked_a.y1 - cords_p->y1)) * px_size_byte;
 801369c:	bfbf      	itttt	lt
 801369e:	1a5b      	sublt	r3, r3, r1
 80136a0:	9907      	ldrlt	r1, [sp, #28]
 80136a2:	4363      	mullt	r3, r4
 80136a4:	fb01 5503 	mlalt	r5, r1, r3, r5
    if(cords_p->x1 < masked_a.x1) {
 80136a8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80136ac:	4293      	cmp	r3, r2
        map_p += (masked_a.x1 - cords_p->x1) * px_size_byte;
 80136ae:	bfc2      	ittt	gt
 80136b0:	1a9a      	subgt	r2, r3, r2
 80136b2:	9b07      	ldrgt	r3, [sp, #28]
 80136b4:	fb03 5502 	mlagt	r5, r3, r2, r5
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 80136b8:	f7ef fc74 	bl	8002fa4 <lv_refr_get_disp_refreshing>
 80136bc:	4681      	mov	r9, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80136be:	f7fb fb5a 	bl	800ed76 <lv_disp_get_buf>
 80136c2:	4683      	mov	fp, r0
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 80136c4:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 80136c8:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 80136cc:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 80136d0:	f9bb c012 	ldrsh.w	ip, [fp, #18]
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 80136d4:	1a5e      	subs	r6, r3, r1
 80136d6:	3301      	adds	r3, #1
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 80136d8:	1a42      	subs	r2, r0, r1
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 80136da:	f8bd 8042 	ldrh.w	r8, [sp, #66]	; 0x42
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 80136de:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 80136e2:	1a18      	subs	r0, r3, r0
    masked_a.y2 = masked_a.y2 - vdb->area.y1;
 80136e4:	f8bd 6046 	ldrh.w	r6, [sp, #70]	; 0x46
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 80136e8:	eba8 080c 	sub.w	r8, r8, ip
 80136ec:	b203      	sxth	r3, r0
    masked_a.y2 = masked_a.y2 - vdb->area.y1;
 80136ee:	eba6 060c 	sub.w	r6, r6, ip
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 80136f2:	b212      	sxth	r2, r2
 80136f4:	930a      	str	r3, [sp, #40]	; 0x28
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 80136f6:	fa0f f888 	sxth.w	r8, r8
    masked_a.y2 = masked_a.y2 - vdb->area.y1;
 80136fa:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 80136fe:	f8bb 6014 	ldrh.w	r6, [fp, #20]
 8013702:	9b07      	ldr	r3, [sp, #28]
 8013704:	3601      	adds	r6, #1
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 8013706:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 801370a:	fb13 f304 	smulbb	r3, r3, r4
 801370e:	f8ad 8042 	strh.w	r8, [sp, #66]	; 0x42
 8013712:	1a71      	subs	r1, r6, r1
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8013714:	f8db 6008 	ldr.w	r6, [fp, #8]
 8013718:	930b      	str	r3, [sp, #44]	; 0x2c
 801371a:	b209      	sxth	r1, r1
    if(chroma_key == false && alpha_byte == false && opa == LV_OPA_COVER && recolor_opa == LV_OPA_TRANSP) {
 801371c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    vdb_buf_tmp += (uint32_t)masked_a.x1;             /*Move to the first col*/
 801371e:	fb01 2208 	mla	r2, r1, r8, r2
 8013722:	9105      	str	r1, [sp, #20]
 8013724:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    if(chroma_key == false && alpha_byte == false && opa == LV_OPA_COVER && recolor_opa == LV_OPA_TRANSP) {
 8013728:	2b00      	cmp	r3, #0
 801372a:	d147      	bne.n	80137bc <lv_draw_map+0x17a>
 801372c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801372e:	2b00      	cmp	r3, #0
 8013730:	d144      	bne.n	80137bc <lv_draw_map+0x17a>
 8013732:	2fff      	cmp	r7, #255	; 0xff
 8013734:	d142      	bne.n	80137bc <lv_draw_map+0x17a>
 8013736:	9b08      	ldr	r3, [sp, #32]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d13f      	bne.n	80137bc <lv_draw_map+0x17a>
        if(disp->driver.set_px_cb) {
 801373c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8013740:	bb43      	cbnz	r3, 8013794 <lv_draw_map+0x152>
        memcpy(dest, src, length * sizeof(lv_color_t));
 8013742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8013744:	004c      	lsls	r4, r1, #1
        memcpy(dest, src, length * sizeof(lv_color_t));
 8013746:	005f      	lsls	r7, r3, #1
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8013748:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801374c:	4543      	cmp	r3, r8
 801374e:	da28      	bge.n	80137a2 <lv_draw_map+0x160>
}
 8013750:	b013      	add	sp, #76	; 0x4c
 8013752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1, row,
 8013756:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 801375a:	4648      	mov	r0, r9
                    lv_color_t px_color = *((lv_color_t *)&map_p[(uint32_t)col * px_size_byte]);
 801375c:	f8ba 2000 	ldrh.w	r2, [sl]
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1, row,
 8013760:	3601      	adds	r6, #1
 8013762:	440b      	add	r3, r1
 8013764:	9702      	str	r7, [sp, #8]
 8013766:	f8ad 2004 	strh.w	r2, [sp, #4]
 801376a:	f8cd 8000 	str.w	r8, [sp]
 801376e:	b21b      	sxth	r3, r3
 8013770:	f8d9 4014 	ldr.w	r4, [r9, #20]
 8013774:	9a05      	ldr	r2, [sp, #20]
 8013776:	f8db 1008 	ldr.w	r1, [fp, #8]
 801377a:	47a0      	blx	r4
 801377c:	9b07      	ldr	r3, [sp, #28]
 801377e:	449a      	add	sl, r3
 8013780:	b233      	sxth	r3, r6
                for(col = 0; col < map_useful_w; col++) {
 8013782:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013784:	429a      	cmp	r2, r3
 8013786:	dce6      	bgt.n	8013756 <lv_draw_map+0x114>
                map_p += map_width * px_size_byte; /*Next row on the map*/
 8013788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 801378a:	f108 0801 	add.w	r8, r8, #1
                map_p += map_width * px_size_byte; /*Next row on the map*/
 801378e:	441d      	add	r5, r3
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8013790:	fa0f f888 	sxth.w	r8, r8
 8013794:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8013798:	4543      	cmp	r3, r8
 801379a:	dbd9      	blt.n	8013750 <lv_draw_map+0x10e>
 801379c:	46aa      	mov	sl, r5
 801379e:	2600      	movs	r6, #0
 80137a0:	e7ee      	b.n	8013780 <lv_draw_map+0x13e>
        memcpy(dest, src, length * sizeof(lv_color_t));
 80137a2:	4629      	mov	r1, r5
 80137a4:	4630      	mov	r0, r6
 80137a6:	463a      	mov	r2, r7
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 80137a8:	f108 0801 	add.w	r8, r8, #1
        memcpy(dest, src, length * sizeof(lv_color_t));
 80137ac:	f002 ffe0 	bl	8016770 <memcpy>
                map_p += map_width * px_size_byte; /*Next row on the map*/
 80137b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 80137b2:	4426      	add	r6, r4
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 80137b4:	fa0f f888 	sxth.w	r8, r8
                map_p += map_width * px_size_byte; /*Next row on the map*/
 80137b8:	441d      	add	r5, r3
                vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 80137ba:	e7c5      	b.n	8013748 <lv_draw_map+0x106>
        lv_color_t last_img_px  = LV_COLOR_BLACK;
 80137bc:	f04f 0300 	mov.w	r3, #0
        lv_color_t recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 80137c0:	9a08      	ldr	r2, [sp, #32]
 80137c2:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 80137c6:	4619      	mov	r1, r3
        lv_color_t last_img_px  = LV_COLOR_BLACK;
 80137c8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        lv_color_t recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 80137cc:	f7ff fe19 	bl	8013402 <lv_color_mix>
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 80137d0:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
        lv_color_t recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 80137d4:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 80137d8:	9306      	str	r3, [sp, #24]
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 80137da:	9b05      	ldr	r3, [sp, #20]
 80137dc:	005b      	lsls	r3, r3, #1
 80137de:	930f      	str	r3, [sp, #60]	; 0x3c
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 80137e0:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 80137e4:	9a06      	ldr	r2, [sp, #24]
 80137e6:	4293      	cmp	r3, r2
 80137e8:	dbb2      	blt.n	8013750 <lv_draw_map+0x10e>
 80137ea:	46aa      	mov	sl, r5
 80137ec:	f04f 0800 	mov.w	r8, #0
 80137f0:	e050      	b.n	8013894 <lv_draw_map+0x252>
                if(alpha_byte) {
 80137f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d03f      	beq.n	8013878 <lv_draw_map+0x236>
                    px_color.full = px_color_p[0] + (px_color_p[1] << 8);
 80137f8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80137fc:	f89a 0000 	ldrb.w	r0, [sl]
                    lv_opa_t px_opa = *(px_color_p + LV_IMG_PX_SIZE_ALPHA_BYTE - 1);
 8013800:	f89a 4002 	ldrb.w	r4, [sl, #2]
                    px_color.full = px_color_p[0] + (px_color_p[1] << 8);
 8013804:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8013808:	b280      	uxth	r0, r0
                    if(px_opa == LV_OPA_TRANSP)
 801380a:	2c00      	cmp	r4, #0
 801380c:	d03e      	beq.n	801388c <lv_draw_map+0x24a>
                    else if(px_opa != LV_OPA_COVER)
 801380e:	2cff      	cmp	r4, #255	; 0xff
 8013810:	d034      	beq.n	801387c <lv_draw_map+0x23a>
                        opa_result = (uint32_t)((uint32_t)px_opa * opa_result) >> 8;
 8013812:	fb14 f407 	smulbb	r4, r4, r7
 8013816:	f3c4 2407 	ubfx	r4, r4, #8, #8
                if(chroma_key && px_color.full == disp->driver.color_chroma_key.full) continue;
 801381a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801381c:	b11b      	cbz	r3, 8013826 <lv_draw_map+0x1e4>
 801381e:	f8b9 301c 	ldrh.w	r3, [r9, #28]
 8013822:	4283      	cmp	r3, r0
 8013824:	d032      	beq.n	801388c <lv_draw_map+0x24a>
                if(recolor_opa != LV_OPA_TRANSP) {
 8013826:	9b08      	ldr	r3, [sp, #32]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d04b      	beq.n	80138c4 <lv_draw_map+0x282>
                    if(last_img_px.full != px_color.full) { /*Minor acceleration: calculate only for
 801382c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8013830:	4283      	cmp	r3, r0
 8013832:	d009      	beq.n	8013848 <lv_draw_map+0x206>
                        last_img_px  = px_color;
 8013834:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
                        recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 8013838:	4601      	mov	r1, r0
 801383a:	9a08      	ldr	r2, [sp, #32]
 801383c:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 8013840:	f7ff fddf 	bl	8013402 <lv_color_mix>
 8013844:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
                    if(disp->driver.set_px_cb) {
 8013848:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801384c:	469c      	mov	ip, r3
 801384e:	b1bb      	cbz	r3, 8013880 <lv_draw_map+0x23e>
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 8013850:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8013854:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013856:	9402      	str	r4, [sp, #8]
 8013858:	441a      	add	r2, r3
 801385a:	4613      	mov	r3, r2
 801385c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8013860:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013864:	b21b      	sxth	r3, r3
 8013866:	9a06      	ldr	r2, [sp, #24]
 8013868:	9200      	str	r2, [sp, #0]
 801386a:	9a05      	ldr	r2, [sp, #20]
 801386c:	f8db 1008 	ldr.w	r1, [fp, #8]
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 8013870:	4648      	mov	r0, r9
 8013872:	4664      	mov	r4, ip
 8013874:	47a0      	blx	r4
 8013876:	e009      	b.n	801388c <lv_draw_map+0x24a>
                    px_color = *((lv_color_t *)px_color_p);
 8013878:	f8ba 0000 	ldrh.w	r0, [sl]
 801387c:	463c      	mov	r4, r7
 801387e:	e7cc      	b.n	801381a <lv_draw_map+0x1d8>
                        if(opa_result == LV_OPA_COVER)
 8013880:	2cff      	cmp	r4, #255	; 0xff
 8013882:	d117      	bne.n	80138b4 <lv_draw_map+0x272>
                            vdb_buf_tmp[col].full = recolored_px.full;
 8013884:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8013888:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
 801388c:	9b07      	ldr	r3, [sp, #28]
 801388e:	f108 0801 	add.w	r8, r8, #1
 8013892:	449a      	add	sl, r3
 8013894:	fa0f f388 	sxth.w	r3, r8
 8013898:	9309      	str	r3, [sp, #36]	; 0x24
            for(col = 0; col < map_useful_w; col++) {
 801389a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801389e:	4293      	cmp	r3, r2
 80138a0:	dca7      	bgt.n	80137f2 <lv_draw_map+0x1b0>
            map_p += map_width * px_size_byte; /*Next row on the map*/
 80138a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80138a4:	441d      	add	r5, r3
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 80138a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80138a8:	441e      	add	r6, r3
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 80138aa:	9b06      	ldr	r3, [sp, #24]
 80138ac:	3301      	adds	r3, #1
 80138ae:	b21b      	sxth	r3, r3
 80138b0:	9306      	str	r3, [sp, #24]
 80138b2:	e795      	b.n	80137e0 <lv_draw_map+0x19e>
                            vdb_buf_tmp[col] = lv_color_mix(recolored_px, vdb_buf_tmp[col], opa_result);
 80138b4:	4622      	mov	r2, r4
 80138b6:	f836 1018 	ldrh.w	r1, [r6, r8, lsl #1]
 80138ba:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
                                vdb_buf_tmp[col] = lv_color_mix(px_color, vdb_buf_tmp[col], opa_result);
 80138be:	f7ff fda0 	bl	8013402 <lv_color_mix>
 80138c2:	e014      	b.n	80138ee <lv_draw_map+0x2ac>
                    if(disp->driver.set_px_cb) {
 80138c4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80138c8:	469c      	mov	ip, r3
 80138ca:	b173      	cbz	r3, 80138ea <lv_draw_map+0x2a8>
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 80138cc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80138d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80138d2:	f8db 1008 	ldr.w	r1, [fp, #8]
 80138d6:	441a      	add	r2, r3
 80138d8:	9402      	str	r4, [sp, #8]
 80138da:	f8ad 0004 	strh.w	r0, [sp, #4]
 80138de:	4613      	mov	r3, r2
 80138e0:	9a06      	ldr	r2, [sp, #24]
 80138e2:	b21b      	sxth	r3, r3
 80138e4:	9200      	str	r2, [sp, #0]
 80138e6:	9a05      	ldr	r2, [sp, #20]
 80138e8:	e7c2      	b.n	8013870 <lv_draw_map+0x22e>
                        if(opa_result == LV_OPA_COVER)
 80138ea:	2cff      	cmp	r4, #255	; 0xff
 80138ec:	d102      	bne.n	80138f4 <lv_draw_map+0x2b2>
                                vdb_buf_tmp[col] = lv_color_mix(px_color, vdb_buf_tmp[col], opa_result);
 80138ee:	f826 0018 	strh.w	r0, [r6, r8, lsl #1]
 80138f2:	e7cb      	b.n	801388c <lv_draw_map+0x24a>
 80138f4:	4622      	mov	r2, r4
 80138f6:	f836 1018 	ldrh.w	r1, [r6, r8, lsl #1]
 80138fa:	e7e0      	b.n	80138be <lv_draw_map+0x27c>

080138fc <lv_img_decoder_built_in_close>:
{
 80138fc:	b538      	push	{r3, r4, r5, lr}
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80138fe:	6a0c      	ldr	r4, [r1, #32]
{
 8013900:	460d      	mov	r5, r1
    if(user_data) {
 8013902:	b17c      	cbz	r4, 8013924 <lv_img_decoder_built_in_close+0x28>
        if(user_data->f) {
 8013904:	6820      	ldr	r0, [r4, #0]
 8013906:	b120      	cbz	r0, 8013912 <lv_img_decoder_built_in_close+0x16>
            lv_fs_close(user_data->f);
 8013908:	f7fc fb1f 	bl	800ff4a <lv_fs_close>
            lv_mem_free(user_data->f);
 801390c:	6820      	ldr	r0, [r4, #0]
 801390e:	f7ef fef1 	bl	80036f4 <lv_mem_free>
        if(user_data->palette) lv_mem_free(user_data->palette);
 8013912:	6860      	ldr	r0, [r4, #4]
 8013914:	b108      	cbz	r0, 801391a <lv_img_decoder_built_in_close+0x1e>
 8013916:	f7ef feed 	bl	80036f4 <lv_mem_free>
        lv_mem_free(user_data);
 801391a:	4620      	mov	r0, r4
 801391c:	f7ef feea 	bl	80036f4 <lv_mem_free>
        dsc->user_data = NULL;
 8013920:	2300      	movs	r3, #0
 8013922:	622b      	str	r3, [r5, #32]
}
 8013924:	bd38      	pop	{r3, r4, r5, pc}

08013926 <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
 8013926:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801392a:	4605      	mov	r5, r0

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 801392c:	7c00      	ldrb	r0, [r0, #16]
{
 801392e:	f5ad 7d49 	sub.w	sp, sp, #804	; 0x324
 8013932:	469a      	mov	sl, r3
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 8013934:	f000 001f 	and.w	r0, r0, #31
{
 8013938:	460c      	mov	r4, r1
 801393a:	4691      	mov	r9, r2
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 801393c:	2701      	movs	r7, #1
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 801393e:	f7f0 fb79 	bl	8004034 <lv_img_color_format_get_px_size>

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
 8013942:	7c2b      	ldrb	r3, [r5, #16]
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8013944:	4087      	lsls	r7, r0
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 8013946:	4680      	mov	r8, r0
    switch(dsc->header.cf) {
 8013948:	f003 031f 	and.w	r3, r3, #31
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 801394c:	3f01      	subs	r7, #1
    switch(dsc->header.cf) {
 801394e:	3b07      	subs	r3, #7
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8013950:	b2bf      	uxth	r7, r7
    switch(dsc->header.cf) {
 8013952:	2b03      	cmp	r3, #3
 8013954:	d85d      	bhi.n	8013a12 <lv_img_decoder_built_in_line_indexed+0xec>
 8013956:	e8df f003 	tbb	[pc, r3]
 801395a:	2902      	.short	0x2902
 801395c:	513d      	.short	0x513d
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 801395e:	692b      	ldr	r3, [r5, #16]
 8013960:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8013964:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
            if(dsc->header.w & 0x7) w++;
 8013968:	0759      	lsls	r1, r3, #29
            ofs += w * y + (x >> 3); /*First pixel*/
 801396a:	ea4f 03e4 	mov.w	r3, r4, asr #3
            ofs += 8;                /*Skip the palette*/
            pos = 7 - (x & 0x7);
 801396e:	ea6f 0404 	mvn.w	r4, r4
            if(dsc->header.w & 0x7) w++;
 8013972:	bf18      	it	ne
 8013974:	f10b 0b01 	addne.w	fp, fp, #1
            pos = 7 - (x & 0x7);
 8013978:	f004 0407 	and.w	r4, r4, #7
            ofs += w * y + (x >> 3); /*First pixel*/
 801397c:	fb0b 3309 	mla	r3, fp, r9, r3
            ofs += 8;                /*Skip the palette*/
 8013980:	3308      	adds	r3, #8

#if LV_USE_FILESYSTEM
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8013982:	7b2a      	ldrb	r2, [r5, #12]
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8013984:	6a2e      	ldr	r6, [r5, #32]
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8013986:	2a00      	cmp	r2, #0
 8013988:	d147      	bne.n	8013a1a <lv_img_decoder_built_in_line_indexed+0xf4>
        const lv_img_dsc_t * img_dsc = dsc->src;
        data_tmp                     = img_dsc->data + ofs;
 801398a:	686a      	ldr	r2, [r5, #4]
 801398c:	6891      	ldr	r1, [r2, #8]
 801398e:	440b      	add	r3, r1
    lv_color_t * cbuf = (lv_color_t *)buf;
    for(i = 0; i < len; i++) {
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
        cbuf[i] = user_data->palette[val_act];

        pos -= px_size;
 8013990:	fa4f f888 	sxtb.w	r8, r8
        data_tmp = fs_buf;
 8013994:	2200      	movs	r2, #0
        if(pos < 0) {
            pos = 8 - px_size;
 8013996:	f1c8 0508 	rsb	r5, r8, #8
 801399a:	b26d      	sxtb	r5, r5
    for(i = 0; i < len; i++) {
 801399c:	b211      	sxth	r1, r2
 801399e:	458a      	cmp	sl, r1
 80139a0:	dc47      	bgt.n	8013a32 <lv_img_decoder_built_in_line_indexed+0x10c>
    return LV_RES_OK;
#else
    LV_LOG_WARN("Image built-in indexed line reader failed because LV_IMG_CF_INDEXED is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
 80139a2:	2001      	movs	r0, #1
 80139a4:	f50d 7d49 	add.w	sp, sp, #804	; 0x324
 80139a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 80139ac:	692b      	ldr	r3, [r5, #16]
 80139ae:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80139b2:	ea4f 0b93 	mov.w	fp, r3, lsr #2
            if(dsc->header.w & 0x3) w++;
 80139b6:	079a      	lsls	r2, r3, #30
            ofs += w * y + (x >> 2); /*First pixel*/
 80139b8:	ea4f 03a4 	mov.w	r3, r4, asr #2
            pos = 6 - ((x & 0x3) * 2);
 80139bc:	ea6f 0404 	mvn.w	r4, r4
            if(dsc->header.w & 0x3) w++;
 80139c0:	bf18      	it	ne
 80139c2:	f10b 0b01 	addne.w	fp, fp, #1
            pos = 6 - ((x & 0x3) * 2);
 80139c6:	f004 0403 	and.w	r4, r4, #3
            ofs += w * y + (x >> 2); /*First pixel*/
 80139ca:	fb0b 3309 	mla	r3, fp, r9, r3
            pos = 6 - ((x & 0x3) * 2);
 80139ce:	0064      	lsls	r4, r4, #1
            ofs += 16;               /*Skip the palette*/
 80139d0:	3310      	adds	r3, #16
            break;
 80139d2:	e7d6      	b.n	8013982 <lv_img_decoder_built_in_line_indexed+0x5c>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 80139d4:	692b      	ldr	r3, [r5, #16]
 80139d6:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80139da:	ea4f 0b53 	mov.w	fp, r3, lsr #1
            if(dsc->header.w & 0x1) w++;
 80139de:	07db      	lsls	r3, r3, #31
            ofs += w * y + (x >> 1); /*First pixel*/
 80139e0:	ea4f 0364 	mov.w	r3, r4, asr #1
            if(dsc->header.w & 0x1) w++;
 80139e4:	bf48      	it	mi
 80139e6:	f10b 0b01 	addmi.w	fp, fp, #1
            pos = 4 - ((x & 0x1) * 4);
 80139ea:	f014 0f01 	tst.w	r4, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 80139ee:	fb0b 3309 	mla	r3, fp, r9, r3
            pos = 4 - ((x & 0x1) * 4);
 80139f2:	bf0c      	ite	eq
 80139f4:	2404      	moveq	r4, #4
 80139f6:	2400      	movne	r4, #0
            ofs += 64;               /*Skip the palette*/
 80139f8:	3340      	adds	r3, #64	; 0x40
            pos = 4 - ((x & 0x1) * 4);
 80139fa:	e7c2      	b.n	8013982 <lv_img_decoder_built_in_line_indexed+0x5c>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 80139fc:	692b      	ldr	r3, [r5, #16]
 80139fe:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8013a02:	fa0f fb83 	sxth.w	fp, r3
            ofs += w * y + x;  /*First pixel*/
 8013a06:	fb19 4303 	smlabb	r3, r9, r3, r4
            pos = 0;
 8013a0a:	2400      	movs	r4, #0
            ofs += 1024;       /*Skip the palette*/
 8013a0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
            break;
 8013a10:	e7b7      	b.n	8013982 <lv_img_decoder_built_in_line_indexed+0x5c>
    uint32_t ofs = 0;
 8013a12:	2300      	movs	r3, #0
    int8_t pos   = 0;
 8013a14:	461c      	mov	r4, r3
    lv_coord_t w = 0;
 8013a16:	469b      	mov	fp, r3
 8013a18:	e7b3      	b.n	8013982 <lv_img_decoder_built_in_line_indexed+0x5c>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 8013a1a:	1d19      	adds	r1, r3, #4
 8013a1c:	6830      	ldr	r0, [r6, #0]
 8013a1e:	f7fc fac4 	bl	800ffaa <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 8013a22:	2300      	movs	r3, #0
 8013a24:	465a      	mov	r2, fp
 8013a26:	4669      	mov	r1, sp
 8013a28:	6830      	ldr	r0, [r6, #0]
 8013a2a:	f7fc faa3 	bl	800ff74 <lv_fs_read>
        data_tmp = fs_buf;
 8013a2e:	466b      	mov	r3, sp
 8013a30:	e7ae      	b.n	8013990 <lv_img_decoder_built_in_line_indexed+0x6a>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 8013a32:	7818      	ldrb	r0, [r3, #0]
 8013a34:	fa07 f104 	lsl.w	r1, r7, r4
 8013a38:	4008      	ands	r0, r1
        cbuf[i] = user_data->palette[val_act];
 8013a3a:	6871      	ldr	r1, [r6, #4]
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 8013a3c:	4120      	asrs	r0, r4
        pos -= px_size;
 8013a3e:	eba4 0408 	sub.w	r4, r4, r8
        cbuf[i] = user_data->palette[val_act];
 8013a42:	b2c0      	uxtb	r0, r0
        pos -= px_size;
 8013a44:	b264      	sxtb	r4, r4
        cbuf[i] = user_data->palette[val_act];
 8013a46:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
        if(pos < 0) {
 8013a4a:	2c00      	cmp	r4, #0
        cbuf[i] = user_data->palette[val_act];
 8013a4c:	98d2      	ldr	r0, [sp, #840]	; 0x348
            pos = 8 - px_size;
 8013a4e:	bfb8      	it	lt
 8013a50:	462c      	movlt	r4, r5
        cbuf[i] = user_data->palette[val_act];
 8013a52:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
            data_tmp++;
 8013a56:	bfb8      	it	lt
 8013a58:	3301      	addlt	r3, #1
 8013a5a:	3201      	adds	r2, #1
 8013a5c:	e79e      	b.n	801399c <lv_img_decoder_built_in_line_indexed+0x76>

08013a5e <lv_img_decoder_read_line>:
{
 8013a5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013a60:	4605      	mov	r5, r0
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 8013a62:	6800      	ldr	r0, [r0, #0]
 8013a64:	6884      	ldr	r4, [r0, #8]
 8013a66:	b144      	cbz	r4, 8013a7a <lv_img_decoder_read_line+0x1c>
 8013a68:	9e06      	ldr	r6, [sp, #24]
 8013a6a:	e9cd 3600 	strd	r3, r6, [sp]
 8013a6e:	4613      	mov	r3, r2
 8013a70:	460a      	mov	r2, r1
 8013a72:	4629      	mov	r1, r5
 8013a74:	47a0      	blx	r4
}
 8013a76:	b002      	add	sp, #8
 8013a78:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
 8013a7a:	4620      	mov	r0, r4
 8013a7c:	e7fb      	b.n	8013a76 <lv_img_decoder_read_line+0x18>

08013a7e <lv_img_decoder_close>:
{
 8013a7e:	4601      	mov	r1, r0
    if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 8013a80:	6800      	ldr	r0, [r0, #0]
 8013a82:	68c3      	ldr	r3, [r0, #12]
 8013a84:	b103      	cbz	r3, 8013a88 <lv_img_decoder_close+0xa>
 8013a86:	4718      	bx	r3
}
 8013a88:	4770      	bx	lr

08013a8a <tri_draw_flat>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

void tri_draw_flat(const lv_point_t * points, const lv_area_t * mask, const lv_style_t * style, lv_opa_t opa)
{
 8013a8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a8e:	b099      	sub	sp, #100	; 0x64
 8013a90:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
    /*Return if the points are out of the mask*/
    if(points[0].x < mask->x1 && points[1].x < mask->x1 && points[2].x < mask->x1) {
 8013a94:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013a98:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 8013a9c:	9101      	str	r1, [sp, #4]
    if(points[0].x < mask->x1 && points[1].x < mask->x1 && points[2].x < mask->x1) {
 8013a9e:	429a      	cmp	r2, r3
 8013aa0:	da08      	bge.n	8013ab4 <tri_draw_flat+0x2a>
 8013aa2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8013aa6:	4299      	cmp	r1, r3
 8013aa8:	da04      	bge.n	8013ab4 <tri_draw_flat+0x2a>
 8013aaa:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8013aae:	4299      	cmp	r1, r3
 8013ab0:	f2c0 814d 	blt.w	8013d4e <tri_draw_flat+0x2c4>
        return;
    }

    if(points[0].x > mask->x2 && points[1].x > mask->x2 && points[2].x > mask->x2) {
 8013ab4:	9b01      	ldr	r3, [sp, #4]
 8013ab6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013aba:	429a      	cmp	r2, r3
 8013abc:	dd08      	ble.n	8013ad0 <tri_draw_flat+0x46>
 8013abe:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8013ac2:	429a      	cmp	r2, r3
 8013ac4:	dd04      	ble.n	8013ad0 <tri_draw_flat+0x46>
 8013ac6:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8013aca:	429a      	cmp	r2, r3
 8013acc:	f300 813f 	bgt.w	8013d4e <tri_draw_flat+0x2c4>
        return;
    }

    if(points[0].y < mask->y1 && points[1].y < mask->y1 && points[2].y < mask->y1) {
 8013ad0:	9b01      	ldr	r3, [sp, #4]
 8013ad2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8013ad6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013ada:	429a      	cmp	r2, r3
 8013adc:	da08      	bge.n	8013af0 <tri_draw_flat+0x66>
 8013ade:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8013ae2:	4299      	cmp	r1, r3
 8013ae4:	da04      	bge.n	8013af0 <tri_draw_flat+0x66>
 8013ae6:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 8013aea:	4299      	cmp	r1, r3
 8013aec:	f2c0 812f 	blt.w	8013d4e <tri_draw_flat+0x2c4>
        return;
    }

    if(points[0].y > mask->y2 && points[1].y > mask->y2 && points[2].y > mask->y2) {
 8013af0:	9b01      	ldr	r3, [sp, #4]
 8013af2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013af6:	429a      	cmp	r2, r3
 8013af8:	dd08      	ble.n	8013b0c <tri_draw_flat+0x82>
 8013afa:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8013afe:	429a      	cmp	r2, r3
 8013b00:	dd04      	ble.n	8013b0c <tri_draw_flat+0x82>
 8013b02:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8013b06:	429a      	cmp	r2, r3
 8013b08:	f300 8121 	bgt.w	8013d4e <tri_draw_flat+0x2c4>
        return;
    }

    lv_point_t tri[3];

    memcpy(tri, points, sizeof(tri));
 8013b0c:	220c      	movs	r2, #12
 8013b0e:	4601      	mov	r1, r0
 8013b10:	a815      	add	r0, sp, #84	; 0x54
 8013b12:	f002 fe2d 	bl	8016770 <memcpy>

    /*Sort the vertices according to their y coordinate (0: y max, 1: y mid, 2:y min)*/
    if(tri[1].y < tri[0].y) point_swap(&tri[1], &tri[0]);
 8013b16:	f9bd 205a 	ldrsh.w	r2, [sp, #90]	; 0x5a
 8013b1a:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8013b1e:	429a      	cmp	r2, r3
{
    lv_point_t tmp;
    tmp.x = p1->x;
    tmp.y = p1->y;

    p1->x = p2->x;
 8013b20:	bfbc      	itt	lt
 8013b22:	e9dd 2315 	ldrdlt	r2, r3, [sp, #84]	; 0x54
    p1->y = p2->y;

    p2->x = tmp.x;
 8013b26:	e9cd 3215 	strdlt	r3, r2, [sp, #84]	; 0x54
    if(tri[2].y < tri[1].y) point_swap(&tri[2], &tri[1]);
 8013b2a:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 8013b2e:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8013b32:	429a      	cmp	r2, r3
    p1->x = p2->x;
 8013b34:	bfbc      	itt	lt
 8013b36:	e9dd 2316 	ldrdlt	r2, r3, [sp, #88]	; 0x58
    p2->x = tmp.x;
 8013b3a:	e9cd 3216 	strdlt	r3, r2, [sp, #88]	; 0x58
    if(tri[1].y < tri[0].y) point_swap(&tri[1], &tri[0]);
 8013b3e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8013b42:	f9bd 205a 	ldrsh.w	r2, [sp, #90]	; 0x5a
 8013b46:	429a      	cmp	r2, r3
    p1->x = p2->x;
 8013b48:	bfbc      	itt	lt
 8013b4a:	e9dd 2315 	ldrdlt	r2, r3, [sp, #84]	; 0x54
    p2->x = tmp.x;
 8013b4e:	e9cd 3215 	strdlt	r3, r2, [sp, #84]	; 0x54
    lv_coord_t dx1  = LV_MATH_ABS(tri[0].x - tri[1].x);
 8013b52:	f9bd 6054 	ldrsh.w	r6, [sp, #84]	; 0x54
 8013b56:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
    lv_coord_t dy1  = LV_MATH_ABS(tri[0].y - tri[1].y);
 8013b5a:	f9bd 8056 	ldrsh.w	r8, [sp, #86]	; 0x56
    lv_coord_t dx1  = LV_MATH_ABS(tri[0].x - tri[1].x);
 8013b5e:	46b3      	mov	fp, r6
 8013b60:	1af7      	subs	r7, r6, r3
    lv_coord_t dx2  = LV_MATH_ABS(tri[0].x - tri[2].x);
 8013b62:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
    lv_coord_t dy1  = LV_MATH_ABS(tri[0].y - tri[1].y);
 8013b66:	46c2      	mov	sl, r8
    lv_coord_t dx1  = LV_MATH_ABS(tri[0].x - tri[1].x);
 8013b68:	2f00      	cmp	r7, #0
 8013b6a:	bfb8      	it	lt
 8013b6c:	427f      	neglt	r7, r7
    lv_coord_t sx1  = tri[0].x < tri[1].x ? 1 : -1;
 8013b6e:	429e      	cmp	r6, r3
 8013b70:	bfb4      	ite	lt
 8013b72:	2301      	movlt	r3, #1
 8013b74:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
 8013b78:	9305      	str	r3, [sp, #20]
    lv_coord_t dx1  = LV_MATH_ABS(tri[0].x - tri[1].x);
 8013b7a:	b23f      	sxth	r7, r7
    lv_coord_t dy1  = LV_MATH_ABS(tri[0].y - tri[1].y);
 8013b7c:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8013b80:	eba8 0903 	sub.w	r9, r8, r3
 8013b84:	f1b9 0f00 	cmp.w	r9, #0
 8013b88:	bfb8      	it	lt
 8013b8a:	f1c9 0900 	rsblt	r9, r9, #0
    lv_coord_t sy1  = tri[0].y < tri[1].y ? 1 : -1;
 8013b8e:	4598      	cmp	r8, r3
 8013b90:	bfb4      	ite	lt
 8013b92:	2301      	movlt	r3, #1
 8013b94:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
    lv_coord_t dy1  = LV_MATH_ABS(tri[0].y - tri[1].y);
 8013b98:	fa0f f989 	sxth.w	r9, r9
    lv_coord_t sy1  = tri[0].y < tri[1].y ? 1 : -1;
 8013b9c:	9306      	str	r3, [sp, #24]
    lv_coord_t dx2  = LV_MATH_ABS(tri[0].x - tri[2].x);
 8013b9e:	1ab3      	subs	r3, r6, r2
    lv_coord_t err1 = (dx1 > dy1 ? dx1 : -dy1) / 2;
 8013ba0:	454f      	cmp	r7, r9
 8013ba2:	bfd5      	itete	le
 8013ba4:	f1c9 0500 	rsble	r5, r9, #0
 8013ba8:	eb07 75d7 	addgt.w	r5, r7, r7, lsr #31
 8013bac:	eb05 75d5 	addle.w	r5, r5, r5, lsr #31
 8013bb0:	106d      	asrgt	r5, r5, #1
 8013bb2:	bfd8      	it	le
 8013bb4:	f345 054f 	sbfxle	r5, r5, #1, #16
    lv_coord_t dx2  = LV_MATH_ABS(tri[0].x - tri[2].x);
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	bfb8      	it	lt
 8013bbc:	425b      	neglt	r3, r3
 8013bbe:	b21b      	sxth	r3, r3
 8013bc0:	9308      	str	r3, [sp, #32]
    lv_coord_t sx2  = tri[0].x < tri[2].x ? 1 : -1;
 8013bc2:	4296      	cmp	r6, r2
 8013bc4:	bfb4      	ite	lt
 8013bc6:	2301      	movlt	r3, #1
 8013bc8:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
    lv_coord_t dy2  = LV_MATH_ABS(tri[0].y - tri[2].y);
 8013bcc:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    lv_coord_t sx2  = tri[0].x < tri[2].x ? 1 : -1;
 8013bd0:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_coord_t dy2  = LV_MATH_ABS(tri[0].y - tri[2].y);
 8013bd2:	eba8 0302 	sub.w	r3, r8, r2
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	bfb8      	it	lt
 8013bda:	425b      	neglt	r3, r3
 8013bdc:	b21b      	sxth	r3, r3
 8013bde:	9302      	str	r3, [sp, #8]
    lv_coord_t sy2  = tri[0].y < tri[2].y ? 1 : -1;
 8013be0:	4590      	cmp	r8, r2
 8013be2:	bfb4      	ite	lt
 8013be4:	2301      	movlt	r3, #1
 8013be6:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
 8013bea:	930c      	str	r3, [sp, #48]	; 0x30
    lv_coord_t err2 = (dx1 > dy2 ? dx2 : -dy2) / 2;
 8013bec:	9b02      	ldr	r3, [sp, #8]
 8013bee:	429f      	cmp	r7, r3
 8013bf0:	bfcb      	itete	gt
 8013bf2:	9b08      	ldrgt	r3, [sp, #32]
 8013bf4:	9b02      	ldrle	r3, [sp, #8]
 8013bf6:	eb03 74d3 	addgt.w	r4, r3, r3, lsr #31
 8013bfa:	425c      	negle	r4, r3
            if(err_tmp2 > -dx2) {
 8013bfc:	9b08      	ldr	r3, [sp, #32]
    lv_coord_t err2 = (dx1 > dy2 ? dx2 : -dy2) / 2;
 8013bfe:	bfcc      	ite	gt
 8013c00:	1064      	asrgt	r4, r4, #1
 8013c02:	eb04 74d4 	addle.w	r4, r4, r4, lsr #31
            if(err_tmp2 > -dx2) {
 8013c06:	f1c3 0300 	rsb	r3, r3, #0
    lv_coord_t err2 = (dx1 > dy2 ? dx2 : -dy2) / 2;
 8013c0a:	bfd8      	it	le
 8013c0c:	f344 044f 	sbfxle	r4, r4, #1, #16
            if(err_tmp2 > -dx2) {
 8013c10:	9311      	str	r3, [sp, #68]	; 0x44
        draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2) + 1;
 8013c12:	45b3      	cmp	fp, r6
 8013c14:	465b      	mov	r3, fp
        lv_draw_fill(&draw_area, mask, style->body.main_color, opa);
 8013c16:	9901      	ldr	r1, [sp, #4]
 8013c18:	a813      	add	r0, sp, #76	; 0x4c
        draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2) + 1;
 8013c1a:	bfa8      	it	ge
 8013c1c:	4633      	movge	r3, r6
        draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 8013c1e:	45b3      	cmp	fp, r6
        draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2) + 1;
 8013c20:	f103 0301 	add.w	r3, r3, #1
 8013c24:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 8013c28:	465b      	mov	r3, fp
 8013c2a:	bfb8      	it	lt
 8013c2c:	4633      	movlt	r3, r6
        draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2) - 1;
 8013c2e:	45d0      	cmp	r8, sl
        draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 8013c30:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2) - 1;
 8013c34:	4643      	mov	r3, r8
 8013c36:	bfa8      	it	ge
 8013c38:	4653      	movge	r3, sl
        draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2) - 1;
 8013c3a:	45d0      	cmp	r8, sl
        draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2) - 1;
 8013c3c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8013c40:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2) - 1;
 8013c44:	4643      	mov	r3, r8
 8013c46:	bfb8      	it	lt
 8013c48:	4653      	movlt	r3, sl
 8013c4a:	3b01      	subs	r3, #1
 8013c4c:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        lv_draw_fill(&draw_area, mask, style->body.main_color, opa);
 8013c50:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
 8013c54:	8852      	ldrh	r2, [r2, #2]
 8013c56:	f7ff fc4f 	bl	80134f8 <lv_draw_fill>
            if(edge1.x == tri[1].x && edge1.y == tri[1].y) {
 8013c5a:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
            } else if(edge1.x == tri[2].x && edge1.y == tri[2].y) {
 8013c5e:	f9bd c05c 	ldrsh.w	ip, [sp, #92]	; 0x5c
            if(edge1.x == tri[1].x && edge1.y == tri[1].y) {
 8013c62:	9303      	str	r3, [sp, #12]
 8013c64:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8013c68:	9a03      	ldr	r2, [sp, #12]
 8013c6a:	9304      	str	r3, [sp, #16]
                dx1  = LV_MATH_ABS(tri[1].x - tri[2].x);
 8013c6c:	9b03      	ldr	r3, [sp, #12]
            } else if(edge1.x == tri[2].x && edge1.y == tri[2].y) {
 8013c6e:	f9bd e05e 	ldrsh.w	lr, [sp, #94]	; 0x5e
                dx1  = LV_MATH_ABS(tri[1].x - tri[2].x);
 8013c72:	eba3 030c 	sub.w	r3, r3, ip
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	bfb8      	it	lt
 8013c7a:	425b      	neglt	r3, r3
 8013c7c:	4562      	cmp	r2, ip
 8013c7e:	bfb4      	ite	lt
 8013c80:	2201      	movlt	r2, #1
 8013c82:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
 8013c86:	9209      	str	r2, [sp, #36]	; 0x24
 8013c88:	b21b      	sxth	r3, r3
                dy1  = LV_MATH_ABS(tri[1].y - tri[2].y);
 8013c8a:	9a04      	ldr	r2, [sp, #16]
 8013c8c:	eba2 010e 	sub.w	r1, r2, lr
 8013c90:	2900      	cmp	r1, #0
 8013c92:	bfb8      	it	lt
 8013c94:	4249      	neglt	r1, r1
 8013c96:	4572      	cmp	r2, lr
 8013c98:	bfb4      	ite	lt
 8013c9a:	2201      	movlt	r2, #1
 8013c9c:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
 8013ca0:	b209      	sxth	r1, r1
 8013ca2:	920a      	str	r2, [sp, #40]	; 0x28
                err1 = (dx1 > dy1 ? dx1 : -dy1) / 2;
 8013ca4:	424a      	negs	r2, r1
 8013ca6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8013caa:	f342 024f 	sbfx	r2, r2, #1, #16
 8013cae:	920e      	str	r2, [sp, #56]	; 0x38
 8013cb0:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 8013cb4:	1052      	asrs	r2, r2, #1
 8013cb6:	920d      	str	r2, [sp, #52]	; 0x34
 8013cb8:	4642      	mov	r2, r8
            if(edge1.x == tri[1].x && edge1.y == tri[1].y) {
 8013cba:	9803      	ldr	r0, [sp, #12]
 8013cbc:	4286      	cmp	r6, r0
 8013cbe:	d142      	bne.n	8013d46 <tri_draw_flat+0x2bc>
 8013cc0:	9804      	ldr	r0, [sp, #16]
 8013cc2:	4282      	cmp	r2, r0
 8013cc4:	d13f      	bne.n	8013d46 <tri_draw_flat+0x2bc>
                err1 = (dx1 > dy1 ? dx1 : -dy1) / 2;
 8013cc6:	428b      	cmp	r3, r1
 8013cc8:	dd44      	ble.n	8013d54 <tri_draw_flat+0x2ca>
 8013cca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
                sy1  = tri[1].y < tri[2].y ? 1 : -1;
 8013ccc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013cce:	4689      	mov	r9, r1
 8013cd0:	461f      	mov	r7, r3
 8013cd2:	9006      	str	r0, [sp, #24]
                sx1  = tri[1].x < tri[2].x ? 1 : -1;
 8013cd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013cd6:	9005      	str	r0, [sp, #20]
            if(err_tmp1 > -dx1) {
 8013cd8:	4278      	negs	r0, r7
 8013cda:	4285      	cmp	r5, r0
                err1 -= dy1;
 8013cdc:	bfc9      	itett	gt
 8013cde:	eba5 0009 	subgt.w	r0, r5, r9
 8013ce2:	9507      	strle	r5, [sp, #28]
 8013ce4:	b200      	sxthgt	r0, r0
 8013ce6:	9007      	strgt	r0, [sp, #28]
                edge1.x += sx1;
 8013ce8:	bfc2      	ittt	gt
 8013cea:	9805      	ldrgt	r0, [sp, #20]
 8013cec:	1836      	addgt	r6, r6, r0
 8013cee:	b236      	sxthgt	r6, r6
            if(err_tmp1 < dy1) {
 8013cf0:	45a9      	cmp	r9, r5
                err1 += dx1;
 8013cf2:	bfc9      	itett	gt
 8013cf4:	9807      	ldrgt	r0, [sp, #28]
 8013cf6:	9d07      	ldrle	r5, [sp, #28]
 8013cf8:	19c0      	addgt	r0, r0, r7
 8013cfa:	4605      	movgt	r5, r0
                edge1.y += sy1;
 8013cfc:	bfc1      	itttt	gt
 8013cfe:	9806      	ldrgt	r0, [sp, #24]
 8013d00:	1812      	addgt	r2, r2, r0
                err1 += dx1;
 8013d02:	b22d      	sxthgt	r5, r5
                edge1.y += sy1;
 8013d04:	b212      	sxthgt	r2, r2
        } while(edge1.y == y1_tmp);
 8013d06:	4542      	cmp	r2, r8
 8013d08:	d0d7      	beq.n	8013cba <tri_draw_flat+0x230>
 8013d0a:	4653      	mov	r3, sl
            if(edge2.x == tri[2].x && edge2.y == tri[2].y) return;
 8013d0c:	45e3      	cmp	fp, ip
 8013d0e:	4621      	mov	r1, r4
 8013d10:	d101      	bne.n	8013d16 <tri_draw_flat+0x28c>
 8013d12:	459e      	cmp	lr, r3
 8013d14:	d01b      	beq.n	8013d4e <tri_draw_flat+0x2c4>
            if(err_tmp2 > -dx2) {
 8013d16:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013d18:	4284      	cmp	r4, r0
 8013d1a:	dd06      	ble.n	8013d2a <tri_draw_flat+0x2a0>
                err2 -= dy2;
 8013d1c:	9802      	ldr	r0, [sp, #8]
 8013d1e:	1a24      	subs	r4, r4, r0
                edge2.x += sx2;
 8013d20:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013d22:	4458      	add	r0, fp
                err2 -= dy2;
 8013d24:	b224      	sxth	r4, r4
                edge2.x += sx2;
 8013d26:	fa0f fb80 	sxth.w	fp, r0
            if(err_tmp2 < dy2) {
 8013d2a:	9802      	ldr	r0, [sp, #8]
 8013d2c:	4281      	cmp	r1, r0
 8013d2e:	da05      	bge.n	8013d3c <tri_draw_flat+0x2b2>
                err2 += dx2;
 8013d30:	9908      	ldr	r1, [sp, #32]
 8013d32:	440c      	add	r4, r1
                edge2.y += sy2;
 8013d34:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013d36:	440b      	add	r3, r1
                err2 += dx2;
 8013d38:	b224      	sxth	r4, r4
                edge2.y += sy2;
 8013d3a:	b21b      	sxth	r3, r3
        } while(edge2.y == y2_tmp);
 8013d3c:	459a      	cmp	sl, r3
 8013d3e:	d0e5      	beq.n	8013d0c <tri_draw_flat+0x282>
 8013d40:	469a      	mov	sl, r3
 8013d42:	4690      	mov	r8, r2
 8013d44:	e765      	b.n	8013c12 <tri_draw_flat+0x188>
            } else if(edge1.x == tri[2].x && edge1.y == tri[2].y) {
 8013d46:	4566      	cmp	r6, ip
 8013d48:	d1c6      	bne.n	8013cd8 <tri_draw_flat+0x24e>
 8013d4a:	4572      	cmp	r2, lr
 8013d4c:	d1c4      	bne.n	8013cd8 <tri_draw_flat+0x24e>
}
 8013d4e:	b019      	add	sp, #100	; 0x64
 8013d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                err1 = (dx1 > dy1 ? dx1 : -dy1) / 2;
 8013d54:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8013d56:	e7b9      	b.n	8013ccc <tri_draw_flat+0x242>

08013d58 <tri_draw_tall>:
{
 8013d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d5c:	b095      	sub	sp, #84	; 0x54
 8013d5e:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
    memcpy(tri, points, sizeof(tri));
 8013d62:	220c      	movs	r2, #12
 8013d64:	4601      	mov	r1, r0
 8013d66:	a811      	add	r0, sp, #68	; 0x44
{
 8013d68:	930b      	str	r3, [sp, #44]	; 0x2c
    memcpy(tri, points, sizeof(tri));
 8013d6a:	f002 fd01 	bl	8016770 <memcpy>
    if(tri[1].x < tri[0].x) point_swap(&tri[1], &tri[0]);
 8013d6e:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 8013d72:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 8013d76:	429a      	cmp	r2, r3
    p1->x = p2->x;
 8013d78:	bfbc      	itt	lt
 8013d7a:	e9dd 2311 	ldrdlt	r2, r3, [sp, #68]	; 0x44
    p2->x = tmp.x;
 8013d7e:	e9cd 3211 	strdlt	r3, r2, [sp, #68]	; 0x44
    if(tri[2].x < tri[1].x) point_swap(&tri[2], &tri[1]);
 8013d82:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8013d86:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 8013d8a:	429a      	cmp	r2, r3
    p1->x = p2->x;
 8013d8c:	bfbc      	itt	lt
 8013d8e:	e9dd 2312 	ldrdlt	r2, r3, [sp, #72]	; 0x48
    p2->x = tmp.x;
 8013d92:	e9cd 3212 	strdlt	r3, r2, [sp, #72]	; 0x48
    if(tri[1].x < tri[0].x) point_swap(&tri[1], &tri[0]);
 8013d96:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 8013d9a:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 8013d9e:	429a      	cmp	r2, r3
    p1->x = p2->x;
 8013da0:	bfbc      	itt	lt
 8013da2:	e9dd 2311 	ldrdlt	r2, r3, [sp, #68]	; 0x44
    p2->x = tmp.x;
 8013da6:	e9cd 3211 	strdlt	r3, r2, [sp, #68]	; 0x44
    lv_coord_t dx1  = LV_MATH_ABS(tri[0].x - tri[1].x);
 8013daa:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8013dae:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
    lv_coord_t dy1  = LV_MATH_ABS(tri[0].y - tri[1].y);
 8013db2:	f9bd 7046 	ldrsh.w	r7, [sp, #70]	; 0x46
    lv_coord_t dx1  = LV_MATH_ABS(tri[0].x - tri[1].x);
 8013db6:	46ca      	mov	sl, r9
 8013db8:	eba9 0803 	sub.w	r8, r9, r3
    lv_coord_t dx2  = LV_MATH_ABS(tri[0].x - tri[2].x);
 8013dbc:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
    lv_coord_t dy1  = LV_MATH_ABS(tri[0].y - tri[1].y);
 8013dc0:	46bb      	mov	fp, r7
    lv_coord_t dx1  = LV_MATH_ABS(tri[0].x - tri[1].x);
 8013dc2:	f1b8 0f00 	cmp.w	r8, #0
 8013dc6:	bfb8      	it	lt
 8013dc8:	f1c8 0800 	rsblt	r8, r8, #0
    lv_coord_t sx1  = tri[0].x < tri[1].x ? 1 : -1;
 8013dcc:	4599      	cmp	r9, r3
 8013dce:	bfb4      	ite	lt
 8013dd0:	2301      	movlt	r3, #1
 8013dd2:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
 8013dd6:	9305      	str	r3, [sp, #20]
    lv_coord_t dx1  = LV_MATH_ABS(tri[0].x - tri[1].x);
 8013dd8:	fa0f f888 	sxth.w	r8, r8
    lv_coord_t dy1  = LV_MATH_ABS(tri[0].y - tri[1].y);
 8013ddc:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 8013de0:	1afe      	subs	r6, r7, r3
 8013de2:	2e00      	cmp	r6, #0
 8013de4:	bfb8      	it	lt
 8013de6:	4276      	neglt	r6, r6
    lv_coord_t sy1  = tri[0].y < tri[1].y ? 1 : -1;
 8013de8:	429f      	cmp	r7, r3
 8013dea:	bfb4      	ite	lt
 8013dec:	2301      	movlt	r3, #1
 8013dee:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
    lv_coord_t dy1  = LV_MATH_ABS(tri[0].y - tri[1].y);
 8013df2:	b236      	sxth	r6, r6
    lv_coord_t sy1  = tri[0].y < tri[1].y ? 1 : -1;
 8013df4:	9306      	str	r3, [sp, #24]
    lv_coord_t dx2  = LV_MATH_ABS(tri[0].x - tri[2].x);
 8013df6:	eba9 0302 	sub.w	r3, r9, r2
    lv_coord_t err1 = (dx1 > dy1 ? dx1 : -dy1) / 2;
 8013dfa:	45b0      	cmp	r8, r6
 8013dfc:	bfd5      	itete	le
 8013dfe:	4274      	negle	r4, r6
 8013e00:	eb08 74d8 	addgt.w	r4, r8, r8, lsr #31
 8013e04:	eb04 74d4 	addle.w	r4, r4, r4, lsr #31
 8013e08:	1064      	asrgt	r4, r4, #1
 8013e0a:	bfd8      	it	le
 8013e0c:	f344 044f 	sbfxle	r4, r4, #1, #16
    lv_coord_t dx2  = LV_MATH_ABS(tri[0].x - tri[2].x);
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	bfb8      	it	lt
 8013e14:	425b      	neglt	r3, r3
 8013e16:	b21b      	sxth	r3, r3
 8013e18:	9304      	str	r3, [sp, #16]
    lv_coord_t sx2  = tri[0].x < tri[2].x ? 1 : -1;
 8013e1a:	4591      	cmp	r9, r2
 8013e1c:	bfb4      	ite	lt
 8013e1e:	2301      	movlt	r3, #1
 8013e20:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
    lv_coord_t dy2  = LV_MATH_ABS(tri[0].y - tri[2].y);
 8013e24:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
    lv_coord_t sx2  = tri[0].x < tri[2].x ? 1 : -1;
 8013e28:	9307      	str	r3, [sp, #28]
    lv_coord_t dy2  = LV_MATH_ABS(tri[0].y - tri[2].y);
 8013e2a:	1abb      	subs	r3, r7, r2
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	bfb8      	it	lt
 8013e30:	425b      	neglt	r3, r3
 8013e32:	b21b      	sxth	r3, r3
 8013e34:	9302      	str	r3, [sp, #8]
    lv_coord_t sy2  = tri[0].y < tri[2].y ? 1 : -1;
 8013e36:	4297      	cmp	r7, r2
 8013e38:	bfb4      	ite	lt
 8013e3a:	2301      	movlt	r3, #1
 8013e3c:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
 8013e40:	9308      	str	r3, [sp, #32]
    lv_coord_t err2 = (dx1 > dy2 ? dx2 : -dy2) / 2;
 8013e42:	9b02      	ldr	r3, [sp, #8]
 8013e44:	4598      	cmp	r8, r3
 8013e46:	bfcb      	itete	gt
 8013e48:	9b04      	ldrgt	r3, [sp, #16]
 8013e4a:	9b02      	ldrle	r3, [sp, #8]
 8013e4c:	eb03 75d3 	addgt.w	r5, r3, r3, lsr #31
 8013e50:	425d      	negle	r5, r3
            if(err_tmp2 > -dx2) {
 8013e52:	9b04      	ldr	r3, [sp, #16]
    lv_coord_t err2 = (dx1 > dy2 ? dx2 : -dy2) / 2;
 8013e54:	bfcc      	ite	gt
 8013e56:	106d      	asrgt	r5, r5, #1
 8013e58:	eb05 75d5 	addle.w	r5, r5, r5, lsr #31
            if(err_tmp2 > -dx2) {
 8013e5c:	f1c3 0300 	rsb	r3, r3, #0
    lv_coord_t err2 = (dx1 > dy2 ? dx2 : -dy2) / 2;
 8013e60:	bfd8      	it	le
 8013e62:	f345 054f 	sbfxle	r5, r5, #1, #16
            if(err_tmp2 > -dx2) {
 8013e66:	930d      	str	r3, [sp, #52]	; 0x34
        draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 8013e68:	45d1      	cmp	r9, sl
 8013e6a:	464b      	mov	r3, r9
        lv_draw_fill(&draw_area, mask, style->body.main_color, opa);
 8013e6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013e6e:	a80f      	add	r0, sp, #60	; 0x3c
        draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 8013e70:	bfa8      	it	ge
 8013e72:	4653      	movge	r3, sl
        draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 8013e74:	45d1      	cmp	r9, sl
        draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
 8013e76:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 8013e7a:	464b      	mov	r3, r9
 8013e7c:	bfb8      	it	lt
 8013e7e:	4653      	movlt	r3, sl
        draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 8013e80:	455f      	cmp	r7, fp
        draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
 8013e82:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 8013e86:	463b      	mov	r3, r7
 8013e88:	bfa8      	it	ge
 8013e8a:	465b      	movge	r3, fp
        draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2) - 1;
 8013e8c:	455f      	cmp	r7, fp
        draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
 8013e8e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2) - 1;
 8013e92:	463b      	mov	r3, r7
 8013e94:	bfb8      	it	lt
 8013e96:	465b      	movlt	r3, fp
 8013e98:	3b01      	subs	r3, #1
 8013e9a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        lv_draw_fill(&draw_area, mask, style->body.main_color, opa);
 8013e9e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013ea2:	8852      	ldrh	r2, [r2, #2]
 8013ea4:	f7ff fb28 	bl	80134f8 <lv_draw_fill>
            if(edge1.y == tri[1].y && edge1.x == tri[1].x) {
 8013ea8:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
            } else if(edge1.y == tri[2].y && edge1.x == tri[2].x) {
 8013eac:	f9bd c04c 	ldrsh.w	ip, [sp, #76]	; 0x4c
            if(edge1.y == tri[1].y && edge1.x == tri[1].x) {
 8013eb0:	9303      	str	r3, [sp, #12]
                dx1  = LV_MATH_ABS(tri[1].x - tri[2].x);
 8013eb2:	9a03      	ldr	r2, [sp, #12]
            } else if(edge1.y == tri[2].y && edge1.x == tri[2].x) {
 8013eb4:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
                dx1  = LV_MATH_ABS(tri[1].x - tri[2].x);
 8013eb8:	eba2 020c 	sub.w	r2, r2, ip
            if(edge1.y == tri[1].y && edge1.x == tri[1].x) {
 8013ebc:	f9bd e04a 	ldrsh.w	lr, [sp, #74]	; 0x4a
            } else if(edge1.y == tri[2].y && edge1.x == tri[2].x) {
 8013ec0:	9301      	str	r3, [sp, #4]
                dy1  = LV_MATH_ABS(tri[1].y - tri[2].y);
 8013ec2:	464b      	mov	r3, r9
                dx1  = LV_MATH_ABS(tri[1].x - tri[2].x);
 8013ec4:	2a00      	cmp	r2, #0
 8013ec6:	bfb8      	it	lt
 8013ec8:	4252      	neglt	r2, r2
 8013eca:	b212      	sxth	r2, r2
                err1 = (dx1 > dy1 ? dx1 : -dy1) / 2;
 8013ecc:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
 8013ed0:	1049      	asrs	r1, r1, #1
 8013ed2:	910c      	str	r1, [sp, #48]	; 0x30
            if(edge1.y == tri[1].y && edge1.x == tri[1].x) {
 8013ed4:	45be      	cmp	lr, r7
 8013ed6:	d154      	bne.n	8013f82 <tri_draw_tall+0x22a>
 8013ed8:	9903      	ldr	r1, [sp, #12]
 8013eda:	4299      	cmp	r1, r3
 8013edc:	d151      	bne.n	8013f82 <tri_draw_tall+0x22a>
                sx1  = tri[1].x < tri[2].x ? 1 : -1;
 8013ede:	458c      	cmp	ip, r1
 8013ee0:	bfd4      	ite	le
 8013ee2:	f04f 31ff 	movle.w	r1, #4294967295	; 0xffffffff
 8013ee6:	2101      	movgt	r1, #1
                dx1  = LV_MATH_ABS(tri[1].x - tri[2].x);
 8013ee8:	4690      	mov	r8, r2
                sx1  = tri[1].x < tri[2].x ? 1 : -1;
 8013eea:	9105      	str	r1, [sp, #20]
                dy1  = LV_MATH_ABS(tri[1].y - tri[2].y);
 8013eec:	9901      	ldr	r1, [sp, #4]
 8013eee:	ebae 0601 	sub.w	r6, lr, r1
 8013ef2:	2e00      	cmp	r6, #0
 8013ef4:	bfb8      	it	lt
 8013ef6:	4276      	neglt	r6, r6
                sy1  = tri[1].y < tri[2].y ? 1 : -1;
 8013ef8:	4571      	cmp	r1, lr
 8013efa:	bfd4      	ite	le
 8013efc:	f04f 31ff 	movle.w	r1, #4294967295	; 0xffffffff
 8013f00:	2101      	movgt	r1, #1
                dy1  = LV_MATH_ABS(tri[1].y - tri[2].y);
 8013f02:	b236      	sxth	r6, r6
                sy1  = tri[1].y < tri[2].y ? 1 : -1;
 8013f04:	9106      	str	r1, [sp, #24]
                err1 = (dx1 > dy1 ? dx1 : -dy1) / 2;
 8013f06:	42b2      	cmp	r2, r6
 8013f08:	bfd7      	itett	le
 8013f0a:	4274      	negle	r4, r6
 8013f0c:	9c0c      	ldrgt	r4, [sp, #48]	; 0x30
 8013f0e:	eb04 74d4 	addle.w	r4, r4, r4, lsr #31
 8013f12:	f344 044f 	sbfxle	r4, r4, #1, #16
            if(err_tmp1 > -dx1) {
 8013f16:	f1c8 0100 	rsb	r1, r8, #0
 8013f1a:	428c      	cmp	r4, r1
                edge1.x += sx1;
 8013f1c:	bfc5      	ittet	gt
 8013f1e:	9805      	ldrgt	r0, [sp, #20]
                err1 -= dy1;
 8013f20:	1ba1      	subgt	r1, r4, r6
 8013f22:	4621      	movle	r1, r4
                edge1.x += sx1;
 8013f24:	181b      	addgt	r3, r3, r0
                err1 -= dy1;
 8013f26:	bfc4      	itt	gt
 8013f28:	b209      	sxthgt	r1, r1
                edge1.x += sx1;
 8013f2a:	b21b      	sxthgt	r3, r3
            if(err_tmp1 < dy1) {
 8013f2c:	42a6      	cmp	r6, r4
                err1 += dx1;
 8013f2e:	bfc5      	ittet	gt
 8013f30:	eb08 0401 	addgt.w	r4, r8, r1
                edge1.y += sy1;
 8013f34:	9906      	ldrgt	r1, [sp, #24]
 8013f36:	460c      	movle	r4, r1
 8013f38:	187f      	addgt	r7, r7, r1
                err1 += dx1;
 8013f3a:	bfc4      	itt	gt
 8013f3c:	b224      	sxthgt	r4, r4
                edge1.y += sy1;
 8013f3e:	b23f      	sxthgt	r7, r7
        } while(edge1.x == x1_tmp);
 8013f40:	4599      	cmp	r9, r3
 8013f42:	d0c7      	beq.n	8013ed4 <tri_draw_tall+0x17c>
 8013f44:	4652      	mov	r2, sl
            if(edge2.y == tri[2].y && edge2.x == tri[2].x) {
 8013f46:	9801      	ldr	r0, [sp, #4]
 8013f48:	4629      	mov	r1, r5
 8013f4a:	4558      	cmp	r0, fp
 8013f4c:	d101      	bne.n	8013f52 <tri_draw_tall+0x1fa>
 8013f4e:	4594      	cmp	ip, r2
 8013f50:	d01c      	beq.n	8013f8c <tri_draw_tall+0x234>
            if(err_tmp2 > -dx2) {
 8013f52:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013f54:	4285      	cmp	r5, r0
 8013f56:	dd05      	ble.n	8013f64 <tri_draw_tall+0x20c>
                err2 -= dy2;
 8013f58:	9802      	ldr	r0, [sp, #8]
 8013f5a:	1a2d      	subs	r5, r5, r0
                edge2.x += sx2;
 8013f5c:	9807      	ldr	r0, [sp, #28]
 8013f5e:	4402      	add	r2, r0
                err2 -= dy2;
 8013f60:	b22d      	sxth	r5, r5
                edge2.x += sx2;
 8013f62:	b212      	sxth	r2, r2
            if(err_tmp2 < dy2) {
 8013f64:	9802      	ldr	r0, [sp, #8]
 8013f66:	4281      	cmp	r1, r0
 8013f68:	da06      	bge.n	8013f78 <tri_draw_tall+0x220>
                err2 += dx2;
 8013f6a:	9904      	ldr	r1, [sp, #16]
 8013f6c:	440d      	add	r5, r1
                edge2.y += sy2;
 8013f6e:	9908      	ldr	r1, [sp, #32]
 8013f70:	4459      	add	r1, fp
                err2 += dx2;
 8013f72:	b22d      	sxth	r5, r5
                edge2.y += sy2;
 8013f74:	fa0f fb81 	sxth.w	fp, r1
        } while(edge2.x == x2_tmp);
 8013f78:	4592      	cmp	sl, r2
 8013f7a:	d0e4      	beq.n	8013f46 <tri_draw_tall+0x1ee>
 8013f7c:	4692      	mov	sl, r2
 8013f7e:	4699      	mov	r9, r3
 8013f80:	e772      	b.n	8013e68 <tri_draw_tall+0x110>
            } else if(edge1.y == tri[2].y && edge1.x == tri[2].x) {
 8013f82:	9901      	ldr	r1, [sp, #4]
 8013f84:	42b9      	cmp	r1, r7
 8013f86:	d1c6      	bne.n	8013f16 <tri_draw_tall+0x1be>
 8013f88:	459c      	cmp	ip, r3
 8013f8a:	d1c4      	bne.n	8013f16 <tri_draw_tall+0x1be>
}
 8013f8c:	b015      	add	sp, #84	; 0x54
 8013f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013f92 <lv_draw_triangle>:
{
 8013f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(points[0].x == points[1].x && points[0].y == points[1].y) return;
 8013f96:	f9b0 4000 	ldrsh.w	r4, [r0]
{
 8013f9a:	469e      	mov	lr, r3
    if(points[0].x == points[1].x && points[0].y == points[1].y) return;
 8013f9c:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 8013fa0:	42bc      	cmp	r4, r7
 8013fa2:	d105      	bne.n	8013fb0 <lv_draw_triangle+0x1e>
 8013fa4:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 8013fa8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8013fac:	429d      	cmp	r5, r3
 8013fae:	d051      	beq.n	8014054 <lv_draw_triangle+0xc2>
    if(points[1].x == points[2].x && points[1].y == points[2].y) return;
 8013fb0:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8013fb4:	42b7      	cmp	r7, r6
 8013fb6:	d105      	bne.n	8013fc4 <lv_draw_triangle+0x32>
 8013fb8:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
 8013fbc:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013fc0:	429d      	cmp	r5, r3
 8013fc2:	d047      	beq.n	8014054 <lv_draw_triangle+0xc2>
    if(points[0].x == points[2].x && points[0].y == points[2].y) return;
 8013fc4:	42b4      	cmp	r4, r6
 8013fc6:	d105      	bne.n	8013fd4 <lv_draw_triangle+0x42>
 8013fc8:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 8013fcc:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013fd0:	429d      	cmp	r5, r3
 8013fd2:	d03f      	beq.n	8014054 <lv_draw_triangle+0xc2>
    if(points[0].x == points[1].x && points[1].x == points[2].x) return;
 8013fd4:	42bc      	cmp	r4, r7
 8013fd6:	d101      	bne.n	8013fdc <lv_draw_triangle+0x4a>
 8013fd8:	42b4      	cmp	r4, r6
 8013fda:	d03b      	beq.n	8014054 <lv_draw_triangle+0xc2>
    if(points[0].y == points[1].y && points[1].y == points[2].y) return;
 8013fdc:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 8013fe0:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8013fe4:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8013fe8:	4545      	cmp	r5, r8
 8013fea:	d101      	bne.n	8013ff0 <lv_draw_triangle+0x5e>
 8013fec:	4565      	cmp	r5, ip
 8013fee:	d031      	beq.n	8014054 <lv_draw_triangle+0xc2>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8013ff0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8013ff4:	7a13      	ldrb	r3, [r2, #8]
 8013ff6:	bf18      	it	ne
 8013ff8:	fb03 f30e 	mulne.w	r3, r3, lr
    lv_coord_t x_max = LV_MATH_MAX(LV_MATH_MAX(points[0].x, points[1].x), points[2].x);
 8013ffc:	46a6      	mov	lr, r4
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8013ffe:	bf18      	it	ne
 8014000:	0a1b      	lsrne	r3, r3, #8
    lv_coord_t x_max = LV_MATH_MAX(LV_MATH_MAX(points[0].x, points[1].x), points[2].x);
 8014002:	42bc      	cmp	r4, r7
 8014004:	bfb8      	it	lt
 8014006:	46be      	movlt	lr, r7
    lv_coord_t x_min = LV_MATH_MIN(LV_MATH_MIN(points[0].x, points[1].x), points[2].x);
 8014008:	42bc      	cmp	r4, r7
 801400a:	bfa8      	it	ge
 801400c:	463c      	movge	r4, r7
    if(x_max - x_min < y_max - y_min) {
 801400e:	42b4      	cmp	r4, r6
 8014010:	bfa8      	it	ge
 8014012:	4634      	movge	r4, r6
 8014014:	45b6      	cmp	lr, r6
 8014016:	bfac      	ite	ge
 8014018:	ebc4 040e 	rsbge	r4, r4, lr
 801401c:	ebc4 0406 	rsblt	r4, r4, r6
    lv_coord_t y_max = LV_MATH_MAX(LV_MATH_MAX(points[0].y, points[1].y), points[2].y);
 8014020:	4545      	cmp	r5, r8
 8014022:	462e      	mov	r6, r5
 8014024:	bfb8      	it	lt
 8014026:	4646      	movlt	r6, r8
    lv_coord_t y_min = LV_MATH_MIN(LV_MATH_MIN(points[0].y, points[1].y), points[2].y);
 8014028:	4545      	cmp	r5, r8
 801402a:	bfa8      	it	ge
 801402c:	4645      	movge	r5, r8
    if(x_max - x_min < y_max - y_min) {
 801402e:	4565      	cmp	r5, ip
 8014030:	bfa8      	it	ge
 8014032:	4665      	movge	r5, ip
 8014034:	4566      	cmp	r6, ip
 8014036:	bfac      	ite	ge
 8014038:	ebc5 0506 	rsbge	r5, r5, r6
 801403c:	ebc5 050c 	rsblt	r5, r5, ip
 8014040:	42ac      	cmp	r4, r5
 8014042:	da03      	bge.n	801404c <lv_draw_triangle+0xba>
}
 8014044:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        tri_draw_tall(points, mask, style, opa);
 8014048:	f7ff be86 	b.w	8013d58 <tri_draw_tall>
}
 801404c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        tri_draw_flat(points, mask, style, opa);
 8014050:	f7ff bd1b 	b.w	8013a8a <tri_draw_flat>
}
 8014054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014058 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 8014058:	7803      	ldrb	r3, [r0, #0]
 801405a:	780a      	ldrb	r2, [r1, #0]
 801405c:	4293      	cmp	r3, r2
 801405e:	bf11      	iteee	ne
 8014060:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
 8014062:	784b      	ldrbeq	r3, [r1, #1]
 8014064:	7840      	ldrbeq	r0, [r0, #1]
 8014066:	1ac0      	subeq	r0, r0, r3

}
 8014068:	4770      	bx	lr

0801406a <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 801406a:	8803      	ldrh	r3, [r0, #0]
 801406c:	880a      	ldrh	r2, [r1, #0]
 801406e:	4293      	cmp	r3, r2
 8014070:	bf11      	iteee	ne
 8014072:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
 8014074:	884b      	ldrheq	r3, [r1, #2]
 8014076:	8840      	ldrheq	r0, [r0, #2]
 8014078:	1ac0      	subeq	r0, r0, r3
}
 801407a:	4770      	bx	lr

0801407c <unicode_list_compare>:
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return (*(uint16_t *)ref) - (*(uint16_t *)element);
 801407c:	8800      	ldrh	r0, [r0, #0]
 801407e:	880b      	ldrh	r3, [r1, #0]
}
 8014080:	1ac0      	subs	r0, r0, r3
 8014082:	4770      	bx	lr

08014084 <lv_font_get_bitmap_fmt_txt>:
{
 8014084:	b510      	push	{r4, lr}
    if(letter == '\0') return 0;
 8014086:	b909      	cbnz	r1, 801408c <lv_font_get_bitmap_fmt_txt+0x8>
    if(!gid) return false;
 8014088:	2000      	movs	r0, #0
}
 801408a:	bd10      	pop	{r4, pc}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 801408c:	f850 4f0c 	ldr.w	r4, [r0, #12]!
 8014090:	f7f1 f8fe 	bl	8005290 <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return false;
 8014094:	2800      	cmp	r0, #0
 8014096:	d0f7      	beq.n	8014088 <lv_font_get_bitmap_fmt_txt+0x4>
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8014098:	6863      	ldr	r3, [r4, #4]
 801409a:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
    if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 801409e:	2a00      	cmp	r2, #0
 80140a0:	d0f2      	beq.n	8014088 <lv_font_get_bitmap_fmt_txt+0x4>
 80140a2:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 80140a6:	6820      	ldr	r0, [r4, #0]
 80140a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80140ac:	4418      	add	r0, r3
 80140ae:	e7ec      	b.n	801408a <lv_font_get_bitmap_fmt_txt+0x6>

080140b0 <lv_font_get_glyph_bitmap>:
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    return font_p->get_glyph_bitmap(font_p, letter);
 80140b0:	6843      	ldr	r3, [r0, #4]
 80140b2:	4718      	bx	r3

080140b4 <lv_font_get_glyph_dsc>:
 * @param letter an UNICODE letter code
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter, uint32_t letter_next)
{
 80140b4:	b410      	push	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 80140b6:	6804      	ldr	r4, [r0, #0]
 80140b8:	46a4      	mov	ip, r4
}
 80140ba:	bc10      	pop	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 80140bc:	4760      	bx	ip

080140be <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 80140be:	b507      	push	{r0, r1, r2, lr}
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 80140c0:	4613      	mov	r3, r2
 80140c2:	460a      	mov	r2, r1
 80140c4:	4669      	mov	r1, sp
 80140c6:	f7ff fff5 	bl	80140b4 <lv_font_get_glyph_dsc>
    if(ret) return g.adv_w;
 80140ca:	b108      	cbz	r0, 80140d0 <lv_font_get_glyph_width+0x12>
 80140cc:	f8bd 0000 	ldrh.w	r0, [sp]
    else return 0;
}
 80140d0:	b003      	add	sp, #12
 80140d2:	f85d fb04 	ldr.w	pc, [sp], #4

080140d6 <lv_kb_set_ta>:
{
 80140d6:	b538      	push	{r3, r4, r5, lr}
 80140d8:	460d      	mov	r5, r1
    lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
 80140da:	f7fb fcf1 	bl	800fac0 <lv_obj_get_ext_attr>
 80140de:	4604      	mov	r4, r0
    if(ext->ta && ext->cursor_mng) {
 80140e0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80140e2:	b158      	cbz	r0, 80140fc <lv_kb_set_ta+0x26>
 80140e4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80140e8:	07da      	lsls	r2, r3, #31
 80140ea:	d507      	bpl.n	80140fc <lv_kb_set_ta+0x26>
        cur_type = lv_ta_get_cursor_type(ext->ta);
 80140ec:	f000 f9f4 	bl	80144d8 <lv_ta_get_cursor_type>
        lv_ta_set_cursor_type(ext->ta, cur_type | LV_CURSOR_HIDDEN);
 80140f0:	f040 0108 	orr.w	r1, r0, #8
 80140f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80140f6:	b2c9      	uxtb	r1, r1
 80140f8:	f000 f936 	bl	8014368 <lv_ta_set_cursor_type>
    ext->ta = ta;
 80140fc:	62a5      	str	r5, [r4, #40]	; 0x28
    if(ext->ta && ext->cursor_mng) {
 80140fe:	b16d      	cbz	r5, 801411c <lv_kb_set_ta+0x46>
 8014100:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8014104:	07db      	lsls	r3, r3, #31
 8014106:	d509      	bpl.n	801411c <lv_kb_set_ta+0x46>
        cur_type = lv_ta_get_cursor_type(ext->ta);
 8014108:	4628      	mov	r0, r5
 801410a:	f000 f9e5 	bl	80144d8 <lv_ta_get_cursor_type>
        lv_ta_set_cursor_type(ext->ta, cur_type & (~LV_CURSOR_HIDDEN));
 801410e:	f000 01f7 	and.w	r1, r0, #247	; 0xf7
 8014112:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
 8014114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_ta_set_cursor_type(ext->ta, cur_type & (~LV_CURSOR_HIDDEN));
 8014118:	f000 b926 	b.w	8014368 <lv_ta_set_cursor_type>
}
 801411c:	bd38      	pop	{r3, r4, r5, pc}

0801411e <lv_kb_set_style>:
    switch(type) {
 801411e:	2905      	cmp	r1, #5
 8014120:	d811      	bhi.n	8014146 <lv_kb_set_style+0x28>
 8014122:	e8df f001 	tbb	[pc, r1]
 8014126:	0603      	.short	0x0603
 8014128:	0e0c0a08 	.word	0x0e0c0a08
        case LV_KB_STYLE_BG: lv_btnm_set_style(kb, LV_BTNM_STYLE_BG, style); break;
 801412c:	2100      	movs	r1, #0
        case LV_KB_STYLE_BTN_INA: lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_INA, style); break;
 801412e:	f000 bbbf 	b.w	80148b0 <lv_btnm_set_style>
        case LV_KB_STYLE_BTN_REL: lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_REL, style); break;
 8014132:	2101      	movs	r1, #1
 8014134:	e7fb      	b.n	801412e <lv_kb_set_style+0x10>
        case LV_KB_STYLE_BTN_PR: lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_PR, style); break;
 8014136:	2102      	movs	r1, #2
 8014138:	e7f9      	b.n	801412e <lv_kb_set_style+0x10>
        case LV_KB_STYLE_BTN_TGL_REL: lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_TGL_REL, style); break;
 801413a:	2103      	movs	r1, #3
 801413c:	e7f7      	b.n	801412e <lv_kb_set_style+0x10>
        case LV_KB_STYLE_BTN_TGL_PR: lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_TGL_PR, style); break;
 801413e:	2104      	movs	r1, #4
 8014140:	e7f5      	b.n	801412e <lv_kb_set_style+0x10>
        case LV_KB_STYLE_BTN_INA: lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_INA, style); break;
 8014142:	2105      	movs	r1, #5
 8014144:	e7f3      	b.n	801412e <lv_kb_set_style+0x10>
}
 8014146:	4770      	bx	lr

08014148 <pwd_char_hider_anim>:
}
 8014148:	4770      	bx	lr

0801414a <pwd_char_hider_anim_ready>:
    pwd_char_hider(ta);
 801414a:	6800      	ldr	r0, [r0, #0]
 801414c:	f7f1 bb7a 	b.w	8005844 <pwd_char_hider>

08014150 <get_cursor_style>:
{
 8014150:	b538      	push	{r3, r4, r5, lr}
 8014152:	460c      	mov	r4, r1
    lv_ta_ext_t * ext              = lv_obj_get_ext_attr(ta);
 8014154:	f7fb fcb4 	bl	800fac0 <lv_obj_get_ext_attr>
 8014158:	4605      	mov	r5, r0
    const lv_style_t * label_style = lv_obj_get_style(ext->label);
 801415a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801415c:	f7ee fdf0 	bl	8002d40 <lv_obj_get_style>
 8014160:	4601      	mov	r1, r0
    if(ext->cursor.style) {
 8014162:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 8014164:	b12d      	cbz	r5, 8014172 <get_cursor_style+0x22>
        lv_style_copy(style_res, ext->cursor.style);
 8014166:	4629      	mov	r1, r5
 8014168:	4620      	mov	r0, r4
}
 801416a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_style_copy(style_res, ext->cursor.style);
 801416e:	f7fb bdac 	b.w	800fcca <lv_style_copy>
        lv_style_copy(style_res, label_style);
 8014172:	4620      	mov	r0, r4
 8014174:	f7fb fda9 	bl	800fcca <lv_style_copy>
        lv_color_t clv_color_tmp = style_res->text.color; /*Make letter color to cursor color*/
 8014178:	8c23      	ldrh	r3, [r4, #32]
        style_res->text.color =
 801417a:	8862      	ldrh	r2, [r4, #2]
        style_res->body.grad_color     = clv_color_tmp;
 801417c:	80a3      	strh	r3, [r4, #4]
        style_res->text.color =
 801417e:	8422      	strh	r2, [r4, #32]
        style_res->body.border.opa     = LV_OPA_COVER;
 8014180:	22ff      	movs	r2, #255	; 0xff
        style_res->body.main_color     = clv_color_tmp;
 8014182:	8063      	strh	r3, [r4, #2]
        style_res->body.border.color   = clv_color_tmp;
 8014184:	8163      	strh	r3, [r4, #10]
        style_res->body.border.width   = 1;
 8014186:	2301      	movs	r3, #1
        style_res->body.border.opa     = LV_OPA_COVER;
 8014188:	73e2      	strb	r2, [r4, #15]
        style_res->body.border.width   = 1;
 801418a:	81a3      	strh	r3, [r4, #12]
        style_res->body.shadow.width   = 0;
 801418c:	8265      	strh	r5, [r4, #18]
        style_res->body.radius         = 0;
 801418e:	80e5      	strh	r5, [r4, #6]
        style_res->body.opa            = LV_OPA_COVER;
 8014190:	7222      	strb	r2, [r4, #8]
        style_res->body.padding.top    = 0;
 8014192:	82e5      	strh	r5, [r4, #22]
        style_res->body.padding.bottom = 0;
 8014194:	61a5      	str	r5, [r4, #24]
        style_res->body.padding.right  = 0;
 8014196:	83a5      	strh	r5, [r4, #28]
        style_res->line.width          = 1;
 8014198:	86e3      	strh	r3, [r4, #54]	; 0x36
}
 801419a:	bd38      	pop	{r3, r4, r5, pc}

0801419c <lv_page_set_scrl_fit2>:
{
 801419c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801419e:	4614      	mov	r4, r2
 80141a0:	460d      	mov	r5, r1
    lv_cont_set_fit2(lv_page_get_scrl(page), hor, ver);
 80141a2:	f001 fb14 	bl	80157ce <lv_page_get_scrl>
 80141a6:	4623      	mov	r3, r4
 80141a8:	462a      	mov	r2, r5
 80141aa:	4629      	mov	r1, r5
 80141ac:	9400      	str	r4, [sp, #0]
 80141ae:	f000 fc7a 	bl	8014aa6 <lv_cont_set_fit4>
}
 80141b2:	b003      	add	sp, #12
 80141b4:	bd30      	pop	{r4, r5, pc}

080141b6 <cursor_blink_anim>:
{
 80141b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80141b8:	460d      	mov	r5, r1
 80141ba:	4606      	mov	r6, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80141bc:	f7fb fc80 	bl	800fac0 <lv_obj_get_ext_attr>
    if(show != ext->cursor.state) {
 80141c0:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80141c4:	4604      	mov	r4, r0
    if(show != ext->cursor.state) {
 80141c6:	f3c3 1200 	ubfx	r2, r3, #4, #1
 80141ca:	4295      	cmp	r5, r2
 80141cc:	d032      	beq.n	8014234 <cursor_blink_anim+0x7e>
        ext->cursor.state = show == 0 ? 0 : 1;
 80141ce:	3500      	adds	r5, #0
 80141d0:	bf18      	it	ne
 80141d2:	2501      	movne	r5, #1
 80141d4:	f365 1304 	bfi	r3, r5, #4, #1
 80141d8:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
        if(ext->cursor.type != LV_CURSOR_NONE && (ext->cursor.type & LV_CURSOR_HIDDEN) == 0) {
 80141dc:	b2db      	uxtb	r3, r3
 80141de:	071a      	lsls	r2, r3, #28
 80141e0:	d028      	beq.n	8014234 <cursor_blink_anim+0x7e>
 80141e2:	071b      	lsls	r3, r3, #28
 80141e4:	d426      	bmi.n	8014234 <cursor_blink_anim+0x7e>
            lv_disp_t * disp = lv_obj_get_disp(ta);
 80141e6:	4630      	mov	r0, r6
 80141e8:	f7ee fbe6 	bl	80029b8 <lv_obj_get_disp>
    memcpy(dest, src, sizeof(lv_area_t));
 80141ec:	2208      	movs	r2, #8
 80141ee:	4605      	mov	r5, r0
 80141f0:	f104 014e 	add.w	r1, r4, #78	; 0x4e
 80141f4:	4668      	mov	r0, sp
 80141f6:	f002 fabb 	bl	8016770 <memcpy>
            area_tmp.x1 += ext->label->coords.x1;
 80141fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80141fc:	f8bd 3000 	ldrh.w	r3, [sp]
            lv_inv_area(disp, &area_tmp);
 8014200:	4628      	mov	r0, r5
            area_tmp.x1 += ext->label->coords.x1;
 8014202:	f9b1 2010 	ldrsh.w	r2, [r1, #16]
 8014206:	4413      	add	r3, r2
 8014208:	f8ad 3000 	strh.w	r3, [sp]
            area_tmp.y1 += ext->label->coords.y1;
 801420c:	f9b1 3012 	ldrsh.w	r3, [r1, #18]
 8014210:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8014214:	4419      	add	r1, r3
 8014216:	f8ad 1002 	strh.w	r1, [sp, #2]
            area_tmp.x2 += ext->label->coords.x1;
 801421a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801421e:	440a      	add	r2, r1
            lv_inv_area(disp, &area_tmp);
 8014220:	4669      	mov	r1, sp
            area_tmp.x2 += ext->label->coords.x1;
 8014222:	f8ad 2004 	strh.w	r2, [sp, #4]
            area_tmp.y2 += ext->label->coords.y1;
 8014226:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801422a:	4413      	add	r3, r2
 801422c:	f8ad 3006 	strh.w	r3, [sp, #6]
            lv_inv_area(disp, &area_tmp);
 8014230:	f7ee fe5c 	bl	8002eec <lv_inv_area>
}
 8014234:	b002      	add	sp, #8
 8014236:	bd70      	pop	{r4, r5, r6, pc}

08014238 <lv_ta_set_text_sel>:
}
 8014238:	4770      	bx	lr

0801423a <lv_ta_get_text>:
{
 801423a:	b508      	push	{r3, lr}
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801423c:	f7fb fc40 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->pwd_mode == 0) {
 8014240:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8014244:	07db      	lsls	r3, r3, #31
 8014246:	d404      	bmi.n	8014252 <lv_ta_get_text+0x18>
        txt = lv_label_get_text(ext->label);
 8014248:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
 801424a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        txt = lv_label_get_text(ext->label);
 801424e:	f001 bdc6 	b.w	8015dde <lv_label_get_text>
}
 8014252:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8014254:	bd08      	pop	{r3, pc}

08014256 <placeholder_update>:

static void placeholder_update(lv_obj_t * ta)
{
 8014256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014258:	4606      	mov	r6, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801425a:	f7fb fc31 	bl	800fac0 <lv_obj_get_ext_attr>
    const char * ta_text;

    if(ext->placeholder == NULL) return;
 801425e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8014260:	4604      	mov	r4, r0
    if(ext->placeholder == NULL) return;
 8014262:	b343      	cbz	r3, 80142b6 <placeholder_update+0x60>

    ta_text = lv_ta_get_text(ta);
 8014264:	4630      	mov	r0, r6
 8014266:	f7ff ffe8 	bl	801423a <lv_ta_get_text>

    if(ta_text[0] == '\0') {
 801426a:	7807      	ldrb	r7, [r0, #0]
 801426c:	bb0f      	cbnz	r7, 80142b2 <placeholder_update+0x5c>
        /*Be sure the main label and the placeholder has the same coordinates*/
        lv_obj_t * scrl               = lv_page_get_scrl(ta);
 801426e:	4630      	mov	r0, r6
 8014270:	f001 faad 	bl	80157ce <lv_page_get_scrl>
        const lv_style_t * style_scrl = lv_obj_get_style(scrl);
 8014274:	f7ee fd64 	bl	8002d40 <lv_obj_get_style>
 8014278:	4605      	mov	r5, r0
        lv_obj_set_pos(ext->placeholder, style_scrl->body.padding.left, style_scrl->body.padding.top);
 801427a:	f9b0 2016 	ldrsh.w	r2, [r0, #22]
 801427e:	f9b0 101a 	ldrsh.w	r1, [r0, #26]
 8014282:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014284:	f7fb f821 	bl	800f2ca <lv_obj_set_pos>
        lv_obj_set_pos(ext->label, style_scrl->body.padding.left, style_scrl->body.padding.top);
 8014288:	f9b5 2016 	ldrsh.w	r2, [r5, #22]
 801428c:	f9b5 101a 	ldrsh.w	r1, [r5, #26]
 8014290:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8014292:	f7fb f81a 	bl	800f2ca <lv_obj_set_pos>

        lv_obj_set_width(ext->placeholder, lv_page_get_fit_width(ta));
 8014296:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8014298:	4630      	mov	r0, r6
 801429a:	f001 fac2 	bl	8015822 <lv_page_get_fit_width>
 801429e:	4601      	mov	r1, r0
 80142a0:	4628      	mov	r0, r5
 80142a2:	f7fb fa7d 	bl	800f7a0 <lv_obj_set_width>
        lv_obj_set_hidden(ext->placeholder, false);
 80142a6:	4639      	mov	r1, r7
    } else {
        lv_obj_set_hidden(ext->placeholder, true);
 80142a8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    }
}
 80142aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_obj_set_hidden(ext->placeholder, true);
 80142ae:	f7fb ba94 	b.w	800f7da <lv_obj_set_hidden>
 80142b2:	2101      	movs	r1, #1
 80142b4:	e7f8      	b.n	80142a8 <placeholder_update+0x52>
}
 80142b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080142b8 <lv_ta_get_cursor_pos>:
{
 80142b8:	b508      	push	{r3, lr}
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80142ba:	f7fb fc01 	bl	800fac0 <lv_obj_get_ext_attr>
}
 80142be:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
 80142c2:	bd08      	pop	{r3, pc}

080142c4 <update_cursor_position_on_click>:

static void update_cursor_position_on_click(lv_obj_t * ta, lv_signal_t sign, lv_indev_t * click_source)
{
 80142c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142c6:	4606      	mov	r6, r0
 80142c8:	b087      	sub	sp, #28
 80142ca:	460f      	mov	r7, r1

    if(click_source == NULL) return;
 80142cc:	4614      	mov	r4, r2
 80142ce:	2a00      	cmp	r2, #0
 80142d0:	d043      	beq.n	801435a <update_cursor_position_on_click+0x96>

    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80142d2:	f7fb fbf5 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->cursor.click_pos == 0) return;
 80142d6:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80142da:	4605      	mov	r5, r0
    if(ext->cursor.click_pos == 0) return;
 80142dc:	069a      	lsls	r2, r3, #26
 80142de:	d53c      	bpl.n	801435a <update_cursor_position_on_click+0x96>
    if(ext->cursor.type == LV_CURSOR_NONE) return;
 80142e0:	071b      	lsls	r3, r3, #28
 80142e2:	d03a      	beq.n	801435a <update_cursor_position_on_click+0x96>

    if(lv_indev_get_type(click_source) == LV_INDEV_TYPE_KEYPAD ||
 80142e4:	4620      	mov	r0, r4
 80142e6:	f7fa fe79 	bl	800efdc <lv_indev_get_type>
 80142ea:	2802      	cmp	r0, #2
 80142ec:	d035      	beq.n	801435a <update_cursor_position_on_click+0x96>
       lv_indev_get_type(click_source) == LV_INDEV_TYPE_ENCODER) {
 80142ee:	4620      	mov	r0, r4
 80142f0:	f7fa fe74 	bl	800efdc <lv_indev_get_type>
    if(lv_indev_get_type(click_source) == LV_INDEV_TYPE_KEYPAD ||
 80142f4:	2804      	cmp	r0, #4
 80142f6:	d030      	beq.n	801435a <update_cursor_position_on_click+0x96>
        return;
    }

    lv_area_t label_coords;
    lv_obj_get_coords(ext->label, &label_coords);
 80142f8:	a904      	add	r1, sp, #16
 80142fa:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80142fc:	f7fb fb32 	bl	800f964 <lv_obj_get_coords>

    lv_point_t point_act, vect_act;
    lv_indev_get_point(click_source, &point_act);
 8014300:	a901      	add	r1, sp, #4
 8014302:	4620      	mov	r0, r4
 8014304:	f7fa fe86 	bl	800f014 <lv_indev_get_point>
    lv_indev_get_vect(click_source, &vect_act);
 8014308:	a902      	add	r1, sp, #8
 801430a:	4620      	mov	r0, r4
 801430c:	f7fa fe9f 	bl	800f04e <lv_indev_get_vect>

    if(point_act.x < 0 || point_act.y < 0) return; /*Ignore event from keypad*/
 8014310:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8014314:	2a00      	cmp	r2, #0
 8014316:	db20      	blt.n	801435a <update_cursor_position_on_click+0x96>
 8014318:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801431c:	2b00      	cmp	r3, #0
 801431e:	db1c      	blt.n	801435a <update_cursor_position_on_click+0x96>
    lv_point_t relative_position;
    relative_position.x = point_act.x - label_coords.x1;
 8014320:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    relative_position.y = point_act.y - label_coords.y1;

    lv_coord_t label_width = lv_obj_get_width(ext->label);
 8014324:	6b28      	ldr	r0, [r5, #48]	; 0x30
    relative_position.x = point_act.x - label_coords.x1;
 8014326:	1a52      	subs	r2, r2, r1
 8014328:	f8ad 200c 	strh.w	r2, [sp, #12]
    relative_position.y = point_act.y - label_coords.y1;
 801432c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8014330:	1a9b      	subs	r3, r3, r2
 8014332:	f8ad 300e 	strh.w	r3, [sp, #14]
    lv_coord_t label_width = lv_obj_get_width(ext->label);
 8014336:	f7fb fb28 	bl	800f98a <lv_obj_get_width>
            ext->text_sel_in_prog = 0;
        }
    }
#else
    /*Check if the click happened on the left side of the area outside the label*/
    if(relative_position.x < 0) {
 801433a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801433e:	2b00      	cmp	r3, #0
 8014340:	db0d      	blt.n	801435e <update_cursor_position_on_click+0x9a>
        index_of_char_at_position = 0;
    }
    /*Check if the click happened on the right side of the area outside the label*/
    else if(relative_position.x >= label_width) {
 8014342:	4283      	cmp	r3, r0
 8014344:	da0d      	bge.n	8014362 <update_cursor_position_on_click+0x9e>
        index_of_char_at_position = LV_TA_CURSOR_LAST;
    } else {
        index_of_char_at_position = lv_label_get_letter_on(ext->label, &relative_position);
 8014346:	a903      	add	r1, sp, #12
 8014348:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801434a:	f7f6 fd85 	bl	800ae58 <lv_label_get_letter_on>
    }

    if(sign == LV_SIGNAL_PRESSED) lv_ta_set_cursor_pos(ta, index_of_char_at_position);
 801434e:	2f07      	cmp	r7, #7
 8014350:	d103      	bne.n	801435a <update_cursor_position_on_click+0x96>
 8014352:	b201      	sxth	r1, r0
 8014354:	4630      	mov	r0, r6
 8014356:	f7f1 fca7 	bl	8005ca8 <lv_ta_set_cursor_pos>
#endif
}
 801435a:	b007      	add	sp, #28
 801435c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        index_of_char_at_position = 0;
 801435e:	2000      	movs	r0, #0
 8014360:	e7f5      	b.n	801434e <update_cursor_position_on_click+0x8a>
        index_of_char_at_position = LV_TA_CURSOR_LAST;
 8014362:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8014366:	e7f2      	b.n	801434e <update_cursor_position_on_click+0x8a>

08014368 <lv_ta_set_cursor_type>:
{
 8014368:	b538      	push	{r3, r4, r5, lr}
 801436a:	460c      	mov	r4, r1
 801436c:	4605      	mov	r5, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801436e:	f7fb fba7 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->cursor.type == cur_type) return;
 8014372:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8014376:	f003 020f 	and.w	r2, r3, #15
 801437a:	42a2      	cmp	r2, r4
 801437c:	d008      	beq.n	8014390 <lv_ta_set_cursor_type+0x28>
    ext->cursor.type = cur_type;
 801437e:	f364 0303 	bfi	r3, r4, #0, #4
 8014382:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
    refr_cursor_area(ta);
 8014386:	4628      	mov	r0, r5
}
 8014388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    refr_cursor_area(ta);
 801438c:	f7f1 bb40 	b.w	8005a10 <refr_cursor_area>
}
 8014390:	bd38      	pop	{r3, r4, r5, pc}

08014392 <lv_ta_set_one_line>:
{
 8014392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014396:	460e      	mov	r6, r1
 8014398:	4604      	mov	r4, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801439a:	f7fb fb91 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->one_line == en) return;
 801439e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80143a2:	4605      	mov	r5, r0
    if(ext->one_line == en) return;
 80143a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80143a8:	42b3      	cmp	r3, r6
 80143aa:	d066      	beq.n	801447a <lv_ta_set_one_line+0xe8>
        const lv_style_t * style_ta    = lv_obj_get_style(ta);
 80143ac:	4620      	mov	r0, r4
    if(en) {
 80143ae:	2e00      	cmp	r6, #0
 80143b0:	d040      	beq.n	8014434 <lv_ta_set_one_line+0xa2>
        const lv_style_t * style_ta    = lv_obj_get_style(ta);
 80143b2:	f7ee fcc5 	bl	8002d40 <lv_obj_get_style>
 80143b6:	4606      	mov	r6, r0
        const lv_style_t * style_scrl  = lv_obj_get_style(lv_page_get_scrl(ta));
 80143b8:	4620      	mov	r0, r4
 80143ba:	f001 fa08 	bl	80157ce <lv_page_get_scrl>
 80143be:	f7ee fcbf 	bl	8002d40 <lv_obj_get_style>
 80143c2:	4680      	mov	r8, r0
        const lv_style_t * style_label = lv_obj_get_style(ext->label);
 80143c4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80143c6:	f7ee fcbb 	bl	8002d40 <lv_obj_get_style>
        lv_coord_t font_h              = lv_font_get_line_height(style_label->text.font);
 80143ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
        lv_page_set_scrl_fit2(ta, LV_FIT_TIGHT, LV_FIT_FLOOD);
 80143cc:	2202      	movs	r2, #2
 80143ce:	2101      	movs	r1, #1
        lv_coord_t font_h              = lv_font_get_line_height(style_label->text.font);
 80143d0:	7a1f      	ldrb	r7, [r3, #8]
        lv_page_set_scrl_fit2(ta, LV_FIT_TIGHT, LV_FIT_FLOOD);
 80143d2:	4620      	mov	r0, r4
        ext->one_line = 1;
 80143d4:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
 80143d8:	f043 0302 	orr.w	r3, r3, #2
 80143dc:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        lv_page_set_scrl_fit2(ta, LV_FIT_TIGHT, LV_FIT_FLOOD);
 80143e0:	f7ff fedc 	bl	801419c <lv_page_set_scrl_fit2>
        lv_obj_set_height(ta, font_h + style_ta->body.padding.top + style_ta->body.padding.bottom +
 80143e4:	8b33      	ldrh	r3, [r6, #24]
 80143e6:	8af1      	ldrh	r1, [r6, #22]
 80143e8:	4620      	mov	r0, r4
 80143ea:	4419      	add	r1, r3
 80143ec:	f8b8 3016 	ldrh.w	r3, [r8, #22]
 80143f0:	4419      	add	r1, r3
 80143f2:	f8b8 3018 	ldrh.w	r3, [r8, #24]
 80143f6:	4419      	add	r1, r3
 80143f8:	4439      	add	r1, r7
 80143fa:	b209      	sxth	r1, r1
 80143fc:	f7fb f9d7 	bl	800f7ae <lv_obj_set_height>
        lv_label_set_long_mode(ext->label, LV_LABEL_LONG_EXPAND);
 8014400:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8014402:	2100      	movs	r1, #0
 8014404:	f7f7 f82e 	bl	800b464 <lv_label_set_long_mode>
        if(ext->placeholder) lv_label_set_long_mode(ext->placeholder, LV_LABEL_LONG_EXPAND);
 8014408:	6b68      	ldr	r0, [r5, #52]	; 0x34
 801440a:	b110      	cbz	r0, 8014412 <lv_ta_set_one_line+0x80>
 801440c:	2100      	movs	r1, #0
 801440e:	f7f7 f829 	bl	800b464 <lv_label_set_long_mode>
        lv_obj_set_pos(lv_page_get_scrl(ta), style_ta->body.padding.left, style_ta->body.padding.top);
 8014412:	4620      	mov	r0, r4
 8014414:	f001 f9db 	bl	80157ce <lv_page_get_scrl>
 8014418:	f9b6 2016 	ldrsh.w	r2, [r6, #22]
 801441c:	f9b6 101a 	ldrsh.w	r1, [r6, #26]
        lv_obj_set_pos(lv_page_get_scrl(ta), style_ta->body.padding.left, style_ta->body.padding.top);
 8014420:	f7fa ff53 	bl	800f2ca <lv_obj_set_pos>
    placeholder_update(ta);
 8014424:	4620      	mov	r0, r4
 8014426:	f7ff ff16 	bl	8014256 <placeholder_update>
    refr_cursor_area(ta);
 801442a:	4620      	mov	r0, r4
}
 801442c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    refr_cursor_area(ta);
 8014430:	f7f1 baee 	b.w	8005a10 <refr_cursor_area>
        const lv_style_t * style_ta = lv_obj_get_style(ta);
 8014434:	f7ee fc84 	bl	8002d40 <lv_obj_get_style>
        ext->one_line = 0;
 8014438:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
        lv_page_set_scrl_fit2(ta, LV_FIT_FLOOD, LV_FIT_TIGHT);
 801443c:	2201      	movs	r2, #1
 801443e:	2102      	movs	r1, #2
        ext->one_line = 0;
 8014440:	f366 0341 	bfi	r3, r6, #1, #1
        const lv_style_t * style_ta = lv_obj_get_style(ta);
 8014444:	4607      	mov	r7, r0
        lv_page_set_scrl_fit2(ta, LV_FIT_FLOOD, LV_FIT_TIGHT);
 8014446:	4620      	mov	r0, r4
        ext->one_line = 0;
 8014448:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        lv_page_set_scrl_fit2(ta, LV_FIT_FLOOD, LV_FIT_TIGHT);
 801444c:	f7ff fea6 	bl	801419c <lv_page_set_scrl_fit2>
        lv_label_set_long_mode(ext->label, LV_LABEL_LONG_BREAK);
 8014450:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8014452:	2101      	movs	r1, #1
 8014454:	f7f7 f806 	bl	800b464 <lv_label_set_long_mode>
        if(ext->placeholder) lv_label_set_long_mode(ext->placeholder, LV_LABEL_LONG_BREAK);
 8014458:	6b68      	ldr	r0, [r5, #52]	; 0x34
 801445a:	b110      	cbz	r0, 8014462 <lv_ta_set_one_line+0xd0>
 801445c:	2101      	movs	r1, #1
 801445e:	f7f7 f801 	bl	800b464 <lv_label_set_long_mode>
        lv_obj_set_height(ta, LV_TA_DEF_HEIGHT);
 8014462:	2164      	movs	r1, #100	; 0x64
 8014464:	4620      	mov	r0, r4
 8014466:	f7fb f9a2 	bl	800f7ae <lv_obj_set_height>
        lv_obj_set_pos(lv_page_get_scrl(ta), style_ta->body.padding.left, style_ta->body.padding.top);
 801446a:	4620      	mov	r0, r4
 801446c:	f001 f9af 	bl	80157ce <lv_page_get_scrl>
 8014470:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014474:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8014478:	e7d2      	b.n	8014420 <lv_ta_set_one_line+0x8e>
}
 801447a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801447e <lv_ta_set_style>:
{
 801447e:	b570      	push	{r4, r5, r6, lr}
 8014480:	460e      	mov	r6, r1
 8014482:	4605      	mov	r5, r0
 8014484:	4614      	mov	r4, r2
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8014486:	f7fb fb1b 	bl	800fac0 <lv_obj_get_ext_attr>
    switch(type) {
 801448a:	2e04      	cmp	r6, #4
 801448c:	d823      	bhi.n	80144d6 <lv_ta_set_style+0x58>
 801448e:	e8df f006 	tbb	[pc, r6]
 8014492:	0a03      	.short	0x0a03
 8014494:	0d10      	.short	0x0d10
 8014496:	1b          	.byte	0x1b
 8014497:	00          	.byte	0x00
        case LV_TA_STYLE_BG: lv_page_set_style(ta, LV_PAGE_STYLE_BG, style); break;
 8014498:	4622      	mov	r2, r4
 801449a:	2100      	movs	r1, #0
        case LV_TA_STYLE_SB: lv_page_set_style(ta, LV_PAGE_STYLE_SB, style); break;
 801449c:	4628      	mov	r0, r5
}
 801449e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case LV_TA_STYLE_SB: lv_page_set_style(ta, LV_PAGE_STYLE_SB, style); break;
 80144a2:	f001 b964 	b.w	801576e <lv_page_set_style>
 80144a6:	4622      	mov	r2, r4
 80144a8:	2102      	movs	r1, #2
 80144aa:	e7f7      	b.n	801449c <lv_ta_set_style+0x1e>
        case LV_TA_STYLE_EDGE_FLASH: lv_page_set_style(ta, LV_PAGE_STYLE_EDGE_FLASH, style); break;
 80144ac:	4622      	mov	r2, r4
 80144ae:	2103      	movs	r1, #3
 80144b0:	e7f4      	b.n	801449c <lv_ta_set_style+0x1e>
            ext->cursor.style = style;
 80144b2:	6444      	str	r4, [r0, #68]	; 0x44
            lv_obj_refresh_ext_draw_pad(lv_page_get_scrl(ta)); /*Refresh ext. size because of cursor drawing*/
 80144b4:	4628      	mov	r0, r5
 80144b6:	f001 f98a 	bl	80157ce <lv_page_get_scrl>
 80144ba:	f7fb f9a9 	bl	800f810 <lv_obj_refresh_ext_draw_pad>
            refr_cursor_area(ta);
 80144be:	4628      	mov	r0, r5
}
 80144c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            refr_cursor_area(ta);
 80144c4:	f7f1 baa4 	b.w	8005a10 <refr_cursor_area>
            if(ext->placeholder) lv_label_set_style(ext->placeholder, LV_LABEL_STYLE_MAIN, style);
 80144c8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80144ca:	b120      	cbz	r0, 80144d6 <lv_ta_set_style+0x58>
 80144cc:	4621      	mov	r1, r4
}
 80144ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80144d2:	f7fb ba37 	b.w	800f944 <lv_obj_set_style>
 80144d6:	bd70      	pop	{r4, r5, r6, pc}

080144d8 <lv_ta_get_cursor_type>:
{
 80144d8:	b508      	push	{r3, lr}
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80144da:	f7fb faf1 	bl	800fac0 <lv_obj_get_ext_attr>
    return ext->cursor.type;
 80144de:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
}
 80144e2:	f000 000f 	and.w	r0, r0, #15
 80144e6:	bd08      	pop	{r3, pc}

080144e8 <lv_ta_get_accepted_chars>:
{
 80144e8:	b508      	push	{r3, lr}
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80144ea:	f7fb fae9 	bl	800fac0 <lv_obj_get_ext_attr>
}
 80144ee:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80144f0:	bd08      	pop	{r3, pc}

080144f2 <lv_ta_get_max_length>:
{
 80144f2:	b508      	push	{r3, lr}
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80144f4:	f7fb fae4 	bl	800fac0 <lv_obj_get_ext_attr>
}
 80144f8:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
 80144fc:	bd08      	pop	{r3, pc}

080144fe <lv_ta_del_char_forward>:
{
 80144fe:	b538      	push	{r3, r4, r5, lr}
 8014500:	4604      	mov	r4, r0
    uint16_t cp = lv_ta_get_cursor_pos(ta);
 8014502:	f7ff fed9 	bl	80142b8 <lv_ta_get_cursor_pos>
    lv_ta_set_cursor_pos(ta, cp + 1);
 8014506:	1c41      	adds	r1, r0, #1
    uint16_t cp = lv_ta_get_cursor_pos(ta);
 8014508:	4605      	mov	r5, r0
    lv_ta_set_cursor_pos(ta, cp + 1);
 801450a:	4620      	mov	r0, r4
 801450c:	b209      	sxth	r1, r1
 801450e:	f7f1 fbcb 	bl	8005ca8 <lv_ta_set_cursor_pos>
    if(cp != lv_ta_get_cursor_pos(ta)) lv_ta_del_char(ta);
 8014512:	4620      	mov	r0, r4
 8014514:	f7ff fed0 	bl	80142b8 <lv_ta_get_cursor_pos>
 8014518:	42a8      	cmp	r0, r5
 801451a:	d004      	beq.n	8014526 <lv_ta_del_char_forward+0x28>
 801451c:	4620      	mov	r0, r4
}
 801451e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if(cp != lv_ta_get_cursor_pos(ta)) lv_ta_del_char(ta);
 8014522:	f7f1 bf8d 	b.w	8006440 <lv_ta_del_char>
}
 8014526:	bd38      	pop	{r3, r4, r5, pc}

08014528 <lv_ta_cursor_right>:
{
 8014528:	b510      	push	{r4, lr}
 801452a:	4604      	mov	r4, r0
    uint16_t cp = lv_ta_get_cursor_pos(ta);
 801452c:	f7ff fec4 	bl	80142b8 <lv_ta_get_cursor_pos>
    cp++;
 8014530:	1c41      	adds	r1, r0, #1
    lv_ta_set_cursor_pos(ta, cp);
 8014532:	4620      	mov	r0, r4
 8014534:	b209      	sxth	r1, r1
}
 8014536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_ta_set_cursor_pos(ta, cp);
 801453a:	f7f1 bbb5 	b.w	8005ca8 <lv_ta_set_cursor_pos>

0801453e <lv_ta_cursor_left>:
{
 801453e:	b510      	push	{r4, lr}
 8014540:	4604      	mov	r4, r0
    uint16_t cp = lv_ta_get_cursor_pos(ta);
 8014542:	f7ff feb9 	bl	80142b8 <lv_ta_get_cursor_pos>
    if(cp > 0) {
 8014546:	b130      	cbz	r0, 8014556 <lv_ta_cursor_left+0x18>
        cp--;
 8014548:	1e41      	subs	r1, r0, #1
        lv_ta_set_cursor_pos(ta, cp);
 801454a:	4620      	mov	r0, r4
 801454c:	b209      	sxth	r1, r1
}
 801454e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_ta_set_cursor_pos(ta, cp);
 8014552:	f7f1 bba9 	b.w	8005ca8 <lv_ta_set_cursor_pos>
}
 8014556:	bd10      	pop	{r4, pc}

08014558 <lv_ta_cursor_down>:
{
 8014558:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801455a:	4606      	mov	r6, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801455c:	f7fb fab0 	bl	800fac0 <lv_obj_get_ext_attr>
    lv_label_get_letter_pos(ext->label, lv_ta_get_cursor_pos(ta), &pos);
 8014560:	6b05      	ldr	r5, [r0, #48]	; 0x30
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8014562:	4604      	mov	r4, r0
    lv_label_get_letter_pos(ext->label, lv_ta_get_cursor_pos(ta), &pos);
 8014564:	4630      	mov	r0, r6
 8014566:	f7ff fea7 	bl	80142b8 <lv_ta_get_cursor_pos>
 801456a:	aa01      	add	r2, sp, #4
 801456c:	4601      	mov	r1, r0
 801456e:	4628      	mov	r0, r5
 8014570:	f7f6 fbb4 	bl	800acdc <lv_label_get_letter_pos>
    const lv_style_t * label_style = lv_obj_get_style(ext->label);
 8014574:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8014576:	f7ee fbe3 	bl	8002d40 <lv_obj_get_style>
    pos.y += font_h + label_style->text.line_space + 1;
 801457a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801457e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    lv_coord_t font_h              = lv_font_get_line_height(font_p);
 8014580:	6a42      	ldr	r2, [r0, #36]	; 0x24
    pos.y += font_h + label_style->text.line_space + 1;
 8014582:	3501      	adds	r5, #1
    if(pos.y < lv_obj_get_height(ext->label)) {
 8014584:	6b20      	ldr	r0, [r4, #48]	; 0x30
    pos.y += font_h + label_style->text.line_space + 1;
 8014586:	442b      	add	r3, r5
    lv_coord_t font_h              = lv_font_get_line_height(font_p);
 8014588:	7a15      	ldrb	r5, [r2, #8]
    pos.y += font_h + label_style->text.line_space + 1;
 801458a:	441d      	add	r5, r3
    pos.x = ext->cursor.valid_x;
 801458c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    pos.y += font_h + label_style->text.line_space + 1;
 8014590:	b22d      	sxth	r5, r5
    pos.x = ext->cursor.valid_x;
 8014592:	f8ad 3004 	strh.w	r3, [sp, #4]
    pos.y += font_h + label_style->text.line_space + 1;
 8014596:	f8ad 5006 	strh.w	r5, [sp, #6]
    if(pos.y < lv_obj_get_height(ext->label)) {
 801459a:	f7fb f9fc 	bl	800f996 <lv_obj_get_height>
 801459e:	4285      	cmp	r5, r0
 80145a0:	da0b      	bge.n	80145ba <lv_ta_cursor_down+0x62>
        uint16_t new_cur_pos = lv_label_get_letter_on(ext->label, &pos);
 80145a2:	a901      	add	r1, sp, #4
 80145a4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80145a6:	f7f6 fc57 	bl	800ae58 <lv_label_get_letter_on>
        lv_coord_t cur_valid_x_tmp = ext->cursor.valid_x; /*Cursor position set overwrites the valid positon */
 80145aa:	f9b4 5048 	ldrsh.w	r5, [r4, #72]	; 0x48
        lv_ta_set_cursor_pos(ta, new_cur_pos);
 80145ae:	b201      	sxth	r1, r0
 80145b0:	4630      	mov	r0, r6
 80145b2:	f7f1 fb79 	bl	8005ca8 <lv_ta_set_cursor_pos>
        ext->cursor.valid_x = cur_valid_x_tmp;
 80145b6:	f8a4 5048 	strh.w	r5, [r4, #72]	; 0x48
}
 80145ba:	b002      	add	sp, #8
 80145bc:	bd70      	pop	{r4, r5, r6, pc}

080145be <lv_ta_cursor_up>:
{
 80145be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80145c0:	4605      	mov	r5, r0
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80145c2:	f7fb fa7d 	bl	800fac0 <lv_obj_get_ext_attr>
    lv_label_get_letter_pos(ext->label, lv_ta_get_cursor_pos(ta), &pos);
 80145c6:	6b06      	ldr	r6, [r0, #48]	; 0x30
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80145c8:	4604      	mov	r4, r0
    lv_label_get_letter_pos(ext->label, lv_ta_get_cursor_pos(ta), &pos);
 80145ca:	4628      	mov	r0, r5
 80145cc:	f7ff fe74 	bl	80142b8 <lv_ta_get_cursor_pos>
 80145d0:	aa01      	add	r2, sp, #4
 80145d2:	4601      	mov	r1, r0
 80145d4:	4630      	mov	r0, r6
 80145d6:	f7f6 fb81 	bl	800acdc <lv_label_get_letter_pos>
    const lv_style_t * label_style = lv_obj_get_style(ext->label);
 80145da:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80145dc:	f7ee fbb0 	bl	8002d40 <lv_obj_get_style>
    pos.y -= font_h + label_style->text.line_space - 1;
 80145e0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80145e4:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    uint16_t new_cur_pos       = lv_label_get_letter_on(ext->label, &pos);
 80145e6:	a901      	add	r1, sp, #4
    pos.y -= font_h + label_style->text.line_space - 1;
 80145e8:	3301      	adds	r3, #1
 80145ea:	1a9b      	subs	r3, r3, r2
    lv_coord_t font_h              = lv_font_get_line_height(font);
 80145ec:	6a42      	ldr	r2, [r0, #36]	; 0x24
    uint16_t new_cur_pos       = lv_label_get_letter_on(ext->label, &pos);
 80145ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
    lv_coord_t font_h              = lv_font_get_line_height(font);
 80145f0:	7a12      	ldrb	r2, [r2, #8]
    pos.y -= font_h + label_style->text.line_space - 1;
 80145f2:	1a9b      	subs	r3, r3, r2
 80145f4:	f8ad 3006 	strh.w	r3, [sp, #6]
    pos.x = ext->cursor.valid_x;
 80145f8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80145fc:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint16_t new_cur_pos       = lv_label_get_letter_on(ext->label, &pos);
 8014600:	f7f6 fc2a 	bl	800ae58 <lv_label_get_letter_on>
    lv_coord_t cur_valid_x_tmp = ext->cursor.valid_x; /*Cursor position set overwrites the valid positon */
 8014604:	f9b4 6048 	ldrsh.w	r6, [r4, #72]	; 0x48
    lv_ta_set_cursor_pos(ta, new_cur_pos);
 8014608:	b201      	sxth	r1, r0
 801460a:	4628      	mov	r0, r5
 801460c:	f7f1 fb4c 	bl	8005ca8 <lv_ta_set_cursor_pos>
    ext->cursor.valid_x = cur_valid_x_tmp;
 8014610:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
}
 8014614:	b002      	add	sp, #8
 8014616:	bd70      	pop	{r4, r5, r6, pc}

08014618 <lv_bar_anim>:

#if LV_USE_ANIMATION
static void lv_bar_anim(void * bar, lv_anim_value_t value)
{
 8014618:	b538      	push	{r3, r4, r5, lr}
 801461a:	4604      	mov	r4, r0
 801461c:	460d      	mov	r5, r1
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 801461e:	f7fb fa4f 	bl	800fac0 <lv_obj_get_ext_attr>
    ext->anim_state    = value;
 8014622:	8145      	strh	r5, [r0, #10]
    lv_obj_invalidate(bar);
 8014624:	4620      	mov	r0, r4
}
 8014626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(bar);
 801462a:	f7fa bde1 	b.w	800f1f0 <lv_obj_invalidate>

0801462e <lv_bar_anim_ready>:

static void lv_bar_anim_ready(lv_anim_t * a)
{
 801462e:	b510      	push	{r4, lr}
 8014630:	4604      	mov	r4, r0
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(a->var);
 8014632:	6800      	ldr	r0, [r0, #0]
 8014634:	f7fb fa44 	bl	800fac0 <lv_obj_get_ext_attr>
    ext->anim_state    = LV_BAR_ANIM_STATE_INV;
 8014638:	f64f 73ff 	movw	r3, #65535	; 0xffff
    lv_bar_set_value(a->var, ext->anim_end, false);
 801463c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8014640:	2200      	movs	r2, #0
    ext->anim_state    = LV_BAR_ANIM_STATE_INV;
 8014642:	8143      	strh	r3, [r0, #10]
    lv_bar_set_value(a->var, ext->anim_end, false);
 8014644:	6820      	ldr	r0, [r4, #0]
}
 8014646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_bar_set_value(a->var, ext->anim_end, false);
 801464a:	f7f2 b98f 	b.w	800696c <lv_bar_set_value>

0801464e <lv_bar_set_range>:
{
 801464e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014650:	460d      	mov	r5, r1
 8014652:	4607      	mov	r7, r0
 8014654:	4616      	mov	r6, r2
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8014656:	f7fb fa33 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->min_value == min && ext->max_value == max) return;
 801465a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 801465e:	4604      	mov	r4, r0
    if(ext->min_value == min && ext->max_value == max) return;
 8014660:	42ab      	cmp	r3, r5
 8014662:	d103      	bne.n	801466c <lv_bar_set_range+0x1e>
 8014664:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014668:	42b3      	cmp	r3, r6
 801466a:	d01a      	beq.n	80146a2 <lv_bar_set_range+0x54>
    if(ext->cur_value > max) {
 801466c:	f9b4 3000 	ldrsh.w	r3, [r4]
    ext->max_value = max;
 8014670:	80a6      	strh	r6, [r4, #4]
    if(ext->cur_value > max) {
 8014672:	42b3      	cmp	r3, r6
    ext->min_value = min;
 8014674:	8065      	strh	r5, [r4, #2]
    if(ext->cur_value > max) {
 8014676:	dd05      	ble.n	8014684 <lv_bar_set_range+0x36>
        ext->cur_value = max;
 8014678:	8026      	strh	r6, [r4, #0]
        lv_bar_set_value(bar, ext->cur_value, false);
 801467a:	2200      	movs	r2, #0
 801467c:	4631      	mov	r1, r6
 801467e:	4638      	mov	r0, r7
 8014680:	f7f2 f974 	bl	800696c <lv_bar_set_value>
    if(ext->cur_value < min) {
 8014684:	f9b4 3000 	ldrsh.w	r3, [r4]
 8014688:	42ab      	cmp	r3, r5
 801468a:	da05      	bge.n	8014698 <lv_bar_set_range+0x4a>
        ext->cur_value = min;
 801468c:	8025      	strh	r5, [r4, #0]
        lv_bar_set_value(bar, ext->cur_value, false);
 801468e:	2200      	movs	r2, #0
 8014690:	4629      	mov	r1, r5
 8014692:	4638      	mov	r0, r7
 8014694:	f7f2 f96a 	bl	800696c <lv_bar_set_value>
    lv_obj_invalidate(bar);
 8014698:	4638      	mov	r0, r7
}
 801469a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_obj_invalidate(bar);
 801469e:	f7fa bda7 	b.w	800f1f0 <lv_obj_invalidate>
}
 80146a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080146a4 <lv_bar_set_style>:
{
 80146a4:	b570      	push	{r4, r5, r6, lr}
 80146a6:	460e      	mov	r6, r1
 80146a8:	4604      	mov	r4, r0
 80146aa:	4615      	mov	r5, r2
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80146ac:	f7fb fa08 	bl	800fac0 <lv_obj_get_ext_attr>
    switch(type) {
 80146b0:	b116      	cbz	r6, 80146b8 <lv_bar_set_style+0x14>
 80146b2:	2e01      	cmp	r6, #1
 80146b4:	d006      	beq.n	80146c4 <lv_bar_set_style+0x20>
}
 80146b6:	bd70      	pop	{r4, r5, r6, pc}
        case LV_BAR_STYLE_BG: lv_obj_set_style(bar, style); break;
 80146b8:	4629      	mov	r1, r5
 80146ba:	4620      	mov	r0, r4
}
 80146bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case LV_BAR_STYLE_BG: lv_obj_set_style(bar, style); break;
 80146c0:	f7fb b940 	b.w	800f944 <lv_obj_set_style>
            ext->style_indic = style;
 80146c4:	6105      	str	r5, [r0, #16]
            lv_obj_refresh_ext_draw_pad(bar);
 80146c6:	4620      	mov	r0, r4
}
 80146c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_refresh_ext_draw_pad(bar);
 80146cc:	f7fb b8a0 	b.w	800f810 <lv_obj_refresh_ext_draw_pad>

080146d0 <lv_bar_get_value>:
{
 80146d0:	b508      	push	{r3, lr}
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80146d2:	f7fb f9f5 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->anim_state != LV_BAR_ANIM_STATE_INV) return ext->anim_end;
 80146d6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80146da:	3301      	adds	r3, #1
 80146dc:	bf14      	ite	ne
 80146de:	f9b0 0008 	ldrshne.w	r0, [r0, #8]
    return ext->cur_value;
 80146e2:	f9b0 0000 	ldrsheq.w	r0, [r0]
}
 80146e6:	bd08      	pop	{r3, pc}

080146e8 <lv_bar_get_min_value>:
{
 80146e8:	b508      	push	{r3, lr}
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80146ea:	f7fb f9e9 	bl	800fac0 <lv_obj_get_ext_attr>
}
 80146ee:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 80146f2:	bd08      	pop	{r3, pc}

080146f4 <lv_bar_get_max_value>:
{
 80146f4:	b508      	push	{r3, lr}
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80146f6:	f7fb f9e3 	bl	800fac0 <lv_obj_get_ext_attr>
}
 80146fa:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80146fe:	bd08      	pop	{r3, pc}

08014700 <lv_bar_get_style>:
{
 8014700:	b538      	push	{r3, r4, r5, lr}
 8014702:	460c      	mov	r4, r1
 8014704:	4605      	mov	r5, r0
    lv_bar_ext_t * ext       = lv_obj_get_ext_attr(bar);
 8014706:	f7fb f9db 	bl	800fac0 <lv_obj_get_ext_attr>
    switch(type) {
 801470a:	b11c      	cbz	r4, 8014714 <lv_bar_get_style+0x14>
 801470c:	2c01      	cmp	r4, #1
 801470e:	d006      	beq.n	801471e <lv_bar_get_style+0x1e>
        default: style = NULL; break;
 8014710:	2000      	movs	r0, #0
}
 8014712:	bd38      	pop	{r3, r4, r5, pc}
        case LV_BAR_STYLE_BG: style = lv_obj_get_style(bar); break;
 8014714:	4628      	mov	r0, r5
}
 8014716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        case LV_BAR_STYLE_BG: style = lv_obj_get_style(bar); break;
 801471a:	f7ee bb11 	b.w	8002d40 <lv_obj_get_style>
        case LV_BAR_STYLE_INDIC: style = ext->style_indic; break;
 801471e:	6900      	ldr	r0, [r0, #16]
    return style;
 8014720:	e7f7      	b.n	8014712 <lv_bar_get_style+0x12>

08014722 <lv_btn_set_state>:
{
 8014722:	b538      	push	{r3, r4, r5, lr}
 8014724:	460c      	mov	r4, r1
 8014726:	4605      	mov	r5, r0
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014728:	f7fb f9ca 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->state != state) {
 801472c:	7f83      	ldrb	r3, [r0, #30]
 801472e:	f003 0207 	and.w	r2, r3, #7
 8014732:	42a2      	cmp	r2, r4
 8014734:	d00a      	beq.n	801474c <lv_btn_set_state+0x2a>
        ext->state = state;
 8014736:	f364 0302 	bfi	r3, r4, #0, #3
 801473a:	7783      	strb	r3, [r0, #30]
        lv_obj_set_style(btn, ext->styles[state]);
 801473c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8014740:	6841      	ldr	r1, [r0, #4]
 8014742:	4628      	mov	r0, r5
}
 8014744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_set_style(btn, ext->styles[state]);
 8014748:	f7fb b8fc 	b.w	800f944 <lv_obj_set_style>
}
 801474c:	bd38      	pop	{r3, r4, r5, pc}

0801474e <lv_btn_set_style>:
{
 801474e:	b570      	push	{r4, r5, r6, lr}
 8014750:	460d      	mov	r5, r1
 8014752:	4606      	mov	r6, r0
 8014754:	4614      	mov	r4, r2
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014756:	f7fb f9b3 	bl	800fac0 <lv_obj_get_ext_attr>
    switch(type) {
 801475a:	2d04      	cmp	r5, #4
 801475c:	d805      	bhi.n	801476a <lv_btn_set_style+0x1c>
 801475e:	e8df f005 	tbb	[pc, r5]
 8014762:	0f03      	.short	0x0f03
 8014764:	1311      	.short	0x1311
 8014766:	15          	.byte	0x15
 8014767:	00          	.byte	0x00
        case LV_BTN_STYLE_REL: ext->styles[LV_BTN_STATE_REL] = style; break;
 8014768:	6044      	str	r4, [r0, #4]
    lv_obj_set_style(btn, ext->styles[ext->state]);
 801476a:	7f83      	ldrb	r3, [r0, #30]
 801476c:	f003 0307 	and.w	r3, r3, #7
 8014770:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8014774:	6841      	ldr	r1, [r0, #4]
 8014776:	4630      	mov	r0, r6
}
 8014778:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_set_style(btn, ext->styles[ext->state]);
 801477c:	f7fb b8e2 	b.w	800f944 <lv_obj_set_style>
        case LV_BTN_STYLE_PR: ext->styles[LV_BTN_STATE_PR] = style; break;
 8014780:	6084      	str	r4, [r0, #8]
 8014782:	e7f2      	b.n	801476a <lv_btn_set_style+0x1c>
        case LV_BTN_STYLE_TGL_REL: ext->styles[LV_BTN_STATE_TGL_REL] = style; break;
 8014784:	60c4      	str	r4, [r0, #12]
 8014786:	e7f0      	b.n	801476a <lv_btn_set_style+0x1c>
        case LV_BTN_STYLE_TGL_PR: ext->styles[LV_BTN_STATE_TGL_PR] = style; break;
 8014788:	6104      	str	r4, [r0, #16]
 801478a:	e7ee      	b.n	801476a <lv_btn_set_style+0x1c>
        case LV_BTN_STYLE_INA: ext->styles[LV_BTN_STATE_INA] = style; break;
 801478c:	6144      	str	r4, [r0, #20]
 801478e:	e7ec      	b.n	801476a <lv_btn_set_style+0x1c>

08014790 <lv_btn_get_state>:
{
 8014790:	b508      	push	{r3, lr}
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8014792:	f7fb f995 	bl	800fac0 <lv_obj_get_ext_attr>
    return ext->state;
 8014796:	7f80      	ldrb	r0, [r0, #30]
}
 8014798:	f000 0007 	and.w	r0, r0, #7
 801479c:	bd08      	pop	{r3, pc}

0801479e <lv_btn_get_toggle>:
{
 801479e:	b508      	push	{r3, lr}
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 80147a0:	f7fb f98e 	bl	800fac0 <lv_obj_get_ext_attr>
    return ext->toggle != 0 ? true : false;
 80147a4:	7f80      	ldrb	r0, [r0, #30]
}
 80147a6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80147aa:	bd08      	pop	{r3, pc}

080147ac <lv_img_get_src>:
{
 80147ac:	b508      	push	{r3, lr}
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 80147ae:	f7fb f987 	bl	800fac0 <lv_obj_get_ext_attr>
}
 80147b2:	6800      	ldr	r0, [r0, #0]
 80147b4:	bd08      	pop	{r3, pc}

080147b6 <lv_img_get_auto_size>:
{
 80147b6:	b508      	push	{r3, lr}
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 80147b8:	f7fb f982 	bl	800fac0 <lv_obj_get_ext_attr>
    return ext->auto_size == 0 ? false : true;
 80147bc:	7b00      	ldrb	r0, [r0, #12]
}
 80147be:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80147c2:	bd08      	pop	{r3, pc}

080147c4 <get_button_from_point>:
{
 80147c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147c6:	4604      	mov	r4, r0
 80147c8:	b085      	sub	sp, #20
    for(i = 0; i < ext->btn_cnt; i++) {
 80147ca:	2500      	movs	r5, #0
{
 80147cc:	460f      	mov	r7, r1
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80147ce:	f7fb f977 	bl	800fac0 <lv_obj_get_ext_attr>
    lv_obj_get_coords(btnm, &btnm_cords);
 80147d2:	4669      	mov	r1, sp
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80147d4:	4606      	mov	r6, r0
    lv_obj_get_coords(btnm, &btnm_cords);
 80147d6:	4620      	mov	r0, r4
 80147d8:	f7fb f8c4 	bl	800f964 <lv_obj_get_coords>
    for(i = 0; i < ext->btn_cnt; i++) {
 80147dc:	b2ac      	uxth	r4, r5
 80147de:	8c33      	ldrh	r3, [r6, #32]
 80147e0:	42a3      	cmp	r3, r4
 80147e2:	d927      	bls.n	8014834 <get_button_from_point+0x70>
        lv_area_copy(&btn_area, &ext->button_areas[i]);
 80147e4:	6873      	ldr	r3, [r6, #4]
 80147e6:	2208      	movs	r2, #8
 80147e8:	b2a9      	uxth	r1, r5
 80147ea:	3501      	adds	r5, #1
 80147ec:	eb0d 0002 	add.w	r0, sp, r2
 80147f0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80147f4:	f001 ffbc 	bl	8016770 <memcpy>
        btn_area.x1 += btnm_cords.x1;
 80147f8:	f9bd 2000 	ldrsh.w	r2, [sp]
 80147fc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
        if(lv_area_is_point_on(&btn_area, p) != false) {
 8014800:	a802      	add	r0, sp, #8
        btn_area.y1 += btnm_cords.y1;
 8014802:	f8bd 100a 	ldrh.w	r1, [sp, #10]
        btn_area.x1 += btnm_cords.x1;
 8014806:	4413      	add	r3, r2
 8014808:	f8ad 3008 	strh.w	r3, [sp, #8]
        btn_area.y1 += btnm_cords.y1;
 801480c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8014810:	4419      	add	r1, r3
 8014812:	f8ad 100a 	strh.w	r1, [sp, #10]
        btn_area.x2 += btnm_cords.x1;
 8014816:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801481a:	440a      	add	r2, r1
        if(lv_area_is_point_on(&btn_area, p) != false) {
 801481c:	4639      	mov	r1, r7
        btn_area.x2 += btnm_cords.x1;
 801481e:	f8ad 200c 	strh.w	r2, [sp, #12]
        btn_area.y2 += btnm_cords.y1;
 8014822:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8014826:	4413      	add	r3, r2
 8014828:	f8ad 300e 	strh.w	r3, [sp, #14]
        if(lv_area_is_point_on(&btn_area, p) != false) {
 801482c:	f7fb ff53 	bl	80106d6 <lv_area_is_point_on>
 8014830:	2800      	cmp	r0, #0
 8014832:	d0d3      	beq.n	80147dc <get_button_from_point+0x18>
    if(i == ext->btn_cnt) i = LV_BTNM_BTN_NONE;
 8014834:	8c32      	ldrh	r2, [r6, #32]
 8014836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801483a:	42a2      	cmp	r2, r4
 801483c:	bf08      	it	eq
 801483e:	461c      	moveq	r4, r3
}
 8014840:	4620      	mov	r0, r4
 8014842:	b005      	add	sp, #20
 8014844:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014846 <invalidate_button_area>:
    if(btn_idx == LV_BTNM_BTN_NONE) return;
 8014846:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801484a:	4299      	cmp	r1, r3
{
 801484c:	b530      	push	{r4, r5, lr}
 801484e:	4604      	mov	r4, r0
 8014850:	b085      	sub	sp, #20
 8014852:	460d      	mov	r5, r1
    if(btn_idx == LV_BTNM_BTN_NONE) return;
 8014854:	d02a      	beq.n	80148ac <invalidate_button_area+0x66>
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8014856:	f7fb f933 	bl	800fac0 <lv_obj_get_ext_attr>
    lv_area_copy(&btn_area, &ext->button_areas[btn_idx]);
 801485a:	6841      	ldr	r1, [r0, #4]
 801485c:	2208      	movs	r2, #8
 801485e:	4668      	mov	r0, sp
 8014860:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8014864:	f001 ff84 	bl	8016770 <memcpy>
    lv_obj_get_coords(btnm, &btnm_area);
 8014868:	a902      	add	r1, sp, #8
 801486a:	4620      	mov	r0, r4
 801486c:	f7fb f87a 	bl	800f964 <lv_obj_get_coords>
    btn_area.x1 += btnm_area.x1;
 8014870:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8014874:	f8bd 3000 	ldrh.w	r3, [sp]
    lv_inv_area(lv_obj_get_disp(btnm), &btn_area);
 8014878:	4620      	mov	r0, r4
    btn_area.y1 += btnm_area.y1;
 801487a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    btn_area.x1 += btnm_area.x1;
 801487e:	4413      	add	r3, r2
 8014880:	f8ad 3000 	strh.w	r3, [sp]
    btn_area.y1 += btnm_area.y1;
 8014884:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8014888:	4419      	add	r1, r3
 801488a:	f8ad 1002 	strh.w	r1, [sp, #2]
    btn_area.x2 += btnm_area.x1;
 801488e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8014892:	440a      	add	r2, r1
 8014894:	f8ad 2004 	strh.w	r2, [sp, #4]
    btn_area.y2 += btnm_area.y1;
 8014898:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801489c:	4413      	add	r3, r2
 801489e:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_inv_area(lv_obj_get_disp(btnm), &btn_area);
 80148a2:	f7ee f889 	bl	80029b8 <lv_obj_get_disp>
 80148a6:	4669      	mov	r1, sp
 80148a8:	f7ee fb20 	bl	8002eec <lv_inv_area>
}
 80148ac:	b005      	add	sp, #20
 80148ae:	bd30      	pop	{r4, r5, pc}

080148b0 <lv_btnm_set_style>:
{
 80148b0:	b570      	push	{r4, r5, r6, lr}
 80148b2:	460e      	mov	r6, r1
 80148b4:	4604      	mov	r4, r0
 80148b6:	4615      	mov	r5, r2
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80148b8:	f7fb f902 	bl	800fac0 <lv_obj_get_ext_attr>
    switch(type) {
 80148bc:	2e05      	cmp	r6, #5
 80148be:	d818      	bhi.n	80148f2 <lv_btnm_set_style+0x42>
 80148c0:	e8df f006 	tbb	[pc, r6]
 80148c4:	110f0903 	.word	0x110f0903
 80148c8:	1513      	.short	0x1513
        case LV_BTNM_STYLE_BG: lv_obj_set_style(btnm, style); break;
 80148ca:	4629      	mov	r1, r5
 80148cc:	4620      	mov	r0, r4
}
 80148ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case LV_BTNM_STYLE_BG: lv_obj_set_style(btnm, style); break;
 80148d2:	f7fb b837 	b.w	800f944 <lv_obj_set_style>
            ext->styles_btn[LV_BTN_STATE_REL] = style;
 80148d6:	60c5      	str	r5, [r0, #12]
            lv_obj_invalidate(btnm);
 80148d8:	4620      	mov	r0, r4
}
 80148da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_invalidate(btnm);
 80148de:	f7fa bc87 	b.w	800f1f0 <lv_obj_invalidate>
            ext->styles_btn[LV_BTN_STATE_PR] = style;
 80148e2:	6105      	str	r5, [r0, #16]
            lv_obj_invalidate(btnm);
 80148e4:	e7f8      	b.n	80148d8 <lv_btnm_set_style+0x28>
            ext->styles_btn[LV_BTN_STATE_TGL_REL] = style;
 80148e6:	6145      	str	r5, [r0, #20]
            lv_obj_invalidate(btnm);
 80148e8:	e7f6      	b.n	80148d8 <lv_btnm_set_style+0x28>
            ext->styles_btn[LV_BTN_STATE_TGL_PR] = style;
 80148ea:	6185      	str	r5, [r0, #24]
            lv_obj_invalidate(btnm);
 80148ec:	e7f4      	b.n	80148d8 <lv_btnm_set_style+0x28>
            ext->styles_btn[LV_BTN_STATE_INA] = style;
 80148ee:	61c5      	str	r5, [r0, #28]
 80148f0:	e7f2      	b.n	80148d8 <lv_btnm_set_style+0x28>
}
 80148f2:	bd70      	pop	{r4, r5, r6, pc}

080148f4 <lv_btnm_set_btn_ctrl>:
{
 80148f4:	b570      	push	{r4, r5, r6, lr}
 80148f6:	460c      	mov	r4, r1
 80148f8:	4606      	mov	r6, r0
 80148fa:	4615      	mov	r5, r2
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80148fc:	f7fb f8e0 	bl	800fac0 <lv_obj_get_ext_attr>
    if(btn_id >= ext->btn_cnt) return;
 8014900:	8c03      	ldrh	r3, [r0, #32]
 8014902:	42a3      	cmp	r3, r4
 8014904:	d90b      	bls.n	801491e <lv_btnm_set_btn_ctrl+0x2a>
    ext->ctrl_bits[btn_id] |= ctrl;
 8014906:	6883      	ldr	r3, [r0, #8]
    invalidate_button_area(btnm, btn_id);
 8014908:	4621      	mov	r1, r4
 801490a:	4630      	mov	r0, r6
    ext->ctrl_bits[btn_id] |= ctrl;
 801490c:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 8014910:	4315      	orrs	r5, r2
 8014912:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
}
 8014916:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    invalidate_button_area(btnm, btn_id);
 801491a:	f7ff bf94 	b.w	8014846 <invalidate_button_area>
}
 801491e:	bd70      	pop	{r4, r5, r6, pc}

08014920 <lv_btnm_clear_btn_ctrl>:
{
 8014920:	b570      	push	{r4, r5, r6, lr}
 8014922:	460c      	mov	r4, r1
 8014924:	4605      	mov	r5, r0
 8014926:	4616      	mov	r6, r2
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8014928:	f7fb f8ca 	bl	800fac0 <lv_obj_get_ext_attr>
    if(btn_id >= ext->btn_cnt) return;
 801492c:	8c03      	ldrh	r3, [r0, #32]
 801492e:	42a3      	cmp	r3, r4
 8014930:	d90c      	bls.n	801494c <lv_btnm_clear_btn_ctrl+0x2c>
    ext->ctrl_bits[btn_id] &= (~ctrl);
 8014932:	6881      	ldr	r1, [r0, #8]
    invalidate_button_area(btnm, btn_id);
 8014934:	4628      	mov	r0, r5
    ext->ctrl_bits[btn_id] &= (~ctrl);
 8014936:	f831 3014 	ldrh.w	r3, [r1, r4, lsl #1]
 801493a:	ea23 0306 	bic.w	r3, r3, r6
 801493e:	f821 3014 	strh.w	r3, [r1, r4, lsl #1]
    invalidate_button_area(btnm, btn_id);
 8014942:	4621      	mov	r1, r4
}
 8014944:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    invalidate_button_area(btnm, btn_id);
 8014948:	f7ff bf7d 	b.w	8014846 <invalidate_button_area>
}
 801494c:	bd70      	pop	{r4, r5, r6, pc}

0801494e <lv_btnm_set_btn_ctrl_all>:
{
 801494e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014950:	4606      	mov	r6, r0
 8014952:	460f      	mov	r7, r1
    for(i = 0; i < ext->btn_cnt; i++) {
 8014954:	2400      	movs	r4, #0
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8014956:	f7fb f8b3 	bl	800fac0 <lv_obj_get_ext_attr>
 801495a:	4605      	mov	r5, r0
    for(i = 0; i < ext->btn_cnt; i++) {
 801495c:	b2a1      	uxth	r1, r4
 801495e:	8c2b      	ldrh	r3, [r5, #32]
 8014960:	428b      	cmp	r3, r1
 8014962:	d800      	bhi.n	8014966 <lv_btnm_set_btn_ctrl_all+0x18>
}
 8014964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_btnm_set_btn_ctrl(btnm, i, ctrl);
 8014966:	463a      	mov	r2, r7
 8014968:	4630      	mov	r0, r6
 801496a:	f7ff ffc3 	bl	80148f4 <lv_btnm_set_btn_ctrl>
 801496e:	3401      	adds	r4, #1
 8014970:	e7f4      	b.n	801495c <lv_btnm_set_btn_ctrl_all+0xe>

08014972 <lv_btnm_clear_btn_ctrl_all>:
{
 8014972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014974:	4606      	mov	r6, r0
 8014976:	460f      	mov	r7, r1
    for(i = 0; i < ext->btn_cnt; i++) {
 8014978:	2400      	movs	r4, #0
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801497a:	f7fb f8a1 	bl	800fac0 <lv_obj_get_ext_attr>
 801497e:	4605      	mov	r5, r0
    for(i = 0; i < ext->btn_cnt; i++) {
 8014980:	b2a1      	uxth	r1, r4
 8014982:	8c2b      	ldrh	r3, [r5, #32]
 8014984:	428b      	cmp	r3, r1
 8014986:	d800      	bhi.n	801498a <lv_btnm_clear_btn_ctrl_all+0x18>
}
 8014988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_btnm_clear_btn_ctrl(btnm, i, ctrl);
 801498a:	463a      	mov	r2, r7
 801498c:	4630      	mov	r0, r6
 801498e:	f7ff ffc7 	bl	8014920 <lv_btnm_clear_btn_ctrl>
 8014992:	3401      	adds	r4, #1
 8014994:	e7f4      	b.n	8014980 <lv_btnm_clear_btn_ctrl_all+0xe>

08014996 <lv_btnm_get_map_array>:
{
 8014996:	b508      	push	{r3, lr}
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8014998:	f7fb f892 	bl	800fac0 <lv_obj_get_ext_attr>
}
 801499c:	6800      	ldr	r0, [r0, #0]
 801499e:	bd08      	pop	{r3, pc}

080149a0 <lv_btnm_get_active_btn>:
{
 80149a0:	b508      	push	{r3, lr}
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80149a2:	f7fb f88d 	bl	800fac0 <lv_obj_get_ext_attr>
}
 80149a6:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 80149a8:	bd08      	pop	{r3, pc}

080149aa <lv_btnm_get_active_btn_text>:
{
 80149aa:	b510      	push	{r4, lr}
 80149ac:	4604      	mov	r4, r0
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80149ae:	f7fb f887 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->btn_id_act != LV_BTNM_BTN_NONE) {
 80149b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80149b6:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 80149b8:	4299      	cmp	r1, r3
 80149ba:	d004      	beq.n	80149c6 <lv_btnm_get_active_btn_text+0x1c>
        return lv_btnm_get_btn_text(btnm, ext->btn_id_act);
 80149bc:	4620      	mov	r0, r4
}
 80149be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return lv_btnm_get_btn_text(btnm, ext->btn_id_act);
 80149c2:	f7f3 b851 	b.w	8007a68 <lv_btnm_get_btn_text>
}
 80149c6:	2000      	movs	r0, #0
 80149c8:	bd10      	pop	{r4, pc}

080149ca <lv_btnm_get_btn_ctrl>:
{
 80149ca:	b538      	push	{r3, r4, r5, lr}
 80149cc:	460c      	mov	r4, r1
 80149ce:	4615      	mov	r5, r2
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80149d0:	f7fb f876 	bl	800fac0 <lv_obj_get_ext_attr>
    if(btn_id >= ext->btn_cnt) return false;
 80149d4:	8c03      	ldrh	r3, [r0, #32]
 80149d6:	42a3      	cmp	r3, r4
 80149d8:	d907      	bls.n	80149ea <lv_btnm_get_btn_ctrl+0x20>
    return ext->ctrl_bits[btn_id] & ctrl ? true : false;
 80149da:	6883      	ldr	r3, [r0, #8]
 80149dc:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80149e0:	421d      	tst	r5, r3
 80149e2:	bf14      	ite	ne
 80149e4:	2001      	movne	r0, #1
 80149e6:	2000      	moveq	r0, #0
}
 80149e8:	bd38      	pop	{r3, r4, r5, pc}
    if(btn_id >= ext->btn_cnt) return false;
 80149ea:	2000      	movs	r0, #0
 80149ec:	e7fc      	b.n	80149e8 <lv_btnm_get_btn_ctrl+0x1e>

080149ee <make_one_button_toggled>:
 * It simply clears the toggle flag on other buttons.
 * @param btnm Button matrix object
 * @param btn_idx Button that should remain toggled
 */
static void make_one_button_toggled(lv_obj_t * btnm, uint16_t btn_idx)
{
 80149ee:	b570      	push	{r4, r5, r6, lr}
    /*Save whether the button was toggled*/
    bool was_toggled = lv_btnm_get_btn_ctrl(btnm, btn_idx, LV_BTNM_CTRL_TGL_STATE);
 80149f0:	2280      	movs	r2, #128	; 0x80
{
 80149f2:	4604      	mov	r4, r0
 80149f4:	460d      	mov	r5, r1
    bool was_toggled = lv_btnm_get_btn_ctrl(btnm, btn_idx, LV_BTNM_CTRL_TGL_STATE);
 80149f6:	f7ff ffe8 	bl	80149ca <lv_btnm_get_btn_ctrl>
 80149fa:	4606      	mov	r6, r0

    lv_btnm_clear_btn_ctrl_all(btnm, LV_BTNM_CTRL_TGL_STATE);
 80149fc:	2180      	movs	r1, #128	; 0x80
 80149fe:	4620      	mov	r0, r4
 8014a00:	f7ff ffb7 	bl	8014972 <lv_btnm_clear_btn_ctrl_all>

    if(was_toggled) lv_btnm_set_btn_ctrl(btnm, btn_idx, LV_BTNM_CTRL_TGL_STATE);
 8014a04:	b136      	cbz	r6, 8014a14 <make_one_button_toggled+0x26>
 8014a06:	4629      	mov	r1, r5
 8014a08:	4620      	mov	r0, r4
 8014a0a:	2280      	movs	r2, #128	; 0x80
}
 8014a0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if(was_toggled) lv_btnm_set_btn_ctrl(btnm, btn_idx, LV_BTNM_CTRL_TGL_STATE);
 8014a10:	f7ff bf70 	b.w	80148f4 <lv_btnm_set_btn_ctrl>
}
 8014a14:	bd70      	pop	{r4, r5, r6, pc}

08014a16 <lv_btnm_get_style>:
{
 8014a16:	b538      	push	{r3, r4, r5, lr}
 8014a18:	460c      	mov	r4, r1
 8014a1a:	4605      	mov	r5, r0
    lv_btnm_ext_t * ext      = lv_obj_get_ext_attr(btnm);
 8014a1c:	f7fb f850 	bl	800fac0 <lv_obj_get_ext_attr>
    switch(type) {
 8014a20:	2c05      	cmp	r4, #5
 8014a22:	d813      	bhi.n	8014a4c <lv_btnm_get_style+0x36>
 8014a24:	e8df f004 	tbb	[pc, r4]
 8014a28:	0c0a0803 	.word	0x0c0a0803
 8014a2c:	100e      	.short	0x100e
        case LV_BTNM_STYLE_BG: style = lv_obj_get_style(btnm); break;
 8014a2e:	4628      	mov	r0, r5
}
 8014a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        case LV_BTNM_STYLE_BG: style = lv_obj_get_style(btnm); break;
 8014a34:	f7ee b984 	b.w	8002d40 <lv_obj_get_style>
        case LV_BTNM_STYLE_BTN_REL: style = ext->styles_btn[LV_BTN_STATE_REL]; break;
 8014a38:	68c0      	ldr	r0, [r0, #12]
}
 8014a3a:	bd38      	pop	{r3, r4, r5, pc}
        case LV_BTNM_STYLE_BTN_PR: style = ext->styles_btn[LV_BTN_STATE_PR]; break;
 8014a3c:	6900      	ldr	r0, [r0, #16]
 8014a3e:	e7fc      	b.n	8014a3a <lv_btnm_get_style+0x24>
        case LV_BTNM_STYLE_BTN_TGL_REL: style = ext->styles_btn[LV_BTN_STATE_TGL_REL]; break;
 8014a40:	6940      	ldr	r0, [r0, #20]
 8014a42:	e7fa      	b.n	8014a3a <lv_btnm_get_style+0x24>
        case LV_BTNM_STYLE_BTN_TGL_PR: style = ext->styles_btn[LV_BTN_STATE_TGL_PR]; break;
 8014a44:	6980      	ldr	r0, [r0, #24]
 8014a46:	e7f8      	b.n	8014a3a <lv_btnm_get_style+0x24>
        case LV_BTNM_STYLE_BTN_INA: style = ext->styles_btn[LV_BTN_STATE_INA]; break;
 8014a48:	69c0      	ldr	r0, [r0, #28]
 8014a4a:	e7f6      	b.n	8014a3a <lv_btnm_get_style+0x24>
        default: style = NULL; break;
 8014a4c:	2000      	movs	r0, #0
    return style;
 8014a4e:	e7f4      	b.n	8014a3a <lv_btnm_get_style+0x24>

08014a50 <lv_btnm_set_map>:
    if(map == NULL) return;
 8014a50:	b109      	cbz	r1, 8014a56 <lv_btnm_set_map+0x6>
 8014a52:	f7f3 b833 	b.w	8007abc <lv_btnm_set_map.part.2>
}
 8014a56:	4770      	bx	lr

08014a58 <lv_btnm_set_ctrl_map>:
{
 8014a58:	b570      	push	{r4, r5, r6, lr}
 8014a5a:	4605      	mov	r5, r0
 8014a5c:	460e      	mov	r6, r1
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8014a5e:	f7fb f82f 	bl	800fac0 <lv_obj_get_ext_attr>
    memcpy(ext->ctrl_bits, ctrl_map, sizeof(lv_btnm_ctrl_t) * ext->btn_cnt);
 8014a62:	8c02      	ldrh	r2, [r0, #32]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8014a64:	4604      	mov	r4, r0
    memcpy(ext->ctrl_bits, ctrl_map, sizeof(lv_btnm_ctrl_t) * ext->btn_cnt);
 8014a66:	4631      	mov	r1, r6
 8014a68:	0052      	lsls	r2, r2, #1
 8014a6a:	6880      	ldr	r0, [r0, #8]
 8014a6c:	f001 fe80 	bl	8016770 <memcpy>
    lv_btnm_set_map(btnm, ext->map_p);
 8014a70:	6821      	ldr	r1, [r4, #0]
 8014a72:	4628      	mov	r0, r5
}
 8014a74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_btnm_set_map(btnm, ext->map_p);
 8014a78:	f7ff bfea 	b.w	8014a50 <lv_btnm_set_map>

08014a7c <lv_cont_set_layout>:
{
 8014a7c:	b570      	push	{r4, r5, r6, lr}
 8014a7e:	460d      	mov	r5, r1
 8014a80:	4604      	mov	r4, r0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8014a82:	f7fb f81d 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->layout == layout) return;
 8014a86:	7803      	ldrb	r3, [r0, #0]
 8014a88:	f003 020f 	and.w	r2, r3, #15
 8014a8c:	42aa      	cmp	r2, r5
 8014a8e:	d009      	beq.n	8014aa4 <lv_cont_set_layout+0x28>
    ext->layout = layout;
 8014a90:	f365 0303 	bfi	r3, r5, #0, #4
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8014a94:	2200      	movs	r2, #0
 8014a96:	2101      	movs	r1, #1
    ext->layout = layout;
 8014a98:	7003      	strb	r3, [r0, #0]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8014a9a:	4620      	mov	r0, r4
 8014a9c:	69e3      	ldr	r3, [r4, #28]
}
 8014a9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8014aa2:	4718      	bx	r3
}
 8014aa4:	bd70      	pop	{r4, r5, r6, pc}

08014aa6 <lv_cont_set_fit4>:
{
 8014aa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014aaa:	4605      	mov	r5, r0
 8014aac:	4689      	mov	r9, r1
 8014aae:	4690      	mov	r8, r2
 8014ab0:	461f      	mov	r7, r3
 8014ab2:	f89d 6020 	ldrb.w	r6, [sp, #32]
    lv_obj_invalidate(cont);
 8014ab6:	f7fa fb9b 	bl	800f1f0 <lv_obj_invalidate>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8014aba:	4628      	mov	r0, r5
 8014abc:	f7fb f800 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->fit_left == left && ext->fit_right == right && ext->fit_top == top && ext->fit_bottom == bottom) {
 8014ac0:	7803      	ldrb	r3, [r0, #0]
 8014ac2:	f3c3 1201 	ubfx	r2, r3, #4, #2
 8014ac6:	454a      	cmp	r2, r9
 8014ac8:	d10b      	bne.n	8014ae2 <lv_cont_set_fit4+0x3c>
 8014aca:	ebb8 1f93 	cmp.w	r8, r3, lsr #6
 8014ace:	d108      	bne.n	8014ae2 <lv_cont_set_fit4+0x3c>
 8014ad0:	7844      	ldrb	r4, [r0, #1]
 8014ad2:	f004 0303 	and.w	r3, r4, #3
 8014ad6:	42bb      	cmp	r3, r7
 8014ad8:	d103      	bne.n	8014ae2 <lv_cont_set_fit4+0x3c>
 8014ada:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8014ade:	42b4      	cmp	r4, r6
 8014ae0:	d012      	beq.n	8014b08 <lv_cont_set_fit4+0x62>
    ext->fit_left   = left;
 8014ae2:	7804      	ldrb	r4, [r0, #0]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8014ae4:	2101      	movs	r1, #1
    ext->fit_top    = top;
 8014ae6:	7842      	ldrb	r2, [r0, #1]
    ext->fit_left   = left;
 8014ae8:	f369 1405 	bfi	r4, r9, #4, #2
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8014aec:	69eb      	ldr	r3, [r5, #28]
    ext->fit_top    = top;
 8014aee:	f367 0201 	bfi	r2, r7, #0, #2
    ext->fit_right  = right;
 8014af2:	f368 1487 	bfi	r4, r8, #6, #2
    ext->fit_bottom = bottom;
 8014af6:	f366 0283 	bfi	r2, r6, #2, #2
    ext->fit_right  = right;
 8014afa:	7004      	strb	r4, [r0, #0]
    ext->fit_bottom = bottom;
 8014afc:	7042      	strb	r2, [r0, #1]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8014afe:	4628      	mov	r0, r5
 8014b00:	2200      	movs	r2, #0
}
 8014b02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8014b06:	4718      	bx	r3
}
 8014b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014b0c <lv_cont_get_layout>:
{
 8014b0c:	b508      	push	{r3, lr}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8014b0e:	f7fa ffd7 	bl	800fac0 <lv_obj_get_ext_attr>
    return ext->layout;
 8014b12:	7800      	ldrb	r0, [r0, #0]
}
 8014b14:	f000 000f 	and.w	r0, r0, #15
 8014b18:	bd08      	pop	{r3, pc}

08014b1a <lv_cont_refr_layout>:
{
 8014b1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b1e:	4604      	mov	r4, r0
 8014b20:	b087      	sub	sp, #28
    lv_layout_t type = lv_cont_get_layout(cont);
 8014b22:	f7ff fff3 	bl	8014b0c <lv_cont_get_layout>
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 8014b26:	2100      	movs	r1, #0
    lv_layout_t type = lv_cont_get_layout(cont);
 8014b28:	4605      	mov	r5, r0
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 8014b2a:	4620      	mov	r0, r4
 8014b2c:	f7fa fee8 	bl	800f900 <lv_obj_get_child>
 8014b30:	2800      	cmp	r0, #0
 8014b32:	f000 8294 	beq.w	801505e <lv_cont_refr_layout+0x544>
    if(type == LV_LAYOUT_OFF) return;
 8014b36:	2d00      	cmp	r5, #0
 8014b38:	f000 8291 	beq.w	801505e <lv_cont_refr_layout+0x544>
    if(type == LV_LAYOUT_CENTER) {
 8014b3c:	2d01      	cmp	r5, #1
 8014b3e:	d168      	bne.n	8014c12 <lv_cont_refr_layout+0xf8>
    LV_LL_READ(cont->child_ll, child)
 8014b40:	1d26      	adds	r6, r4, #4
    const lv_style_t * style = lv_obj_get_style(cont);
 8014b42:	4620      	mov	r0, r4
    lv_coord_t h_tot         = 0;
 8014b44:	2500      	movs	r5, #0
    const lv_style_t * style = lv_obj_get_style(cont);
 8014b46:	f7ee f8fb 	bl	8002d40 <lv_obj_get_style>
 8014b4a:	4607      	mov	r7, r0
    LV_LL_READ(cont->child_ll, child)
 8014b4c:	4630      	mov	r0, r6
 8014b4e:	f7fb faa7 	bl	80100a0 <lv_ll_get_head>
    uint32_t obj_num         = 0;
 8014b52:	46a9      	mov	r9, r5
    LV_LL_READ(cont->child_ll, child)
 8014b54:	4680      	mov	r8, r0
 8014b56:	f1b8 0f00 	cmp.w	r8, #0
 8014b5a:	d11b      	bne.n	8014b94 <lv_cont_refr_layout+0x7a>
    if(obj_num == 0) return;
 8014b5c:	f1b9 0f00 	cmp.w	r9, #0
 8014b60:	f000 827d 	beq.w	801505e <lv_cont_refr_layout+0x544>
    h_tot -= style->body.padding.inner;
 8014b64:	8bf8      	ldrh	r0, [r7, #30]
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8014b66:	2101      	movs	r1, #1
    h_tot -= style->body.padding.inner;
 8014b68:	1a2d      	subs	r5, r5, r0
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8014b6a:	4620      	mov	r0, r4
 8014b6c:	f7fa fac9 	bl	800f102 <lv_obj_set_protect>
    LV_LL_READ_BACK(cont->child_ll, child)
 8014b70:	4630      	mov	r0, r6
    h_tot -= style->body.padding.inner;
 8014b72:	b22d      	sxth	r5, r5
    lv_coord_t last_cord = -(h_tot / 2);
 8014b74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014b78:	106d      	asrs	r5, r5, #1
 8014b7a:	426d      	negs	r5, r5
 8014b7c:	b22d      	sxth	r5, r5
    LV_LL_READ_BACK(cont->child_ll, child)
 8014b7e:	f7fb fa92 	bl	80100a6 <lv_ll_get_tail>
 8014b82:	4680      	mov	r8, r0
 8014b84:	b9f8      	cbnz	r0, 8014bc6 <lv_cont_refr_layout+0xac>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 8014b86:	2101      	movs	r1, #1
 8014b88:	4620      	mov	r0, r4
}
 8014b8a:	b007      	add	sp, #28
 8014b8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 8014b90:	f7fa babd 	b.w	800f10e <lv_obj_clear_protect>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8014b94:	4640      	mov	r0, r8
 8014b96:	f7fa ff25 	bl	800f9e4 <lv_obj_get_hidden>
 8014b9a:	b970      	cbnz	r0, 8014bba <lv_cont_refr_layout+0xa0>
 8014b9c:	2104      	movs	r1, #4
 8014b9e:	4640      	mov	r0, r8
 8014ba0:	f7fa ff83 	bl	800faaa <lv_obj_is_protected>
 8014ba4:	b948      	cbnz	r0, 8014bba <lv_cont_refr_layout+0xa0>
        h_tot += lv_obj_get_height(child) + style->body.padding.inner;
 8014ba6:	4640      	mov	r0, r8
        obj_num++;
 8014ba8:	f109 0901 	add.w	r9, r9, #1
        h_tot += lv_obj_get_height(child) + style->body.padding.inner;
 8014bac:	f7fa fef3 	bl	800f996 <lv_obj_get_height>
 8014bb0:	8bfb      	ldrh	r3, [r7, #30]
 8014bb2:	441d      	add	r5, r3
 8014bb4:	fa00 f585 	sxtah	r5, r0, r5
 8014bb8:	b22d      	sxth	r5, r5
    LV_LL_READ(cont->child_ll, child)
 8014bba:	4641      	mov	r1, r8
 8014bbc:	4630      	mov	r0, r6
 8014bbe:	f7fb fa75 	bl	80100ac <lv_ll_get_next>
 8014bc2:	4680      	mov	r8, r0
 8014bc4:	e7c7      	b.n	8014b56 <lv_cont_refr_layout+0x3c>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8014bc6:	4640      	mov	r0, r8
 8014bc8:	f7fa ff0c 	bl	800f9e4 <lv_obj_get_hidden>
 8014bcc:	b9e0      	cbnz	r0, 8014c08 <lv_cont_refr_layout+0xee>
 8014bce:	2104      	movs	r1, #4
 8014bd0:	4640      	mov	r0, r8
 8014bd2:	f7fa ff6a 	bl	800faaa <lv_obj_is_protected>
 8014bd6:	4681      	mov	r9, r0
 8014bd8:	b9b0      	cbnz	r0, 8014c08 <lv_cont_refr_layout+0xee>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
 8014bda:	4640      	mov	r0, r8
 8014bdc:	f7fa fedb 	bl	800f996 <lv_obj_get_height>
 8014be0:	464b      	mov	r3, r9
 8014be2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8014be6:	464a      	mov	r2, r9
 8014be8:	4621      	mov	r1, r4
 8014bea:	eb05 0060 	add.w	r0, r5, r0, asr #1
 8014bee:	b200      	sxth	r0, r0
 8014bf0:	9000      	str	r0, [sp, #0]
 8014bf2:	4640      	mov	r0, r8
 8014bf4:	f7fa fbb2 	bl	800f35c <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 8014bf8:	4640      	mov	r0, r8
 8014bfa:	f7fa fecc 	bl	800f996 <lv_obj_get_height>
 8014bfe:	8bfb      	ldrh	r3, [r7, #30]
 8014c00:	441d      	add	r5, r3
 8014c02:	fa00 f585 	sxtah	r5, r0, r5
 8014c06:	b22d      	sxth	r5, r5
    LV_LL_READ_BACK(cont->child_ll, child)
 8014c08:	4641      	mov	r1, r8
 8014c0a:	4630      	mov	r0, r6
 8014c0c:	f7fb fa5e 	bl	80100cc <lv_ll_get_prev>
 8014c10:	e7b7      	b.n	8014b82 <lv_cont_refr_layout+0x68>
    } else if(type == LV_LAYOUT_COL_L || type == LV_LAYOUT_COL_M || type == LV_LAYOUT_COL_R) {
 8014c12:	1eab      	subs	r3, r5, #2
 8014c14:	b2db      	uxtb	r3, r3
 8014c16:	2b02      	cmp	r3, #2
 8014c18:	d849      	bhi.n	8014cae <lv_cont_refr_layout+0x194>
    lv_layout_t type = lv_cont_get_layout(cont);
 8014c1a:	4620      	mov	r0, r4
 8014c1c:	f7ff ff76 	bl	8014b0c <lv_cont_get_layout>
 8014c20:	4605      	mov	r5, r0
    const lv_style_t * style = lv_obj_get_style(cont);
 8014c22:	4620      	mov	r0, r4
 8014c24:	f7ee f88c 	bl	8002d40 <lv_obj_get_style>
    switch(type) {
 8014c28:	2d03      	cmp	r5, #3
    const lv_style_t * style = lv_obj_get_style(cont);
 8014c2a:	4680      	mov	r8, r0
    switch(type) {
 8014c2c:	d039      	beq.n	8014ca2 <lv_cont_refr_layout+0x188>
 8014c2e:	2d04      	cmp	r5, #4
 8014c30:	d006      	beq.n	8014c40 <lv_cont_refr_layout+0x126>
 8014c32:	2d02      	cmp	r5, #2
 8014c34:	d139      	bne.n	8014caa <lv_cont_refr_layout+0x190>
            hpad_corr = style->body.padding.left;
 8014c36:	f9b0 501a 	ldrsh.w	r5, [r0, #26]
            align     = LV_ALIGN_IN_TOP_LEFT;
 8014c3a:	f04f 0901 	mov.w	r9, #1
 8014c3e:	e004      	b.n	8014c4a <lv_cont_refr_layout+0x130>
            hpad_corr = -style->body.padding.right;
 8014c40:	8b85      	ldrh	r5, [r0, #28]
            align     = LV_ALIGN_IN_TOP_RIGHT;
 8014c42:	f04f 0903 	mov.w	r9, #3
            hpad_corr = -style->body.padding.right;
 8014c46:	426d      	negs	r5, r5
 8014c48:	b22d      	sxth	r5, r5
    LV_LL_READ_BACK(cont->child_ll, child)
 8014c4a:	f104 0a04 	add.w	sl, r4, #4
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8014c4e:	4620      	mov	r0, r4
 8014c50:	2101      	movs	r1, #1
 8014c52:	f7fa fa56 	bl	800f102 <lv_obj_set_protect>
    LV_LL_READ_BACK(cont->child_ll, child)
 8014c56:	4650      	mov	r0, sl
    lv_coord_t last_cord = style->body.padding.top;
 8014c58:	f9b8 7016 	ldrsh.w	r7, [r8, #22]
    LV_LL_READ_BACK(cont->child_ll, child)
 8014c5c:	f7fb fa23 	bl	80100a6 <lv_ll_get_tail>
 8014c60:	4606      	mov	r6, r0
 8014c62:	2800      	cmp	r0, #0
 8014c64:	d08f      	beq.n	8014b86 <lv_cont_refr_layout+0x6c>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8014c66:	4630      	mov	r0, r6
 8014c68:	f7fa febc 	bl	800f9e4 <lv_obj_get_hidden>
 8014c6c:	b9a0      	cbnz	r0, 8014c98 <lv_cont_refr_layout+0x17e>
 8014c6e:	2104      	movs	r1, #4
 8014c70:	4630      	mov	r0, r6
 8014c72:	f7fa ff1a 	bl	800faaa <lv_obj_is_protected>
 8014c76:	b978      	cbnz	r0, 8014c98 <lv_cont_refr_layout+0x17e>
        lv_obj_align(child, cont, align, hpad_corr, last_cord);
 8014c78:	462b      	mov	r3, r5
 8014c7a:	9700      	str	r7, [sp, #0]
 8014c7c:	464a      	mov	r2, r9
 8014c7e:	4621      	mov	r1, r4
 8014c80:	4630      	mov	r0, r6
 8014c82:	f7fa fb6b 	bl	800f35c <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 8014c86:	4630      	mov	r0, r6
 8014c88:	f7fa fe85 	bl	800f996 <lv_obj_get_height>
 8014c8c:	f8b8 301e 	ldrh.w	r3, [r8, #30]
 8014c90:	441f      	add	r7, r3
 8014c92:	fa00 f787 	sxtah	r7, r0, r7
 8014c96:	b23f      	sxth	r7, r7
    LV_LL_READ_BACK(cont->child_ll, child)
 8014c98:	4631      	mov	r1, r6
 8014c9a:	4650      	mov	r0, sl
 8014c9c:	f7fb fa16 	bl	80100cc <lv_ll_get_prev>
 8014ca0:	e7de      	b.n	8014c60 <lv_cont_refr_layout+0x146>
            hpad_corr = 0;
 8014ca2:	2500      	movs	r5, #0
            align     = LV_ALIGN_IN_TOP_MID;
 8014ca4:	f04f 0902 	mov.w	r9, #2
 8014ca8:	e7cf      	b.n	8014c4a <lv_cont_refr_layout+0x130>
            hpad_corr = 0;
 8014caa:	2500      	movs	r5, #0
 8014cac:	e7c5      	b.n	8014c3a <lv_cont_refr_layout+0x120>
    } else if(type == LV_LAYOUT_ROW_T || type == LV_LAYOUT_ROW_M || type == LV_LAYOUT_ROW_B) {
 8014cae:	1f6b      	subs	r3, r5, #5
 8014cb0:	b2db      	uxtb	r3, r3
 8014cb2:	2b02      	cmp	r3, #2
 8014cb4:	d84a      	bhi.n	8014d4c <lv_cont_refr_layout+0x232>
    lv_layout_t type = lv_cont_get_layout(cont);
 8014cb6:	4620      	mov	r0, r4
 8014cb8:	f7ff ff28 	bl	8014b0c <lv_cont_get_layout>
 8014cbc:	4605      	mov	r5, r0
    const lv_style_t * style = lv_obj_get_style(cont);
 8014cbe:	4620      	mov	r0, r4
 8014cc0:	f7ee f83e 	bl	8002d40 <lv_obj_get_style>
    switch(type) {
 8014cc4:	2d06      	cmp	r5, #6
    const lv_style_t * style = lv_obj_get_style(cont);
 8014cc6:	4680      	mov	r8, r0
    switch(type) {
 8014cc8:	d03a      	beq.n	8014d40 <lv_cont_refr_layout+0x226>
 8014cca:	2d07      	cmp	r5, #7
 8014ccc:	d006      	beq.n	8014cdc <lv_cont_refr_layout+0x1c2>
 8014cce:	2d05      	cmp	r5, #5
 8014cd0:	d13a      	bne.n	8014d48 <lv_cont_refr_layout+0x22e>
            vpad_corr = style->body.padding.top;
 8014cd2:	f9b0 5016 	ldrsh.w	r5, [r0, #22]
            align     = LV_ALIGN_IN_TOP_LEFT;
 8014cd6:	f04f 0901 	mov.w	r9, #1
 8014cda:	e004      	b.n	8014ce6 <lv_cont_refr_layout+0x1cc>
            vpad_corr = -style->body.padding.bottom;
 8014cdc:	8b05      	ldrh	r5, [r0, #24]
            align     = LV_ALIGN_IN_BOTTOM_LEFT;
 8014cde:	f04f 0904 	mov.w	r9, #4
            vpad_corr = -style->body.padding.bottom;
 8014ce2:	426d      	negs	r5, r5
 8014ce4:	b22d      	sxth	r5, r5
    LV_LL_READ_BACK(cont->child_ll, child)
 8014ce6:	f104 0a04 	add.w	sl, r4, #4
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8014cea:	4620      	mov	r0, r4
 8014cec:	2101      	movs	r1, #1
 8014cee:	f7fa fa08 	bl	800f102 <lv_obj_set_protect>
    LV_LL_READ_BACK(cont->child_ll, child)
 8014cf2:	4650      	mov	r0, sl
    lv_coord_t last_cord = style->body.padding.left;
 8014cf4:	f9b8 701a 	ldrsh.w	r7, [r8, #26]
    LV_LL_READ_BACK(cont->child_ll, child)
 8014cf8:	f7fb f9d5 	bl	80100a6 <lv_ll_get_tail>
 8014cfc:	4606      	mov	r6, r0
 8014cfe:	2800      	cmp	r0, #0
 8014d00:	f43f af41 	beq.w	8014b86 <lv_cont_refr_layout+0x6c>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8014d04:	4630      	mov	r0, r6
 8014d06:	f7fa fe6d 	bl	800f9e4 <lv_obj_get_hidden>
 8014d0a:	b9a0      	cbnz	r0, 8014d36 <lv_cont_refr_layout+0x21c>
 8014d0c:	2104      	movs	r1, #4
 8014d0e:	4630      	mov	r0, r6
 8014d10:	f7fa fecb 	bl	800faaa <lv_obj_is_protected>
 8014d14:	b978      	cbnz	r0, 8014d36 <lv_cont_refr_layout+0x21c>
        lv_obj_align(child, cont, align, last_cord, vpad_corr);
 8014d16:	463b      	mov	r3, r7
 8014d18:	464a      	mov	r2, r9
 8014d1a:	4621      	mov	r1, r4
 8014d1c:	4630      	mov	r0, r6
 8014d1e:	9500      	str	r5, [sp, #0]
 8014d20:	f7fa fb1c 	bl	800f35c <lv_obj_align>
        last_cord += lv_obj_get_width(child) + style->body.padding.inner;
 8014d24:	4630      	mov	r0, r6
 8014d26:	f7fa fe30 	bl	800f98a <lv_obj_get_width>
 8014d2a:	f8b8 301e 	ldrh.w	r3, [r8, #30]
 8014d2e:	441f      	add	r7, r3
 8014d30:	fa00 f787 	sxtah	r7, r0, r7
 8014d34:	b23f      	sxth	r7, r7
    LV_LL_READ_BACK(cont->child_ll, child)
 8014d36:	4631      	mov	r1, r6
 8014d38:	4650      	mov	r0, sl
 8014d3a:	f7fb f9c7 	bl	80100cc <lv_ll_get_prev>
 8014d3e:	e7dd      	b.n	8014cfc <lv_cont_refr_layout+0x1e2>
            vpad_corr = 0;
 8014d40:	2500      	movs	r5, #0
            align     = LV_ALIGN_IN_LEFT_MID;
 8014d42:	f04f 0907 	mov.w	r9, #7
 8014d46:	e7ce      	b.n	8014ce6 <lv_cont_refr_layout+0x1cc>
            vpad_corr = 0;
 8014d48:	2500      	movs	r5, #0
 8014d4a:	e7c4      	b.n	8014cd6 <lv_cont_refr_layout+0x1bc>
    } else if(type == LV_LAYOUT_PRETTY) {
 8014d4c:	2d08      	cmp	r5, #8
 8014d4e:	f040 80e8 	bne.w	8014f22 <lv_cont_refr_layout+0x408>
    const lv_style_t * style = lv_obj_get_style(cont);
 8014d52:	4620      	mov	r0, r4
 8014d54:	f7ed fff4 	bl	8002d40 <lv_obj_get_style>
 8014d58:	4681      	mov	r9, r0
    lv_coord_t w_obj         = lv_obj_get_width(cont);
 8014d5a:	4620      	mov	r0, r4
 8014d5c:	f7fa fe15 	bl	800f98a <lv_obj_get_width>
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 8014d60:	1d23      	adds	r3, r4, #4
    lv_coord_t w_obj         = lv_obj_get_width(cont);
 8014d62:	9004      	str	r0, [sp, #16]
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 8014d64:	4618      	mov	r0, r3
    lv_coord_t act_y         = style->body.padding.top;
 8014d66:	f9b9 b016 	ldrsh.w	fp, [r9, #22]
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 8014d6a:	9303      	str	r3, [sp, #12]
 8014d6c:	f7fb f99b 	bl	80100a6 <lv_ll_get_tail>
    if(child_rs == NULL) return;                /*Return if no child*/
 8014d70:	4605      	mov	r5, r0
 8014d72:	2800      	cmp	r0, #0
 8014d74:	f000 8173 	beq.w	801505e <lv_cont_refr_layout+0x544>
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8014d78:	2101      	movs	r1, #1
 8014d7a:	4620      	mov	r0, r4
 8014d7c:	f7fa f9c1 	bl	800f102 <lv_obj_set_protect>
        lv_coord_t w_row =
 8014d80:	f8b9 801a 	ldrh.w	r8, [r9, #26]
        uint32_t obj_num = 0;
 8014d84:	2700      	movs	r7, #0
        lv_coord_t w_row =
 8014d86:	f8b9 001c 	ldrh.w	r0, [r9, #28]
 8014d8a:	462e      	mov	r6, r5
        lv_coord_t h_row = 0;
 8014d8c:	46ba      	mov	sl, r7
        lv_coord_t w_row =
 8014d8e:	4480      	add	r8, r0
 8014d90:	fa0f f888 	sxth.w	r8, r8
            if(lv_obj_get_hidden(child_rc) == false && lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
 8014d94:	4628      	mov	r0, r5
 8014d96:	f7fa fe25 	bl	800f9e4 <lv_obj_get_hidden>
 8014d9a:	2800      	cmp	r0, #0
 8014d9c:	d13c      	bne.n	8014e18 <lv_cont_refr_layout+0x2fe>
 8014d9e:	2104      	movs	r1, #4
 8014da0:	4628      	mov	r0, r5
 8014da2:	f7fa fe82 	bl	800faaa <lv_obj_is_protected>
 8014da6:	bbb8      	cbnz	r0, 8014e18 <lv_cont_refr_layout+0x2fe>
                if(w_row + lv_obj_get_width(child_rc) > w_obj) {
 8014da8:	4628      	mov	r0, r5
 8014daa:	f7fa fdee 	bl	800f98a <lv_obj_get_width>
 8014dae:	9b04      	ldr	r3, [sp, #16]
 8014db0:	4440      	add	r0, r8
 8014db2:	4298      	cmp	r0, r3
 8014db4:	dd15      	ble.n	8014de2 <lv_cont_refr_layout+0x2c8>
                    if(child_rc != NULL && obj_num != 0) {
 8014db6:	2f00      	cmp	r7, #0
 8014db8:	f000 8131 	beq.w	801501e <lv_cont_refr_layout+0x504>
                        child_rc = lv_ll_get_next(&cont->child_ll, child_rc);
 8014dbc:	4629      	mov	r1, r5
 8014dbe:	9803      	ldr	r0, [sp, #12]
 8014dc0:	f7fb f974 	bl	80100ac <lv_ll_get_next>
 8014dc4:	4605      	mov	r5, r0
        else if(obj_num == 1) {
 8014dc6:	2f01      	cmp	r7, #1
 8014dc8:	d131      	bne.n	8014e2e <lv_cont_refr_layout+0x314>
            lv_obj_align(child_rs, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 8014dca:	2300      	movs	r3, #0
 8014dcc:	2202      	movs	r2, #2
 8014dce:	4621      	mov	r1, r4
 8014dd0:	4630      	mov	r0, r6
 8014dd2:	f8cd b000 	str.w	fp, [sp]
            lv_obj_align(obj2, cont, LV_ALIGN_IN_TOP_RIGHT, -pad, act_y + (h_row - lv_obj_get_height(obj2)) / 2);
 8014dd6:	f7fa fac1 	bl	800f35c <lv_obj_align>
        if(child_rc == NULL) break;
 8014dda:	2d00      	cmp	r5, #0
 8014ddc:	f040 812b 	bne.w	8015036 <lv_cont_refr_layout+0x51c>
 8014de0:	e6d1      	b.n	8014b86 <lv_cont_refr_layout+0x6c>
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 8014de2:	4628      	mov	r0, r5
 8014de4:	f7fa fdd1 	bl	800f98a <lv_obj_get_width>
 8014de8:	f8b9 301e 	ldrh.w	r3, [r9, #30]
 8014dec:	4498      	add	r8, r3
 8014dee:	fa00 f888 	sxtah	r8, r0, r8
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc));         /*Search the highest object*/
 8014df2:	4628      	mov	r0, r5
 8014df4:	f7fa fdcf 	bl	800f996 <lv_obj_get_height>
 8014df8:	4550      	cmp	r0, sl
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 8014dfa:	fa0f f888 	sxth.w	r8, r8
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc));         /*Search the highest object*/
 8014dfe:	db03      	blt.n	8014e08 <lv_cont_refr_layout+0x2ee>
 8014e00:	4628      	mov	r0, r5
 8014e02:	f7fa fdc8 	bl	800f996 <lv_obj_get_height>
 8014e06:	4682      	mov	sl, r0
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
 8014e08:	2108      	movs	r1, #8
 8014e0a:	4628      	mov	r0, r5
                obj_num++;
 8014e0c:	3701      	adds	r7, #1
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
 8014e0e:	f7fa fe4c 	bl	800faaa <lv_obj_is_protected>
 8014e12:	2800      	cmp	r0, #0
 8014e14:	f040 8100 	bne.w	8015018 <lv_cont_refr_layout+0x4fe>
            child_rc = lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
 8014e18:	4629      	mov	r1, r5
 8014e1a:	9803      	ldr	r0, [sp, #12]
 8014e1c:	f7fb f956 	bl	80100cc <lv_ll_get_prev>
 8014e20:	4605      	mov	r5, r0
            if(obj_num == 0)
 8014e22:	2f00      	cmp	r7, #0
 8014e24:	f000 8116 	beq.w	8015054 <lv_cont_refr_layout+0x53a>
        } while(child_rc != NULL);
 8014e28:	2800      	cmp	r0, #0
 8014e2a:	d1b3      	bne.n	8014d94 <lv_cont_refr_layout+0x27a>
 8014e2c:	e7cb      	b.n	8014dc6 <lv_cont_refr_layout+0x2ac>
        else if(obj_num == 2) {
 8014e2e:	2f02      	cmp	r7, #2
 8014e30:	d139      	bne.n	8014ea6 <lv_cont_refr_layout+0x38c>
            lv_obj_t * obj2 = lv_ll_get_prev(&cont->child_ll, child_rs);
 8014e32:	4631      	mov	r1, r6
 8014e34:	9803      	ldr	r0, [sp, #12]
 8014e36:	f7fb f949 	bl	80100cc <lv_ll_get_prev>
 8014e3a:	4607      	mov	r7, r0
            w_row           = lv_obj_get_width(obj1) + lv_obj_get_width(obj2);
 8014e3c:	4630      	mov	r0, r6
 8014e3e:	f7fa fda4 	bl	800f98a <lv_obj_get_width>
 8014e42:	4680      	mov	r8, r0
 8014e44:	4638      	mov	r0, r7
 8014e46:	f7fa fda0 	bl	800f98a <lv_obj_get_width>
 8014e4a:	eb08 0300 	add.w	r3, r8, r0
            lv_coord_t pad  = (w_obj - w_row) / 3;
 8014e4e:	9a04      	ldr	r2, [sp, #16]
 8014e50:	f04f 0803 	mov.w	r8, #3
 8014e54:	b21b      	sxth	r3, r3
            lv_obj_align(obj1, cont, LV_ALIGN_IN_TOP_LEFT, pad, act_y + (h_row - lv_obj_get_height(obj1)) / 2);
 8014e56:	4630      	mov	r0, r6
            lv_coord_t pad  = (w_obj - w_row) / 3;
 8014e58:	1ad3      	subs	r3, r2, r3
 8014e5a:	fb93 f3f8 	sdiv	r3, r3, r8
 8014e5e:	9305      	str	r3, [sp, #20]
            lv_obj_align(obj1, cont, LV_ALIGN_IN_TOP_LEFT, pad, act_y + (h_row - lv_obj_get_height(obj1)) / 2);
 8014e60:	f7fa fd99 	bl	800f996 <lv_obj_get_height>
 8014e64:	ebaa 0000 	sub.w	r0, sl, r0
 8014e68:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8014e6c:	2201      	movs	r2, #1
 8014e6e:	4621      	mov	r1, r4
 8014e70:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8014e74:	eb0b 0060 	add.w	r0, fp, r0, asr #1
 8014e78:	b200      	sxth	r0, r0
 8014e7a:	9000      	str	r0, [sp, #0]
 8014e7c:	4630      	mov	r0, r6
 8014e7e:	f7fa fa6d 	bl	800f35c <lv_obj_align>
            lv_obj_align(obj2, cont, LV_ALIGN_IN_TOP_RIGHT, -pad, act_y + (h_row - lv_obj_get_height(obj2)) / 2);
 8014e82:	4638      	mov	r0, r7
 8014e84:	f7fa fd87 	bl	800f996 <lv_obj_get_height>
 8014e88:	ebaa 0000 	sub.w	r0, sl, r0
 8014e8c:	9b05      	ldr	r3, [sp, #20]
 8014e8e:	4642      	mov	r2, r8
 8014e90:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8014e94:	4621      	mov	r1, r4
 8014e96:	425b      	negs	r3, r3
 8014e98:	eb0b 0060 	add.w	r0, fp, r0, asr #1
 8014e9c:	b21b      	sxth	r3, r3
 8014e9e:	b200      	sxth	r0, r0
 8014ea0:	9000      	str	r0, [sp, #0]
 8014ea2:	4638      	mov	r0, r7
 8014ea4:	e797      	b.n	8014dd6 <lv_cont_refr_layout+0x2bc>
            w_row -= style->body.padding.inner * obj_num;
 8014ea6:	f9b9 001e 	ldrsh.w	r0, [r9, #30]
            lv_coord_t new_opad = (w_obj - w_row) / (obj_num - 1);
 8014eaa:	9b04      	ldr	r3, [sp, #16]
            w_row -= style->body.padding.inner * obj_num;
 8014eac:	fb10 f007 	smulbb	r0, r0, r7
            lv_coord_t new_opad = (w_obj - w_row) / (obj_num - 1);
 8014eb0:	3f01      	subs	r7, #1
            w_row -= style->body.padding.inner * obj_num;
 8014eb2:	eba8 0800 	sub.w	r8, r8, r0
            lv_coord_t new_opad = (w_obj - w_row) / (obj_num - 1);
 8014eb6:	fa0f f888 	sxth.w	r8, r8
 8014eba:	eba3 0808 	sub.w	r8, r3, r8
 8014ebe:	fbb8 f8f7 	udiv	r8, r8, r7
            lv_coord_t act_x    = style->body.padding.left; /*x init*/
 8014ec2:	f9b9 701a 	ldrsh.w	r7, [r9, #26]
            lv_coord_t new_opad = (w_obj - w_row) / (obj_num - 1);
 8014ec6:	fa0f f888 	sxth.w	r8, r8
            while(child_tmp != NULL) {
 8014eca:	2e00      	cmp	r6, #0
 8014ecc:	d085      	beq.n	8014dda <lv_cont_refr_layout+0x2c0>
                if(lv_obj_get_hidden(child_tmp) == false && lv_obj_is_protected(child_tmp, LV_PROTECT_POS) == false) {
 8014ece:	4630      	mov	r0, r6
 8014ed0:	f7fa fd88 	bl	800f9e4 <lv_obj_get_hidden>
 8014ed4:	b9e0      	cbnz	r0, 8014f10 <lv_cont_refr_layout+0x3f6>
 8014ed6:	2104      	movs	r1, #4
 8014ed8:	4630      	mov	r0, r6
 8014eda:	f7fa fde6 	bl	800faaa <lv_obj_is_protected>
 8014ede:	b9b8      	cbnz	r0, 8014f10 <lv_cont_refr_layout+0x3f6>
                                 act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
 8014ee0:	4630      	mov	r0, r6
 8014ee2:	f7fa fd58 	bl	800f996 <lv_obj_get_height>
 8014ee6:	ebaa 0000 	sub.w	r0, sl, r0
                    lv_obj_align(child_tmp, cont, LV_ALIGN_IN_TOP_LEFT, act_x,
 8014eea:	463b      	mov	r3, r7
 8014eec:	2201      	movs	r2, #1
                                 act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
 8014eee:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
                    lv_obj_align(child_tmp, cont, LV_ALIGN_IN_TOP_LEFT, act_x,
 8014ef2:	4621      	mov	r1, r4
 8014ef4:	4447      	add	r7, r8
 8014ef6:	eb0b 0060 	add.w	r0, fp, r0, asr #1
 8014efa:	b200      	sxth	r0, r0
 8014efc:	9000      	str	r0, [sp, #0]
 8014efe:	4630      	mov	r0, r6
 8014f00:	f7fa fa2c 	bl	800f35c <lv_obj_align>
                    act_x += lv_obj_get_width(child_tmp) + new_opad;
 8014f04:	4630      	mov	r0, r6
 8014f06:	f7fa fd40 	bl	800f98a <lv_obj_get_width>
 8014f0a:	fa00 f787 	sxtah	r7, r0, r7
 8014f0e:	b23f      	sxth	r7, r7
                if(child_tmp == child_rc) break;
 8014f10:	42ae      	cmp	r6, r5
 8014f12:	f000 8090 	beq.w	8015036 <lv_cont_refr_layout+0x51c>
                child_tmp = lv_ll_get_prev(&cont->child_ll, child_tmp);
 8014f16:	4631      	mov	r1, r6
 8014f18:	9803      	ldr	r0, [sp, #12]
 8014f1a:	f7fb f8d7 	bl	80100cc <lv_ll_get_prev>
 8014f1e:	4606      	mov	r6, r0
 8014f20:	e7d3      	b.n	8014eca <lv_cont_refr_layout+0x3b0>
    } else if(type == LV_LAYOUT_GRID) {
 8014f22:	2d09      	cmp	r5, #9
 8014f24:	f040 809b 	bne.w	801505e <lv_cont_refr_layout+0x544>
    const lv_style_t * style = lv_obj_get_style(cont);
 8014f28:	4620      	mov	r0, r4
 8014f2a:	f7ed ff09 	bl	8002d40 <lv_obj_get_style>
 8014f2e:	4606      	mov	r6, r0
    lv_coord_t w_tot         = lv_obj_get_width(cont);
 8014f30:	4620      	mov	r0, r4
 8014f32:	f7fa fd2a 	bl	800f98a <lv_obj_get_width>
    lv_coord_t w_obj         = lv_obj_get_width(lv_obj_get_child(cont, NULL));
 8014f36:	2100      	movs	r1, #0
    lv_coord_t w_tot         = lv_obj_get_width(cont);
 8014f38:	4605      	mov	r5, r0
    lv_coord_t w_obj         = lv_obj_get_width(lv_obj_get_child(cont, NULL));
 8014f3a:	4620      	mov	r0, r4
 8014f3c:	f7fa fce0 	bl	800f900 <lv_obj_get_child>
 8014f40:	f7fa fd23 	bl	800f98a <lv_obj_get_width>
    lv_coord_t h_obj         = lv_obj_get_height(lv_obj_get_child(cont, NULL));
 8014f44:	2100      	movs	r1, #0
    lv_coord_t w_obj         = lv_obj_get_width(lv_obj_get_child(cont, NULL));
 8014f46:	4607      	mov	r7, r0
    lv_coord_t h_obj         = lv_obj_get_height(lv_obj_get_child(cont, NULL));
 8014f48:	4620      	mov	r0, r4
 8014f4a:	f7fa fcd9 	bl	800f900 <lv_obj_get_child>
 8014f4e:	f7fa fd22 	bl	800f996 <lv_obj_get_height>
    uint16_t obj_row         = (w_tot - style->body.padding.left - style->body.padding.right) /
 8014f52:	f9b6 201c 	ldrsh.w	r2, [r6, #28]
 8014f56:	f9b6 301a 	ldrsh.w	r3, [r6, #26]
 8014f5a:	4413      	add	r3, r2
                       (w_obj + style->body.padding.inner); /*Obj. num. in a row*/
 8014f5c:	f9b6 201e 	ldrsh.w	r2, [r6, #30]
    uint16_t obj_row         = (w_tot - style->body.padding.left - style->body.padding.right) /
 8014f60:	1aeb      	subs	r3, r5, r3
                       (w_obj + style->body.padding.inner); /*Obj. num. in a row*/
 8014f62:	19d1      	adds	r1, r2, r7
    uint16_t obj_row         = (w_tot - style->body.padding.left - style->body.padding.right) /
 8014f64:	fb93 f1f1 	sdiv	r1, r3, r1
 8014f68:	fa1f fa81 	uxth.w	sl, r1
    if(obj_row > 1) {
 8014f6c:	f1ba 0f01 	cmp.w	sl, #1
 8014f70:	d945      	bls.n	8014ffe <lv_cont_refr_layout+0x4e4>
        x_ofs = (w_obj + (w_tot - style->body.padding.left - style->body.padding.right) - (obj_row * w_obj)) /
 8014f72:	19dd      	adds	r5, r3, r7
                (obj_row - 1);
 8014f74:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
        x_ofs = (w_obj + (w_tot - style->body.padding.left - style->body.padding.right) - (obj_row * w_obj)) /
 8014f78:	fb0a 5517 	mls	r5, sl, r7, r5
 8014f7c:	fb95 f5f1 	sdiv	r5, r5, r1
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 8014f80:	4410      	add	r0, r2
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8014f82:	2101      	movs	r1, #1
        x_ofs = w_tot / 2 - w_obj / 2;
 8014f84:	b22d      	sxth	r5, r5
    uint16_t obj_cnt = 0;
 8014f86:	f04f 0900 	mov.w	r9, #0
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 8014f8a:	b203      	sxth	r3, r0
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8014f8c:	4620      	mov	r0, r4
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 8014f8e:	9304      	str	r3, [sp, #16]
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 8014f90:	f7fa f8b7 	bl	800f102 <lv_obj_set_protect>
    LV_LL_READ_BACK(cont->child_ll, child)
 8014f94:	1d23      	adds	r3, r4, #4
    lv_coord_t act_x = style->body.padding.left;
 8014f96:	f9b6 701a 	ldrsh.w	r7, [r6, #26]
    lv_coord_t act_y = style->body.padding.top;
 8014f9a:	f9b6 8016 	ldrsh.w	r8, [r6, #22]
    LV_LL_READ_BACK(cont->child_ll, child)
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	9303      	str	r3, [sp, #12]
 8014fa2:	f7fb f880 	bl	80100a6 <lv_ll_get_tail>
 8014fa6:	4683      	mov	fp, r0
 8014fa8:	f1bb 0f00 	cmp.w	fp, #0
 8014fac:	f43f adeb 	beq.w	8014b86 <lv_cont_refr_layout+0x6c>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8014fb0:	4658      	mov	r0, fp
 8014fb2:	f7fa fd17 	bl	800f9e4 <lv_obj_get_hidden>
 8014fb6:	b9e0      	cbnz	r0, 8014ff2 <lv_cont_refr_layout+0x4d8>
 8014fb8:	2104      	movs	r1, #4
 8014fba:	4658      	mov	r0, fp
 8014fbc:	f7fa fd75 	bl	800faaa <lv_obj_is_protected>
 8014fc0:	b9b8      	cbnz	r0, 8014ff2 <lv_cont_refr_layout+0x4d8>
        if(obj_row > 1) {
 8014fc2:	f1ba 0f01 	cmp.w	sl, #1
            lv_obj_set_pos(child, act_x, act_y);
 8014fc6:	4642      	mov	r2, r8
        if(obj_row > 1) {
 8014fc8:	d921      	bls.n	801500e <lv_cont_refr_layout+0x4f4>
            lv_obj_set_pos(child, act_x, act_y);
 8014fca:	4639      	mov	r1, r7
            act_x += x_ofs;
 8014fcc:	442f      	add	r7, r5
            lv_obj_set_pos(child, act_x, act_y);
 8014fce:	4658      	mov	r0, fp
            act_x += x_ofs;
 8014fd0:	b23f      	sxth	r7, r7
            lv_obj_set_pos(child, act_x, act_y);
 8014fd2:	f7fa f97a 	bl	800f2ca <lv_obj_set_pos>
        obj_cnt++;
 8014fd6:	f109 0901 	add.w	r9, r9, #1
 8014fda:	fa1f f989 	uxth.w	r9, r9
        if(obj_cnt >= obj_row) {
 8014fde:	45ca      	cmp	sl, r9
 8014fe0:	d807      	bhi.n	8014ff2 <lv_cont_refr_layout+0x4d8>
            act_y += y_ofs;
 8014fe2:	9b04      	ldr	r3, [sp, #16]
            obj_cnt = 0;
 8014fe4:	f04f 0900 	mov.w	r9, #0
            act_x   = style->body.padding.left;
 8014fe8:	f9b6 701a 	ldrsh.w	r7, [r6, #26]
            act_y += y_ofs;
 8014fec:	4498      	add	r8, r3
 8014fee:	fa0f f888 	sxth.w	r8, r8
    LV_LL_READ_BACK(cont->child_ll, child)
 8014ff2:	4659      	mov	r1, fp
 8014ff4:	9803      	ldr	r0, [sp, #12]
 8014ff6:	f7fb f869 	bl	80100cc <lv_ll_get_prev>
 8014ffa:	4683      	mov	fp, r0
 8014ffc:	e7d4      	b.n	8014fa8 <lv_cont_refr_layout+0x48e>
        x_ofs = w_tot / 2 - w_obj / 2;
 8014ffe:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
 8015002:	eb07 75d7 	add.w	r5, r7, r7, lsr #31
 8015006:	106d      	asrs	r5, r5, #1
 8015008:	ebc5 0563 	rsb	r5, r5, r3, asr #1
 801500c:	e7b8      	b.n	8014f80 <lv_cont_refr_layout+0x466>
            lv_obj_set_pos(child, x_ofs, act_y);
 801500e:	4629      	mov	r1, r5
 8015010:	4658      	mov	r0, fp
 8015012:	f7fa f95a 	bl	800f2ca <lv_obj_set_pos>
 8015016:	e7de      	b.n	8014fd6 <lv_cont_refr_layout+0x4bc>
        if(obj_num == 0) {
 8015018:	2f00      	cmp	r7, #0
 801501a:	f47f aed4 	bne.w	8014dc6 <lv_cont_refr_layout+0x2ac>
                lv_obj_align(child_rc, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 801501e:	2300      	movs	r3, #0
 8015020:	2202      	movs	r2, #2
 8015022:	4621      	mov	r1, r4
 8015024:	4628      	mov	r0, r5
 8015026:	f8cd b000 	str.w	fp, [sp]
 801502a:	f7fa f997 	bl	800f35c <lv_obj_align>
                h_row = lv_obj_get_height(child_rc); /*Not set previously because of the early break*/
 801502e:	4628      	mov	r0, r5
 8015030:	f7fa fcb1 	bl	800f996 <lv_obj_get_height>
 8015034:	4682      	mov	sl, r0
        act_y += style->body.padding.inner + h_row;           /*y increment*/
 8015036:	f8b9 301e 	ldrh.w	r3, [r9, #30]
        child_rs = lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 801503a:	4629      	mov	r1, r5
 801503c:	9803      	ldr	r0, [sp, #12]
        act_y += style->body.padding.inner + h_row;           /*y increment*/
 801503e:	449a      	add	sl, r3
        child_rs = lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 8015040:	f7fb f844 	bl	80100cc <lv_ll_get_prev>
    while(child_rs != NULL) {
 8015044:	4605      	mov	r5, r0
        act_y += style->body.padding.inner + h_row;           /*y increment*/
 8015046:	44d3      	add	fp, sl
 8015048:	fa0f fb8b 	sxth.w	fp, fp
    while(child_rs != NULL) {
 801504c:	2800      	cmp	r0, #0
 801504e:	f47f ae97 	bne.w	8014d80 <lv_cont_refr_layout+0x266>
 8015052:	e598      	b.n	8014b86 <lv_cont_refr_layout+0x6c>
        } while(child_rc != NULL);
 8015054:	2800      	cmp	r0, #0
 8015056:	f43f ad96 	beq.w	8014b86 <lv_cont_refr_layout+0x6c>
            child_rc = lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
 801505a:	462e      	mov	r6, r5
 801505c:	e69a      	b.n	8014d94 <lv_cont_refr_layout+0x27a>
}
 801505e:	b007      	add	sp, #28
 8015060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015064 <lv_cont_get_fit_left>:
{
 8015064:	b508      	push	{r3, lr}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8015066:	f7fa fd2b 	bl	800fac0 <lv_obj_get_ext_attr>
    return ext->fit_left;
 801506a:	7800      	ldrb	r0, [r0, #0]
}
 801506c:	f3c0 1001 	ubfx	r0, r0, #4, #2
 8015070:	bd08      	pop	{r3, pc}

08015072 <lv_cont_get_fit_top>:
{
 8015072:	b508      	push	{r3, lr}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8015074:	f7fa fd24 	bl	800fac0 <lv_obj_get_ext_attr>
    return ext->fit_top;
 8015078:	7840      	ldrb	r0, [r0, #1]
}
 801507a:	f000 0003 	and.w	r0, r0, #3
 801507e:	bd08      	pop	{r3, pc}

08015080 <lv_list_set_btn_selected>:
{
 8015080:	b570      	push	{r4, r5, r6, lr}
 8015082:	4606      	mov	r6, r0
 8015084:	460d      	mov	r5, r1
    lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 8015086:	f7fa fd1b 	bl	800fac0 <lv_obj_get_ext_attr>
 801508a:	4604      	mov	r4, r0
    if(ext->selected_btn) {
 801508c:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801508e:	b138      	cbz	r0, 80150a0 <lv_list_set_btn_selected+0x20>
        lv_btn_state_t s = lv_btn_get_state(ext->selected_btn);
 8015090:	f7ff fb7e 	bl	8014790 <lv_btn_get_state>
        if(s == LV_BTN_STATE_PR)
 8015094:	2801      	cmp	r0, #1
 8015096:	d119      	bne.n	80150cc <lv_list_set_btn_selected+0x4c>
            lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_REL);
 8015098:	2100      	movs	r1, #0
            lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_TGL_REL);
 801509a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801509c:	f7ff fb41 	bl	8014722 <lv_btn_set_state>
    ext->selected_btn = btn;
 80150a0:	6525      	str	r5, [r4, #80]	; 0x50
    if(btn != NULL) {
 80150a2:	b1dd      	cbz	r5, 80150dc <lv_list_set_btn_selected+0x5c>
        ext->last_sel = btn;
 80150a4:	64e5      	str	r5, [r4, #76]	; 0x4c
        lv_btn_state_t s = lv_btn_get_state(ext->selected_btn);
 80150a6:	4628      	mov	r0, r5
 80150a8:	f7ff fb72 	bl	8014790 <lv_btn_get_state>
        if(s == LV_BTN_STATE_REL)
 80150ac:	b990      	cbnz	r0, 80150d4 <lv_list_set_btn_selected+0x54>
            lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_PR);
 80150ae:	2101      	movs	r1, #1
            lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_TGL_PR);
 80150b0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80150b2:	f7ff fb36 	bl	8014722 <lv_btn_set_state>
        lv_page_focus(list, ext->selected_btn, lv_list_get_anim_time(list));
 80150b6:	6d24      	ldr	r4, [r4, #80]	; 0x50
 * @param list pointer to a list object
 * @return duration of animation [ms]
 */
static inline uint16_t lv_list_get_anim_time(const lv_obj_t * list)
{
    return lv_page_get_anim_time(list);
 80150b8:	4630      	mov	r0, r6
 80150ba:	f000 fb8d 	bl	80157d8 <lv_page_get_anim_time>
 80150be:	4621      	mov	r1, r4
 80150c0:	b2c2      	uxtb	r2, r0
 80150c2:	4630      	mov	r0, r6
}
 80150c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_page_focus(list, ext->selected_btn, lv_list_get_anim_time(list));
 80150c8:	f7f4 ba10 	b.w	80094ec <lv_page_focus>
        else if(s == LV_BTN_STATE_TGL_PR)
 80150cc:	2803      	cmp	r0, #3
 80150ce:	d1e7      	bne.n	80150a0 <lv_list_set_btn_selected+0x20>
            lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_TGL_REL);
 80150d0:	2102      	movs	r1, #2
 80150d2:	e7e2      	b.n	801509a <lv_list_set_btn_selected+0x1a>
        else if(s == LV_BTN_STATE_TGL_REL)
 80150d4:	2802      	cmp	r0, #2
 80150d6:	d1ee      	bne.n	80150b6 <lv_list_set_btn_selected+0x36>
            lv_btn_set_state(ext->selected_btn, LV_BTN_STATE_TGL_PR);
 80150d8:	2103      	movs	r1, #3
 80150da:	e7e9      	b.n	80150b0 <lv_list_set_btn_selected+0x30>
}
 80150dc:	bd70      	pop	{r4, r5, r6, pc}

080150de <lv_list_get_prev_btn>:
{
 80150de:	b538      	push	{r3, r4, r5, lr}
 80150e0:	460c      	mov	r4, r1
    lv_obj_t * scrl = lv_page_get_scrl(list);
 80150e2:	f000 fb74 	bl	80157ce <lv_page_get_scrl>
 80150e6:	4605      	mov	r5, r0
    btn = lv_obj_get_child(scrl, prev_btn);
 80150e8:	4621      	mov	r1, r4
 80150ea:	f7fa fc09 	bl	800f900 <lv_obj_get_child>
    if(btn == NULL) return NULL;
 80150ee:	4604      	mov	r4, r0
 80150f0:	b910      	cbnz	r0, 80150f8 <lv_list_get_prev_btn+0x1a>
 80150f2:	2400      	movs	r4, #0
}
 80150f4:	4620      	mov	r0, r4
 80150f6:	bd38      	pop	{r3, r4, r5, pc}
    while(lv_list_is_list_btn(btn) == false) {
 80150f8:	f7f3 fa9c 	bl	8008634 <lv_list_is_list_btn>
 80150fc:	2800      	cmp	r0, #0
 80150fe:	d1f9      	bne.n	80150f4 <lv_list_get_prev_btn+0x16>
        btn = lv_obj_get_child(scrl, btn);
 8015100:	4621      	mov	r1, r4
 8015102:	4628      	mov	r0, r5
 8015104:	e7f1      	b.n	80150ea <lv_list_get_prev_btn+0xc>

08015106 <lv_list_set_style>:
{
 8015106:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801510a:	460f      	mov	r7, r1
 801510c:	9201      	str	r2, [sp, #4]
 801510e:	4606      	mov	r6, r0
    lv_list_ext_t * ext           = lv_obj_get_ext_attr(list);
 8015110:	f7fa fcd6 	bl	800fac0 <lv_obj_get_ext_attr>
    switch(type) {
 8015114:	9a01      	ldr	r2, [sp, #4]
    lv_list_ext_t * ext           = lv_obj_get_ext_attr(list);
 8015116:	4605      	mov	r5, r0
    switch(type) {
 8015118:	2f08      	cmp	r7, #8
 801511a:	d81d      	bhi.n	8015158 <lv_list_set_style+0x52>
 801511c:	e8df f007 	tbb	[pc, r7]
 8015120:	201e1805 	.word	0x201e1805
 8015124:	2a272422 	.word	0x2a272422
 8015128:	2d          	.byte	0x2d
 8015129:	00          	.byte	0x00
    lv_btn_style_t btn_style_refr = LV_BTN_STYLE_REL;
 801512a:	463c      	mov	r4, r7
            lv_page_set_style(list, LV_PAGE_STYLE_BG, style);
 801512c:	2100      	movs	r1, #0
 801512e:	4630      	mov	r0, r6
 8015130:	f000 fb1d 	bl	801576e <lv_page_set_style>
    if(type == LV_LIST_STYLE_BTN_PR || type == LV_LIST_STYLE_BTN_REL || type == LV_LIST_STYLE_BTN_TGL_REL ||
 8015134:	3f04      	subs	r7, #4
 8015136:	2f04      	cmp	r7, #4
 8015138:	d807      	bhi.n	801514a <lv_list_set_style+0x44>
        btn = lv_list_get_prev_btn(list, NULL);
 801513a:	2100      	movs	r1, #0
 801513c:	4630      	mov	r0, r6
 801513e:	f7ff ffce 	bl	80150de <lv_list_get_prev_btn>
            lv_btn_set_style(btn, btn_style_refr, ext->styles_btn[btn_style_refr]);
 8015142:	f104 080c 	add.w	r8, r4, #12
        btn = lv_list_get_prev_btn(list, NULL);
 8015146:	4607      	mov	r7, r0
        while(btn != NULL) {
 8015148:	b9d7      	cbnz	r7, 8015180 <lv_list_set_style+0x7a>
}
 801514a:	b002      	add	sp, #8
 801514c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        case LV_LIST_STYLE_SCRL: lv_page_set_style(list, LV_PAGE_STYLE_SCRL, style); break;
 8015150:	2101      	movs	r1, #1
        case LV_LIST_STYLE_SB: lv_page_set_style(list, LV_PAGE_STYLE_SB, style); break;
 8015152:	4630      	mov	r0, r6
 8015154:	f000 fb0b 	bl	801576e <lv_page_set_style>
    lv_btn_style_t btn_style_refr = LV_BTN_STYLE_REL;
 8015158:	2400      	movs	r4, #0
 801515a:	e7eb      	b.n	8015134 <lv_list_set_style+0x2e>
        case LV_LIST_STYLE_SB: lv_page_set_style(list, LV_PAGE_STYLE_SB, style); break;
 801515c:	2102      	movs	r1, #2
 801515e:	e7f8      	b.n	8015152 <lv_list_set_style+0x4c>
        case LV_LIST_STYLE_EDGE_FLASH: lv_page_set_style(list, LV_PAGE_STYLE_EDGE_FLASH, style); break;
 8015160:	2103      	movs	r1, #3
 8015162:	e7f6      	b.n	8015152 <lv_list_set_style+0x4c>
            ext->styles_btn[LV_BTN_STATE_REL] = style;
 8015164:	6302      	str	r2, [r0, #48]	; 0x30
            break;
 8015166:	e7f7      	b.n	8015158 <lv_list_set_style+0x52>
            ext->styles_btn[LV_BTN_STATE_PR] = style;
 8015168:	6342      	str	r2, [r0, #52]	; 0x34
            btn_style_refr                   = LV_BTN_STYLE_PR;
 801516a:	2401      	movs	r4, #1
            break;
 801516c:	e7e2      	b.n	8015134 <lv_list_set_style+0x2e>
            ext->styles_btn[LV_BTN_STATE_TGL_REL] = style;
 801516e:	6382      	str	r2, [r0, #56]	; 0x38
            btn_style_refr                        = LV_BTN_STYLE_TGL_REL;
 8015170:	2402      	movs	r4, #2
            break;
 8015172:	e7df      	b.n	8015134 <lv_list_set_style+0x2e>
            ext->styles_btn[LV_BTN_STATE_TGL_PR] = style;
 8015174:	63c2      	str	r2, [r0, #60]	; 0x3c
            btn_style_refr                       = LV_BTN_STYLE_TGL_PR;
 8015176:	2403      	movs	r4, #3
            break;
 8015178:	e7dc      	b.n	8015134 <lv_list_set_style+0x2e>
            ext->styles_btn[LV_BTN_STATE_INA] = style;
 801517a:	6402      	str	r2, [r0, #64]	; 0x40
            btn_style_refr                    = LV_BTN_STYLE_INA;
 801517c:	2404      	movs	r4, #4
            break;
 801517e:	e7d9      	b.n	8015134 <lv_list_set_style+0x2e>
            lv_btn_set_style(btn, btn_style_refr, ext->styles_btn[btn_style_refr]);
 8015180:	4638      	mov	r0, r7
 8015182:	f855 2028 	ldr.w	r2, [r5, r8, lsl #2]
 8015186:	4621      	mov	r1, r4
 8015188:	f7ff fae1 	bl	801474e <lv_btn_set_style>
            btn = lv_list_get_prev_btn(list, btn);
 801518c:	4639      	mov	r1, r7
 801518e:	4630      	mov	r0, r6
 8015190:	f7ff ffa5 	bl	80150de <lv_list_get_prev_btn>
 8015194:	4607      	mov	r7, r0
 8015196:	e7d7      	b.n	8015148 <lv_list_set_style+0x42>

08015198 <lv_list_get_next_btn>:
{
 8015198:	b538      	push	{r3, r4, r5, lr}
 801519a:	460c      	mov	r4, r1
    lv_obj_t * scrl = lv_page_get_scrl(list);
 801519c:	f000 fb17 	bl	80157ce <lv_page_get_scrl>
 80151a0:	4605      	mov	r5, r0
    btn = lv_obj_get_child_back(scrl, prev_btn);
 80151a2:	4621      	mov	r1, r4
 80151a4:	f7fa fbd8 	bl	800f958 <lv_obj_get_child_back>
    if(btn == NULL) return NULL;
 80151a8:	4604      	mov	r4, r0
 80151aa:	b910      	cbnz	r0, 80151b2 <lv_list_get_next_btn+0x1a>
 80151ac:	2400      	movs	r4, #0
}
 80151ae:	4620      	mov	r0, r4
 80151b0:	bd38      	pop	{r3, r4, r5, pc}
    while(lv_list_is_list_btn(btn) == false) {
 80151b2:	f7f3 fa3f 	bl	8008634 <lv_list_is_list_btn>
 80151b6:	2800      	cmp	r0, #0
 80151b8:	d1f9      	bne.n	80151ae <lv_list_get_next_btn+0x16>
        btn = lv_obj_get_child_back(scrl, btn);
 80151ba:	4621      	mov	r1, r4
 80151bc:	4628      	mov	r0, r5
 80151be:	e7f1      	b.n	80151a4 <lv_list_get_next_btn+0xc>

080151c0 <lv_list_get_btn_selected>:
{
 80151c0:	b508      	push	{r3, lr}
    lv_list_ext_t * ext = lv_obj_get_ext_attr(list);
 80151c2:	f7fa fc7d 	bl	800fac0 <lv_obj_get_ext_attr>
}
 80151c6:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80151c8:	bd08      	pop	{r3, pc}

080151ca <lv_mbox_close_ready_cb>:
}

#if LV_USE_ANIMATION
static void lv_mbox_close_ready_cb(lv_anim_t * a)
{
    lv_obj_del(a->var);
 80151ca:	6800      	ldr	r0, [r0, #0]
 80151cc:	f7fa bb2c 	b.w	800f828 <lv_obj_del>

080151d0 <lv_mbox_get_active_btn>:
{
 80151d0:	b508      	push	{r3, lr}
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 80151d2:	f7fa fc75 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->btnm)
 80151d6:	6880      	ldr	r0, [r0, #8]
 80151d8:	b118      	cbz	r0, 80151e2 <lv_mbox_get_active_btn+0x12>
}
 80151da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return lv_btnm_get_active_btn(ext->btnm);
 80151de:	f7ff bbdf 	b.w	80149a0 <lv_btnm_get_active_btn>
}
 80151e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80151e6:	bd08      	pop	{r3, pc}

080151e8 <lv_mbox_get_anim_time>:
{
 80151e8:	b508      	push	{r3, lr}
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 80151ea:	f7fa fc69 	bl	800fac0 <lv_obj_get_ext_attr>
}
 80151ee:	8980      	ldrh	r0, [r0, #12]
 80151f0:	bd08      	pop	{r3, pc}

080151f2 <lv_mbox_default_event_cb>:
}
#endif

static void lv_mbox_default_event_cb(lv_obj_t * mbox, lv_event_t event)
{
    if(event != LV_EVENT_VALUE_CHANGED) return;
 80151f2:	290e      	cmp	r1, #14
{
 80151f4:	b510      	push	{r4, lr}
 80151f6:	4604      	mov	r4, r0
    if(event != LV_EVENT_VALUE_CHANGED) return;
 80151f8:	d10b      	bne.n	8015212 <lv_mbox_default_event_cb+0x20>

    uint32_t btn_id = lv_mbox_get_active_btn(mbox);
 80151fa:	f7ff ffe9 	bl	80151d0 <lv_mbox_get_active_btn>
    if(btn_id == LV_BTNM_BTN_NONE) return;
 80151fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015202:	4298      	cmp	r0, r3
 8015204:	d005      	beq.n	8015212 <lv_mbox_default_event_cb+0x20>

    lv_mbox_start_auto_close(mbox, 0);
 8015206:	4620      	mov	r0, r4
 8015208:	2100      	movs	r1, #0
}
 801520a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_mbox_start_auto_close(mbox, 0);
 801520e:	f7f3 bd81 	b.w	8008d14 <lv_mbox_start_auto_close>
}
 8015212:	bd10      	pop	{r4, pc}

08015214 <lv_mbox_get_style>:
{
 8015214:	b538      	push	{r3, r4, r5, lr}
 8015216:	460c      	mov	r4, r1
 8015218:	4605      	mov	r5, r0
    lv_mbox_ext_t * ext      = lv_obj_get_ext_attr(mbox);
 801521a:	f7fa fc51 	bl	800fac0 <lv_obj_get_ext_attr>
    switch(type) {
 801521e:	2c06      	cmp	r4, #6
 8015220:	d81a      	bhi.n	8015258 <lv_mbox_get_style+0x44>
 8015222:	e8df f004 	tbb	[pc, r4]
 8015226:	0904      	.short	0x0904
 8015228:	1513110f 	.word	0x1513110f
 801522c:	17          	.byte	0x17
 801522d:	00          	.byte	0x00
        case LV_MBOX_STYLE_BG: style = lv_obj_get_style(mbox); break;
 801522e:	4628      	mov	r0, r5
}
 8015230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        case LV_MBOX_STYLE_BG: style = lv_obj_get_style(mbox); break;
 8015234:	f7ed bd84 	b.w	8002d40 <lv_obj_get_style>
        case LV_MBOX_STYLE_BTN_BG: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BG); break;
 8015238:	2100      	movs	r1, #0
        case LV_MBOX_STYLE_BTN_INA: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_INA); break;
 801523a:	6880      	ldr	r0, [r0, #8]
}
 801523c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        case LV_MBOX_STYLE_BTN_INA: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_INA); break;
 8015240:	f7ff bbe9 	b.w	8014a16 <lv_btnm_get_style>
        case LV_MBOX_STYLE_BTN_REL: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_REL); break;
 8015244:	2101      	movs	r1, #1
 8015246:	e7f8      	b.n	801523a <lv_mbox_get_style+0x26>
        case LV_MBOX_STYLE_BTN_PR: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_PR); break;
 8015248:	2102      	movs	r1, #2
 801524a:	e7f6      	b.n	801523a <lv_mbox_get_style+0x26>
        case LV_MBOX_STYLE_BTN_TGL_REL: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_REL); break;
 801524c:	2103      	movs	r1, #3
 801524e:	e7f4      	b.n	801523a <lv_mbox_get_style+0x26>
        case LV_MBOX_STYLE_BTN_TGL_PR: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_PR); break;
 8015250:	2104      	movs	r1, #4
 8015252:	e7f2      	b.n	801523a <lv_mbox_get_style+0x26>
        case LV_MBOX_STYLE_BTN_INA: style = lv_btnm_get_style(ext->btnm, LV_BTNM_STYLE_BTN_INA); break;
 8015254:	2105      	movs	r1, #5
 8015256:	e7f0      	b.n	801523a <lv_mbox_get_style+0x26>
}
 8015258:	2000      	movs	r0, #0
 801525a:	bd38      	pop	{r3, r4, r5, pc}

0801525c <mbox_realign>:
{
 801525c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801525e:	4606      	mov	r6, r0
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 8015260:	f7fa fc2e 	bl	800fac0 <lv_obj_get_ext_attr>
    const lv_style_t * style = lv_mbox_get_style(mbox, LV_MBOX_STYLE_BG);
 8015264:	2100      	movs	r1, #0
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 8015266:	4605      	mov	r5, r0
    const lv_style_t * style = lv_mbox_get_style(mbox, LV_MBOX_STYLE_BG);
 8015268:	4630      	mov	r0, r6
 801526a:	f7ff ffd3 	bl	8015214 <lv_mbox_get_style>
 801526e:	4607      	mov	r7, r0
    lv_coord_t w             = lv_obj_get_width(mbox) - style->body.padding.left - style->body.padding.right;
 8015270:	4630      	mov	r0, r6
 8015272:	f7fa fb8a 	bl	800f98a <lv_obj_get_width>
 8015276:	8b7c      	ldrh	r4, [r7, #26]
 8015278:	8bbb      	ldrh	r3, [r7, #28]
 801527a:	441c      	add	r4, r3
 801527c:	1b04      	subs	r4, r0, r4
    if(ext->text) {
 801527e:	6868      	ldr	r0, [r5, #4]
    lv_coord_t w             = lv_obj_get_width(mbox) - style->body.padding.left - style->body.padding.right;
 8015280:	b224      	sxth	r4, r4
    if(ext->text) {
 8015282:	b110      	cbz	r0, 801528a <mbox_realign+0x2e>
        lv_obj_set_width(ext->text, w);
 8015284:	4621      	mov	r1, r4
 8015286:	f7fa fa8b 	bl	800f7a0 <lv_obj_set_width>
    if(ext->btnm) {
 801528a:	68ab      	ldr	r3, [r5, #8]
 801528c:	b1cb      	cbz	r3, 80152c2 <mbox_realign+0x66>
        const lv_style_t * btn_bg_style  = lv_mbox_get_style(mbox, LV_MBOX_STYLE_BTN_BG);
 801528e:	2101      	movs	r1, #1
 8015290:	4630      	mov	r0, r6
 8015292:	f7ff ffbf 	bl	8015214 <lv_mbox_get_style>
        const lv_style_t * btn_rel_style = lv_mbox_get_style(mbox, LV_MBOX_STYLE_BTN_REL);
 8015296:	2102      	movs	r1, #2
        const lv_style_t * btn_bg_style  = lv_mbox_get_style(mbox, LV_MBOX_STYLE_BTN_BG);
 8015298:	4607      	mov	r7, r0
        const lv_style_t * btn_rel_style = lv_mbox_get_style(mbox, LV_MBOX_STYLE_BTN_REL);
 801529a:	4630      	mov	r0, r6
 801529c:	f7ff ffba 	bl	8015214 <lv_mbox_get_style>
        lv_obj_set_size(ext->btnm, w,
 80152a0:	8b03      	ldrh	r3, [r0, #24]
 80152a2:	8ac2      	ldrh	r2, [r0, #22]
 80152a4:	4621      	mov	r1, r4
 80152a6:	441a      	add	r2, r3
 80152a8:	8afb      	ldrh	r3, [r7, #22]
 80152aa:	441a      	add	r2, r3
 80152ac:	8b3b      	ldrh	r3, [r7, #24]
 80152ae:	441a      	add	r2, r3
        lv_coord_t font_h                = lv_font_get_line_height(btn_rel_style->text.font);
 80152b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
        lv_obj_set_size(ext->btnm, w,
 80152b2:	68a8      	ldr	r0, [r5, #8]
        lv_coord_t font_h                = lv_font_get_line_height(btn_rel_style->text.font);
 80152b4:	7a1b      	ldrb	r3, [r3, #8]
        lv_obj_set_size(ext->btnm, w,
 80152b6:	441a      	add	r2, r3
}
 80152b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_obj_set_size(ext->btnm, w,
 80152bc:	b212      	sxth	r2, r2
 80152be:	f7fa ba25 	b.w	800f70c <lv_obj_set_size>
}
 80152c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080152c4 <lv_mbox_set_text>:
{
 80152c4:	b538      	push	{r3, r4, r5, lr}
 80152c6:	460d      	mov	r5, r1
 80152c8:	4604      	mov	r4, r0
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 80152ca:	f7fa fbf9 	bl	800fac0 <lv_obj_get_ext_attr>
    lv_label_set_text(ext->text, txt);
 80152ce:	6840      	ldr	r0, [r0, #4]
 80152d0:	4629      	mov	r1, r5
 80152d2:	f7f6 f87d 	bl	800b3d0 <lv_label_set_text>
    mbox_realign(mbox);
 80152d6:	4620      	mov	r0, r4
}
 80152d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbox_realign(mbox);
 80152dc:	f7ff bfbe 	b.w	801525c <mbox_realign>

080152e0 <lv_mbox_set_style>:
{
 80152e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80152e2:	460d      	mov	r5, r1
 80152e4:	9201      	str	r2, [sp, #4]
 80152e6:	4604      	mov	r4, r0
    lv_mbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 80152e8:	f7fa fbea 	bl	800fac0 <lv_obj_get_ext_attr>
    switch(type) {
 80152ec:	9a01      	ldr	r2, [sp, #4]
 80152ee:	2d06      	cmp	r5, #6
 80152f0:	d809      	bhi.n	8015306 <lv_mbox_set_style+0x26>
 80152f2:	e8df f005 	tbb	[pc, r5]
 80152f6:	0e04      	.short	0x0e04
 80152f8:	19171513 	.word	0x19171513
 80152fc:	1b          	.byte	0x1b
 80152fd:	00          	.byte	0x00
        case LV_MBOX_STYLE_BG: lv_obj_set_style(mbox, style); break;
 80152fe:	4611      	mov	r1, r2
 8015300:	4620      	mov	r0, r4
 8015302:	f7fa fb1f 	bl	800f944 <lv_obj_set_style>
    mbox_realign(mbox);
 8015306:	4620      	mov	r0, r4
}
 8015308:	b003      	add	sp, #12
 801530a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    mbox_realign(mbox);
 801530e:	f7ff bfa5 	b.w	801525c <mbox_realign>
        case LV_MBOX_STYLE_BTN_BG: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BG, style); break;
 8015312:	2100      	movs	r1, #0
        case LV_MBOX_STYLE_BTN_INA: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_INA, style); break;
 8015314:	6880      	ldr	r0, [r0, #8]
 8015316:	f7ff facb 	bl	80148b0 <lv_btnm_set_style>
 801531a:	e7f4      	b.n	8015306 <lv_mbox_set_style+0x26>
        case LV_MBOX_STYLE_BTN_REL: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_REL, style); break;
 801531c:	2101      	movs	r1, #1
 801531e:	e7f9      	b.n	8015314 <lv_mbox_set_style+0x34>
        case LV_MBOX_STYLE_BTN_PR: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_PR, style); break;
 8015320:	2102      	movs	r1, #2
 8015322:	e7f7      	b.n	8015314 <lv_mbox_set_style+0x34>
        case LV_MBOX_STYLE_BTN_TGL_REL: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_REL, style); break;
 8015324:	2103      	movs	r1, #3
 8015326:	e7f5      	b.n	8015314 <lv_mbox_set_style+0x34>
        case LV_MBOX_STYLE_BTN_TGL_PR: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_TGL_PR, style); break;
 8015328:	2104      	movs	r1, #4
 801532a:	e7f3      	b.n	8015314 <lv_mbox_set_style+0x34>
        case LV_MBOX_STYLE_BTN_INA: lv_btnm_set_style(ext->btnm, LV_BTNM_STYLE_BTN_INA, style); break;
 801532c:	2105      	movs	r1, #5
 801532e:	e7f1      	b.n	8015314 <lv_mbox_set_style+0x34>

08015330 <lv_area_copy>:
    memcpy(dest, src, sizeof(lv_area_t));
 8015330:	2208      	movs	r2, #8
 8015332:	f001 ba1d 	b.w	8016770 <memcpy>

08015336 <scrl_def_event_cb>:
 * @param scrl pointer to the page's scrollable object
 * @param event type of the event
 * @param data data of the event
 */
static void scrl_def_event_cb(lv_obj_t * scrl, lv_event_t event)
{
 8015336:	b538      	push	{r3, r4, r5, lr}
 8015338:	460c      	mov	r4, r1
    lv_obj_t * page = lv_obj_get_parent(scrl);
 801533a:	f7fa fadf 	bl	800f8fc <lv_obj_get_parent>
 801533e:	4605      	mov	r5, r0

    /*clang-format off*/
    if(event == LV_EVENT_PRESSED || event == LV_EVENT_PRESSING || event == LV_EVENT_PRESS_LOST ||
 8015340:	2c07      	cmp	r4, #7
 8015342:	d808      	bhi.n	8015356 <scrl_def_event_cb+0x20>
       event == LV_EVENT_RELEASED || event == LV_EVENT_SHORT_CLICKED || event == LV_EVENT_CLICKED ||
       event == LV_EVENT_LONG_PRESSED || event == LV_EVENT_LONG_PRESSED_REPEAT) {
        lv_event_send(page, event, lv_event_get_data());
 8015344:	f7ed fb32 	bl	80029ac <lv_event_get_data>
 8015348:	4621      	mov	r1, r4
 801534a:	4602      	mov	r2, r0
 801534c:	4628      	mov	r0, r5
    }
    /*clang-format on*/
}
 801534e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_event_send(page, event, lv_event_get_data());
 8015352:	f7f9 bee5 	b.w	800f120 <lv_event_send>
}
 8015356:	bd38      	pop	{r3, r4, r5, pc}

08015358 <lv_page_sb_refresh>:
/**
 * Refresh the position and size of the scroll bars.
 * @param page pointer to a page object
 */
static void lv_page_sb_refresh(lv_obj_t * page)
{
 8015358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801535c:	4605      	mov	r5, r0
 801535e:	b08b      	sub	sp, #44	; 0x2c
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
 8015360:	f7fa fbae 	bl	800fac0 <lv_obj_get_ext_attr>
 8015364:	4604      	mov	r4, r0
    const lv_style_t * style = lv_obj_get_style(page);
 8015366:	4628      	mov	r0, r5
 8015368:	f7ed fcea 	bl	8002d40 <lv_obj_get_style>
    lv_obj_t * scrl          = ext->scrl;
 801536c:	6863      	ldr	r3, [r4, #4]
    const lv_style_t * style = lv_obj_get_style(page);
 801536e:	4607      	mov	r7, r0
    lv_coord_t size_tmp;
    lv_coord_t scrl_w = lv_obj_get_width(scrl);
 8015370:	4618      	mov	r0, r3
    lv_obj_t * scrl          = ext->scrl;
 8015372:	9300      	str	r3, [sp, #0]
    lv_coord_t scrl_w = lv_obj_get_width(scrl);
 8015374:	f7fa fb09 	bl	800f98a <lv_obj_get_width>
 8015378:	9002      	str	r0, [sp, #8]
    lv_coord_t scrl_h = lv_obj_get_height(scrl);
 801537a:	9800      	ldr	r0, [sp, #0]
 801537c:	f7fa fb0b 	bl	800f996 <lv_obj_get_height>
 8015380:	9003      	str	r0, [sp, #12]
    lv_coord_t obj_w  = lv_obj_get_width(page);
 8015382:	4628      	mov	r0, r5
 8015384:	f7fa fb01 	bl	800f98a <lv_obj_get_width>
 8015388:	4606      	mov	r6, r0
    lv_coord_t obj_h  = lv_obj_get_height(page);
 801538a:	4628      	mov	r0, r5
 801538c:	f7fa fb03 	bl	800f996 <lv_obj_get_height>
     * - horizontal and vertical scrollbars can overlap on the corners
     * - if the page has radius the scrollbar can be out of the radius  */
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);

    if(ext->sb.mode == LV_SB_MODE_OFF) return;
 8015390:	7f23      	ldrb	r3, [r4, #28]
    lv_coord_t obj_h  = lv_obj_get_height(page);
 8015392:	4681      	mov	r9, r0
    if(ext->sb.mode == LV_SB_MODE_OFF) return;
 8015394:	f013 021c 	ands.w	r2, r3, #28
 8015398:	d06b      	beq.n	8015472 <lv_page_sb_refresh+0x11a>

    if(ext->sb.mode == LV_SB_MODE_ON) {
 801539a:	2a04      	cmp	r2, #4
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
 801539c:	68a1      	ldr	r1, [r4, #8]
 801539e:	f9b7 a01c 	ldrsh.w	sl, [r7, #28]
        ext->sb.hor_draw = 1;
        ext->sb.ver_draw = 1;
    }

    /*Invalidate the current (old) scrollbar areas*/
    lv_disp_t * disp = lv_obj_get_disp(page);
 80153a2:	4628      	mov	r0, r5
        ext->sb.hor_draw = 1;
 80153a4:	bf08      	it	eq
 80153a6:	f023 0303 	biceq.w	r3, r3, #3
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
 80153aa:	f9b1 101e 	ldrsh.w	r1, [r1, #30]
        ext->sb.hor_draw = 1;
 80153ae:	bf08      	it	eq
 80153b0:	f043 0303 	orreq.w	r3, r3, #3
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
 80153b4:	9104      	str	r1, [sp, #16]
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);
 80153b6:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
        ext->sb.hor_draw = 1;
 80153ba:	bf08      	it	eq
 80153bc:	7723      	strbeq	r3, [r4, #28]
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);
 80153be:	9105      	str	r1, [sp, #20]
    lv_disp_t * disp = lv_obj_get_disp(page);
 80153c0:	f7ed fafa 	bl	80029b8 <lv_obj_get_disp>
    lv_area_t sb_area_tmp;
    if(ext->sb.hor_draw != 0) {
 80153c4:	7f23      	ldrb	r3, [r4, #28]
    lv_disp_t * disp = lv_obj_get_disp(page);
 80153c6:	9001      	str	r0, [sp, #4]
    if(ext->sb.hor_draw != 0) {
 80153c8:	07d8      	lsls	r0, r3, #31
 80153ca:	d520      	bpl.n	801540e <lv_page_sb_refresh+0xb6>
        lv_area_copy(&sb_area_tmp, &ext->sb.hor_area);
 80153cc:	f104 010c 	add.w	r1, r4, #12
 80153d0:	a808      	add	r0, sp, #32
 80153d2:	f7ff ffad 	bl	8015330 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 80153d6:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
 80153da:	f8bd 3020 	ldrh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 80153de:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 80153e2:	4413      	add	r3, r2
        sb_area_tmp.x2 += page->coords.x1;
        sb_area_tmp.y2 += page->coords.y1;
        lv_inv_area(disp, &sb_area_tmp);
 80153e4:	9801      	ldr	r0, [sp, #4]
        sb_area_tmp.x1 += page->coords.x1;
 80153e6:	f8ad 3020 	strh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 80153ea:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 80153ee:	4419      	add	r1, r3
 80153f0:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x2 += page->coords.x1;
 80153f4:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80153f8:	440a      	add	r2, r1
        lv_inv_area(disp, &sb_area_tmp);
 80153fa:	a908      	add	r1, sp, #32
        sb_area_tmp.x2 += page->coords.x1;
 80153fc:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y2 += page->coords.y1;
 8015400:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8015404:	4413      	add	r3, r2
 8015406:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 801540a:	f7ed fd6f 	bl	8002eec <lv_inv_area>
    }
    if(ext->sb.ver_draw != 0) {
 801540e:	7f23      	ldrb	r3, [r4, #28]
 8015410:	0799      	lsls	r1, r3, #30
 8015412:	d520      	bpl.n	8015456 <lv_page_sb_refresh+0xfe>
        lv_area_copy(&sb_area_tmp, &ext->sb.ver_area);
 8015414:	f104 0114 	add.w	r1, r4, #20
 8015418:	a808      	add	r0, sp, #32
 801541a:	f7ff ff89 	bl	8015330 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 801541e:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
 8015422:	f8bd 3020 	ldrh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8015426:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 801542a:	4413      	add	r3, r2
        sb_area_tmp.x2 += page->coords.x1;
        sb_area_tmp.y2 += page->coords.y1;
        lv_inv_area(disp, &sb_area_tmp);
 801542c:	9801      	ldr	r0, [sp, #4]
        sb_area_tmp.x1 += page->coords.x1;
 801542e:	f8ad 3020 	strh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8015432:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 8015436:	4419      	add	r1, r3
 8015438:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x2 += page->coords.x1;
 801543c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8015440:	440a      	add	r2, r1
        lv_inv_area(disp, &sb_area_tmp);
 8015442:	a908      	add	r1, sp, #32
        sb_area_tmp.x2 += page->coords.x1;
 8015444:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y2 += page->coords.y1;
 8015448:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 801544c:	4413      	add	r3, r2
 801544e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 8015452:	f7ed fd4b 	bl	8002eec <lv_inv_area>
    }

    if(ext->sb.mode == LV_SB_MODE_DRAG && lv_indev_is_dragging(lv_indev_get_act()) == false) {
 8015456:	7f23      	ldrb	r3, [r4, #28]
 8015458:	f003 031c 	and.w	r3, r3, #28
 801545c:	2b08      	cmp	r3, #8
 801545e:	d10b      	bne.n	8015478 <lv_page_sb_refresh+0x120>
 8015460:	f7ed fa10 	bl	8002884 <lv_indev_get_act>
 8015464:	f7f9 fde6 	bl	800f034 <lv_indev_is_dragging>
 8015468:	b930      	cbnz	r0, 8015478 <lv_page_sb_refresh+0x120>
        ext->sb.hor_draw = 0;
 801546a:	7f23      	ldrb	r3, [r4, #28]
 801546c:	f023 0303 	bic.w	r3, r3, #3
 8015470:	7723      	strb	r3, [r4, #28]
        sb_area_tmp.y1 += page->coords.y1;
        sb_area_tmp.x2 += page->coords.x1;
        sb_area_tmp.y2 += page->coords.y1;
        lv_inv_area(disp, &sb_area_tmp);
    }
}
 8015472:	b00b      	add	sp, #44	; 0x2c
 8015474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
 8015478:	9b04      	ldr	r3, [sp, #16]
 801547a:	f104 0b0c 	add.w	fp, r4, #12
    if(scrl_w <= obj_w - style->body.padding.left - style->body.padding.right) {
 801547e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
 8015482:	459a      	cmp	sl, r3
    if(scrl_w <= obj_w - style->body.padding.left - style->body.padding.right) {
 8015484:	9902      	ldr	r1, [sp, #8]
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
 8015486:	bfb8      	it	lt
 8015488:	469a      	movlt	sl, r3
    if(scrl_w <= obj_w - style->body.padding.left - style->body.padding.right) {
 801548a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801548e:	441a      	add	r2, r3
 8015490:	1ab3      	subs	r3, r6, r2
 8015492:	4299      	cmp	r1, r3
 8015494:	f300 8091 	bgt.w	80155ba <lv_page_sb_refresh+0x262>
        lv_area_set_width(&ext->sb.hor_area, obj_w - 2 * sb_hor_pad);
 8015498:	ebca 31ca 	rsb	r1, sl, sl, lsl #15
 801549c:	4658      	mov	r0, fp
 801549e:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 80154a2:	b209      	sxth	r1, r1
 80154a4:	f7fb f8a1 	bl	80105ea <lv_area_set_width>
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.bottom);
 80154a8:	68a3      	ldr	r3, [r4, #8]
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad,
 80154aa:	4651      	mov	r1, sl
 80154ac:	4658      	mov	r0, fp
 80154ae:	8bda      	ldrh	r2, [r3, #30]
 80154b0:	8b1b      	ldrh	r3, [r3, #24]
 80154b2:	441a      	add	r2, r3
 80154b4:	eba9 0202 	sub.w	r2, r9, r2
 80154b8:	b212      	sxth	r2, r2
 80154ba:	f7fb f8a0 	bl	80105fe <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.hor_draw = 0;
 80154be:	7f23      	ldrb	r3, [r4, #28]
 80154c0:	f003 0218 	and.w	r2, r3, #24
 80154c4:	2a08      	cmp	r2, #8
 80154c6:	d102      	bne.n	80154ce <lv_page_sb_refresh+0x176>
 80154c8:	f36f 0300 	bfc	r3, #0, #1
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.hor_draw = 1;
 80154cc:	7723      	strb	r3, [r4, #28]
    if(scrl_h <= obj_h - style->body.padding.top - style->body.padding.bottom) {
 80154ce:	9803      	ldr	r0, [sp, #12]
 80154d0:	f104 0a14 	add.w	sl, r4, #20
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);
 80154d4:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80154d8:	428b      	cmp	r3, r1
 80154da:	bfb8      	it	lt
 80154dc:	460b      	movlt	r3, r1
    if(scrl_h <= obj_h - style->body.padding.top - style->body.padding.bottom) {
 80154de:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);
 80154e2:	461a      	mov	r2, r3
    if(scrl_h <= obj_h - style->body.padding.top - style->body.padding.bottom) {
 80154e4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80154e8:	4419      	add	r1, r3
 80154ea:	eba9 0301 	sub.w	r3, r9, r1
 80154ee:	4298      	cmp	r0, r3
 80154f0:	f300 80a3 	bgt.w	801563a <lv_page_sb_refresh+0x2e2>
        lv_area_set_height(&ext->sb.ver_area, obj_h - 2 * sb_ver_pad);
 80154f4:	ebc2 31c2 	rsb	r1, r2, r2, lsl #15
 80154f8:	4650      	mov	r0, sl
 80154fa:	9200      	str	r2, [sp, #0]
 80154fc:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8015500:	b209      	sxth	r1, r1
 8015502:	f7fb f877 	bl	80105f4 <lv_area_set_height>
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right, sb_ver_pad);
 8015506:	68a3      	ldr	r3, [r4, #8]
        lv_area_set_pos(&ext->sb.ver_area,
 8015508:	9a00      	ldr	r2, [sp, #0]
 801550a:	4650      	mov	r0, sl
 801550c:	8bd9      	ldrh	r1, [r3, #30]
 801550e:	8b9b      	ldrh	r3, [r3, #28]
 8015510:	4419      	add	r1, r3
 8015512:	1a71      	subs	r1, r6, r1
 8015514:	b209      	sxth	r1, r1
 8015516:	f7fb f872 	bl	80105fe <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.ver_draw = 0;
 801551a:	7f23      	ldrb	r3, [r4, #28]
 801551c:	f003 0218 	and.w	r2, r3, #24
 8015520:	2a08      	cmp	r2, #8
 8015522:	d102      	bne.n	801552a <lv_page_sb_refresh+0x1d2>
 8015524:	f36f 0341 	bfc	r3, #1, #1
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.ver_draw = 1;
 8015528:	7723      	strb	r3, [r4, #28]
    if(ext->sb.hor_draw != 0) {
 801552a:	7f23      	ldrb	r3, [r4, #28]
 801552c:	07da      	lsls	r2, r3, #31
 801552e:	d51f      	bpl.n	8015570 <lv_page_sb_refresh+0x218>
        lv_area_copy(&sb_area_tmp, &ext->sb.hor_area);
 8015530:	4659      	mov	r1, fp
 8015532:	a808      	add	r0, sp, #32
 8015534:	f7ff fefc 	bl	8015330 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 8015538:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
 801553c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8015540:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 8015544:	4413      	add	r3, r2
        lv_inv_area(disp, &sb_area_tmp);
 8015546:	9801      	ldr	r0, [sp, #4]
        sb_area_tmp.x1 += page->coords.x1;
 8015548:	f8ad 3020 	strh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 801554c:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 8015550:	4419      	add	r1, r3
 8015552:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x2 += page->coords.x1;
 8015556:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801555a:	440a      	add	r2, r1
        lv_inv_area(disp, &sb_area_tmp);
 801555c:	a908      	add	r1, sp, #32
        sb_area_tmp.x2 += page->coords.x1;
 801555e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y2 += page->coords.y1;
 8015562:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8015566:	4413      	add	r3, r2
 8015568:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 801556c:	f7ed fcbe 	bl	8002eec <lv_inv_area>
    if(ext->sb.ver_draw != 0) {
 8015570:	7f23      	ldrb	r3, [r4, #28]
 8015572:	079b      	lsls	r3, r3, #30
 8015574:	f57f af7d 	bpl.w	8015472 <lv_page_sb_refresh+0x11a>
        lv_area_copy(&sb_area_tmp, &ext->sb.ver_area);
 8015578:	4651      	mov	r1, sl
 801557a:	a808      	add	r0, sp, #32
 801557c:	f7ff fed8 	bl	8015330 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 8015580:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
 8015584:	f8bd 3020 	ldrh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8015588:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x1 += page->coords.x1;
 801558c:	4413      	add	r3, r2
        lv_inv_area(disp, &sb_area_tmp);
 801558e:	9801      	ldr	r0, [sp, #4]
        sb_area_tmp.x1 += page->coords.x1;
 8015590:	f8ad 3020 	strh.w	r3, [sp, #32]
        sb_area_tmp.y1 += page->coords.y1;
 8015594:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 8015598:	4419      	add	r1, r3
 801559a:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        sb_area_tmp.x2 += page->coords.x1;
 801559e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80155a2:	440a      	add	r2, r1
        lv_inv_area(disp, &sb_area_tmp);
 80155a4:	a908      	add	r1, sp, #32
        sb_area_tmp.x2 += page->coords.x1;
 80155a6:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        sb_area_tmp.y2 += page->coords.y1;
 80155aa:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 80155ae:	4413      	add	r3, r2
 80155b0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_inv_area(disp, &sb_area_tmp);
 80155b4:	f7ed fc9a 	bl	8002eec <lv_inv_area>
 80155b8:	e75b      	b.n	8015472 <lv_page_sb_refresh+0x11a>
            (obj_w * (obj_w - (2 * sb_hor_pad))) / (scrl_w + style->body.padding.left + style->body.padding.right);
 80155ba:	f64f 78fe 	movw	r8, #65534	; 0xfffe
 80155be:	9902      	ldr	r1, [sp, #8]
        lv_area_set_width(&ext->sb.hor_area, size_tmp);
 80155c0:	4658      	mov	r0, fp
            (obj_w * (obj_w - (2 * sb_hor_pad))) / (scrl_w + style->body.padding.left + style->body.padding.right);
 80155c2:	fb1a 6808 	smlabb	r8, sl, r8, r6
 80155c6:	440a      	add	r2, r1
 80155c8:	fb08 f306 	mul.w	r3, r8, r6
 80155cc:	fb93 f2f2 	sdiv	r2, r3, r2
        size_tmp =
 80155d0:	b213      	sxth	r3, r2
        if(size_tmp < LV_PAGE_SB_MIN_SIZE) size_tmp = LV_PAGE_SB_MIN_SIZE;
 80155d2:	2b0c      	cmp	r3, #12
 80155d4:	bfb8      	it	lt
 80155d6:	230c      	movlt	r3, #12
        lv_area_set_width(&ext->sb.hor_area, size_tmp);
 80155d8:	4619      	mov	r1, r3
 80155da:	9307      	str	r3, [sp, #28]
 80155dc:	f7fb f805 	bl	80105ea <lv_area_set_width>
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 80155e0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80155e4:	9800      	ldr	r0, [sp, #0]
 80155e6:	9306      	str	r3, [sp, #24]
 80155e8:	f7fa f9c3 	bl	800f972 <lv_obj_get_x>
 80155ec:	9b06      	ldr	r3, [sp, #24]
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.bottom);
 80155ee:	68a1      	ldr	r1, [r4, #8]
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 80155f0:	1a18      	subs	r0, r3, r0
 80155f2:	9b07      	ldr	r3, [sp, #28]
        lv_area_set_pos(&ext->sb.hor_area,
 80155f4:	8bca      	ldrh	r2, [r1, #30]
 80155f6:	f8b1 c018 	ldrh.w	ip, [r1, #24]
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 80155fa:	eba8 0803 	sub.w	r8, r8, r3
                                (scrl_w + style->body.padding.left + style->body.padding.right - obj_w),
 80155fe:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8015602:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 8015606:	fb08 f800 	mul.w	r8, r8, r0
        lv_area_set_pos(&ext->sb.hor_area,
 801560a:	4462      	add	r2, ip
 801560c:	4658      	mov	r0, fp
                                (scrl_w + style->body.padding.left + style->body.padding.right - obj_w),
 801560e:	4419      	add	r1, r3
 8015610:	9b02      	ldr	r3, [sp, #8]
        lv_area_set_pos(&ext->sb.hor_area,
 8015612:	eba9 0202 	sub.w	r2, r9, r2
                                (scrl_w + style->body.padding.left + style->body.padding.right - obj_w),
 8015616:	4419      	add	r1, r3
        lv_area_set_pos(&ext->sb.hor_area,
 8015618:	b212      	sxth	r2, r2
                                (scrl_w + style->body.padding.left + style->body.padding.right - obj_w),
 801561a:	1b89      	subs	r1, r1, r6
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 801561c:	fb98 f1f1 	sdiv	r1, r8, r1
        lv_area_set_pos(&ext->sb.hor_area,
 8015620:	4451      	add	r1, sl
 8015622:	b209      	sxth	r1, r1
 8015624:	f7fa ffeb 	bl	80105fe <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.hor_draw = 1;
 8015628:	7f23      	ldrb	r3, [r4, #28]
 801562a:	f003 0218 	and.w	r2, r3, #24
 801562e:	2a08      	cmp	r2, #8
 8015630:	f47f af4d 	bne.w	80154ce <lv_page_sb_refresh+0x176>
 8015634:	f043 0301 	orr.w	r3, r3, #1
 8015638:	e748      	b.n	80154cc <lv_page_sb_refresh+0x174>
            (obj_h * (obj_h - (2 * sb_ver_pad))) / (scrl_h + style->body.padding.top + style->body.padding.bottom);
 801563a:	f64f 78fe 	movw	r8, #65534	; 0xfffe
 801563e:	9205      	str	r2, [sp, #20]
        lv_area_set_height(&ext->sb.ver_area, size_tmp);
 8015640:	4650      	mov	r0, sl
            (obj_h * (obj_h - (2 * sb_ver_pad))) / (scrl_h + style->body.padding.top + style->body.padding.bottom);
 8015642:	fb12 9808 	smlabb	r8, r2, r8, r9
 8015646:	9a03      	ldr	r2, [sp, #12]
 8015648:	fb08 f309 	mul.w	r3, r8, r9
 801564c:	4411      	add	r1, r2
 801564e:	fb93 f1f1 	sdiv	r1, r3, r1
        size_tmp =
 8015652:	b20b      	sxth	r3, r1
        if(size_tmp < LV_PAGE_SB_MIN_SIZE) size_tmp = LV_PAGE_SB_MIN_SIZE;
 8015654:	2b0c      	cmp	r3, #12
 8015656:	bfb8      	it	lt
 8015658:	230c      	movlt	r3, #12
        lv_area_set_height(&ext->sb.ver_area, size_tmp);
 801565a:	4619      	mov	r1, r3
 801565c:	9304      	str	r3, [sp, #16]
 801565e:	f7fa ffc9 	bl	80105f4 <lv_area_set_height>
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right,
 8015662:	68a0      	ldr	r0, [r4, #8]
        lv_area_set_pos(&ext->sb.ver_area,
 8015664:	f8b0 c01c 	ldrh.w	ip, [r0, #28]
 8015668:	8bc1      	ldrh	r1, [r0, #30]
 801566a:	4461      	add	r1, ip
 801566c:	1a76      	subs	r6, r6, r1
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 801566e:	f9b0 1018 	ldrsh.w	r1, [r0, #24]
 8015672:	9800      	ldr	r0, [sp, #0]
 8015674:	9102      	str	r1, [sp, #8]
 8015676:	f7fa f982 	bl	800f97e <lv_obj_get_y>
 801567a:	9902      	ldr	r1, [sp, #8]
        lv_area_set_pos(&ext->sb.ver_area,
 801567c:	b236      	sxth	r6, r6
                                      (obj_h - size_tmp - 2 * sb_ver_pad)) /
 801567e:	9b04      	ldr	r3, [sp, #16]
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 8015680:	1a08      	subs	r0, r1, r0
                                         (scrl_h + style->body.padding.top + style->body.padding.bottom - obj_h));
 8015682:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
                                      (obj_h - size_tmp - 2 * sb_ver_pad)) /
 8015686:	eba8 0803 	sub.w	r8, r8, r3
                                         (scrl_h + style->body.padding.top + style->body.padding.bottom - obj_h));
 801568a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
        lv_area_set_pos(&ext->sb.ver_area,
 801568e:	9a05      	ldr	r2, [sp, #20]
                                         (scrl_h + style->body.padding.top + style->body.padding.bottom - obj_h));
 8015690:	4419      	add	r1, r3
 8015692:	9b03      	ldr	r3, [sp, #12]
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 8015694:	fb08 f800 	mul.w	r8, r8, r0
        lv_area_set_pos(&ext->sb.ver_area,
 8015698:	4650      	mov	r0, sl
                                         (scrl_h + style->body.padding.top + style->body.padding.bottom - obj_h));
 801569a:	4419      	add	r1, r3
 801569c:	eba1 0909 	sub.w	r9, r1, r9
        lv_area_set_pos(&ext->sb.ver_area,
 80156a0:	4631      	mov	r1, r6
                                      (obj_h - size_tmp - 2 * sb_ver_pad)) /
 80156a2:	fb98 f9f9 	sdiv	r9, r8, r9
        lv_area_set_pos(&ext->sb.ver_area,
 80156a6:	444a      	add	r2, r9
 80156a8:	b212      	sxth	r2, r2
 80156aa:	f7fa ffa8 	bl	80105fe <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.ver_draw = 1;
 80156ae:	7f23      	ldrb	r3, [r4, #28]
 80156b0:	f003 0218 	and.w	r2, r3, #24
 80156b4:	2a08      	cmp	r2, #8
 80156b6:	f47f af38 	bne.w	801552a <lv_page_sb_refresh+0x1d2>
 80156ba:	f043 0302 	orr.w	r3, r3, #2
 80156be:	e733      	b.n	8015528 <lv_page_sb_refresh+0x1d0>

080156c0 <edge_flash_anim_end>:
    ext->edge_flash.state = v;
    lv_obj_invalidate(page);
}

static void edge_flash_anim_end(lv_anim_t * a)
{
 80156c0:	b510      	push	{r4, lr}
 80156c2:	4604      	mov	r4, r0
    lv_page_ext_t * ext       = lv_obj_get_ext_attr(a->var);
 80156c4:	6800      	ldr	r0, [r0, #0]
 80156c6:	f7fa f9fb 	bl	800fac0 <lv_obj_get_ext_attr>
    ext->edge_flash.top_ip    = 0;
 80156ca:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80156ce:	f023 031e 	bic.w	r3, r3, #30
 80156d2:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    ext->edge_flash.bottom_ip = 0;
    ext->edge_flash.left_ip   = 0;
    ext->edge_flash.right_ip  = 0;
    lv_obj_invalidate(a->var);
 80156d6:	6820      	ldr	r0, [r4, #0]
}
 80156d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(a->var);
 80156dc:	f7f9 bd88 	b.w	800f1f0 <lv_obj_invalidate>

080156e0 <edge_flash_anim>:
{
 80156e0:	b538      	push	{r3, r4, r5, lr}
 80156e2:	4604      	mov	r4, r0
 80156e4:	460d      	mov	r5, r1
    lv_page_ext_t * ext   = lv_obj_get_ext_attr(page);
 80156e6:	f7fa f9eb 	bl	800fac0 <lv_obj_get_ext_attr>
    ext->edge_flash.state = v;
 80156ea:	8405      	strh	r5, [r0, #32]
    lv_obj_invalidate(page);
 80156ec:	4620      	mov	r0, r4
}
 80156ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(page);
 80156f2:	f7f9 bd7d 	b.w	800f1f0 <lv_obj_invalidate>

080156f6 <lv_page_set_sb_mode>:
{
 80156f6:	b538      	push	{r3, r4, r5, lr}
 80156f8:	460d      	mov	r5, r1
 80156fa:	4604      	mov	r4, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80156fc:	f7fa f9e0 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->sb.mode == sb_mode) return;
 8015700:	7f03      	ldrb	r3, [r0, #28]
 8015702:	f3c3 0282 	ubfx	r2, r3, #2, #3
 8015706:	42aa      	cmp	r2, r5
 8015708:	d01f      	beq.n	801574a <lv_page_set_sb_mode+0x54>
    if(sb_mode == LV_SB_MODE_HIDE)
 801570a:	2d04      	cmp	r5, #4
 801570c:	d110      	bne.n	8015730 <lv_page_set_sb_mode+0x3a>
        ext->sb.mode |= LV_SB_MODE_HIDE; /*Set the hidden flag*/
 801570e:	f042 0204 	orr.w	r2, r2, #4
        ext->sb.mode &= (~LV_SB_MODE_HIDE); /*Clear the hidden flag*/
 8015712:	f362 0384 	bfi	r3, r2, #2, #3
        ext->sb.mode = sb_mode;
 8015716:	7703      	strb	r3, [r0, #28]
    ext->sb.hor_draw = 0;
 8015718:	7f03      	ldrb	r3, [r0, #28]
 801571a:	f023 0303 	bic.w	r3, r3, #3
 801571e:	7703      	strb	r3, [r0, #28]
    lv_page_sb_refresh(page);
 8015720:	4620      	mov	r0, r4
 8015722:	f7ff fe19 	bl	8015358 <lv_page_sb_refresh>
    lv_obj_invalidate(page);
 8015726:	4620      	mov	r0, r4
}
 8015728:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(page);
 801572c:	f7f9 bd60 	b.w	800f1f0 <lv_obj_invalidate>
    else if(sb_mode == LV_SB_MODE_UNHIDE)
 8015730:	2d05      	cmp	r5, #5
 8015732:	d102      	bne.n	801573a <lv_page_set_sb_mode+0x44>
        ext->sb.mode &= (~LV_SB_MODE_HIDE); /*Clear the hidden flag*/
 8015734:	f002 0203 	and.w	r2, r2, #3
 8015738:	e7eb      	b.n	8015712 <lv_page_set_sb_mode+0x1c>
        if(ext->sb.mode & LV_SB_MODE_HIDE) sb_mode |= LV_SB_MODE_HIDE;
 801573a:	0753      	lsls	r3, r2, #29
        ext->sb.mode = sb_mode;
 801573c:	7f03      	ldrb	r3, [r0, #28]
        if(ext->sb.mode & LV_SB_MODE_HIDE) sb_mode |= LV_SB_MODE_HIDE;
 801573e:	bf48      	it	mi
 8015740:	f045 0504 	orrmi.w	r5, r5, #4
        ext->sb.mode = sb_mode;
 8015744:	f365 0384 	bfi	r3, r5, #2, #3
 8015748:	e7e5      	b.n	8015716 <lv_page_set_sb_mode+0x20>
}
 801574a:	bd38      	pop	{r3, r4, r5, pc}

0801574c <lv_page_set_anim_time>:
{
 801574c:	b510      	push	{r4, lr}
 801574e:	460c      	mov	r4, r1
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8015750:	f7fa f9b6 	bl	800fac0 <lv_obj_get_ext_attr>
    ext->anim_time      = anim_time;
 8015754:	8584      	strh	r4, [r0, #44]	; 0x2c
}
 8015756:	bd10      	pop	{r4, pc}

08015758 <lv_page_set_edge_flash>:
{
 8015758:	b510      	push	{r4, lr}
 801575a:	460c      	mov	r4, r1
    lv_page_ext_t * ext     = lv_obj_get_ext_attr(page);
 801575c:	f7fa f9b0 	bl	800fac0 <lv_obj_get_ext_attr>
    ext->edge_flash.enabled = en ? 1 : 0;
 8015760:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8015764:	f364 0300 	bfi	r3, r4, #0, #1
 8015768:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
}
 801576c:	bd10      	pop	{r4, pc}

0801576e <lv_page_set_style>:
{
 801576e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015770:	460f      	mov	r7, r1
 8015772:	4606      	mov	r6, r0
 8015774:	4615      	mov	r5, r2
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8015776:	f7fa f9a3 	bl	800fac0 <lv_obj_get_ext_attr>
 801577a:	4604      	mov	r4, r0
    switch(type) {
 801577c:	2f03      	cmp	r7, #3
 801577e:	d825      	bhi.n	80157cc <lv_page_set_style+0x5e>
 8015780:	e8df f007 	tbb	[pc, r7]
 8015784:	230b0802 	.word	0x230b0802
        case LV_PAGE_STYLE_BG: lv_obj_set_style(page, style); break;
 8015788:	4629      	mov	r1, r5
 801578a:	4630      	mov	r0, r6
}
 801578c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        case LV_PAGE_STYLE_SCRL: lv_obj_set_style(ext->scrl, style); break;
 8015790:	f7fa b8d8 	b.w	800f944 <lv_obj_set_style>
 8015794:	4629      	mov	r1, r5
 8015796:	6840      	ldr	r0, [r0, #4]
 8015798:	e7f8      	b.n	801578c <lv_page_set_style+0x1e>
            ext->sb.style = style;
 801579a:	6085      	str	r5, [r0, #8]
            lv_area_set_height(&ext->sb.hor_area, ext->sb.style->body.padding.inner);
 801579c:	300c      	adds	r0, #12
 801579e:	f9b5 101e 	ldrsh.w	r1, [r5, #30]
 80157a2:	f7fa ff27 	bl	80105f4 <lv_area_set_height>
            lv_area_set_width(&ext->sb.ver_area, ext->sb.style->body.padding.inner);
 80157a6:	68a3      	ldr	r3, [r4, #8]
 80157a8:	f104 0014 	add.w	r0, r4, #20
 80157ac:	f9b3 101e 	ldrsh.w	r1, [r3, #30]
 80157b0:	f7fa ff1b 	bl	80105ea <lv_area_set_width>
            lv_page_sb_refresh(page);
 80157b4:	4630      	mov	r0, r6
 80157b6:	f7ff fdcf 	bl	8015358 <lv_page_sb_refresh>
            lv_obj_refresh_ext_draw_pad(page);
 80157ba:	4630      	mov	r0, r6
 80157bc:	f7fa f828 	bl	800f810 <lv_obj_refresh_ext_draw_pad>
            lv_obj_invalidate(page);
 80157c0:	4630      	mov	r0, r6
}
 80157c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_obj_invalidate(page);
 80157c6:	f7f9 bd13 	b.w	800f1f0 <lv_obj_invalidate>
        case LV_PAGE_STYLE_EDGE_FLASH: ext->edge_flash.style = style; break;
 80157ca:	6245      	str	r5, [r0, #36]	; 0x24
}
 80157cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080157ce <lv_page_get_scrl>:
{
 80157ce:	b508      	push	{r3, lr}
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80157d0:	f7fa f976 	bl	800fac0 <lv_obj_get_ext_attr>
}
 80157d4:	6840      	ldr	r0, [r0, #4]
 80157d6:	bd08      	pop	{r3, pc}

080157d8 <lv_page_get_anim_time>:
{
 80157d8:	b508      	push	{r3, lr}
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80157da:	f7fa f971 	bl	800fac0 <lv_obj_get_ext_attr>
}
 80157de:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
 80157e0:	bd08      	pop	{r3, pc}

080157e2 <lv_page_get_edge_flash>:
{
 80157e2:	b508      	push	{r3, lr}
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80157e4:	f7fa f96c 	bl	800fac0 <lv_obj_get_ext_attr>
    return ext->edge_flash.enabled == 0 ? false : true;
 80157e8:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
}
 80157ec:	f000 0001 	and.w	r0, r0, #1
 80157f0:	bd08      	pop	{r3, pc}

080157f2 <lv_page_get_style>:
{
 80157f2:	b538      	push	{r3, r4, r5, lr}
 80157f4:	460c      	mov	r4, r1
 80157f6:	4605      	mov	r5, r0
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
 80157f8:	f7fa f962 	bl	800fac0 <lv_obj_get_ext_attr>
    switch(type) {
 80157fc:	2c03      	cmp	r4, #3
 80157fe:	d80e      	bhi.n	801581e <lv_page_get_style+0x2c>
 8015800:	e8df f004 	tbb	[pc, r4]
 8015804:	0b090702 	.word	0x0b090702
        case LV_PAGE_STYLE_BG: style = lv_obj_get_style(page); break;
 8015808:	4628      	mov	r0, r5
}
 801580a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        case LV_PAGE_STYLE_SCRL: style = lv_obj_get_style(ext->scrl); break;
 801580e:	f7ed ba97 	b.w	8002d40 <lv_obj_get_style>
 8015812:	6840      	ldr	r0, [r0, #4]
 8015814:	e7f9      	b.n	801580a <lv_page_get_style+0x18>
        case LV_PAGE_STYLE_SB: style = ext->sb.style; break;
 8015816:	6880      	ldr	r0, [r0, #8]
}
 8015818:	bd38      	pop	{r3, r4, r5, pc}
        case LV_PAGE_STYLE_EDGE_FLASH: style = ext->edge_flash.style; break;
 801581a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801581c:	e7fc      	b.n	8015818 <lv_page_get_style+0x26>
        default: style = NULL; break;
 801581e:	2000      	movs	r0, #0
    return style;
 8015820:	e7fa      	b.n	8015818 <lv_page_get_style+0x26>

08015822 <lv_page_get_fit_width>:
{
 8015822:	b570      	push	{r4, r5, r6, lr}
 8015824:	4606      	mov	r6, r0
    const lv_style_t * bg_style   = lv_page_get_style(page, LV_PAGE_STYLE_BG);
 8015826:	2100      	movs	r1, #0
 8015828:	f7ff ffe3 	bl	80157f2 <lv_page_get_style>
    const lv_style_t * scrl_style = lv_page_get_style(page, LV_PAGE_STYLE_SCRL);
 801582c:	2101      	movs	r1, #1
    const lv_style_t * bg_style   = lv_page_get_style(page, LV_PAGE_STYLE_BG);
 801582e:	4605      	mov	r5, r0
    const lv_style_t * scrl_style = lv_page_get_style(page, LV_PAGE_STYLE_SCRL);
 8015830:	4630      	mov	r0, r6
 8015832:	f7ff ffde 	bl	80157f2 <lv_page_get_style>
 8015836:	4604      	mov	r4, r0
    return lv_obj_get_width(page) - bg_style->body.padding.left - bg_style->body.padding.right -
 8015838:	4630      	mov	r0, r6
 801583a:	f7fa f8a6 	bl	800f98a <lv_obj_get_width>
 801583e:	8b6b      	ldrh	r3, [r5, #26]
 8015840:	8baa      	ldrh	r2, [r5, #28]
 8015842:	4413      	add	r3, r2
 8015844:	1ac0      	subs	r0, r0, r3
 8015846:	8b63      	ldrh	r3, [r4, #26]
 8015848:	1ac0      	subs	r0, r0, r3
           scrl_style->body.padding.left - scrl_style->body.padding.right;
 801584a:	8ba3      	ldrh	r3, [r4, #28]
 801584c:	1ac0      	subs	r0, r0, r3
}
 801584e:	b200      	sxth	r0, r0
 8015850:	bd70      	pop	{r4, r5, r6, pc}

08015852 <lv_page_on_edge>:
{
 8015852:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015854:	4606      	mov	r6, r0
 8015856:	460c      	mov	r4, r1
    const lv_style_t * page_style = lv_obj_get_style(page);
 8015858:	f7ed fa72 	bl	8002d40 <lv_obj_get_style>
 801585c:	4605      	mov	r5, r0
    lv_obj_t * scrl               = lv_page_get_scrl(page);
 801585e:	4630      	mov	r0, r6
 8015860:	f7ff ffb5 	bl	80157ce <lv_page_get_scrl>
    lv_obj_get_coords(scrl, &scrl_coords);
 8015864:	a902      	add	r1, sp, #8
 8015866:	f7fa f87d 	bl	800f964 <lv_obj_get_coords>
    lv_obj_get_coords(page, &page_coords);
 801586a:	4630      	mov	r0, r6
 801586c:	4669      	mov	r1, sp
 801586e:	f7fa f879 	bl	800f964 <lv_obj_get_coords>
    if((edge & LV_PAGE_EDGE_TOP) && scrl_coords.y1 == page_coords.y1 + page_style->body.padding.top) return true;
 8015872:	07a0      	lsls	r0, r4, #30
 8015874:	d508      	bpl.n	8015888 <lv_page_on_edge+0x36>
 8015876:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801587a:	f9b5 1016 	ldrsh.w	r1, [r5, #22]
 801587e:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8015882:	440b      	add	r3, r1
 8015884:	429a      	cmp	r2, r3
 8015886:	d024      	beq.n	80158d2 <lv_page_on_edge+0x80>
    if((edge & LV_PAGE_EDGE_BOTTOM) && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom) return true;
 8015888:	0721      	lsls	r1, r4, #28
 801588a:	d508      	bpl.n	801589e <lv_page_on_edge+0x4c>
 801588c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8015890:	f9b5 1018 	ldrsh.w	r1, [r5, #24]
 8015894:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8015898:	1a5b      	subs	r3, r3, r1
 801589a:	429a      	cmp	r2, r3
 801589c:	d019      	beq.n	80158d2 <lv_page_on_edge+0x80>
    if((edge & LV_PAGE_EDGE_LEFT) && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) return true;
 801589e:	07e2      	lsls	r2, r4, #31
 80158a0:	d508      	bpl.n	80158b4 <lv_page_on_edge+0x62>
 80158a2:	f9bd 3000 	ldrsh.w	r3, [sp]
 80158a6:	f9b5 101a 	ldrsh.w	r1, [r5, #26]
 80158aa:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80158ae:	440b      	add	r3, r1
 80158b0:	429a      	cmp	r2, r3
 80158b2:	d00e      	beq.n	80158d2 <lv_page_on_edge+0x80>
    if((edge & LV_PAGE_EDGE_RIGHT) && scrl_coords.x2 == page_coords.x2 - page_style->body.padding.right) return true;
 80158b4:	f014 0004 	ands.w	r0, r4, #4
 80158b8:	d009      	beq.n	80158ce <lv_page_on_edge+0x7c>
 80158ba:	f9b5 401c 	ldrsh.w	r4, [r5, #28]
 80158be:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 80158c2:	1b00      	subs	r0, r0, r4
 80158c4:	f9bd 400c 	ldrsh.w	r4, [sp, #12]
 80158c8:	1b03      	subs	r3, r0, r4
 80158ca:	4258      	negs	r0, r3
 80158cc:	4158      	adcs	r0, r3
}
 80158ce:	b004      	add	sp, #16
 80158d0:	bd70      	pop	{r4, r5, r6, pc}
    if((edge & LV_PAGE_EDGE_TOP) && scrl_coords.y1 == page_coords.y1 + page_style->body.padding.top) return true;
 80158d2:	2001      	movs	r0, #1
 80158d4:	e7fb      	b.n	80158ce <lv_page_on_edge+0x7c>

080158d6 <lv_page_glue_obj>:
{
 80158d6:	b538      	push	{r3, r4, r5, lr}
 80158d8:	4604      	mov	r4, r0
 80158da:	460d      	mov	r5, r1
    lv_obj_set_drag_parent(obj, glue);
 80158dc:	f7f9 fc03 	bl	800f0e6 <lv_obj_set_drag_parent>
    lv_obj_set_drag(obj, glue);
 80158e0:	4629      	mov	r1, r5
 80158e2:	4620      	mov	r0, r4
}
 80158e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_drag(obj, glue);
 80158e8:	f7f9 bbe8 	b.w	800f0bc <lv_obj_set_drag>

080158ec <lv_chart_inv_lines>:
/**
 * invalid area of the new line data lines on a chart
 * @param obj pointer to chart object
 */
static void lv_chart_inv_lines(lv_obj_t * chart, uint16_t i)
{
 80158ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80158f0:	4606      	mov	r6, r0
 80158f2:	460d      	mov	r5, r1
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 80158f4:	f7fa f8e4 	bl	800fac0 <lv_obj_get_ext_attr>
 80158f8:	4680      	mov	r8, r0

    lv_coord_t w     = lv_obj_get_width(chart);
 80158fa:	4630      	mov	r0, r6
 80158fc:	f7fa f845 	bl	800f98a <lv_obj_get_width>
    lv_coord_t x_ofs = chart->coords.x1;

    if(i < ext->point_cnt) {
 8015900:	f8b8 3012 	ldrh.w	r3, [r8, #18]
    lv_coord_t w     = lv_obj_get_width(chart);
 8015904:	4604      	mov	r4, r0
    if(i < ext->point_cnt) {
 8015906:	42ab      	cmp	r3, r5
 8015908:	d93d      	bls.n	8015986 <lv_chart_inv_lines+0x9a>
        lv_area_t coords;
        lv_obj_get_coords(chart, &coords);
 801590a:	4669      	mov	r1, sp
 801590c:	4630      	mov	r0, r6
    lv_coord_t x_ofs = chart->coords.x1;
 801590e:	f9b6 7010 	ldrsh.w	r7, [r6, #16]
        lv_obj_get_coords(chart, &coords);
 8015912:	f7fa f827 	bl	800f964 <lv_obj_get_coords>
        if(i < ext->point_cnt - 1) {
 8015916:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 801591a:	1e5a      	subs	r2, r3, #1
 801591c:	4295      	cmp	r5, r2
 801591e:	da17      	bge.n	8015950 <lv_chart_inv_lines+0x64>
            coords.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs - ext->series.width;
 8015920:	fb04 f305 	mul.w	r3, r4, r5
 8015924:	f9b8 102c 	ldrsh.w	r1, [r8, #44]	; 0x2c
 8015928:	fb93 f0f2 	sdiv	r0, r3, r2
            coords.x2 = ((w * (i + 1)) / (ext->point_cnt - 1)) + x_ofs + ext->series.width;
 801592c:	4423      	add	r3, r4
            coords.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs - ext->series.width;
 801592e:	eba7 0c01 	sub.w	ip, r7, r1
            coords.x2 = ((w * (i + 1)) / (ext->point_cnt - 1)) + x_ofs + ext->series.width;
 8015932:	4439      	add	r1, r7
            coords.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs - ext->series.width;
 8015934:	4460      	add	r0, ip
            coords.x2 = ((w * (i + 1)) / (ext->point_cnt - 1)) + x_ofs + ext->series.width;
 8015936:	fb93 f3f2 	sdiv	r3, r3, r2
 801593a:	440b      	add	r3, r1
            coords.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs - ext->series.width;
 801593c:	f8ad 0000 	strh.w	r0, [sp]
            lv_inv_area(lv_obj_get_disp(chart), &coords);
 8015940:	4630      	mov	r0, r6
            coords.x2 = ((w * (i + 1)) / (ext->point_cnt - 1)) + x_ofs + ext->series.width;
 8015942:	f8ad 3004 	strh.w	r3, [sp, #4]
            lv_inv_area(lv_obj_get_disp(chart), &coords);
 8015946:	f7ed f837 	bl	80029b8 <lv_obj_get_disp>
 801594a:	4669      	mov	r1, sp
 801594c:	f7ed face 	bl	8002eec <lv_inv_area>
        }

        if(i > 0) {
 8015950:	b1cd      	cbz	r5, 8015986 <lv_chart_inv_lines+0x9a>
            coords.x1 = ((w * (i - 1)) / (ext->point_cnt - 1)) + x_ofs - ext->series.width;
 8015952:	3d01      	subs	r5, #1
 8015954:	f8b8 2012 	ldrh.w	r2, [r8, #18]
 8015958:	f9b8 302c 	ldrsh.w	r3, [r8, #44]	; 0x2c
 801595c:	4365      	muls	r5, r4
 801595e:	3a01      	subs	r2, #1
 8015960:	1af8      	subs	r0, r7, r3
            coords.x2 = ((w * i) / (ext->point_cnt - 1)) + x_ofs + ext->series.width;
 8015962:	441f      	add	r7, r3
 8015964:	442c      	add	r4, r5
            coords.x1 = ((w * (i - 1)) / (ext->point_cnt - 1)) + x_ofs - ext->series.width;
 8015966:	fb95 f1f2 	sdiv	r1, r5, r2
            coords.x2 = ((w * i) / (ext->point_cnt - 1)) + x_ofs + ext->series.width;
 801596a:	fb94 f4f2 	sdiv	r4, r4, r2
            coords.x1 = ((w * (i - 1)) / (ext->point_cnt - 1)) + x_ofs - ext->series.width;
 801596e:	4401      	add	r1, r0
            coords.x2 = ((w * i) / (ext->point_cnt - 1)) + x_ofs + ext->series.width;
 8015970:	443c      	add	r4, r7
            lv_inv_area(lv_obj_get_disp(chart), &coords);
 8015972:	4630      	mov	r0, r6
            coords.x1 = ((w * (i - 1)) / (ext->point_cnt - 1)) + x_ofs - ext->series.width;
 8015974:	f8ad 1000 	strh.w	r1, [sp]
            coords.x2 = ((w * i) / (ext->point_cnt - 1)) + x_ofs + ext->series.width;
 8015978:	f8ad 4004 	strh.w	r4, [sp, #4]
            lv_inv_area(lv_obj_get_disp(chart), &coords);
 801597c:	f7ed f81c 	bl	80029b8 <lv_obj_get_disp>
 8015980:	4669      	mov	r1, sp
 8015982:	f7ed fab3 	bl	8002eec <lv_inv_area>
        }
    }
}
 8015986:	b002      	add	sp, #8
 8015988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801598c <lv_chart_set_range>:
{
 801598c:	b570      	push	{r4, r5, r6, lr}
 801598e:	460d      	mov	r5, r1
 8015990:	4606      	mov	r6, r0
 8015992:	4614      	mov	r4, r2
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8015994:	f7fa f894 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->ymin == ymin && ext->ymax == ymax) return;
 8015998:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 801599c:	42ab      	cmp	r3, r5
 801599e:	d103      	bne.n	80159a8 <lv_chart_set_range+0x1c>
 80159a0:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80159a4:	42a3      	cmp	r3, r4
 80159a6:	d006      	beq.n	80159b6 <lv_chart_set_range+0x2a>
    ext->ymin = ymin;
 80159a8:	8185      	strh	r5, [r0, #12]
    ext->ymax = ymax;
 80159aa:	81c4      	strh	r4, [r0, #14]
    lv_obj_invalidate(chart);
 80159ac:	4630      	mov	r0, r6
}
 80159ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(chart);
 80159b2:	f7f9 bc1d 	b.w	800f1f0 <lv_obj_invalidate>
}
 80159b6:	bd70      	pop	{r4, r5, r6, pc}

080159b8 <lv_chart_set_type>:
{
 80159b8:	b538      	push	{r3, r4, r5, lr}
 80159ba:	460c      	mov	r4, r1
 80159bc:	4605      	mov	r5, r0
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 80159be:	f7fa f87f 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->type == type) return;
 80159c2:	7d03      	ldrb	r3, [r0, #20]
 80159c4:	42a3      	cmp	r3, r4
 80159c6:	d005      	beq.n	80159d4 <lv_chart_set_type+0x1c>
    ext->type = type;
 80159c8:	7504      	strb	r4, [r0, #20]
    lv_obj_invalidate(chart);
 80159ca:	4628      	mov	r0, r5
}
 80159cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(chart);
 80159d0:	f7f9 bc0e 	b.w	800f1f0 <lv_obj_invalidate>
}
 80159d4:	bd38      	pop	{r3, r4, r5, pc}

080159d6 <lv_chart_set_series_opa>:
{
 80159d6:	b538      	push	{r3, r4, r5, lr}
 80159d8:	460c      	mov	r4, r1
 80159da:	4605      	mov	r5, r0
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 80159dc:	f7fa f870 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->series.opa == opa) return;
 80159e0:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 80159e4:	42a3      	cmp	r3, r4
 80159e6:	d006      	beq.n	80159f6 <lv_chart_set_series_opa+0x20>
    ext->series.opa = opa;
 80159e8:	f880 402f 	strb.w	r4, [r0, #47]	; 0x2f
    lv_obj_invalidate(chart);
 80159ec:	4628      	mov	r0, r5
}
 80159ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(chart);
 80159f2:	f7f9 bbfd 	b.w	800f1f0 <lv_obj_invalidate>
}
 80159f6:	bd38      	pop	{r3, r4, r5, pc}

080159f8 <lv_chart_set_next>:
{
 80159f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80159fc:	460f      	mov	r7, r1
 80159fe:	4615      	mov	r5, r2
 8015a00:	4604      	mov	r4, r0
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8015a02:	f7fa f85d 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT) {
 8015a06:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8015a0a:	4606      	mov	r6, r0
    if(ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT) {
 8015a0c:	88f9      	ldrh	r1, [r7, #6]
 8015a0e:	f013 0f01 	tst.w	r3, #1
 8015a12:	683b      	ldr	r3, [r7, #0]
        ser->points[ser->start_point] =
 8015a14:	f823 5011 	strh.w	r5, [r3, r1, lsl #1]
    if(ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT) {
 8015a18:	d10d      	bne.n	8015a36 <lv_chart_set_next+0x3e>
        ser->start_point = (ser->start_point + 1) % ext->point_cnt;
 8015a1a:	88fb      	ldrh	r3, [r7, #6]
 8015a1c:	8a41      	ldrh	r1, [r0, #18]
    lv_obj_invalidate(chart);
 8015a1e:	4620      	mov	r0, r4
        ser->start_point = (ser->start_point + 1) % ext->point_cnt;
 8015a20:	3301      	adds	r3, #1
 8015a22:	fbb3 f2f1 	udiv	r2, r3, r1
 8015a26:	fb01 3312 	mls	r3, r1, r2, r3
 8015a2a:	80fb      	strh	r3, [r7, #6]
    lv_obj_invalidate(chart);
 8015a2c:	f7f9 fbe0 	bl	800f1f0 <lv_obj_invalidate>
}
 8015a30:	b002      	add	sp, #8
 8015a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(ext->type & LV_CHART_TYPE_LINE) lv_chart_inv_lines(chart, ser->start_point);
 8015a36:	7d03      	ldrb	r3, [r0, #20]
 8015a38:	07dd      	lsls	r5, r3, #31
 8015a3a:	d503      	bpl.n	8015a44 <lv_chart_set_next+0x4c>
 8015a3c:	88f9      	ldrh	r1, [r7, #6]
 8015a3e:	4620      	mov	r0, r4
 8015a40:	f7ff ff54 	bl	80158ec <lv_chart_inv_lines>
        if(ext->type & LV_CHART_TYPE_COLUMN) lv_chart_inv_cols(chart, ser->start_point);
 8015a44:	7d33      	ldrb	r3, [r6, #20]
 8015a46:	0798      	lsls	r0, r3, #30
 8015a48:	d52b      	bpl.n	8015aa2 <lv_chart_set_next+0xaa>
 * @param chart pointer to chart object
 * @param mask mask, inherited from the design function
 */
static void lv_chart_inv_cols(lv_obj_t * chart, uint16_t i)
{
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8015a4a:	4620      	mov	r0, r4
 8015a4c:	88fd      	ldrh	r5, [r7, #6]
 8015a4e:	f7fa f837 	bl	800fac0 <lv_obj_get_ext_attr>
 8015a52:	4680      	mov	r8, r0

    lv_area_t col_a;
    lv_coord_t w     = lv_obj_get_width(chart);
 8015a54:	4620      	mov	r0, r4
 8015a56:	f7f9 ff98 	bl	800f98a <lv_obj_get_width>
    lv_coord_t col_w = w / ((ext->series.num + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
 8015a5a:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 8015a5e:	f898 802e 	ldrb.w	r8, [r8, #46]	; 0x2e
    lv_coord_t x_ofs = col_w / 2;                                    /*Shift with a half col.*/

    lv_coord_t x_act;

    x_act = (int32_t)((int32_t)w * i) / ext->point_cnt;
 8015a62:	4345      	muls	r5, r0
    x_act += chart->coords.x1 + x_ofs;

    lv_obj_get_coords(chart, &col_a);
 8015a64:	4669      	mov	r1, sp
    lv_coord_t col_w = w / ((ext->series.num + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
 8015a66:	fb08 3803 	mla	r8, r8, r3, r3
 8015a6a:	fb90 f8f8 	sdiv	r8, r0, r8
    x_act = (int32_t)((int32_t)w * i) / ext->point_cnt;
 8015a6e:	fb95 f5f3 	sdiv	r5, r5, r3
 8015a72:	8a20      	ldrh	r0, [r4, #16]
    lv_coord_t col_w = w / ((ext->series.num + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
 8015a74:	fa0f f888 	sxth.w	r8, r8
    x_act += chart->coords.x1 + x_ofs;
 8015a78:	4405      	add	r5, r0
    lv_coord_t x_ofs = col_w / 2;                                    /*Shift with a half col.*/
 8015a7a:	eb08 70d8 	add.w	r0, r8, r8, lsr #31
 8015a7e:	1040      	asrs	r0, r0, #1
    x_act += chart->coords.x1 + x_ofs;
 8015a80:	fa00 f585 	sxtah	r5, r0, r5
    lv_obj_get_coords(chart, &col_a);
 8015a84:	4620      	mov	r0, r4
 8015a86:	f7f9 ff6d 	bl	800f964 <lv_obj_get_coords>
    col_a.x1 = x_act;
    col_a.x2 = col_a.x1 + col_w;

    lv_inv_area(lv_obj_get_disp(chart), &col_a);
 8015a8a:	4620      	mov	r0, r4
    x_act += chart->coords.x1 + x_ofs;
 8015a8c:	b22d      	sxth	r5, r5
    col_a.x1 = x_act;
 8015a8e:	f8ad 5000 	strh.w	r5, [sp]
    col_a.x2 = col_a.x1 + col_w;
 8015a92:	4445      	add	r5, r8
 8015a94:	f8ad 5004 	strh.w	r5, [sp, #4]
    lv_inv_area(lv_obj_get_disp(chart), &col_a);
 8015a98:	f7ec ff8e 	bl	80029b8 <lv_obj_get_disp>
 8015a9c:	4669      	mov	r1, sp
 8015a9e:	f7ed fa25 	bl	8002eec <lv_inv_area>
        if(ext->type & LV_CHART_TYPE_POINT) lv_chart_inv_points(chart, ser->start_point);
 8015aa2:	7d33      	ldrb	r3, [r6, #20]
 8015aa4:	0759      	lsls	r1, r3, #29
 8015aa6:	d527      	bpl.n	8015af8 <lv_chart_set_next+0x100>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
 8015aa8:	4620      	mov	r0, r4
 8015aaa:	f8b7 8006 	ldrh.w	r8, [r7, #6]
 8015aae:	f7fa f807 	bl	800fac0 <lv_obj_get_ext_attr>
 8015ab2:	4681      	mov	r9, r0
    lv_coord_t w     = lv_obj_get_width(chart);
 8015ab4:	4620      	mov	r0, r4
 8015ab6:	f7f9 ff68 	bl	800f98a <lv_obj_get_width>
 8015aba:	4682      	mov	sl, r0
    lv_obj_get_coords(chart, &cir_a);
 8015abc:	4669      	mov	r1, sp
 8015abe:	4620      	mov	r0, r4
    lv_coord_t x_ofs = chart->coords.x1;
 8015ac0:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
    lv_obj_get_coords(chart, &cir_a);
 8015ac4:	f7f9 ff4e 	bl	800f964 <lv_obj_get_coords>
    cir_a.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 8015ac8:	fb08 f30a 	mul.w	r3, r8, sl
 8015acc:	f8b9 8012 	ldrh.w	r8, [r9, #18]
    cir_a.x2 = cir_a.x1 + ext->series.width;
 8015ad0:	f9b9 202c 	ldrsh.w	r2, [r9, #44]	; 0x2c
    lv_inv_area(lv_obj_get_disp(chart), &cir_a);
 8015ad4:	4620      	mov	r0, r4
    cir_a.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
 8015ad6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8015ada:	fb93 f3f8 	sdiv	r3, r3, r8
 8015ade:	442b      	add	r3, r5
 8015ae0:	b21b      	sxth	r3, r3
    cir_a.x2 = cir_a.x1 + ext->series.width;
 8015ae2:	1899      	adds	r1, r3, r2
    cir_a.x1 -= ext->series.width;
 8015ae4:	1a9b      	subs	r3, r3, r2
    cir_a.x2 = cir_a.x1 + ext->series.width;
 8015ae6:	f8ad 1004 	strh.w	r1, [sp, #4]
    cir_a.x1 -= ext->series.width;
 8015aea:	f8ad 3000 	strh.w	r3, [sp]
    lv_inv_area(lv_obj_get_disp(chart), &cir_a);
 8015aee:	f7ec ff63 	bl	80029b8 <lv_obj_get_disp>
 8015af2:	4669      	mov	r1, sp
 8015af4:	f7ed f9fa 	bl	8002eec <lv_inv_area>
        if(ext->type & LV_CHART_TYPE_VERTICAL_LINE) lv_chart_inv_lines(chart, ser->start_point);
 8015af8:	7d33      	ldrb	r3, [r6, #20]
 8015afa:	071a      	lsls	r2, r3, #28
 8015afc:	d503      	bpl.n	8015b06 <lv_chart_set_next+0x10e>
 8015afe:	88f9      	ldrh	r1, [r7, #6]
 8015b00:	4620      	mov	r0, r4
 8015b02:	f7ff fef3 	bl	80158ec <lv_chart_inv_lines>
        if(ext->type & LV_CHART_TYPE_AREA) lv_chart_inv_lines(chart, ser->start_point);
 8015b06:	7d33      	ldrb	r3, [r6, #20]
 8015b08:	06db      	lsls	r3, r3, #27
 8015b0a:	d503      	bpl.n	8015b14 <lv_chart_set_next+0x11c>
 8015b0c:	88f9      	ldrh	r1, [r7, #6]
 8015b0e:	4620      	mov	r0, r4
 8015b10:	f7ff feec 	bl	80158ec <lv_chart_inv_lines>
        ser->start_point = (ser->start_point + 1) % ext->point_cnt; /*update the x for next incoming y*/
 8015b14:	88fb      	ldrh	r3, [r7, #6]
 8015b16:	8a71      	ldrh	r1, [r6, #18]
 8015b18:	3301      	adds	r3, #1
 8015b1a:	fbb3 f2f1 	udiv	r2, r3, r1
 8015b1e:	fb01 3312 	mls	r3, r1, r2, r3
 8015b22:	80fb      	strh	r3, [r7, #6]
}
 8015b24:	e784      	b.n	8015a30 <lv_chart_set_next+0x38>

08015b26 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
 8015b26:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8015b28:	f7f9 ffca 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
 8015b2c:	7fc3      	ldrb	r3, [r0, #31]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8015b2e:	4604      	mov	r4, r0
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
 8015b30:	079b      	lsls	r3, r3, #30
 8015b32:	d503      	bpl.n	8015b3c <lv_label_dot_tmp_free+0x16>
 8015b34:	6840      	ldr	r0, [r0, #4]
 8015b36:	b108      	cbz	r0, 8015b3c <lv_label_dot_tmp_free+0x16>
        lv_mem_free(ext->dot.tmp_ptr);
 8015b38:	f7ed fddc 	bl	80036f4 <lv_mem_free>
    }
    ext->dot_tmp_alloc = false;
 8015b3c:	7fe3      	ldrb	r3, [r4, #31]
 8015b3e:	f36f 0341 	bfc	r3, #1, #1
 8015b42:	77e3      	strb	r3, [r4, #31]
    ext->dot.tmp_ptr   = NULL;
 8015b44:	2300      	movs	r3, #0
 8015b46:	6063      	str	r3, [r4, #4]
}
 8015b48:	bd10      	pop	{r4, pc}

08015b4a <lv_label_set_offset_y>:
{
 8015b4a:	b538      	push	{r3, r4, r5, lr}
 8015b4c:	4604      	mov	r4, r0
 8015b4e:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8015b50:	f7f9 ffb6 	bl	800fac0 <lv_obj_get_ext_attr>
    ext->offset.y        = y;
 8015b54:	8185      	strh	r5, [r0, #12]
    lv_obj_invalidate(label);
 8015b56:	4620      	mov	r0, r4
}
 8015b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 8015b5c:	f7f9 bb48 	b.w	800f1f0 <lv_obj_invalidate>

08015b60 <lv_label_set_offset_x>:
{
 8015b60:	b538      	push	{r3, r4, r5, lr}
 8015b62:	4604      	mov	r4, r0
 8015b64:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8015b66:	f7f9 ffab 	bl	800fac0 <lv_obj_get_ext_attr>
    ext->offset.x        = x;
 8015b6a:	8145      	strh	r5, [r0, #10]
    lv_obj_invalidate(label);
 8015b6c:	4620      	mov	r0, r4
}
 8015b6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 8015b72:	f7f9 bb3d 	b.w	800f1f0 <lv_obj_invalidate>

08015b76 <lv_label_design>:
    if(mode == LV_DESIGN_COVER_CHK)
 8015b76:	2a02      	cmp	r2, #2
{
 8015b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b7c:	4607      	mov	r7, r0
 8015b7e:	b08d      	sub	sp, #52	; 0x34
 8015b80:	4688      	mov	r8, r1
    if(mode == LV_DESIGN_COVER_CHK)
 8015b82:	f000 80ff 	beq.w	8015d84 <lv_label_design+0x20e>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8015b86:	2a00      	cmp	r2, #0
 8015b88:	f040 80f3 	bne.w	8015d72 <lv_label_design+0x1fc>
        const lv_style_t * style = lv_obj_get_style(label);
 8015b8c:	f7ed f8d8 	bl	8002d40 <lv_obj_get_style>
 8015b90:	4604      	mov	r4, r0
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(label);
 8015b92:	4638      	mov	r0, r7
 8015b94:	f7f9 ff2b 	bl	800f9ee <lv_obj_get_opa_scale>
        lv_obj_get_coords(label, &coords);
 8015b98:	a908      	add	r1, sp, #32
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(label);
 8015b9a:	4681      	mov	r9, r0
        lv_obj_get_coords(label, &coords);
 8015b9c:	4638      	mov	r0, r7
 8015b9e:	f7f9 fee1 	bl	800f964 <lv_obj_get_coords>
        lv_group_t * g = lv_obj_get_group(label);
 8015ba2:	4638      	mov	r0, r7
 8015ba4:	f7f9 ffba 	bl	800fb1c <lv_obj_get_group>
        if(lv_group_get_focused(g) == label) {
 8015ba8:	f7f9 f9dc 	bl	800ef64 <lv_group_get_focused>
 8015bac:	4287      	cmp	r7, r0
 8015bae:	d105      	bne.n	8015bbc <lv_label_design+0x46>
            lv_draw_rect(&coords, mask, style, opa_scale);
 8015bb0:	464b      	mov	r3, r9
 8015bb2:	4622      	mov	r2, r4
 8015bb4:	4641      	mov	r1, r8
 8015bb6:	a808      	add	r0, sp, #32
 8015bb8:	f7fb fd4f 	bl	801165a <lv_draw_rect>
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8015bbc:	4638      	mov	r0, r7
 8015bbe:	f7f9 ff7f 	bl	800fac0 <lv_obj_get_ext_attr>
        if(ext->body_draw) {
 8015bc2:	7fc3      	ldrb	r3, [r0, #31]
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8015bc4:	4605      	mov	r5, r0
        if(ext->body_draw) {
 8015bc6:	07d8      	lsls	r0, r3, #31
 8015bc8:	d524      	bpl.n	8015c14 <lv_label_design+0x9e>
            lv_obj_get_coords(label, &bg);
 8015bca:	a90a      	add	r1, sp, #40	; 0x28
 8015bcc:	4638      	mov	r0, r7
 8015bce:	f7f9 fec9 	bl	800f964 <lv_obj_get_coords>
            bg.x1 -= style->body.padding.left;
 8015bd2:	8b62      	ldrh	r2, [r4, #26]
 8015bd4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
 8015bd8:	4638      	mov	r0, r7
            bg.x1 -= style->body.padding.left;
 8015bda:	1a9b      	subs	r3, r3, r2
            bg.x2 += style->body.padding.right;
 8015bdc:	8ba2      	ldrh	r2, [r4, #28]
            bg.x1 -= style->body.padding.left;
 8015bde:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            bg.x2 += style->body.padding.right;
 8015be2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8015be6:	4413      	add	r3, r2
            bg.y1 -= style->body.padding.top;
 8015be8:	8ae2      	ldrh	r2, [r4, #22]
            bg.x2 += style->body.padding.right;
 8015bea:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            bg.y1 -= style->body.padding.top;
 8015bee:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8015bf2:	1a9b      	subs	r3, r3, r2
            bg.y2 += style->body.padding.bottom;
 8015bf4:	8b22      	ldrh	r2, [r4, #24]
            bg.y1 -= style->body.padding.top;
 8015bf6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            bg.y2 += style->body.padding.bottom;
 8015bfa:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8015bfe:	4413      	add	r3, r2
 8015c00:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
 8015c04:	f7f9 fef3 	bl	800f9ee <lv_obj_get_opa_scale>
 8015c08:	4622      	mov	r2, r4
 8015c0a:	4603      	mov	r3, r0
 8015c0c:	4641      	mov	r1, r8
 8015c0e:	a80a      	add	r0, sp, #40	; 0x28
 8015c10:	f7fb fd23 	bl	801165a <lv_draw_rect>
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 8015c14:	7fab      	ldrb	r3, [r5, #30]
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8015c16:	0619      	lsls	r1, r3, #24
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 8015c18:	f3c3 1680 	ubfx	r6, r3, #6, #1
        if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 8015c1c:	f003 0230 	and.w	r2, r3, #48	; 0x30
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8015c20:	bf48      	it	mi
 8015c22:	f046 0602 	orrmi.w	r6, r6, #2
        if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 8015c26:	2a10      	cmp	r2, #16
 8015c28:	f040 80a5 	bne.w	8015d76 <lv_label_design+0x200>
 8015c2c:	f046 0604 	orr.w	r6, r6, #4
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
 8015c30:	f003 0307 	and.w	r3, r3, #7
 8015c34:	3b03      	subs	r3, #3
 8015c36:	2b01      	cmp	r3, #1
 8015c38:	d81a      	bhi.n	8015c70 <lv_label_design+0xfa>
 8015c3a:	2a10      	cmp	r2, #16
 8015c3c:	d001      	beq.n	8015c42 <lv_label_design+0xcc>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
 8015c3e:	2a20      	cmp	r2, #32
 8015c40:	d116      	bne.n	8015c70 <lv_label_design+0xfa>
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
 8015c42:	f647 4218 	movw	r2, #31768	; 0x7c18
 8015c46:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8015c4a:	9602      	str	r6, [sp, #8]
 8015c4c:	a80a      	add	r0, sp, #40	; 0x28
 8015c4e:	9201      	str	r2, [sp, #4]
 8015c50:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 8015c54:	9200      	str	r2, [sp, #0]
 8015c56:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8015c58:	6829      	ldr	r1, [r5, #0]
 8015c5a:	f7fa fc3a 	bl	80104d2 <lv_txt_get_size>
            if(size.x > lv_obj_get_width(label)) {
 8015c5e:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8015c62:	4638      	mov	r0, r7
 8015c64:	f7f9 fe91 	bl	800f98a <lv_obj_get_width>
 8015c68:	4582      	cmp	sl, r0
                flag &= ~LV_TXT_FLAG_CENTER;
 8015c6a:	bfc8      	it	gt
 8015c6c:	f006 06f3 	andgt.w	r6, r6, #243	; 0xf3
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC || lv_obj_get_height(label) < LV_LABEL_HINT_HEIGHT_LIMIT)
 8015c70:	7fab      	ldrb	r3, [r5, #30]
 8015c72:	f003 0307 	and.w	r3, r3, #7
 8015c76:	2b04      	cmp	r3, #4
 8015c78:	f000 8082 	beq.w	8015d80 <lv_label_design+0x20a>
 8015c7c:	4638      	mov	r0, r7
 8015c7e:	f7f9 fe8a 	bl	800f996 <lv_obj_get_height>
 8015c82:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015c86:	db7b      	blt.n	8015d80 <lv_label_design+0x20a>
        lv_draw_label_hint_t * hint = &ext->hint;
 8015c88:	f105 0310 	add.w	r3, r5, #16
        lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ext->offset,
 8015c8c:	9305      	str	r3, [sp, #20]
 8015c8e:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8015c92:	f105 030a 	add.w	r3, r5, #10
 8015c96:	4622      	mov	r2, r4
 8015c98:	4641      	mov	r1, r8
 8015c9a:	a808      	add	r0, sp, #32
 8015c9c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8015ca0:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8015ca4:	682b      	ldr	r3, [r5, #0]
 8015ca6:	9300      	str	r3, [sp, #0]
 8015ca8:	464b      	mov	r3, r9
 8015caa:	f7ee fd8f 	bl	80047cc <lv_draw_label>
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 8015cae:	7fab      	ldrb	r3, [r5, #30]
 8015cb0:	f003 0307 	and.w	r3, r3, #7
 8015cb4:	2b04      	cmp	r3, #4
 8015cb6:	d15c      	bne.n	8015d72 <lv_label_design+0x1fc>
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
 8015cb8:	f647 4218 	movw	r2, #31768	; 0x7c18
 8015cbc:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8015cc0:	9602      	str	r6, [sp, #8]
 8015cc2:	a807      	add	r0, sp, #28
 8015cc4:	9201      	str	r2, [sp, #4]
 8015cc6:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 8015cca:	9200      	str	r2, [sp, #0]
 8015ccc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8015cce:	6829      	ldr	r1, [r5, #0]
 8015cd0:	f7fa fbff 	bl	80104d2 <lv_txt_get_size>
            if(size.x > lv_obj_get_width(label)) {
 8015cd4:	f9bd a01c 	ldrsh.w	sl, [sp, #28]
 8015cd8:	4638      	mov	r0, r7
 8015cda:	f7f9 fe56 	bl	800f98a <lv_obj_get_width>
 8015cde:	4582      	cmp	sl, r0
 8015ce0:	dd23      	ble.n	8015d2a <lv_label_design+0x1b4>
                ofs.x = ext->offset.x + size.x +
 8015ce2:	f8bd 001c 	ldrh.w	r0, [sp, #28]
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8015ce6:	2220      	movs	r2, #32
                ofs.x = ext->offset.x + size.x +
 8015ce8:	f8b5 a00a 	ldrh.w	sl, [r5, #10]
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8015cec:	4611      	mov	r1, r2
                ofs.x = ext->offset.x + size.x +
 8015cee:	4482      	add	sl, r0
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8015cf0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015cf2:	f7fe f9e4 	bl	80140be <lv_font_get_glyph_width>
                ofs.y = ext->offset.y;
 8015cf6:	89ab      	ldrh	r3, [r5, #12]
                ofs.x = ext->offset.x + size.x +
 8015cf8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 8015cfc:	f8cd b00c 	str.w	fp, [sp, #12]
                ofs.y = ext->offset.y;
 8015d00:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 8015d04:	2300      	movs	r3, #0
                ofs.x = ext->offset.x + size.x +
 8015d06:	fa0f fa8a 	sxth.w	sl, sl
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 8015d0a:	4622      	mov	r2, r4
 8015d0c:	4641      	mov	r1, r8
                ofs.x = ext->offset.x + size.x +
 8015d0e:	4482      	add	sl, r0
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 8015d10:	a808      	add	r0, sp, #32
 8015d12:	e9cd b304 	strd	fp, r3, [sp, #16]
 8015d16:	ab0a      	add	r3, sp, #40	; 0x28
                ofs.x = ext->offset.x + size.x +
 8015d18:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 8015d1c:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8015d20:	682b      	ldr	r3, [r5, #0]
 8015d22:	9300      	str	r3, [sp, #0]
 8015d24:	464b      	mov	r3, r9
 8015d26:	f7ee fd51 	bl	80047cc <lv_draw_label>
            if(size.y > lv_obj_get_height(label)) {
 8015d2a:	f9bd a01e 	ldrsh.w	sl, [sp, #30]
 8015d2e:	4638      	mov	r0, r7
 8015d30:	f7f9 fe31 	bl	800f996 <lv_obj_get_height>
 8015d34:	4582      	cmp	sl, r0
 8015d36:	dd1c      	ble.n	8015d72 <lv_label_design+0x1fc>
                ofs.x = ext->offset.x;
 8015d38:	896b      	ldrh	r3, [r5, #10]
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 8015d3a:	4641      	mov	r1, r8
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
 8015d3c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 8015d40:	a808      	add	r0, sp, #32
                ofs.x = ext->offset.x;
 8015d42:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
 8015d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015d48:	7a1b      	ldrb	r3, [r3, #8]
 8015d4a:	4413      	add	r3, r2
 8015d4c:	89aa      	ldrh	r2, [r5, #12]
 8015d4e:	4413      	add	r3, r2
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 8015d50:	2200      	movs	r2, #0
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
 8015d52:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 8015d56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d5a:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8015d5e:	9303      	str	r3, [sp, #12]
 8015d60:	ab0a      	add	r3, sp, #40	; 0x28
 8015d62:	4622      	mov	r2, r4
 8015d64:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8015d68:	682b      	ldr	r3, [r5, #0]
 8015d6a:	9300      	str	r3, [sp, #0]
 8015d6c:	464b      	mov	r3, r9
 8015d6e:	f7ee fd2d 	bl	80047cc <lv_draw_label>
    return true;
 8015d72:	2001      	movs	r0, #1
 8015d74:	e007      	b.n	8015d86 <lv_label_design+0x210>
        if(ext->align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
 8015d76:	2a20      	cmp	r2, #32
 8015d78:	bf08      	it	eq
 8015d7a:	f046 0608 	orreq.w	r6, r6, #8
 8015d7e:	e757      	b.n	8015c30 <lv_label_design+0xba>
            hint = NULL;
 8015d80:	2300      	movs	r3, #0
 8015d82:	e783      	b.n	8015c8c <lv_label_design+0x116>
        return false;
 8015d84:	2000      	movs	r0, #0
}
 8015d86:	b00d      	add	sp, #52	; 0x34
 8015d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015d8c <lv_label_set_align>:
{
 8015d8c:	b538      	push	{r3, r4, r5, lr}
 8015d8e:	460c      	mov	r4, r1
 8015d90:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8015d92:	f7f9 fe95 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->align == align) return;
 8015d96:	7f83      	ldrb	r3, [r0, #30]
 8015d98:	f3c3 1201 	ubfx	r2, r3, #4, #2
 8015d9c:	42a2      	cmp	r2, r4
 8015d9e:	d007      	beq.n	8015db0 <lv_label_set_align+0x24>
    ext->align = align;
 8015da0:	f364 1305 	bfi	r3, r4, #4, #2
 8015da4:	7783      	strb	r3, [r0, #30]
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
 8015da6:	4628      	mov	r0, r5
}
 8015da8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
 8015dac:	f7f9 ba20 	b.w	800f1f0 <lv_obj_invalidate>
}
 8015db0:	bd38      	pop	{r3, r4, r5, pc}

08015db2 <lv_label_set_body_draw>:
{
 8015db2:	b538      	push	{r3, r4, r5, lr}
 8015db4:	460d      	mov	r5, r1
 8015db6:	4604      	mov	r4, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8015db8:	f7f9 fe82 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->body_draw == en) return;
 8015dbc:	7fc3      	ldrb	r3, [r0, #31]
 8015dbe:	f003 0201 	and.w	r2, r3, #1
 8015dc2:	42aa      	cmp	r2, r5
 8015dc4:	d00a      	beq.n	8015ddc <lv_label_set_body_draw+0x2a>
    ext->body_draw = en == false ? 0 : 1;
 8015dc6:	f365 0300 	bfi	r3, r5, #0, #1
 8015dca:	77c3      	strb	r3, [r0, #31]
    lv_obj_refresh_ext_draw_pad(label);
 8015dcc:	4620      	mov	r0, r4
 8015dce:	f7f9 fd1f 	bl	800f810 <lv_obj_refresh_ext_draw_pad>
    lv_obj_invalidate(label);
 8015dd2:	4620      	mov	r0, r4
}
 8015dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 8015dd8:	f7f9 ba0a 	b.w	800f1f0 <lv_obj_invalidate>
}
 8015ddc:	bd38      	pop	{r3, r4, r5, pc}

08015dde <lv_label_get_text>:
{
 8015dde:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8015de0:	f7f9 fe6e 	bl	800fac0 <lv_obj_get_ext_attr>
}
 8015de4:	6800      	ldr	r0, [r0, #0]
 8015de6:	bd08      	pop	{r3, pc}

08015de8 <lv_label_get_long_mode>:
{
 8015de8:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8015dea:	f7f9 fe69 	bl	800fac0 <lv_obj_get_ext_attr>
    return ext->long_mode;
 8015dee:	7f80      	ldrb	r0, [r0, #30]
}
 8015df0:	f000 0007 	and.w	r0, r0, #7
 8015df4:	bd08      	pop	{r3, pc}

08015df6 <lv_label_get_align>:
{
 8015df6:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8015df8:	f7f9 fe62 	bl	800fac0 <lv_obj_get_ext_attr>
    return ext->align;
 8015dfc:	7f80      	ldrb	r0, [r0, #30]
}
 8015dfe:	f3c0 1001 	ubfx	r0, r0, #4, #2
 8015e02:	bd08      	pop	{r3, pc}

08015e04 <lv_label_get_recolor>:
{
 8015e04:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8015e06:	f7f9 fe5b 	bl	800fac0 <lv_obj_get_ext_attr>
    return ext->recolor == 0 ? false : true;
 8015e0a:	7f80      	ldrb	r0, [r0, #30]
}
 8015e0c:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8015e10:	bd08      	pop	{r3, pc}

08015e12 <lv_label_get_body_draw>:
{
 8015e12:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8015e14:	f7f9 fe54 	bl	800fac0 <lv_obj_get_ext_attr>
    return ext->body_draw == 0 ? false : true;
 8015e18:	7fc0      	ldrb	r0, [r0, #31]
}
 8015e1a:	f000 0001 	and.w	r0, r0, #1
 8015e1e:	bd08      	pop	{r3, pc}

08015e20 <lv_label_set_static_text>:
{
 8015e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e22:	4607      	mov	r7, r0
 8015e24:	460e      	mov	r6, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8015e26:	f7f9 fe4b 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->static_txt == 0 && ext->text != NULL) {
 8015e2a:	7f83      	ldrb	r3, [r0, #30]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8015e2c:	4604      	mov	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
 8015e2e:	f013 0508 	ands.w	r5, r3, #8
 8015e32:	d104      	bne.n	8015e3e <lv_label_set_static_text+0x1e>
 8015e34:	6800      	ldr	r0, [r0, #0]
 8015e36:	b110      	cbz	r0, 8015e3e <lv_label_set_static_text+0x1e>
        lv_mem_free(ext->text);
 8015e38:	f7ed fc5c 	bl	80036f4 <lv_mem_free>
        ext->text = NULL;
 8015e3c:	6025      	str	r5, [r4, #0]
    if(text != NULL) {
 8015e3e:	b126      	cbz	r6, 8015e4a <lv_label_set_static_text+0x2a>
        ext->static_txt = 1;
 8015e40:	7fa3      	ldrb	r3, [r4, #30]
        ext->text       = (char *)text;
 8015e42:	6026      	str	r6, [r4, #0]
        ext->static_txt = 1;
 8015e44:	f043 0308 	orr.w	r3, r3, #8
 8015e48:	77a3      	strb	r3, [r4, #30]
    lv_label_refr_text(label);
 8015e4a:	4638      	mov	r0, r7
}
 8015e4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_refr_text(label);
 8015e50:	f7f5 b8b8 	b.w	800afc4 <lv_label_refr_text>

08015e54 <lv_label_set_recolor>:
{
 8015e54:	b538      	push	{r3, r4, r5, lr}
 8015e56:	460c      	mov	r4, r1
 8015e58:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8015e5a:	f7f9 fe31 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->recolor == en) return;
 8015e5e:	7f83      	ldrb	r3, [r0, #30]
 8015e60:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8015e64:	42a2      	cmp	r2, r4
 8015e66:	d007      	beq.n	8015e78 <lv_label_set_recolor+0x24>
    ext->recolor = en == false ? 0 : 1;
 8015e68:	f364 1386 	bfi	r3, r4, #6, #1
 8015e6c:	7783      	strb	r3, [r0, #30]
    lv_label_refr_text(label); /*Refresh the text because the potential colo codes in text needs to
 8015e6e:	4628      	mov	r0, r5
}
 8015e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_refr_text(label); /*Refresh the text because the potential colo codes in text needs to
 8015e74:	f7f5 b8a6 	b.w	800afc4 <lv_label_refr_text>
}
 8015e78:	bd38      	pop	{r3, r4, r5, pc}

08015e7a <lv_slider_set_style>:
{
 8015e7a:	b570      	push	{r4, r5, r6, lr}
 8015e7c:	460c      	mov	r4, r1
 8015e7e:	4605      	mov	r5, r0
 8015e80:	4616      	mov	r6, r2
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 8015e82:	f7f9 fe1d 	bl	800fac0 <lv_obj_get_ext_attr>
    switch(type) {
 8015e86:	2c01      	cmp	r4, #1
 8015e88:	d00a      	beq.n	8015ea0 <lv_slider_set_style+0x26>
 8015e8a:	b261      	sxtb	r1, r4
 8015e8c:	b111      	cbz	r1, 8015e94 <lv_slider_set_style+0x1a>
 8015e8e:	2c02      	cmp	r4, #2
 8015e90:	d009      	beq.n	8015ea6 <lv_slider_set_style+0x2c>
}
 8015e92:	bd70      	pop	{r4, r5, r6, pc}
        case LV_SLIDER_STYLE_BG: lv_bar_set_style(slider, LV_BAR_STYLE_BG, style); break;
 8015e94:	4632      	mov	r2, r6
        case LV_SLIDER_STYLE_INDIC: lv_bar_set_style(slider, LV_BAR_STYLE_INDIC, style); break;
 8015e96:	4628      	mov	r0, r5
}
 8015e98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case LV_SLIDER_STYLE_INDIC: lv_bar_set_style(slider, LV_BAR_STYLE_INDIC, style); break;
 8015e9c:	f7fe bc02 	b.w	80146a4 <lv_bar_set_style>
 8015ea0:	4632      	mov	r2, r6
 8015ea2:	4621      	mov	r1, r4
 8015ea4:	e7f7      	b.n	8015e96 <lv_slider_set_style+0x1c>
            ext->style_knob = style;
 8015ea6:	6146      	str	r6, [r0, #20]
            lv_obj_refresh_ext_draw_pad(slider);
 8015ea8:	4628      	mov	r0, r5
}
 8015eaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_refresh_ext_draw_pad(slider);
 8015eae:	f7f9 bcaf 	b.w	800f810 <lv_obj_refresh_ext_draw_pad>

08015eb2 <lv_slider_get_value>:
{
 8015eb2:	b510      	push	{r4, lr}
 8015eb4:	4604      	mov	r4, r0
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 8015eb6:	f7f9 fe03 	bl	800fac0 <lv_obj_get_ext_attr>
    if(ext->drag_value != LV_SLIDER_NOT_PRESSED)
 8015eba:	f9b0 0018 	ldrsh.w	r0, [r0, #24]
 8015ebe:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8015ec2:	d104      	bne.n	8015ece <lv_slider_get_value+0x1c>
        return lv_bar_get_value(slider);
 8015ec4:	4620      	mov	r0, r4
}
 8015ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return lv_bar_get_value(slider);
 8015eca:	f7fe bc01 	b.w	80146d0 <lv_bar_get_value>
}
 8015ece:	bd10      	pop	{r4, pc}

08015ed0 <lv_slider_get_style>:
{
 8015ed0:	b538      	push	{r3, r4, r5, lr}
 8015ed2:	460c      	mov	r4, r1
 8015ed4:	4605      	mov	r5, r0
    lv_slider_ext_t * ext    = lv_obj_get_ext_attr(slider);
 8015ed6:	f7f9 fdf3 	bl	800fac0 <lv_obj_get_ext_attr>
    switch(type) {
 8015eda:	2c01      	cmp	r4, #1
 8015edc:	d005      	beq.n	8015eea <lv_slider_get_style+0x1a>
 8015ede:	b261      	sxtb	r1, r4
 8015ee0:	b121      	cbz	r1, 8015eec <lv_slider_get_style+0x1c>
 8015ee2:	2c02      	cmp	r4, #2
 8015ee4:	d007      	beq.n	8015ef6 <lv_slider_get_style+0x26>
        default: style = NULL; break;
 8015ee6:	2000      	movs	r0, #0
}
 8015ee8:	bd38      	pop	{r3, r4, r5, pc}
        case LV_SLIDER_STYLE_INDIC: style = lv_bar_get_style(slider, LV_BAR_STYLE_INDIC); break;
 8015eea:	4621      	mov	r1, r4
 8015eec:	4628      	mov	r0, r5
}
 8015eee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        case LV_SLIDER_STYLE_INDIC: style = lv_bar_get_style(slider, LV_BAR_STYLE_INDIC); break;
 8015ef2:	f7fe bc05 	b.w	8014700 <lv_bar_get_style>
        case LV_SLIDER_STYLE_KNOB: style = ext->style_knob; break;
 8015ef6:	6940      	ldr	r0, [r0, #20]
    return style;
 8015ef8:	e7f6      	b.n	8015ee8 <lv_slider_get_style+0x18>

08015efa <lv_slider_design>:
{
 8015efa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 8015efe:	2a02      	cmp	r2, #2
{
 8015f00:	b0a1      	sub	sp, #132	; 0x84
 8015f02:	4605      	mov	r5, r0
 8015f04:	4614      	mov	r4, r2
 8015f06:	9103      	str	r1, [sp, #12]
    if(mode == LV_DESIGN_COVER_CHK) {
 8015f08:	f000 8226 	beq.w	8016358 <lv_slider_design+0x45e>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8015f0c:	2a00      	cmp	r2, #0
 8015f0e:	f040 8151 	bne.w	80161b4 <lv_slider_design+0x2ba>
        lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 8015f12:	f7f9 fdd5 	bl	800fac0 <lv_obj_get_ext_attr>
        const lv_style_t * style_bg    = lv_slider_get_style(slider, LV_SLIDER_STYLE_BG);
 8015f16:	4621      	mov	r1, r4
        lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 8015f18:	4606      	mov	r6, r0
        const lv_style_t * style_bg    = lv_slider_get_style(slider, LV_SLIDER_STYLE_BG);
 8015f1a:	4628      	mov	r0, r5
 8015f1c:	f7ff ffd8 	bl	8015ed0 <lv_slider_get_style>
 8015f20:	4681      	mov	r9, r0
    lv_slider_ext_t * ext    = lv_obj_get_ext_attr(slider);
 8015f22:	4628      	mov	r0, r5
 8015f24:	f7f9 fdcc 	bl	800fac0 <lv_obj_get_ext_attr>
        case LV_SLIDER_STYLE_KNOB: style = ext->style_knob; break;
 8015f28:	6943      	ldr	r3, [r0, #20]
        const lv_style_t * style_indic = lv_slider_get_style(slider, LV_SLIDER_STYLE_INDIC);
 8015f2a:	2101      	movs	r1, #1
 8015f2c:	4628      	mov	r0, r5
        case LV_SLIDER_STYLE_KNOB: style = ext->style_knob; break;
 8015f2e:	930b      	str	r3, [sp, #44]	; 0x2c
        const lv_style_t * style_indic = lv_slider_get_style(slider, LV_SLIDER_STYLE_INDIC);
 8015f30:	f7ff ffce 	bl	8015ed0 <lv_slider_get_style>
 8015f34:	9000      	str	r0, [sp, #0]
        lv_opa_t opa_scale = lv_obj_get_opa_scale(slider);
 8015f36:	4628      	mov	r0, r5
 8015f38:	f7f9 fd59 	bl	800f9ee <lv_obj_get_opa_scale>
    return area_p->x2 - area_p->x1 + 1;
 8015f3c:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 8015f40:	9001      	str	r0, [sp, #4]
    memcpy(dest, src, sizeof(lv_area_t));
 8015f42:	a80d      	add	r0, sp, #52	; 0x34
    return area_p->x2 - area_p->x1 + 1;
 8015f44:	9306      	str	r3, [sp, #24]
 8015f46:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 8015f4a:	9307      	str	r3, [sp, #28]
 8015f4c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8015f50:	1a9b      	subs	r3, r3, r2
 8015f52:	b21b      	sxth	r3, r3
 8015f54:	9305      	str	r3, [sp, #20]
 8015f56:	3301      	adds	r3, #1
 8015f58:	fa0f fa83 	sxth.w	sl, r3
    return area_p->y2 - area_p->y1 + 1;
 8015f5c:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 8015f60:	9308      	str	r3, [sp, #32]
 8015f62:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 8015f66:	9309      	str	r3, [sp, #36]	; 0x24
 8015f68:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8015f6c:	1a9b      	subs	r3, r3, r2
    memcpy(dest, src, sizeof(lv_area_t));
 8015f6e:	2208      	movs	r2, #8
    return area_p->y2 - area_p->y1 + 1;
 8015f70:	b21b      	sxth	r3, r3
 8015f72:	1c5c      	adds	r4, r3, #1
 8015f74:	9304      	str	r3, [sp, #16]
 8015f76:	b223      	sxth	r3, r4
 8015f78:	9302      	str	r3, [sp, #8]
        lv_area_copy(&area_bg, &slider->coords);
 8015f7a:	f105 0310 	add.w	r3, r5, #16
    memcpy(dest, src, sizeof(lv_area_t));
 8015f7e:	4619      	mov	r1, r3
 8015f80:	930a      	str	r3, [sp, #40]	; 0x28
 8015f82:	f000 fbf5 	bl	8016770 <memcpy>
    return area_p->y2 - area_p->y1 + 1;
 8015f86:	f9bd e03a 	ldrsh.w	lr, [sp, #58]	; 0x3a
        lv_coord_t pad_top_bg    = style_bg->body.padding.top;
 8015f8a:	f9b9 3016 	ldrsh.w	r3, [r9, #22]
        lv_coord_t pad_bottom_bg = style_bg->body.padding.bottom;
 8015f8e:	f9b9 2018 	ldrsh.w	r2, [r9, #24]
 8015f92:	f10e 0101 	add.w	r1, lr, #1
 8015f96:	f9bd 8036 	ldrsh.w	r8, [sp, #54]	; 0x36
        if(pad_top_bg + pad_bottom_bg + LV_SLIDER_SIZE_MIN > lv_area_get_height(&area_bg)) {
 8015f9a:	1898      	adds	r0, r3, r2
        lv_coord_t pad_left_bg   = style_bg->body.padding.left;
 8015f9c:	f9b9 701a 	ldrsh.w	r7, [r9, #26]
 8015fa0:	eba1 0108 	sub.w	r1, r1, r8
        lv_coord_t pad_right_bg  = style_bg->body.padding.right;
 8015fa4:	f9b9 c01c 	ldrsh.w	ip, [r9, #28]
        if(pad_top_bg + pad_bottom_bg + LV_SLIDER_SIZE_MIN > lv_area_get_height(&area_bg)) {
 8015fa8:	3004      	adds	r0, #4
    return area_p->x2 - area_p->x1 + 1;
 8015faa:	f9bd 4034 	ldrsh.w	r4, [sp, #52]	; 0x34
 8015fae:	b209      	sxth	r1, r1
        if(pad_left_bg + pad_right_bg + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 8015fb0:	eb07 0b0c 	add.w	fp, r7, ip
        if(pad_top_bg + pad_bottom_bg + LV_SLIDER_SIZE_MIN > lv_area_get_height(&area_bg)) {
 8015fb4:	4288      	cmp	r0, r1
 8015fb6:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
        if(pad_left_bg + pad_right_bg + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 8015fba:	f10b 0b04 	add.w	fp, fp, #4
            pad_top_bg    = (lv_area_get_height(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 8015fbe:	bfc8      	it	gt
 8015fc0:	1f0b      	subgt	r3, r1, #4
 8015fc2:	f100 0101 	add.w	r1, r0, #1
 8015fc6:	eba1 0104 	sub.w	r1, r1, r4
 8015fca:	bfc8      	it	gt
 8015fcc:	105b      	asrgt	r3, r3, #1
        if(pad_left_bg + pad_right_bg + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 8015fce:	b209      	sxth	r1, r1
            pad_bottom_bg = pad_top_bg;
 8015fd0:	bfc8      	it	gt
 8015fd2:	461a      	movgt	r2, r3
        if(pad_left_bg + pad_right_bg + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 8015fd4:	458b      	cmp	fp, r1
            pad_left_bg  = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 8015fd6:	bfc4      	itt	gt
 8015fd8:	3904      	subgt	r1, #4
 8015fda:	104f      	asrgt	r7, r1, #1
        if(ext->knob_in) { /*Enable extra size if the knob is inside */
 8015fdc:	7eb1      	ldrb	r1, [r6, #26]
            pad_right_bg = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 8015fde:	bfc8      	it	gt
 8015fe0:	46bc      	movgt	ip, r7
        if(ext->knob_in) { /*Enable extra size if the knob is inside */
 8015fe2:	07c9      	lsls	r1, r1, #31
 8015fe4:	f140 80e8 	bpl.w	80161b8 <lv_slider_design+0x2be>
            area_bg.x1 += pad_left_bg;
 8015fe8:	443c      	add	r4, r7
            area_bg.x2 -= pad_right_bg;
 8015fea:	eba0 000c 	sub.w	r0, r0, ip
            area_bg.y1 += pad_top_bg;
 8015fee:	4443      	add	r3, r8
            area_bg.x1 += pad_left_bg;
 8015ff0:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
            area_bg.x2 -= pad_right_bg;
 8015ff4:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
            area_bg.y1 += pad_top_bg;
 8015ff8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            area_bg.y2 -= slider_w > slider_h ? pad_bottom_bg : 0; /*Pad only for horizontal slider*/
 8015ffc:	ebae 0202 	sub.w	r2, lr, r2
        if(lv_obj_is_focused(slider)) {
 8016000:	4628      	mov	r0, r5
            area_bg.y2 -= slider_w > slider_h ? pad_bottom_bg : 0; /*Pad only for horizontal slider*/
 8016002:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
        if(lv_obj_is_focused(slider)) {
 8016006:	f7f9 fd8b 	bl	800fb20 <lv_obj_is_focused>
 801600a:	2800      	cmp	r0, #0
 801600c:	f000 80e8 	beq.w	80161e0 <lv_slider_design+0x2e6>
            lv_style_copy(&style_tmp, style_bg);
 8016010:	4649      	mov	r1, r9
 8016012:	a811      	add	r0, sp, #68	; 0x44
 8016014:	f7f9 fe59 	bl	800fcca <lv_style_copy>
            style_tmp.body.border.width = 0;
 8016018:	2300      	movs	r3, #0
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 801601a:	aa11      	add	r2, sp, #68	; 0x44
            style_tmp.body.border.width = 0;
 801601c:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 8016020:	9b01      	ldr	r3, [sp, #4]
            lv_draw_rect(&area_bg, mask, style_bg, opa_scale);
 8016022:	9903      	ldr	r1, [sp, #12]
 8016024:	a80d      	add	r0, sp, #52	; 0x34
 8016026:	f7fb fb18 	bl	801165a <lv_draw_rect>
    memcpy(dest, src, sizeof(lv_area_t));
 801602a:	2208      	movs	r2, #8
 801602c:	a90d      	add	r1, sp, #52	; 0x34
 801602e:	a80f      	add	r0, sp, #60	; 0x3c
 8016030:	f000 fb9e 	bl	8016770 <memcpy>
        lv_coord_t pad_top_indic    = style_indic->body.padding.top;
 8016034:	9b00      	ldr	r3, [sp, #0]
    return area_p->y2 - area_p->y1 + 1;
 8016036:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801603a:	f9b3 1016 	ldrsh.w	r1, [r3, #22]
        lv_coord_t pad_left_indic   = style_indic->body.padding.left;
 801603e:	f9b3 001a 	ldrsh.w	r0, [r3, #26]
 8016042:	3201      	adds	r2, #1
        lv_coord_t pad_bottom_indic = style_indic->body.padding.bottom;
 8016044:	f9b3 4018 	ldrsh.w	r4, [r3, #24]
        lv_coord_t pad_right_indic  = style_indic->body.padding.right;
 8016048:	f9b3 701c 	ldrsh.w	r7, [r3, #28]
 801604c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8016050:	1ad2      	subs	r2, r2, r3
        if(pad_top_indic + pad_bottom_indic + LV_SLIDER_SIZE_MIN > lv_area_get_height(&area_bg)) {
 8016052:	190b      	adds	r3, r1, r4
 8016054:	b212      	sxth	r2, r2
 8016056:	3304      	adds	r3, #4
 8016058:	4293      	cmp	r3, r2
    return area_p->x2 - area_p->x1 + 1;
 801605a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
            pad_top_indic    = (lv_area_get_height(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 801605e:	bfc8      	it	gt
 8016060:	3a04      	subgt	r2, #4
 8016062:	f103 0301 	add.w	r3, r3, #1
 8016066:	bfc8      	it	gt
 8016068:	1051      	asrgt	r1, r2, #1
 801606a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801606e:	eba3 0302 	sub.w	r3, r3, r2
        if(pad_left_indic + pad_right_indic + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 8016072:	eb00 0207 	add.w	r2, r0, r7
            pad_bottom_indic = pad_top_indic;
 8016076:	bfc8      	it	gt
 8016078:	460c      	movgt	r4, r1
        if(pad_left_indic + pad_right_indic + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 801607a:	b21b      	sxth	r3, r3
 801607c:	3204      	adds	r2, #4
 801607e:	429a      	cmp	r2, r3
        area_indic.y1 += pad_top_indic;
 8016080:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
            pad_left_indic  = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 8016084:	bfc8      	it	gt
 8016086:	3b04      	subgt	r3, #4
        area_indic.y1 += pad_top_indic;
 8016088:	4411      	add	r1, r2
            pad_left_indic  = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 801608a:	bfc8      	it	gt
 801608c:	1058      	asrgt	r0, r3, #1
        area_indic.x1 += pad_left_indic;
 801608e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
        area_indic.y1 += pad_top_indic;
 8016092:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
            pad_right_indic = pad_left_indic;
 8016096:	bfc8      	it	gt
 8016098:	4607      	movgt	r7, r0
        area_indic.x1 += pad_left_indic;
 801609a:	4418      	add	r0, r3
        area_indic.x2 -= pad_right_indic;
 801609c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
        area_indic.x1 += pad_left_indic;
 80160a0:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
        lv_coord_t cur_value = lv_slider_get_value(slider);
 80160a4:	4628      	mov	r0, r5
        area_indic.x2 -= pad_right_indic;
 80160a6:	1bdf      	subs	r7, r3, r7
        area_indic.y2 -= pad_bottom_indic;
 80160a8:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 80160ac:	1b1c      	subs	r4, r3, r4
        area_indic.x2 -= pad_right_indic;
 80160ae:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
        area_indic.y2 -= pad_bottom_indic;
 80160b2:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
        lv_coord_t cur_value = lv_slider_get_value(slider);
 80160b6:	f7ff fefc 	bl	8015eb2 <lv_slider_get_value>
 80160ba:	4604      	mov	r4, r0
 * @param slider pointer to a slider object
 * @return the minimum value of the slider
 */
static inline int16_t lv_slider_get_min_value(const lv_obj_t * slider)
{
    return lv_bar_get_min_value(slider);
 80160bc:	4628      	mov	r0, r5
 80160be:	f7fe fb13 	bl	80146e8 <lv_bar_get_min_value>
 80160c2:	4607      	mov	r7, r0
 * @param slider pointer to a slider object
 * @return the maximum value of the slider
 */
static inline int16_t lv_slider_get_max_value(const lv_obj_t * slider)
{
    return lv_bar_get_max_value(slider);
 80160c4:	4628      	mov	r0, r5
 80160c6:	f7fe fb15 	bl	80146f4 <lv_bar_get_max_value>
        if(ext->drag_value != LV_SLIDER_NOT_PRESSED) cur_value = ext->drag_value;
 80160ca:	f9b6 3018 	ldrsh.w	r3, [r6, #24]
        if(slider_w >= slider_h) {
 80160ce:	9a02      	ldr	r2, [sp, #8]
 80160d0:	eba0 0807 	sub.w	r8, r0, r7
        if(ext->drag_value != LV_SLIDER_NOT_PRESSED) cur_value = ext->drag_value;
 80160d4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80160d8:	f9b6 c00a 	ldrsh.w	ip, [r6, #10]
 80160dc:	f9bd e03c 	ldrsh.w	lr, [sp, #60]	; 0x3c
 80160e0:	bf18      	it	ne
 80160e2:	461c      	movne	r4, r3
        if(slider_w >= slider_h) {
 80160e4:	4592      	cmp	sl, r2
 80160e6:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80160ea:	f2c0 8082 	blt.w	80161f2 <lv_slider_design+0x2f8>
 80160ee:	3301      	adds	r3, #1
            if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
 80160f0:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
 80160f4:	eba3 030e 	sub.w	r3, r3, lr
 80160f8:	b21b      	sxth	r3, r3
 80160fa:	d074      	beq.n	80161e6 <lv_slider_design+0x2ec>
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 80160fc:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 8016100:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 8016104:	1bd2      	subs	r2, r2, r7
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 8016106:	1bc9      	subs	r1, r1, r7
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 8016108:	435a      	muls	r2, r3
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 801610a:	4359      	muls	r1, r3
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 801610c:	fb92 f2f8 	sdiv	r2, r2, r8
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 8016110:	fb91 f1f8 	sdiv	r1, r1, r8
                lv_coord_t anim_start_x =
 8016114:	b212      	sxth	r2, r2
                area_indic.x2 = anim_start_x + (((anim_end_x - anim_start_x) * ext->bar.anim_state) >> 8);
 8016116:	b209      	sxth	r1, r1
 8016118:	1a89      	subs	r1, r1, r2
 801611a:	fb0c fc01 	mul.w	ip, ip, r1
 801611e:	eb02 2c2c 	add.w	ip, r2, ip, asr #8
 8016122:	fa0f f38c 	sxth.w	r3, ip
            area_indic.x2 = area_indic.x1 + area_indic.x2 - 1;
 8016126:	f10e 3cff 	add.w	ip, lr, #4294967295	; 0xffffffff
 801612a:	4463      	add	r3, ip
 801612c:	b21b      	sxth	r3, r3
            if(area_indic.x1 != area_indic.x2) lv_draw_rect(&area_indic, mask, style_indic, opa_scale);
 801612e:	4573      	cmp	r3, lr
            area_indic.x2 = area_indic.x1 + area_indic.x2 - 1;
 8016130:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            if(area_indic.x1 != area_indic.x2) lv_draw_rect(&area_indic, mask, style_indic, opa_scale);
 8016134:	d005      	beq.n	8016142 <lv_slider_design+0x248>
 8016136:	9903      	ldr	r1, [sp, #12]
 8016138:	a80f      	add	r0, sp, #60	; 0x3c
 801613a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801613e:	f7fb fa8c 	bl	801165a <lv_draw_rect>
        if(lv_obj_is_focused(slider)) {
 8016142:	4628      	mov	r0, r5
 8016144:	f7f9 fcec 	bl	800fb20 <lv_obj_is_focused>
 8016148:	b170      	cbz	r0, 8016168 <lv_slider_design+0x26e>
            lv_style_copy(&style_tmp, style_bg);
 801614a:	4649      	mov	r1, r9
 801614c:	a811      	add	r0, sp, #68	; 0x44
 801614e:	f7f9 fdbc 	bl	800fcca <lv_style_copy>
            style_tmp.body.opa          = LV_OPA_TRANSP;
 8016152:	2300      	movs	r3, #0
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 8016154:	aa11      	add	r2, sp, #68	; 0x44
 8016156:	9903      	ldr	r1, [sp, #12]
            style_tmp.body.opa          = LV_OPA_TRANSP;
 8016158:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 801615c:	a80d      	add	r0, sp, #52	; 0x34
            style_tmp.body.shadow.width = 0;
 801615e:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 8016162:	9b01      	ldr	r3, [sp, #4]
 8016164:	f7fb fa79 	bl	801165a <lv_draw_rect>
    memcpy(dest, src, sizeof(lv_area_t));
 8016168:	2208      	movs	r2, #8
 801616a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801616c:	a811      	add	r0, sp, #68	; 0x44
 801616e:	f000 faff 	bl	8016770 <memcpy>
        if(slider_w >= slider_h) {
 8016172:	9b02      	ldr	r3, [sp, #8]
 8016174:	459a      	cmp	sl, r3
 8016176:	7eb3      	ldrb	r3, [r6, #26]
 8016178:	f2c0 809f 	blt.w	80162ba <lv_slider_design+0x3c0>
            if(ext->knob_in == 0) {
 801617c:	07db      	lsls	r3, r3, #31
 801617e:	d465      	bmi.n	801624c <lv_slider_design+0x352>
                knob_area.x1 = area_indic.x2 - slider_h / 2;
 8016180:	9b02      	ldr	r3, [sp, #8]
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 8016182:	9a04      	ldr	r2, [sp, #16]
                knob_area.x1 = area_indic.x2 - slider_h / 2;
 8016184:	eb03 74d3 	add.w	r4, r3, r3, lsr #31
 8016188:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801618c:	eba3 0364 	sub.w	r3, r3, r4, asr #1
 8016190:	b21b      	sxth	r3, r3
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 8016192:	441a      	add	r2, r3
                knob_area.x1 = area_indic.x2 - slider_h / 2;
 8016194:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 8016198:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
            knob_area.y1 = slider->coords.y1;
 801619c:	8a6b      	ldrh	r3, [r5, #18]
 801619e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            knob_area.y2 = slider->coords.y2;
 80161a2:	8aeb      	ldrh	r3, [r5, #22]
 80161a4:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        lv_draw_rect(&knob_area, mask, style_knob, opa_scale);
 80161a8:	9b01      	ldr	r3, [sp, #4]
 80161aa:	a811      	add	r0, sp, #68	; 0x44
 80161ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80161ae:	9903      	ldr	r1, [sp, #12]
 80161b0:	f7fb fa53 	bl	801165a <lv_draw_rect>
    return true;
 80161b4:	2001      	movs	r0, #1
 80161b6:	e0d0      	b.n	801635a <lv_slider_design+0x460>
            area_bg.x1 += slider_w < slider_h ? pad_left_bg : 0;   /*Pad only for vertical slider*/
 80161b8:	9902      	ldr	r1, [sp, #8]
 80161ba:	458a      	cmp	sl, r1
 80161bc:	bfa4      	itt	ge
 80161be:	2700      	movge	r7, #0
            area_bg.x2 -= slider_w < slider_h ? pad_right_bg : 0;  /*Pad only for vertical slider*/
 80161c0:	f04f 0c00 	movge.w	ip, #0
            area_bg.y1 += slider_w > slider_h ? pad_top_bg : 0;    /*Pad only for horizontal slider*/
 80161c4:	bfdc      	itt	le
 80161c6:	2300      	movle	r3, #0
            area_bg.y2 -= slider_w > slider_h ? pad_bottom_bg : 0; /*Pad only for horizontal slider*/
 80161c8:	2200      	movle	r2, #0
            area_bg.x1 += slider_w < slider_h ? pad_left_bg : 0;   /*Pad only for vertical slider*/
 80161ca:	443c      	add	r4, r7
            area_bg.x2 -= slider_w < slider_h ? pad_right_bg : 0;  /*Pad only for vertical slider*/
 80161cc:	eba0 000c 	sub.w	r0, r0, ip
            area_bg.y1 += slider_w > slider_h ? pad_top_bg : 0;    /*Pad only for horizontal slider*/
 80161d0:	4443      	add	r3, r8
            area_bg.x1 += slider_w < slider_h ? pad_left_bg : 0;   /*Pad only for vertical slider*/
 80161d2:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
            area_bg.x2 -= slider_w < slider_h ? pad_right_bg : 0;  /*Pad only for vertical slider*/
 80161d6:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
            area_bg.y1 += slider_w > slider_h ? pad_top_bg : 0;    /*Pad only for horizontal slider*/
 80161da:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            area_bg.y2 -= slider_w > slider_h ? pad_bottom_bg : 0; /*Pad only for horizontal slider*/
 80161de:	e70d      	b.n	8015ffc <lv_slider_design+0x102>
            lv_draw_rect(&area_bg, mask, style_bg, opa_scale);
 80161e0:	9b01      	ldr	r3, [sp, #4]
 80161e2:	464a      	mov	r2, r9
 80161e4:	e71d      	b.n	8016022 <lv_slider_design+0x128>
                area_indic.x2 = (int32_t)((int32_t)indic_w * (cur_value - min_value)) / (max_value - min_value);
 80161e6:	1be2      	subs	r2, r4, r7
 80161e8:	4353      	muls	r3, r2
 80161ea:	fb93 f3f8 	sdiv	r3, r3, r8
 80161ee:	b21b      	sxth	r3, r3
 80161f0:	e799      	b.n	8016126 <lv_slider_design+0x22c>
    return area_p->y2 - area_p->y1 + 1;
 80161f2:	f8bd b042 	ldrh.w	fp, [sp, #66]	; 0x42
            if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
 80161f6:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
 80161fa:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 80161fe:	f10b 0b01 	add.w	fp, fp, #1
 8016202:	fa0f fb8b 	sxth.w	fp, fp
 8016206:	ebab 0202 	sub.w	r2, fp, r2
 801620a:	b212      	sxth	r2, r2
 801620c:	d019      	beq.n	8016242 <lv_slider_design+0x348>
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 801620e:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 8016212:	f9b6 0008 	ldrsh.w	r0, [r6, #8]
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 8016216:	1bc9      	subs	r1, r1, r7
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 8016218:	1bc0      	subs	r0, r0, r7
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 801621a:	4351      	muls	r1, r2
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 801621c:	4342      	muls	r2, r0
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 801621e:	fb91 f1f8 	sdiv	r1, r1, r8
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 8016222:	fb92 f2f8 	sdiv	r2, r2, r8
                lv_coord_t anim_start_y =
 8016226:	b209      	sxth	r1, r1
                area_indic.y1 = anim_start_y + (((anim_end_y - anim_start_y) * ext->bar.anim_state) >> 8);
 8016228:	b212      	sxth	r2, r2
 801622a:	1a52      	subs	r2, r2, r1
 801622c:	fb0c fc02 	mul.w	ip, ip, r2
 8016230:	eb01 212c 	add.w	r1, r1, ip, asr #8
                area_indic.y1 = (int32_t)((int32_t)indic_h * (cur_value - min_value)) / (max_value - min_value);
 8016234:	b209      	sxth	r1, r1
            if(area_indic.x1 != area_indic.x2) lv_draw_rect(&area_indic, mask, style_indic, opa_scale);
 8016236:	459e      	cmp	lr, r3
            area_indic.y1 = area_indic.y2 - area_indic.y1 + 1;
 8016238:	ebab 0101 	sub.w	r1, fp, r1
 801623c:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
            if(area_indic.x1 != area_indic.x2) lv_draw_rect(&area_indic, mask, style_indic, opa_scale);
 8016240:	e778      	b.n	8016134 <lv_slider_design+0x23a>
                area_indic.y1 = (int32_t)((int32_t)indic_h * (cur_value - min_value)) / (max_value - min_value);
 8016242:	1be1      	subs	r1, r4, r7
 8016244:	4351      	muls	r1, r2
 8016246:	fb91 f1f8 	sdiv	r1, r1, r8
 801624a:	e7f3      	b.n	8016234 <lv_slider_design+0x33a>
                if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
 801624c:	f9b6 100a 	ldrsh.w	r1, [r6, #10]
 8016250:	1c48      	adds	r0, r1, #1
 8016252:	d029      	beq.n	80162a8 <lv_slider_design+0x3ae>
                    lv_coord_t w = slider_w - slider_h - 1;
 8016254:	9b09      	ldr	r3, [sp, #36]	; 0x24
                        (int32_t)((int32_t)w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 8016256:	f9b6 4008 	ldrsh.w	r4, [r6, #8]
                    lv_coord_t w = slider_w - slider_h - 1;
 801625a:	1e5a      	subs	r2, r3, #1
 801625c:	9b05      	ldr	r3, [sp, #20]
 801625e:	4413      	add	r3, r2
 8016260:	461a      	mov	r2, r3
 8016262:	9b08      	ldr	r3, [sp, #32]
 8016264:	1ad2      	subs	r2, r2, r3
                        (int32_t)((int32_t)w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 8016266:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801626a:	b212      	sxth	r2, r2
 801626c:	1bdb      	subs	r3, r3, r7
                        (int32_t)((int32_t)w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 801626e:	1be7      	subs	r7, r4, r7
                        (int32_t)((int32_t)w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 8016270:	4353      	muls	r3, r2
                        (int32_t)((int32_t)w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 8016272:	437a      	muls	r2, r7
                        (int32_t)((int32_t)w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 8016274:	fb93 f3f8 	sdiv	r3, r3, r8
                        (int32_t)((int32_t)w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 8016278:	fb92 f8f8 	sdiv	r8, r2, r8
                    lv_coord_t anim_start_x =
 801627c:	b21b      	sxth	r3, r3
                    knob_area.x1 = anim_start_x + (((anim_end_x - anim_start_x) * ext->bar.anim_state) >> 8);
 801627e:	fa0f f888 	sxth.w	r8, r8
 8016282:	eba8 0803 	sub.w	r8, r8, r3
 8016286:	fb01 f808 	mul.w	r8, r1, r8
 801628a:	eb03 2828 	add.w	r8, r3, r8, asr #8
                knob_area.x1 += slider->coords.x1;
 801628e:	8a2b      	ldrh	r3, [r5, #16]
                    knob_area.x1 = (int32_t)((int32_t)(slider_w - slider_h - 1) * (cur_value - min_value)) /
 8016290:	fa0f f888 	sxth.w	r8, r8
                knob_area.x1 += slider->coords.x1;
 8016294:	4498      	add	r8, r3
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 8016296:	9b04      	ldr	r3, [sp, #16]
                knob_area.x1 += slider->coords.x1;
 8016298:	fa0f f888 	sxth.w	r8, r8
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 801629c:	4443      	add	r3, r8
                knob_area.x1 += slider->coords.x1;
 801629e:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 80162a2:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 80162a6:	e779      	b.n	801619c <lv_slider_design+0x2a2>
                    knob_area.x1 = (int32_t)((int32_t)(slider_w - slider_h - 1) * (cur_value - min_value)) /
 80162a8:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80162ac:	9a02      	ldr	r2, [sp, #8]
 80162ae:	1be4      	subs	r4, r4, r7
 80162b0:	1a9b      	subs	r3, r3, r2
 80162b2:	435c      	muls	r4, r3
 80162b4:	fb94 f8f8 	sdiv	r8, r4, r8
 80162b8:	e7e9      	b.n	801628e <lv_slider_design+0x394>
            if(ext->knob_in == 0) {
 80162ba:	07da      	lsls	r2, r3, #31
 80162bc:	d413      	bmi.n	80162e6 <lv_slider_design+0x3ec>
                knob_area.y1 = area_indic.y1 - slider_w / 2;
 80162be:	eb0a 72da 	add.w	r2, sl, sl, lsr #31
 80162c2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80162c6:	eba3 0362 	sub.w	r3, r3, r2, asr #1
                knob_area.y2 = knob_area.y1 + slider_w - 1;
 80162ca:	9a05      	ldr	r2, [sp, #20]
                knob_area.y1 = area_indic.y1 - slider_w / 2;
 80162cc:	b21b      	sxth	r3, r3
                knob_area.y2 = knob_area.y1 + slider_w - 1;
 80162ce:	441a      	add	r2, r3
                knob_area.y1 = area_indic.y1 - slider_w / 2;
 80162d0:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                knob_area.y2 = knob_area.y1 + slider_w - 1;
 80162d4:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
            knob_area.x1 = slider->coords.x1;
 80162d8:	8a2b      	ldrh	r3, [r5, #16]
 80162da:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            knob_area.x2 = slider->coords.x2;
 80162de:	8aab      	ldrh	r3, [r5, #20]
 80162e0:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 80162e4:	e760      	b.n	80161a8 <lv_slider_design+0x2ae>
                if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
 80162e6:	f9b6 100a 	ldrsh.w	r1, [r6, #10]
 80162ea:	1c4b      	adds	r3, r1, #1
 80162ec:	d02b      	beq.n	8016346 <lv_slider_design+0x44c>
                    lv_coord_t h = slider_h - slider_w - 1;
 80162ee:	9b07      	ldr	r3, [sp, #28]
                        (int32_t)((int32_t)h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 80162f0:	f9b6 4008 	ldrsh.w	r4, [r6, #8]
                    lv_coord_t h = slider_h - slider_w - 1;
 80162f4:	1e5a      	subs	r2, r3, #1
 80162f6:	9b04      	ldr	r3, [sp, #16]
 80162f8:	4413      	add	r3, r2
 80162fa:	461a      	mov	r2, r3
 80162fc:	9b06      	ldr	r3, [sp, #24]
 80162fe:	1ad2      	subs	r2, r2, r3
                        (int32_t)((int32_t)h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 8016300:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8016304:	b212      	sxth	r2, r2
 8016306:	1bdb      	subs	r3, r3, r7
                        (int32_t)((int32_t)h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 8016308:	1be7      	subs	r7, r4, r7
                        (int32_t)((int32_t)h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 801630a:	4353      	muls	r3, r2
                        (int32_t)((int32_t)h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 801630c:	437a      	muls	r2, r7
                        (int32_t)((int32_t)h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 801630e:	fb93 f3f8 	sdiv	r3, r3, r8
                        (int32_t)((int32_t)h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 8016312:	fb92 f8f8 	sdiv	r8, r2, r8
                    lv_coord_t anim_start_x =
 8016316:	b21b      	sxth	r3, r3
                    knob_area.y2 = anim_start_x + (((anim_end_x - anim_start_x) * ext->bar.anim_state) >> 8);
 8016318:	fa0f f888 	sxth.w	r8, r8
 801631c:	eba8 0803 	sub.w	r8, r8, r3
 8016320:	fb01 f808 	mul.w	r8, r1, r8
 8016324:	eb03 2828 	add.w	r8, r3, r8, asr #8
                knob_area.y2 = slider->coords.y2 - knob_area.y2;
 8016328:	8aeb      	ldrh	r3, [r5, #22]
                    knob_area.y2 = (int32_t)((int32_t)(slider_h - slider_w - 1) * (cur_value - min_value)) /
 801632a:	fa0f f888 	sxth.w	r8, r8
                knob_area.y2 = slider->coords.y2 - knob_area.y2;
 801632e:	eba3 0808 	sub.w	r8, r3, r8
                knob_area.y1 = knob_area.y2 - slider_w - 1;
 8016332:	ea6f 030a 	mvn.w	r3, sl
                knob_area.y2 = slider->coords.y2 - knob_area.y2;
 8016336:	fa0f f888 	sxth.w	r8, r8
 801633a:	f8ad 804a 	strh.w	r8, [sp, #74]	; 0x4a
                knob_area.y1 = knob_area.y2 - slider_w - 1;
 801633e:	4498      	add	r8, r3
 8016340:	f8ad 8046 	strh.w	r8, [sp, #70]	; 0x46
 8016344:	e7c8      	b.n	80162d8 <lv_slider_design+0x3de>
                    knob_area.y2 = (int32_t)((int32_t)(slider_h - slider_w - 1) * (cur_value - min_value)) /
 8016346:	9b02      	ldr	r3, [sp, #8]
 8016348:	1be4      	subs	r4, r4, r7
 801634a:	3b01      	subs	r3, #1
 801634c:	eba3 030a 	sub.w	r3, r3, sl
 8016350:	435c      	muls	r4, r3
 8016352:	fb94 f8f8 	sdiv	r8, r4, r8
 8016356:	e7e7      	b.n	8016328 <lv_slider_design+0x42e>
        return false;
 8016358:	2000      	movs	r0, #0
}
 801635a:	b021      	add	sp, #132	; 0x84
 801635c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016360 <tabpage_pressing_handler>:
{
 8016360:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8016364:	460f      	mov	r7, r1
 8016366:	4606      	mov	r6, r0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 8016368:	f7f9 fbaa 	bl	800fac0 <lv_obj_get_ext_attr>
 801636c:	4604      	mov	r4, r0
    lv_indev_t * indev     = lv_indev_get_act();
 801636e:	f7ec fa89 	bl	8002884 <lv_indev_get_act>
    lv_indev_get_point(indev, &point_act);
 8016372:	a901      	add	r1, sp, #4
 8016374:	f7f8 fe4e 	bl	800f014 <lv_indev_get_point>
    lv_coord_t y_diff = point_act.y - ext->point_last.y;
 8016378:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    if(!ext->scroll_ver && (x_diff >= LV_INDEV_DEF_DRAG_LIMIT || x_diff <= -LV_INDEV_DEF_DRAG_LIMIT)) {
 801637c:	7ea2      	ldrb	r2, [r4, #26]
 801637e:	3309      	adds	r3, #9
    lv_coord_t y_diff = point_act.y - ext->point_last.y;
 8016380:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
    if(!ext->scroll_ver && (x_diff >= LV_INDEV_DEF_DRAG_LIMIT || x_diff <= -LV_INDEV_DEF_DRAG_LIMIT)) {
 8016384:	0711      	lsls	r1, r2, #28
 8016386:	b21b      	sxth	r3, r3
 8016388:	d461      	bmi.n	801644e <tabpage_pressing_handler+0xee>
    lv_coord_t x_diff = point_act.x - ext->point_last.x;
 801638a:	8a21      	ldrh	r1, [r4, #16]
 801638c:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8016390:	1a6d      	subs	r5, r5, r1
 8016392:	b22d      	sxth	r5, r5
    if(!ext->scroll_ver && (x_diff >= LV_INDEV_DEF_DRAG_LIMIT || x_diff <= -LV_INDEV_DEF_DRAG_LIMIT)) {
 8016394:	f105 0109 	add.w	r1, r5, #9
 8016398:	b289      	uxth	r1, r1
 801639a:	2912      	cmp	r1, #18
 801639c:	d957      	bls.n	801644e <tabpage_pressing_handler+0xee>
        ext->draging = 1;
 801639e:	f042 0202 	orr.w	r2, r2, #2
        if((lv_page_on_edge(tabpage, LV_PAGE_EDGE_LEFT) && x_diff > 0) ||
 80163a2:	2101      	movs	r1, #1
 80163a4:	4638      	mov	r0, r7
        ext->draging = 1;
 80163a6:	76a2      	strb	r2, [r4, #26]
        if((lv_page_on_edge(tabpage, LV_PAGE_EDGE_LEFT) && x_diff > 0) ||
 80163a8:	f7ff fa53 	bl	8015852 <lv_page_on_edge>
 80163ac:	b1a0      	cbz	r0, 80163d8 <tabpage_pressing_handler+0x78>
 80163ae:	2d00      	cmp	r5, #0
 80163b0:	dd12      	ble.n	80163d8 <tabpage_pressing_handler+0x78>
            if(ext->drag_hor == 0) {
 80163b2:	7ea3      	ldrb	r3, [r4, #26]
 80163b4:	075a      	lsls	r2, r3, #29
 80163b6:	d543      	bpl.n	8016440 <tabpage_pressing_handler+0xe0>
            ext->drag_hor = 1;
 80163b8:	7ea3      	ldrb	r3, [r4, #26]
            lv_obj_set_drag(lv_page_get_scrl(tabpage), false);
 80163ba:	4638      	mov	r0, r7
            ext->drag_hor = 1;
 80163bc:	f043 0304 	orr.w	r3, r3, #4
 80163c0:	76a3      	strb	r3, [r4, #26]
            lv_obj_set_drag(lv_page_get_scrl(tabpage), false);
 80163c2:	f7ff fa04 	bl	80157ce <lv_page_get_scrl>
 80163c6:	2100      	movs	r1, #0
 80163c8:	f7f8 fe78 	bl	800f0bc <lv_obj_set_drag>
    if(ext->drag_hor) {
 80163cc:	7ea3      	ldrb	r3, [r4, #26]
 80163ce:	075b      	lsls	r3, r3, #29
 80163d0:	d40d      	bmi.n	80163ee <tabpage_pressing_handler+0x8e>
}
 80163d2:	b002      	add	sp, #8
 80163d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
           (lv_page_on_edge(tabpage, LV_PAGE_EDGE_RIGHT) && x_diff < 0)) {
 80163d8:	2104      	movs	r1, #4
 80163da:	4638      	mov	r0, r7
 80163dc:	f7ff fa39 	bl	8015852 <lv_page_on_edge>
        if((lv_page_on_edge(tabpage, LV_PAGE_EDGE_LEFT) && x_diff > 0) ||
 80163e0:	b108      	cbz	r0, 80163e6 <tabpage_pressing_handler+0x86>
           (lv_page_on_edge(tabpage, LV_PAGE_EDGE_RIGHT) && x_diff < 0)) {
 80163e2:	2d00      	cmp	r5, #0
 80163e4:	dbe5      	blt.n	80163b2 <tabpage_pressing_handler+0x52>
        } else if(ext->drag_hor == 0) {
 80163e6:	7ea3      	ldrb	r3, [r4, #26]
 80163e8:	f013 0204 	ands.w	r2, r3, #4
 80163ec:	d02b      	beq.n	8016446 <tabpage_pressing_handler+0xe6>
        lv_obj_set_x(ext->content, lv_obj_get_x(ext->content) + point_act.x - ext->point_last.x);
 80163ee:	68a5      	ldr	r5, [r4, #8]
 80163f0:	4628      	mov	r0, r5
 80163f2:	f7f9 fabe 	bl	800f972 <lv_obj_get_x>
 80163f6:	8a23      	ldrh	r3, [r4, #16]
 80163f8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80163fc:	1ac9      	subs	r1, r1, r3
 80163fe:	4401      	add	r1, r0
 8016400:	4628      	mov	r0, r5
 8016402:	b209      	sxth	r1, r1
 8016404:	f7f8 ff99 	bl	800f33a <lv_obj_set_x>
        ext->point_last.x = point_act.x;
 8016408:	9b01      	ldr	r3, [sp, #4]
        const lv_style_t * tabs_style = lv_obj_get_style(ext->btns);
 801640a:	6820      	ldr	r0, [r4, #0]
        ext->point_last.x = point_act.x;
 801640c:	6123      	str	r3, [r4, #16]
        const lv_style_t * tabs_style = lv_obj_get_style(ext->btns);
 801640e:	f7ec fc97 	bl	8002d40 <lv_obj_get_style>
        switch(ext->btns_pos) {
 8016412:	7ea3      	ldrb	r3, [r4, #26]
        const lv_style_t * tabs_style = lv_obj_get_style(ext->btns);
 8016414:	4680      	mov	r8, r0
        switch(ext->btns_pos) {
 8016416:	f3c3 1341 	ubfx	r3, r3, #5, #2
 801641a:	3b02      	subs	r3, #2
 801641c:	2b01      	cmp	r3, #1
 801641e:	d822      	bhi.n	8016466 <tabpage_pressing_handler+0x106>
                indic_size = lv_obj_get_height(ext->indic);
 8016420:	6860      	ldr	r0, [r4, #4]
 8016422:	f7f9 fab8 	bl	800f996 <lv_obj_get_height>
                indic_y = tabs_style->body.padding.top + ext->tab_cur * (indic_size + tabs_style->body.padding.inner);
 8016426:	f8b8 101e 	ldrh.w	r1, [r8, #30]
 801642a:	f8b8 3016 	ldrh.w	r3, [r8, #22]
 801642e:	4408      	add	r0, r1
 8016430:	8aa1      	ldrh	r1, [r4, #20]
 8016432:	fb11 3100 	smlabb	r1, r1, r0, r3
                lv_obj_set_y(ext->indic, indic_y);
 8016436:	6860      	ldr	r0, [r4, #4]
 8016438:	b209      	sxth	r1, r1
 801643a:	f7f8 ff87 	bl	800f34c <lv_obj_set_y>
}
 801643e:	e7c8      	b.n	80163d2 <tabpage_pressing_handler+0x72>
                ext->point_last.x = point_act.x;
 8016440:	9b01      	ldr	r3, [sp, #4]
 8016442:	6123      	str	r3, [r4, #16]
 8016444:	e7b8      	b.n	80163b8 <tabpage_pressing_handler+0x58>
            ext->drag_hor = 0;
 8016446:	f362 0382 	bfi	r3, r2, #2, #1
        ext->draging = 0;
 801644a:	76a3      	strb	r3, [r4, #26]
 801644c:	e7be      	b.n	80163cc <tabpage_pressing_handler+0x6c>
    } else if(y_diff >= LV_INDEV_DEF_DRAG_LIMIT || y_diff <= -LV_INDEV_DEF_DRAG_LIMIT) {
 801644e:	1a1b      	subs	r3, r3, r0
 8016450:	b29b      	uxth	r3, r3
 8016452:	2b12      	cmp	r3, #18
        ext->draging    = 1;
 8016454:	7ea3      	ldrb	r3, [r4, #26]
 8016456:	bf8a      	itet	hi
 8016458:	f023 030e 	bichi.w	r3, r3, #14
        ext->draging = 0;
 801645c:	f36f 0341 	bfcls	r3, #1, #1
        ext->draging    = 1;
 8016460:	f043 030a 	orrhi.w	r3, r3, #10
        ext->draging = 0;
 8016464:	e7f1      	b.n	801644a <tabpage_pressing_handler+0xea>
                indic_size  = lv_obj_get_width(ext->indic);
 8016466:	6860      	ldr	r0, [r4, #4]
 8016468:	f7f9 fa8f 	bl	800f98a <lv_obj_get_width>
 801646c:	4681      	mov	r9, r0
                indic_style = lv_obj_get_style(ext->indic);
 801646e:	6860      	ldr	r0, [r4, #4]
 8016470:	f7ec fc66 	bl	8002d40 <lv_obj_get_style>
                p = ((tabpage->coords.x1 - tabview->coords.x1) * (indic_size + tabs_style->body.padding.inner)) /
 8016474:	f9b7 5010 	ldrsh.w	r5, [r7, #16]
                indic_style = lv_obj_get_style(ext->indic);
 8016478:	4682      	mov	sl, r0
                p = ((tabpage->coords.x1 - tabview->coords.x1) * (indic_size + tabs_style->body.padding.inner)) /
 801647a:	f9b6 0010 	ldrsh.w	r0, [r6, #16]
 801647e:	1a28      	subs	r0, r5, r0
 8016480:	f9b8 501e 	ldrsh.w	r5, [r8, #30]
 8016484:	444d      	add	r5, r9
 8016486:	4345      	muls	r5, r0
                    lv_obj_get_width(tabview);
 8016488:	4630      	mov	r0, r6
 801648a:	f7f9 fa7e 	bl	800f98a <lv_obj_get_width>
                lv_obj_set_x(ext->indic, indic_size * ext->tab_cur + tabs_style->body.padding.inner * ext->tab_cur +
 801648e:	f8b8 101e 	ldrh.w	r1, [r8, #30]
 8016492:	f8ba 301a 	ldrh.w	r3, [sl, #26]
 8016496:	4489      	add	r9, r1
 8016498:	8aa1      	ldrh	r1, [r4, #20]
                p = ((tabpage->coords.x1 - tabview->coords.x1) * (indic_size + tabs_style->body.padding.inner)) /
 801649a:	fb95 f0f0 	sdiv	r0, r5, r0
                lv_obj_set_x(ext->indic, indic_size * ext->tab_cur + tabs_style->body.padding.inner * ext->tab_cur +
 801649e:	fb11 3109 	smlabb	r1, r1, r9, r3
 80164a2:	1a09      	subs	r1, r1, r0
 80164a4:	6860      	ldr	r0, [r4, #4]
 80164a6:	b209      	sxth	r1, r1
 80164a8:	f7f8 ff47 	bl	800f33a <lv_obj_set_x>
                break;
 80164ac:	e791      	b.n	80163d2 <tabpage_pressing_handler+0x72>

080164ae <tabpage_pressed_handler.isra.1>:
static void tabpage_pressed_handler(lv_obj_t * tabview, lv_obj_t * tabpage)
 80164ae:	b510      	push	{r4, lr}
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 80164b0:	f7f9 fb06 	bl	800fac0 <lv_obj_get_ext_attr>
 80164b4:	4604      	mov	r4, r0
    lv_indev_t * indev     = lv_indev_get_act();
 80164b6:	f7ec f9e5 	bl	8002884 <lv_indev_get_act>
    lv_indev_get_point(indev, &ext->point_last);
 80164ba:	f104 0110 	add.w	r1, r4, #16
}
 80164be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_indev_get_point(indev, &ext->point_last);
 80164c2:	f7f8 bda7 	b.w	800f014 <lv_indev_get_point>

080164c6 <lv_cont_set_fit2.constprop.6>:
static inline void lv_cont_set_fit2(lv_obj_t * cont, lv_fit_t hor, lv_fit_t ver)
 80164c6:	b507      	push	{r0, r1, r2, lr}
    lv_cont_set_fit4(cont, hor, hor, ver, ver);
 80164c8:	2201      	movs	r2, #1
 80164ca:	2300      	movs	r3, #0
 80164cc:	4611      	mov	r1, r2
 80164ce:	9300      	str	r3, [sp, #0]
 80164d0:	f7fe fae9 	bl	8014aa6 <lv_cont_set_fit4>
}
 80164d4:	b003      	add	sp, #12
 80164d6:	f85d fb04 	ldr.w	pc, [sp], #4

080164da <lv_tabview_get_tab_act>:
{
 80164da:	b508      	push	{r3, lr}
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 80164dc:	f7f9 faf0 	bl	800fac0 <lv_obj_get_ext_attr>
}
 80164e0:	8a80      	ldrh	r0, [r0, #20]
 80164e2:	bd08      	pop	{r3, pc}

080164e4 <lv_tabview_get_tab>:
{
 80164e4:	b570      	push	{r4, r5, r6, lr}
    while(page != NULL && i != id) {
 80164e6:	2400      	movs	r4, #0
{
 80164e8:	460e      	mov	r6, r1
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 80164ea:	f7f9 fae9 	bl	800fac0 <lv_obj_get_ext_attr>
    lv_obj_t * page        = lv_obj_get_child_back(ext->content, NULL);
 80164ee:	2100      	movs	r1, #0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 80164f0:	4605      	mov	r5, r0
    lv_obj_t * page        = lv_obj_get_child_back(ext->content, NULL);
 80164f2:	6880      	ldr	r0, [r0, #8]
 80164f4:	f7f9 fa30 	bl	800f958 <lv_obj_get_child_back>
    while(page != NULL && i != id) {
 80164f8:	b108      	cbz	r0, 80164fe <lv_tabview_get_tab+0x1a>
 80164fa:	42b4      	cmp	r4, r6
 80164fc:	d100      	bne.n	8016500 <lv_tabview_get_tab+0x1c>
}
 80164fe:	bd70      	pop	{r4, r5, r6, pc}
        page = lv_obj_get_child_back(ext->content, page);
 8016500:	4601      	mov	r1, r0
 8016502:	68a8      	ldr	r0, [r5, #8]
 8016504:	f7f9 fa28 	bl	800f958 <lv_obj_get_child_back>
 8016508:	3401      	adds	r4, #1
 801650a:	e7f5      	b.n	80164f8 <lv_tabview_get_tab+0x14>

0801650c <lv_tabview_get_sliding>:
{
 801650c:	b508      	push	{r3, lr}
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 801650e:	f7f9 fad7 	bl	800fac0 <lv_obj_get_ext_attr>
    return ext->slide_enable ? true : false;
 8016512:	7e80      	ldrb	r0, [r0, #26]
}
 8016514:	f000 0001 	and.w	r0, r0, #1
 8016518:	bd08      	pop	{r3, pc}

0801651a <lv_tabview_get_anim_time>:
{
 801651a:	b508      	push	{r3, lr}
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 801651c:	f7f9 fad0 	bl	800fac0 <lv_obj_get_ext_attr>
}
 8016520:	8b00      	ldrh	r0, [r0, #24]
 8016522:	bd08      	pop	{r3, pc}

08016524 <tab_btnm_event_cb>:
    if(event != LV_EVENT_CLICKED) return;
 8016524:	2906      	cmp	r1, #6
{
 8016526:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016528:	4604      	mov	r4, r0
    if(event != LV_EVENT_CLICKED) return;
 801652a:	d126      	bne.n	801657a <tab_btnm_event_cb+0x56>
    uint16_t btn_id = lv_btnm_get_active_btn(tab_btnm);
 801652c:	f7fe fa38 	bl	80149a0 <lv_btnm_get_active_btn>
    if(btn_id == LV_BTNM_BTN_NONE) return;
 8016530:	f64f 73ff 	movw	r3, #65535	; 0xffff
    uint16_t btn_id = lv_btnm_get_active_btn(tab_btnm);
 8016534:	4605      	mov	r5, r0
    if(btn_id == LV_BTNM_BTN_NONE) return;
 8016536:	4298      	cmp	r0, r3
 8016538:	d01f      	beq.n	801657a <tab_btnm_event_cb+0x56>
    lv_btnm_clear_btn_ctrl_all(tab_btnm, LV_BTNM_CTRL_TGL_STATE);
 801653a:	4620      	mov	r0, r4
 801653c:	2180      	movs	r1, #128	; 0x80
 801653e:	f7fe fa18 	bl	8014972 <lv_btnm_clear_btn_ctrl_all>
    lv_btnm_set_btn_ctrl(tab_btnm, btn_id, LV_BTNM_CTRL_TGL_STATE);
 8016542:	2280      	movs	r2, #128	; 0x80
 8016544:	4629      	mov	r1, r5
 8016546:	4620      	mov	r0, r4
 8016548:	f7fe f9d4 	bl	80148f4 <lv_btnm_set_btn_ctrl>
    lv_obj_t * tabview = lv_obj_get_parent(tab_btnm);
 801654c:	4620      	mov	r0, r4
 801654e:	f7f9 f9d5 	bl	800f8fc <lv_obj_get_parent>
 8016552:	4604      	mov	r4, r0
    uint32_t id_prev = lv_tabview_get_tab_act(tabview);
 8016554:	f7ff ffc1 	bl	80164da <lv_tabview_get_tab_act>
    lv_tabview_set_tab_act(tabview, btn_id, LV_ANIM_ON);
 8016558:	2201      	movs	r2, #1
    uint32_t id_prev = lv_tabview_get_tab_act(tabview);
 801655a:	4606      	mov	r6, r0
    lv_tabview_set_tab_act(tabview, btn_id, LV_ANIM_ON);
 801655c:	4629      	mov	r1, r5
 801655e:	4620      	mov	r0, r4
 8016560:	f7f5 fa7c 	bl	800ba5c <lv_tabview_set_tab_act>
    uint32_t id_new = lv_tabview_get_tab_act(tabview);
 8016564:	4620      	mov	r0, r4
 8016566:	f7ff ffb8 	bl	80164da <lv_tabview_get_tab_act>
    if(id_prev != id_new) res = lv_event_send(tabview, LV_EVENT_VALUE_CHANGED, &id_new);
 801656a:	42b0      	cmp	r0, r6
    uint32_t id_new = lv_tabview_get_tab_act(tabview);
 801656c:	9001      	str	r0, [sp, #4]
    if(id_prev != id_new) res = lv_event_send(tabview, LV_EVENT_VALUE_CHANGED, &id_new);
 801656e:	d004      	beq.n	801657a <tab_btnm_event_cb+0x56>
 8016570:	aa01      	add	r2, sp, #4
 8016572:	210e      	movs	r1, #14
 8016574:	4620      	mov	r0, r4
 8016576:	f7f8 fdd3 	bl	800f120 <lv_event_send>
}
 801657a:	b002      	add	sp, #8
 801657c:	bd70      	pop	{r4, r5, r6, pc}

0801657e <tabpage_press_lost_handler>:
{
 801657e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8016582:	460c      	mov	r4, r1
 8016584:	4606      	mov	r6, r0
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 8016586:	f7f9 fa9b 	bl	800fac0 <lv_obj_get_ext_attr>
    ext->draging           = 0;
 801658a:	7e83      	ldrb	r3, [r0, #26]
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 801658c:	4607      	mov	r7, r0
    ext->draging           = 0;
 801658e:	f023 030e 	bic.w	r3, r3, #14
 8016592:	7683      	strb	r3, [r0, #26]
    lv_obj_set_drag(lv_page_get_scrl(tabpage), true);
 8016594:	4620      	mov	r0, r4
 8016596:	f7ff f91a 	bl	80157ce <lv_page_get_scrl>
 801659a:	2101      	movs	r1, #1
 801659c:	f7f8 fd8e 	bl	800f0bc <lv_obj_set_drag>
    lv_indev_t * indev = lv_indev_get_act();
 80165a0:	f7ec f970 	bl	8002884 <lv_indev_get_act>
 80165a4:	4605      	mov	r5, r0
    lv_indev_get_point(indev, &point_act);
 80165a6:	a901      	add	r1, sp, #4
 80165a8:	f7f8 fd34 	bl	800f014 <lv_indev_get_point>
    lv_indev_get_vect(indev, &vect);
 80165ac:	a902      	add	r1, sp, #8
 80165ae:	4628      	mov	r0, r5
 80165b0:	f7f8 fd4d 	bl	800f04e <lv_indev_get_vect>
    while(vect.x != 0) {
 80165b4:	2100      	movs	r1, #0
 80165b6:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
        vect.x = vect.x * (100 - LV_INDEV_DEF_DRAG_THROW) / 100;
 80165ba:	2064      	movs	r0, #100	; 0x64
    lv_coord_t x_predict = 0;
 80165bc:	460a      	mov	r2, r1
    while(vect.x != 0) {
 80165be:	bb7b      	cbnz	r3, 8016620 <tabpage_press_lost_handler+0xa2>
 80165c0:	b109      	cbz	r1, 80165c6 <tabpage_press_lost_handler+0x48>
 80165c2:	f8ad 3008 	strh.w	r3, [sp, #8]
    lv_coord_t page_x1  = tabpage->coords.x1 - tabview->coords.x1 + x_predict;
 80165c6:	8a25      	ldrh	r5, [r4, #16]
    lv_coord_t page_x2  = page_x1 + lv_obj_get_width(tabpage);
 80165c8:	4620      	mov	r0, r4
    lv_coord_t page_x1  = tabpage->coords.x1 - tabview->coords.x1 + x_predict;
 80165ca:	8a33      	ldrh	r3, [r6, #16]
 80165cc:	1aed      	subs	r5, r5, r3
 80165ce:	442a      	add	r2, r5
 80165d0:	b215      	sxth	r5, r2
    lv_coord_t page_x2  = page_x1 + lv_obj_get_width(tabpage);
 80165d2:	f7f9 f9da 	bl	800f98a <lv_obj_get_width>
 80165d6:	4680      	mov	r8, r0
    lv_coord_t treshold = lv_obj_get_width(tabview) / 2;
 80165d8:	4630      	mov	r0, r6
 80165da:	f7f9 f9d6 	bl	800f98a <lv_obj_get_width>
    uint16_t tab_cur = ext->tab_cur;
 80165de:	8abc      	ldrh	r4, [r7, #20]
    lv_coord_t treshold = lv_obj_get_width(tabview) / 2;
 80165e0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80165e4:	f340 004f 	sbfx	r0, r0, #1, #16
    if(page_x1 > treshold) {
 80165e8:	4285      	cmp	r5, r0
 80165ea:	dd23      	ble.n	8016634 <tabpage_press_lost_handler+0xb6>
        if(tab_cur != 0) tab_cur--;
 80165ec:	b10c      	cbz	r4, 80165f2 <tabpage_press_lost_handler+0x74>
 80165ee:	3c01      	subs	r4, #1
        if(tab_cur < ext->tab_cnt - 1) tab_cur++;
 80165f0:	b2a4      	uxth	r4, r4
    uint32_t id_prev = lv_tabview_get_tab_act(tabview);
 80165f2:	4630      	mov	r0, r6
 80165f4:	f7ff ff71 	bl	80164da <lv_tabview_get_tab_act>
    lv_tabview_set_tab_act(tabview, tab_cur, LV_ANIM_ON);
 80165f8:	2201      	movs	r2, #1
    uint32_t id_prev = lv_tabview_get_tab_act(tabview);
 80165fa:	4605      	mov	r5, r0
    lv_tabview_set_tab_act(tabview, tab_cur, LV_ANIM_ON);
 80165fc:	4621      	mov	r1, r4
 80165fe:	4630      	mov	r0, r6
 8016600:	f7f5 fa2c 	bl	800ba5c <lv_tabview_set_tab_act>
    uint32_t id_new = lv_tabview_get_tab_act(tabview);
 8016604:	4630      	mov	r0, r6
 8016606:	f7ff ff68 	bl	80164da <lv_tabview_get_tab_act>
    if(id_prev != id_new) res = lv_event_send(tabview, LV_EVENT_VALUE_CHANGED, &id_new);
 801660a:	42a8      	cmp	r0, r5
    uint32_t id_new = lv_tabview_get_tab_act(tabview);
 801660c:	9003      	str	r0, [sp, #12]
    if(id_prev != id_new) res = lv_event_send(tabview, LV_EVENT_VALUE_CHANGED, &id_new);
 801660e:	d004      	beq.n	801661a <tabpage_press_lost_handler+0x9c>
 8016610:	aa03      	add	r2, sp, #12
 8016612:	210e      	movs	r1, #14
 8016614:	4630      	mov	r0, r6
 8016616:	f7f8 fd83 	bl	800f120 <lv_event_send>
}
 801661a:	b004      	add	sp, #16
 801661c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        x_predict += vect.x;
 8016620:	441a      	add	r2, r3
        vect.x = vect.x * (100 - LV_INDEV_DEF_DRAG_THROW) / 100;
 8016622:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016626:	2101      	movs	r1, #1
 8016628:	011b      	lsls	r3, r3, #4
        x_predict += vect.x;
 801662a:	b212      	sxth	r2, r2
        vect.x = vect.x * (100 - LV_INDEV_DEF_DRAG_THROW) / 100;
 801662c:	fb93 f3f0 	sdiv	r3, r3, r0
 8016630:	b21b      	sxth	r3, r3
 8016632:	e7c4      	b.n	80165be <tabpage_press_lost_handler+0x40>
    lv_coord_t page_x2  = page_x1 + lv_obj_get_width(tabpage);
 8016634:	4445      	add	r5, r8
    } else if(page_x2 < treshold) {
 8016636:	b22d      	sxth	r5, r5
 8016638:	4285      	cmp	r5, r0
 801663a:	dada      	bge.n	80165f2 <tabpage_press_lost_handler+0x74>
        if(tab_cur < ext->tab_cnt - 1) tab_cur++;
 801663c:	8afb      	ldrh	r3, [r7, #22]
 801663e:	3b01      	subs	r3, #1
 8016640:	429c      	cmp	r4, r3
 8016642:	dad6      	bge.n	80165f2 <tabpage_press_lost_handler+0x74>
 8016644:	3401      	adds	r4, #1
 8016646:	e7d3      	b.n	80165f0 <tabpage_press_lost_handler+0x72>

08016648 <lv_tabview_get_style>:
{
 8016648:	b538      	push	{r3, r4, r5, lr}
 801664a:	460c      	mov	r4, r1
 801664c:	4605      	mov	r5, r0
    lv_tabview_ext_t * ext   = lv_obj_get_ext_attr(tabview);
 801664e:	f7f9 fa37 	bl	800fac0 <lv_obj_get_ext_attr>
    switch(type) {
 8016652:	2c06      	cmp	r4, #6
 8016654:	d818      	bhi.n	8016688 <lv_tabview_get_style+0x40>
 8016656:	e8df f004 	tbb	[pc, r4]
 801665a:	1704      	.short	0x1704
 801665c:	13110f09 	.word	0x13110f09
 8016660:	15          	.byte	0x15
 8016661:	00          	.byte	0x00
        case LV_TABVIEW_STYLE_BG: style = lv_obj_get_style(tabview); break;
 8016662:	4628      	mov	r0, r5
}
 8016664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        case LV_TABVIEW_STYLE_BG: style = lv_obj_get_style(tabview); break;
 8016668:	f7ec bb6a 	b.w	8002d40 <lv_obj_get_style>
        case LV_TABVIEW_STYLE_BTN_BG: style = lv_btnm_get_style(ext->btns, LV_BTNM_STYLE_BG); break;
 801666c:	2100      	movs	r1, #0
        case LV_TABVIEW_STYLE_BTN_TGL_PR: style = lv_btnm_get_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_PR); break;
 801666e:	6800      	ldr	r0, [r0, #0]
}
 8016670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        case LV_TABVIEW_STYLE_BTN_TGL_PR: style = lv_btnm_get_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_PR); break;
 8016674:	f7fe b9cf 	b.w	8014a16 <lv_btnm_get_style>
        case LV_TABVIEW_STYLE_BTN_REL: style = lv_btnm_get_style(ext->btns, LV_BTNM_STYLE_BTN_REL); break;
 8016678:	2101      	movs	r1, #1
 801667a:	e7f8      	b.n	801666e <lv_tabview_get_style+0x26>
        case LV_TABVIEW_STYLE_BTN_PR: style = lv_btnm_get_style(ext->btns, LV_BTNM_STYLE_BTN_PR); break;
 801667c:	2102      	movs	r1, #2
 801667e:	e7f6      	b.n	801666e <lv_tabview_get_style+0x26>
        case LV_TABVIEW_STYLE_BTN_TGL_REL: style = lv_btnm_get_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_REL); break;
 8016680:	2103      	movs	r1, #3
 8016682:	e7f4      	b.n	801666e <lv_tabview_get_style+0x26>
        case LV_TABVIEW_STYLE_BTN_TGL_PR: style = lv_btnm_get_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_PR); break;
 8016684:	2104      	movs	r1, #4
 8016686:	e7f2      	b.n	801666e <lv_tabview_get_style+0x26>
}
 8016688:	2000      	movs	r0, #0
 801668a:	bd38      	pop	{r3, r4, r5, pc}

0801668c <lv_tabview_set_style>:
{
 801668c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801668e:	460f      	mov	r7, r1
 8016690:	4606      	mov	r6, r0
 8016692:	4615      	mov	r5, r2
    lv_tabview_ext_t * ext = lv_obj_get_ext_attr(tabview);
 8016694:	f7f9 fa14 	bl	800fac0 <lv_obj_get_ext_attr>
 8016698:	4604      	mov	r4, r0
    switch(type) {
 801669a:	2f06      	cmp	r7, #6
 801669c:	d838      	bhi.n	8016710 <lv_tabview_set_style+0x84>
 801669e:	e8df f007 	tbb	[pc, r7]
 80166a2:	2404      	.short	0x2404
 80166a4:	1e17140a 	.word	0x1e17140a
 80166a8:	21          	.byte	0x21
 80166a9:	00          	.byte	0x00
        case LV_TABVIEW_STYLE_BG: lv_obj_set_style(tabview, style); break;
 80166aa:	4629      	mov	r1, r5
 80166ac:	4630      	mov	r0, r6
}
 80166ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        case LV_TABVIEW_STYLE_BG: lv_obj_set_style(tabview, style); break;
 80166b2:	f7f9 b947 	b.w	800f944 <lv_obj_set_style>
            lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BG, style);
 80166b6:	462a      	mov	r2, r5
 80166b8:	2100      	movs	r1, #0
            lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_REL, style);
 80166ba:	6820      	ldr	r0, [r4, #0]
 80166bc:	f7fe f8f8 	bl	80148b0 <lv_btnm_set_style>
            tabview_realign(tabview);
 80166c0:	4630      	mov	r0, r6
}
 80166c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            tabview_realign(tabview);
 80166c6:	f7f5 baff 	b.w	800bcc8 <tabview_realign>
            lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_REL, style);
 80166ca:	462a      	mov	r2, r5
 80166cc:	2101      	movs	r1, #1
 80166ce:	e7f4      	b.n	80166ba <lv_tabview_set_style+0x2e>
        case LV_TABVIEW_STYLE_BTN_PR: lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_PR, style); break;
 80166d0:	462a      	mov	r2, r5
 80166d2:	2102      	movs	r1, #2
        case LV_TABVIEW_STYLE_BTN_TGL_PR: lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_PR, style); break;
 80166d4:	6820      	ldr	r0, [r4, #0]
}
 80166d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        case LV_TABVIEW_STYLE_BTN_TGL_PR: lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_PR, style); break;
 80166da:	f7fe b8e9 	b.w	80148b0 <lv_btnm_set_style>
        case LV_TABVIEW_STYLE_BTN_TGL_REL: lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_REL, style); break;
 80166de:	462a      	mov	r2, r5
 80166e0:	2103      	movs	r1, #3
 80166e2:	e7f7      	b.n	80166d4 <lv_tabview_set_style+0x48>
        case LV_TABVIEW_STYLE_BTN_TGL_PR: lv_btnm_set_style(ext->btns, LV_BTNM_STYLE_BTN_TGL_PR, style); break;
 80166e4:	462a      	mov	r2, r5
 80166e6:	2104      	movs	r1, #4
 80166e8:	e7f4      	b.n	80166d4 <lv_tabview_set_style+0x48>
            lv_obj_set_style(ext->indic, style);
 80166ea:	4629      	mov	r1, r5
 80166ec:	6840      	ldr	r0, [r0, #4]
 80166ee:	f7f9 f929 	bl	800f944 <lv_obj_set_style>
            switch(ext->btns_pos) {
 80166f2:	7ea3      	ldrb	r3, [r4, #26]
 80166f4:	f9b5 101e 	ldrsh.w	r1, [r5, #30]
 80166f8:	f3c3 1341 	ubfx	r3, r3, #5, #2
                case LV_TABVIEW_BTNS_POS_BOTTOM: lv_obj_set_height(ext->indic, style->body.padding.inner); break;
 80166fc:	6860      	ldr	r0, [r4, #4]
 80166fe:	3b02      	subs	r3, #2
 8016700:	2b01      	cmp	r3, #1
 8016702:	d902      	bls.n	801670a <lv_tabview_set_style+0x7e>
 8016704:	f7f9 f853 	bl	800f7ae <lv_obj_set_height>
 8016708:	e7da      	b.n	80166c0 <lv_tabview_set_style+0x34>
                case LV_TABVIEW_BTNS_POS_RIGHT: lv_obj_set_width(ext->indic, style->body.padding.inner); break;
 801670a:	f7f9 f849 	bl	800f7a0 <lv_obj_set_width>
 801670e:	e7d7      	b.n	80166c0 <lv_tabview_set_style+0x34>
}
 8016710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016712 <slider_event_handler>:
    if(event == LV_EVENT_VALUE_CHANGED) {
 8016712:	290e      	cmp	r1, #14
 8016714:	d101      	bne.n	801671a <slider_event_handler+0x8>
 8016716:	f7f6 b835 	b.w	800c784 <slider_event_handler.part.3>
}
 801671a:	4770      	bx	lr

0801671c <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
 801671c:	f7f6 bd88 	b.w	800d230 <__bus_fault>

08016720 <z_do_kernel_oops>:

void z_do_kernel_oops(const NANO_ESF *esf)
{
 8016720:	4601      	mov	r1, r0
	z_NanoFatalErrorHandler(esf->basic.r0, esf);
 8016722:	6800      	ldr	r0, [r0, #0]
 8016724:	f7f6 bd98 	b.w	800d258 <z_NanoFatalErrorHandler>

08016728 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
 8016728:	b508      	push	{r3, lr}
	handler();
 801672a:	f7f6 fe43 	bl	800d3b4 <z_SysNmiOnReset>
	z_ExcExit();
}
 801672e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_ExcExit();
 8016732:	f7f6 bb6f 	b.w	800ce14 <_IntExit>

08016736 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
 8016736:	3901      	subs	r1, #1
 8016738:	4603      	mov	r3, r0
 801673a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801673e:	b90a      	cbnz	r2, 8016744 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
 8016740:	701a      	strb	r2, [r3, #0]

	return dest;
}
 8016742:	4770      	bx	lr
		*d = *s;
 8016744:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
 8016748:	e7f7      	b.n	801673a <strcpy+0x4>

0801674a <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
 801674a:	2300      	movs	r3, #0

	while (*s != '\0') {
 801674c:	5cc2      	ldrb	r2, [r0, r3]
 801674e:	b90a      	cbnz	r2, 8016754 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 8016750:	4618      	mov	r0, r3
 8016752:	4770      	bx	lr
		n++;
 8016754:	3301      	adds	r3, #1
 8016756:	e7f9      	b.n	801674c <strlen+0x2>

08016758 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
 8016758:	3801      	subs	r0, #1
 801675a:	3901      	subs	r1, #1
 801675c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8016760:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016764:	4293      	cmp	r3, r2
 8016766:	d101      	bne.n	801676c <strcmp+0x14>
 8016768:	2b00      	cmp	r3, #0
 801676a:	d1f7      	bne.n	801675c <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
 801676c:	1a98      	subs	r0, r3, r2
 801676e:	4770      	bx	lr

08016770 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
 8016770:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
 8016772:	ea81 0400 	eor.w	r4, r1, r0
 8016776:	4603      	mov	r3, r0
 8016778:	07a5      	lsls	r5, r4, #30
 801677a:	d00b      	beq.n	8016794 <memcpy+0x24>
 801677c:	3b01      	subs	r3, #1
 801677e:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
 8016780:	4291      	cmp	r1, r2
 8016782:	d11a      	bne.n	80167ba <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8016784:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
 8016786:	2a00      	cmp	r2, #0
 8016788:	d0fc      	beq.n	8016784 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
 801678a:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
 801678e:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
 8016790:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
 8016794:	079c      	lsls	r4, r3, #30
 8016796:	d1f6      	bne.n	8016786 <memcpy+0x16>
 8016798:	0895      	lsrs	r5, r2, #2
 801679a:	1f1e      	subs	r6, r3, #4
 801679c:	00ac      	lsls	r4, r5, #2
 801679e:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
 80167a0:	42b9      	cmp	r1, r7
 80167a2:	d105      	bne.n	80167b0 <memcpy+0x40>
 80167a4:	f06f 0603 	mvn.w	r6, #3
 80167a8:	4423      	add	r3, r4
 80167aa:	fb06 2205 	mla	r2, r6, r5, r2
 80167ae:	e7e5      	b.n	801677c <memcpy+0xc>
			*(d_word++) = *(s_word++);
 80167b0:	f851 cb04 	ldr.w	ip, [r1], #4
 80167b4:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
 80167b8:	e7f2      	b.n	80167a0 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
 80167ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80167be:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 80167c2:	e7dd      	b.n	8016780 <memcpy+0x10>

080167c4 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 80167c4:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
 80167c6:	4603      	mov	r3, r0
{
 80167c8:	b570      	push	{r4, r5, r6, lr}

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
 80167ca:	079c      	lsls	r4, r3, #30
 80167cc:	d110      	bne.n	80167f0 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
 80167ce:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
 80167d2:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
 80167d6:	0894      	lsrs	r4, r2, #2
 80167d8:	eb03 0684 	add.w	r6, r3, r4, lsl #2
 80167dc:	42b3      	cmp	r3, r6
 80167de:	d10d      	bne.n	80167fc <memset+0x38>
 80167e0:	f06f 0503 	mvn.w	r5, #3
 80167e4:	fb05 2404 	mla	r4, r5, r4, r2
 80167e8:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
 80167ea:	42a3      	cmp	r3, r4
 80167ec:	d109      	bne.n	8016802 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 80167ee:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
 80167f0:	2a00      	cmp	r2, #0
 80167f2:	d0fc      	beq.n	80167ee <memset+0x2a>
		*(d_byte++) = c_byte;
 80167f4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 80167f8:	3a01      	subs	r2, #1
 80167fa:	e7e6      	b.n	80167ca <memset+0x6>
		*(d_word++) = c_word;
 80167fc:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
 8016800:	e7ec      	b.n	80167dc <memset+0x18>
		*(d_byte++) = c_byte;
 8016802:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8016806:	e7f0      	b.n	80167ea <memset+0x26>

08016808 <_stdout_hook_default>:
}
 8016808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801680c:	4770      	bx	lr

0801680e <gpio_stm32_isr>:
	struct gpio_stm32_data *data = dev->driver_data;
 801680e:	688a      	ldr	r2, [r1, #8]
	if ((BIT(line) & data->cb_pins) != 0) {
 8016810:	6813      	ldr	r3, [r2, #0]
 8016812:	40c3      	lsrs	r3, r0
 8016814:	07db      	lsls	r3, r3, #31
{
 8016816:	b570      	push	{r4, r5, r6, lr}
 8016818:	460e      	mov	r6, r1
	if ((BIT(line) & data->cb_pins) != 0) {
 801681a:	d50f      	bpl.n	801683c <gpio_stm32_isr+0x2e>
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 801681c:	6851      	ldr	r1, [r2, #4]
 801681e:	b169      	cbz	r1, 801683c <gpio_stm32_isr+0x2e>
		gpio_fire_callbacks(&data->cb, dev, BIT(line));
 8016820:	2501      	movs	r5, #1
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8016822:	680c      	ldr	r4, [r1, #0]
 8016824:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 8016826:	688b      	ldr	r3, [r1, #8]
 8016828:	421d      	tst	r5, r3
 801682a:	d003      	beq.n	8016834 <gpio_stm32_isr+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
 801682c:	684b      	ldr	r3, [r1, #4]
 801682e:	462a      	mov	r2, r5
 8016830:	4630      	mov	r0, r6
 8016832:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8016834:	b114      	cbz	r4, 801683c <gpio_stm32_isr+0x2e>
 8016836:	4621      	mov	r1, r4
 8016838:	6824      	ldr	r4, [r4, #0]
 801683a:	e7f4      	b.n	8016826 <gpio_stm32_isr+0x18>
}
 801683c:	bd70      	pop	{r4, r5, r6, pc}

0801683e <gpio_stm32_write>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 801683e:	6800      	ldr	r0, [r0, #0]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8016840:	6880      	ldr	r0, [r0, #8]
{
 8016842:	b510      	push	{r4, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8016844:	6800      	ldr	r0, [r0, #0]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8016846:	b941      	cbnz	r1, 801685a <gpio_stm32_write+0x1c>
	pinval = 1 << pin;
 8016848:	2401      	movs	r4, #1
 801684a:	fa04 f202 	lsl.w	r2, r4, r2
	if (value != 0U) {
 801684e:	b113      	cbz	r3, 8016856 <gpio_stm32_write+0x18>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8016850:	6182      	str	r2, [r0, #24]
}
 8016852:	4608      	mov	r0, r1
 8016854:	bd10      	pop	{r4, pc}
 8016856:	0412      	lsls	r2, r2, #16
 8016858:	e7fa      	b.n	8016850 <gpio_stm32_write+0x12>
		return -ENOTSUP;
 801685a:	f06f 0122 	mvn.w	r1, #34	; 0x22
 801685e:	e7f8      	b.n	8016852 <gpio_stm32_write+0x14>

08016860 <gpio_stm32_read>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8016860:	6800      	ldr	r0, [r0, #0]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8016862:	6880      	ldr	r0, [r0, #8]
{
 8016864:	b510      	push	{r4, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8016866:	6800      	ldr	r0, [r0, #0]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8016868:	b931      	cbnz	r1, 8016878 <gpio_stm32_read+0x18>
  return (uint32_t)(READ_REG(GPIOx->IDR));
 801686a:	6904      	ldr	r4, [r0, #16]
	*value = (LL_GPIO_ReadInputPort(gpio) >> pin) & 0x1;
 801686c:	40d4      	lsrs	r4, r2
 801686e:	f004 0401 	and.w	r4, r4, #1
 8016872:	601c      	str	r4, [r3, #0]
}
 8016874:	4608      	mov	r0, r1
 8016876:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
 8016878:	f06f 0122 	mvn.w	r1, #34	; 0x22
 801687c:	e7fa      	b.n	8016874 <gpio_stm32_read+0x14>

0801687e <gpio_stm32_manage_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 801687e:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
 8016880:	6858      	ldr	r0, [r3, #4]
{
 8016882:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
 8016884:	b158      	cbz	r0, 801689e <gpio_stm32_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8016886:	2400      	movs	r4, #0
 8016888:	4281      	cmp	r1, r0
 801688a:	d113      	bne.n	80168b4 <gpio_stm32_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
 801688c:	6808      	ldr	r0, [r1, #0]
 801688e:	b95c      	cbnz	r4, 80168a8 <gpio_stm32_manage_callback+0x2a>
 8016890:	689c      	ldr	r4, [r3, #8]
	list->head = node;
 8016892:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 8016894:	42a1      	cmp	r1, r4
 8016896:	d100      	bne.n	801689a <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 8016898:	6098      	str	r0, [r3, #8]
	parent->next = child;
 801689a:	2000      	movs	r0, #0
 801689c:	6008      	str	r0, [r1, #0]
	if (set) {
 801689e:	b972      	cbnz	r2, 80168be <gpio_stm32_manage_callback+0x40>
	return 0;
 80168a0:	2000      	movs	r0, #0
}
 80168a2:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80168a4:	4628      	mov	r0, r5
 80168a6:	e7ef      	b.n	8016888 <gpio_stm32_manage_callback+0xa>
	parent->next = child;
 80168a8:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 80168aa:	6898      	ldr	r0, [r3, #8]
 80168ac:	4281      	cmp	r1, r0
	list->tail = node;
 80168ae:	bf08      	it	eq
 80168b0:	609c      	streq	r4, [r3, #8]
 80168b2:	e7f2      	b.n	801689a <gpio_stm32_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 80168b4:	6805      	ldr	r5, [r0, #0]
	return node->next;
 80168b6:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80168b8:	2d00      	cmp	r5, #0
 80168ba:	d1f3      	bne.n	80168a4 <gpio_stm32_manage_callback+0x26>
			if (!set) {
 80168bc:	b13a      	cbz	r2, 80168ce <gpio_stm32_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
 80168be:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
 80168c0:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 80168c2:	6898      	ldr	r0, [r3, #8]
	list->head = node;
 80168c4:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 80168c6:	2800      	cmp	r0, #0
 80168c8:	d1ea      	bne.n	80168a0 <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 80168ca:	6099      	str	r1, [r3, #8]
 80168cc:	e7e9      	b.n	80168a2 <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 80168ce:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 80168d2:	e7e6      	b.n	80168a2 <gpio_stm32_manage_callback+0x24>

080168d4 <gpio_stm32_enable_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 80168d4:	6880      	ldr	r0, [r0, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 80168d6:	b939      	cbnz	r1, 80168e8 <gpio_stm32_enable_callback+0x14>
	data->cb_pins |= BIT(pin);
 80168d8:	2301      	movs	r3, #1
 80168da:	fa03 f202 	lsl.w	r2, r3, r2
 80168de:	6803      	ldr	r3, [r0, #0]
 80168e0:	4313      	orrs	r3, r2
 80168e2:	6003      	str	r3, [r0, #0]
}
 80168e4:	4608      	mov	r0, r1
 80168e6:	4770      	bx	lr
		return -ENOTSUP;
 80168e8:	f06f 0122 	mvn.w	r1, #34	; 0x22
 80168ec:	e7fa      	b.n	80168e4 <gpio_stm32_enable_callback+0x10>

080168ee <gpio_stm32_disable_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 80168ee:	6880      	ldr	r0, [r0, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 80168f0:	b941      	cbnz	r1, 8016904 <gpio_stm32_disable_callback+0x16>
	data->cb_pins &= ~BIT(pin);
 80168f2:	2301      	movs	r3, #1
 80168f4:	fa03 f202 	lsl.w	r2, r3, r2
 80168f8:	6803      	ldr	r3, [r0, #0]
 80168fa:	ea23 0302 	bic.w	r3, r3, r2
 80168fe:	6003      	str	r3, [r0, #0]
}
 8016900:	4608      	mov	r0, r1
 8016902:	4770      	bx	lr
		return -ENOTSUP;
 8016904:	f06f 0122 	mvn.w	r1, #34	; 0x22
 8016908:	e7fa      	b.n	8016900 <gpio_stm32_disable_callback+0x12>

0801690a <gpio_stm32_flags_to_conf>:
	int direction = flags & GPIO_DIR_MASK;
 801690a:	f000 0301 	and.w	r3, r0, #1
	if (pincfg == NULL) {
 801690e:	b1b1      	cbz	r1, 801693e <gpio_stm32_flags_to_conf+0x34>
	if (direction == GPIO_DIR_OUT) {
 8016910:	b123      	cbz	r3, 801691c <gpio_stm32_flags_to_conf+0x12>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8016912:	2310      	movs	r3, #16
 8016914:	600b      	str	r3, [r1, #0]
	return 0;
 8016916:	2300      	movs	r3, #0
}
 8016918:	4618      	mov	r0, r3
 801691a:	4770      	bx	lr
	int pud = flags & GPIO_PUD_MASK;
 801691c:	f400 7040 	and.w	r0, r0, #768	; 0x300
		if (pud == GPIO_PUD_PULL_UP) {
 8016920:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8016924:	d103      	bne.n	801692e <gpio_stm32_flags_to_conf+0x24>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8016926:	f44f 7200 	mov.w	r2, #512	; 0x200
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 801692a:	600a      	str	r2, [r1, #0]
 801692c:	e7f4      	b.n	8016918 <gpio_stm32_flags_to_conf+0xe>
		} else if (pud == GPIO_PUD_PULL_DOWN) {
 801692e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8016932:	d001      	beq.n	8016938 <gpio_stm32_flags_to_conf+0x2e>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 8016934:	600b      	str	r3, [r1, #0]
 8016936:	e7ef      	b.n	8016918 <gpio_stm32_flags_to_conf+0xe>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8016938:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801693c:	e7f5      	b.n	801692a <gpio_stm32_flags_to_conf+0x20>
		return -EINVAL;
 801693e:	f06f 0315 	mvn.w	r3, #21
 8016942:	e7e9      	b.n	8016918 <gpio_stm32_flags_to_conf+0xe>

08016944 <gpio_stm32_configure>:
{
 8016944:	b5f0      	push	{r4, r5, r6, r7, lr}
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8016946:	f002 0530 	and.w	r5, r2, #48	; 0x30
	pinval = 1 << pin;
 801694a:	2401      	movs	r4, #1
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 801694c:	f8d0 c000 	ldr.w	ip, [r0]
 8016950:	408c      	lsls	r4, r1
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8016952:	092e      	lsrs	r6, r5, #4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016954:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 8016958:	fab7 f787 	clz	r7, r7
 801695c:	f04f 0e03 	mov.w	lr, #3
 8016960:	007f      	lsls	r7, r7, #1
 8016962:	fa0e f707 	lsl.w	r7, lr, r7
 8016966:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801696a:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 801696e:	fab7 f787 	clz	r7, r7
	if (STM32_MODER_ALT_MODE == mode) {
 8016972:	2d20      	cmp	r5, #32
 8016974:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8016978:	fa06 f607 	lsl.w	r6, r6, r7
 801697c:	ea46 060c 	orr.w	r6, r6, ip
 8016980:	6006      	str	r6, [r0, #0]
 8016982:	d116      	bne.n	80169b2 <gpio_stm32_configure+0x6e>
		if (pin < 8) {
 8016984:	2907      	cmp	r1, #7
 8016986:	dc49      	bgt.n	8016a1c <gpio_stm32_configure+0xd8>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8016988:	6a07      	ldr	r7, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801698a:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 801698e:	b10e      	cbz	r6, 8016994 <gpio_stm32_configure+0x50>
  return __builtin_clz(value);
 8016990:	fab6 f586 	clz	r5, r6
 8016994:	260f      	movs	r6, #15
 8016996:	00ad      	lsls	r5, r5, #2
 8016998:	fa06 f505 	lsl.w	r5, r6, r5
 801699c:	ea27 0605 	bic.w	r6, r7, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80169a0:	fa94 f5a4 	rbit	r5, r4
  return __builtin_clz(value);
 80169a4:	fab5 f585 	clz	r5, r5
 80169a8:	00ad      	lsls	r5, r5, #2
 80169aa:	fa03 f505 	lsl.w	r5, r3, r5
 80169ae:	4335      	orrs	r5, r6
 80169b0:	6205      	str	r5, [r0, #32]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80169b2:	6845      	ldr	r5, [r0, #4]
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 80169b4:	f3c2 1380 	ubfx	r3, r2, #6, #1
 80169b8:	ea25 0504 	bic.w	r5, r5, r4
 80169bc:	fa03 f101 	lsl.w	r1, r3, r1
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 80169c0:	f3c2 13c1 	ubfx	r3, r2, #7, #2
 80169c4:	4329      	orrs	r1, r5
 80169c6:	6041      	str	r1, [r0, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80169c8:	6885      	ldr	r5, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80169ca:	fa94 f1a4 	rbit	r1, r4
  return __builtin_clz(value);
 80169ce:	fab1 f181 	clz	r1, r1
 80169d2:	2603      	movs	r6, #3
 80169d4:	0049      	lsls	r1, r1, #1
 80169d6:	fa06 f101 	lsl.w	r1, r6, r1
 80169da:	ea25 0501 	bic.w	r5, r5, r1
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80169de:	fa94 f1a4 	rbit	r1, r4
  return __builtin_clz(value);
 80169e2:	fab1 f181 	clz	r1, r1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 80169e6:	f3c2 2241 	ubfx	r2, r2, #9, #2
 80169ea:	0049      	lsls	r1, r1, #1
 80169ec:	408b      	lsls	r3, r1
 80169ee:	432b      	orrs	r3, r5
 80169f0:	6083      	str	r3, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80169f2:	68c1      	ldr	r1, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80169f4:	fa94 f3a4 	rbit	r3, r4
  return __builtin_clz(value);
 80169f8:	fab3 f383 	clz	r3, r3
 80169fc:	005b      	lsls	r3, r3, #1
 80169fe:	fa06 f303 	lsl.w	r3, r6, r3
 8016a02:	ea21 0303 	bic.w	r3, r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016a06:	fa94 f4a4 	rbit	r4, r4
  return __builtin_clz(value);
 8016a0a:	fab4 f484 	clz	r4, r4
 8016a0e:	0064      	lsls	r4, r4, #1
 8016a10:	fa02 f404 	lsl.w	r4, r2, r4
 8016a14:	431c      	orrs	r4, r3
 8016a16:	60c4      	str	r4, [r0, #12]
}
 8016a18:	2000      	movs	r0, #0
 8016a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8016a1c:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8016a1e:	0a26      	lsrs	r6, r4, #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016a20:	fa96 fca6 	rbit	ip, r6
  if (value == 0U)
 8016a24:	f1bc 0f00 	cmp.w	ip, #0
 8016a28:	d001      	beq.n	8016a2e <gpio_stm32_configure+0xea>
  return __builtin_clz(value);
 8016a2a:	fabc f58c 	clz	r5, ip
 8016a2e:	f04f 0c0f 	mov.w	ip, #15
 8016a32:	00ad      	lsls	r5, r5, #2
 8016a34:	fa0c f505 	lsl.w	r5, ip, r5
 8016a38:	ea27 0505 	bic.w	r5, r7, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016a3c:	fa96 f6a6 	rbit	r6, r6
  return __builtin_clz(value);
 8016a40:	fab6 f686 	clz	r6, r6
 8016a44:	00b6      	lsls	r6, r6, #2
 8016a46:	40b3      	lsls	r3, r6
 8016a48:	432b      	orrs	r3, r5
 8016a4a:	6243      	str	r3, [r0, #36]	; 0x24
 8016a4c:	e7b1      	b.n	80169b2 <gpio_stm32_configure+0x6e>

08016a4e <uart_stm32_set_baudrate>:
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8016a4e:	6803      	ldr	r3, [r0, #0]
{
 8016a50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016a52:	460c      	mov	r4, r1
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8016a54:	6899      	ldr	r1, [r3, #8]
	clock_control_get_rate(data->clock,
 8016a56:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->driver_api;

	__ASSERT(api->get_rate != NULL, "%s not implemented for device %s",
		__func__, dev->config->name);

	return api->get_rate(dev, sys, rate);
 8016a58:	aa01      	add	r2, sp, #4
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8016a5a:	f851 5b08 	ldr.w	r5, [r1], #8
	clock_control_get_rate(data->clock,
 8016a5e:	6858      	ldr	r0, [r3, #4]
 8016a60:	6843      	ldr	r3, [r0, #4]
 8016a62:	68db      	ldr	r3, [r3, #12]
 8016a64:	4798      	blx	r3
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8016a66:	9901      	ldr	r1, [sp, #4]
 8016a68:	eb01 0154 	add.w	r1, r1, r4, lsr #1
 8016a6c:	fbb1 f1f4 	udiv	r1, r1, r4
 8016a70:	b289      	uxth	r1, r1
 8016a72:	60e9      	str	r1, [r5, #12]
}
 8016a74:	b003      	add	sp, #12
 8016a76:	bd30      	pop	{r4, r5, pc}

08016a78 <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8016a78:	6803      	ldr	r3, [r0, #0]
 8016a7a:	689b      	ldr	r3, [r3, #8]
 8016a7c:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8016a7e:	69da      	ldr	r2, [r3, #28]
 8016a80:	0612      	lsls	r2, r2, #24
 8016a82:	d5fc      	bpl.n	8016a7e <uart_stm32_poll_out+0x6>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8016a84:	2240      	movs	r2, #64	; 0x40
 8016a86:	621a      	str	r2, [r3, #32]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8016a88:	6299      	str	r1, [r3, #40]	; 0x28
}
 8016a8a:	4770      	bx	lr

08016a8c <uart_stm32_err_check>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8016a8c:	6803      	ldr	r3, [r0, #0]
 8016a8e:	689b      	ldr	r3, [r3, #8]
 8016a90:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8016a92:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8016a94:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8016a96:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8016a9a:	07d2      	lsls	r2, r2, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8016a9c:	69da      	ldr	r2, [r3, #28]
		err |= UART_ERROR_PARITY;
 8016a9e:	bf48      	it	mi
 8016aa0:	f040 0002 	orrmi.w	r0, r0, #2
 8016aa4:	0791      	lsls	r1, r2, #30
		err |= UART_ERROR_FRAMING;
 8016aa6:	bf48      	it	mi
 8016aa8:	f040 0004 	orrmi.w	r0, r0, #4
	if (err & UART_ERROR_OVERRUN) {
 8016aac:	07c2      	lsls	r2, r0, #31
 8016aae:	d501      	bpl.n	8016ab4 <uart_stm32_err_check+0x28>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8016ab0:	2208      	movs	r2, #8
 8016ab2:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 8016ab4:	0781      	lsls	r1, r0, #30
 8016ab6:	d501      	bpl.n	8016abc <uart_stm32_err_check+0x30>
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8016ab8:	2201      	movs	r2, #1
 8016aba:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 8016abc:	0742      	lsls	r2, r0, #29
 8016abe:	d501      	bpl.n	8016ac4 <uart_stm32_err_check+0x38>
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8016ac0:	2202      	movs	r2, #2
 8016ac2:	621a      	str	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NCF);
 8016ac4:	2204      	movs	r2, #4
 8016ac6:	621a      	str	r2, [r3, #32]
}
 8016ac8:	4770      	bx	lr

08016aca <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8016aca:	6803      	ldr	r3, [r0, #0]
 8016acc:	689b      	ldr	r3, [r3, #8]
 8016ace:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8016ad0:	69da      	ldr	r2, [r3, #28]
 8016ad2:	0710      	lsls	r0, r2, #28
 8016ad4:	d501      	bpl.n	8016ada <uart_stm32_poll_in+0x10>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8016ad6:	2208      	movs	r2, #8
 8016ad8:	621a      	str	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8016ada:	69da      	ldr	r2, [r3, #28]
 8016adc:	0692      	lsls	r2, r2, #26
 8016ade:	d503      	bpl.n	8016ae8 <uart_stm32_poll_in+0x1e>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8016ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return 0;
 8016ae2:	2000      	movs	r0, #0
 8016ae4:	700b      	strb	r3, [r1, #0]
 8016ae6:	4770      	bx	lr
		return -1;
 8016ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8016aec:	4770      	bx	lr

08016aee <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8016aee:	6883      	ldr	r3, [r0, #8]
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8016af4:	6803      	ldr	r3, [r0, #0]
 8016af6:	689b      	ldr	r3, [r3, #8]
 8016af8:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8016afa:	6813      	ldr	r3, [r2, #0]
 8016afc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8016b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016b04:	d028      	beq.n	8016b58 <uart_stm32_config_get+0x6a>
		return UART_CFG_PARITY_NONE;
 8016b06:	f5a3 60c0 	sub.w	r0, r3, #1536	; 0x600
 8016b0a:	4243      	negs	r3, r0
 8016b0c:	4143      	adcs	r3, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8016b0e:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8016b10:	6853      	ldr	r3, [r2, #4]
 8016b12:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8016b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016b1a:	d01f      	beq.n	8016b5c <uart_stm32_config_get+0x6e>
 8016b1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8016b20:	d01e      	beq.n	8016b60 <uart_stm32_config_get+0x72>
 8016b22:	2b00      	cmp	r3, #0
		return UART_CFG_STOP_BITS_2;
 8016b24:	bf0c      	ite	eq
 8016b26:	2301      	moveq	r3, #1
 8016b28:	2303      	movne	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8016b2a:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8016b2c:	6813      	ldr	r3, [r2, #0]
 8016b2e:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
	switch (db) {
 8016b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016b36:	d015      	beq.n	8016b64 <uart_stm32_config_get+0x76>
 8016b38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		return UART_CFG_DATA_BITS_8;
 8016b3c:	bf0c      	ite	eq
 8016b3e:	2302      	moveq	r3, #2
 8016b40:	2303      	movne	r3, #3
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8016b42:	718b      	strb	r3, [r1, #6]
}
 8016b44:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8016b46:	6893      	ldr	r3, [r2, #8]
 8016b48:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8016b4c:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8016b50:	4253      	negs	r3, r2
 8016b52:	4153      	adcs	r3, r2
 8016b54:	71cb      	strb	r3, [r1, #7]
}
 8016b56:	4770      	bx	lr
		return UART_CFG_PARITY_EVEN;
 8016b58:	2302      	movs	r3, #2
 8016b5a:	e7d8      	b.n	8016b0e <uart_stm32_config_get+0x20>
		return UART_CFG_STOP_BITS_0_5;
 8016b5c:	2300      	movs	r3, #0
 8016b5e:	e7e4      	b.n	8016b2a <uart_stm32_config_get+0x3c>
		return UART_CFG_STOP_BITS_1_5;
 8016b60:	2302      	movs	r3, #2
 8016b62:	e7e2      	b.n	8016b2a <uart_stm32_config_get+0x3c>
		return UART_CFG_DATA_BITS_9;
 8016b64:	2304      	movs	r3, #4
 8016b66:	e7ec      	b.n	8016b42 <uart_stm32_config_get+0x54>

08016b68 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8016b68:	7b43      	ldrb	r3, [r0, #13]
 8016b6a:	06db      	lsls	r3, r3, #27
 8016b6c:	bf03      	ittte	eq
 8016b6e:	6980      	ldreq	r0, [r0, #24]
 8016b70:	fab0 f080 	clzeq	r0, r0
 8016b74:	0940      	lsreq	r0, r0, #5
 8016b76:	2000      	movne	r0, #0
}
 8016b78:	4770      	bx	lr

08016b7a <z_unpend_thread_no_timeout>:
{
 8016b7a:	b538      	push	{r3, r4, r5, lr}
 8016b7c:	4604      	mov	r4, r0
	__asm__ volatile(
 8016b7e:	f04f 0310 	mov.w	r3, #16
 8016b82:	f3ef 8511 	mrs	r5, BASEPRI
 8016b86:	f383 8811 	msr	BASEPRI, r3
 8016b8a:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8016b8e:	4601      	mov	r1, r0
 8016b90:	6880      	ldr	r0, [r0, #8]
 8016b92:	f7f6 ff1b 	bl	800d9cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8016b96:	7b63      	ldrb	r3, [r4, #13]
 8016b98:	f023 0302 	bic.w	r3, r3, #2
 8016b9c:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
 8016b9e:	f385 8811 	msr	BASEPRI, r5
 8016ba2:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	60a3      	str	r3, [r4, #8]
}
 8016baa:	bd38      	pop	{r3, r4, r5, pc}

08016bac <z_reschedule>:
{
 8016bac:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_is_in_isr();
 8016bae:	b939      	cbnz	r1, 8016bc0 <z_reschedule+0x14>
 8016bb0:	f7f6 fec8 	bl	800d944 <resched.part.15>
	if (resched(key.key)) {
 8016bb4:	b120      	cbz	r0, 8016bc0 <z_reschedule+0x14>
 8016bb6:	4608      	mov	r0, r1
}
 8016bb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016bbc:	f7f6 b944 	b.w	800ce48 <__swap>
 8016bc0:	f381 8811 	msr	BASEPRI, r1
 8016bc4:	f3bf 8f6f 	isb	sy
 8016bc8:	bd08      	pop	{r3, pc}

08016bca <z_reschedule_irqlock>:
{
 8016bca:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_is_in_isr();
 8016bcc:	4602      	mov	r2, r0
 8016bce:	b938      	cbnz	r0, 8016be0 <z_reschedule_irqlock+0x16>
 8016bd0:	f7f6 feb8 	bl	800d944 <resched.part.15>
	if (resched(key)) {
 8016bd4:	b120      	cbz	r0, 8016be0 <z_reschedule_irqlock+0x16>
 8016bd6:	4610      	mov	r0, r2
}
 8016bd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016bdc:	f7f6 b934 	b.w	800ce48 <__swap>
 8016be0:	f382 8811 	msr	BASEPRI, r2
 8016be4:	f3bf 8f6f 	isb	sy
 8016be8:	bd08      	pop	{r3, pc}

08016bea <z_reschedule_unlocked>:
	__asm__ volatile(
 8016bea:	f04f 0310 	mov.w	r3, #16
 8016bee:	f3ef 8011 	mrs	r0, BASEPRI
 8016bf2:	f383 8811 	msr	BASEPRI, r3
 8016bf6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
 8016bfa:	f7ff bfe6 	b.w	8016bca <z_reschedule_irqlock>

08016bfe <z_priq_dumb_best>:
	return list->head == list;
 8016bfe:	6803      	ldr	r3, [r0, #0]
}
 8016c00:	4298      	cmp	r0, r3
 8016c02:	bf14      	ite	ne
 8016c04:	4618      	movne	r0, r3
 8016c06:	2000      	moveq	r0, #0
 8016c08:	4770      	bx	lr

08016c0a <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
 8016c0a:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
 8016c0e:	b570      	push	{r4, r5, r6, lr}
 8016c10:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
 8016c12:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
 8016c16:	b1cb      	cbz	r3, 8016c4c <z_thread_timeout+0x42>
 8016c18:	f04f 0310 	mov.w	r3, #16
 8016c1c:	f3ef 8611 	mrs	r6, BASEPRI
 8016c20:	f383 8811 	msr	BASEPRI, r3
 8016c24:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8016c28:	4629      	mov	r1, r5
 8016c2a:	f850 0c10 	ldr.w	r0, [r0, #-16]
 8016c2e:	f7f6 fecd 	bl	800d9cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8016c32:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 8016c36:	f023 0302 	bic.w	r3, r3, #2
 8016c3a:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
 8016c3e:	f386 8811 	msr	BASEPRI, r6
 8016c42:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 8016c46:	2300      	movs	r3, #0
 8016c48:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8016c4c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
 8016c50:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8016c52:	f023 0314 	bic.w	r3, r3, #20
 8016c56:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
 8016c5a:	f7ff ff85 	bl	8016b68 <z_is_thread_ready>
 8016c5e:	b120      	cbz	r0, 8016c6a <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
 8016c60:	4628      	mov	r0, r5
}
 8016c62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c66:	f7f6 bf01 	b.w	800da6c <z_add_thread_to_ready_q>
 8016c6a:	bd70      	pop	{r4, r5, r6, pc}

08016c6c <z_impl_k_sleep>:
{
 8016c6c:	b510      	push	{r4, lr}
	if (ticks == 0) {
 8016c6e:	4604      	mov	r4, r0
 8016c70:	b958      	cbnz	r0, 8016c8a <z_impl_k_sleep+0x1e>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
 8016c72:	f7f7 f805 	bl	800dc80 <z_impl_k_yield>
}

static inline u64_t __ticks_to_ms(s64_t ticks)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	return (u64_t)ticks * MSEC_PER_SEC /
 8016c76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016c7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016c7e:	2300      	movs	r3, #0
 8016c80:	fb84 0100 	smull	r0, r1, r4, r0
 8016c84:	f7e9 fab8 	bl	80001f8 <__aeabi_uldivmod>
}
 8016c88:	bd10      	pop	{r4, pc}
 8016c8a:	f7f6 ffbf 	bl	800dc0c <z_tick_sleep.part.16>
 8016c8e:	4604      	mov	r4, r0
 8016c90:	e7f1      	b.n	8016c76 <z_impl_k_sleep+0xa>

08016c92 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8016c92:	7b43      	ldrb	r3, [r0, #13]
 8016c94:	06db      	lsls	r3, r3, #27
 8016c96:	bf03      	ittte	eq
 8016c98:	6980      	ldreq	r0, [r0, #24]
 8016c9a:	fab0 f080 	clzeq	r0, r0
 8016c9e:	0940      	lsreq	r0, r0, #5
 8016ca0:	2000      	movne	r0, #0
}
 8016ca2:	4770      	bx	lr

08016ca4 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
 8016ca4:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 8016ca6:	b510      	push	{r4, lr}
 8016ca8:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
 8016caa:	b103      	cbz	r3, 8016cae <z_thread_single_abort+0xa>
		thread->fn_abort();
 8016cac:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
 8016cae:	4620      	mov	r0, r4
 8016cb0:	f7ff ffef 	bl	8016c92 <z_is_thread_ready>
 8016cb4:	b138      	cbz	r0, 8016cc6 <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
 8016cb6:	4620      	mov	r0, r4
 8016cb8:	f7f6 ff82 	bl	800dbc0 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
 8016cbc:	7b63      	ldrb	r3, [r4, #13]
 8016cbe:	f043 0308 	orr.w	r3, r3, #8
 8016cc2:	7363      	strb	r3, [r4, #13]
}
 8016cc4:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
 8016cc6:	7b63      	ldrb	r3, [r4, #13]
 8016cc8:	079b      	lsls	r3, r3, #30
 8016cca:	d502      	bpl.n	8016cd2 <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
 8016ccc:	4620      	mov	r0, r4
 8016cce:	f7ff ff54 	bl	8016b7a <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
 8016cd2:	69a3      	ldr	r3, [r4, #24]
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d0f1      	beq.n	8016cbc <z_thread_single_abort+0x18>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8016cd8:	f104 0018 	add.w	r0, r4, #24
 8016cdc:	f000 f809 	bl	8016cf2 <z_abort_timeout>
 8016ce0:	e7ec      	b.n	8016cbc <z_thread_single_abort+0x18>

08016ce2 <z_init_thread_base>:
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
 8016ce2:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
 8016ce4:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
 8016ce6:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
 8016ce8:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
 8016cea:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
 8016cec:	e9c0 3306 	strd	r3, r3, [r0, #24]

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
 8016cf0:	4770      	bx	lr

08016cf2 <z_abort_timeout>:
{
 8016cf2:	b510      	push	{r4, lr}
	__asm__ volatile(
 8016cf4:	f04f 0210 	mov.w	r2, #16
 8016cf8:	f3ef 8411 	mrs	r4, BASEPRI
 8016cfc:	f382 8811 	msr	BASEPRI, r2
 8016d00:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8016d04:	6803      	ldr	r3, [r0, #0]
 8016d06:	b13b      	cbz	r3, 8016d18 <z_abort_timeout+0x26>
			remove_timeout(to);
 8016d08:	f7f7 f8ae 	bl	800de68 <remove_timeout>
			ret = 0;
 8016d0c:	2000      	movs	r0, #0
	__asm__ volatile(
 8016d0e:	f384 8811 	msr	BASEPRI, r4
 8016d12:	f3bf 8f6f 	isb	sy
}
 8016d16:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8016d18:	f06f 0015 	mvn.w	r0, #21
 8016d1c:	e7f7      	b.n	8016d0e <z_abort_timeout+0x1c>

08016d1e <z_get_next_timeout_expiry>:
{
 8016d1e:	b510      	push	{r4, lr}
	__asm__ volatile(
 8016d20:	f04f 0310 	mov.w	r3, #16
 8016d24:	f3ef 8411 	mrs	r4, BASEPRI
 8016d28:	f383 8811 	msr	BASEPRI, r3
 8016d2c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
 8016d30:	f7f7 f8ae 	bl	800de90 <next_timeout>
	__asm__ volatile(
 8016d34:	f384 8811 	msr	BASEPRI, r4
 8016d38:	f3bf 8f6f 	isb	sy
}
 8016d3c:	bd10      	pop	{r4, pc}

08016d3e <z_set_timeout_expiry>:
{
 8016d3e:	b570      	push	{r4, r5, r6, lr}
 8016d40:	4604      	mov	r4, r0
 8016d42:	460e      	mov	r6, r1
	__asm__ volatile(
 8016d44:	f04f 0310 	mov.w	r3, #16
 8016d48:	f3ef 8511 	mrs	r5, BASEPRI
 8016d4c:	f383 8811 	msr	BASEPRI, r3
 8016d50:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
 8016d54:	f7f7 f89c 	bl	800de90 <next_timeout>
		if (sooner && !imminent) {
 8016d58:	42a0      	cmp	r0, r4
 8016d5a:	dd05      	ble.n	8016d68 <z_set_timeout_expiry+0x2a>
 8016d5c:	2801      	cmp	r0, #1
 8016d5e:	dd03      	ble.n	8016d68 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
 8016d60:	4631      	mov	r1, r6
 8016d62:	4620      	mov	r0, r4
 8016d64:	f7e9 fe8e 	bl	8000a84 <z_clock_set_timeout>
	__asm__ volatile(
 8016d68:	f385 8811 	msr	BASEPRI, r5
 8016d6c:	f3bf 8f6f 	isb	sy
}
 8016d70:	bd70      	pop	{r4, r5, r6, pc}

08016d72 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
 8016d72:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
 8016d74:	f7f7 f944 	bl	800e000 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
 8016d78:	bd08      	pop	{r3, pc}

08016d7a <z_impl_k_uptime_get_32>:

u32_t z_impl_k_uptime_get_32(void)
{
 8016d7a:	b508      	push	{r3, lr}
	return __ticks_to_ms(z_tick_get_32());
 8016d7c:	f7ff fff9 	bl	8016d72 <z_tick_get_32>
 8016d80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016d84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016d88:	2300      	movs	r3, #0
 8016d8a:	fba0 0101 	umull	r0, r1, r0, r1
 8016d8e:	f7e9 fa33 	bl	80001f8 <__aeabi_uldivmod>
}
 8016d92:	bd08      	pop	{r3, pc}

08016d94 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
 8016d94:	b508      	push	{r3, lr}
	__asm__ volatile(
 8016d96:	f04f 0210 	mov.w	r2, #16
 8016d9a:	f3ef 8311 	mrs	r3, BASEPRI
 8016d9e:	f382 8811 	msr	BASEPRI, r2
 8016da2:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
 8016da6:	f7ff ffba 	bl	8016d1e <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
 8016daa:	2101      	movs	r1, #1
 8016dac:	2802      	cmp	r0, #2
 8016dae:	bfd8      	it	le
 8016db0:	4608      	movle	r0, r1
 8016db2:	f7ff ffc4 	bl	8016d3e <z_set_timeout_expiry>
	k_cpu_idle();
 8016db6:	f7f6 fa35 	bl	800d224 <k_cpu_idle>
 8016dba:	e7ec      	b.n	8016d96 <idle+0x2>

08016dbc <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
 8016dbc:	4770      	bx	lr
