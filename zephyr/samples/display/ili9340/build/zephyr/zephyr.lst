
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

08000000 <_vector_table>:
 8000000:	20004ab0 	.word	0x20004ab0
 8000004:	080025d5 	.word	0x080025d5
 8000008:	080053c3 	.word	0x080053c3
 800000c:	08002479 	.word	0x08002479
 8000010:	08002479 	.word	0x08002479
 8000014:	08002479 	.word	0x08002479
 8000018:	08002479 	.word	0x08002479
 800001c:	08002479 	.word	0x08002479
 8000020:	08002479 	.word	0x08002479
 8000024:	08002479 	.word	0x08002479
 8000028:	08002479 	.word	0x08002479
 800002c:	080020f9 	.word	0x080020f9
 8000030:	08002479 	.word	0x08002479
 8000034:	08002479 	.word	0x08002479
 8000038:	080020a1 	.word	0x080020a1
 800003c:	080018e9 	.word	0x080018e9

08000040 <_irq_vector_table>:
 8000040:	080025ad 080025ad 080025ad 080025ad     .%...%...%...%..
 8000050:	080025ad 080025ad 080025ad 080025ad     .%...%...%...%..
 8000060:	080025ad 080025ad 080025ad 080025ad     .%...%...%...%..
 8000070:	080025ad 080025ad 080025ad 080025ad     .%...%...%...%..
 8000080:	080025ad 080025ad 080025ad 080025ad     .%...%...%...%..
 8000090:	080025ad 080025ad 080025ad 080025ad     .%...%...%...%..
 80000a0:	080025ad 080025ad 080025ad 080025ad     .%...%...%...%..
 80000b0:	080025ad 080025ad 080025ad 080025ad     .%...%...%...%..
 80000c0:	080025ad 080025ad 080025ad 080025ad     .%...%...%...%..
 80000d0:	080025ad 080025ad 080025ad 080025ad     .%...%...%...%..
 80000e0:	080025ad 080025ad 080025ad 080025ad     .%...%...%...%..
 80000f0:	080025ad 080025ad 080025ad 080025ad     .%...%...%...%..
 8000100:	080025ad 080025ad 080025ad 080025ad     .%...%...%...%..
 8000110:	080025ad 080025ad 080025ad 080025ad     .%...%...%...%..
 8000120:	080025ad 080025ad 080025ad 080025ad     .%...%...%...%..
 8000130:	080025ad 080025ad 080025ad 080025ad     .%...%...%...%..
 8000140:	080025ad 080025ad 080025ad 080025ad     .%...%...%...%..
 8000150:	080025ad 080025ad 080025ad 080025ad     .%...%...%...%..
 8000160:	080025ad 080025ad 080025ad 080025ad     .%...%...%...%..
 8000170:	080025ad 080025ad 080025ad 080025ad     .%...%...%...%..
 8000180:	080025ad 080025ad                       .%...%..

Disassembly of section _TEXT_SECTION_NAME_2:

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000198:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800019c:	f000 b80c 	b.w	80001b8 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f808 	bl	80001bc <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__aeabi_idiv0>:
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop

080001bc <__udivmoddi4>:
 80001bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80001c2:	4615      	mov	r5, r2
 80001c4:	4604      	mov	r4, r0
 80001c6:	468e      	mov	lr, r1
 80001c8:	461e      	mov	r6, r3
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	f040 80cc 	bne.w	8000368 <__udivmoddi4+0x1ac>
 80001d0:	428a      	cmp	r2, r1
 80001d2:	fab2 fc82 	clz	ip, r2
 80001d6:	d94c      	bls.n	8000272 <__udivmoddi4+0xb6>
 80001d8:	f1bc 0f00 	cmp.w	ip, #0
 80001dc:	d00b      	beq.n	80001f6 <__udivmoddi4+0x3a>
 80001de:	f1cc 0820 	rsb	r8, ip, #32
 80001e2:	fa01 fe0c 	lsl.w	lr, r1, ip
 80001e6:	fa20 f808 	lsr.w	r8, r0, r8
 80001ea:	fa02 f50c 	lsl.w	r5, r2, ip
 80001ee:	ea48 0e0e 	orr.w	lr, r8, lr
 80001f2:	fa00 f40c 	lsl.w	r4, r0, ip
 80001f6:	ea4f 4915 	mov.w	r9, r5, lsr #16
 80001fa:	fa1f f885 	uxth.w	r8, r5
 80001fe:	fbbe faf9 	udiv	sl, lr, r9
 8000202:	0c21      	lsrs	r1, r4, #16
 8000204:	fb09 e31a 	mls	r3, r9, sl, lr
 8000208:	fb0a fb08 	mul.w	fp, sl, r8
 800020c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000210:	459b      	cmp	fp, r3
 8000212:	d92a      	bls.n	800026a <__udivmoddi4+0xae>
 8000214:	18eb      	adds	r3, r5, r3
 8000216:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
 800021a:	d204      	bcs.n	8000226 <__udivmoddi4+0x6a>
 800021c:	459b      	cmp	fp, r3
 800021e:	d902      	bls.n	8000226 <__udivmoddi4+0x6a>
 8000220:	f1aa 0002 	sub.w	r0, sl, #2
 8000224:	442b      	add	r3, r5
 8000226:	eba3 030b 	sub.w	r3, r3, fp
 800022a:	b2a4      	uxth	r4, r4
 800022c:	fbb3 f2f9 	udiv	r2, r3, r9
 8000230:	fb09 3312 	mls	r3, r9, r2, r3
 8000234:	fb02 f808 	mul.w	r8, r2, r8
 8000238:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800023c:	45a0      	cmp	r8, r4
 800023e:	d916      	bls.n	800026e <__udivmoddi4+0xb2>
 8000240:	192c      	adds	r4, r5, r4
 8000242:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000246:	d203      	bcs.n	8000250 <__udivmoddi4+0x94>
 8000248:	45a0      	cmp	r8, r4
 800024a:	d901      	bls.n	8000250 <__udivmoddi4+0x94>
 800024c:	1e93      	subs	r3, r2, #2
 800024e:	442c      	add	r4, r5
 8000250:	eba4 0408 	sub.w	r4, r4, r8
 8000254:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000258:	b127      	cbz	r7, 8000264 <__udivmoddi4+0xa8>
 800025a:	fa24 f40c 	lsr.w	r4, r4, ip
 800025e:	2300      	movs	r3, #0
 8000260:	603c      	str	r4, [r7, #0]
 8000262:	607b      	str	r3, [r7, #4]
 8000264:	4631      	mov	r1, r6
 8000266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800026a:	4650      	mov	r0, sl
 800026c:	e7db      	b.n	8000226 <__udivmoddi4+0x6a>
 800026e:	4613      	mov	r3, r2
 8000270:	e7ee      	b.n	8000250 <__udivmoddi4+0x94>
 8000272:	b902      	cbnz	r2, 8000276 <__udivmoddi4+0xba>
 8000274:	deff      	udf	#255	; 0xff
 8000276:	f1bc 0f00 	cmp.w	ip, #0
 800027a:	d12e      	bne.n	80002da <__udivmoddi4+0x11e>
 800027c:	1a8b      	subs	r3, r1, r2
 800027e:	2601      	movs	r6, #1
 8000280:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000284:	b2aa      	uxth	r2, r5
 8000286:	fbb3 f8fe 	udiv	r8, r3, lr
 800028a:	0c21      	lsrs	r1, r4, #16
 800028c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000290:	fb08 f902 	mul.w	r9, r8, r2
 8000294:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000298:	4599      	cmp	r9, r3
 800029a:	d961      	bls.n	8000360 <__udivmoddi4+0x1a4>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80002a2:	d204      	bcs.n	80002ae <__udivmoddi4+0xf2>
 80002a4:	4599      	cmp	r9, r3
 80002a6:	d902      	bls.n	80002ae <__udivmoddi4+0xf2>
 80002a8:	f1a8 0002 	sub.w	r0, r8, #2
 80002ac:	442b      	add	r3, r5
 80002ae:	eba3 0309 	sub.w	r3, r3, r9
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f1fe 	udiv	r1, r3, lr
 80002b8:	fb0e 3311 	mls	r3, lr, r1, r3
 80002bc:	434a      	muls	r2, r1
 80002be:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c2:	42a2      	cmp	r2, r4
 80002c4:	d94e      	bls.n	8000364 <__udivmoddi4+0x1a8>
 80002c6:	192c      	adds	r4, r5, r4
 80002c8:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
 80002cc:	d203      	bcs.n	80002d6 <__udivmoddi4+0x11a>
 80002ce:	42a2      	cmp	r2, r4
 80002d0:	d901      	bls.n	80002d6 <__udivmoddi4+0x11a>
 80002d2:	1e8b      	subs	r3, r1, #2
 80002d4:	442c      	add	r4, r5
 80002d6:	1aa4      	subs	r4, r4, r2
 80002d8:	e7bc      	b.n	8000254 <__udivmoddi4+0x98>
 80002da:	f1cc 0e20 	rsb	lr, ip, #32
 80002de:	fa02 f50c 	lsl.w	r5, r2, ip
 80002e2:	fa21 f90e 	lsr.w	r9, r1, lr
 80002e6:	fa01 f30c 	lsl.w	r3, r1, ip
 80002ea:	fa20 fe0e 	lsr.w	lr, r0, lr
 80002ee:	ea4e 0303 	orr.w	r3, lr, r3
 80002f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002f6:	fa00 f40c 	lsl.w	r4, r0, ip
 80002fa:	fbb9 f1f8 	udiv	r1, r9, r8
 80002fe:	fa1f fe85 	uxth.w	lr, r5
 8000302:	fb08 9211 	mls	r2, r8, r1, r9
 8000306:	0c18      	lsrs	r0, r3, #16
 8000308:	fb01 f60e 	mul.w	r6, r1, lr
 800030c:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8000310:	4296      	cmp	r6, r2
 8000312:	d921      	bls.n	8000358 <__udivmoddi4+0x19c>
 8000314:	18aa      	adds	r2, r5, r2
 8000316:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800031a:	d203      	bcs.n	8000324 <__udivmoddi4+0x168>
 800031c:	4296      	cmp	r6, r2
 800031e:	d901      	bls.n	8000324 <__udivmoddi4+0x168>
 8000320:	1e88      	subs	r0, r1, #2
 8000322:	442a      	add	r2, r5
 8000324:	1b92      	subs	r2, r2, r6
 8000326:	b29b      	uxth	r3, r3
 8000328:	fbb2 f9f8 	udiv	r9, r2, r8
 800032c:	fb08 2219 	mls	r2, r8, r9, r2
 8000330:	fb09 fe0e 	mul.w	lr, r9, lr
 8000334:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000338:	459e      	cmp	lr, r3
 800033a:	d90f      	bls.n	800035c <__udivmoddi4+0x1a0>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 8000342:	d204      	bcs.n	800034e <__udivmoddi4+0x192>
 8000344:	459e      	cmp	lr, r3
 8000346:	d902      	bls.n	800034e <__udivmoddi4+0x192>
 8000348:	f1a9 0602 	sub.w	r6, r9, #2
 800034c:	442b      	add	r3, r5
 800034e:	eba3 030e 	sub.w	r3, r3, lr
 8000352:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000356:	e793      	b.n	8000280 <__udivmoddi4+0xc4>
 8000358:	4608      	mov	r0, r1
 800035a:	e7e3      	b.n	8000324 <__udivmoddi4+0x168>
 800035c:	464e      	mov	r6, r9
 800035e:	e7f6      	b.n	800034e <__udivmoddi4+0x192>
 8000360:	4640      	mov	r0, r8
 8000362:	e7a4      	b.n	80002ae <__udivmoddi4+0xf2>
 8000364:	460b      	mov	r3, r1
 8000366:	e7b6      	b.n	80002d6 <__udivmoddi4+0x11a>
 8000368:	428b      	cmp	r3, r1
 800036a:	d905      	bls.n	8000378 <__udivmoddi4+0x1bc>
 800036c:	b10f      	cbz	r7, 8000372 <__udivmoddi4+0x1b6>
 800036e:	e9c7 0100 	strd	r0, r1, [r7]
 8000372:	2600      	movs	r6, #0
 8000374:	4630      	mov	r0, r6
 8000376:	e775      	b.n	8000264 <__udivmoddi4+0xa8>
 8000378:	fab3 fc83 	clz	ip, r3
 800037c:	f1bc 0f00 	cmp.w	ip, #0
 8000380:	d10f      	bne.n	80003a2 <__udivmoddi4+0x1e6>
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__udivmoddi4+0x1ce>
 8000386:	4282      	cmp	r2, r0
 8000388:	d809      	bhi.n	800039e <__udivmoddi4+0x1e2>
 800038a:	1a84      	subs	r4, r0, r2
 800038c:	eb61 0e03 	sbc.w	lr, r1, r3
 8000390:	2001      	movs	r0, #1
 8000392:	2f00      	cmp	r7, #0
 8000394:	d06a      	beq.n	800046c <__udivmoddi4+0x2b0>
 8000396:	e9c7 4e00 	strd	r4, lr, [r7]
 800039a:	2600      	movs	r6, #0
 800039c:	e762      	b.n	8000264 <__udivmoddi4+0xa8>
 800039e:	4660      	mov	r0, ip
 80003a0:	e7f7      	b.n	8000392 <__udivmoddi4+0x1d6>
 80003a2:	f1cc 0e20 	rsb	lr, ip, #32
 80003a6:	fa03 f30c 	lsl.w	r3, r3, ip
 80003aa:	fa22 f50e 	lsr.w	r5, r2, lr
 80003ae:	fa21 f40e 	lsr.w	r4, r1, lr
 80003b2:	431d      	orrs	r5, r3
 80003b4:	fa01 f30c 	lsl.w	r3, r1, ip
 80003b8:	fa20 f10e 	lsr.w	r1, r0, lr
 80003bc:	430b      	orrs	r3, r1
 80003be:	ea4f 4a15 	mov.w	sl, r5, lsr #16
 80003c2:	fa00 f60c 	lsl.w	r6, r0, ip
 80003c6:	fbb4 f9fa 	udiv	r9, r4, sl
 80003ca:	fa1f f885 	uxth.w	r8, r5
 80003ce:	fb0a 4019 	mls	r0, sl, r9, r4
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	fb09 f108 	mul.w	r1, r9, r8
 80003d8:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 80003dc:	42a1      	cmp	r1, r4
 80003de:	fa02 f20c 	lsl.w	r2, r2, ip
 80003e2:	d93f      	bls.n	8000464 <__udivmoddi4+0x2a8>
 80003e4:	192c      	adds	r4, r5, r4
 80003e6:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003ea:	d204      	bcs.n	80003f6 <__udivmoddi4+0x23a>
 80003ec:	42a1      	cmp	r1, r4
 80003ee:	d902      	bls.n	80003f6 <__udivmoddi4+0x23a>
 80003f0:	f1a9 0002 	sub.w	r0, r9, #2
 80003f4:	442c      	add	r4, r5
 80003f6:	1a64      	subs	r4, r4, r1
 80003f8:	b29b      	uxth	r3, r3
 80003fa:	fbb4 f9fa 	udiv	r9, r4, sl
 80003fe:	fb0a 4419 	mls	r4, sl, r9, r4
 8000402:	fb09 f808 	mul.w	r8, r9, r8
 8000406:	ea43 4104 	orr.w	r1, r3, r4, lsl #16
 800040a:	4588      	cmp	r8, r1
 800040c:	d92c      	bls.n	8000468 <__udivmoddi4+0x2ac>
 800040e:	1869      	adds	r1, r5, r1
 8000410:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8000414:	d204      	bcs.n	8000420 <__udivmoddi4+0x264>
 8000416:	4588      	cmp	r8, r1
 8000418:	d902      	bls.n	8000420 <__udivmoddi4+0x264>
 800041a:	f1a9 0302 	sub.w	r3, r9, #2
 800041e:	4429      	add	r1, r5
 8000420:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000424:	eba1 0108 	sub.w	r1, r1, r8
 8000428:	fba0 8902 	umull	r8, r9, r0, r2
 800042c:	4549      	cmp	r1, r9
 800042e:	46c2      	mov	sl, r8
 8000430:	464c      	mov	r4, r9
 8000432:	d302      	bcc.n	800043a <__udivmoddi4+0x27e>
 8000434:	d106      	bne.n	8000444 <__udivmoddi4+0x288>
 8000436:	4546      	cmp	r6, r8
 8000438:	d204      	bcs.n	8000444 <__udivmoddi4+0x288>
 800043a:	ebb8 0a02 	subs.w	sl, r8, r2
 800043e:	eb69 0405 	sbc.w	r4, r9, r5
 8000442:	3801      	subs	r0, #1
 8000444:	b197      	cbz	r7, 800046c <__udivmoddi4+0x2b0>
 8000446:	ebb6 030a 	subs.w	r3, r6, sl
 800044a:	eb61 0604 	sbc.w	r6, r1, r4
 800044e:	fa06 fe0e 	lsl.w	lr, r6, lr
 8000452:	fa23 f30c 	lsr.w	r3, r3, ip
 8000456:	ea4e 0303 	orr.w	r3, lr, r3
 800045a:	fa26 f60c 	lsr.w	r6, r6, ip
 800045e:	e9c7 3600 	strd	r3, r6, [r7]
 8000462:	e79a      	b.n	800039a <__udivmoddi4+0x1de>
 8000464:	4648      	mov	r0, r9
 8000466:	e7c6      	b.n	80003f6 <__udivmoddi4+0x23a>
 8000468:	464b      	mov	r3, r9
 800046a:	e7d9      	b.n	8000420 <__udivmoddi4+0x264>
 800046c:	463e      	mov	r6, r7
 800046e:	e6f9      	b.n	8000264 <__udivmoddi4+0xa8>

08000470 <main>:
 * wit a rectangular bitmap.
 * The color of the bit map is changed for every
 * iteration and is picked out of a set of red, green and blue.
 */
void main(void)
{
 8000470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE1(K_SYSCALL_DEVICE_GET_BINDING, device_get_binding, struct device *, const char *, name)
 8000474:	484e      	ldr	r0, [pc, #312]	; (80005b0 <main+0x140>)
 8000476:	b08a      	sub	sp, #40	; 0x28
 8000478:	f003 f9aa 	bl	80037d0 <z_impl_device_get_binding>
	size_t cnt = 0;
	int h_step;

	dev = device_get_binding(DT_INST_0_ILITEK_ILI9340_LABEL);

	if (dev == NULL) {
 800047c:	4604      	mov	r4, r0
 800047e:	b980      	cbnz	r0, 80004a2 <main+0x32>
		LOG_ERR("Device not found. Aborting test.");
 8000480:	2301      	movs	r3, #1
 8000482:	f04f 0100 	mov.w	r1, #0
 8000486:	f363 0107 	bfi	r1, r3, #0, #8
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
 800048a:	4a4a      	ldr	r2, [pc, #296]	; (80005b4 <main+0x144>)
 800048c:	4b4a      	ldr	r3, [pc, #296]	; (80005b8 <main+0x148>)
 800048e:	484b      	ldr	r0, [pc, #300]	; (80005bc <main+0x14c>)
 8000490:	1a9b      	subs	r3, r3, r2
 8000492:	08db      	lsrs	r3, r3, #3
 8000494:	f363 118f 	bfi	r1, r3, #6, #10

	/* Allocate rectangular buffer for corner data */
	buf = k_malloc(buf_size);

	if (buf == NULL) {
		LOG_ERR("Could not allocate memory. Aborting test.");
 8000498:	f004 fb5a 	bl	8004b50 <log_0>
		if (color > 2) {
			color = 0;
		}
		k_sleep(500);
	}
}
 800049c:	b00a      	add	sp, #40	; 0x28
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					    capabilities)
{
	struct display_driver_api *api =
		(struct display_driver_api *)dev->driver_api;

	api->get_capabilities(dev, capabilities);
 80004a2:	6843      	ldr	r3, [r0, #4]
 80004a4:	a906      	add	r1, sp, #24
 80004a6:	69db      	ldr	r3, [r3, #28]
 80004a8:	4798      	blx	r3
	buf = k_malloc(buf_size);
 80004aa:	f44f 6016 	mov.w	r0, #2400	; 0x960
	x1 = capabilities.x_resolution - w;
 80004ae:	f8bd 8018 	ldrh.w	r8, [sp, #24]
	y2 = capabilities.y_resolution - h;
 80004b2:	f8bd 901a 	ldrh.w	r9, [sp, #26]
	buf = k_malloc(buf_size);
 80004b6:	f003 fb71 	bl	8003b9c <k_malloc>
	if (buf == NULL) {
 80004ba:	4605      	mov	r5, r0
 80004bc:	b960      	cbnz	r0, 80004d8 <main+0x68>
		LOG_ERR("Could not allocate memory. Aborting test.");
 80004be:	2301      	movs	r3, #1
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	f363 0107 	bfi	r1, r3, #0, #8
 80004c8:	4a3a      	ldr	r2, [pc, #232]	; (80005b4 <main+0x144>)
 80004ca:	4b3b      	ldr	r3, [pc, #236]	; (80005b8 <main+0x148>)
 80004cc:	483c      	ldr	r0, [pc, #240]	; (80005c0 <main+0x150>)
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	08db      	lsrs	r3, r3, #3
 80004d2:	f363 118f 	bfi	r1, r3, #6, #10
 80004d6:	e7df      	b.n	8000498 <main+0x28>
	(void)memset(buf, 0, buf_size);
 80004d8:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80004dc:	2100      	movs	r1, #0
 80004de:	f004 ffda 	bl	8005496 <memset>
	h_step = (w * h) / capabilities.x_resolution;
 80004e2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	buf_desc.pitch = capabilities.x_resolution;
 80004e6:	f8ad 3014 	strh.w	r3, [sp, #20]
	buf_desc.buf_size = buf_size;
 80004ea:	f44f 6216 	mov.w	r2, #2400	; 0x960
	h_step = (w * h) / capabilities.x_resolution;
 80004ee:	f44f 7748 	mov.w	r7, #800	; 0x320
	buf_desc.buf_size = buf_size;
 80004f2:	9203      	str	r2, [sp, #12]
	h_step = (w * h) / capabilities.x_resolution;
 80004f4:	fbb7 f7f3 	udiv	r7, r7, r3
	buf_desc.width = capabilities.x_resolution;
 80004f8:	f8ad 3010 	strh.w	r3, [sp, #16]
	buf_desc.height = h_step;
 80004fc:	f8ad 7012 	strh.w	r7, [sp, #18]
	for (int idx = 0; idx < capabilities.y_resolution; idx += h_step) {
 8000500:	2600      	movs	r6, #0
 8000502:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8000506:	42b3      	cmp	r3, r6
 8000508:	dc23      	bgt.n	8000552 <main+0xe2>
	return api->blanking_off(dev);
 800050a:	6863      	ldr	r3, [r4, #4]
 800050c:	4620      	mov	r0, r4
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	4798      	blx	r3
	buf_desc.width = w;
 8000512:	4b2c      	ldr	r3, [pc, #176]	; (80005c4 <main+0x154>)
 8000514:	9304      	str	r3, [sp, #16]
	size_t cnt = 0;
 8000516:	2700      	movs	r7, #0
	buf_desc.pitch = w;
 8000518:	2328      	movs	r3, #40	; 0x28
 800051a:	f8ad 3014 	strh.w	r3, [sp, #20]
	size_t color = 0;
 800051e:	463e      	mov	r6, r7
			*(buf + idx) = 255U;
 8000520:	f04f 0aff 	mov.w	sl, #255	; 0xff
		(void)memset(buf, 0, buf_size);
 8000524:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000528:	2100      	movs	r1, #0
 800052a:	4628      	mov	r0, r5
 800052c:	f004 ffb3 	bl	8005496 <memset>
		for (size_t idx = color; idx < buf_size; idx += rgb_size) {
 8000530:	4633      	mov	r3, r6
 8000532:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000536:	d315      	bcc.n	8000564 <main+0xf4>
		switch (cnt % 4) {
 8000538:	f007 0303 	and.w	r3, r7, #3
 800053c:	2b02      	cmp	r3, #2
 800053e:	d029      	beq.n	8000594 <main+0x124>
 8000540:	2b03      	cmp	r3, #3
 8000542:	d02f      	beq.n	80005a4 <main+0x134>
 8000544:	2b01      	cmp	r3, #1
 8000546:	d011      	beq.n	800056c <main+0xfc>
			display_write(dev, x0, y0, &buf_desc, buf);
 8000548:	9500      	str	r5, [sp, #0]
 800054a:	ab03      	add	r3, sp, #12
 800054c:	2200      	movs	r2, #0
			display_write(dev, x3, y3, &buf_desc, buf);
 800054e:	2100      	movs	r1, #0
 8000550:	e012      	b.n	8000578 <main+0x108>
		display_write(dev, 0, idx, &buf_desc,  buf);
 8000552:	b2b2      	uxth	r2, r6
 8000554:	9500      	str	r5, [sp, #0]
 8000556:	ab03      	add	r3, sp, #12
 8000558:	2100      	movs	r1, #0
 800055a:	4620      	mov	r0, r4
 800055c:	f003 ffda 	bl	8004514 <display_write>
	for (int idx = 0; idx < capabilities.y_resolution; idx += h_step) {
 8000560:	443e      	add	r6, r7
 8000562:	e7ce      	b.n	8000502 <main+0x92>
			*(buf + idx) = 255U;
 8000564:	f805 a003 	strb.w	sl, [r5, r3]
		for (size_t idx = color; idx < buf_size; idx += rgb_size) {
 8000568:	3303      	adds	r3, #3
 800056a:	e7e2      	b.n	8000532 <main+0xc2>
			display_write(dev, x1, y1, &buf_desc, buf);
 800056c:	f1a8 0128 	sub.w	r1, r8, #40	; 0x28
 8000570:	9500      	str	r5, [sp, #0]
 8000572:	ab03      	add	r3, sp, #12
 8000574:	2200      	movs	r2, #0
			display_write(dev, x2, y2, &buf_desc, buf);
 8000576:	b289      	uxth	r1, r1
		++color;
 8000578:	3601      	adds	r6, #1
			display_write(dev, x3, y3, &buf_desc, buf);
 800057a:	4620      	mov	r0, r4
 800057c:	f003 ffca 	bl	8004514 <display_write>
			color = 0;
 8000580:	2e03      	cmp	r6, #3

K_SYSCALL_DECLARE1(K_SYSCALL_K_OBJECT_ALLOC, k_object_alloc, void *, enum k_objects, otype)

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)

K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, ms)
 8000582:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		++cnt;
 8000586:	f107 0701 	add.w	r7, r7, #1
			color = 0;
 800058a:	bf28      	it	cs
 800058c:	2600      	movcs	r6, #0
 800058e:	f005 fc5c 	bl	8005e4a <z_impl_k_sleep>
 8000592:	e7c7      	b.n	8000524 <main+0xb4>
			display_write(dev, x2, y2, &buf_desc, buf);
 8000594:	f1a9 0214 	sub.w	r2, r9, #20
 8000598:	f1a8 0128 	sub.w	r1, r8, #40	; 0x28
 800059c:	9500      	str	r5, [sp, #0]
 800059e:	ab03      	add	r3, sp, #12
 80005a0:	b292      	uxth	r2, r2
 80005a2:	e7e8      	b.n	8000576 <main+0x106>
			display_write(dev, x3, y3, &buf_desc, buf);
 80005a4:	f1a9 0214 	sub.w	r2, r9, #20
 80005a8:	9500      	str	r5, [sp, #0]
 80005aa:	ab03      	add	r3, sp, #12
 80005ac:	b292      	uxth	r2, r2
 80005ae:	e7ce      	b.n	800054e <main+0xde>
 80005b0:	080065ca 	.word	0x080065ca
 80005b4:	08006348 	.word	0x08006348
 80005b8:	08006358 	.word	0x08006358
 80005bc:	080065d2 	.word	0x080065d2
 80005c0:	080065f3 	.word	0x080065f3
 80005c4:	00140028 	.word	0x00140028

080005c8 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 80005c8:	680b      	ldr	r3, [r1, #0]
 80005ca:	3301      	adds	r3, #1
 80005cc:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 80005ce:	4b01      	ldr	r3, [pc, #4]	; (80005d4 <char_out+0xc>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4718      	bx	r3
 80005d4:	20005890 	.word	0x20005890

080005d8 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
 80005d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005dc:	b085      	sub	sp, #20
 80005de:	469b      	mov	fp, r3
 80005e0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80005e2:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800066c <_printk_dec_ulong+0x94>
 80005e6:	2c01      	cmp	r4, #1
 80005e8:	bfb8      	it	lt
 80005ea:	2401      	movlt	r4, #1
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	bf0c      	ite	eq
 80005f0:	2330      	moveq	r3, #48	; 0x30
 80005f2:	2320      	movne	r3, #32
 80005f4:	4616      	mov	r6, r2
 80005f6:	4682      	mov	sl, r0
 80005f8:	4688      	mov	r8, r1
 80005fa:	9302      	str	r3, [sp, #8]
 80005fc:	2501      	movs	r5, #1
 80005fe:	270a      	movs	r7, #10
 8000600:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
 8000602:	fbb6 f3f9 	udiv	r3, r6, r9
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	b90a      	cbnz	r2, 800060e <_printk_dec_ulong+0x36>
 800060a:	45b1      	cmp	r9, r6
 800060c:	d81d      	bhi.n	800064a <_printk_dec_ulong+0x72>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
 800060e:	9b01      	ldr	r3, [sp, #4]
 8000610:	4641      	mov	r1, r8
 8000612:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000616:	47d0      	blx	sl
			digits++;
 8000618:	3501      	adds	r5, #1
			found_largest_digit = 1;
 800061a:	2201      	movs	r2, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
 800061c:	9b01      	ldr	r3, [sp, #4]
		remaining--;
 800061e:	3f01      	subs	r7, #1
	while (pos >= 10) {
 8000620:	2f01      	cmp	r7, #1
		remainder %= pos;
 8000622:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
 8000626:	f04f 030a 	mov.w	r3, #10
 800062a:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
 800062e:	d1e8      	bne.n	8000602 <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
 8000630:	4641      	mov	r1, r8
 8000632:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8000636:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
 8000638:	f1bb 0f03 	cmp.w	fp, #3
 800063c:	d102      	bne.n	8000644 <_printk_dec_ulong+0x6c>
		remaining = min_width - digits;
 800063e:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
 8000640:	2c00      	cmp	r4, #0
 8000642:	dc0e      	bgt.n	8000662 <_printk_dec_ulong+0x8a>
			out(' ', ctx);
		}
	}
}
 8000644:	b005      	add	sp, #20
 8000646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
 800064a:	42bc      	cmp	r4, r7
 800064c:	dbe6      	blt.n	800061c <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
 800064e:	f1bb 0f02 	cmp.w	fp, #2
 8000652:	d8e3      	bhi.n	800061c <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 8000654:	4641      	mov	r1, r8
 8000656:	9802      	ldr	r0, [sp, #8]
 8000658:	9203      	str	r2, [sp, #12]
			digits++;
 800065a:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 800065c:	47d0      	blx	sl
			digits++;
 800065e:	9a03      	ldr	r2, [sp, #12]
 8000660:	e7dc      	b.n	800061c <_printk_dec_ulong+0x44>
			out(' ', ctx);
 8000662:	4641      	mov	r1, r8
 8000664:	2020      	movs	r0, #32
 8000666:	47d0      	blx	sl
 8000668:	3c01      	subs	r4, #1
 800066a:	e7e9      	b.n	8000640 <_printk_dec_ulong+0x68>
 800066c:	3b9aca00 	.word	0x3b9aca00

08000670 <__printk_hook_install>:
	_char_out = fn;
 8000670:	4b01      	ldr	r3, [pc, #4]	; (8000678 <__printk_hook_install+0x8>)
 8000672:	6018      	str	r0, [r3, #0]
}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	20005890 	.word	0x20005890

0800067c <vprintk>:
{
 800067c:	b507      	push	{r0, r1, r2, lr}
	struct out_context ctx = { 0 };
 800067e:	2300      	movs	r3, #0
 8000680:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
 8000682:	4602      	mov	r2, r0
 8000684:	460b      	mov	r3, r1
 8000686:	4803      	ldr	r0, [pc, #12]	; (8000694 <vprintk+0x18>)
 8000688:	a901      	add	r1, sp, #4
 800068a:	f004 f8c9 	bl	8004820 <z_vprintk>
}
 800068e:	b003      	add	sp, #12
 8000690:	f85d fb04 	ldr.w	pc, [sp], #4
 8000694:	080005c9 	.word	0x080005c9

08000698 <stm32l4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8000698:	f04f 0210 	mov.w	r2, #16
 800069c:	f3ef 8311 	mrs	r3, BASEPRI
 80006a0:	f382 8811 	msr	BASEPRI, r2
 80006a4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 80006a8:	f383 8811 	msr	BASEPRI, r3
 80006ac:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 80006b0:	4b02      	ldr	r3, [pc, #8]	; (80006bc <stm32l4_init+0x24>)
 80006b2:	4a03      	ldr	r2, [pc, #12]	; (80006c0 <stm32l4_init+0x28>)
 80006b4:	601a      	str	r2, [r3, #0]

	return 0;
}
 80006b6:	2000      	movs	r0, #0
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	200058ac 	.word	0x200058ac
 80006c0:	003d0900 	.word	0x003d0900

080006c4 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
 80006c4:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
 80006c6:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
 80006c8:	a901      	add	r1, sp, #4
 80006ca:	4808      	ldr	r0, [pc, #32]	; (80006ec <z_log_msg_std_alloc+0x28>)
	union log_msg_chunk *msg = NULL;
 80006cc:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
 80006ce:	f003 f999 	bl	8003a04 <k_mem_slab_alloc>
	if (err != 0) {
 80006d2:	b110      	cbz	r0, 80006da <z_log_msg_std_alloc+0x16>
		msg = log_msg_no_space_handle();
 80006d4:	f000 fa44 	bl	8000b60 <log_msg_no_space_handle>
 80006d8:	9001      	str	r0, [sp, #4]
	return msg;
 80006da:	9801      	ldr	r0, [sp, #4]
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();

	if (msg != NULL) {
 80006dc:	b118      	cbz	r0, 80006e6 <z_log_msg_std_alloc+0x22>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
 80006de:	2301      	movs	r3, #1
 80006e0:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 80006e2:	2300      	movs	r3, #0
 80006e4:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
 80006e6:	b003      	add	sp, #12
 80006e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80006ec:	200000a8 	.word	0x200000a8

080006f0 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
 80006f0:	b530      	push	{r4, r5, lr}
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
 80006f2:	4d0c      	ldr	r5, [pc, #48]	; (8000724 <enable_logger+0x34>)
 80006f4:	490c      	ldr	r1, [pc, #48]	; (8000728 <enable_logger+0x38>)
 80006f6:	b087      	sub	sp, #28
 80006f8:	2400      	movs	r4, #0
 80006fa:	230e      	movs	r3, #14
 80006fc:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8000700:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <enable_logger+0x3c>)
 8000706:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800070a:	e9cd 4400 	strd	r4, r4, [sp]
 800070e:	4628      	mov	r0, r5
 8000710:	f003 fd9a 	bl	8004248 <z_impl_k_thread_create>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_CUSTOM_DATA_SET, k_thread_custom_data_set, void *, value)

K_SYSCALL_DECLARE0(K_SYSCALL_K_THREAD_CUSTOM_DATA_GET, k_thread_custom_data_get, void *)

K_SYSCALL_DECLARE2(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, int, k_tid_t, thread_id, const char *, value)
 8000714:	4906      	ldr	r1, [pc, #24]	; (8000730 <enable_logger+0x40>)
 8000716:	4628      	mov	r0, r5
 8000718:	f005 fbb6 	bl	8005e88 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
 800071c:	4620      	mov	r0, r4
 800071e:	b007      	add	sp, #28
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	bf00      	nop
 8000724:	20000038 	.word	0x20000038
 8000728:	200043b0 	.word	0x200043b0
 800072c:	08000ae1 	.word	0x08000ae1
 8000730:	08006636 	.word	0x08006636

08000734 <log_core_init>:
{
 8000734:	b508      	push	{r3, lr}
		log_msg_pool_init();
 8000736:	f000 fa09 	bl	8000b4c <log_msg_pool_init>
		log_list_init(&list);
 800073a:	4809      	ldr	r0, [pc, #36]	; (8000760 <log_core_init+0x2c>)
 800073c:	f004 f9ee 	bl	8004b1c <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
 8000740:	2304      	movs	r3, #4
 8000742:	2228      	movs	r2, #40	; 0x28
 8000744:	4807      	ldr	r0, [pc, #28]	; (8000764 <log_core_init+0x30>)
 8000746:	4908      	ldr	r1, [pc, #32]	; (8000768 <log_core_init+0x34>)
 8000748:	f005 faaa 	bl	8005ca0 <k_mem_slab_init>
	timestamp_func = timestamp_get;
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <log_core_init+0x38>)
 800074e:	4a08      	ldr	r2, [pc, #32]	; (8000770 <log_core_init+0x3c>)
 8000750:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
 8000752:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 8000756:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
 800075a:	f000 bc17 	b.w	8000f8c <log_output_timestamp_freq_set>
 800075e:	bf00      	nop
 8000760:	20000014 	.word	0x20000014
 8000764:	2000001c 	.word	0x2000001c
 8000768:	200053f0 	.word	0x200053f0
 800076c:	20005894 	.word	0x20005894
 8000770:	08004b49 	.word	0x08004b49

08000774 <dropped_notify>:
{
 8000774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <dropped_notify+0x40>)
 8000778:	f3bf 8f5b 	dmb	ish
 800077c:	2500      	movs	r5, #0
 800077e:	e853 7f00 	ldrex	r7, [r3]
 8000782:	e843 5200 	strex	r2, r5, [r3]
 8000786:	2a00      	cmp	r2, #0
 8000788:	d1f9      	bne.n	800077e <dropped_notify+0xa>
 800078a:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
 800078e:	4c0a      	ldr	r4, [pc, #40]	; (80007b8 <dropped_notify+0x44>)
 8000790:	4e0a      	ldr	r6, [pc, #40]	; (80007bc <dropped_notify+0x48>)
 8000792:	1b36      	subs	r6, r6, r4
 8000794:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 8000796:	42b5      	cmp	r5, r6
 8000798:	db00      	blt.n	800079c <dropped_notify+0x28>
}
 800079a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 800079c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 800079e:	795b      	ldrb	r3, [r3, #5]
 80007a0:	b12b      	cbz	r3, 80007ae <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
 80007a2:	6823      	ldr	r3, [r4, #0]
 80007a4:	68db      	ldr	r3, [r3, #12]
 80007a6:	b113      	cbz	r3, 80007ae <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
 80007a8:	4639      	mov	r1, r7
 80007aa:	4620      	mov	r0, r4
 80007ac:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 80007ae:	3501      	adds	r5, #1
 80007b0:	3410      	adds	r4, #16
 80007b2:	e7f0      	b.n	8000796 <dropped_notify+0x22>
 80007b4:	2000000c 	.word	0x2000000c
 80007b8:	08006378 	.word	0x08006378
 80007bc:	08006388 	.word	0x08006388

080007c0 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <log_dropped+0x1c>)
 80007c2:	f3bf 8f5b 	dmb	ish
 80007c6:	e853 2f00 	ldrex	r2, [r3]
 80007ca:	3201      	adds	r2, #1
 80007cc:	e843 2100 	strex	r1, r2, [r3]
 80007d0:	2900      	cmp	r1, #0
 80007d2:	d1f8      	bne.n	80007c6 <log_dropped+0x6>
 80007d4:	f3bf 8f5b 	dmb	ish
}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	2000000c 	.word	0x2000000c

080007e0 <log_source_name_get>:
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
 80007e0:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <log_source_name_get+0x14>)
 80007e2:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <log_source_name_get+0x18>)
 80007e4:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
 80007e6:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
 80007ea:	bf34      	ite	cc
 80007ec:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
 80007f0:	2000      	movcs	r0, #0
}
 80007f2:	4770      	bx	lr
 80007f4:	08006348 	.word	0x08006348
 80007f8:	08006378 	.word	0x08006378

080007fc <log_backend_enable>:
	id += backend - log_backend_get(0);
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <log_backend_enable+0x1c>)
	log_backend_id_set(backend, id);
 80007fe:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
 8000800:	1ac3      	subs	r3, r0, r3
 8000802:	111b      	asrs	r3, r3, #4
 8000804:	3301      	adds	r3, #1
	log_backend_id_set(backend, id);
 8000806:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
 8000808:	6842      	ldr	r2, [r0, #4]
	backend->cb->active = true;
 800080a:	2301      	movs	r3, #1
	backend->cb->ctx = ctx;
 800080c:	6011      	str	r1, [r2, #0]
	backend->cb->active = true;
 800080e:	7153      	strb	r3, [r2, #5]
	backend_attached = true;
 8000810:	4a02      	ldr	r2, [pc, #8]	; (800081c <log_backend_enable+0x20>)
 8000812:	7013      	strb	r3, [r2, #0]
}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	08006378 	.word	0x08006378
 800081c:	200043ac 	.word	0x200043ac

08000820 <log_init>:
{
 8000820:	b570      	push	{r4, r5, r6, lr}
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <log_init+0x48>)
 8000824:	f3bf 8f5b 	dmb	ish
 8000828:	e853 5f00 	ldrex	r5, [r3]
 800082c:	1c6a      	adds	r2, r5, #1
 800082e:	e843 2100 	strex	r1, r2, [r3]
 8000832:	2900      	cmp	r1, #0
 8000834:	d1f8      	bne.n	8000828 <log_init+0x8>
 8000836:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 800083a:	b92d      	cbnz	r5, 8000848 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
 800083c:	4c0b      	ldr	r4, [pc, #44]	; (800086c <log_init+0x4c>)
 800083e:	4e0c      	ldr	r6, [pc, #48]	; (8000870 <log_init+0x50>)
 8000840:	1b36      	subs	r6, r6, r4
 8000842:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
 8000844:	42b5      	cmp	r5, r6
 8000846:	db00      	blt.n	800084a <log_init+0x2a>
}
 8000848:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
 800084a:	7b23      	ldrb	r3, [r4, #12]
 800084c:	b143      	cbz	r3, 8000860 <log_init+0x40>
			if (backend->api->init != NULL) {
 800084e:	6823      	ldr	r3, [r4, #0]
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	b103      	cbz	r3, 8000856 <log_init+0x36>
				backend->api->init();
 8000854:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
 8000856:	2204      	movs	r2, #4
 8000858:	2100      	movs	r1, #0
 800085a:	4620      	mov	r0, r4
 800085c:	f7ff ffce 	bl	80007fc <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 8000860:	3501      	adds	r5, #1
 8000862:	3410      	adds	r4, #16
 8000864:	e7ee      	b.n	8000844 <log_init+0x24>
 8000866:	bf00      	nop
 8000868:	20000010 	.word	0x20000010
 800086c:	08006378 	.word	0x08006378
 8000870:	08006388 	.word	0x08006388

08000874 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
 8000874:	b148      	cbz	r0, 800088a <log_is_strdup+0x16>
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <log_is_strdup+0x18>)
 8000878:	4298      	cmp	r0, r3
 800087a:	d305      	bcc.n	8000888 <log_is_strdup+0x14>
 800087c:	33a0      	adds	r3, #160	; 0xa0
 800087e:	4298      	cmp	r0, r3
 8000880:	bf2c      	ite	cs
 8000882:	2000      	movcs	r0, #0
 8000884:	2001      	movcc	r0, #1
 8000886:	4770      	bx	lr
 8000888:	2000      	movs	r0, #0
}
 800088a:	4770      	bx	lr
 800088c:	200053f0 	.word	0x200053f0

08000890 <log_process>:
{
 8000890:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
 8000894:	4b53      	ldr	r3, [pc, #332]	; (80009e4 <log_process+0x154>)
 8000896:	781b      	ldrb	r3, [r3, #0]
{
 8000898:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
 800089a:	b903      	cbnz	r3, 800089e <log_process+0xe>
 800089c:	b360      	cbz	r0, 80008f8 <log_process+0x68>
	__asm__ volatile(
 800089e:	f04f 0310 	mov.w	r3, #16
 80008a2:	f3ef 8611 	mrs	r6, BASEPRI
 80008a6:	f383 8811 	msr	BASEPRI, r3
 80008aa:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
 80008ae:	484e      	ldr	r0, [pc, #312]	; (80009e8 <log_process+0x158>)
 80008b0:	f004 f944 	bl	8004b3c <log_list_head_get>
 80008b4:	4605      	mov	r5, r0
	__asm__ volatile(
 80008b6:	f386 8811 	msr	BASEPRI, r6
 80008ba:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
 80008be:	b178      	cbz	r0, 80008e0 <log_process+0x50>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 80008c0:	f3bf 8f5b 	dmb	ish
 80008c4:	4b49      	ldr	r3, [pc, #292]	; (80009ec <log_process+0x15c>)
 80008c6:	e853 2f00 	ldrex	r2, [r3]
 80008ca:	3a01      	subs	r2, #1
 80008cc:	e843 2100 	strex	r1, r2, [r3]
 80008d0:	2900      	cmp	r1, #0
 80008d2:	d1f8      	bne.n	80008c6 <log_process+0x36>
 80008d4:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
 80008d8:	b18c      	cbz	r4, 80008fe <log_process+0x6e>
	log_msg_put(msg);
 80008da:	4628      	mov	r0, r5
 80008dc:	f004 fa16 	bl	8004d0c <log_msg_put>
	if (!bypass && dropped_cnt) {
 80008e0:	b924      	cbnz	r4, 80008ec <log_process+0x5c>
 80008e2:	4b43      	ldr	r3, [pc, #268]	; (80009f0 <log_process+0x160>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	b10b      	cbz	r3, 80008ec <log_process+0x5c>
		dropped_notify();
 80008e8:	f7ff ff44 	bl	8000774 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
 80008ec:	483e      	ldr	r0, [pc, #248]	; (80009e8 <log_process+0x158>)
 80008ee:	f004 f923 	bl	8004b38 <log_list_head_peek>
 80008f2:	1c04      	adds	r4, r0, #0
 80008f4:	bf18      	it	ne
 80008f6:	2401      	movne	r4, #1
}
 80008f8:	4620      	mov	r0, r4
 80008fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
 80008fe:	4b3d      	ldr	r3, [pc, #244]	; (80009f4 <log_process+0x164>)
 8000900:	781b      	ldrb	r3, [r3, #0]
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
 8000902:	b9db      	cbnz	r3, 800093c <log_process+0xac>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8000904:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
 8000906:	07db      	lsls	r3, r3, #31
 8000908:	d418      	bmi.n	800093c <log_process+0xac>
	msg_str = log_msg_str_get(msg);
 800090a:	f004 fa12 	bl	8004d32 <log_msg_str_get>
 800090e:	4681      	mov	r9, r0
	mask = count_s(msg_str, log_msg_nargs_get(msg));
 8000910:	4628      	mov	r0, r5
 8000912:	f004 f9db 	bl	8004ccc <log_msg_nargs_get>
	u32_t mask = 0;
 8000916:	4626      	mov	r6, r4
	bool arm = false;
 8000918:	4622      	mov	r2, r4
	mask = count_s(msg_str, log_msg_nargs_get(msg));
 800091a:	46cc      	mov	ip, r9
	u32_t arg = 0;
 800091c:	4623      	mov	r3, r4
				mask |= BIT(arg);
 800091e:	f04f 0e01 	mov.w	lr, #1
	while ((curr = *str++) && arg < nargs) {
 8000922:	f81c 1b01 	ldrb.w	r1, [ip], #1
 8000926:	b109      	cbz	r1, 800092c <log_process+0x9c>
 8000928:	4298      	cmp	r0, r3
 800092a:	d80e      	bhi.n	800094a <log_process+0xba>
	return ((u8_t *)data - (u8_t *)__log_const_start)/
 800092c:	4b32      	ldr	r3, [pc, #200]	; (80009f8 <log_process+0x168>)
				LOG_ERR(ERR_MSG, idx, msg_str);
 800092e:	4a33      	ldr	r2, [pc, #204]	; (80009fc <log_process+0x16c>)
 8000930:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 8000a14 <log_process+0x184>
 8000934:	1a9b      	subs	r3, r3, r2
 8000936:	f3c3 0ac9 	ubfx	sl, r3, #3, #10
	while (mask) {
 800093a:	b9d6      	cbnz	r6, 8000972 <log_process+0xe2>
 800093c:	4e30      	ldr	r6, [pc, #192]	; (8000a00 <log_process+0x170>)
 800093e:	4f31      	ldr	r7, [pc, #196]	; (8000a04 <log_process+0x174>)
 8000940:	1bbf      	subs	r7, r7, r6
 8000942:	113f      	asrs	r7, r7, #4
 8000944:	f04f 0800 	mov.w	r8, #0
 8000948:	e048      	b.n	80009dc <log_process+0x14c>
		if (curr == '%') {
 800094a:	2925      	cmp	r1, #37	; 0x25
 800094c:	d102      	bne.n	8000954 <log_process+0xc4>
			arm = !arm;
 800094e:	f082 0201 	eor.w	r2, r2, #1
 8000952:	e7e6      	b.n	8000922 <log_process+0x92>
		} else if (arm && isalpha(curr)) {
 8000954:	2a00      	cmp	r2, #0
 8000956:	d0e4      	beq.n	8000922 <log_process+0x92>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
}

static inline int isalpha(int c)
{
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
 8000958:	f041 0720 	orr.w	r7, r1, #32
 800095c:	3f61      	subs	r7, #97	; 0x61
 800095e:	2f19      	cmp	r7, #25
 8000960:	d8df      	bhi.n	8000922 <log_process+0x92>
			if (curr == 's') {
 8000962:	2973      	cmp	r1, #115	; 0x73
				mask |= BIT(arg);
 8000964:	bf04      	itt	eq
 8000966:	fa0e f203 	lsleq.w	r2, lr, r3
 800096a:	4316      	orreq	r6, r2
			arg++;
 800096c:	3301      	adds	r3, #1
			arm = false;
 800096e:	2200      	movs	r2, #0
 8000970:	e7d7      	b.n	8000922 <log_process+0x92>
		idx = 31 - __builtin_clz(mask);
 8000972:	fab6 f786 	clz	r7, r6
 8000976:	f1c7 071f 	rsb	r7, r7, #31
		str = (const char *)log_msg_arg_get(msg, idx);
 800097a:	4639      	mov	r1, r7
 800097c:	4628      	mov	r0, r5
 800097e:	f004 f9a8 	bl	8004cd2 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
 8000982:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <log_process+0x178>)
 8000984:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
 8000986:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
 8000988:	d302      	bcc.n	8000990 <log_process+0x100>
		if (!is_rodata(str) && !log_is_strdup(str) &&
 800098a:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <log_process+0x17c>)
 800098c:	4298      	cmp	r0, r3
 800098e:	d314      	bcc.n	80009ba <log_process+0x12a>
 8000990:	4610      	mov	r0, r2
 8000992:	f7ff ff6f 	bl	8000874 <log_is_strdup>
 8000996:	b980      	cbnz	r0, 80009ba <log_process+0x12a>
 8000998:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <log_process+0x180>)
 800099a:	429a      	cmp	r2, r3
 800099c:	d00d      	beq.n	80009ba <log_process+0x12a>
				LOG_ERR(ERR_MSG, idx, msg_str);
 800099e:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	f363 0807 	bfi	r8, r3, #0, #8
 80009aa:	f36a 188f 	bfi	r8, sl, #6, #10
 80009ae:	4643      	mov	r3, r8
 80009b0:	464a      	mov	r2, r9
 80009b2:	4639      	mov	r1, r7
 80009b4:	4658      	mov	r0, fp
 80009b6:	f004 f8ec 	bl	8004b92 <log_2>
		mask &= ~BIT(idx);
 80009ba:	2301      	movs	r3, #1
 80009bc:	fa03 f707 	lsl.w	r7, r3, r7
 80009c0:	ea26 0607 	bic.w	r6, r6, r7
 80009c4:	e7b9      	b.n	800093a <log_process+0xaa>
	return backend->cb->active;
 80009c6:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
 80009c8:	795b      	ldrb	r3, [r3, #5]
 80009ca:	b123      	cbz	r3, 80009d6 <log_process+0x146>
	backend->api->put(backend, msg);
 80009cc:	6833      	ldr	r3, [r6, #0]
 80009ce:	4629      	mov	r1, r5
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4630      	mov	r0, r6
 80009d4:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
 80009d6:	f108 0801 	add.w	r8, r8, #1
 80009da:	3610      	adds	r6, #16
 80009dc:	45b8      	cmp	r8, r7
 80009de:	dbf2      	blt.n	80009c6 <log_process+0x136>
 80009e0:	e77b      	b.n	80008da <log_process+0x4a>
 80009e2:	bf00      	nop
 80009e4:	200043ac 	.word	0x200043ac
 80009e8:	20000014 	.word	0x20000014
 80009ec:	20000008 	.word	0x20000008
 80009f0:	2000000c 	.word	0x2000000c
 80009f4:	200043ad 	.word	0x200043ad
 80009f8:	08006350 	.word	0x08006350
 80009fc:	08006348 	.word	0x08006348
 8000a00:	08006378 	.word	0x08006378
 8000a04:	08006388 	.word	0x08006388
 8000a08:	08005fb0 	.word	0x08005fb0
 8000a0c:	08006fc4 	.word	0x08006fc4
 8000a10:	08006674 	.word	0x08006674
 8000a14:	0800663e 	.word	0x0800663e

08000a18 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
 8000a18:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <msg_finalize+0x6c>)
{
 8000a1a:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
 8000a1c:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
 8000a1e:	8141      	strh	r1, [r0, #10]
{
 8000a20:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
 8000a22:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8000a24:	4c18      	ldr	r4, [pc, #96]	; (8000a88 <msg_finalize+0x70>)
 8000a26:	60e8      	str	r0, [r5, #12]
 8000a28:	f3bf 8f5b 	dmb	ish
 8000a2c:	e854 3f00 	ldrex	r3, [r4]
 8000a30:	3301      	adds	r3, #1
 8000a32:	e844 3200 	strex	r2, r3, [r4]
 8000a36:	2a00      	cmp	r2, #0
 8000a38:	d1f8      	bne.n	8000a2c <msg_finalize+0x14>
 8000a3a:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
 8000a3e:	f04f 0310 	mov.w	r3, #16
 8000a42:	f3ef 8611 	mrs	r6, BASEPRI
 8000a46:	f383 8811 	msr	BASEPRI, r3
 8000a4a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 8000a4e:	480f      	ldr	r0, [pc, #60]	; (8000a8c <msg_finalize+0x74>)
 8000a50:	4629      	mov	r1, r5
 8000a52:	f004 f867 	bl	8004b24 <log_list_add_tail>
	__asm__ volatile(
 8000a56:	f386 8811 	msr	BASEPRI, r6
 8000a5a:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <msg_finalize+0x78>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	b123      	cbz	r3, 8000a6e <msg_finalize+0x56>
		(void)log_process(false);
 8000a64:	2000      	movs	r0, #0
}
 8000a66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		(void)log_process(false);
 8000a6a:	f7ff bf11 	b.w	8000890 <log_process>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 8000a6e:	6823      	ldr	r3, [r4, #0]
 8000a70:	2b0a      	cmp	r3, #10
 8000a72:	d106      	bne.n	8000a82 <msg_finalize+0x6a>
		    (proc_tid != NULL)) {
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <msg_finalize+0x7c>)
 8000a76:	6818      	ldr	r0, [r3, #0]
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 8000a78:	b118      	cbz	r0, 8000a82 <msg_finalize+0x6a>
}
 8000a7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)
 8000a7e:	f003 bb03 	b.w	8004088 <z_impl_k_wakeup>
 8000a82:	bd70      	pop	{r4, r5, r6, pc}
 8000a84:	20005894 	.word	0x20005894
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	20000014 	.word	0x20000014
 8000a90:	200043ad 	.word	0x200043ad
 8000a94:	200000a4 	.word	0x200000a4

08000a98 <log_panic>:
{
 8000a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
 8000a9a:	4f0e      	ldr	r7, [pc, #56]	; (8000ad4 <log_panic+0x3c>)
 8000a9c:	783d      	ldrb	r5, [r7, #0]
 8000a9e:	b975      	cbnz	r5, 8000abe <log_panic+0x26>
	return __log_backends_end - __log_backends_start;
 8000aa0:	4c0d      	ldr	r4, [pc, #52]	; (8000ad8 <log_panic+0x40>)
 8000aa2:	4e0e      	ldr	r6, [pc, #56]	; (8000adc <log_panic+0x44>)
	log_init();
 8000aa4:	f7ff febc 	bl	8000820 <log_init>
 8000aa8:	1b36      	subs	r6, r6, r4
 8000aaa:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 8000aac:	42b5      	cmp	r5, r6
 8000aae:	db07      	blt.n	8000ac0 <log_panic+0x28>
		while (log_process(false) == true) {
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f7ff feed 	bl	8000890 <log_process>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	d1fa      	bne.n	8000ab0 <log_panic+0x18>
	panic_mode = true;
 8000aba:	2301      	movs	r3, #1
 8000abc:	703b      	strb	r3, [r7, #0]
}
 8000abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
 8000ac0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 8000ac2:	795b      	ldrb	r3, [r3, #5]
 8000ac4:	b11b      	cbz	r3, 8000ace <log_panic+0x36>
	backend->api->panic(backend);
 8000ac6:	6823      	ldr	r3, [r4, #0]
 8000ac8:	4620      	mov	r0, r4
 8000aca:	691b      	ldr	r3, [r3, #16]
 8000acc:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 8000ace:	3501      	adds	r5, #1
 8000ad0:	3410      	adds	r4, #16
 8000ad2:	e7eb      	b.n	8000aac <log_panic+0x14>
 8000ad4:	200043ad 	.word	0x200043ad
 8000ad8:	08006378 	.word	0x08006378
 8000adc:	08006388 	.word	0x08006388

08000ae0 <log_process_thread_func>:
{
 8000ae0:	b508      	push	{r3, lr}
	log_init();
 8000ae2:	f7ff fe9d 	bl	8000820 <log_init>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
 8000ae6:	f003 faf5 	bl	80040d4 <z_impl_k_current_get>
	proc_tid = process_tid;
 8000aea:	4a09      	ldr	r2, [pc, #36]	; (8000b10 <log_process_thread_func+0x30>)
 8000aec:	6010      	str	r0, [r2, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8000aee:	b128      	cbz	r0, 8000afc <log_process_thread_func+0x1c>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <log_process_thread_func+0x34>)
	    process_tid &&
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b09      	cmp	r3, #9
 8000af6:	dd01      	ble.n	8000afc <log_process_thread_func+0x1c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)
 8000af8:	f003 fac6 	bl	8004088 <z_impl_k_wakeup>
		if (log_process(false) == false) {
 8000afc:	2000      	movs	r0, #0
 8000afe:	f7ff fec7 	bl	8000890 <log_process>
 8000b02:	2800      	cmp	r0, #0
 8000b04:	d1fa      	bne.n	8000afc <log_process_thread_func+0x1c>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, ms)
 8000b06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b0a:	f005 f99e 	bl	8005e4a <z_impl_k_sleep>
 8000b0e:	e7f5      	b.n	8000afc <log_process_thread_func+0x1c>
 8000b10:	200000a4 	.word	0x200000a4
 8000b14:	20000008 	.word	0x20000008

08000b18 <log_free>:
{
 8000b18:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
 8000b1a:	3804      	subs	r0, #4
 8000b1c:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8000b1e:	f3bf 8f5b 	dmb	ish
 8000b22:	e850 3f00 	ldrex	r3, [r0]
 8000b26:	1e5a      	subs	r2, r3, #1
 8000b28:	e840 2100 	strex	r1, r2, [r0]
 8000b2c:	2900      	cmp	r1, #0
 8000b2e:	d1f8      	bne.n	8000b22 <log_free+0xa>
 8000b30:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d103      	bne.n	8000b40 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
 8000b38:	a901      	add	r1, sp, #4
 8000b3a:	4803      	ldr	r0, [pc, #12]	; (8000b48 <log_free+0x30>)
 8000b3c:	f002 ff8e 	bl	8003a5c <k_mem_slab_free>
}
 8000b40:	b003      	add	sp, #12
 8000b42:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b46:	bf00      	nop
 8000b48:	2000001c 	.word	0x2000001c

08000b4c <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
 8000b4c:	2320      	movs	r3, #32
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4901      	ldr	r1, [pc, #4]	; (8000b58 <log_msg_pool_init+0xc>)
 8000b52:	4802      	ldr	r0, [pc, #8]	; (8000b5c <log_msg_pool_init+0x10>)
 8000b54:	f005 b8a4 	b.w	8005ca0 <k_mem_slab_init>
 8000b58:	20005490 	.word	0x20005490
 8000b5c:	200000a8 	.word	0x200000a8

08000b60 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
 8000b60:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
 8000b62:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
 8000b64:	4d09      	ldr	r5, [pc, #36]	; (8000b8c <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
 8000b66:	9301      	str	r3, [sp, #4]
			more = log_process(true);
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f7ff fe91 	bl	8000890 <log_process>
 8000b6e:	4604      	mov	r4, r0
			log_dropped();
 8000b70:	f7ff fe26 	bl	80007c0 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
 8000b74:	2200      	movs	r2, #0
 8000b76:	a901      	add	r1, sp, #4
 8000b78:	4628      	mov	r0, r5
 8000b7a:	f002 ff43 	bl	8003a04 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
 8000b7e:	b108      	cbz	r0, 8000b84 <log_msg_no_space_handle+0x24>
 8000b80:	2c00      	cmp	r4, #0
 8000b82:	d1f1      	bne.n	8000b68 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
 8000b84:	9801      	ldr	r0, [sp, #4]
 8000b86:	b003      	add	sp, #12
 8000b88:	bd30      	pop	{r4, r5, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200000a8 	.word	0x200000a8

08000b90 <log_msg_chunk_alloc>:
{
 8000b90:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
 8000b92:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
 8000b94:	a901      	add	r1, sp, #4
 8000b96:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <log_msg_chunk_alloc+0x20>)
	union log_msg_chunk *msg = NULL;
 8000b98:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
 8000b9a:	f002 ff33 	bl	8003a04 <k_mem_slab_alloc>
	if (err != 0) {
 8000b9e:	b110      	cbz	r0, 8000ba6 <log_msg_chunk_alloc+0x16>
		msg = log_msg_no_space_handle();
 8000ba0:	f7ff ffde 	bl	8000b60 <log_msg_no_space_handle>
 8000ba4:	9001      	str	r0, [sp, #4]
}
 8000ba6:	9801      	ldr	r0, [sp, #4]
 8000ba8:	b003      	add	sp, #12
 8000baa:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bae:	bf00      	nop
 8000bb0:	200000a8 	.word	0x200000a8

08000bb4 <msg_free>:
{
 8000bb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8000bb6:	7a04      	ldrb	r4, [r0, #8]
	u32_t nargs = msg->hdr.params.std.nargs;
 8000bb8:	7a45      	ldrb	r5, [r0, #9]
{
 8000bba:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
 8000bbc:	f014 0401 	ands.w	r4, r4, #1
	u32_t nargs = msg->hdr.params.std.nargs;
 8000bc0:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
 8000bc4:	d00e      	beq.n	8000be4 <msg_free+0x30>
	if (msg->hdr.params.generic.ext == 1) {
 8000bc6:	9b01      	ldr	r3, [sp, #4]
 8000bc8:	7a1a      	ldrb	r2, [r3, #8]
 8000bca:	0792      	lsls	r2, r2, #30
 8000bcc:	d504      	bpl.n	8000bd8 <msg_free+0x24>
		cont_free(msg->payload.ext.next);
 8000bce:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
 8000bd0:	4c10      	ldr	r4, [pc, #64]	; (8000c14 <msg_free+0x60>)
 8000bd2:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
 8000bd4:	9b03      	ldr	r3, [sp, #12]
 8000bd6:	b9b3      	cbnz	r3, 8000c06 <msg_free+0x52>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
 8000bd8:	a901      	add	r1, sp, #4
 8000bda:	480e      	ldr	r0, [pc, #56]	; (8000c14 <msg_free+0x60>)
 8000bdc:	f002 ff3e 	bl	8003a5c <k_mem_slab_free>
}
 8000be0:	b004      	add	sp, #16
 8000be2:	bd70      	pop	{r4, r5, r6, pc}
	if (log_msg_is_std(msg) && nargs) {
 8000be4:	2d00      	cmp	r5, #0
 8000be6:	d0ee      	beq.n	8000bc6 <msg_free+0x12>
		for (i = 0; i < nargs; i++) {
 8000be8:	42a5      	cmp	r5, r4
 8000bea:	9801      	ldr	r0, [sp, #4]
 8000bec:	d9eb      	bls.n	8000bc6 <msg_free+0x12>
			void *buf = (void *)log_msg_arg_get(msg, i);
 8000bee:	4621      	mov	r1, r4
 8000bf0:	f004 f86f 	bl	8004cd2 <log_msg_arg_get>
 8000bf4:	4606      	mov	r6, r0
			if (log_is_strdup(buf)) {
 8000bf6:	f7ff fe3d 	bl	8000874 <log_is_strdup>
 8000bfa:	b110      	cbz	r0, 8000c02 <msg_free+0x4e>
				log_free(buf);
 8000bfc:	4630      	mov	r0, r6
 8000bfe:	f7ff ff8b 	bl	8000b18 <log_free>
		for (i = 0; i < nargs; i++) {
 8000c02:	3401      	adds	r4, #1
 8000c04:	e7f0      	b.n	8000be8 <msg_free+0x34>
		next = cont->next;
 8000c06:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
 8000c08:	a903      	add	r1, sp, #12
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	f002 ff26 	bl	8003a5c <k_mem_slab_free>
		cont = next;
 8000c10:	9503      	str	r5, [sp, #12]
 8000c12:	e7df      	b.n	8000bd4 <msg_free+0x20>
 8000c14:	200000a8 	.word	0x200000a8

08000c18 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
 8000c18:	b40e      	push	{r1, r2, r3}
 8000c1a:	b503      	push	{r0, r1, lr}
 8000c1c:	ab03      	add	r3, sp, #12
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
 8000c1e:	4601      	mov	r1, r0
{
 8000c20:	f853 2b04 	ldr.w	r2, [r3], #4
	z_vprintk(out_func, (void *)log_output, fmt, args);
 8000c24:	4804      	ldr	r0, [pc, #16]	; (8000c38 <print_formatted+0x20>)
	va_start(args, fmt);
 8000c26:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
 8000c28:	f003 fdfa 	bl	8004820 <z_vprintk>
#endif
	va_end(args);

	return length;
}
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	b002      	add	sp, #8
 8000c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8000c34:	b003      	add	sp, #12
 8000c36:	4770      	bx	lr
 8000c38:	080050db 	.word	0x080050db

08000c3c <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
 8000c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c40:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
 8000c42:	f011 0402 	ands.w	r4, r1, #2
{
 8000c46:	4606      	mov	r6, r0
 8000c48:	4690      	mov	r8, r2
 8000c4a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 8000c4e:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 8000c52:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
 8000c56:	d007      	beq.n	8000c68 <prefix_print+0x2c>
	if (!format) {
 8000c58:	f011 0f44 	tst.w	r1, #68	; 0x44
 8000c5c:	d137      	bne.n	8000cce <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
 8000c5e:	461a      	mov	r2, r3
 8000c60:	4932      	ldr	r1, [pc, #200]	; (8000d2c <prefix_print+0xf0>)
 8000c62:	f7ff ffd9 	bl	8000c18 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
 8000c66:	4604      	mov	r4, r0
	if (color) {
 8000c68:	f1b9 0f00 	cmp.w	r9, #0
 8000c6c:	d00a      	beq.n	8000c84 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
 8000c6e:	4b30      	ldr	r3, [pc, #192]	; (8000d30 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
 8000c70:	4930      	ldr	r1, [pc, #192]	; (8000d34 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
 8000c72:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
 8000c76:	4b30      	ldr	r3, [pc, #192]	; (8000d38 <prefix_print+0xfc>)
 8000c78:	4630      	mov	r0, r6
 8000c7a:	2a00      	cmp	r2, #0
 8000c7c:	bf08      	it	eq
 8000c7e:	461a      	moveq	r2, r3
 8000c80:	f7ff ffca 	bl	8000c18 <print_formatted>
	if (level_on) {
 8000c84:	b13d      	cbz	r5, 8000c96 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
 8000c86:	4b2d      	ldr	r3, [pc, #180]	; (8000d3c <prefix_print+0x100>)
 8000c88:	492d      	ldr	r1, [pc, #180]	; (8000d40 <prefix_print+0x104>)
 8000c8a:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
 8000c8e:	4630      	mov	r0, r6
 8000c90:	f7ff ffc2 	bl	8000c18 <print_formatted>
 8000c94:	4605      	mov	r5, r0
	total += print_formatted(log_output,
 8000c96:	f1b8 0f00 	cmp.w	r8, #0
 8000c9a:	d044      	beq.n	8000d26 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
 8000ca2:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <prefix_print+0x108>)
 8000ca4:	f017 0f10 	tst.w	r7, #16
 8000ca8:	4f27      	ldr	r7, [pc, #156]	; (8000d48 <prefix_print+0x10c>)
 8000caa:	bf18      	it	ne
 8000cac:	461f      	movne	r7, r3
 8000cae:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8000cb2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8000cb6:	f7ff fd93 	bl	80007e0 <log_source_name_get>
 8000cba:	4639      	mov	r1, r7
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	4630      	mov	r0, r6
 8000cc0:	f7ff ffaa 	bl	8000c18 <print_formatted>
 8000cc4:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
 8000cc6:	4420      	add	r0, r4
 8000cc8:	b005      	add	sp, #20
 8000cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
 8000cce:	4a1f      	ldr	r2, [pc, #124]	; (8000d4c <prefix_print+0x110>)
 8000cd0:	6811      	ldr	r1, [r2, #0]
 8000cd2:	b331      	cbz	r1, 8000d22 <prefix_print+0xe6>
		timestamp /= timestamp_div;
 8000cd4:	4a1e      	ldr	r2, [pc, #120]	; (8000d50 <prefix_print+0x114>)
 8000cd6:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
 8000cda:	6814      	ldr	r4, [r2, #0]
 8000cdc:	fbb3 f3f4 	udiv	r3, r3, r4
		ms = (remainder * 1000U) / freq;
 8000ce0:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		seconds = timestamp / freq;
 8000ce4:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
 8000ce8:	fbb4 f2fe 	udiv	r2, r4, lr
 8000cec:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
 8000cf0:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
 8000cf4:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
 8000cf8:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8000cfc:	fbb4 fbf1 	udiv	fp, r4, r1
 8000d00:	fb01 441b 	mls	r4, r1, fp, r4
		mins = seconds / 60U;
 8000d04:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8000d08:	fb0c f404 	mul.w	r4, ip, r4
 8000d0c:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
 8000d10:	e9cd b101 	strd	fp, r1, [sp, #4]
 8000d14:	fb0a e113 	mls	r1, sl, r3, lr
 8000d18:	9100      	str	r1, [sp, #0]
 8000d1a:	490e      	ldr	r1, [pc, #56]	; (8000d54 <prefix_print+0x118>)
 8000d1c:	f7ff ff7c 	bl	8000c18 <print_formatted>
 8000d20:	e7a1      	b.n	8000c66 <prefix_print+0x2a>
		length = 0;
 8000d22:	4608      	mov	r0, r1
 8000d24:	e79f      	b.n	8000c66 <prefix_print+0x2a>
	total += print_formatted(log_output,
 8000d26:	4f08      	ldr	r7, [pc, #32]	; (8000d48 <prefix_print+0x10c>)
 8000d28:	e7c1      	b.n	8000cae <prefix_print+0x72>
 8000d2a:	bf00      	nop
 8000d2c:	080066dc 	.word	0x080066dc
 8000d30:	080063dc 	.word	0x080063dc
 8000d34:	08006701 	.word	0x08006701
 8000d38:	080066ce 	.word	0x080066ce
 8000d3c:	080063f0 	.word	0x080063f0
 8000d40:	08006704 	.word	0x08006704
 8000d44:	080066d8 	.word	0x080066d8
 8000d48:	080066d3 	.word	0x080066d3
 8000d4c:	200000c4 	.word	0x200000c4
 8000d50:	200000c8 	.word	0x200000c8
 8000d54:	080066e5 	.word	0x080066e5

08000d58 <hexdump_line_print>:
{
 8000d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d5c:	4698      	mov	r8, r3
 8000d5e:	9b08      	ldr	r3, [sp, #32]
 8000d60:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8000d62:	06da      	lsls	r2, r3, #27
{
 8000d64:	4604      	mov	r4, r0
 8000d66:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8000d68:	d405      	bmi.n	8000d76 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 8000d6a:	069b      	lsls	r3, r3, #26
		print_formatted(ctx, "\n");
 8000d6c:	bf4c      	ite	mi
 8000d6e:	4921      	ldrmi	r1, [pc, #132]	; (8000df4 <hexdump_line_print+0x9c>)
		print_formatted(ctx, "\r\n");
 8000d70:	4921      	ldrpl	r1, [pc, #132]	; (8000df8 <hexdump_line_print+0xa0>)
 8000d72:	f7ff ff51 	bl	8000c18 <print_formatted>
		print_formatted(log_output, " ");
 8000d76:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8000e00 <hexdump_line_print+0xa8>
{
 8000d7a:	2500      	movs	r5, #0
	for (int i = 0; i < prefix_offset; i++) {
 8000d7c:	4545      	cmp	r5, r8
 8000d7e:	db28      	blt.n	8000dd2 <hexdump_line_print+0x7a>
			print_formatted(log_output, "   ");
 8000d80:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8000e04 <hexdump_line_print+0xac>
			print_formatted(log_output, "%02x ", data[i]);
 8000d84:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8000e08 <hexdump_line_print+0xb0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8000d88:	2500      	movs	r5, #0
		if (i < length) {
 8000d8a:	42af      	cmp	r7, r5
 8000d8c:	d927      	bls.n	8000dde <hexdump_line_print+0x86>
			print_formatted(log_output, "%02x ", data[i]);
 8000d8e:	5d72      	ldrb	r2, [r6, r5]
 8000d90:	4649      	mov	r1, r9
 8000d92:	4620      	mov	r0, r4
 8000d94:	f7ff ff40 	bl	8000c18 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8000d98:	3501      	adds	r5, #1
 8000d9a:	2d08      	cmp	r5, #8
 8000d9c:	d1f5      	bne.n	8000d8a <hexdump_line_print+0x32>
	print_formatted(log_output, "|");
 8000d9e:	4917      	ldr	r1, [pc, #92]	; (8000dfc <hexdump_line_print+0xa4>)
			print_formatted(log_output, " ");
 8000da0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8000e00 <hexdump_line_print+0xa8>
			print_formatted(log_output, "%c",
 8000da4:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8000e0c <hexdump_line_print+0xb4>
	print_formatted(log_output, "|");
 8000da8:	4620      	mov	r0, r4
 8000daa:	f7ff ff35 	bl	8000c18 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8000dae:	2500      	movs	r5, #0
		if (i < length) {
 8000db0:	42af      	cmp	r7, r5
 8000db2:	d919      	bls.n	8000de8 <hexdump_line_print+0x90>
			      isprint((int)c) ? c : '.');
 8000db4:	5d72      	ldrb	r2, [r6, r5]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
 8000db6:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(log_output, "%c",
 8000dba:	2b5f      	cmp	r3, #95	; 0x5f
 8000dbc:	bf28      	it	cs
 8000dbe:	222e      	movcs	r2, #46	; 0x2e
 8000dc0:	4649      	mov	r1, r9
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	f7ff ff28 	bl	8000c18 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8000dc8:	3501      	adds	r5, #1
 8000dca:	2d08      	cmp	r5, #8
 8000dcc:	d1f0      	bne.n	8000db0 <hexdump_line_print+0x58>
}
 8000dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		print_formatted(log_output, " ");
 8000dd2:	4649      	mov	r1, r9
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f7ff ff1f 	bl	8000c18 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 8000dda:	3501      	adds	r5, #1
 8000ddc:	e7ce      	b.n	8000d7c <hexdump_line_print+0x24>
			print_formatted(log_output, "   ");
 8000dde:	4641      	mov	r1, r8
 8000de0:	4620      	mov	r0, r4
 8000de2:	f7ff ff19 	bl	8000c18 <print_formatted>
 8000de6:	e7d7      	b.n	8000d98 <hexdump_line_print+0x40>
			print_formatted(log_output, " ");
 8000de8:	4641      	mov	r1, r8
 8000dea:	4620      	mov	r0, r4
 8000dec:	f7ff ff14 	bl	8000c18 <print_formatted>
 8000df0:	e7ea      	b.n	8000dc8 <hexdump_line_print+0x70>
 8000df2:	bf00      	nop
 8000df4:	08006693 	.word	0x08006693
 8000df8:	08006692 	.word	0x08006692
 8000dfc:	0800669f 	.word	0x0800669f
 8000e00:	0800669d 	.word	0x0800669d
 8000e04:	0800669b 	.word	0x0800669b
 8000e08:	08006695 	.word	0x08006695
 8000e0c:	080066a1 	.word	0x080066a1

08000e10 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
 8000e10:	b538      	push	{r3, r4, r5, lr}
 8000e12:	460c      	mov	r4, r1
	if (color) {
 8000e14:	07e1      	lsls	r1, r4, #31
{
 8000e16:	4605      	mov	r5, r0
	if (color) {
 8000e18:	d503      	bpl.n	8000e22 <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
 8000e1a:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <postfix_print+0x2c>)
 8000e1c:	4908      	ldr	r1, [pc, #32]	; (8000e40 <postfix_print+0x30>)
 8000e1e:	f7ff fefb 	bl	8000c18 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8000e22:	06e2      	lsls	r2, r4, #27
 8000e24:	d408      	bmi.n	8000e38 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 8000e26:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
 8000e28:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
 8000e2a:	bf4c      	ite	mi
 8000e2c:	4905      	ldrmi	r1, [pc, #20]	; (8000e44 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
 8000e2e:	4906      	ldrpl	r1, [pc, #24]	; (8000e48 <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
 8000e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
 8000e34:	f7ff bef0 	b.w	8000c18 <print_formatted>
}
 8000e38:	bd38      	pop	{r3, r4, r5, pc}
 8000e3a:	bf00      	nop
 8000e3c:	080066ce 	.word	0x080066ce
 8000e40:	08006701 	.word	0x08006701
 8000e44:	08006693 	.word	0x08006693
 8000e48:	08006692 	.word	0x08006692

08000e4c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
 8000e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
 8000e50:	7a8b      	ldrb	r3, [r1, #10]
	u16_t source_id = (u16_t)log_msg_source_id_get(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	int prefix_offset;

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
 8000e52:	f013 0407 	ands.w	r4, r3, #7
{
 8000e56:	4617      	mov	r7, r2
 8000e58:	b088      	sub	sp, #32
 8000e5a:	4605      	mov	r5, r0
 8000e5c:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8000e5e:	7a0a      	ldrb	r2, [r1, #8]
			0 : prefix_print(log_output, flags, std_msg, timestamp,
 8000e60:	d01c      	beq.n	8000e9c <log_output_msg_process+0x50>
	return msg->hdr.ids.source_id;
 8000e62:	8949      	ldrh	r1, [r1, #10]
 8000e64:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8000e68:	0989      	lsrs	r1, r1, #6
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8000e6a:	43d2      	mvns	r2, r2
 8000e6c:	9102      	str	r1, [sp, #8]
 8000e6e:	e9cd 4300 	strd	r4, r3, [sp]
 8000e72:	f002 0201 	and.w	r2, r2, #1
 8000e76:	68f3      	ldr	r3, [r6, #12]
 8000e78:	4639      	mov	r1, r7
 8000e7a:	f7ff fedf 	bl	8000c3c <prefix_print>
 8000e7e:	4681      	mov	r9, r0
 8000e80:	7a33      	ldrb	r3, [r6, #8]
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
 8000e82:	07da      	lsls	r2, r3, #31
 8000e84:	d40c      	bmi.n	8000ea0 <log_output_msg_process+0x54>
		std_print(msg, log_output);
 8000e86:	4629      	mov	r1, r5
 8000e88:	4630      	mov	r0, r6
 8000e8a:	f003 ffbc 	bl	8004e06 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
 8000e8e:	b34c      	cbz	r4, 8000ee4 <log_output_msg_process+0x98>
		postfix_print(log_output, flags, level);
 8000e90:	4622      	mov	r2, r4
 8000e92:	4639      	mov	r1, r7
 8000e94:	4628      	mov	r0, r5
 8000e96:	f7ff ffbb 	bl	8000e10 <postfix_print>
 8000e9a:	e023      	b.n	8000ee4 <log_output_msg_process+0x98>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
 8000e9c:	46a1      	mov	r9, r4
 8000e9e:	e7ef      	b.n	8000e80 <log_output_msg_process+0x34>
	} else if (raw_string) {
 8000ea0:	bb34      	cbnz	r4, 8000ef0 <log_output_msg_process+0xa4>
	size_t offset = 0;
 8000ea2:	4627      	mov	r7, r4
		length = log_output->size;
 8000ea4:	68eb      	ldr	r3, [r5, #12]
 8000ea6:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
 8000ea8:	aa06      	add	r2, sp, #24
 8000eaa:	463b      	mov	r3, r7
 8000eac:	68a9      	ldr	r1, [r5, #8]
 8000eae:	4630      	mov	r0, r6
 8000eb0:	f003 ff95 	bl	8004dde <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
 8000eb4:	9a06      	ldr	r2, [sp, #24]
 8000eb6:	686b      	ldr	r3, [r5, #4]
 8000eb8:	601a      	str	r2, [r3, #0]
		if (length != 0) {
 8000eba:	b13a      	cbz	r2, 8000ecc <log_output_msg_process+0x80>
			eol = (log_output->buf[length - 1] == '\n');
 8000ebc:	68ab      	ldr	r3, [r5, #8]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	f813 4c01 	ldrb.w	r4, [r3, #-1]
 8000ec4:	f1a4 030a 	sub.w	r3, r4, #10
 8000ec8:	425c      	negs	r4, r3
 8000eca:	415c      	adcs	r4, r3
		log_output_flush(log_output);
 8000ecc:	4628      	mov	r0, r5
 8000ece:	f004 f8f7 	bl	80050c0 <log_output_flush>
		offset += length;
 8000ed2:	9b06      	ldr	r3, [sp, #24]
 8000ed4:	441f      	add	r7, r3
	} while (length > 0);
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d1e4      	bne.n	8000ea4 <log_output_msg_process+0x58>
	if (eol) {
 8000eda:	b11c      	cbz	r4, 8000ee4 <log_output_msg_process+0x98>
		print_formatted(log_output, "\r");
 8000edc:	4914      	ldr	r1, [pc, #80]	; (8000f30 <log_output_msg_process+0xe4>)
 8000ede:	4628      	mov	r0, r5
 8000ee0:	f7ff fe9a 	bl	8000c18 <print_formatted>
	}

	log_output_flush(log_output);
 8000ee4:	4628      	mov	r0, r5
 8000ee6:	f004 f8eb 	bl	80050c0 <log_output_flush>
}
 8000eea:	b008      	add	sp, #32
 8000eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	f003 ff1e 	bl	8004d32 <log_msg_str_get>
 8000ef6:	490f      	ldr	r1, [pc, #60]	; (8000f34 <log_output_msg_process+0xe8>)
 8000ef8:	4602      	mov	r2, r0
 8000efa:	4628      	mov	r0, r5
 8000efc:	f7ff fe8c 	bl	8000c18 <print_formatted>
	u32_t offset = 0U;
 8000f00:	f04f 0800 	mov.w	r8, #0
		length = sizeof(buf);
 8000f04:	f04f 0a08 	mov.w	sl, #8
		log_msg_hexdump_data_get(msg, buf, &length, offset);
 8000f08:	aa05      	add	r2, sp, #20
 8000f0a:	4643      	mov	r3, r8
 8000f0c:	a906      	add	r1, sp, #24
 8000f0e:	4630      	mov	r0, r6
		length = sizeof(buf);
 8000f10:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
 8000f14:	f003 ff63 	bl	8004dde <log_msg_hexdump_data_get>
		if (length) {
 8000f18:	9a05      	ldr	r2, [sp, #20]
 8000f1a:	2a00      	cmp	r2, #0
 8000f1c:	d0b8      	beq.n	8000e90 <log_output_msg_process+0x44>
			hexdump_line_print(log_output, buf, length,
 8000f1e:	464b      	mov	r3, r9
 8000f20:	9700      	str	r7, [sp, #0]
 8000f22:	a906      	add	r1, sp, #24
 8000f24:	4628      	mov	r0, r5
 8000f26:	f7ff ff17 	bl	8000d58 <hexdump_line_print>
			offset += length;
 8000f2a:	9b05      	ldr	r3, [sp, #20]
 8000f2c:	4498      	add	r8, r3
 8000f2e:	e7eb      	b.n	8000f08 <log_output_msg_process+0xbc>
 8000f30:	080066a4 	.word	0x080066a4
 8000f34:	08006701 	.word	0x08006701

08000f38 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
 8000f38:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
 8000f3a:	e9d0 4300 	ldrd	r4, r3, [r0]
 8000f3e:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
 8000f40:	4a0f      	ldr	r2, [pc, #60]	; (8000f80 <log_output_dropped_process+0x48>)
 8000f42:	f242 730f 	movw	r3, #9999	; 0x270f
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf28      	it	cs
 8000f4a:	460b      	movcs	r3, r1
 8000f4c:	4668      	mov	r0, sp
 8000f4e:	2105      	movs	r1, #5
 8000f50:	f002 f82a 	bl	8002fa8 <snprintf>

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
 8000f54:	462b      	mov	r3, r5
	len = snprintf(buf, sizeof(buf), "%d", cnt);
 8000f56:	4606      	mov	r6, r0
	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
 8000f58:	220b      	movs	r2, #11
 8000f5a:	4620      	mov	r0, r4
 8000f5c:	4909      	ldr	r1, [pc, #36]	; (8000f84 <log_output_dropped_process+0x4c>)
 8000f5e:	f003 ff45 	bl	8004dec <buffer_write>
	buffer_write(outf, buf, len, dev);
 8000f62:	462b      	mov	r3, r5
 8000f64:	4632      	mov	r2, r6
 8000f66:	4669      	mov	r1, sp
 8000f68:	4620      	mov	r0, r4
 8000f6a:	f003 ff3f 	bl	8004dec <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
 8000f6e:	462b      	mov	r3, r5
 8000f70:	221b      	movs	r2, #27
 8000f72:	4905      	ldr	r1, [pc, #20]	; (8000f88 <log_output_dropped_process+0x50>)
 8000f74:	4620      	mov	r0, r4
 8000f76:	f003 ff39 	bl	8004dec <buffer_write>
}
 8000f7a:	b002      	add	sp, #8
 8000f7c:	bd70      	pop	{r4, r5, r6, pc}
 8000f7e:	bf00      	nop
 8000f80:	08006ef2 	.word	0x08006ef2
 8000f84:	080066c2 	.word	0x080066c2
 8000f88:	080066a6 	.word	0x080066a6

08000f8c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
 8000f8c:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <log_output_timestamp_freq_set+0x24>)
{
 8000f8e:	b510      	push	{r4, lr}
	timestamp_div = 1U;
 8000f90:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 8000f92:	4c08      	ldr	r4, [pc, #32]	; (8000fb4 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
 8000f94:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
 8000f96:	2100      	movs	r1, #0
 8000f98:	42a0      	cmp	r0, r4
 8000f9a:	d804      	bhi.n	8000fa6 <log_output_timestamp_freq_set+0x1a>
 8000f9c:	b101      	cbz	r1, 8000fa0 <log_output_timestamp_freq_set+0x14>
 8000f9e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <log_output_timestamp_freq_set+0x2c>)
 8000fa2:	6018      	str	r0, [r3, #0]
}
 8000fa4:	bd10      	pop	{r4, pc}
		frequency /= 2U;
 8000fa6:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2101      	movs	r1, #1
 8000fac:	e7f4      	b.n	8000f98 <log_output_timestamp_freq_set+0xc>
 8000fae:	bf00      	nop
 8000fb0:	200000c8 	.word	0x200000c8
 8000fb4:	000f4240 	.word	0x000f4240
 8000fb8:	200000c4 	.word	0x200000c4

08000fbc <log_backend_uart_init>:
	log_msg_put(msg);

}

static void log_backend_uart_init(void)
{
 8000fbc:	b508      	push	{r3, lr}
 8000fbe:	4803      	ldr	r0, [pc, #12]	; (8000fcc <log_backend_uart_init+0x10>)
 8000fc0:	f002 fc06 	bl	80037d0 <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
 8000fc4:	4b02      	ldr	r3, [pc, #8]	; (8000fd0 <log_backend_uart_init+0x14>)
 8000fc6:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
 8000fc8:	bd08      	pop	{r3, pc}
 8000fca:	bf00      	nop
 8000fcc:	0800672a 	.word	0x0800672a
 8000fd0:	200000d4 	.word	0x200000d4

08000fd4 <panic>:

static void panic(struct log_backend const *const backend)
{
	log_output_flush(&log_output);
 8000fd4:	4801      	ldr	r0, [pc, #4]	; (8000fdc <panic+0x8>)
 8000fd6:	f004 b873 	b.w	80050c0 <log_output_flush>
 8000fda:	bf00      	nop
 8000fdc:	0800641c 	.word	0x0800641c

08000fe0 <dropped>:

static void dropped(const struct log_backend *const backend, u32_t cnt)
{
	ARG_UNUSED(backend);

	log_output_dropped_process(&log_output, cnt);
 8000fe0:	4801      	ldr	r0, [pc, #4]	; (8000fe8 <dropped+0x8>)
 8000fe2:	f7ff bfa9 	b.w	8000f38 <log_output_dropped_process>
 8000fe6:	bf00      	nop
 8000fe8:	0800641c 	.word	0x0800641c

08000fec <put>:
{
 8000fec:	b510      	push	{r4, lr}
	log_msg_get(msg);
 8000fee:	4608      	mov	r0, r1
{
 8000ff0:	460c      	mov	r4, r1
	log_msg_get(msg);
 8000ff2:	f003 fe5e 	bl	8004cb2 <log_msg_get>
	log_output_msg_process(&log_output, msg, flags);
 8000ff6:	4621      	mov	r1, r4
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <put+0x20>)
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	f7ff ff26 	bl	8000e4c <log_output_msg_process>
	log_msg_put(msg);
 8001000:	4620      	mov	r0, r4
}
 8001002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_msg_put(msg);
 8001006:	f003 be81 	b.w	8004d0c <log_msg_put>
 800100a:	bf00      	nop
 800100c:	0800641c 	.word	0x0800641c

08001010 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 8001010:	280a      	cmp	r0, #10
{
 8001012:	b538      	push	{r3, r4, r5, lr}
 8001014:	4604      	mov	r4, r0
 8001016:	4d07      	ldr	r5, [pc, #28]	; (8001034 <console_out+0x24>)
	if ('\n' == c) {
 8001018:	d104      	bne.n	8001024 <console_out+0x14>
 800101a:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
 800101c:	6843      	ldr	r3, [r0, #4]
 800101e:	210d      	movs	r1, #13
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
 8001024:	6828      	ldr	r0, [r5, #0]
 8001026:	6843      	ldr	r3, [r0, #4]
 8001028:	b2e1      	uxtb	r1, r4
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	4798      	blx	r3

	return c;
}
 800102e:	4620      	mov	r0, r4
 8001030:	bd38      	pop	{r3, r4, r5, pc}
 8001032:	bf00      	nop
 8001034:	200000e0 	.word	0x200000e0

08001038 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
 8001038:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
 800103a:	4c04      	ldr	r4, [pc, #16]	; (800104c <uart_console_hook_install+0x14>)
 800103c:	4620      	mov	r0, r4
 800103e:	f001 ffad 	bl	8002f9c <__stdout_hook_install>
	__printk_hook_install(console_out);
 8001042:	4620      	mov	r0, r4
}
 8001044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
 8001048:	f7ff bb12 	b.w	8000670 <__printk_hook_install>
 800104c:	08001011 	.word	0x08001011

08001050 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
 8001050:	b508      	push	{r3, lr}
 8001052:	4804      	ldr	r0, [pc, #16]	; (8001064 <uart_console_init+0x14>)
 8001054:	f002 fbbc 	bl	80037d0 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <uart_console_init+0x18>)
 800105a:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
 800105c:	f7ff ffec 	bl	8001038 <uart_console_hook_install>

	return 0;
}
 8001060:	2000      	movs	r0, #0
 8001062:	bd08      	pop	{r3, pc}
 8001064:	0800672a 	.word	0x0800672a
 8001068:	200000e0 	.word	0x200000e0

0800106c <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, void *arg)
{
 800106c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct device *dev = arg;
	struct stm32_exti_data *data = dev->driver_data;
 8001070:	6895      	ldr	r5, [r2, #8]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001072:	4e0d      	ldr	r6, [pc, #52]	; (80010a8 <__stm32_exti_isr+0x3c>)
{
 8001074:	4604      	mov	r4, r0
 8001076:	460f      	mov	r7, r1
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8001078:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 800107c:	f105 0904 	add.w	r9, r5, #4
	for (line = min; line < max; line++) {
 8001080:	42bc      	cmp	r4, r7
 8001082:	db01      	blt.n	8001088 <__stm32_exti_isr+0x1c>
		}
	}
}
 8001084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001088:	6972      	ldr	r2, [r6, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800108a:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 800108e:	ea33 0202 	bics.w	r2, r3, r2
 8001092:	d107      	bne.n	80010a4 <__stm32_exti_isr+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001094:	6173      	str	r3, [r6, #20]
			if (!data->cb[line].cb) {
 8001096:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 800109a:	b11b      	cbz	r3, 80010a4 <__stm32_exti_isr+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 800109c:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 80010a0:	4620      	mov	r0, r4
 80010a2:	4798      	blx	r3
	for (line = min; line < max; line++) {
 80010a4:	3401      	adds	r4, #1
 80010a6:	e7eb      	b.n	8001080 <__stm32_exti_isr+0x14>
 80010a8:	40010400 	.word	0x40010400

080010ac <stm32_exti_enable>:
	if (line < 32) {
 80010ac:	281f      	cmp	r0, #31
{
 80010ae:	b508      	push	{r3, lr}
	if (line < 32) {
 80010b0:	dd02      	ble.n	80010b8 <stm32_exti_enable+0xc>
		return -ENOTSUP;
 80010b2:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 80010b6:	bd08      	pop	{r3, pc}
  SET_BIT(EXTI->IMR1, ExtiLine);
 80010b8:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <stm32_exti_enable+0x28>)
		LL_EXTI_EnableIT_0_31(1 << line);
 80010ba:	2301      	movs	r3, #1
 80010bc:	6811      	ldr	r1, [r2, #0]
 80010be:	4083      	lsls	r3, r0
 80010c0:	430b      	orrs	r3, r1
	if (line <= ARRAY_SIZE(exti_irq_table)) {
 80010c2:	2810      	cmp	r0, #16
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	dcf4      	bgt.n	80010b2 <stm32_exti_enable+0x6>
	irq_enable(irqnum);
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <stm32_exti_enable+0x2c>)
 80010ca:	5618      	ldrsb	r0, [r3, r0]
 80010cc:	f001 f976 	bl	80023bc <z_arch_irq_enable>
	return 0;
 80010d0:	2000      	movs	r0, #0
 80010d2:	e7f0      	b.n	80010b6 <stm32_exti_enable+0xa>
 80010d4:	40010400 	.word	0x40010400
 80010d8:	08006742 	.word	0x08006742

080010dc <stm32_exti_trigger>:
	if (trigger & STM32_EXTI_TRIG_RISING) {
 80010dc:	07ca      	lsls	r2, r1, #31
{
 80010de:	b510      	push	{r4, lr}
	if (trigger & STM32_EXTI_TRIG_RISING) {
 80010e0:	d507      	bpl.n	80010f2 <stm32_exti_trigger+0x16>
		if (line < 32) {
 80010e2:	281f      	cmp	r0, #31
 80010e4:	dc05      	bgt.n	80010f2 <stm32_exti_trigger+0x16>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <stm32_exti_trigger+0x2c>)
			LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80010e8:	2201      	movs	r2, #1
 80010ea:	689c      	ldr	r4, [r3, #8]
 80010ec:	4082      	lsls	r2, r0
 80010ee:	4322      	orrs	r2, r4
 80010f0:	609a      	str	r2, [r3, #8]
	if (trigger & STM32_EXTI_TRIG_FALLING) {
 80010f2:	078b      	lsls	r3, r1, #30
 80010f4:	d507      	bpl.n	8001106 <stm32_exti_trigger+0x2a>
		if (line < 32) {
 80010f6:	281f      	cmp	r0, #31
 80010f8:	dc05      	bgt.n	8001106 <stm32_exti_trigger+0x2a>
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80010fa:	4a03      	ldr	r2, [pc, #12]	; (8001108 <stm32_exti_trigger+0x2c>)
			LL_EXTI_EnableFallingTrig_0_31(1 << line);
 80010fc:	2301      	movs	r3, #1
 80010fe:	68d1      	ldr	r1, [r2, #12]
 8001100:	4083      	lsls	r3, r0
 8001102:	430b      	orrs	r3, r1
 8001104:	60d3      	str	r3, [r2, #12]
}
 8001106:	bd10      	pop	{r4, pc}
 8001108:	40010400 	.word	0x40010400

0800110c <stm32_exti_set_callback>:
				void *arg)
{
	struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->driver_data;

	if (data->cb[line].cb) {
 800110c:	4907      	ldr	r1, [pc, #28]	; (800112c <stm32_exti_set_callback+0x20>)
{
 800110e:	b530      	push	{r4, r5, lr}
 8001110:	688c      	ldr	r4, [r1, #8]
	if (data->cb[line].cb) {
 8001112:	f854 1030 	ldr.w	r1, [r4, r0, lsl #3]
 8001116:	eb04 05c0 	add.w	r5, r4, r0, lsl #3
 800111a:	b921      	cbnz	r1, 8001126 <stm32_exti_set_callback+0x1a>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 800111c:	f844 2030 	str.w	r2, [r4, r0, lsl #3]
	data->cb[line].data = arg;
 8001120:	606b      	str	r3, [r5, #4]

	return 0;
 8001122:	4608      	mov	r0, r1
}
 8001124:	bd30      	pop	{r4, r5, pc}
		return -EBUSY;
 8001126:	f06f 000f 	mvn.w	r0, #15
 800112a:	e7fb      	b.n	8001124 <stm32_exti_set_callback+0x18>
 800112c:	20005954 	.word	0x20005954

08001130 <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8001130:	680b      	ldr	r3, [r1, #0]
{
 8001132:	b086      	sub	sp, #24
	switch (pclken->bus) {
 8001134:	2b04      	cmp	r3, #4
 8001136:	d838      	bhi.n	80011aa <stm32_clock_control_on+0x7a>
 8001138:	e8df f003 	tbb	[pc, r3]
 800113c:	2d190f03 	.word	0x2d190f03
 8001140:	23          	.byte	0x23
 8001141:	00          	.byte	0x00
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001142:	4a1b      	ldr	r2, [pc, #108]	; (80011b0 <stm32_clock_control_on+0x80>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8001144:	684b      	ldr	r3, [r1, #4]
 8001146:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8001148:	4319      	orrs	r1, r3
 800114a:	6491      	str	r1, [r2, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800114c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800114e:	4013      	ands	r3, r2
 8001150:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001152:	9b01      	ldr	r3, [sp, #4]
#endif /* CONFIG_SOC_SERIES_STM32L0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8001154:	2000      	movs	r0, #0
}
 8001156:	b006      	add	sp, #24
 8001158:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800115a:	4a15      	ldr	r2, [pc, #84]	; (80011b0 <stm32_clock_control_on+0x80>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 800115c:	684b      	ldr	r3, [r1, #4]
 800115e:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8001160:	4319      	orrs	r1, r3
 8001162:	64d1      	str	r1, [r2, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001164:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001166:	4013      	ands	r3, r2
 8001168:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 800116a:	9b02      	ldr	r3, [sp, #8]
 800116c:	e7f2      	b.n	8001154 <stm32_clock_control_on+0x24>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800116e:	4a10      	ldr	r2, [pc, #64]	; (80011b0 <stm32_clock_control_on+0x80>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8001170:	684b      	ldr	r3, [r1, #4]
 8001172:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8001174:	4319      	orrs	r1, r3
 8001176:	6591      	str	r1, [r2, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001178:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800117a:	4013      	ands	r3, r2
 800117c:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 800117e:	9b03      	ldr	r3, [sp, #12]
 8001180:	e7e8      	b.n	8001154 <stm32_clock_control_on+0x24>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001182:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <stm32_clock_control_on+0x80>)
		LL_APB1_GRP2_EnableClock(pclken->enr);
 8001184:	684b      	ldr	r3, [r1, #4]
 8001186:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8001188:	4319      	orrs	r1, r3
 800118a:	65d1      	str	r1, [r2, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800118c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800118e:	4013      	ands	r3, r2
 8001190:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8001192:	9b04      	ldr	r3, [sp, #16]
 8001194:	e7de      	b.n	8001154 <stm32_clock_control_on+0x24>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001196:	4a06      	ldr	r2, [pc, #24]	; (80011b0 <stm32_clock_control_on+0x80>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8001198:	684b      	ldr	r3, [r1, #4]
 800119a:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800119c:	4319      	orrs	r1, r3
 800119e:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80011a0:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80011a2:	4013      	ands	r3, r2
 80011a4:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 80011a6:	9b05      	ldr	r3, [sp, #20]
 80011a8:	e7d4      	b.n	8001154 <stm32_clock_control_on+0x24>
		return -ENOTSUP;
 80011aa:	f06f 0022 	mvn.w	r0, #34	; 0x22
 80011ae:	e7d2      	b.n	8001156 <stm32_clock_control_on+0x26>
 80011b0:	40021000 	.word	0x40021000

080011b4 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 80011b4:	680b      	ldr	r3, [r1, #0]
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	d828      	bhi.n	800120c <stm32_clock_control_off+0x58>
 80011ba:	e8df f003 	tbb	[pc, r3]
 80011be:	0b03      	.short	0x0b03
 80011c0:	2012      	.short	0x2012
 80011c2:	19          	.byte	0x19
 80011c3:	00          	.byte	0x00
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 80011c4:	4a13      	ldr	r2, [pc, #76]	; (8001214 <stm32_clock_control_off+0x60>)
 80011c6:	6849      	ldr	r1, [r1, #4]
 80011c8:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80011ca:	ea23 0301 	bic.w	r3, r3, r1
 80011ce:	6493      	str	r3, [r2, #72]	; 0x48
#endif /* CONFIG_SOC_SERIES_STM32L0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 80011d0:	2000      	movs	r0, #0
 80011d2:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 80011d4:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <stm32_clock_control_off+0x60>)
 80011d6:	6849      	ldr	r1, [r1, #4]
 80011d8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80011da:	ea23 0301 	bic.w	r3, r3, r1
 80011de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e0:	e7f6      	b.n	80011d0 <stm32_clock_control_off+0x1c>
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80011e2:	4a0c      	ldr	r2, [pc, #48]	; (8001214 <stm32_clock_control_off+0x60>)
 80011e4:	6849      	ldr	r1, [r1, #4]
 80011e6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80011e8:	ea23 0301 	bic.w	r3, r3, r1
 80011ec:	6593      	str	r3, [r2, #88]	; 0x58
 80011ee:	e7ef      	b.n	80011d0 <stm32_clock_control_off+0x1c>
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 80011f0:	4a08      	ldr	r2, [pc, #32]	; (8001214 <stm32_clock_control_off+0x60>)
 80011f2:	6849      	ldr	r1, [r1, #4]
 80011f4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80011f6:	ea23 0301 	bic.w	r3, r3, r1
 80011fa:	65d3      	str	r3, [r2, #92]	; 0x5c
 80011fc:	e7e8      	b.n	80011d0 <stm32_clock_control_off+0x1c>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <stm32_clock_control_off+0x60>)
 8001200:	6849      	ldr	r1, [r1, #4]
 8001202:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001204:	ea23 0301 	bic.w	r3, r3, r1
 8001208:	6613      	str	r3, [r2, #96]	; 0x60
 800120a:	e7e1      	b.n	80011d0 <stm32_clock_control_off+0x1c>
		return -ENOTSUP;
 800120c:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000

08001218 <stm32_clock_control_get_subsys_rate>:
				CONFIG_CLOCK_STM32_APB2_PRESCALER);
#endif /* CONFIG_SOC_SERIES_STM32F0X */

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8001218:	680b      	ldr	r3, [r1, #0]
 800121a:	2b04      	cmp	r3, #4
	u32_t ahb_clock = SystemCoreClock;
 800121c:	bf9f      	itttt	ls
 800121e:	4b04      	ldrls	r3, [pc, #16]	; (8001230 <stm32_clock_control_get_subsys_rate+0x18>)
 8001220:	681b      	ldrls	r3, [r3, #0]
#endif
		*rate = apb1_clock;
		break;
#ifndef CONFIG_SOC_SERIES_STM32F0X
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 8001222:	6013      	strls	r3, [r2, #0]
#endif /* CONFIG_SOC_SERIES_STM32F0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8001224:	2000      	movls	r0, #0
		return -ENOTSUP;
 8001226:	bf88      	it	hi
 8001228:	f06f 0022 	mvnhi.w	r0, #34	; 0x22
}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	200058ac 	.word	0x200058ac

08001234 <stm32_clock_control_init>:
			 mco2_prescaler(CONFIG_CLOCK_STM32_MCO2_DIV));
#endif /* CONFIG_CLOCK_STM32_MCO2_SRC_NOCLOCK */
}

static int stm32_clock_control_init(struct device *dev)
{
 8001234:	b510      	push	{r4, lr}
 8001236:	b086      	sub	sp, #24
	clk_init->AHBCLKDivider = ahb_prescaler(
 8001238:	2300      	movs	r3, #0
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800123a:	4c1d      	ldr	r4, [pc, #116]	; (80012b0 <stm32_clock_control_init+0x7c>)
	clk_init->APB2CLKDivider = apb2_prescaler(
 800123c:	9302      	str	r3, [sp, #8]
	clk_init->APB1CLKDivider = apb1_prescaler(
 800123e:	e9cd 3300 	strd	r3, r3, [sp]
#else
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
#endif /* CONFIG_SOC_SERIES_STM32WBX */

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8001242:	f003 ffbc 	bl	80051be <config_enable_default_clocks>

#ifdef CONFIG_CLOCK_STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8001246:	a803      	add	r0, sp, #12
 8001248:	f003 ffb1 	bl	80051ae <config_pll_init>
 800124c:	6823      	ldr	r3, [r4, #0]
 800124e:	055a      	lsls	r2, r3, #21
 8001250:	d406      	bmi.n	8001260 <stm32_clock_control_init+0x2c>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001252:	6823      	ldr	r3, [r4, #0]
 8001254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001258:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800125a:	6823      	ldr	r3, [r4, #0]
 800125c:	055b      	lsls	r3, r3, #21
 800125e:	d5fc      	bpl.n	800125a <stm32_clock_control_init+0x26>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001260:	68a3      	ldr	r3, [r4, #8]
 8001262:	f023 0303 	bic.w	r3, r3, #3
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800126c:	68a3      	ldr	r3, [r4, #8]
 800126e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001272:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001274:	68a3      	ldr	r3, [r4, #8]
 8001276:	f003 030c 	and.w	r3, r3, #12
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 800127a:	2b04      	cmp	r3, #4
 800127c:	d1fa      	bne.n	8001274 <stm32_clock_control_init+0x40>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800127e:	6823      	ldr	r3, [r4, #0]
 8001280:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001284:	6023      	str	r3, [r4, #0]
	 */
	stm32_clock_switch_to_hsi(LL_RCC_SYSCLK_DIV_1);
	LL_RCC_PLL_Disable();

#ifdef CONFIG_CLOCK_STM32_PLL_Q_DIVISOR
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8001286:	68e3      	ldr	r3, [r4, #12]
 8001288:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800128c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001290:	60e3      	str	r3, [r4, #12]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif CONFIG_CLOCK_STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 8001292:	4669      	mov	r1, sp
 8001294:	a803      	add	r0, sp, #12
 8001296:	f000 fe9f 	bl	8001fd8 <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800129a:	6823      	ldr	r3, [r4, #0]
 800129c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a0:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80012a2:	6823      	ldr	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 80012a4:	2000      	movs	r0, #0
 80012a6:	f023 0301 	bic.w	r3, r3, #1
 80012aa:	6023      	str	r3, [r4, #0]
 80012ac:	b006      	add	sp, #24
 80012ae:	bd10      	pop	{r4, pc}
 80012b0:	40021000 	.word	0x40021000

080012b4 <ili9340_set_contrast>:
	LOG_WRN("Set brightness not implemented");
	return -ENOTSUP;
}

static int ili9340_set_contrast(const struct device *dev, const u8_t contrast)
{
 80012b4:	b508      	push	{r3, lr}
	LOG_ERR("Set contrast not supported");
 80012b6:	f04f 0100 	mov.w	r1, #0
 80012ba:	2301      	movs	r3, #1
 80012bc:	4a06      	ldr	r2, [pc, #24]	; (80012d8 <ili9340_set_contrast+0x24>)
 80012be:	4807      	ldr	r0, [pc, #28]	; (80012dc <ili9340_set_contrast+0x28>)
 80012c0:	f363 0107 	bfi	r1, r3, #0, #8
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <ili9340_set_contrast+0x2c>)
 80012c6:	1a9b      	subs	r3, r3, r2
 80012c8:	08db      	lsrs	r3, r3, #3
 80012ca:	f363 118f 	bfi	r1, r3, #6, #10
 80012ce:	f003 fc3f 	bl	8004b50 <log_0>
	return -ENOTSUP;
}
 80012d2:	f06f 0022 	mvn.w	r0, #34	; 0x22
 80012d6:	bd08      	pop	{r3, pc}
 80012d8:	08006348 	.word	0x08006348
 80012dc:	0800694d 	.word	0x0800694d
 80012e0:	08006348 	.word	0x08006348

080012e4 <ili9340_set_brightness>:
{
 80012e4:	b508      	push	{r3, lr}
	LOG_WRN("Set brightness not implemented");
 80012e6:	f04f 0100 	mov.w	r1, #0
 80012ea:	2302      	movs	r3, #2
 80012ec:	4a06      	ldr	r2, [pc, #24]	; (8001308 <ili9340_set_brightness+0x24>)
 80012ee:	4807      	ldr	r0, [pc, #28]	; (800130c <ili9340_set_brightness+0x28>)
 80012f0:	f363 0107 	bfi	r1, r3, #0, #8
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <ili9340_set_brightness+0x2c>)
 80012f6:	1a9b      	subs	r3, r3, r2
 80012f8:	08db      	lsrs	r3, r3, #3
 80012fa:	f363 118f 	bfi	r1, r3, #6, #10
 80012fe:	f003 fc27 	bl	8004b50 <log_0>
}
 8001302:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8001306:	bd08      	pop	{r3, pc}
 8001308:	08006348 	.word	0x08006348
 800130c:	0800692e 	.word	0x0800692e
 8001310:	08006348 	.word	0x08006348

08001314 <ili9340_get_framebuffer>:
{
 8001314:	b508      	push	{r3, lr}
	LOG_ERR("Direct framebuffer access not supported");
 8001316:	f04f 0100 	mov.w	r1, #0
 800131a:	2301      	movs	r3, #1
 800131c:	4a06      	ldr	r2, [pc, #24]	; (8001338 <ili9340_get_framebuffer+0x24>)
 800131e:	4807      	ldr	r0, [pc, #28]	; (800133c <ili9340_get_framebuffer+0x28>)
 8001320:	f363 0107 	bfi	r1, r3, #0, #8
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <ili9340_get_framebuffer+0x2c>)
 8001326:	1a9b      	subs	r3, r3, r2
 8001328:	08db      	lsrs	r3, r3, #3
 800132a:	f363 118f 	bfi	r1, r3, #6, #10
 800132e:	f003 fc0f 	bl	8004b50 <log_0>
}
 8001332:	2000      	movs	r0, #0
 8001334:	bd08      	pop	{r3, pc}
 8001336:	bf00      	nop
 8001338:	08006348 	.word	0x08006348
 800133c:	080067fb 	.word	0x080067fb
 8001340:	08006348 	.word	0x08006348

08001344 <ili9340_read>:
{
 8001344:	b508      	push	{r3, lr}
	LOG_ERR("Reading not supported");
 8001346:	f04f 0100 	mov.w	r1, #0
 800134a:	2301      	movs	r3, #1
 800134c:	4a06      	ldr	r2, [pc, #24]	; (8001368 <ili9340_read+0x24>)
 800134e:	4807      	ldr	r0, [pc, #28]	; (800136c <ili9340_read+0x28>)
 8001350:	f363 0107 	bfi	r1, r3, #0, #8
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <ili9340_read+0x2c>)
 8001356:	1a9b      	subs	r3, r3, r2
 8001358:	08db      	lsrs	r3, r3, #3
 800135a:	f363 118f 	bfi	r1, r3, #6, #10
 800135e:	f003 fbf7 	bl	8004b50 <log_0>
}
 8001362:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8001366:	bd08      	pop	{r3, pc}
 8001368:	08006348 	.word	0x08006348
 800136c:	08006918 	.word	0x08006918
 8001370:	08006348 	.word	0x08006348

08001374 <ili9340_get_capabilities>:
	return -ENOTSUP;
}

static void ili9340_get_capabilities(const struct device *dev,
				     struct display_capabilities *capabilities)
{
 8001374:	b510      	push	{r4, lr}
 8001376:	460c      	mov	r4, r1
	memset(capabilities, 0, sizeof(struct display_capabilities));
 8001378:	2210      	movs	r2, #16
 800137a:	2100      	movs	r1, #0
 800137c:	4620      	mov	r0, r4
 800137e:	f004 f88a 	bl	8005496 <memset>
	capabilities->y_resolution = 240U;
#ifdef CONFIG_ILI9340_RGB565
	capabilities->supported_pixel_formats = PIXEL_FORMAT_RGB_565;
	capabilities->current_pixel_format = PIXEL_FORMAT_RGB_565;
#else
	capabilities->supported_pixel_formats = PIXEL_FORMAT_RGB_888;
 8001382:	4a03      	ldr	r2, [pc, #12]	; (8001390 <ili9340_get_capabilities+0x1c>)
 8001384:	2301      	movs	r3, #1
 8001386:	e9c4 2300 	strd	r2, r3, [r4]
	capabilities->current_pixel_format = PIXEL_FORMAT_RGB_888;
 800138a:	81a3      	strh	r3, [r4, #12]
#endif
	capabilities->current_orientation = DISPLAY_ORIENTATION_NORMAL;
}
 800138c:	bd10      	pop	{r4, pc}
 800138e:	bf00      	nop
 8001390:	00f00140 	.word	0x00f00140

08001394 <ili9340_set_orientation>:
{
 8001394:	b508      	push	{r3, lr}
	if (orientation == DISPLAY_ORIENTATION_NORMAL) {
 8001396:	b181      	cbz	r1, 80013ba <ili9340_set_orientation+0x26>
	LOG_ERR("Changing display orientation not implemented");
 8001398:	2301      	movs	r3, #1
 800139a:	f04f 0100 	mov.w	r1, #0
 800139e:	f363 0107 	bfi	r1, r3, #0, #8
 80013a2:	4a07      	ldr	r2, [pc, #28]	; (80013c0 <ili9340_set_orientation+0x2c>)
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <ili9340_set_orientation+0x30>)
 80013a6:	4808      	ldr	r0, [pc, #32]	; (80013c8 <ili9340_set_orientation+0x34>)
 80013a8:	1a9b      	subs	r3, r3, r2
 80013aa:	08db      	lsrs	r3, r3, #3
 80013ac:	f363 118f 	bfi	r1, r3, #6, #10
 80013b0:	f003 fbce 	bl	8004b50 <log_0>
	return -ENOTSUP;
 80013b4:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 80013b8:	bd08      	pop	{r3, pc}
		return 0;
 80013ba:	4608      	mov	r0, r1
 80013bc:	e7fc      	b.n	80013b8 <ili9340_set_orientation+0x24>
 80013be:	bf00      	nop
 80013c0:	08006348 	.word	0x08006348
 80013c4:	08006348 	.word	0x08006348
 80013c8:	08006968 	.word	0x08006968

080013cc <ili9340_set_pixel_format>:
	if (pixel_format == PIXEL_FORMAT_RGB_888) {
 80013cc:	2901      	cmp	r1, #1
{
 80013ce:	b508      	push	{r3, lr}
	if (pixel_format == PIXEL_FORMAT_RGB_888) {
 80013d0:	d010      	beq.n	80013f4 <ili9340_set_pixel_format+0x28>
	LOG_ERR("Pixel format change not implemented");
 80013d2:	2301      	movs	r3, #1
 80013d4:	f04f 0100 	mov.w	r1, #0
 80013d8:	f363 0107 	bfi	r1, r3, #0, #8
 80013dc:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <ili9340_set_pixel_format+0x2c>)
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <ili9340_set_pixel_format+0x30>)
 80013e0:	4807      	ldr	r0, [pc, #28]	; (8001400 <ili9340_set_pixel_format+0x34>)
 80013e2:	1a9b      	subs	r3, r3, r2
 80013e4:	08db      	lsrs	r3, r3, #3
 80013e6:	f363 118f 	bfi	r1, r3, #6, #10
 80013ea:	f003 fbb1 	bl	8004b50 <log_0>
	return -ENOTSUP;
 80013ee:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 80013f2:	bd08      	pop	{r3, pc}
		return 0;
 80013f4:	2000      	movs	r0, #0
 80013f6:	e7fc      	b.n	80013f2 <ili9340_set_pixel_format+0x26>
 80013f8:	08006348 	.word	0x08006348
 80013fc:	08006348 	.word	0x08006348
 8001400:	08006995 	.word	0x08006995

08001404 <ili9340_init>:
{
 8001404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LOG_DBG("Initializing display driver");
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	2304      	movs	r3, #4
 800140c:	f363 0207 	bfi	r2, r3, #0, #8
 8001410:	4e49      	ldr	r6, [pc, #292]	; (8001538 <ili9340_init+0x134>)
 8001412:	4b4a      	ldr	r3, [pc, #296]	; (800153c <ili9340_init+0x138>)
	struct ili9340_data *data = (struct ili9340_data *)dev->driver_data;
 8001414:	6885      	ldr	r5, [r0, #8]
	LOG_DBG("Initializing display driver");
 8001416:	494a      	ldr	r1, [pc, #296]	; (8001540 <ili9340_init+0x13c>)
 8001418:	484a      	ldr	r0, [pc, #296]	; (8001544 <ili9340_init+0x140>)
 800141a:	1af6      	subs	r6, r6, r3
 800141c:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 8001420:	f366 128f 	bfi	r2, r6, #6, #10
 8001424:	f003 fba1 	bl	8004b6a <log_1>
 8001428:	4847      	ldr	r0, [pc, #284]	; (8001548 <ili9340_init+0x144>)
 800142a:	f002 f9d1 	bl	80037d0 <z_impl_device_get_binding>
	data->spi_dev = device_get_binding(DT_INST_0_ILITEK_ILI9340_BUS_NAME);
 800142e:	60a8      	str	r0, [r5, #8]
	if (data->spi_dev == NULL) {
 8001430:	b960      	cbnz	r0, 800144c <ili9340_init+0x48>
		LOG_ERR("Could not get SPI device for ILI9340");
 8001432:	f04f 0100 	mov.w	r1, #0
 8001436:	2301      	movs	r3, #1
 8001438:	f363 0107 	bfi	r1, r3, #0, #8
 800143c:	4843      	ldr	r0, [pc, #268]	; (800154c <ili9340_init+0x148>)
 800143e:	f366 118f 	bfi	r1, r6, #6, #10
		LOG_ERR("Could not get GPIO port for ILI9340 command/data");
 8001442:	f003 fb85 	bl	8004b50 <log_0>
		return -EPERM;
 8001446:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800144a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	data->spi_config.operation = SPI_OP_MODE_MASTER | SPI_WORD_SET(8);
 800144c:	4a40      	ldr	r2, [pc, #256]	; (8001550 <ili9340_init+0x14c>)
 800144e:	4841      	ldr	r0, [pc, #260]	; (8001554 <ili9340_init+0x150>)
 8001450:	f44f 7380 	mov.w	r3, #256	; 0x100
	data->spi_config.cs = NULL;
 8001454:	2400      	movs	r4, #0
	data->spi_config.operation = SPI_OP_MODE_MASTER | SPI_WORD_SET(8);
 8001456:	e9c5 2303 	strd	r2, r3, [r5, #12]
	data->spi_config.cs = NULL;
 800145a:	616c      	str	r4, [r5, #20]
 800145c:	f002 f9b8 	bl	80037d0 <z_impl_device_get_binding>
	data->reset_gpio =
 8001460:	6028      	str	r0, [r5, #0]
	if (data->reset_gpio == NULL) {
 8001462:	b940      	cbnz	r0, 8001476 <ili9340_init+0x72>
		LOG_ERR("Could not get GPIO port for ILI9340 reset");
 8001464:	f04f 0100 	mov.w	r1, #0
 8001468:	2301      	movs	r3, #1
 800146a:	f363 0107 	bfi	r1, r3, #0, #8
 800146e:	f366 118f 	bfi	r1, r6, #6, #10
 8001472:	4839      	ldr	r0, [pc, #228]	; (8001558 <ili9340_init+0x154>)
 8001474:	e7e5      	b.n	8001442 <ili9340_init+0x3e>
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
 8001476:	6843      	ldr	r3, [r0, #4]
 8001478:	2209      	movs	r2, #9
 800147a:	681f      	ldr	r7, [r3, #0]
 800147c:	4621      	mov	r1, r4
 800147e:	2301      	movs	r3, #1
 8001480:	47b8      	blx	r7
 8001482:	4834      	ldr	r0, [pc, #208]	; (8001554 <ili9340_init+0x150>)
 8001484:	f002 f9a4 	bl	80037d0 <z_impl_device_get_binding>
	data->command_data_gpio =
 8001488:	6068      	str	r0, [r5, #4]
	if (data->command_data_gpio == NULL) {
 800148a:	b940      	cbnz	r0, 800149e <ili9340_init+0x9a>
		LOG_ERR("Could not get GPIO port for ILI9340 command/data");
 800148c:	f04f 0100 	mov.w	r1, #0
 8001490:	2301      	movs	r3, #1
 8001492:	f363 0107 	bfi	r1, r3, #0, #8
 8001496:	f366 118f 	bfi	r1, r6, #6, #10
 800149a:	4830      	ldr	r0, [pc, #192]	; (800155c <ili9340_init+0x158>)
 800149c:	e7d1      	b.n	8001442 <ili9340_init+0x3e>
 800149e:	6843      	ldr	r3, [r0, #4]
 80014a0:	2208      	movs	r2, #8
 80014a2:	681f      	ldr	r7, [r3, #0]
 80014a4:	4621      	mov	r1, r4
 80014a6:	2301      	movs	r3, #1
 80014a8:	47b8      	blx	r7
	LOG_DBG("Resetting display driver");
 80014aa:	2304      	movs	r3, #4
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	f363 0207 	bfi	r2, r3, #0, #8
 80014b4:	f366 128f 	bfi	r2, r6, #6, #10
 80014b8:	4921      	ldr	r1, [pc, #132]	; (8001540 <ili9340_init+0x13c>)
 80014ba:	4829      	ldr	r0, [pc, #164]	; (8001560 <ili9340_init+0x15c>)
 80014bc:	f003 fb55 	bl	8004b6a <log_1>
	gpio_pin_write(data->reset_gpio, DT_INST_0_ILITEK_ILI9340_RESET_GPIOS_PIN, 1);
 80014c0:	2201      	movs	r2, #1
 80014c2:	2109      	movs	r1, #9
 80014c4:	6828      	ldr	r0, [r5, #0]
 80014c6:	f003 fe7b 	bl	80051c0 <gpio_pin_write>
 80014ca:	2001      	movs	r0, #1
 80014cc:	f004 fcbd 	bl	8005e4a <z_impl_k_sleep>
	gpio_pin_write(data->reset_gpio, DT_INST_0_ILITEK_ILI9340_RESET_GPIOS_PIN, 0);
 80014d0:	4622      	mov	r2, r4
 80014d2:	2109      	movs	r1, #9
 80014d4:	6828      	ldr	r0, [r5, #0]
 80014d6:	f003 fe73 	bl	80051c0 <gpio_pin_write>
 80014da:	2001      	movs	r0, #1
 80014dc:	f004 fcb5 	bl	8005e4a <z_impl_k_sleep>
	gpio_pin_write(data->reset_gpio, DT_INST_0_ILITEK_ILI9340_RESET_GPIOS_PIN, 1);
 80014e0:	2201      	movs	r2, #1
 80014e2:	2109      	movs	r1, #9
 80014e4:	6828      	ldr	r0, [r5, #0]
 80014e6:	f003 fe6b 	bl	80051c0 <gpio_pin_write>
 80014ea:	2005      	movs	r0, #5
 80014ec:	f004 fcad 	bl	8005e4a <z_impl_k_sleep>
	LOG_DBG("Initializing LCD");
 80014f0:	2304      	movs	r3, #4
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	f363 0207 	bfi	r2, r3, #0, #8
 80014fa:	f366 128f 	bfi	r2, r6, #6, #10
 80014fe:	4910      	ldr	r1, [pc, #64]	; (8001540 <ili9340_init+0x13c>)
 8001500:	4818      	ldr	r0, [pc, #96]	; (8001564 <ili9340_init+0x160>)
 8001502:	f003 fb32 	bl	8004b6a <log_1>
	ili9340_lcd_init(data);
 8001506:	4628      	mov	r0, r5
 8001508:	f000 f8fa 	bl	8001700 <ili9340_lcd_init>
	LOG_DBG("Exiting sleep mode");
 800150c:	2304      	movs	r3, #4
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	f363 0207 	bfi	r2, r3, #0, #8
 8001516:	f366 128f 	bfi	r2, r6, #6, #10
 800151a:	4909      	ldr	r1, [pc, #36]	; (8001540 <ili9340_init+0x13c>)
 800151c:	4812      	ldr	r0, [pc, #72]	; (8001568 <ili9340_init+0x164>)
 800151e:	f003 fb24 	bl	8004b6a <log_1>
	ili9340_transmit(data, ILI9340_CMD_EXIT_SLEEP, NULL, 0);
 8001522:	4623      	mov	r3, r4
 8001524:	4622      	mov	r2, r4
 8001526:	2111      	movs	r1, #17
 8001528:	4628      	mov	r0, r5
 800152a:	f003 fe52 	bl	80051d2 <ili9340_transmit>
 800152e:	2078      	movs	r0, #120	; 0x78
 8001530:	f004 fc8b 	bl	8005e4a <z_impl_k_sleep>
	return 0;
 8001534:	4620      	mov	r0, r4
 8001536:	e788      	b.n	800144a <ili9340_init+0x46>
 8001538:	08006348 	.word	0x08006348
 800153c:	08006348 	.word	0x08006348
 8001540:	08006766 	.word	0x08006766
 8001544:	08006823 	.word	0x08006823
 8001548:	08006843 	.word	0x08006843
 800154c:	08006849 	.word	0x08006849
 8001550:	00e7319b 	.word	0x00e7319b
 8001554:	0800686e 	.word	0x0800686e
 8001558:	08006874 	.word	0x08006874
 800155c:	0800689e 	.word	0x0800689e
 8001560:	080068cf 	.word	0x080068cf
 8001564:	080068ec 	.word	0x080068ec
 8001568:	08006901 	.word	0x08006901

0800156c <ili9340_write>:
{
 800156c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001570:	461c      	mov	r4, r3
 8001572:	4615      	mov	r5, r2
	LOG_DBG("Writing %dx%d (w,h) @ %dx%d (x,y)", desc->width, desc->height,
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	2204      	movs	r2, #4
{
 800157a:	460e      	mov	r6, r1
	LOG_DBG("Writing %dx%d (w,h) @ %dx%d (x,y)", desc->width, desc->height,
 800157c:	f362 0307 	bfi	r3, r2, #0, #8
 8001580:	4939      	ldr	r1, [pc, #228]	; (8001668 <ili9340_write+0xfc>)
 8001582:	4a3a      	ldr	r2, [pc, #232]	; (800166c <ili9340_write+0x100>)
	struct ili9340_data *data = (struct ili9340_data *)dev->driver_data;
 8001584:	6887      	ldr	r7, [r0, #8]
	LOG_DBG("Writing %dx%d (w,h) @ %dx%d (x,y)", desc->width, desc->height,
 8001586:	483a      	ldr	r0, [pc, #232]	; (8001670 <ili9340_write+0x104>)
 8001588:	1a52      	subs	r2, r2, r1
{
 800158a:	b089      	sub	sp, #36	; 0x24
 800158c:	08d2      	lsrs	r2, r2, #3
	LOG_DBG("Writing %dx%d (w,h) @ %dx%d (x,y)", desc->width, desc->height,
 800158e:	f362 138f 	bfi	r3, r2, #6, #10
 8001592:	4a38      	ldr	r2, [pc, #224]	; (8001674 <ili9340_write+0x108>)
 8001594:	9203      	str	r2, [sp, #12]
 8001596:	88a2      	ldrh	r2, [r4, #4]
 8001598:	9204      	str	r2, [sp, #16]
 800159a:	88e2      	ldrh	r2, [r4, #6]
{
 800159c:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
	LOG_DBG("Writing %dx%d (w,h) @ %dx%d (x,y)", desc->width, desc->height,
 80015a0:	9507      	str	r5, [sp, #28]
 80015a2:	e9cd 2605 	strd	r2, r6, [sp, #20]
 80015a6:	a903      	add	r1, sp, #12
 80015a8:	2205      	movs	r2, #5
 80015aa:	f003 fb25 	bl	8004bf8 <log_n>
	ili9340_set_mem_area(data, x, y, desc->width, desc->height);
 80015ae:	88a3      	ldrh	r3, [r4, #4]
 80015b0:	f8b4 9006 	ldrh.w	r9, [r4, #6]
	spi_data[0] = sys_cpu_to_be16(x);
 80015b4:	ba72      	rev16	r2, r6
	spi_data[1] = sys_cpu_to_be16(x + w - 1);
 80015b6:	3e01      	subs	r6, #1
 80015b8:	441e      	add	r6, r3
	spi_data[0] = sys_cpu_to_be16(x);
 80015ba:	f8ad 200c 	strh.w	r2, [sp, #12]
	spi_data[1] = sys_cpu_to_be16(x + w - 1);
 80015be:	ba76      	rev16	r6, r6
	ili9340_transmit(data, ILI9340_CMD_COLUMN_ADDR, &spi_data[0], 4);
 80015c0:	2304      	movs	r3, #4
 80015c2:	aa03      	add	r2, sp, #12
 80015c4:	212a      	movs	r1, #42	; 0x2a
 80015c6:	4638      	mov	r0, r7
	spi_data[1] = sys_cpu_to_be16(x + w - 1);
 80015c8:	f8ad 600e 	strh.w	r6, [sp, #14]
	ili9340_transmit(data, ILI9340_CMD_COLUMN_ADDR, &spi_data[0], 4);
 80015cc:	f003 fe01 	bl	80051d2 <ili9340_transmit>
	spi_data[0] = sys_cpu_to_be16(y);
 80015d0:	ba6b      	rev16	r3, r5
	spi_data[1] = sys_cpu_to_be16(y + h - 1);
 80015d2:	3d01      	subs	r5, #1
 80015d4:	444d      	add	r5, r9
	spi_data[0] = sys_cpu_to_be16(y);
 80015d6:	f8ad 300c 	strh.w	r3, [sp, #12]
	spi_data[1] = sys_cpu_to_be16(y + h - 1);
 80015da:	ba6d      	rev16	r5, r5
	ili9340_transmit(data, ILI9340_CMD_PAGE_ADDR, &spi_data[0], 4);
 80015dc:	2304      	movs	r3, #4
 80015de:	aa03      	add	r2, sp, #12
 80015e0:	212b      	movs	r1, #43	; 0x2b
 80015e2:	4638      	mov	r0, r7
	spi_data[1] = sys_cpu_to_be16(y + h - 1);
 80015e4:	f8ad 500e 	strh.w	r5, [sp, #14]
	ili9340_transmit(data, ILI9340_CMD_PAGE_ADDR, &spi_data[0], 4);
 80015e8:	f003 fdf3 	bl	80051d2 <ili9340_transmit>
	if (desc->pitch > desc->width) {
 80015ec:	88a3      	ldrh	r3, [r4, #4]
 80015ee:	8922      	ldrh	r2, [r4, #8]
 80015f0:	88e6      	ldrh	r6, [r4, #6]
		nbr_of_writes = desc->height;
 80015f2:	429a      	cmp	r2, r3
 80015f4:	bf84      	itt	hi
 80015f6:	46b1      	movhi	r9, r6
 80015f8:	2601      	movhi	r6, #1
	ili9340_transmit(data, ILI9340_CMD_MEM_WRITE,
 80015fa:	fb06 f303 	mul.w	r3, r6, r3
 80015fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001602:	4642      	mov	r2, r8
 8001604:	f04f 012c 	mov.w	r1, #44	; 0x2c
 8001608:	4638      	mov	r0, r7
		nbr_of_writes = desc->height;
 800160a:	bf98      	it	ls
 800160c:	f04f 0901 	movls.w	r9, #1
	ili9340_transmit(data, ILI9340_CMD_MEM_WRITE,
 8001610:	f003 fddf 	bl	80051d2 <ili9340_transmit>
	write_data_start += (desc->pitch * ILI9340_RGB_SIZE);
 8001614:	8925      	ldrh	r5, [r4, #8]
	tx_bufs.buffers = &tx_buf;
 8001616:	ab01      	add	r3, sp, #4
 8001618:	9303      	str	r3, [sp, #12]
	write_data_start += (desc->pitch * ILI9340_RGB_SIZE);
 800161a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
	tx_bufs.count = 1;
 800161e:	2301      	movs	r3, #1
	write_data_start += (desc->pitch * ILI9340_RGB_SIZE);
 8001620:	4445      	add	r5, r8
	tx_bufs.count = 1;
 8001622:	9304      	str	r3, [sp, #16]
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
 8001624:	f04f 0800 	mov.w	r8, #0
		spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
 8001628:	f107 0a0c 	add.w	sl, r7, #12
 800162c:	f108 0801 	add.w	r8, r8, #1
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
 8001630:	fa1f f388 	uxth.w	r3, r8
 8001634:	4599      	cmp	r9, r3
 8001636:	d803      	bhi.n	8001640 <ili9340_write+0xd4>
}
 8001638:	2000      	movs	r0, #0
 800163a:	b009      	add	sp, #36	; 0x24
 800163c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tx_buf.len = desc->width * ILI9340_RGB_SIZE * write_h;
 8001640:	88a3      	ldrh	r3, [r4, #4]
		spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
 8001642:	68b8      	ldr	r0, [r7, #8]
		tx_buf.buf = (void *)write_data_start;
 8001644:	9501      	str	r5, [sp, #4]
		tx_buf.len = desc->width * ILI9340_RGB_SIZE * write_h;
 8001646:	4373      	muls	r3, r6
 8001648:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800164c:	9302      	str	r3, [sp, #8]
				       const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->driver_api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
 800164e:	6843      	ldr	r3, [r0, #4]
 8001650:	aa03      	add	r2, sp, #12
 8001652:	f8d3 b000 	ldr.w	fp, [r3]
 8001656:	4651      	mov	r1, sl
 8001658:	2300      	movs	r3, #0
 800165a:	47d8      	blx	fp
		write_data_start += (desc->pitch * ILI9340_RGB_SIZE);
 800165c:	8923      	ldrh	r3, [r4, #8]
 800165e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001662:	441d      	add	r5, r3
 8001664:	e7e2      	b.n	800162c <ili9340_write+0xc0>
 8001666:	bf00      	nop
 8001668:	08006348 	.word	0x08006348
 800166c:	08006348 	.word	0x08006348
 8001670:	080069b9 	.word	0x080069b9
 8001674:	08006773 	.word	0x08006773

08001678 <ili9340_display_blanking_off>:
	LOG_DBG("Turning display blanking off");
 8001678:	2304      	movs	r3, #4
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	f363 0207 	bfi	r2, r3, #0, #8
 8001682:	490a      	ldr	r1, [pc, #40]	; (80016ac <ili9340_display_blanking_off+0x34>)
 8001684:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <ili9340_display_blanking_off+0x38>)
{
 8001686:	b510      	push	{r4, lr}
 8001688:	1a5b      	subs	r3, r3, r1
 800168a:	08db      	lsrs	r3, r3, #3
	struct ili9340_data *data = (struct ili9340_data *)dev->driver_data;
 800168c:	6884      	ldr	r4, [r0, #8]
	LOG_DBG("Turning display blanking off");
 800168e:	4909      	ldr	r1, [pc, #36]	; (80016b4 <ili9340_display_blanking_off+0x3c>)
 8001690:	4809      	ldr	r0, [pc, #36]	; (80016b8 <ili9340_display_blanking_off+0x40>)
 8001692:	f363 128f 	bfi	r2, r3, #6, #10
 8001696:	f003 fa68 	bl	8004b6a <log_1>
	ili9340_transmit(data, ILI9340_CMD_DISPLAY_ON, NULL, 0);
 800169a:	2300      	movs	r3, #0
 800169c:	4620      	mov	r0, r4
 800169e:	461a      	mov	r2, r3
 80016a0:	2129      	movs	r1, #41	; 0x29
 80016a2:	f003 fd96 	bl	80051d2 <ili9340_transmit>
}
 80016a6:	2000      	movs	r0, #0
 80016a8:	bd10      	pop	{r4, pc}
 80016aa:	bf00      	nop
 80016ac:	08006348 	.word	0x08006348
 80016b0:	08006348 	.word	0x08006348
 80016b4:	08006781 	.word	0x08006781
 80016b8:	080067ba 	.word	0x080067ba

080016bc <ili9340_display_blanking_on>:
	LOG_DBG("Turning display blanking on");
 80016bc:	2304      	movs	r3, #4
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	f363 0207 	bfi	r2, r3, #0, #8
 80016c6:	490a      	ldr	r1, [pc, #40]	; (80016f0 <ili9340_display_blanking_on+0x34>)
 80016c8:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <ili9340_display_blanking_on+0x38>)
{
 80016ca:	b510      	push	{r4, lr}
 80016cc:	1a5b      	subs	r3, r3, r1
 80016ce:	08db      	lsrs	r3, r3, #3
	struct ili9340_data *data = (struct ili9340_data *)dev->driver_data;
 80016d0:	6884      	ldr	r4, [r0, #8]
	LOG_DBG("Turning display blanking on");
 80016d2:	4909      	ldr	r1, [pc, #36]	; (80016f8 <ili9340_display_blanking_on+0x3c>)
 80016d4:	4809      	ldr	r0, [pc, #36]	; (80016fc <ili9340_display_blanking_on+0x40>)
 80016d6:	f363 128f 	bfi	r2, r3, #6, #10
 80016da:	f003 fa46 	bl	8004b6a <log_1>
	ili9340_transmit(data, ILI9340_CMD_DISPLAY_OFF, NULL, 0);
 80016de:	2300      	movs	r3, #0
 80016e0:	4620      	mov	r0, r4
 80016e2:	461a      	mov	r2, r3
 80016e4:	2128      	movs	r1, #40	; 0x28
 80016e6:	f003 fd74 	bl	80051d2 <ili9340_transmit>
}
 80016ea:	2000      	movs	r0, #0
 80016ec:	bd10      	pop	{r4, pc}
 80016ee:	bf00      	nop
 80016f0:	08006348 	.word	0x08006348
 80016f4:	08006348 	.word	0x08006348
 80016f8:	0800679e 	.word	0x0800679e
 80016fc:	080067db 	.word	0x080067db

08001700 <ili9340_lcd_init>:
 */

#include "display_ili9340.h"

void ili9340_lcd_init(struct ili9340_data *data)
{
 8001700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u8_t tx_data[15];

	tx_data[0] = 0x23;
 8001702:	2323      	movs	r3, #35	; 0x23
 8001704:	f88d 3000 	strb.w	r3, [sp]
	ili9340_transmit(data, ILI9340_CMD_POWER_CTRL_1, tx_data, 1);
 8001708:	466a      	mov	r2, sp
 800170a:	2301      	movs	r3, #1
 800170c:	21c0      	movs	r1, #192	; 0xc0
{
 800170e:	4604      	mov	r4, r0
	ili9340_transmit(data, ILI9340_CMD_POWER_CTRL_1, tx_data, 1);
 8001710:	f003 fd5f 	bl	80051d2 <ili9340_transmit>

	tx_data[0] = 0x10;
 8001714:	2310      	movs	r3, #16
 8001716:	f88d 3000 	strb.w	r3, [sp]
	ili9340_transmit(data, ILI9340_CMD_POWER_CTRL_2, tx_data, 1);
 800171a:	466a      	mov	r2, sp
 800171c:	4620      	mov	r0, r4
 800171e:	2301      	movs	r3, #1
 8001720:	21c1      	movs	r1, #193	; 0xc1
 8001722:	f003 fd56 	bl	80051d2 <ili9340_transmit>

	tx_data[0] = 0x3e;
 8001726:	f642 033e 	movw	r3, #10302	; 0x283e
 800172a:	f8ad 3000 	strh.w	r3, [sp]
	tx_data[1] = 0x28;
	ili9340_transmit(data, ILI9340_CMD_VCOM_CTRL_1, tx_data, 2);
 800172e:	466a      	mov	r2, sp
 8001730:	4620      	mov	r0, r4
 8001732:	2302      	movs	r3, #2
 8001734:	21c5      	movs	r1, #197	; 0xc5
 8001736:	f003 fd4c 	bl	80051d2 <ili9340_transmit>

	tx_data[0] = 0x86;
 800173a:	2386      	movs	r3, #134	; 0x86
 800173c:	f88d 3000 	strb.w	r3, [sp]
	ili9340_transmit(data, ILI9340_CMD_VCOM_CTRL_2, tx_data, 1);
 8001740:	466a      	mov	r2, sp
 8001742:	4620      	mov	r0, r4
 8001744:	2301      	movs	r3, #1
 8001746:	21c7      	movs	r1, #199	; 0xc7
 8001748:	f003 fd43 	bl	80051d2 <ili9340_transmit>

	tx_data[0] =
 800174c:	2328      	movs	r3, #40	; 0x28
 800174e:	f88d 3000 	strb.w	r3, [sp]
	    ILI9340_DATA_MEM_ACCESS_CTRL_MV | ILI9340_DATA_MEM_ACCESS_CTRL_BGR;
	ili9340_transmit(data, ILI9340_CMD_MEM_ACCESS_CTRL, tx_data, 1);
 8001752:	466a      	mov	r2, sp
 8001754:	4620      	mov	r0, r4
 8001756:	2301      	movs	r3, #1
 8001758:	2136      	movs	r1, #54	; 0x36
 800175a:	f003 fd3a 	bl	80051d2 <ili9340_transmit>

#ifdef CONFIG_ILI9340_RGB565
	tx_data[0] = ILI9340_DATA_PIXEL_FORMAT_MCU_16_BIT |
		     ILI9340_DATA_PIXEL_FORMAT_RGB_16_BIT;
#else
	tx_data[0] = ILI9340_DATA_PIXEL_FORMAT_MCU_18_BIT |
 800175e:	2366      	movs	r3, #102	; 0x66
 8001760:	f88d 3000 	strb.w	r3, [sp]
		     ILI9340_DATA_PIXEL_FORMAT_RGB_18_BIT;
#endif
	ili9340_transmit(data, ILI9340_CMD_PIXEL_FORMAT_SET, tx_data, 1);
 8001764:	466a      	mov	r2, sp
 8001766:	4620      	mov	r0, r4
 8001768:	2301      	movs	r3, #1
 800176a:	213a      	movs	r1, #58	; 0x3a
 800176c:	f003 fd31 	bl	80051d2 <ili9340_transmit>

	tx_data[0] = 0x00;
 8001770:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001774:	f8ad 3000 	strh.w	r3, [sp]
	tx_data[1] = 0x18;
	ili9340_transmit(data, ILI9340_CMD_FRAME_CTRL_NORMAL_MODE, tx_data, 2);
 8001778:	466a      	mov	r2, sp
 800177a:	4620      	mov	r0, r4
 800177c:	2302      	movs	r3, #2
 800177e:	21b1      	movs	r1, #177	; 0xb1
 8001780:	f003 fd27 	bl	80051d2 <ili9340_transmit>

	tx_data[0] = 0x08;
 8001784:	f248 2308 	movw	r3, #33288	; 0x8208
 8001788:	f8ad 3000 	strh.w	r3, [sp]
	tx_data[1] = 0x82;
	tx_data[2] = 0x27;
 800178c:	2327      	movs	r3, #39	; 0x27
 800178e:	f88d 3002 	strb.w	r3, [sp, #2]
	ili9340_transmit(data, ILI9340_CMD_DISPLAY_FUNCTION_CTRL, tx_data, 3);
 8001792:	466a      	mov	r2, sp
 8001794:	4620      	mov	r0, r4
 8001796:	2303      	movs	r3, #3
 8001798:	21b6      	movs	r1, #182	; 0xb6
 800179a:	f003 fd1a 	bl	80051d2 <ili9340_transmit>

	tx_data[0] = 0x01;
 800179e:	2301      	movs	r3, #1
	ili9340_transmit(data, ILI9340_CMD_GAMMA_SET, tx_data, 1);
 80017a0:	466a      	mov	r2, sp
 80017a2:	4620      	mov	r0, r4
 80017a4:	2126      	movs	r1, #38	; 0x26
	tx_data[0] = 0x01;
 80017a6:	f88d 3000 	strb.w	r3, [sp]
	ili9340_transmit(data, ILI9340_CMD_GAMMA_SET, tx_data, 1);
 80017aa:	f003 fd12 	bl	80051d2 <ili9340_transmit>

	tx_data[0] = 0x0F;
	tx_data[1] = 0x31;
	tx_data[2] = 0x2B;
	tx_data[3] = 0x0C;
	tx_data[4] = 0x0E;
 80017ae:	4a13      	ldr	r2, [pc, #76]	; (80017fc <ili9340_lcd_init+0xfc>)
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <ili9340_lcd_init+0x100>)
 80017b2:	e9cd 2300 	strd	r2, r3, [sp]
	tx_data[5] = 0x08;
	tx_data[6] = 0x4E;
	tx_data[7] = 0xF1;
	tx_data[8] = 0x37;
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <ili9340_lcd_init+0x104>)
 80017b8:	9302      	str	r3, [sp, #8]
	tx_data[9] = 0x07;
	tx_data[10] = 0x10;
	tx_data[11] = 0x03;
	tx_data[12] = 0x0E;
 80017ba:	f640 130e 	movw	r3, #2318	; 0x90e
 80017be:	f8ad 300c 	strh.w	r3, [sp, #12]
	tx_data[13] = 0x09;
	tx_data[14] = 0x00;
 80017c2:	2300      	movs	r3, #0
 80017c4:	f88d 300e 	strb.w	r3, [sp, #14]
	ili9340_transmit(data, ILI9340_CMD_POSITIVE_GAMMA_CORRECTION, tx_data,
 80017c8:	466a      	mov	r2, sp
 80017ca:	4620      	mov	r0, r4
 80017cc:	230f      	movs	r3, #15
 80017ce:	21e0      	movs	r1, #224	; 0xe0
 80017d0:	f003 fcff 	bl	80051d2 <ili9340_transmit>

	tx_data[0] = 0x00;
	tx_data[1] = 0x0E;
	tx_data[2] = 0x14;
	tx_data[3] = 0x03;
	tx_data[4] = 0x11;
 80017d4:	490c      	ldr	r1, [pc, #48]	; (8001808 <ili9340_lcd_init+0x108>)
 80017d6:	4b0d      	ldr	r3, [pc, #52]	; (800180c <ili9340_lcd_init+0x10c>)
 80017d8:	e9cd 1300 	strd	r1, r3, [sp]
	tx_data[5] = 0x07;
	tx_data[6] = 0x31;
	tx_data[7] = 0xC1;
	tx_data[8] = 0x48;
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <ili9340_lcd_init+0x110>)
 80017de:	9302      	str	r3, [sp, #8]
	tx_data[9] = 0x08;
	tx_data[10] = 0x0F;
	tx_data[11] = 0x0C;
	tx_data[12] = 0x31;
 80017e0:	f243 6331 	movw	r3, #13873	; 0x3631
 80017e4:	f8ad 300c 	strh.w	r3, [sp, #12]
	tx_data[13] = 0x36;
	tx_data[14] = 0x0F;
	ili9340_transmit(data, ILI9340_CMD_NEGATIVE_GAMMA_CORRECTION, tx_data,
 80017e8:	466a      	mov	r2, sp
	tx_data[14] = 0x0F;
 80017ea:	230f      	movs	r3, #15
	ili9340_transmit(data, ILI9340_CMD_NEGATIVE_GAMMA_CORRECTION, tx_data,
 80017ec:	21e1      	movs	r1, #225	; 0xe1
 80017ee:	4620      	mov	r0, r4
	tx_data[14] = 0x0F;
 80017f0:	f88d 300e 	strb.w	r3, [sp, #14]
	ili9340_transmit(data, ILI9340_CMD_NEGATIVE_GAMMA_CORRECTION, tx_data,
 80017f4:	f003 fced 	bl	80051d2 <ili9340_transmit>
			 15);
}
 80017f8:	b004      	add	sp, #16
 80017fa:	bd10      	pop	{r4, pc}
 80017fc:	0c2b310f 	.word	0x0c2b310f
 8001800:	f14e080e 	.word	0xf14e080e
 8001804:	03100737 	.word	0x03100737
 8001808:	03140e00 	.word	0x03140e00
 800180c:	c1310711 	.word	0xc1310711
 8001810:	0c0f0848 	.word	0x0c0f0848

08001814 <z_pinmux_stm32_set>:
 *
 * @return 0 on success, error otherwise
 */
int z_pinmux_stm32_set(u32_t pin, u32_t func,
				struct device *clk)
{
 8001814:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001816:	4604      	mov	r4, r0
	/* make sure to enable port clock first */
	if (enable_port(STM32_PORT(pin), clk)) {
 8001818:	0906      	lsrs	r6, r0, #4
{
 800181a:	460d      	mov	r5, r1
	if (!clk) {
 800181c:	4610      	mov	r0, r2
 800181e:	b912      	cbnz	r2, 8001826 <z_pinmux_stm32_set+0x12>
 8001820:	4810      	ldr	r0, [pc, #64]	; (8001864 <z_pinmux_stm32_set+0x50>)
 8001822:	f001 ffd5 	bl	80037d0 <z_impl_device_get_binding>
	pclken.bus = STM32_CLOCK_BUS_GPIO;
 8001826:	2301      	movs	r3, #1
 8001828:	9300      	str	r3, [sp, #0]
	pclken.enr = ports_enable[port];
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <z_pinmux_stm32_set+0x54>)
 800182c:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8001830:	9301      	str	r3, [sp, #4]
	if (pclken.enr == STM32_PORT_NOT_AVAILABLE) {
 8001832:	3301      	adds	r3, #1
 8001834:	d102      	bne.n	800183c <z_pinmux_stm32_set+0x28>
		return -EIO;
 8001836:	f06f 0004 	mvn.w	r0, #4
 800183a:	e010      	b.n	800185e <z_pinmux_stm32_set+0x4a>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
 800183c:	6843      	ldr	r3, [r0, #4]
 800183e:	4669      	mov	r1, sp
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4798      	blx	r3
	if (enable_port(STM32_PORT(pin), clk)) {
 8001844:	2800      	cmp	r0, #0
 8001846:	d1f6      	bne.n	8001836 <z_pinmux_stm32_set+0x22>
	u32_t offset = STM32_PORT(pin) * GPIO_REG_SIZE;
 8001848:	1120      	asrs	r0, r4, #4
 800184a:	0280      	lsls	r0, r0, #10
	return gpio_stm32_configure((u32_t *)port_base,
 800184c:	f005 030f 	and.w	r3, r5, #15
 8001850:	462a      	mov	r2, r5
 8001852:	f004 010f 	and.w	r1, r4, #15
 8001856:	f100 4090 	add.w	r0, r0, #1207959552	; 0x48000000
 800185a:	f003 ff65 	bl	8005728 <gpio_stm32_configure>
	}

	return stm32_pin_configure(pin, func, func & STM32_AFR_MASK);
}
 800185e:	b002      	add	sp, #8
 8001860:	bd70      	pop	{r4, r5, r6, pc}
 8001862:	bf00      	nop
 8001864:	0800675d 	.word	0x0800675d
 8001868:	08006454 	.word	0x08006454

0800186c <stm32_setup_pins>:
 * @param pinconf  board pin configuration array
 * @param pins     array size
 */
void stm32_setup_pins(const struct pin_config *pinconf,
		      size_t pins)
{
 800186c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800186e:	4604      	mov	r4, r0
 8001870:	4809      	ldr	r0, [pc, #36]	; (8001898 <stm32_setup_pins+0x2c>)
 8001872:	460e      	mov	r6, r1
 8001874:	f001 ffac 	bl	80037d0 <z_impl_device_get_binding>
	struct device *clk;
	int i;

	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);

	for (i = 0; i < pins; i++) {
 8001878:	2500      	movs	r5, #0
 800187a:	4607      	mov	r7, r0
 800187c:	42b5      	cmp	r5, r6
 800187e:	f104 0408 	add.w	r4, r4, #8
 8001882:	d100      	bne.n	8001886 <stm32_setup_pins+0x1a>
		z_pinmux_stm32_set(pinconf[i].pin_num,
				  pinconf[i].mode,
				  clk);
	}
}
 8001884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_pinmux_stm32_set(pinconf[i].pin_num,
 8001886:	463a      	mov	r2, r7
 8001888:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800188c:	f814 0c08 	ldrb.w	r0, [r4, #-8]
 8001890:	f7ff ffc0 	bl	8001814 <z_pinmux_stm32_set>
	for (i = 0; i < pins; i++) {
 8001894:	3501      	adds	r5, #1
 8001896:	e7f1      	b.n	800187c <stm32_setup_pins+0x10>
 8001898:	0800675d 	.word	0x0800675d

0800189c <elapsed>:
	 * the double-overflow if called at the end of a cycle.  There
	 * is no safe algorithm here, so we split the difference by
	 * reading CTRL twice, suppressing the second overflow bit if
	 * VAL was "about to overflow".
	 */
	ctrl1 = SysTick->CTRL;
 800189c:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <elapsed+0x40>)
{
 800189e:	b530      	push	{r4, r5, lr}
	ctrl1 = SysTick->CTRL;
 80018a0:	681a      	ldr	r2, [r3, #0]
	val = SysTick->VAL & COUNTER_MAX;
 80018a2:	6899      	ldr	r1, [r3, #8]
	ctrl2 = SysTick->CTRL;
 80018a4:	681d      	ldr	r5, [r3, #0]
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <elapsed+0x44>)
 80018a8:	681c      	ldr	r4, [r3, #0]

	overflow_cyc += (ctrl1 & SysTick_CTRL_COUNTFLAG_Msk) ? last_load : 0;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <elapsed+0x48>)
 80018ac:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
 80018b0:	6818      	ldr	r0, [r3, #0]
 80018b2:	bf18      	it	ne
 80018b4:	4622      	movne	r2, r4
	val = SysTick->VAL & COUNTER_MAX;
 80018b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
	overflow_cyc += (ctrl1 & SysTick_CTRL_COUNTFLAG_Msk) ? last_load : 0;
 80018ba:	4402      	add	r2, r0
	if (val > VAL_ABOUT_TO_WRAP) {
 80018bc:	2908      	cmp	r1, #8
	overflow_cyc += (ctrl1 & SysTick_CTRL_COUNTFLAG_Msk) ? last_load : 0;
 80018be:	601a      	str	r2, [r3, #0]
	if (val > VAL_ABOUT_TO_WRAP) {
 80018c0:	d907      	bls.n	80018d2 <elapsed+0x36>
		int wrap = ctrl2 & SysTick_CTRL_COUNTFLAG_Msk;

		overflow_cyc += (wrap != 0) ? last_load : 0;
 80018c2:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	bf14      	ite	ne
 80018ca:	4620      	movne	r0, r4
 80018cc:	2000      	moveq	r0, #0
 80018ce:	4402      	add	r2, r0
 80018d0:	601a      	str	r2, [r3, #0]
	}

	return (last_load - val) + overflow_cyc;
 80018d2:	6818      	ldr	r0, [r3, #0]
 80018d4:	4420      	add	r0, r4
}
 80018d6:	1a40      	subs	r0, r0, r1
 80018d8:	bd30      	pop	{r4, r5, pc}
 80018da:	bf00      	nop
 80018dc:	e000e010 	.word	0xe000e010
 80018e0:	20000184 	.word	0x20000184
 80018e4:	20000188 	.word	0x20000188

080018e8 <z_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void z_clock_isr(void *arg)
{
 80018e8:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	u32_t dticks;

	cycle_count += last_load;
 80018ea:	4a0d      	ldr	r2, [pc, #52]	; (8001920 <z_clock_isr+0x38>)
 80018ec:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <z_clock_isr+0x3c>)
 80018ee:	6812      	ldr	r2, [r2, #0]
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	4410      	add	r0, r2
	dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 80018f4:	4a0c      	ldr	r2, [pc, #48]	; (8001928 <z_clock_isr+0x40>)
	cycle_count += last_load;
 80018f6:	6018      	str	r0, [r3, #0]
	dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 80018f8:	6811      	ldr	r1, [r2, #0]
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <z_clock_isr+0x44>)
 80018fc:	1a40      	subs	r0, r0, r1
 80018fe:	fbb0 f0f3 	udiv	r0, r0, r3
	announced_cycles += dticks * CYC_PER_TICK;
 8001902:	fb03 1300 	mla	r3, r3, r0, r1
 8001906:	6013      	str	r3, [r2, #0]

	overflow_cyc = SysTick->CTRL; /* Reset overflow flag */
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <z_clock_isr+0x48>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <z_clock_isr+0x4c>)
 800190e:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]

	z_clock_announce(TICKLESS ? dticks : 1);
 8001914:	f002 fd8a 	bl	800442c <z_clock_announce>
	z_ExcExit();
}
 8001918:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_ExcExit();
 800191c:	f000 bb8c 	b.w	8002038 <_IntExit>
 8001920:	20000184 	.word	0x20000184
 8001924:	20000180 	.word	0x20000180
 8001928:	2000017c 	.word	0x2000017c
 800192c:	000c3500 	.word	0x000c3500
 8001930:	e000e010 	.word	0xe000e010
 8001934:	20000188 	.word	0x20000188

08001938 <z_clock_driver_init>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <z_clock_driver_init+0x24>)
 800193a:	2210      	movs	r2, #16
 800193c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

int z_clock_driver_init(struct device *device)
{
	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8001940:	4b07      	ldr	r3, [pc, #28]	; (8001960 <z_clock_driver_init+0x28>)
 8001942:	4a08      	ldr	r2, [pc, #32]	; (8001964 <z_clock_driver_init+0x2c>)
 8001944:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <z_clock_driver_init+0x30>)
 8001948:	2000      	movs	r0, #0
 800194a:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 800194c:	4b07      	ldr	r3, [pc, #28]	; (800196c <z_clock_driver_init+0x34>)
 800194e:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8001950:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	f042 0207 	orr.w	r2, r2, #7
 8001958:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00
 8001960:	20000184 	.word	0x20000184
 8001964:	000c34ff 	.word	0x000c34ff
 8001968:	20000188 	.word	0x20000188
 800196c:	e000e010 	.word	0xe000e010

08001970 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
 8001970:	b570      	push	{r4, r5, r6, lr}
 8001972:	4c21      	ldr	r4, [pc, #132]	; (80019f8 <z_clock_set_timeout+0x88>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_IDLE) && idle && ticks == K_FOREVER) {
 8001974:	b151      	cbz	r1, 800198c <z_clock_set_timeout+0x1c>
 8001976:	1c43      	adds	r3, r0, #1
 8001978:	d108      	bne.n	800198c <z_clock_set_timeout+0x1c>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 800197a:	4a20      	ldr	r2, [pc, #128]	; (80019fc <z_clock_set_timeout+0x8c>)
 800197c:	6813      	ldr	r3, [r2, #0]
 800197e:	f023 0301 	bic.w	r3, r3, #1
 8001982:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
 8001984:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001988:	6023      	str	r3, [r4, #0]
	SysTick->LOAD = last_load - 1;
	SysTick->VAL = 0; /* resets timer to last_load */

	k_spin_unlock(&lock, key);
#endif
}
 800198a:	bd70      	pop	{r4, r5, r6, pc}
	ticks = MIN(MAX_TICKS, MAX(ticks - 1, 0));
 800198c:	3801      	subs	r0, #1
 800198e:	2813      	cmp	r0, #19
 8001990:	dc2c      	bgt.n	80019ec <z_clock_set_timeout+0x7c>
	delay = (ticks == 0) ? MIN_DELAY : ticks * CYC_PER_TICK;
 8001992:	2800      	cmp	r0, #0
 8001994:	dd2c      	ble.n	80019f0 <z_clock_set_timeout+0x80>
 8001996:	4e1a      	ldr	r6, [pc, #104]	; (8001a00 <z_clock_set_timeout+0x90>)
 8001998:	4346      	muls	r6, r0
	__asm__ volatile(
 800199a:	f04f 0310 	mov.w	r3, #16
 800199e:	f3ef 8511 	mrs	r5, BASEPRI
 80019a2:	f383 8811 	msr	BASEPRI, r3
 80019a6:	f3bf 8f6f 	isb	sy
	cycle_count += elapsed();
 80019aa:	f7ff ff77 	bl	800189c <elapsed>
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <z_clock_set_timeout+0x94>)
	delay = ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 80019b0:	4913      	ldr	r1, [pc, #76]	; (8001a00 <z_clock_set_timeout+0x90>)
	cycle_count += elapsed();
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4410      	add	r0, r2
 80019b6:	6018      	str	r0, [r3, #0]
	delay = delay + (cycle_count - announced_cycles);
 80019b8:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <z_clock_set_timeout+0x98>)
 80019ba:	681a      	ldr	r2, [r3, #0]
	delay = ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 80019bc:	f5c2 2343 	rsb	r3, r2, #798720	; 0xc3000
 80019c0:	f203 43ff 	addw	r3, r3, #1279	; 0x4ff
 80019c4:	4433      	add	r3, r6
 80019c6:	4403      	add	r3, r0
	last_load = delay - (cycle_count - announced_cycles);
 80019c8:	1a10      	subs	r0, r2, r0
	delay = ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 80019ca:	fbb3 f3f1 	udiv	r3, r3, r1
	last_load = delay - (cycle_count - announced_cycles);
 80019ce:	fb01 0003 	mla	r0, r1, r3, r0
	overflow_cyc = 0U;
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <z_clock_set_timeout+0x9c>)
	last_load = delay - (cycle_count - announced_cycles);
 80019d4:	6020      	str	r0, [r4, #0]
	overflow_cyc = 0U;
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = last_load - 1;
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <z_clock_set_timeout+0x8c>)
 80019dc:	3801      	subs	r0, #1
 80019de:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 80019e0:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
 80019e2:	f385 8811 	msr	BASEPRI, r5
 80019e6:	f3bf 8f6f 	isb	sy
 80019ea:	e7ce      	b.n	800198a <z_clock_set_timeout+0x1a>
	ticks = MIN(MAX_TICKS, MAX(ticks - 1, 0));
 80019ec:	2013      	movs	r0, #19
 80019ee:	e7d2      	b.n	8001996 <z_clock_set_timeout+0x26>
	delay = (ticks == 0) ? MIN_DELAY : ticks * CYC_PER_TICK;
 80019f0:	f24c 3650 	movw	r6, #50000	; 0xc350
 80019f4:	e7d1      	b.n	800199a <z_clock_set_timeout+0x2a>
 80019f6:	bf00      	nop
 80019f8:	20000184 	.word	0x20000184
 80019fc:	e000e010 	.word	0xe000e010
 8001a00:	000c3500 	.word	0x000c3500
 8001a04:	20000180 	.word	0x20000180
 8001a08:	2000017c 	.word	0x2000017c
 8001a0c:	20000188 	.word	0x20000188

08001a10 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
 8001a10:	b510      	push	{r4, lr}
	__asm__ volatile(
 8001a12:	f04f 0310 	mov.w	r3, #16
 8001a16:	f3ef 8411 	mrs	r4, BASEPRI
 8001a1a:	f383 8811 	msr	BASEPRI, r3
 8001a1e:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc = elapsed() + cycle_count - announced_cycles;
 8001a22:	f7ff ff3b 	bl	800189c <elapsed>
 8001a26:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <z_clock_elapsed+0x34>)
 8001a28:	4a07      	ldr	r2, [pc, #28]	; (8001a48 <z_clock_elapsed+0x38>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6812      	ldr	r2, [r2, #0]
 8001a2e:	1a9b      	subs	r3, r3, r2
 8001a30:	4418      	add	r0, r3
	__asm__ volatile(
 8001a32:	f384 8811 	msr	BASEPRI, r4
 8001a36:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 8001a3a:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <z_clock_elapsed+0x3c>)
 8001a3c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a40:	bd10      	pop	{r4, pc}
 8001a42:	bf00      	nop
 8001a44:	20000180 	.word	0x20000180
 8001a48:	2000017c 	.word	0x2000017c
 8001a4c:	000c3500 	.word	0x000c3500

08001a50 <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
 8001a50:	b510      	push	{r4, lr}
	__asm__ volatile(
 8001a52:	f04f 0310 	mov.w	r3, #16
 8001a56:	f3ef 8411 	mrs	r4, BASEPRI
 8001a5a:	f383 8811 	msr	BASEPRI, r3
 8001a5e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = elapsed() + cycle_count;
 8001a62:	f7ff ff1b 	bl	800189c <elapsed>
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <z_timer_cycle_get_32+0x28>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4418      	add	r0, r3
	__asm__ volatile(
 8001a6c:	f384 8811 	msr	BASEPRI, r4
 8001a70:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
 8001a74:	bd10      	pop	{r4, pc}
 8001a76:	bf00      	nop
 8001a78:	20000180 	.word	0x20000180

08001a7c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a7c:	6a03      	ldr	r3, [r0, #32]
 8001a7e:	f023 0301 	bic.w	r3, r3, #1
 8001a82:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a84:	6a03      	ldr	r3, [r0, #32]
{
 8001a86:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a88:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a8a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a8c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001a8e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a92:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001a96:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001a98:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001a9a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001a9e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001aa0:	4d1b      	ldr	r5, [pc, #108]	; (8001b10 <TIM_OC1_SetConfig+0x94>)
 8001aa2:	42a8      	cmp	r0, r5
 8001aa4:	d00f      	beq.n	8001ac6 <TIM_OC1_SetConfig+0x4a>
 8001aa6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001aaa:	42a8      	cmp	r0, r5
 8001aac:	d00b      	beq.n	8001ac6 <TIM_OC1_SetConfig+0x4a>
 8001aae:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001ab2:	42a8      	cmp	r0, r5
 8001ab4:	d007      	beq.n	8001ac6 <TIM_OC1_SetConfig+0x4a>
 8001ab6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001aba:	42a8      	cmp	r0, r5
 8001abc:	d003      	beq.n	8001ac6 <TIM_OC1_SetConfig+0x4a>
 8001abe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ac2:	42a8      	cmp	r0, r5
 8001ac4:	d11e      	bne.n	8001b04 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ac6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ac8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001acc:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ace:	4d10      	ldr	r5, [pc, #64]	; (8001b10 <TIM_OC1_SetConfig+0x94>)
 8001ad0:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ad2:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ad6:	d00f      	beq.n	8001af8 <TIM_OC1_SetConfig+0x7c>
 8001ad8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001adc:	42a8      	cmp	r0, r5
 8001ade:	d00b      	beq.n	8001af8 <TIM_OC1_SetConfig+0x7c>
 8001ae0:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001ae4:	42a8      	cmp	r0, r5
 8001ae6:	d007      	beq.n	8001af8 <TIM_OC1_SetConfig+0x7c>
 8001ae8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001aec:	42a8      	cmp	r0, r5
 8001aee:	d003      	beq.n	8001af8 <TIM_OC1_SetConfig+0x7c>
 8001af0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001af4:	42a8      	cmp	r0, r5
 8001af6:	d105      	bne.n	8001b04 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001af8:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001afc:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8001b00:	4334      	orrs	r4, r6
 8001b02:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b04:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b06:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001b08:	684a      	ldr	r2, [r1, #4]
 8001b0a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b0c:	6203      	str	r3, [r0, #32]
}
 8001b0e:	bd70      	pop	{r4, r5, r6, pc}
 8001b10:	40012c00 	.word	0x40012c00

08001b14 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001b14:	6a03      	ldr	r3, [r0, #32]
 8001b16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b1a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b1c:	6a03      	ldr	r3, [r0, #32]
{
 8001b1e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b20:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b22:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001b24:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001b26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b2a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001b2e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001b30:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001b32:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001b36:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001b3a:	4d16      	ldr	r5, [pc, #88]	; (8001b94 <TIM_OC3_SetConfig+0x80>)
 8001b3c:	42a8      	cmp	r0, r5
 8001b3e:	d003      	beq.n	8001b48 <TIM_OC3_SetConfig+0x34>
 8001b40:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001b44:	42a8      	cmp	r0, r5
 8001b46:	d10d      	bne.n	8001b64 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001b48:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001b4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001b4e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b52:	4d10      	ldr	r5, [pc, #64]	; (8001b94 <TIM_OC3_SetConfig+0x80>)
 8001b54:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8001b56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b5a:	d00e      	beq.n	8001b7a <TIM_OC3_SetConfig+0x66>
 8001b5c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001b60:	42a8      	cmp	r0, r5
 8001b62:	d00a      	beq.n	8001b7a <TIM_OC3_SetConfig+0x66>
 8001b64:	4d0c      	ldr	r5, [pc, #48]	; (8001b98 <TIM_OC3_SetConfig+0x84>)
 8001b66:	42a8      	cmp	r0, r5
 8001b68:	d007      	beq.n	8001b7a <TIM_OC3_SetConfig+0x66>
 8001b6a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b6e:	42a8      	cmp	r0, r5
 8001b70:	d003      	beq.n	8001b7a <TIM_OC3_SetConfig+0x66>
 8001b72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b76:	42a8      	cmp	r0, r5
 8001b78:	d106      	bne.n	8001b88 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001b7a:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001b7e:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8001b82:	4334      	orrs	r4, r6
 8001b84:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b88:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001b8a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001b8c:	684a      	ldr	r2, [r1, #4]
 8001b8e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b90:	6203      	str	r3, [r0, #32]
}
 8001b92:	bd70      	pop	{r4, r5, r6, pc}
 8001b94:	40012c00 	.word	0x40012c00
 8001b98:	40014000 	.word	0x40014000

08001b9c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001b9c:	6a03      	ldr	r3, [r0, #32]
 8001b9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ba2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ba4:	6a03      	ldr	r3, [r0, #32]
{
 8001ba6:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ba8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001baa:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001bac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001bae:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001bb2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001bb6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001bba:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001bbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001bc0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bc4:	4d0e      	ldr	r5, [pc, #56]	; (8001c00 <TIM_OC4_SetConfig+0x64>)
 8001bc6:	42a8      	cmp	r0, r5
 8001bc8:	d00f      	beq.n	8001bea <TIM_OC4_SetConfig+0x4e>
 8001bca:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001bce:	42a8      	cmp	r0, r5
 8001bd0:	d00b      	beq.n	8001bea <TIM_OC4_SetConfig+0x4e>
 8001bd2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001bd6:	42a8      	cmp	r0, r5
 8001bd8:	d007      	beq.n	8001bea <TIM_OC4_SetConfig+0x4e>
 8001bda:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001bde:	42a8      	cmp	r0, r5
 8001be0:	d003      	beq.n	8001bea <TIM_OC4_SetConfig+0x4e>
 8001be2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001be6:	42a8      	cmp	r0, r5
 8001be8:	d104      	bne.n	8001bf4 <TIM_OC4_SetConfig+0x58>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001bea:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001bec:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001bf0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001bf4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001bf6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001bf8:	684a      	ldr	r2, [r1, #4]
 8001bfa:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001bfc:	6203      	str	r3, [r0, #32]
}
 8001bfe:	bd30      	pop	{r4, r5, pc}
 8001c00:	40012c00 	.word	0x40012c00

08001c04 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001c04:	6a03      	ldr	r3, [r0, #32]
 8001c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c0a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c0c:	6a03      	ldr	r3, [r0, #32]
{
 8001c0e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c10:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001c12:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c14:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001c16:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c1a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8001c1e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001c20:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8001c22:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001c26:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c2a:	4d0f      	ldr	r5, [pc, #60]	; (8001c68 <TIM_OC5_SetConfig+0x64>)
 8001c2c:	42a8      	cmp	r0, r5
 8001c2e:	d00f      	beq.n	8001c50 <TIM_OC5_SetConfig+0x4c>
 8001c30:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001c34:	42a8      	cmp	r0, r5
 8001c36:	d00b      	beq.n	8001c50 <TIM_OC5_SetConfig+0x4c>
 8001c38:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001c3c:	42a8      	cmp	r0, r5
 8001c3e:	d007      	beq.n	8001c50 <TIM_OC5_SetConfig+0x4c>
 8001c40:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c44:	42a8      	cmp	r0, r5
 8001c46:	d003      	beq.n	8001c50 <TIM_OC5_SetConfig+0x4c>
 8001c48:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c4c:	42a8      	cmp	r0, r5
 8001c4e:	d104      	bne.n	8001c5a <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001c50:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001c52:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001c56:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c5a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001c5c:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001c5e:	684a      	ldr	r2, [r1, #4]
 8001c60:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c62:	6203      	str	r3, [r0, #32]
}
 8001c64:	bd30      	pop	{r4, r5, pc}
 8001c66:	bf00      	nop
 8001c68:	40012c00 	.word	0x40012c00

08001c6c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001c6c:	6a03      	ldr	r3, [r0, #32]
 8001c6e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001c72:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c74:	6a03      	ldr	r3, [r0, #32]
{
 8001c76:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c78:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001c7a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c7c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001c7e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001c82:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c86:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001c8a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001c8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001c90:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c94:	4d0e      	ldr	r5, [pc, #56]	; (8001cd0 <TIM_OC6_SetConfig+0x64>)
 8001c96:	42a8      	cmp	r0, r5
 8001c98:	d00f      	beq.n	8001cba <TIM_OC6_SetConfig+0x4e>
 8001c9a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001c9e:	42a8      	cmp	r0, r5
 8001ca0:	d00b      	beq.n	8001cba <TIM_OC6_SetConfig+0x4e>
 8001ca2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001ca6:	42a8      	cmp	r0, r5
 8001ca8:	d007      	beq.n	8001cba <TIM_OC6_SetConfig+0x4e>
 8001caa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cae:	42a8      	cmp	r0, r5
 8001cb0:	d003      	beq.n	8001cba <TIM_OC6_SetConfig+0x4e>
 8001cb2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cb6:	42a8      	cmp	r0, r5
 8001cb8:	d104      	bne.n	8001cc4 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001cba:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001cbc:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001cc0:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cc4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001cc6:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001cc8:	684a      	ldr	r2, [r1, #4]
 8001cca:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ccc:	6203      	str	r3, [r0, #32]
}
 8001cce:	bd30      	pop	{r4, r5, pc}
 8001cd0:	40012c00 	.word	0x40012c00

08001cd4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cd4:	4a30      	ldr	r2, [pc, #192]	; (8001d98 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001cd6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cd8:	4290      	cmp	r0, r2
 8001cda:	d012      	beq.n	8001d02 <TIM_Base_SetConfig+0x2e>
 8001cdc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001ce0:	d00f      	beq.n	8001d02 <TIM_Base_SetConfig+0x2e>
 8001ce2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001ce6:	4290      	cmp	r0, r2
 8001ce8:	d00b      	beq.n	8001d02 <TIM_Base_SetConfig+0x2e>
 8001cea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cee:	4290      	cmp	r0, r2
 8001cf0:	d007      	beq.n	8001d02 <TIM_Base_SetConfig+0x2e>
 8001cf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cf6:	4290      	cmp	r0, r2
 8001cf8:	d003      	beq.n	8001d02 <TIM_Base_SetConfig+0x2e>
 8001cfa:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8001cfe:	4290      	cmp	r0, r2
 8001d00:	d119      	bne.n	8001d36 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8001d02:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001d08:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d0a:	4a23      	ldr	r2, [pc, #140]	; (8001d98 <TIM_Base_SetConfig+0xc4>)
 8001d0c:	4290      	cmp	r0, r2
 8001d0e:	d01d      	beq.n	8001d4c <TIM_Base_SetConfig+0x78>
 8001d10:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d14:	d01a      	beq.n	8001d4c <TIM_Base_SetConfig+0x78>
 8001d16:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001d1a:	4290      	cmp	r0, r2
 8001d1c:	d016      	beq.n	8001d4c <TIM_Base_SetConfig+0x78>
 8001d1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d22:	4290      	cmp	r0, r2
 8001d24:	d012      	beq.n	8001d4c <TIM_Base_SetConfig+0x78>
 8001d26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d2a:	4290      	cmp	r0, r2
 8001d2c:	d00e      	beq.n	8001d4c <TIM_Base_SetConfig+0x78>
 8001d2e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8001d32:	4290      	cmp	r0, r2
 8001d34:	d00a      	beq.n	8001d4c <TIM_Base_SetConfig+0x78>
 8001d36:	4a19      	ldr	r2, [pc, #100]	; (8001d9c <TIM_Base_SetConfig+0xc8>)
 8001d38:	4290      	cmp	r0, r2
 8001d3a:	d007      	beq.n	8001d4c <TIM_Base_SetConfig+0x78>
 8001d3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d40:	4290      	cmp	r0, r2
 8001d42:	d003      	beq.n	8001d4c <TIM_Base_SetConfig+0x78>
 8001d44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d48:	4290      	cmp	r0, r2
 8001d4a:	d103      	bne.n	8001d54 <TIM_Base_SetConfig+0x80>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d4c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d52:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d54:	694a      	ldr	r2, [r1, #20]
 8001d56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d5a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001d5c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d5e:	688b      	ldr	r3, [r1, #8]
 8001d60:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001d62:	680b      	ldr	r3, [r1, #0]
 8001d64:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d66:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <TIM_Base_SetConfig+0xc4>)
 8001d68:	4298      	cmp	r0, r3
 8001d6a:	d00f      	beq.n	8001d8c <TIM_Base_SetConfig+0xb8>
 8001d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d70:	4298      	cmp	r0, r3
 8001d72:	d00b      	beq.n	8001d8c <TIM_Base_SetConfig+0xb8>
 8001d74:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001d78:	4298      	cmp	r0, r3
 8001d7a:	d007      	beq.n	8001d8c <TIM_Base_SetConfig+0xb8>
 8001d7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d80:	4298      	cmp	r0, r3
 8001d82:	d003      	beq.n	8001d8c <TIM_Base_SetConfig+0xb8>
 8001d84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d88:	4298      	cmp	r0, r3
 8001d8a:	d101      	bne.n	8001d90 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8001d8c:	690b      	ldr	r3, [r1, #16]
 8001d8e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001d90:	2301      	movs	r3, #1
 8001d92:	6143      	str	r3, [r0, #20]
}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40012c00 	.word	0x40012c00
 8001d9c:	40014000 	.word	0x40014000

08001da0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001da0:	6a03      	ldr	r3, [r0, #32]
 8001da2:	f023 0310 	bic.w	r3, r3, #16
 8001da6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001da8:	6a03      	ldr	r3, [r0, #32]
{
 8001daa:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8001dac:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001dae:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001db0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001db2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001db6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001dba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001dbe:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001dc0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001dc4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001dc8:	4d16      	ldr	r5, [pc, #88]	; (8001e24 <TIM_OC2_SetConfig+0x84>)
 8001dca:	42a8      	cmp	r0, r5
 8001dcc:	d003      	beq.n	8001dd6 <TIM_OC2_SetConfig+0x36>
 8001dce:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001dd2:	42a8      	cmp	r0, r5
 8001dd4:	d10d      	bne.n	8001df2 <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001dd6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001dd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001ddc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001de0:	4d10      	ldr	r5, [pc, #64]	; (8001e24 <TIM_OC2_SetConfig+0x84>)
 8001de2:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8001de4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001de8:	d00e      	beq.n	8001e08 <TIM_OC2_SetConfig+0x68>
 8001dea:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001dee:	42a8      	cmp	r0, r5
 8001df0:	d00a      	beq.n	8001e08 <TIM_OC2_SetConfig+0x68>
 8001df2:	4d0d      	ldr	r5, [pc, #52]	; (8001e28 <TIM_OC2_SetConfig+0x88>)
 8001df4:	42a8      	cmp	r0, r5
 8001df6:	d007      	beq.n	8001e08 <TIM_OC2_SetConfig+0x68>
 8001df8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001dfc:	42a8      	cmp	r0, r5
 8001dfe:	d003      	beq.n	8001e08 <TIM_OC2_SetConfig+0x68>
 8001e00:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e04:	42a8      	cmp	r0, r5
 8001e06:	d106      	bne.n	8001e16 <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e08:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e0c:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8001e10:	4334      	orrs	r4, r6
 8001e12:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8001e16:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001e18:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001e1a:	684a      	ldr	r2, [r1, #4]
 8001e1c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001e1e:	6203      	str	r3, [r0, #32]
}
 8001e20:	bd70      	pop	{r4, r5, r6, pc}
 8001e22:	bf00      	nop
 8001e24:	40012c00 	.word	0x40012c00
 8001e28:	40014000 	.word	0x40014000

08001e2c <HAL_TIM_OC_Start>:
{
 8001e2c:	b510      	push	{r4, lr}
 8001e2e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e30:	2201      	movs	r2, #1
 8001e32:	6800      	ldr	r0, [r0, #0]
 8001e34:	f003 fa9f 	bl	8005376 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e38:	6823      	ldr	r3, [r4, #0]
 8001e3a:	4a12      	ldr	r2, [pc, #72]	; (8001e84 <HAL_TIM_OC_Start+0x58>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d00f      	beq.n	8001e60 <HAL_TIM_OC_Start+0x34>
 8001e40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d00b      	beq.n	8001e60 <HAL_TIM_OC_Start+0x34>
 8001e48:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d007      	beq.n	8001e60 <HAL_TIM_OC_Start+0x34>
 8001e50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d003      	beq.n	8001e60 <HAL_TIM_OC_Start+0x34>
 8001e58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d103      	bne.n	8001e68 <HAL_TIM_OC_Start+0x3c>
    __HAL_TIM_MOE_ENABLE(htim);
 8001e60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e66:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e68:	6899      	ldr	r1, [r3, #8]
 8001e6a:	4a07      	ldr	r2, [pc, #28]	; (8001e88 <HAL_TIM_OC_Start+0x5c>)
 8001e6c:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e6e:	2a06      	cmp	r2, #6
 8001e70:	d006      	beq.n	8001e80 <HAL_TIM_OC_Start+0x54>
 8001e72:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    __HAL_TIM_ENABLE(htim);
 8001e76:	bf1e      	ittt	ne
 8001e78:	681a      	ldrne	r2, [r3, #0]
 8001e7a:	f042 0201 	orrne.w	r2, r2, #1
 8001e7e:	601a      	strne	r2, [r3, #0]
}
 8001e80:	2000      	movs	r0, #0
 8001e82:	bd10      	pop	{r4, pc}
 8001e84:	40012c00 	.word	0x40012c00
 8001e88:	00010007 	.word	0x00010007

08001e8c <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <UTILS_PLL_IsBusy+0x24>)
 8001e8e:	6819      	ldr	r1, [r3, #0]
  * @rmtoll CR           PLLSAI1RDY    LL_RCC_PLLSAI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI1_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8001e90:	681a      	ldr	r2, [r3, #0]
  * @rmtoll CR           PLLSAI2RDY    LL_RCC_PLLSAI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI2_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RCC_CR_PLLSAI2RDY) ? 1UL : 0UL);
 8001e92:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8001e94:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8001e98:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	bf14      	ite	ne
 8001ea0:	2001      	movne	r0, #1
 8001ea2:	2000      	moveq	r0, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RCC_CR_PLLSAI2RDY) ? 1UL : 0UL);
 8001ea4:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
    status = ERROR;
  }
#endif /*RCC_PLLSAI2_SUPPORT*/

  return status;
}
 8001ea8:	bf18      	it	ne
 8001eaa:	2001      	movne	r0, #1
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000

08001eb4 <UTILS_SetFlashLatency.part.0>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 8001eb4:	4b17      	ldr	r3, [pc, #92]	; (8001f14 <UTILS_SetFlashLatency.part.0+0x60>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8001ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ec0:	d11a      	bne.n	8001ef8 <UTILS_SetFlashLatency.part.0+0x44>
      if(HCLK_Frequency > UTILS_SCALE1_LATENCY4_FREQ)
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <UTILS_SetFlashLatency.part.0+0x64>)
 8001ec4:	4298      	cmp	r0, r3
 8001ec6:	d81f      	bhi.n	8001f08 <UTILS_SetFlashLatency.part.0+0x54>
      else if(HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)
 8001ec8:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <UTILS_SetFlashLatency.part.0+0x68>)
 8001eca:	4298      	cmp	r0, r3
 8001ecc:	d81e      	bhi.n	8001f0c <UTILS_SetFlashLatency.part.0+0x58>
      else if(HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)
 8001ece:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <UTILS_SetFlashLatency.part.0+0x6c>)
 8001ed0:	4298      	cmp	r0, r3
 8001ed2:	d81d      	bhi.n	8001f10 <UTILS_SetFlashLatency.part.0+0x5c>
        if(HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ)
 8001ed4:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <UTILS_SetFlashLatency.part.0+0x70>)
        if(HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)
 8001ed6:	4298      	cmp	r0, r3
 8001ed8:	bf94      	ite	ls
 8001eda:	2000      	movls	r0, #0
 8001edc:	2001      	movhi	r0, #1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001ede:	4a12      	ldr	r2, [pc, #72]	; (8001f28 <UTILS_SetFlashLatency.part.0+0x74>)
 8001ee0:	6813      	ldr	r3, [r2, #0]
 8001ee2:	f023 0307 	bic.w	r3, r3, #7
 8001ee6:	4303      	orrs	r3, r0
 8001ee8:	6013      	str	r3, [r2, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001eea:	6813      	ldr	r3, [r2, #0]
 8001eec:	f003 0307 	and.w	r3, r3, #7
}
 8001ef0:	1a18      	subs	r0, r3, r0
 8001ef2:	bf18      	it	ne
 8001ef4:	2001      	movne	r0, #1
 8001ef6:	4770      	bx	lr
      if(HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <UTILS_SetFlashLatency.part.0+0x78>)
 8001efa:	4298      	cmp	r0, r3
 8001efc:	d806      	bhi.n	8001f0c <UTILS_SetFlashLatency.part.0+0x58>
      else if(HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)
 8001efe:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <UTILS_SetFlashLatency.part.0+0x7c>)
 8001f00:	4298      	cmp	r0, r3
 8001f02:	d805      	bhi.n	8001f10 <UTILS_SetFlashLatency.part.0+0x5c>
        if(HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <UTILS_SetFlashLatency.part.0+0x80>)
 8001f06:	e7e6      	b.n	8001ed6 <UTILS_SetFlashLatency.part.0+0x22>
        latency = LL_FLASH_LATENCY_4;
 8001f08:	2004      	movs	r0, #4
 8001f0a:	e7e8      	b.n	8001ede <UTILS_SetFlashLatency.part.0+0x2a>
        latency = LL_FLASH_LATENCY_3;
 8001f0c:	2003      	movs	r0, #3
 8001f0e:	e7e6      	b.n	8001ede <UTILS_SetFlashLatency.part.0+0x2a>
        latency = LL_FLASH_LATENCY_2;
 8001f10:	2002      	movs	r0, #2
 8001f12:	e7e4      	b.n	8001ede <UTILS_SetFlashLatency.part.0+0x2a>
 8001f14:	40007000 	.word	0x40007000
 8001f18:	03d09000 	.word	0x03d09000
 8001f1c:	02dc6c00 	.word	0x02dc6c00
 8001f20:	01e84800 	.word	0x01e84800
 8001f24:	00f42400 	.word	0x00f42400
 8001f28:	40022000 	.word	0x40022000
 8001f2c:	0112a880 	.word	0x0112a880
 8001f30:	00b71b00 	.word	0x00b71b00
 8001f34:	005b8d80 	.word	0x005b8d80

08001f38 <UTILS_EnablePLLAndSwitchSystem>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 8001f38:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8001f3a:	680b      	ldr	r3, [r1, #0]
 8001f3c:	4a23      	ldr	r2, [pc, #140]	; (8001fcc <UTILS_EnablePLLAndSwitchSystem+0x94>)

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 8001f3e:	4d24      	ldr	r5, [pc, #144]	; (8001fd0 <UTILS_EnablePLLAndSwitchSystem+0x98>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8001f40:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001f44:	5cd4      	ldrb	r4, [r2, r3]
  if(SystemCoreClock < hclk_frequency)
 8001f46:	682b      	ldr	r3, [r5, #0]
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8001f48:	fa20 f404 	lsr.w	r4, r0, r4
  if(SystemCoreClock < hclk_frequency)
 8001f4c:	42a3      	cmp	r3, r4
 8001f4e:	d328      	bcc.n	8001fa2 <UTILS_EnablePLLAndSwitchSystem+0x6a>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001f50:	4b20      	ldr	r3, [pc, #128]	; (8001fd4 <UTILS_EnablePLLAndSwitchSystem+0x9c>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001f58:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001f5a:	68da      	ldr	r2, [r3, #12]
 8001f5c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001f60:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	0192      	lsls	r2, r2, #6
 8001f66:	d5fc      	bpl.n	8001f62 <UTILS_EnablePLLAndSwitchSystem+0x2a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	6808      	ldr	r0, [r1, #0]
 8001f6c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001f70:	4302      	orrs	r2, r0
 8001f72:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	f042 0203 	orr.w	r2, r2, #3
 8001f7a:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	f002 020c 	and.w	r2, r2, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001f82:	2a0c      	cmp	r2, #12
 8001f84:	d1fa      	bne.n	8001f7c <UTILS_EnablePLLAndSwitchSystem+0x44>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	6848      	ldr	r0, [r1, #4]
 8001f8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f8e:	4302      	orrs	r2, r0
 8001f90:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	6889      	ldr	r1, [r1, #8]
 8001f96:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	e005      	b.n	8001fae <UTILS_EnablePLLAndSwitchSystem+0x76>
  if(HCLK_Frequency == 0U)
 8001fa2:	b174      	cbz	r4, 8001fc2 <UTILS_EnablePLLAndSwitchSystem+0x8a>
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	f7ff ff85 	bl	8001eb4 <UTILS_SetFlashLatency.part.0>
  if(status == SUCCESS)
 8001faa:	2800      	cmp	r0, #0
 8001fac:	d0d0      	beq.n	8001f50 <UTILS_EnablePLLAndSwitchSystem+0x18>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 8001fae:	682b      	ldr	r3, [r5, #0]
 8001fb0:	42a3      	cmp	r3, r4
 8001fb2:	d903      	bls.n	8001fbc <UTILS_EnablePLLAndSwitchSystem+0x84>
  if(HCLK_Frequency == 0U)
 8001fb4:	b13c      	cbz	r4, 8001fc6 <UTILS_EnablePLLAndSwitchSystem+0x8e>
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	f7ff ff7c 	bl	8001eb4 <UTILS_SetFlashLatency.part.0>
    /* Set FLASH latency to lowest latency */
    status = UTILS_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 8001fbc:	b900      	cbnz	r0, 8001fc0 <UTILS_EnablePLLAndSwitchSystem+0x88>
  SystemCoreClock = HCLKFrequency;
 8001fbe:	602c      	str	r4, [r5, #0]
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 8001fc0:	bd38      	pop	{r3, r4, r5, pc}
    status = ERROR;
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	e7f3      	b.n	8001fae <UTILS_EnablePLLAndSwitchSystem+0x76>
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	e7fa      	b.n	8001fc0 <UTILS_EnablePLLAndSwitchSystem+0x88>
 8001fca:	bf00      	nop
 8001fcc:	080069f9 	.word	0x080069f9
 8001fd0:	200058ac 	.word	0x200058ac
 8001fd4:	40021000 	.word	0x40021000

08001fd8 <LL_PLL_ConfigSystemClock_HSI>:
{
 8001fd8:	b570      	push	{r4, r5, r6, lr}
 8001fda:	4605      	mov	r5, r0
 8001fdc:	460c      	mov	r4, r1
  if(UTILS_PLL_IsBusy() == SUCCESS)
 8001fde:	f7ff ff55 	bl	8001e8c <UTILS_PLL_IsBusy>
 8001fe2:	bb00      	cbnz	r0, 8002026 <LL_PLL_ConfigSystemClock_HSI+0x4e>
    pllfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 8001fe4:	4629      	mov	r1, r5
 8001fe6:	4811      	ldr	r0, [pc, #68]	; (800202c <LL_PLL_ConfigSystemClock_HSI+0x54>)
 8001fe8:	f003 f9d5 	bl	8005396 <UTILS_GetPLLOutputFrequency>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001fec:	4a10      	ldr	r2, [pc, #64]	; (8002030 <LL_PLL_ConfigSystemClock_HSI+0x58>)
 8001fee:	6813      	ldr	r3, [r2, #0]
 8001ff0:	0559      	lsls	r1, r3, #21
 8001ff2:	d406      	bmi.n	8002002 <LL_PLL_ConfigSystemClock_HSI+0x2a>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001ff4:	6813      	ldr	r3, [r2, #0]
 8001ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffa:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001ffc:	6813      	ldr	r3, [r2, #0]
 8001ffe:	055b      	lsls	r3, r3, #21
 8002000:	d5fc      	bpl.n	8001ffc <LL_PLL_ConfigSystemClock_HSI+0x24>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8002002:	68d6      	ldr	r6, [r2, #12]
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <LL_PLL_ConfigSystemClock_HSI+0x5c>)
 8002006:	6869      	ldr	r1, [r5, #4]
 8002008:	4033      	ands	r3, r6
 800200a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800200e:	6829      	ldr	r1, [r5, #0]
 8002010:	430b      	orrs	r3, r1
 8002012:	68a9      	ldr	r1, [r5, #8]
 8002014:	430b      	orrs	r3, r1
 8002016:	f043 0302 	orr.w	r3, r3, #2
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 800201a:	4621      	mov	r1, r4
 800201c:	60d3      	str	r3, [r2, #12]
}
 800201e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8002022:	f7ff bf89 	b.w	8001f38 <UTILS_EnablePLLAndSwitchSystem>
}
 8002026:	2001      	movs	r0, #1
 8002028:	bd70      	pop	{r4, r5, r6, pc}
 800202a:	bf00      	nop
 800202c:	00f42400 	.word	0x00f42400
 8002030:	40021000 	.word	0x40021000
 8002034:	f9ff808c 	.word	0xf9ff808c

08002038 <_IntExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
 8002038:	4804      	ldr	r0, [pc, #16]	; (800204c <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
 800203a:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
 800203c:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
 800203e:	4288      	cmp	r0, r1
    beq _EXIT_EXC
 8002040:	d003      	beq.n	800204a <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
 8002042:	4903      	ldr	r1, [pc, #12]	; (8002050 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
 8002044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
 8002048:	600a      	str	r2, [r1, #0]

0800204a <_EXIT_EXC>:
    mov lr, r1
#else
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */
    bx lr
 800204a:	4770      	bx	lr
    ldr r0, =_kernel
 800204c:	20004370 	.word	0x20004370
    ldr r1, =_SCS_ICSR
 8002050:	e000ed04 	.word	0xe000ed04

08002054 <z_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002054:	4804      	ldr	r0, [pc, #16]	; (8002068 <z_IntLibInit+0x14>)
 * @return N/A
 */

void z_IntLibInit(void)
{
	int irq = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	2110      	movs	r1, #16
 800205a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 800205c:	3301      	adds	r3, #1
 800205e:	2b52      	cmp	r3, #82	; 0x52
 8002060:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8002064:	d1f9      	bne.n	800205a <z_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8002066:	4770      	bx	lr
 8002068:	e000e100 	.word	0xe000e100

0800206c <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
 800206c:	4a09      	ldr	r2, [pc, #36]	; (8002094 <__swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 800206e:	490a      	ldr	r1, [pc, #40]	; (8002098 <__swap+0x2c>)
	_current->arch.basepri = key;
 8002070:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8002072:	6809      	ldr	r1, [r1, #0]
 8002074:	6699      	str	r1, [r3, #104]	; 0x68

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8002076:	4909      	ldr	r1, [pc, #36]	; (800209c <__swap+0x30>)
	_current->arch.basepri = key;
 8002078:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800207a:	684b      	ldr	r3, [r1, #4]
 800207c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002080:	604b      	str	r3, [r1, #4]
 8002082:	2300      	movs	r3, #0
 8002084:	f383 8811 	msr	BASEPRI, r3
 8002088:	f3bf 8f6f 	isb	sy
	irq_unlock(0);

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 800208c:	6893      	ldr	r3, [r2, #8]
}
 800208e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	20004370 	.word	0x20004370
 8002098:	080065bc 	.word	0x080065bc
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <__pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 80020a0:	4913      	ldr	r1, [pc, #76]	; (80020f0 <__pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
 80020a2:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 80020a4:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
 80020a8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
 80020aa:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 80020ae:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80020b2:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80020b4:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 80020b8:	f3bf 8f6f 	isb	sy
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
 80020bc:	4f0d      	ldr	r7, [pc, #52]	; (80020f4 <__pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 80020be:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 80020c2:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
 80020c4:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
 80020c6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 80020c8:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs.n r3, #0
 80020ca:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 80020cc:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 80020ce:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
 80020d2:	b504      	push	{r2, lr}
    ldr r0, =_kernel
 80020d4:	4806      	ldr	r0, [pc, #24]	; (80020f0 <__pendsv+0x50>)
    ldr r0, [r0, #_kernel_offset_to_current]
 80020d6:	6880      	ldr	r0, [r0, #8]
    bl z_arch_configure_dynamic_mpu_regions
 80020d8:	f003 f97a 	bl	80053d0 <z_arch_configure_dynamic_mpu_regions>
    pop {r2,lr}
 80020dc:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 80020e0:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
 80020e4:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

    msr PSP, ip
 80020e8:	f38c 8809 	msr	PSP, ip
    pop {r0, lr}
#endif
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
 80020ec:	4770      	bx	lr
 80020ee:	0000      	.short	0x0000
    ldr r1, =_kernel
 80020f0:	20004370 	.word	0x20004370
    ldr v4, =_SCS_ICSR
 80020f4:	e000ed04 	.word	0xe000ed04

080020f8 <__svc>:
 * - System Calls (User mode)
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
 80020f8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 80020fc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 80020fe:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8002102:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8002106:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read encoding */
    ldrh r1, [r1, #-2]
 8002108:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call (if user mode supported)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
 800210c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
 8002110:	2902      	cmp	r1, #2
    beq _oops
 8002112:	d0ff      	beq.n	8002114 <_oops>

08002114 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {r0, lr}
 8002114:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8002116:	f003 f950 	bl	80053ba <z_do_kernel_oops>
    pop {r0, pc}
 800211a:	bd01      	pop	{r0, pc}

0800211c <MpuFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t MpuFault(NANO_ESF *esf, int fromHardFault)
 800211c:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****\n");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 800211e:	4c1c      	ldr	r4, [pc, #112]	; (8002190 <MpuFault.isra.2+0x74>)
static u32_t MpuFault(NANO_ESF *esf, int fromHardFault)
 8002120:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** MPU FAULT *****\n");
 8002122:	481c      	ldr	r0, [pc, #112]	; (8002194 <MpuFault.isra.2+0x78>)
 8002124:	f002 fcec 	bl	8004b00 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8002128:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800212a:	06d1      	lsls	r1, r2, #27
 800212c:	d502      	bpl.n	8002134 <MpuFault.isra.2+0x18>
		PR_FAULT_INFO("  Stacking error (context area might be"
 800212e:	481a      	ldr	r0, [pc, #104]	; (8002198 <MpuFault.isra.2+0x7c>)
 8002130:	f002 fce6 	bl	8004b00 <printk>
			" not valid)\n");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8002134:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002136:	071a      	lsls	r2, r3, #28
 8002138:	d502      	bpl.n	8002140 <MpuFault.isra.2+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
 800213a:	4818      	ldr	r0, [pc, #96]	; (800219c <MpuFault.isra.2+0x80>)
 800213c:	f002 fce0 	bl	8004b00 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8002140:	4c13      	ldr	r4, [pc, #76]	; (8002190 <MpuFault.isra.2+0x74>)
 8002142:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002144:	079b      	lsls	r3, r3, #30
 8002146:	d50e      	bpl.n	8002166 <MpuFault.isra.2+0x4a>
		PR_FAULT_INFO("  Data Access Violation\n");
 8002148:	4815      	ldr	r0, [pc, #84]	; (80021a0 <MpuFault.isra.2+0x84>)
 800214a:	f002 fcd9 	bl	8004b00 <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
 800214e:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8002150:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002152:	0618      	lsls	r0, r3, #24
 8002154:	d507      	bpl.n	8002166 <MpuFault.isra.2+0x4a>
			PR_EXC("  MMFAR Address: 0x%x\n", mmfar);
 8002156:	4813      	ldr	r0, [pc, #76]	; (80021a4 <MpuFault.isra.2+0x88>)
 8002158:	f002 fcd2 	bl	8004b00 <printk>
			if (fromHardFault) {
 800215c:	b11d      	cbz	r5, 8002166 <MpuFault.isra.2+0x4a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 800215e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002160:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002164:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8002166:	4c0a      	ldr	r4, [pc, #40]	; (8002190 <MpuFault.isra.2+0x74>)
 8002168:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800216a:	07d2      	lsls	r2, r2, #31
 800216c:	d502      	bpl.n	8002174 <MpuFault.isra.2+0x58>
		PR_FAULT_INFO("  Instruction Access Violation\n");
 800216e:	480e      	ldr	r0, [pc, #56]	; (80021a8 <MpuFault.isra.2+0x8c>)
 8002170:	f002 fcc6 	bl	8004b00 <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8002174:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002176:	069b      	lsls	r3, r3, #26
 8002178:	d502      	bpl.n	8002180 <MpuFault.isra.2+0x64>
		PR_FAULT_INFO(
 800217a:	480c      	ldr	r0, [pc, #48]	; (80021ac <MpuFault.isra.2+0x90>)
 800217c:	f002 fcc0 	bl	8004b00 <printk>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
 8002180:	4b03      	ldr	r3, [pc, #12]	; (8002190 <MpuFault.isra.2+0x74>)
 8002182:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8002184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002186:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 800218a:	629a      	str	r2, [r3, #40]	; 0x28
	if (MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
 800218c:	2000      	movs	r0, #0
 800218e:	bd38      	pop	{r3, r4, r5, pc}
 8002190:	e000ed00 	.word	0xe000ed00
 8002194:	08006a97 	.word	0x08006a97
 8002198:	08006aae 	.word	0x08006aae
 800219c:	08006ae2 	.word	0x08006ae2
 80021a0:	08006af6 	.word	0x08006af6
 80021a4:	08006b0f 	.word	0x08006b0f
 80021a8:	08006b26 	.word	0x08006b26
 80021ac:	08006b46 	.word	0x08006b46

080021b0 <BusFault.isra.3>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int BusFault(NANO_ESF *esf, int fromHardFault)
 80021b0:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 80021b2:	4c1e      	ldr	r4, [pc, #120]	; (800222c <BusFault.isra.3+0x7c>)
static int BusFault(NANO_ESF *esf, int fromHardFault)
 80021b4:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** BUS FAULT *****\n");
 80021b6:	481e      	ldr	r0, [pc, #120]	; (8002230 <BusFault.isra.3+0x80>)
 80021b8:	f002 fca2 	bl	8004b00 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 80021bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80021be:	04d1      	lsls	r1, r2, #19
 80021c0:	d502      	bpl.n	80021c8 <BusFault.isra.3+0x18>
		PR_FAULT_INFO("  Stacking error\n");
 80021c2:	481c      	ldr	r0, [pc, #112]	; (8002234 <BusFault.isra.3+0x84>)
 80021c4:	f002 fc9c 	bl	8004b00 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 80021c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80021ca:	051a      	lsls	r2, r3, #20
 80021cc:	d502      	bpl.n	80021d4 <BusFault.isra.3+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
 80021ce:	481a      	ldr	r0, [pc, #104]	; (8002238 <BusFault.isra.3+0x88>)
 80021d0:	f002 fc96 	bl	8004b00 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 80021d4:	4c15      	ldr	r4, [pc, #84]	; (800222c <BusFault.isra.3+0x7c>)
 80021d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80021d8:	059b      	lsls	r3, r3, #22
 80021da:	d50e      	bpl.n	80021fa <BusFault.isra.3+0x4a>
		PR_FAULT_INFO("  Precise data bus error\n");
 80021dc:	4817      	ldr	r0, [pc, #92]	; (800223c <BusFault.isra.3+0x8c>)
 80021de:	f002 fc8f 	bl	8004b00 <printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 80021e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 80021e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80021e6:	0418      	lsls	r0, r3, #16
 80021e8:	d507      	bpl.n	80021fa <BusFault.isra.3+0x4a>
			PR_EXC("  BFAR Address: 0x%x\n", bfar);
 80021ea:	4815      	ldr	r0, [pc, #84]	; (8002240 <BusFault.isra.3+0x90>)
 80021ec:	f002 fc88 	bl	8004b00 <printk>
			if (fromHardFault) {
 80021f0:	b11d      	cbz	r5, 80021fa <BusFault.isra.3+0x4a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 80021f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80021f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80021f8:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 80021fa:	4c0c      	ldr	r4, [pc, #48]	; (800222c <BusFault.isra.3+0x7c>)
 80021fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80021fe:	0559      	lsls	r1, r3, #21
 8002200:	d502      	bpl.n	8002208 <BusFault.isra.3+0x58>
		PR_FAULT_INFO("  Imprecise data bus error\n");
 8002202:	4810      	ldr	r0, [pc, #64]	; (8002244 <BusFault.isra.3+0x94>)
 8002204:	f002 fc7c 	bl	8004b00 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8002208:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800220a:	05da      	lsls	r2, r3, #23
 800220c:	d509      	bpl.n	8002222 <BusFault.isra.3+0x72>
		PR_FAULT_INFO("  Instruction bus error\n");
 800220e:	480e      	ldr	r0, [pc, #56]	; (8002248 <BusFault.isra.3+0x98>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
 8002210:	f002 fc76 	bl	8004b00 <printk>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8002214:	4a05      	ldr	r2, [pc, #20]	; (800222c <BusFault.isra.3+0x7c>)
 8002216:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002218:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800221c:	6293      	str	r3, [r2, #40]	; 0x28
	if (MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
 800221e:	2000      	movs	r0, #0
 8002220:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8002222:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002224:	049b      	lsls	r3, r3, #18
 8002226:	d5f5      	bpl.n	8002214 <BusFault.isra.3+0x64>
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
 8002228:	4808      	ldr	r0, [pc, #32]	; (800224c <BusFault.isra.3+0x9c>)
 800222a:	e7f1      	b.n	8002210 <BusFault.isra.3+0x60>
 800222c:	e000ed00 	.word	0xe000ed00
 8002230:	08006a09 	.word	0x08006a09
 8002234:	08006a20 	.word	0x08006a20
 8002238:	08006ae2 	.word	0x08006ae2
 800223c:	08006a32 	.word	0x08006a32
 8002240:	08006a4c 	.word	0x08006a4c
 8002244:	08006a62 	.word	0x08006a62
 8002248:	08006a7e 	.word	0x08006a7e
 800224c:	08006b46 	.word	0x08006b46

08002250 <UsageFault.isra.4>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t UsageFault(const NANO_ESF *esf)
 8002250:	b510      	push	{r4, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****\n");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8002252:	4c19      	ldr	r4, [pc, #100]	; (80022b8 <UsageFault.isra.4+0x68>)
	PR_FAULT_INFO("***** USAGE FAULT *****\n");
 8002254:	4819      	ldr	r0, [pc, #100]	; (80022bc <UsageFault.isra.4+0x6c>)
 8002256:	f002 fc53 	bl	8004b00 <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 800225a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800225c:	0193      	lsls	r3, r2, #6
 800225e:	d502      	bpl.n	8002266 <UsageFault.isra.4+0x16>
		PR_FAULT_INFO("  Division by zero\n");
 8002260:	4817      	ldr	r0, [pc, #92]	; (80022c0 <UsageFault.isra.4+0x70>)
 8002262:	f002 fc4d 	bl	8004b00 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8002266:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002268:	01dc      	lsls	r4, r3, #7
 800226a:	d502      	bpl.n	8002272 <UsageFault.isra.4+0x22>
		PR_FAULT_INFO("  Unaligned memory access\n");
 800226c:	4815      	ldr	r0, [pc, #84]	; (80022c4 <UsageFault.isra.4+0x74>)
 800226e:	f002 fc47 	bl	8004b00 <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8002272:	4c11      	ldr	r4, [pc, #68]	; (80022b8 <UsageFault.isra.4+0x68>)
 8002274:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002276:	0310      	lsls	r0, r2, #12
 8002278:	d502      	bpl.n	8002280 <UsageFault.isra.4+0x30>
		PR_FAULT_INFO("  No coprocessor instructions\n");
 800227a:	4813      	ldr	r0, [pc, #76]	; (80022c8 <UsageFault.isra.4+0x78>)
 800227c:	f002 fc40 	bl	8004b00 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8002280:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002282:	0359      	lsls	r1, r3, #13
 8002284:	d502      	bpl.n	800228c <UsageFault.isra.4+0x3c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
 8002286:	4811      	ldr	r0, [pc, #68]	; (80022cc <UsageFault.isra.4+0x7c>)
 8002288:	f002 fc3a 	bl	8004b00 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 800228c:	4c0a      	ldr	r4, [pc, #40]	; (80022b8 <UsageFault.isra.4+0x68>)
 800228e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002290:	0392      	lsls	r2, r2, #14
 8002292:	d502      	bpl.n	800229a <UsageFault.isra.4+0x4a>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
 8002294:	480e      	ldr	r0, [pc, #56]	; (80022d0 <UsageFault.isra.4+0x80>)
 8002296:	f002 fc33 	bl	8004b00 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 800229a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800229c:	03db      	lsls	r3, r3, #15
 800229e:	d502      	bpl.n	80022a6 <UsageFault.isra.4+0x56>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
 80022a0:	480c      	ldr	r0, [pc, #48]	; (80022d4 <UsageFault.isra.4+0x84>)
 80022a2:	f002 fc2d 	bl	8004b00 <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 80022a6:	4a04      	ldr	r2, [pc, #16]	; (80022b8 <UsageFault.isra.4+0x68>)
 80022a8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80022aa:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80022ae:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80022b2:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
 80022b4:	2000      	movs	r0, #0
 80022b6:	bd10      	pop	{r4, pc}
 80022b8:	e000ed00 	.word	0xe000ed00
 80022bc:	08006b76 	.word	0x08006b76
 80022c0:	08006b8f 	.word	0x08006b8f
 80022c4:	08006ba3 	.word	0x08006ba3
 80022c8:	08006bbe 	.word	0x08006bbe
 80022cc:	08006bdd 	.word	0x08006bdd
 80022d0:	08006c03 	.word	0x08006c03
 80022d4:	08006c1e 	.word	0x08006c1e

080022d8 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(NANO_ESF *esf, u32_t exc_return)
{
 80022d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80022da:	4d29      	ldr	r5, [pc, #164]	; (8002380 <_Fault+0xa8>)
 80022dc:	686e      	ldr	r6, [r5, #4]
 80022de:	f3c6 0408 	ubfx	r4, r6, #0, #9
{
 80022e2:	4607      	mov	r7, r0

	LOG_PANIC();
 80022e4:	f7fe fbd8 	bl	8000a98 <log_panic>
	switch (fault) {
 80022e8:	1ee3      	subs	r3, r4, #3
 80022ea:	2b09      	cmp	r3, #9
 80022ec:	d83b      	bhi.n	8002366 <_Fault+0x8e>
 80022ee:	e8df f003 	tbb	[pc, r3]
 80022f2:	3405      	.short	0x3405
 80022f4:	3a3a2936 	.word	0x3a3a2936
 80022f8:	383a3a3a 	.word	0x383a3a3a
	PR_FAULT_INFO("***** HARD FAULT *****\n");
 80022fc:	4821      	ldr	r0, [pc, #132]	; (8002384 <_Fault+0xac>)
 80022fe:	f002 fbff 	bl	8004b00 <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8002302:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8002304:	f014 0402 	ands.w	r4, r4, #2
 8002308:	d004      	beq.n	8002314 <_Fault+0x3c>
		PR_EXC("  Bus fault on vector table read\n");
 800230a:	481f      	ldr	r0, [pc, #124]	; (8002388 <_Fault+0xb0>)
	PR_FAULT_INFO(
 800230c:	f002 fbf8 	bl	8004b00 <printk>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
 8002310:	2400      	movs	r4, #0
 8002312:	e01c      	b.n	800234e <_Fault+0x76>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8002314:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	d519      	bpl.n	800234e <_Fault+0x76>
		PR_EXC("  Fault escalation (see below)\n");
 800231a:	481c      	ldr	r0, [pc, #112]	; (800238c <_Fault+0xb4>)
 800231c:	f002 fbf0 	bl	8004b00 <printk>
		if (SCB_MMFSR != 0) {
 8002320:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <_Fault+0xb8>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	b11b      	cbz	r3, 800232e <_Fault+0x56>
			reason = MpuFault(esf, 1);
 8002326:	2001      	movs	r0, #1
		reason = MpuFault(esf, 0);
 8002328:	f7ff fef8 	bl	800211c <MpuFault.isra.2>
 800232c:	e00c      	b.n	8002348 <_Fault+0x70>
		} else if (SCB_BFSR != 0) {
 800232e:	4b19      	ldr	r3, [pc, #100]	; (8002394 <_Fault+0xbc>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	b11b      	cbz	r3, 800233c <_Fault+0x64>
			reason = BusFault(esf, 1);
 8002334:	2001      	movs	r0, #1
		reason = BusFault(esf, 0);
 8002336:	f7ff ff3b 	bl	80021b0 <BusFault.isra.3>
 800233a:	e005      	b.n	8002348 <_Fault+0x70>
		} else if (SCB_UFSR != 0) {
 800233c:	4b16      	ldr	r3, [pc, #88]	; (8002398 <_Fault+0xc0>)
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	b29b      	uxth	r3, r3
 8002342:	b123      	cbz	r3, 800234e <_Fault+0x76>
			reason = UsageFault(esf);
 8002344:	f7ff ff84 	bl	8002250 <UsageFault.isra.4>
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = FaultHandle(esf, fault);

	if (reason == _NANO_ERR_RECOVERABLE) {
 8002348:	2806      	cmp	r0, #6
			reason = UsageFault(esf);
 800234a:	4604      	mov	r4, r0
	if (reason == _NANO_ERR_RECOVERABLE) {
 800234c:	d017      	beq.n	800237e <_Fault+0xa6>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_NanoFatalErrorHandler(reason, esf);
 800234e:	4639      	mov	r1, r7
 8002350:	4620      	mov	r0, r4
}
 8002352:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_NanoFatalErrorHandler(reason, esf);
 8002356:	f000 b8a3 	b.w	80024a0 <z_NanoFatalErrorHandler>
		reason = MpuFault(esf, 0);
 800235a:	2000      	movs	r0, #0
 800235c:	e7e4      	b.n	8002328 <_Fault+0x50>
		reason = BusFault(esf, 0);
 800235e:	2000      	movs	r0, #0
 8002360:	e7e9      	b.n	8002336 <_Fault+0x5e>
	PR_FAULT_INFO(
 8002362:	480e      	ldr	r0, [pc, #56]	; (800239c <_Fault+0xc4>)
 8002364:	e7d2      	b.n	800230c <_Fault+0x34>
	PR_FAULT_INFO("***** %s %d) *****\n",
 8002366:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <_Fault+0xc8>)
 8002368:	490e      	ldr	r1, [pc, #56]	; (80023a4 <_Fault+0xcc>)
 800236a:	480f      	ldr	r0, [pc, #60]	; (80023a8 <_Fault+0xd0>)
 800236c:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
 8002370:	f1a4 0210 	sub.w	r2, r4, #16
 8002374:	bf18      	it	ne
 8002376:	4619      	movne	r1, r3
 8002378:	f002 fbc2 	bl	8004b00 <printk>
	if (reason == _NANO_ERR_RECOVERABLE) {
 800237c:	e7c8      	b.n	8002310 <_Fault+0x38>
}
 800237e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002380:	e000ed00 	.word	0xe000ed00
 8002384:	08006c78 	.word	0x08006c78
 8002388:	08006c90 	.word	0x08006c90
 800238c:	08006cb2 	.word	0x08006cb2
 8002390:	e000ed28 	.word	0xe000ed28
 8002394:	e000ed29 	.word	0xe000ed29
 8002398:	e000ed2a 	.word	0xe000ed2a
 800239c:	08006cd2 	.word	0x08006cd2
 80023a0:	08006c5f 	.word	0x08006c5f
 80023a4:	08006c4a 	.word	0x08006c4a
 80023a8:	08006d09 	.word	0x08006d09

080023ac <z_FaultInit>:
 */
void z_FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 80023ac:	4a02      	ldr	r2, [pc, #8]	; (80023b8 <z_FaultInit+0xc>)
 80023ae:	6953      	ldr	r3, [r2, #20]
 80023b0:	f043 0310 	orr.w	r3, r3, #16
 80023b4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <z_arch_irq_enable>:
 *
 * @return N/A
 */
void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 80023bc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80023be:	2b00      	cmp	r3, #0
 80023c0:	db08      	blt.n	80023d4 <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c2:	2201      	movs	r2, #1
 80023c4:	f000 001f 	and.w	r0, r0, #31
 80023c8:	fa02 f000 	lsl.w	r0, r2, r0
 80023cc:	095b      	lsrs	r3, r3, #5
 80023ce:	4a02      	ldr	r2, [pc, #8]	; (80023d8 <z_arch_irq_enable+0x1c>)
 80023d0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	e000e100 	.word	0xe000e100

080023dc <z_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 80023dc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80023de:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e0:	bfa8      	it	ge
 80023e2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
 80023e6:	f101 0101 	add.w	r1, r1, #1
 80023ea:	ea4f 1101 	mov.w	r1, r1, lsl #4
 80023ee:	bfae      	itee	ge
 80023f0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f4:	f000 000f 	andlt.w	r0, r0, #15
 80023f8:	4b03      	ldrlt	r3, [pc, #12]	; (8002408 <z_irq_priority_set+0x2c>)
 80023fa:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fc:	bfac      	ite	ge
 80023fe:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002402:	5419      	strblt	r1, [r3, r0]
}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	e000ed14 	.word	0xe000ed14

0800240c <z_new_thread>:

void z_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
 800240c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
 8002410:	188c      	adds	r4, r1, r2
{
 8002412:	4688      	mov	r8, r1
 8002414:	4617      	mov	r7, r2
 8002416:	461e      	mov	r6, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
 8002418:	2204      	movs	r2, #4
 800241a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800241c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800241e:	4605      	mov	r5, r0
 8002420:	f003 fd54 	bl	8005ecc <z_init_thread_base>
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
 8002424:	f1a4 0320 	sub.w	r3, r4, #32
#else
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
 8002428:	490c      	ldr	r1, [pc, #48]	; (800245c <z_new_thread+0x50>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
 800242a:	f023 0307 	bic.w	r3, r3, #7

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
 800242e:	2200      	movs	r2, #0
	pInitCtx->basic.pc &= 0xfffffffe;
 8002430:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
 8002434:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
 8002438:	e9c5 8716 	strd	r8, r7, [r5, #88]	; 0x58
 800243c:	6199      	str	r1, [r3, #24]

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
 800243e:	9906      	ldr	r1, [sp, #24]
 8002440:	6059      	str	r1, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
 8002442:	9907      	ldr	r1, [sp, #28]
 8002444:	6099      	str	r1, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
 8002446:	9908      	ldr	r1, [sp, #32]
 8002448:	60d9      	str	r1, [r3, #12]
	pInitCtx->basic.xpsr =
 800244a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
	pInitCtx->basic.a1 = (u32_t)pEntry;
 800244e:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.xpsr =
 8002450:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
 8002452:	64ab      	str	r3, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
 8002454:	666a      	str	r2, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8002456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800245a:	bf00      	nop
 800245c:	080047ed 	.word	0x080047ed

08002460 <z_CpuIdleInit>:
 *
 * void z_CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, z_CpuIdleInit)
	ldr r1, =_SCB_SCR
 8002460:	4901      	ldr	r1, [pc, #4]	; (8002468 <z_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
 8002462:	2210      	movs	r2, #16
	str r2, [r1]
 8002464:	600a      	str	r2, [r1, #0]
	bx lr
 8002466:	4770      	bx	lr
	ldr r1, =_SCB_SCR
 8002468:	e000ed10 	.word	0xe000ed10

0800246c <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
 800246c:	4040      	eors	r0, r0
	msr BASEPRI, r0
 800246e:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
 8002472:	bf30      	wfi

	bx lr
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop

08002478 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
 8002478:	4040      	eors	r0, r0
	msr BASEPRI, r0
 800247a:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE) && \
	!defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
 800247e:	f8df c01c 	ldr.w	ip, [pc, #28]	; 800249c <__bus_fault+0x24>
	ldr ip, [ip]
 8002482:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
 8002486:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
 800248a:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
 800248c:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
 8002490:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
 8002494:	b501      	push	{r0, lr}
	bl _Fault
 8002496:	f7ff ff1f 	bl	80022d8 <_Fault>

	pop {r0, pc}
 800249a:	bd01      	pop	{r0, pc}
	ldr ip, =_SCS_ICSR
 800249c:	e000ed04 	.word	0xe000ed04

080024a0 <z_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void z_NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
 80024a0:	b538      	push	{r3, r4, r5, lr}
 80024a2:	4604      	mov	r4, r0
 80024a4:	460d      	mov	r5, r1
#ifdef CONFIG_THREAD_NAME
	const char *thread_name = k_thread_name_get(k_current_get());
#endif

	LOG_PANIC();
 80024a6:	f7fe faf7 	bl	8000a98 <log_panic>

	switch (reason) {
 80024aa:	2c05      	cmp	r4, #5
 80024ac:	d81a      	bhi.n	80024e4 <z_NanoFatalErrorHandler+0x44>
 80024ae:	e8df f004 	tbb	[pc, r4]
 80024b2:	1903      	.short	0x1903
 80024b4:	17151319 	.word	0x17151319
	case _NANO_ERR_HW_EXCEPTION:
		printk("***** Hardware exception *****\n");
 80024b8:	480d      	ldr	r0, [pc, #52]	; (80024f0 <z_NanoFatalErrorHandler+0x50>)
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
 80024ba:	f002 fb21 	bl	8004b00 <printk>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
 80024be:	f001 fe09 	bl	80040d4 <z_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p"
 80024c2:	69aa      	ldr	r2, [r5, #24]
 80024c4:	4601      	mov	r1, r0
 80024c6:	480b      	ldr	r0, [pc, #44]	; (80024f4 <z_NanoFatalErrorHandler+0x54>)
 80024c8:	f002 fb1a 	bl	8004b00 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	z_SysFatalErrorHandler(reason, pEsf);
 80024cc:	4629      	mov	r1, r5
 80024ce:	4620      	mov	r0, r4
}
 80024d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_SysFatalErrorHandler(reason, pEsf);
 80024d4:	f000 b818 	b.w	8002508 <z_SysFatalErrorHandler>
		printk("**** Kernel Allocation Failure! ****\n");
 80024d8:	4807      	ldr	r0, [pc, #28]	; (80024f8 <z_NanoFatalErrorHandler+0x58>)
 80024da:	e7ee      	b.n	80024ba <z_NanoFatalErrorHandler+0x1a>
		printk("***** Kernel OOPS! *****\n");
 80024dc:	4807      	ldr	r0, [pc, #28]	; (80024fc <z_NanoFatalErrorHandler+0x5c>)
 80024de:	e7ec      	b.n	80024ba <z_NanoFatalErrorHandler+0x1a>
		printk("***** Kernel Panic! *****\n");
 80024e0:	4807      	ldr	r0, [pc, #28]	; (8002500 <z_NanoFatalErrorHandler+0x60>)
 80024e2:	e7ea      	b.n	80024ba <z_NanoFatalErrorHandler+0x1a>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
 80024e4:	4621      	mov	r1, r4
 80024e6:	4807      	ldr	r0, [pc, #28]	; (8002504 <z_NanoFatalErrorHandler+0x64>)
 80024e8:	f002 fb0a 	bl	8004b00 <printk>
		break;
 80024ec:	e7e7      	b.n	80024be <z_NanoFatalErrorHandler+0x1e>
 80024ee:	bf00      	nop
 80024f0:	08006d1d 	.word	0x08006d1d
 80024f4:	08006dbb 	.word	0x08006dbb
 80024f8:	08006d3d 	.word	0x08006d3d
 80024fc:	08006d63 	.word	0x08006d63
 8002500:	08006d7d 	.word	0x08006d7d
 8002504:	08006d98 	.word	0x08006d98

08002508 <z_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
 8002508:	2805      	cmp	r0, #5
{
 800250a:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
 800250c:	d00c      	beq.n	8002528 <z_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || z_is_thread_essential()) {
 800250e:	f001 fe31 	bl	8004174 <k_is_in_isr>
 8002512:	b160      	cbz	r0, 800252e <z_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
 8002514:	f001 fe2e 	bl	8004174 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
 8002518:	490c      	ldr	r1, [pc, #48]	; (800254c <z_SysFatalErrorHandler+0x44>)
 800251a:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <z_SysFatalErrorHandler+0x48>)
 800251c:	2800      	cmp	r0, #0
 800251e:	bf08      	it	eq
 8002520:	4619      	moveq	r1, r3
 8002522:	480c      	ldr	r0, [pc, #48]	; (8002554 <z_SysFatalErrorHandler+0x4c>)
 8002524:	f002 faec 	bl	8004b00 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
 8002528:	f7ff ffa0 	bl	800246c <k_cpu_idle>
 800252c:	e7fc      	b.n	8002528 <z_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || z_is_thread_essential()) {
 800252e:	f001 fe31 	bl	8004194 <z_is_thread_essential>
 8002532:	2800      	cmp	r0, #0
 8002534:	d1ee      	bne.n	8002514 <z_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
 8002536:	4c08      	ldr	r4, [pc, #32]	; (8002558 <z_SysFatalErrorHandler+0x50>)
 8002538:	4808      	ldr	r0, [pc, #32]	; (800255c <z_SysFatalErrorHandler+0x54>)
 800253a:	68a1      	ldr	r1, [r4, #8]
 800253c:	f002 fae0 	bl	8004b00 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
 8002540:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
 8002542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002546:	f000 b80b 	b.w	8002560 <z_impl_k_thread_abort>
 800254a:	bf00      	nop
 800254c:	08006df7 	.word	0x08006df7
 8002550:	08006dfb 	.word	0x08006dfb
 8002554:	08006e0c 	.word	0x08006e0c
 8002558:	20004370 	.word	0x20004370
 800255c:	08006e2c 	.word	0x08006e2c

08002560 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
 8002560:	b538      	push	{r3, r4, r5, lr}
 8002562:	4605      	mov	r5, r0
	__asm__ volatile(
 8002564:	f04f 0310 	mov.w	r3, #16
 8002568:	f3ef 8411 	mrs	r4, BASEPRI
 800256c:	f383 8811 	msr	BASEPRI, r3
 8002570:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
 8002574:	f003 fc8b 	bl	8005e8e <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
 8002578:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <z_impl_k_thread_abort+0x44>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	42ab      	cmp	r3, r5
 800257e:	d10b      	bne.n	8002598 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
 8002580:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <z_impl_k_thread_abort+0x48>)
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002588:	b912      	cbnz	r2, 8002590 <z_impl_k_thread_abort+0x30>
#ifndef CONFIG_ARM
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_out();
#endif
#endif
	ret = __swap(key);
 800258a:	4620      	mov	r0, r4
 800258c:	f7ff fd6e 	bl	800206c <__swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002596:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
 8002598:	4620      	mov	r0, r4
}
 800259a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
 800259e:	f003 bbd6 	b.w	8005d4e <z_reschedule_irqlock>
 80025a2:	bf00      	nop
 80025a4:	20004370 	.word	0x20004370
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {r0,lr}		/* r0, lr are now the first items on the stack */
 80025ac:	b501      	push	{r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
#endif

	mrs r0, IPSR	/* get exception number */
 80025ae:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 80025b2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 80025b6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
 80025ba:	4904      	ldr	r1, [pc, #16]	; (80025cc <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 80025bc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 80025be:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
 80025c0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 80025c2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * _IntExit() */
	ldr r0, =_IntExit
 80025c6:	4802      	ldr	r0, [pc, #8]	; (80025d0 <_isr_wrapper+0x24>)
	bx r0
 80025c8:	4700      	bx	r0
 80025ca:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 80025cc:	08005fb0 	.word	0x08005fb0
	ldr r0, =_IntExit
 80025d0:	08002039 	.word	0x08002039

080025d4 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80025d4:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80025d6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
 80025da:	4808      	ldr	r0, [pc, #32]	; (80025fc <__reset+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
 80025dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 80025e0:	1840      	adds	r0, r0, r1
    msr PSP, r0
 80025e2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 80025e6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 80025ea:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 80025ec:	4308      	orrs	r0, r1
    msr CONTROL, r0
 80025ee:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 80025f2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
 80025f6:	f000 f807 	bl	8002608 <_PrepC>
 80025fa:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
 80025fc:	20004bf0 	.word	0x20004bf0

08002600 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8002600:	bf30      	wfi
    b z_SysNmiOnReset
 8002602:	f7ff bffd 	b.w	8002600 <z_SysNmiOnReset>
 8002606:	bf00      	nop

08002608 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
 8002608:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 800260a:	4b08      	ldr	r3, [pc, #32]	; (800262c <_PrepC+0x24>)
 800260c:	4a08      	ldr	r2, [pc, #32]	; (8002630 <_PrepC+0x28>)
 800260e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002612:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002614:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002618:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
 800261c:	f001 f8fe 	bl	800381c <z_bss_zero>
	z_data_copy();
 8002620:	f001 f906 	bl	8003830 <z_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0U;
#endif
	z_IntLibInit();
 8002624:	f7ff fd16 	bl	8002054 <z_IntLibInit>
	z_cstart();
 8002628:	f001 f934 	bl	8003894 <z_cstart>
 800262c:	08000000 	.word	0x08000000
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <z_arch_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_static_mpu_regions(void)
{
 8002634:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
 8002636:	4b08      	ldr	r3, [pc, #32]	; (8002658 <z_arch_configure_static_mpu_regions+0x24>)
 8002638:	9301      	str	r3, [sp, #4]
 800263a:	4b08      	ldr	r3, [pc, #32]	; (800265c <z_arch_configure_static_mpu_regions+0x28>)
 800263c:	9302      	str	r3, [sp, #8]
 800263e:	4b08      	ldr	r3, [pc, #32]	; (8002660 <z_arch_configure_static_mpu_regions+0x2c>)
 8002640:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
 8002642:	ab01      	add	r3, sp, #4
 8002644:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8002646:	4a07      	ldr	r2, [pc, #28]	; (8002664 <z_arch_configure_static_mpu_regions+0x30>)
 8002648:	4b07      	ldr	r3, [pc, #28]	; (8002668 <z_arch_configure_static_mpu_regions+0x34>)
 800264a:	2101      	movs	r1, #1
 800264c:	4668      	mov	r0, sp
 800264e:	f000 f8b5 	bl	80027bc <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 8002652:	b005      	add	sp, #20
 8002654:	f85d fb04 	ldr.w	pc, [sp], #4
 8002658:	20000000 	.word	0x20000000
 800265c:	00000000 	.word	0x00000000
 8002660:	060b0000 	.word	0x060b0000
 8002664:	20000000 	.word	0x20000000
 8002668:	20018000 	.word	0x20018000

0800266c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
 800266c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MPU->RNR = index;
 800266e:	4f2e      	ldr	r7, [pc, #184]	; (8002728 <mpu_configure_regions+0xbc>)
{
 8002670:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 8002672:	2100      	movs	r1, #0
 8002674:	42b1      	cmp	r1, r6
 8002676:	da22      	bge.n	80026be <mpu_configure_regions+0x52>
		if (regions[i]->size == 0U) {
 8002678:	f850 c021 	ldr.w	ip, [r0, r1, lsl #2]
 800267c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8002680:	2c00      	cmp	r4, #0
 8002682:	d04f      	beq.n	8002724 <mpu_configure_regions+0xb8>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
 8002684:	b1eb      	cbz	r3, 80026c2 <mpu_configure_regions+0x56>
		((part->size & (part->size - 1)) == 0U)
 8002686:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
		&&
 800268a:	ea14 0f0e 	tst.w	r4, lr
 800268e:	d106      	bne.n	800269e <mpu_configure_regions+0x32>
		&&
 8002690:	2c1f      	cmp	r4, #31
 8002692:	d904      	bls.n	800269e <mpu_configure_regions+0x32>
		((part->start & (part->size - 1)) == 0U);
 8002694:	f8dc 5000 	ldr.w	r5, [ip]
		&&
 8002698:	ea1e 0f05 	tst.w	lr, r5
 800269c:	d011      	beq.n	80026c2 <mpu_configure_regions+0x56>
				(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
 800269e:	2301      	movs	r3, #1
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f363 0207 	bfi	r2, r3, #0, #8
 80026a8:	4820      	ldr	r0, [pc, #128]	; (800272c <mpu_configure_regions+0xc0>)
 80026aa:	4b21      	ldr	r3, [pc, #132]	; (8002730 <mpu_configure_regions+0xc4>)
 80026ac:	1a1b      	subs	r3, r3, r0
 80026ae:	08db      	lsrs	r3, r3, #3
 80026b0:	4820      	ldr	r0, [pc, #128]	; (8002734 <mpu_configure_regions+0xc8>)
 80026b2:	f363 128f 	bfi	r2, r3, #6, #10
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 80026b6:	f002 fa58 	bl	8004b6a <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, regions[i]);
 80026ba:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 80026be:	4610      	mov	r0, r2
 80026c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (size <= 32U) {
 80026c2:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
 80026c4:	b2d5      	uxtb	r5, r2
	struct arm_mpu_region region_conf;

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
 80026c6:	f8dc 2000 	ldr.w	r2, [ip]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
 80026ca:	f8dc c008 	ldr.w	ip, [ip, #8]
	if (size <= 32U) {
 80026ce:	d91a      	bls.n	8002706 <mpu_configure_regions+0x9a>
	if (size > (1UL << 31)) {
 80026d0:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80026d4:	d819      	bhi.n	800270a <mpu_configure_regions+0x9e>
	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 80026d6:	3c01      	subs	r4, #1
 80026d8:	fab4 f484 	clz	r4, r4
 80026dc:	f1c4 041f 	rsb	r4, r4, #31
 80026e0:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
 80026e2:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80026e4:	ea4c 0404 	orr.w	r4, ip, r4
 80026e8:	d911      	bls.n	800270e <mpu_configure_regions+0xa2>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 80026ea:	2301      	movs	r3, #1
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f363 0207 	bfi	r2, r3, #0, #8
 80026f4:	490d      	ldr	r1, [pc, #52]	; (800272c <mpu_configure_regions+0xc0>)
 80026f6:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <mpu_configure_regions+0xc4>)
 80026f8:	480f      	ldr	r0, [pc, #60]	; (8002738 <mpu_configure_regions+0xcc>)
 80026fa:	1a5b      	subs	r3, r3, r1
 80026fc:	08db      	lsrs	r3, r3, #3
 80026fe:	f363 128f 	bfi	r2, r3, #6, #10
 8002702:	4629      	mov	r1, r5
 8002704:	e7d7      	b.n	80026b6 <mpu_configure_regions+0x4a>
		return REGION_32B;
 8002706:	2408      	movs	r4, #8
 8002708:	e7eb      	b.n	80026e2 <mpu_configure_regions+0x76>
		return REGION_4G;
 800270a:	243e      	movs	r4, #62	; 0x3e
 800270c:	e7e9      	b.n	80026e2 <mpu_configure_regions+0x76>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800270e:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
 8002712:	432a      	orrs	r2, r5
 8002714:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8002718:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
 800271c:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800271e:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8002720:	613c      	str	r4, [r7, #16]
		reg_index++;
 8002722:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
 8002724:	3101      	adds	r1, #1
 8002726:	e7a5      	b.n	8002674 <mpu_configure_regions+0x8>
 8002728:	e000ed90 	.word	0xe000ed90
 800272c:	08006348 	.word	0x08006348
 8002730:	08006360 	.word	0x08006360
 8002734:	08006e55 	.word	0x08006e55
 8002738:	08006e78 	.word	0x08006e78

0800273c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 800273c:	4b03      	ldr	r3, [pc, #12]	; (800274c <arm_core_mpu_enable+0x10>)
 800273e:	2205      	movs	r2, #5
 8002740:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8002742:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002746:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 800274a:	4770      	bx	lr
 800274c:	e000ed90 	.word	0xe000ed90

08002750 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002750:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8002754:	4b01      	ldr	r3, [pc, #4]	; (800275c <arm_core_mpu_disable+0xc>)
 8002756:	2200      	movs	r2, #0
 8002758:	605a      	str	r2, [r3, #4]
}
 800275a:	4770      	bx	lr
 800275c:	e000ed90 	.word	0xe000ed90

08002760 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8002760:	4913      	ldr	r1, [pc, #76]	; (80027b0 <arm_mpu_init+0x50>)
 8002762:	6808      	ldr	r0, [r1, #0]
 8002764:	2808      	cmp	r0, #8
{
 8002766:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 8002768:	d81e      	bhi.n	80027a8 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 800276a:	f7ff fff1 	bl	8002750 <arm_core_mpu_disable>
	MPU->RNR = index;
 800276e:	4c11      	ldr	r4, [pc, #68]	; (80027b4 <arm_mpu_init+0x54>)
 8002770:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8002772:	2200      	movs	r2, #0
 8002774:	4290      	cmp	r0, r2
 8002776:	f101 010c 	add.w	r1, r1, #12
 800277a:	d105      	bne.n	8002788 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 800277c:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <arm_mpu_init+0x58>)
 800277e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 8002780:	f7ff ffdc 	bl	800273c <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
 8002784:	2000      	movs	r0, #0
}
 8002786:	bd10      	pop	{r4, pc}
 8002788:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800278a:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 800278e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8002792:	4313      	orrs	r3, r2
 8002794:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002798:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800279a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80027a4:	3201      	adds	r2, #1
 80027a6:	e7e5      	b.n	8002774 <arm_mpu_init+0x14>
		return -1;
 80027a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027ac:	e7eb      	b.n	8002786 <arm_mpu_init+0x26>
 80027ae:	bf00      	nop
 80027b0:	080063b0 	.word	0x080063b0
 80027b4:	e000ed90 	.word	0xe000ed90
 80027b8:	200043af 	.word	0x200043af

080027bc <arm_core_mpu_configure_static_mpu_regions>:
{
 80027bc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 80027be:	4c03      	ldr	r4, [pc, #12]	; (80027cc <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 80027c0:	2301      	movs	r3, #1
 80027c2:	7822      	ldrb	r2, [r4, #0]
 80027c4:	f7ff ff52 	bl	800266c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 80027c8:	7020      	strb	r0, [r4, #0]
}
 80027ca:	bd10      	pop	{r4, pc}
 80027cc:	200043af 	.word	0x200043af

080027d0 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
 80027d0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 80027d2:	4a08      	ldr	r2, [pc, #32]	; (80027f4 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
 80027d4:	2300      	movs	r3, #0
 80027d6:	7812      	ldrb	r2, [r2, #0]
 80027d8:	f7ff ff48 	bl	800266c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 80027dc:	f110 0f16 	cmn.w	r0, #22
 80027e0:	d003      	beq.n	80027ea <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 80027e2:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
 80027e4:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 80027e6:	2807      	cmp	r0, #7
 80027e8:	dd00      	ble.n	80027ec <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
 80027ea:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
 80027ec:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
 80027ee:	611a      	str	r2, [r3, #16]
 80027f0:	3001      	adds	r0, #1
 80027f2:	e7f8      	b.n	80027e6 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
 80027f4:	200043af 	.word	0x200043af
 80027f8:	e000ed90 	.word	0xe000ed90

080027fc <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, char *format, va_list vargs)
{
 80027fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002800:	b0cf      	sub	sp, #316	; 0x13c
 8002802:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8002806:	461e      	mov	r6, r3
	int				width;
	VALTYPE			val;
	char			*cptr_temp;
	uint64_t			double_temp;

	count = 0;
 8002808:	2300      	movs	r3, #0
{
 800280a:	4693      	mov	fp, r2
	count = 0;
 800280c:	9303      	str	r3, [sp, #12]

	while ((c = *format++)) {
 800280e:	465d      	mov	r5, fp
 8002810:	f815 0b01 	ldrb.w	r0, [r5], #1
 8002814:	b148      	cbz	r0, 800282a <z_prf+0x2e>
		if (c != '%') {
 8002816:	2825      	cmp	r0, #37	; 0x25
 8002818:	d07e      	beq.n	8002918 <z_prf+0x11c>
			if ((*func) (c, dest) == EOF) {
 800281a:	e9dd 310e 	ldrd	r3, r1, [sp, #56]	; 0x38
 800281e:	4798      	blx	r3
 8002820:	3001      	adds	r0, #1
 8002822:	d106      	bne.n	8002832 <z_prf+0x36>
				return EOF;
 8002824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002828:	9303      	str	r3, [sp, #12]
				}
			}
		}
	}
	return count;
}
 800282a:	9803      	ldr	r0, [sp, #12]
 800282c:	b04f      	add	sp, #316	; 0x13c
 800282e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			count++;
 8002832:	9b03      	ldr	r3, [sp, #12]
 8002834:	9601      	str	r6, [sp, #4]
 8002836:	3301      	adds	r3, #1
 8002838:	9303      	str	r3, [sp, #12]
	while ((c = *format++)) {
 800283a:	46ab      	mov	fp, r5
			if (c >= MAXFLD + 1) {
 800283c:	9e01      	ldr	r6, [sp, #4]
 800283e:	e7e6      	b.n	800280e <z_prf+0x12>
				switch (c) {
 8002840:	2c23      	cmp	r4, #35	; 0x23
 8002842:	d061      	beq.n	8002908 <z_prf+0x10c>
 8002844:	d856      	bhi.n	80028f4 <z_prf+0xf8>
 8002846:	2c00      	cmp	r4, #0
 8002848:	d0ef      	beq.n	800282a <z_prf+0x2e>
					fspace = true;
 800284a:	2c20      	cmp	r4, #32
 800284c:	9b07      	ldr	r3, [sp, #28]
 800284e:	bf08      	it	eq
 8002850:	2301      	moveq	r3, #1
 8002852:	9307      	str	r3, [sp, #28]
					fminus = true;
 8002854:	465d      	mov	r5, fp
			while (strchr("-+ #0", (c = *format++)) != NULL) {
 8002856:	46ab      	mov	fp, r5
 8002858:	48bc      	ldr	r0, [pc, #752]	; (8002b4c <z_prf+0x350>)
 800285a:	f81b 4b01 	ldrb.w	r4, [fp], #1
 800285e:	4621      	mov	r1, r4
 8002860:	f002 fdbe 	bl	80053e0 <strchr>
 8002864:	2800      	cmp	r0, #0
 8002866:	d1eb      	bne.n	8002840 <z_prf+0x44>
			if (c == '*') {
 8002868:	2c2a      	cmp	r4, #42	; 0x2a
 800286a:	d15d      	bne.n	8002928 <z_prf+0x12c>
				width = va_arg(vargs, int);
 800286c:	f856 3b04 	ldr.w	r3, [r6], #4
 8002870:	9302      	str	r3, [sp, #8]
				if (width < 0) {
 8002872:	2b00      	cmp	r3, #0
					width = -width;
 8002874:	bfbe      	ittt	lt
 8002876:	425b      	neglt	r3, r3
 8002878:	9302      	strlt	r3, [sp, #8]
					fminus = true;
 800287a:	2301      	movlt	r3, #1
				c = *format++;
 800287c:	f89b 4000 	ldrb.w	r4, [fp]
					fminus = true;
 8002880:	bfb8      	it	lt
 8002882:	930d      	strlt	r3, [sp, #52]	; 0x34
				c = *format++;
 8002884:	f105 0b02 	add.w	fp, r5, #2
				width = MAXFLD;
 8002888:	9b02      	ldr	r3, [sp, #8]
 800288a:	2bc9      	cmp	r3, #201	; 0xc9
 800288c:	bf28      	it	cs
 800288e:	23c8      	movcs	r3, #200	; 0xc8
 8002890:	9302      	str	r3, [sp, #8]
			if (c == '.') {
 8002892:	2c2e      	cmp	r4, #46	; 0x2e
 8002894:	d16d      	bne.n	8002972 <z_prf+0x176>
				if (c == '*') {
 8002896:	f89b 3000 	ldrb.w	r3, [fp]
 800289a:	2b2a      	cmp	r3, #42	; 0x2a
 800289c:	d166      	bne.n	800296c <z_prf+0x170>
					precision = va_arg(vargs, int);
 800289e:	f856 5b04 	ldr.w	r5, [r6], #4
				c = *format++;
 80028a2:	f10b 0b01 	add.w	fp, fp, #1
				c = *format++;
 80028a6:	465b      	mov	r3, fp
					precision = -1;
 80028a8:	2dc9      	cmp	r5, #201	; 0xc9
				c = *format++;
 80028aa:	f813 4b01 	ldrb.w	r4, [r3], #1
					precision = -1;
 80028ae:	bfa8      	it	ge
 80028b0:	f04f 35ff 	movge.w	r5, #4294967295	; 0xffffffff
				c = *format++;
 80028b4:	469b      	mov	fp, r3
			if (strchr("hlz", c) != NULL) {
 80028b6:	4621      	mov	r1, r4
 80028b8:	48a5      	ldr	r0, [pc, #660]	; (8002b50 <z_prf+0x354>)
 80028ba:	f002 fd91 	bl	80053e0 <strchr>
 80028be:	b128      	cbz	r0, 80028cc <z_prf+0xd0>
				c = *format++;
 80028c0:	465b      	mov	r3, fp
				i = c;
 80028c2:	4620      	mov	r0, r4
				c = *format++;
 80028c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80028c8:	469b      	mov	fp, r3
 80028ca:	4614      	mov	r4, r2
			switch (c) {
 80028cc:	2c67      	cmp	r4, #103	; 0x67
 80028ce:	f300 8087 	bgt.w	80029e0 <z_prf+0x1e4>
 80028d2:	2c65      	cmp	r4, #101	; 0x65
 80028d4:	f280 80e7 	bge.w	8002aa6 <z_prf+0x2aa>
 80028d8:	2c47      	cmp	r4, #71	; 0x47
 80028da:	dc4d      	bgt.n	8002978 <z_prf+0x17c>
 80028dc:	2c45      	cmp	r4, #69	; 0x45
 80028de:	f280 80e2 	bge.w	8002aa6 <z_prf+0x2aa>
 80028e2:	2c00      	cmp	r4, #0
 80028e4:	d0a1      	beq.n	800282a <z_prf+0x2e>
 80028e6:	2c25      	cmp	r4, #37	; 0x25
 80028e8:	f000 8324 	beq.w	8002f34 <z_prf+0x738>
			if (c >= MAXFLD + 1) {
 80028ec:	2cc8      	cmp	r4, #200	; 0xc8
 80028ee:	f340 832b 	ble.w	8002f48 <z_prf+0x74c>
 80028f2:	e797      	b.n	8002824 <z_prf+0x28>
				switch (c) {
 80028f4:	2c2d      	cmp	r4, #45	; 0x2d
 80028f6:	d00a      	beq.n	800290e <z_prf+0x112>
 80028f8:	2c30      	cmp	r4, #48	; 0x30
 80028fa:	d00b      	beq.n	8002914 <z_prf+0x118>
					fplus = true;
 80028fc:	2c2b      	cmp	r4, #43	; 0x2b
 80028fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002900:	bf08      	it	eq
 8002902:	2301      	moveq	r3, #1
 8002904:	930c      	str	r3, [sp, #48]	; 0x30
 8002906:	e7a5      	b.n	8002854 <z_prf+0x58>
					falt = true;
 8002908:	f04f 0901 	mov.w	r9, #1
 800290c:	e7a2      	b.n	8002854 <z_prf+0x58>
					fminus = true;
 800290e:	2301      	movs	r3, #1
 8002910:	930d      	str	r3, [sp, #52]	; 0x34
 8002912:	e79f      	b.n	8002854 <z_prf+0x58>
					pad = '0';
 8002914:	9406      	str	r4, [sp, #24]
 8002916:	e79d      	b.n	8002854 <z_prf+0x58>
			fminus = fplus = fspace = falt = false;
 8002918:	2300      	movs	r3, #0
 800291a:	2120      	movs	r1, #32
 800291c:	e9cd 1306 	strd	r1, r3, [sp, #24]
 8002920:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8002924:	4699      	mov	r9, r3
 8002926:	e796      	b.n	8002856 <z_prf+0x5a>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8002928:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
 800292c:	2b09      	cmp	r3, #9
				width = 0;
 800292e:	9002      	str	r0, [sp, #8]
			} else if (!isdigit(c)) {
 8002930:	d8af      	bhi.n	8002892 <z_prf+0x96>
		i = 10 * i + *p++ - '0';
 8002932:	220a      	movs	r2, #10
	while (isdigit(((int) *p))) {
 8002934:	46ab      	mov	fp, r5
 8002936:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800293a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800293e:	2b09      	cmp	r3, #9
 8002940:	4604      	mov	r4, r0
 8002942:	d8a1      	bhi.n	8002888 <z_prf+0x8c>
		i = 10 * i + *p++ - '0';
 8002944:	9b02      	ldr	r3, [sp, #8]
 8002946:	fb02 0003 	mla	r0, r2, r3, r0
 800294a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800294e:	9302      	str	r3, [sp, #8]
 8002950:	465d      	mov	r5, fp
 8002952:	e7ef      	b.n	8002934 <z_prf+0x138>
 8002954:	fb00 3505 	mla	r5, r0, r5, r3
 8002958:	3d30      	subs	r5, #48	; 0x30
 800295a:	4693      	mov	fp, r2
	while (isdigit(((int) *p))) {
 800295c:	465a      	mov	r2, fp
 800295e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8002962:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8002966:	2909      	cmp	r1, #9
 8002968:	d9f4      	bls.n	8002954 <z_prf+0x158>
 800296a:	e79c      	b.n	80028a6 <z_prf+0xaa>
	i = 0;
 800296c:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
 800296e:	200a      	movs	r0, #10
 8002970:	e7f4      	b.n	800295c <z_prf+0x160>
			precision = -1;	/* No precision specified   */
 8002972:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002976:	e79e      	b.n	80028b6 <z_prf+0xba>
			switch (c) {
 8002978:	2c63      	cmp	r4, #99	; 0x63
 800297a:	d078      	beq.n	8002a6e <z_prf+0x272>
 800297c:	dc3b      	bgt.n	80029f6 <z_prf+0x1fa>
 800297e:	2c58      	cmp	r4, #88	; 0x58
 8002980:	d1b4      	bne.n	80028ec <z_prf+0xf0>
				switch (i) {
 8002982:	1d33      	adds	r3, r6, #4
				if (c == 'o') {
 8002984:	2c6f      	cmp	r4, #111	; 0x6f
 8002986:	9301      	str	r3, [sp, #4]
 8002988:	6831      	ldr	r1, [r6, #0]
 800298a:	f040 82a0 	bne.w	8002ece <z_prf+0x6d2>
	if (alt_form) {
 800298e:	f1b9 0f00 	cmp.w	r9, #0
 8002992:	f000 828d 	beq.w	8002eb0 <z_prf+0x6b4>
		*buf++ = '0';
 8002996:	2330      	movs	r3, #48	; 0x30
 8002998:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		if (!value) {
 800299c:	2900      	cmp	r1, #0
 800299e:	f040 8293 	bne.w	8002ec8 <z_prf+0x6cc>
			prefix = 0;
 80029a2:	3501      	adds	r5, #1
 80029a4:	9b06      	ldr	r3, [sp, #24]
			*buf++ = 0;
 80029a6:	f88d 106d 	strb.w	r1, [sp, #109]	; 0x6d
			prefix = 0;
 80029aa:	bf18      	it	ne
 80029ac:	2320      	movne	r3, #32
 80029ae:	460f      	mov	r7, r1
 80029b0:	9306      	str	r3, [sp, #24]
				if (c < width) {
 80029b2:	9b02      	ldr	r3, [sp, #8]
 80029b4:	454b      	cmp	r3, r9
 80029b6:	f340 82ed 	ble.w	8002f94 <z_prf+0x798>
					if (fminus) {
 80029ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80029bc:	ac1b      	add	r4, sp, #108	; 0x6c
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 82c4 	beq.w	8002f4c <z_prf+0x750>
							buf[i] = ' ';
 80029c4:	2320      	movs	r3, #32
						for (i = c; i < width; i++) {
 80029c6:	9a02      	ldr	r2, [sp, #8]
							buf[i] = ' ';
 80029c8:	f804 3009 	strb.w	r3, [r4, r9]
						for (i = c; i < width; i++) {
 80029cc:	f109 0901 	add.w	r9, r9, #1
 80029d0:	454a      	cmp	r2, r9
 80029d2:	d1f8      	bne.n	80029c6 <z_prf+0x1ca>
 80029d4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80029d8:	4413      	add	r3, r2
 80029da:	ac1b      	add	r4, sp, #108	; 0x6c
 80029dc:	461d      	mov	r5, r3
 80029de:	e2d5      	b.n	8002f8c <z_prf+0x790>
			switch (c) {
 80029e0:	2c70      	cmp	r4, #112	; 0x70
 80029e2:	f000 8246 	beq.w	8002e72 <z_prf+0x676>
 80029e6:	dc27      	bgt.n	8002a38 <z_prf+0x23c>
 80029e8:	2c6e      	cmp	r4, #110	; 0x6e
 80029ea:	f000 8233 	beq.w	8002e54 <z_prf+0x658>
 80029ee:	dcc8      	bgt.n	8002982 <z_prf+0x186>
 80029f0:	2c69      	cmp	r4, #105	; 0x69
 80029f2:	f47f af7b 	bne.w	80028ec <z_prf+0xf0>
					val = va_arg(vargs, int);
 80029f6:	6834      	ldr	r4, [r6, #0]
	if (value < 0) {
 80029f8:	1d33      	adds	r3, r6, #4
 80029fa:	2c00      	cmp	r4, #0
 80029fc:	9301      	str	r3, [sp, #4]
 80029fe:	da43      	bge.n	8002a88 <z_prf+0x28c>
		*buf++ = '-';
 8002a00:	232d      	movs	r3, #45	; 0x2d
 8002a02:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		value = -value;
 8002a06:	4261      	negs	r1, r4
		*buf++ = ' ';
 8002a08:	f10d 0a6d 	add.w	sl, sp, #109	; 0x6d
	return _to_x(buf, value, 10, precision);
 8002a0c:	462b      	mov	r3, r5
 8002a0e:	220a      	movs	r2, #10
 8002a10:	4650      	mov	r0, sl
 8002a12:	f002 fd62 	bl	80054da <_to_x>
				if (fplus || fspace || val < 0) {
 8002a16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002a18:	9a07      	ldr	r2, [sp, #28]
	return (buf + _to_udec(buf, value, precision)) - start;
 8002a1a:	4450      	add	r0, sl
				if (fplus || fspace || val < 0) {
 8002a1c:	ea53 0702 	orrs.w	r7, r3, r2
	return (buf + _to_udec(buf, value, precision)) - start;
 8002a20:	f10d 0a6c 	add.w	sl, sp, #108	; 0x6c
 8002a24:	eba0 000a 	sub.w	r0, r0, sl
				if (fplus || fspace || val < 0) {
 8002a28:	d100      	bne.n	8002a2c <z_prf+0x230>
 8002a2a:	0fe7      	lsrs	r7, r4, #31
					pad = ' ';
 8002a2c:	3501      	adds	r5, #1
 8002a2e:	9b06      	ldr	r3, [sp, #24]
 8002a30:	bf18      	it	ne
 8002a32:	2320      	movne	r3, #32
 8002a34:	9306      	str	r3, [sp, #24]
 8002a36:	e07d      	b.n	8002b34 <z_prf+0x338>
			switch (c) {
 8002a38:	2c75      	cmp	r4, #117	; 0x75
 8002a3a:	d0a2      	beq.n	8002982 <z_prf+0x186>
 8002a3c:	2c78      	cmp	r4, #120	; 0x78
 8002a3e:	d0a0      	beq.n	8002982 <z_prf+0x186>
 8002a40:	2c73      	cmp	r4, #115	; 0x73
 8002a42:	f47f af53 	bne.w	80028ec <z_prf+0xf0>
				cptr_temp = va_arg(vargs, char *);
 8002a46:	4633      	mov	r3, r6
				for (c = 0; c < MAXFLD; c++) {
 8002a48:	f04f 0900 	mov.w	r9, #0
				cptr_temp = va_arg(vargs, char *);
 8002a4c:	f853 1b04 	ldr.w	r1, [r3], #4
 8002a50:	9301      	str	r3, [sp, #4]
					if (cptr_temp[c] == '\0') {
 8002a52:	f811 3009 	ldrb.w	r3, [r1, r9]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 821c 	beq.w	8002e94 <z_prf+0x698>
				for (c = 0; c < MAXFLD; c++) {
 8002a5c:	f109 0901 	add.w	r9, r9, #1
 8002a60:	f1b9 0fc8 	cmp.w	r9, #200	; 0xc8
 8002a64:	d1f5      	bne.n	8002a52 <z_prf+0x256>
				if ((precision >= 0) && (precision < c)) {
 8002a66:	2d00      	cmp	r5, #0
 8002a68:	f280 8216 	bge.w	8002e98 <z_prf+0x69c>
 8002a6c:	e21b      	b.n	8002ea6 <z_prf+0x6aa>
				buf[0] = va_arg(vargs, int);
 8002a6e:	4632      	mov	r2, r6
				c = 1;
 8002a70:	f04f 0901 	mov.w	r9, #1
				buf[0] = va_arg(vargs, int);
 8002a74:	f852 3b04 	ldr.w	r3, [r2], #4
 8002a78:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
				buf[1] = '\0';
 8002a7c:	2300      	movs	r3, #0
				buf[0] = va_arg(vargs, int);
 8002a7e:	9201      	str	r2, [sp, #4]
				buf[1] = '\0';
 8002a80:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
						prefix = 2;
 8002a84:	2700      	movs	r7, #0
 8002a86:	e794      	b.n	80029b2 <z_prf+0x1b6>
	} else if (fplus) {
 8002a88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002a8a:	b123      	cbz	r3, 8002a96 <z_prf+0x29a>
		*buf++ = '+';
 8002a8c:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
 8002a8e:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8002a92:	4621      	mov	r1, r4
 8002a94:	e7b8      	b.n	8002a08 <z_prf+0x20c>
	} else if (fspace) {
 8002a96:	9b07      	ldr	r3, [sp, #28]
 8002a98:	b10b      	cbz	r3, 8002a9e <z_prf+0x2a2>
		*buf++ = ' ';
 8002a9a:	2320      	movs	r3, #32
 8002a9c:	e7f7      	b.n	8002a8e <z_prf+0x292>
	} else if (fspace) {
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	f10d 0a6c 	add.w	sl, sp, #108	; 0x6c
 8002aa4:	e7b2      	b.n	8002a0c <z_prf+0x210>
				u.d = (double) va_arg(vargs, double);
 8002aa6:	3607      	adds	r6, #7
 8002aa8:	f026 0607 	bic.w	r6, r6, #7
 8002aac:	4633      	mov	r3, r6
 8002aae:	6871      	ldr	r1, [r6, #4]
 8002ab0:	f853 0b08 	ldr.w	r0, [r3], #8
 8002ab4:	9301      	str	r3, [sp, #4]
	fract = (double_temp << 11) & ~HIGHBIT64;
 8002ab6:	02cb      	lsls	r3, r1, #11
 8002ab8:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8002abc:	02c2      	lsls	r2, r0, #11
 8002abe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ac2:	9208      	str	r2, [sp, #32]
 8002ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8002ac6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
	exp = double_temp >> 52 & 0x7ff;
 8002aca:	f3c1 580a 	ubfx	r8, r1, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
 8002ace:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	sign = !!(double_temp & HIGHBIT64);
 8002ad2:	460b      	mov	r3, r1
	if (exp == 0x7ff) {
 8002ad4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8002ad8:	4588      	cmp	r8, r1
	sign = !!(double_temp & HIGHBIT64);
 8002ada:	4602      	mov	r2, r0
	if (exp == 0x7ff) {
 8002adc:	d145      	bne.n	8002b6a <z_prf+0x36e>
		if (sign) {
 8002ade:	2800      	cmp	r0, #0
		if (!fract) {
 8002ae0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
		if (sign) {
 8002ae4:	f173 0300 	sbcs.w	r3, r3, #0
			*buf++ = '-';
 8002ae8:	bfbb      	ittet	lt
 8002aea:	232d      	movlt	r3, #45	; 0x2d
 8002aec:	f88d 306c 	strblt.w	r3, [sp, #108]	; 0x6c
		if (sign) {
 8002af0:	ab1b      	addge	r3, sp, #108	; 0x6c
			*buf++ = '-';
 8002af2:	f10d 036d 	addlt.w	r3, sp, #109	; 0x6d
		if (!fract) {
 8002af6:	430a      	orrs	r2, r1
 8002af8:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
 8002afc:	f103 0003 	add.w	r0, r3, #3
 8002b00:	d128      	bne.n	8002b54 <z_prf+0x358>
			if (isupper(c)) {
 8002b02:	2c19      	cmp	r4, #25
 8002b04:	d81b      	bhi.n	8002b3e <z_prf+0x342>
				*buf++ = 'I';
 8002b06:	2249      	movs	r2, #73	; 0x49
 8002b08:	701a      	strb	r2, [r3, #0]
				*buf++ = 'N';
 8002b0a:	224e      	movs	r2, #78	; 0x4e
 8002b0c:	705a      	strb	r2, [r3, #1]
				*buf++ = 'F';
 8002b0e:	2246      	movs	r2, #70	; 0x46
				*buf++ = 'n';
 8002b10:	709a      	strb	r2, [r3, #2]
		return buf - start;
 8002b12:	f10d 0a6c 	add.w	sl, sp, #108	; 0x6c
		*buf = 0;
 8002b16:	2200      	movs	r2, #0
 8002b18:	70da      	strb	r2, [r3, #3]
		return buf - start;
 8002b1a:	eba0 000a 	sub.w	r0, r0, sl
				if (fplus || fspace || (buf[0] == '-')) {
 8002b1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b20:	9a07      	ldr	r2, [sp, #28]
 8002b22:	ea53 0702 	orrs.w	r7, r3, r2
 8002b26:	d105      	bne.n	8002b34 <z_prf+0x338>
 8002b28:	f89d 706c 	ldrb.w	r7, [sp, #108]	; 0x6c
 8002b2c:	f1a7 032d 	sub.w	r3, r7, #45	; 0x2d
 8002b30:	425f      	negs	r7, r3
 8002b32:	415f      	adcs	r7, r3
			if (c >= MAXFLD + 1) {
 8002b34:	28c8      	cmp	r0, #200	; 0xc8
 8002b36:	f73f ae75 	bgt.w	8002824 <z_prf+0x28>
 8002b3a:	4681      	mov	r9, r0
 8002b3c:	e739      	b.n	80029b2 <z_prf+0x1b6>
				*buf++ = 'i';
 8002b3e:	2269      	movs	r2, #105	; 0x69
 8002b40:	701a      	strb	r2, [r3, #0]
				*buf++ = 'n';
 8002b42:	226e      	movs	r2, #110	; 0x6e
 8002b44:	705a      	strb	r2, [r3, #1]
				*buf++ = 'f';
 8002b46:	2266      	movs	r2, #102	; 0x66
 8002b48:	e7e2      	b.n	8002b10 <z_prf+0x314>
 8002b4a:	bf00      	nop
 8002b4c:	08006e9e 	.word	0x08006e9e
 8002b50:	08006ea4 	.word	0x08006ea4
			if (isupper(c)) {
 8002b54:	2c19      	cmp	r4, #25
				*buf++ = 'N';
 8002b56:	bf99      	ittee	ls
 8002b58:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
 8002b5a:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
 8002b5c:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
 8002b5e:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
 8002b60:	bf94      	ite	ls
 8002b62:	701a      	strbls	r2, [r3, #0]
				*buf++ = 'n';
 8002b64:	701a      	strbhi	r2, [r3, #0]
				*buf++ = 'a';
 8002b66:	7059      	strb	r1, [r3, #1]
 8002b68:	e7d2      	b.n	8002b10 <z_prf+0x314>
	if ((exp | fract) != 0) {
 8002b6a:	9908      	ldr	r1, [sp, #32]
 8002b6c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002b6e:	ea48 0101 	orr.w	r1, r8, r1
 8002b72:	4640      	mov	r0, r8
 8002b74:	9110      	str	r1, [sp, #64]	; 0x40
 8002b76:	17c1      	asrs	r1, r0, #31
 8002b78:	4331      	orrs	r1, r6
 8002b7a:	9111      	str	r1, [sp, #68]	; 0x44
 8002b7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
		c = 'f';
 8002b80:	2c46      	cmp	r4, #70	; 0x46
 8002b82:	bf08      	it	eq
 8002b84:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
 8002b86:	4301      	orrs	r1, r0
 8002b88:	d040      	beq.n	8002c0c <z_prf+0x410>
		fract |= HIGHBIT64;
 8002b8a:	9808      	ldr	r0, [sp, #32]
	if (decexp && sign) {
 8002b8c:	2a00      	cmp	r2, #0
		fract |= HIGHBIT64;
 8002b8e:	f046 4100 	orr.w	r1, r6, #2147483648	; 0x80000000
	if (decexp && sign) {
 8002b92:	f173 0300 	sbcs.w	r3, r3, #0
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
 8002b96:	f2a8 38fe 	subw	r8, r8, #1022	; 0x3fe
		fract |= HIGHBIT64;
 8002b9a:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
	if (decexp && sign) {
 8002b9e:	da37      	bge.n	8002c10 <z_prf+0x414>
		*buf++ = '-';
 8002ba0:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
 8002ba2:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8002ba6:	f10d 076d 	add.w	r7, sp, #109	; 0x6d
	decexp = 0;
 8002baa:	2600      	movs	r6, #0
	while (exp <= -3) {
 8002bac:	f118 0f02 	cmn.w	r8, #2
 8002bb0:	db3b      	blt.n	8002c2a <z_prf+0x42e>
	while (exp > 0) {
 8002bb2:	f1b8 0f00 	cmp.w	r8, #0
 8002bb6:	dc74      	bgt.n	8002ca2 <z_prf+0x4a6>
		_rlrshift(&fract);
 8002bb8:	a816      	add	r0, sp, #88	; 0x58
		exp++;
 8002bba:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
 8002bbe:	f002 fcb3 	bl	8005528 <_rlrshift>
	while (exp < (0 + 4)) {
 8002bc2:	f1b8 0f04 	cmp.w	r8, #4
 8002bc6:	d1f7      	bne.n	8002bb8 <z_prf+0x3bc>
		precision = 6;		/* Default precision if none given */
 8002bc8:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
 8002bca:	f024 0320 	bic.w	r3, r4, #32
		precision = 6;		/* Default precision if none given */
 8002bce:	bfb8      	it	lt
 8002bd0:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
 8002bd2:	2b47      	cmp	r3, #71	; 0x47
 8002bd4:	f040 808a 	bne.w	8002cec <z_prf+0x4f0>
		if (!falt && (precision > 0)) {
 8002bd8:	f1b9 0f00 	cmp.w	r9, #0
 8002bdc:	f040 8083 	bne.w	8002ce6 <z_prf+0x4ea>
 8002be0:	f115 0800 	adds.w	r8, r5, #0
 8002be4:	bf18      	it	ne
 8002be6:	f04f 0801 	movne.w	r8, #1
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
 8002bea:	1cf2      	adds	r2, r6, #3
 8002bec:	db02      	blt.n	8002bf4 <z_prf+0x3f8>
 8002bee:	1c6b      	adds	r3, r5, #1
 8002bf0:	429e      	cmp	r6, r3
 8002bf2:	dd7f      	ble.n	8002cf4 <z_prf+0x4f8>
				c = 'E';
 8002bf4:	2c67      	cmp	r4, #103	; 0x67
 8002bf6:	bf0c      	ite	eq
 8002bf8:	2465      	moveq	r4, #101	; 0x65
 8002bfa:	2445      	movne	r4, #69	; 0x45
		exp = precision + 1;
 8002bfc:	f105 0a01 	add.w	sl, r5, #1
	digit_count = 16;
 8002c00:	2310      	movs	r3, #16
 8002c02:	459a      	cmp	sl, r3
 8002c04:	9315      	str	r3, [sp, #84]	; 0x54
	if (exp > 16) {
 8002c06:	bfa8      	it	ge
 8002c08:	469a      	movge	sl, r3
 8002c0a:	e07b      	b.n	8002d04 <z_prf+0x508>
	exp = double_temp >> 52 & 0x7ff;
 8002c0c:	f04f 0800 	mov.w	r8, #0
	} else if (fplus) {
 8002c10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c12:	b10b      	cbz	r3, 8002c18 <z_prf+0x41c>
		*buf++ = '+';
 8002c14:	232b      	movs	r3, #43	; 0x2b
 8002c16:	e7c4      	b.n	8002ba2 <z_prf+0x3a6>
	} else if (fspace) {
 8002c18:	9b07      	ldr	r3, [sp, #28]
 8002c1a:	b10b      	cbz	r3, 8002c20 <z_prf+0x424>
		*buf++ = ' ';
 8002c1c:	2320      	movs	r3, #32
 8002c1e:	e7c0      	b.n	8002ba2 <z_prf+0x3a6>
	} else if (fspace) {
 8002c20:	af1b      	add	r7, sp, #108	; 0x6c
 8002c22:	e7c2      	b.n	8002baa <z_prf+0x3ae>
			_rlrshift(&fract);
 8002c24:	a816      	add	r0, sp, #88	; 0x58
 8002c26:	f002 fc7f 	bl	8005528 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
 8002c2a:	e9dd ec16 	ldrd	lr, ip, [sp, #88]	; 0x58
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8002c34:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c36:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002c3a:	48bd      	ldr	r0, [pc, #756]	; (8002f30 <z_prf+0x734>)
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	4299      	cmp	r1, r3
 8002c40:	bf08      	it	eq
 8002c42:	4290      	cmpeq	r0, r2
 8002c44:	f108 0801 	add.w	r8, r8, #1
 8002c48:	d3ec      	bcc.n	8002c24 <z_prf+0x428>
		fract *= 5U;
 8002c4a:	2005      	movs	r0, #5
 8002c4c:	fbae 2300 	umull	r2, r3, lr, r0
 8002c50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002c54:	9b05      	ldr	r3, [sp, #20]
 8002c56:	fb00 330c 	mla	r3, r0, ip, r3
 8002c5a:	9305      	str	r3, [sp, #20]
 8002c5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c60:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		decexp--;
 8002c64:	3e01      	subs	r6, #1
 8002c66:	f04f 0c00 	mov.w	ip, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
 8002c6a:	9805      	ldr	r0, [sp, #20]
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	2300      	movs	r3, #0
 8002c70:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002c74:	428b      	cmp	r3, r1
 8002c76:	bf08      	it	eq
 8002c78:	4282      	cmpeq	r2, r0
 8002c7a:	d207      	bcs.n	8002c8c <z_prf+0x490>
 8002c7c:	f1bc 0f00 	cmp.w	ip, #0
 8002c80:	d094      	beq.n	8002bac <z_prf+0x3b0>
 8002c82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c86:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8002c8a:	e78f      	b.n	8002bac <z_prf+0x3b0>
			fract <<= 1;
 8002c8c:	9b04      	ldr	r3, [sp, #16]
 8002c8e:	18db      	adds	r3, r3, r3
 8002c90:	9304      	str	r3, [sp, #16]
 8002c92:	9b05      	ldr	r3, [sp, #20]
 8002c94:	415b      	adcs	r3, r3
 8002c96:	9305      	str	r3, [sp, #20]
			exp--;
 8002c98:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8002c9c:	f04f 0c01 	mov.w	ip, #1
 8002ca0:	e7e3      	b.n	8002c6a <z_prf+0x46e>
		_ldiv5(&fract);
 8002ca2:	a816      	add	r0, sp, #88	; 0x58
 8002ca4:	f002 fc52 	bl	800554c <_ldiv5>
		exp--;
 8002ca8:	e9dd ae16 	ldrd	sl, lr, [sp, #88]	; 0x58
 8002cac:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
 8002cb0:	3601      	adds	r6, #1
 8002cb2:	f04f 0c00 	mov.w	ip, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	2100      	movs	r1, #0
 8002cba:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8002cbe:	4299      	cmp	r1, r3
 8002cc0:	bf08      	it	eq
 8002cc2:	4570      	cmpeq	r0, lr
 8002cc4:	d206      	bcs.n	8002cd4 <z_prf+0x4d8>
 8002cc6:	f1bc 0f00 	cmp.w	ip, #0
 8002cca:	f43f af72 	beq.w	8002bb2 <z_prf+0x3b6>
 8002cce:	e9cd ae16 	strd	sl, lr, [sp, #88]	; 0x58
 8002cd2:	e76e      	b.n	8002bb2 <z_prf+0x3b6>
			fract <<= 1;
 8002cd4:	eb1a 0a0a 	adds.w	sl, sl, sl
 8002cd8:	eb4e 0e0e 	adc.w	lr, lr, lr
			exp--;
 8002cdc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8002ce0:	f04f 0c01 	mov.w	ip, #1
 8002ce4:	e7e7      	b.n	8002cb6 <z_prf+0x4ba>
	prune_zero = false;		/* Assume trailing 0's allowed     */
 8002ce6:	f04f 0800 	mov.w	r8, #0
 8002cea:	e77e      	b.n	8002bea <z_prf+0x3ee>
	if (c == 'f') {
 8002cec:	2c66      	cmp	r4, #102	; 0x66
	prune_zero = false;		/* Assume trailing 0's allowed     */
 8002cee:	f04f 0800 	mov.w	r8, #0
	if (c == 'f') {
 8002cf2:	d183      	bne.n	8002bfc <z_prf+0x400>
		if (exp < 0) {
 8002cf4:	eb16 0a05 	adds.w	sl, r6, r5
 8002cf8:	d540      	bpl.n	8002d7c <z_prf+0x580>
	digit_count = 16;
 8002cfa:	2310      	movs	r3, #16
 8002cfc:	9315      	str	r3, [sp, #84]	; 0x54
 8002cfe:	2466      	movs	r4, #102	; 0x66
			exp = 0;
 8002d00:	f04f 0a00 	mov.w	sl, #0
	ltemp = 0x0800000000000000;
 8002d04:	2200      	movs	r2, #0
 8002d06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d0a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	while (exp--) {
 8002d0e:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
 8002d12:	d235      	bcs.n	8002d80 <z_prf+0x584>
	fract += ltemp;
 8002d14:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002d16:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8002d18:	9919      	ldr	r1, [sp, #100]	; 0x64
 8002d1a:	189b      	adds	r3, r3, r2
 8002d1c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8002d1e:	eb41 0202 	adc.w	r2, r1, r2
 8002d22:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
	if ((fract >> 32) & 0xF0000000) {
 8002d26:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
 8002d2a:	9312      	str	r3, [sp, #72]	; 0x48
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	9313      	str	r3, [sp, #76]	; 0x4c
 8002d30:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8002d34:	4313      	orrs	r3, r2
 8002d36:	d006      	beq.n	8002d46 <z_prf+0x54a>
		_ldiv5(&fract);
 8002d38:	a816      	add	r0, sp, #88	; 0x58
 8002d3a:	f002 fc07 	bl	800554c <_ldiv5>
		_rlrshift(&fract);
 8002d3e:	a816      	add	r0, sp, #88	; 0x58
 8002d40:	f002 fbf2 	bl	8005528 <_rlrshift>
		decexp++;
 8002d44:	3601      	adds	r6, #1
	if (c == 'f') {
 8002d46:	2c66      	cmp	r4, #102	; 0x66
 8002d48:	f107 0201 	add.w	r2, r7, #1
 8002d4c:	d136      	bne.n	8002dbc <z_prf+0x5c0>
		if (decexp > 0) {
 8002d4e:	2e00      	cmp	r6, #0
 8002d50:	dd1d      	ble.n	8002d8e <z_prf+0x592>
 8002d52:	eb07 0a06 	add.w	sl, r7, r6
				*buf++ = _get_digit(&fract, &digit_count);
 8002d56:	a915      	add	r1, sp, #84	; 0x54
 8002d58:	a816      	add	r0, sp, #88	; 0x58
 8002d5a:	f002 fc23 	bl	80055a4 <_get_digit>
 8002d5e:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0) {
 8002d62:	45ba      	cmp	sl, r7
 8002d64:	d1f7      	bne.n	8002d56 <z_prf+0x55a>
 8002d66:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
 8002d68:	ea59 0905 	orrs.w	r9, r9, r5
 8002d6c:	d003      	beq.n	8002d76 <z_prf+0x57a>
			*buf++ = '.';
 8002d6e:	232e      	movs	r3, #46	; 0x2e
 8002d70:	f80a 3b01 	strb.w	r3, [sl], #1
 8002d74:	46a9      	mov	r9, r5
 8002d76:	44d1      	add	r9, sl
				*buf++ = '0';
 8002d78:	2530      	movs	r5, #48	; 0x30
 8002d7a:	e012      	b.n	8002da2 <z_prf+0x5a6>
		if (exp < 0) {
 8002d7c:	2466      	movs	r4, #102	; 0x66
 8002d7e:	e73f      	b.n	8002c00 <z_prf+0x404>
		_ldiv5(&ltemp);
 8002d80:	a818      	add	r0, sp, #96	; 0x60
 8002d82:	f002 fbe3 	bl	800554c <_ldiv5>
		_rlrshift(&ltemp);
 8002d86:	a818      	add	r0, sp, #96	; 0x60
 8002d88:	f002 fbce 	bl	8005528 <_rlrshift>
 8002d8c:	e7bf      	b.n	8002d0e <z_prf+0x512>
			*buf++ = '0';
 8002d8e:	2330      	movs	r3, #48	; 0x30
 8002d90:	703b      	strb	r3, [r7, #0]
 8002d92:	4692      	mov	sl, r2
 8002d94:	e7e8      	b.n	8002d68 <z_prf+0x56c>
			if (decexp < 0) {
 8002d96:	f10a 0a01 	add.w	sl, sl, #1
 8002d9a:	b146      	cbz	r6, 8002dae <z_prf+0x5b2>
				*buf++ = '0';
 8002d9c:	f80a 5c01 	strb.w	r5, [sl, #-1]
				decexp++;
 8002da0:	3601      	adds	r6, #1
		while (precision-- > 0) {
 8002da2:	45d1      	cmp	r9, sl
 8002da4:	d1f7      	bne.n	8002d96 <z_prf+0x59a>
	if (prune_zero) {
 8002da6:	f1b8 0f00 	cmp.w	r8, #0
 8002daa:	d129      	bne.n	8002e00 <z_prf+0x604>
 8002dac:	e04b      	b.n	8002e46 <z_prf+0x64a>
				*buf++ = _get_digit(&fract, &digit_count);
 8002dae:	a915      	add	r1, sp, #84	; 0x54
 8002db0:	a816      	add	r0, sp, #88	; 0x58
 8002db2:	f002 fbf7 	bl	80055a4 <_get_digit>
 8002db6:	f80a 0c01 	strb.w	r0, [sl, #-1]
 8002dba:	e7f2      	b.n	8002da2 <z_prf+0x5a6>
		*buf = _get_digit(&fract, &digit_count);
 8002dbc:	a915      	add	r1, sp, #84	; 0x54
 8002dbe:	a816      	add	r0, sp, #88	; 0x58
 8002dc0:	9204      	str	r2, [sp, #16]
 8002dc2:	f002 fbef 	bl	80055a4 <_get_digit>
		if (*buf++ != '0') {
 8002dc6:	2830      	cmp	r0, #48	; 0x30
			decexp--;
 8002dc8:	bf18      	it	ne
 8002dca:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
 8002dce:	ea59 0905 	orrs.w	r9, r9, r5
		*buf = _get_digit(&fract, &digit_count);
 8002dd2:	7038      	strb	r0, [r7, #0]
		if (*buf++ != '0') {
 8002dd4:	9a04      	ldr	r2, [sp, #16]
		if (falt || (precision > 0)) {
 8002dd6:	d003      	beq.n	8002de0 <z_prf+0x5e4>
			*buf++ = '.';
 8002dd8:	232e      	movs	r3, #46	; 0x2e
 8002dda:	1cba      	adds	r2, r7, #2
 8002ddc:	707b      	strb	r3, [r7, #1]
 8002dde:	46a9      	mov	r9, r5
 8002de0:	eb02 0a09 	add.w	sl, r2, r9
 8002de4:	e007      	b.n	8002df6 <z_prf+0x5fa>
			*buf++ = _get_digit(&fract, &digit_count);
 8002de6:	a915      	add	r1, sp, #84	; 0x54
 8002de8:	a816      	add	r0, sp, #88	; 0x58
 8002dea:	9204      	str	r2, [sp, #16]
 8002dec:	f002 fbda 	bl	80055a4 <_get_digit>
 8002df0:	9a04      	ldr	r2, [sp, #16]
 8002df2:	f802 0b01 	strb.w	r0, [r2], #1
		while (precision-- > 0) {
 8002df6:	4552      	cmp	r2, sl
 8002df8:	d1f5      	bne.n	8002de6 <z_prf+0x5ea>
	if (prune_zero) {
 8002dfa:	f1b8 0f00 	cmp.w	r8, #0
 8002dfe:	d007      	beq.n	8002e10 <z_prf+0x614>
		while (*--buf == '0') {
 8002e00:	4653      	mov	r3, sl
 8002e02:	f81a 2d01 	ldrb.w	r2, [sl, #-1]!
 8002e06:	2a30      	cmp	r2, #48	; 0x30
 8002e08:	d0fa      	beq.n	8002e00 <z_prf+0x604>
		if (*buf != '.') {
 8002e0a:	2a2e      	cmp	r2, #46	; 0x2e
 8002e0c:	bf18      	it	ne
 8002e0e:	469a      	movne	sl, r3
	if ((c == 'e') || (c == 'E')) {
 8002e10:	f024 0320 	bic.w	r3, r4, #32
 8002e14:	2b45      	cmp	r3, #69	; 0x45
 8002e16:	d116      	bne.n	8002e46 <z_prf+0x64a>
		if (decexp < 0) {
 8002e18:	2e00      	cmp	r6, #0
			decexp = -decexp;
 8002e1a:	bfba      	itte	lt
 8002e1c:	4276      	neglt	r6, r6
			*buf++ = '-';
 8002e1e:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
 8002e20:	232b      	movge	r3, #43	; 0x2b
		*buf++ = (char) ((decexp / 10) + '0');
 8002e22:	220a      	movs	r2, #10
 8002e24:	f88a 3001 	strb.w	r3, [sl, #1]
 8002e28:	fb96 f3f2 	sdiv	r3, r6, r2
		decexp %= 10;
 8002e2c:	fb02 6613 	mls	r6, r2, r3, r6
		*buf++ = (char) ((decexp / 10) + '0');
 8002e30:	f103 0130 	add.w	r1, r3, #48	; 0x30
		*buf++ = (char) (decexp + '0');
 8002e34:	3630      	adds	r6, #48	; 0x30
		*buf++ = (char) c;
 8002e36:	f88a 4000 	strb.w	r4, [sl]
		*buf++ = (char) ((decexp / 10) + '0');
 8002e3a:	f88a 1002 	strb.w	r1, [sl, #2]
		*buf++ = (char) (decexp + '0');
 8002e3e:	f88a 6003 	strb.w	r6, [sl, #3]
 8002e42:	f10a 0a04 	add.w	sl, sl, #4
	*buf = 0;
 8002e46:	2300      	movs	r3, #0
	return buf - start;
 8002e48:	a81b      	add	r0, sp, #108	; 0x6c
	*buf = 0;
 8002e4a:	f88a 3000 	strb.w	r3, [sl]
	return buf - start;
 8002e4e:	ebaa 0000 	sub.w	r0, sl, r0
 8002e52:	e664      	b.n	8002b1e <z_prf+0x322>
				switch (i) {
 8002e54:	4632      	mov	r2, r6
 8002e56:	286c      	cmp	r0, #108	; 0x6c
 8002e58:	f852 3b04 	ldr.w	r3, [r2], #4
 8002e5c:	9201      	str	r2, [sp, #4]
					*va_arg(vargs, int *) = count;
 8002e5e:	9a03      	ldr	r2, [sp, #12]
 8002e60:	d005      	beq.n	8002e6e <z_prf+0x672>
 8002e62:	287a      	cmp	r0, #122	; 0x7a
 8002e64:	d003      	beq.n	8002e6e <z_prf+0x672>
 8002e66:	2868      	cmp	r0, #104	; 0x68
 8002e68:	d101      	bne.n	8002e6e <z_prf+0x672>
					*va_arg(vargs, short *) = count;
 8002e6a:	801a      	strh	r2, [r3, #0]
					break;
 8002e6c:	e4e6      	b.n	800283c <z_prf+0x40>
					*va_arg(vargs, int *) = count;
 8002e6e:	601a      	str	r2, [r3, #0]
					break;
 8002e70:	e4e4      	b.n	800283c <z_prf+0x40>
	len = _to_x(buf, value, 16, precision);
 8002e72:	4630      	mov	r0, r6
		*buf++ = '0';
 8002e74:	f647 0330 	movw	r3, #30768	; 0x7830
	len = _to_x(buf, value, 16, precision);
 8002e78:	f850 1b04 	ldr.w	r1, [r0], #4
		*buf++ = '0';
 8002e7c:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16, precision);
 8002e80:	9001      	str	r0, [sp, #4]
 8002e82:	2308      	movs	r3, #8
 8002e84:	2210      	movs	r2, #16
 8002e86:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
 8002e8a:	f002 fb26 	bl	80054da <_to_x>
	return len + (buf - buf0);
 8002e8e:	3002      	adds	r0, #2
			prefix = 0;
 8002e90:	2700      	movs	r7, #0
 8002e92:	e5cb      	b.n	8002a2c <z_prf+0x230>
				if ((precision >= 0) && (precision < c)) {
 8002e94:	2d00      	cmp	r5, #0
 8002e96:	db02      	blt.n	8002e9e <z_prf+0x6a2>
 8002e98:	45a9      	cmp	r9, r5
 8002e9a:	bfa8      	it	ge
 8002e9c:	46a9      	movge	r9, r5
				if (c > 0) {
 8002e9e:	f1b9 0f00 	cmp.w	r9, #0
 8002ea2:	f43f accb 	beq.w	800283c <z_prf+0x40>
					memcpy(buf, cptr_temp, (size_t) c);
 8002ea6:	464a      	mov	r2, r9
 8002ea8:	a81b      	add	r0, sp, #108	; 0x6c
 8002eaa:	f002 faca 	bl	8005442 <memcpy>
					need_justifying = true;
 8002eae:	e5e9      	b.n	8002a84 <z_prf+0x288>
	if (alt_form) {
 8002eb0:	f10d 0a6c 	add.w	sl, sp, #108	; 0x6c
	return (buf - buf0) + _to_x(buf, value, 8, precision);
 8002eb4:	4650      	mov	r0, sl
 8002eb6:	462b      	mov	r3, r5
 8002eb8:	2208      	movs	r2, #8
 8002eba:	f002 fb0e 	bl	80054da <_to_x>
 8002ebe:	ae1b      	add	r6, sp, #108	; 0x6c
 8002ec0:	ebaa 0a06 	sub.w	sl, sl, r6
 8002ec4:	4450      	add	r0, sl
 8002ec6:	e7e3      	b.n	8002e90 <z_prf+0x694>
		*buf++ = '0';
 8002ec8:	f10d 0a6d 	add.w	sl, sp, #109	; 0x6d
 8002ecc:	e7f2      	b.n	8002eb4 <z_prf+0x6b8>
				} else if (c == 'u') {
 8002ece:	2c75      	cmp	r4, #117	; 0x75
 8002ed0:	d105      	bne.n	8002ede <z_prf+0x6e2>
	return _to_x(buf, value, 10, precision);
 8002ed2:	462b      	mov	r3, r5
 8002ed4:	220a      	movs	r2, #10
 8002ed6:	a81b      	add	r0, sp, #108	; 0x6c
 8002ed8:	f002 faff 	bl	80054da <_to_x>
 8002edc:	e7d8      	b.n	8002e90 <z_prf+0x694>
	if (alt_form) {
 8002ede:	f1b9 0f00 	cmp.w	r9, #0
 8002ee2:	d01b      	beq.n	8002f1c <z_prf+0x720>
		*buf++ = '0';
 8002ee4:	f647 0330 	movw	r3, #30768	; 0x7830
 8002ee8:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
		*buf++ = 'x';
 8002eec:	f10d 066e 	add.w	r6, sp, #110	; 0x6e
	len = _to_x(buf, value, 16, precision);
 8002ef0:	462b      	mov	r3, r5
 8002ef2:	2210      	movs	r2, #16
 8002ef4:	4630      	mov	r0, r6
 8002ef6:	f002 faf0 	bl	80054da <_to_x>
	if (prefix == 'X') {
 8002efa:	2c58      	cmp	r4, #88	; 0x58
 8002efc:	d103      	bne.n	8002f06 <z_prf+0x70a>
 8002efe:	aa1b      	add	r2, sp, #108	; 0x6c
	for (/**/; *buf; buf++) {
 8002f00:	f812 3b01 	ldrb.w	r3, [r2], #1
 8002f04:	b963      	cbnz	r3, 8002f20 <z_prf+0x724>
	return len + (buf - buf0);
 8002f06:	f10d 0a6c 	add.w	sl, sp, #108	; 0x6c
			prefix = 0;
 8002f0a:	f1b9 0f00 	cmp.w	r9, #0
	return len + (buf - buf0);
 8002f0e:	eba6 0a0a 	sub.w	sl, r6, sl
 8002f12:	4450      	add	r0, sl
			prefix = 0;
 8002f14:	bf14      	ite	ne
 8002f16:	2702      	movne	r7, #2
 8002f18:	2700      	moveq	r7, #0
 8002f1a:	e587      	b.n	8002a2c <z_prf+0x230>
	if (alt_form) {
 8002f1c:	ae1b      	add	r6, sp, #108	; 0x6c
 8002f1e:	e7e7      	b.n	8002ef0 <z_prf+0x6f4>
		if (*buf >= 'a' && *buf <= 'z') {
 8002f20:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8002f24:	2919      	cmp	r1, #25
			*buf += 'A' - 'a';
 8002f26:	bf9c      	itt	ls
 8002f28:	3b20      	subls	r3, #32
 8002f2a:	f802 3c01 	strbls.w	r3, [r2, #-1]
 8002f2e:	e7e7      	b.n	8002f00 <z_prf+0x704>
 8002f30:	33333332 	.word	0x33333332
				if ((*func)('%', dest) == EOF) {
 8002f34:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002f36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f38:	4620      	mov	r0, r4
 8002f3a:	4798      	blx	r3
 8002f3c:	3001      	adds	r0, #1
 8002f3e:	f43f ac71 	beq.w	8002824 <z_prf+0x28>
				count++;
 8002f42:	9b03      	ldr	r3, [sp, #12]
 8002f44:	3301      	adds	r3, #1
 8002f46:	9303      	str	r3, [sp, #12]
			if (c >= MAXFLD + 1) {
 8002f48:	9601      	str	r6, [sp, #4]
 8002f4a:	e477      	b.n	800283c <z_prf+0x40>
						(void) memmove((buf + (width - c)), buf, (size_t) (c
 8002f4c:	9b02      	ldr	r3, [sp, #8]
 8002f4e:	eba3 0509 	sub.w	r5, r3, r9
 8002f52:	1960      	adds	r0, r4, r5
 8002f54:	f109 0201 	add.w	r2, r9, #1
 8002f58:	4621      	mov	r1, r4
 8002f5a:	f002 fa5b 	bl	8005414 <memmove>
							prefix = 0;
 8002f5e:	9b06      	ldr	r3, [sp, #24]
 8002f60:	2b20      	cmp	r3, #32
 8002f62:	bf08      	it	eq
 8002f64:	2700      	moveq	r7, #0
						c = width - c + prefix;
 8002f66:	443d      	add	r5, r7
						for (i = prefix; i < c; i++) {
 8002f68:	42af      	cmp	r7, r5
 8002f6a:	f6bf ad33 	bge.w	80029d4 <z_prf+0x1d8>
							buf[i] = pad;
 8002f6e:	9b06      	ldr	r3, [sp, #24]
 8002f70:	553b      	strb	r3, [r7, r4]
						for (i = prefix; i < c; i++) {
 8002f72:	3701      	adds	r7, #1
 8002f74:	e7f8      	b.n	8002f68 <z_prf+0x76c>
					if ((*func)(*cptr, dest) == EOF) {
 8002f76:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002f78:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002f7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f7e:	4798      	blx	r3
 8002f80:	3001      	adds	r0, #1
 8002f82:	f43f ac4f 	beq.w	8002824 <z_prf+0x28>
				for (cptr = buf; c > 0; c--, cptr++, count++) {
 8002f86:	9b03      	ldr	r3, [sp, #12]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	9303      	str	r3, [sp, #12]
 8002f8c:	9b03      	ldr	r3, [sp, #12]
 8002f8e:	42ab      	cmp	r3, r5
 8002f90:	d1f1      	bne.n	8002f76 <z_prf+0x77a>
 8002f92:	e453      	b.n	800283c <z_prf+0x40>
 8002f94:	f8cd 9008 	str.w	r9, [sp, #8]
 8002f98:	e51c      	b.n	80029d4 <z_prf+0x1d8>
 8002f9a:	bf00      	nop

08002f9c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8002f9c:	4b01      	ldr	r3, [pc, #4]	; (8002fa4 <__stdout_hook_install+0x8>)
 8002f9e:	6018      	str	r0, [r3, #0]
}
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	200058b0 	.word	0x200058b0

08002fa8 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
 8002fa8:	b40c      	push	{r2, r3}
 8002faa:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
 8002fac:	b909      	cbnz	r1, 8002fb2 <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
 8002fae:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
 8002fb2:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
 8002fb6:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
 8002fb8:	9a06      	ldr	r2, [sp, #24]
 8002fba:	4806      	ldr	r0, [pc, #24]	; (8002fd4 <snprintf+0x2c>)
	va_start(vargs, format);
 8002fbc:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
 8002fbe:	a902      	add	r1, sp, #8
 8002fc0:	f7ff fc1c 	bl	80027fc <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
 8002fc4:	9b02      	ldr	r3, [sp, #8]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	701a      	strb	r2, [r3, #0]
	return r;
}
 8002fca:	b005      	add	sp, #20
 8002fcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fd0:	b002      	add	sp, #8
 8002fd2:	4770      	bx	lr
 8002fd4:	080055d9 	.word	0x080055d9

08002fd8 <pinmux_stm32_init>:
	{STM32_PIN_PC0, STM32L4X_PINMUX_FUNC_PC0_ADC123_IN1},
#endif /* CONFIG_ADC_1 */
};

static int pinmux_stm32_init(struct device *port)
{
 8002fd8:	b508      	push	{r3, lr}
	ARG_UNUSED(port);

	stm32_setup_pins(pinconf, ARRAY_SIZE(pinconf));
 8002fda:	2107      	movs	r1, #7
 8002fdc:	4802      	ldr	r0, [pc, #8]	; (8002fe8 <pinmux_stm32_init+0x10>)
 8002fde:	f7fe fc45 	bl	800186c <stm32_setup_pins>

	return 0;
}
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	bd08      	pop	{r3, pc}
 8002fe6:	bf00      	nop
 8002fe8:	08006480 	.word	0x08006480

08002fec <gpio_stm32_init>:
 *
 * @return 0
 */
static int gpio_stm32_init(struct device *device)
{
	const struct gpio_stm32_config *cfg = device->config->config_info;
 8002fec:	6803      	ldr	r3, [r0, #0]
{
 8002fee:	b513      	push	{r0, r1, r4, lr}
 8002ff0:	4816      	ldr	r0, [pc, #88]	; (800304c <gpio_stm32_init+0x60>)
	const struct gpio_stm32_config *cfg = device->config->config_info;
 8002ff2:	689c      	ldr	r4, [r3, #8]
 8002ff4:	f000 fbec 	bl	80037d0 <z_impl_device_get_binding>
 8002ff8:	6843      	ldr	r3, [r0, #4]
 8002ffa:	f104 0108 	add.w	r1, r4, #8
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4798      	blx	r3

	/* enable clock for subsystem */
	struct device *clk =
		device_get_binding(STM32_CLOCK_CONTROL_NAME);

	if (clock_control_on(clk,
 8003002:	bb00      	cbnz	r0, 8003046 <gpio_stm32_init+0x5a>
			     (clock_control_subsys_t *)&cfg->pclken) != 0) {
		return -EIO;
	}

#ifdef PWR_CR2_IOSV
	if (cfg->port == STM32_PORTG) {
 8003004:	6863      	ldr	r3, [r4, #4]
 8003006:	2b06      	cmp	r3, #6
 8003008:	d109      	bne.n	800301e <gpio_stm32_init+0x32>
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 800300a:	4b11      	ldr	r3, [pc, #68]	; (8003050 <gpio_stm32_init+0x64>)
 800300c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800300e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8003012:	4a10      	ldr	r2, [pc, #64]	; (8003054 <gpio_stm32_init+0x68>)
 8003014:	d005      	beq.n	8003022 <gpio_stm32_init+0x36>
  * @rmtoll CR2          IOSV          LL_PWR_EnableVddIO2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003016:	6853      	ldr	r3, [r2, #4]
 8003018:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800301c:	6053      	str	r3, [r2, #4]
		}
	}
#endif  /* PWR_CR2_IOSV */

	return 0;
}
 800301e:	b002      	add	sp, #8
 8003020:	bd10      	pop	{r4, pc}
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003022:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003024:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003028:	6599      	str	r1, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800302a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800302c:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8003030:	9101      	str	r1, [sp, #4]
  (void)tmpreg;
 8003032:	9901      	ldr	r1, [sp, #4]
 8003034:	6851      	ldr	r1, [r2, #4]
 8003036:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800303a:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800303c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800303e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003042:	659a      	str	r2, [r3, #88]	; 0x58
 8003044:	e7eb      	b.n	800301e <gpio_stm32_init+0x32>
		return -EIO;
 8003046:	f06f 0004 	mvn.w	r0, #4
 800304a:	e7e8      	b.n	800301e <gpio_stm32_init+0x32>
 800304c:	0800675d 	.word	0x0800675d
 8003050:	40021000 	.word	0x40021000
 8003054:	40007000 	.word	0x40007000

08003058 <gpio_stm32_enable_int>:
{
 8003058:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800305a:	4605      	mov	r5, r0
 800305c:	481d      	ldr	r0, [pc, #116]	; (80030d4 <gpio_stm32_enable_int+0x7c>)
 800305e:	460c      	mov	r4, r1
 8003060:	f000 fbb6 	bl	80037d0 <z_impl_device_get_binding>
	struct stm32_pclken pclken = {
 8003064:	491c      	ldr	r1, [pc, #112]	; (80030d8 <gpio_stm32_enable_int+0x80>)
 8003066:	4602      	mov	r2, r0
 8003068:	c903      	ldmia	r1, {r0, r1}
 800306a:	466b      	mov	r3, sp
 800306c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003070:	6851      	ldr	r1, [r2, #4]
 8003072:	4610      	mov	r0, r2
 8003074:	680e      	ldr	r6, [r1, #0]
 8003076:	4619      	mov	r1, r3
 8003078:	47b0      	blx	r6
	if (pin > 15) {
 800307a:	2c0f      	cmp	r4, #15
 800307c:	dc26      	bgt.n	80030cc <gpio_stm32_enable_int+0x74>
	line = (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800307e:	4263      	negs	r3, r4
 8003080:	f003 0303 	and.w	r3, r3, #3
 8003084:	f004 0103 	and.w	r1, r4, #3
 8003088:	bf58      	it	pl
 800308a:	4259      	negpl	r1, r3
 800308c:	3104      	adds	r1, #4
 800308e:	008b      	lsls	r3, r1, #2
 8003090:	2c00      	cmp	r4, #0
 8003092:	f04f 010f 	mov.w	r1, #15
 8003096:	fa01 f103 	lsl.w	r1, r1, r3
 800309a:	bfb8      	it	lt
 800309c:	3403      	addlt	r4, #3
 800309e:	ea41 01a4 	orr.w	r1, r1, r4, asr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80030a2:	b2cb      	uxtb	r3, r1
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030aa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80030ae:	0c09      	lsrs	r1, r1, #16
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	ea22 0201 	bic.w	r2, r2, r1
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b6:	fa91 f1a1 	rbit	r1, r1
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80030ba:	fab1 f181 	clz	r1, r1
 80030be:	fa05 f101 	lsl.w	r1, r5, r1
 80030c2:	4311      	orrs	r1, r2
 80030c4:	6099      	str	r1, [r3, #8]
	return 0;
 80030c6:	2000      	movs	r0, #0
}
 80030c8:	b002      	add	sp, #8
 80030ca:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
 80030cc:	f06f 0015 	mvn.w	r0, #21
 80030d0:	e7fa      	b.n	80030c8 <gpio_stm32_enable_int+0x70>
 80030d2:	bf00      	nop
 80030d4:	0800675d 	.word	0x0800675d
 80030d8:	08006388 	.word	0x08006388

080030dc <gpio_stm32_config>:
{
 80030dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80030e0:	461d      	mov	r5, r3
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 80030e2:	6803      	ldr	r3, [r0, #0]
 80030e4:	689f      	ldr	r7, [r3, #8]
	if ((flags & GPIO_POL_MASK) == GPIO_POL_INV) {
 80030e6:	f005 0380 	and.w	r3, r5, #128	; 0x80
 80030ea:	430b      	orrs	r3, r1
{
 80030ec:	4680      	mov	r8, r0
 80030ee:	4616      	mov	r6, r2
	if ((flags & GPIO_POL_MASK) == GPIO_POL_INV) {
 80030f0:	d005      	beq.n	80030fe <gpio_stm32_config+0x22>
		return -ENOTSUP;
 80030f2:	f06f 0422 	mvn.w	r4, #34	; 0x22
}
 80030f6:	4620      	mov	r0, r4
 80030f8:	b002      	add	sp, #8
 80030fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	map_res = gpio_stm32_flags_to_conf(flags, &pincfg);
 80030fe:	a901      	add	r1, sp, #4
 8003100:	4628      	mov	r0, r5
 8003102:	f002 faf4 	bl	80056ee <gpio_stm32_flags_to_conf>
	if (map_res != 0) {
 8003106:	4604      	mov	r4, r0
 8003108:	2800      	cmp	r0, #0
 800310a:	d1f4      	bne.n	80030f6 <gpio_stm32_config+0x1a>
	if (gpio_stm32_configure(cfg->base, pin, pincfg, 0) != 0) {
 800310c:	4603      	mov	r3, r0
 800310e:	9a01      	ldr	r2, [sp, #4]
 8003110:	6838      	ldr	r0, [r7, #0]
 8003112:	4631      	mov	r1, r6
 8003114:	f002 fb08 	bl	8005728 <gpio_stm32_configure>
 8003118:	4604      	mov	r4, r0
 800311a:	bb10      	cbnz	r0, 8003162 <gpio_stm32_config+0x86>
	if (IS_ENABLED(CONFIG_EXTI_STM32) && (flags & GPIO_INT) != 0) {
 800311c:	07a9      	lsls	r1, r5, #30
 800311e:	d5ea      	bpl.n	80030f6 <gpio_stm32_config+0x1a>
		if (stm32_exti_set_callback(pin, cfg->port,
 8003120:	4643      	mov	r3, r8
 8003122:	4a13      	ldr	r2, [pc, #76]	; (8003170 <gpio_stm32_config+0x94>)
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4630      	mov	r0, r6
 8003128:	f7fd fff0 	bl	800110c <stm32_exti_set_callback>
 800312c:	b9e0      	cbnz	r0, 8003168 <gpio_stm32_config+0x8c>
		gpio_stm32_enable_int(cfg->port, pin);
 800312e:	4631      	mov	r1, r6
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff ff91 	bl	8003058 <gpio_stm32_enable_int>
		if ((flags & GPIO_INT_EDGE) != 0) {
 8003136:	06aa      	lsls	r2, r5, #26
 8003138:	d5db      	bpl.n	80030f2 <gpio_stm32_config+0x16>
			if ((flags & GPIO_INT_DOUBLE_EDGE) != 0) {
 800313a:	066b      	lsls	r3, r5, #25
 800313c:	d40f      	bmi.n	800315e <gpio_stm32_config+0x82>
				edge = STM32_EXTI_TRIG_FALLING;
 800313e:	f015 0f04 	tst.w	r5, #4
 8003142:	bf14      	ite	ne
 8003144:	2101      	movne	r1, #1
 8003146:	2102      	moveq	r1, #2
			stm32_exti_trigger(pin, edge);
 8003148:	4630      	mov	r0, r6
 800314a:	f7fd ffc7 	bl	80010dc <stm32_exti_trigger>
		if (stm32_exti_enable(pin) != 0) {
 800314e:	4630      	mov	r0, r6
 8003150:	f7fd ffac 	bl	80010ac <stm32_exti_enable>
			return -ENOSYS;
 8003154:	2800      	cmp	r0, #0
 8003156:	bf18      	it	ne
 8003158:	f06f 0446 	mvnne.w	r4, #70	; 0x46
 800315c:	e7cb      	b.n	80030f6 <gpio_stm32_config+0x1a>
				edge = STM32_EXTI_TRIG_RISING |
 800315e:	2103      	movs	r1, #3
 8003160:	e7f2      	b.n	8003148 <gpio_stm32_config+0x6c>
		return -EIO;
 8003162:	f06f 0404 	mvn.w	r4, #4
 8003166:	e7c6      	b.n	80030f6 <gpio_stm32_config+0x1a>
			return -EBUSY;
 8003168:	f06f 040f 	mvn.w	r4, #15
 800316c:	e7c3      	b.n	80030f6 <gpio_stm32_config+0x1a>
 800316e:	bf00      	nop
 8003170:	080055f3 	.word	0x080055f3

08003174 <pwm_stm32_pin_set>:
 *
 * return 0, or negative errno code
 */
static int pwm_stm32_pin_set(struct device *dev, u32_t pwm,
			     u32_t period_cycles, u32_t pulse_cycles)
{
 8003174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003176:	461f      	mov	r7, r3
 8003178:	b089      	sub	sp, #36	; 0x24
	struct pwm_stm32_data *data = DEV_DATA(dev);
 800317a:	6886      	ldr	r6, [r0, #8]
	TIM_HandleTypeDef *TimerHandle = &data->hpwm;
	TIM_OC_InitTypeDef sConfig;
	u32_t channel;
	bool counter_32b;

	if (period_cycles == 0U || pulse_cycles > period_cycles) {
 800317c:	b38a      	cbz	r2, 80031e2 <pwm_stm32_pin_set+0x6e>
 800317e:	429a      	cmp	r2, r3
 8003180:	d32f      	bcc.n	80031e2 <pwm_stm32_pin_set+0x6e>
	}

	/* configure channel */
	channel = (pwm - 1)*CHANNEL_LENGTH;

	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 8003182:	6803      	ldr	r3, [r0, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
	channel = (pwm - 1)*CHANNEL_LENGTH;
 8003186:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 800318a:	6819      	ldr	r1, [r3, #0]
 800318c:	4b30      	ldr	r3, [pc, #192]	; (8003250 <pwm_stm32_pin_set+0xdc>)
	channel = (pwm - 1)*CHANNEL_LENGTH;
 800318e:	3c01      	subs	r4, #1
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 8003190:	4299      	cmp	r1, r3
	channel = (pwm - 1)*CHANNEL_LENGTH;
 8003192:	ea4f 0484 	mov.w	r4, r4, lsl #2
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 8003196:	d057      	beq.n	8003248 <pwm_stm32_pin_set+0xd4>
 8003198:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800319c:	d024      	beq.n	80031e8 <pwm_stm32_pin_set+0x74>
 800319e:	f421 6000 	bic.w	r0, r1, #2048	; 0x800
 80031a2:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 80031a6:	4298      	cmp	r0, r3
 80031a8:	d04b      	beq.n	8003242 <pwm_stm32_pin_set+0xce>
 80031aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031ae:	4299      	cmp	r1, r3
 80031b0:	d04a      	beq.n	8003248 <pwm_stm32_pin_set+0xd4>
 80031b2:	4828      	ldr	r0, [pc, #160]	; (8003254 <pwm_stm32_pin_set+0xe0>)
 80031b4:	f421 6380 	bic.w	r3, r1, #1024	; 0x400
 80031b8:	4283      	cmp	r3, r0
 80031ba:	d042      	beq.n	8003242 <pwm_stm32_pin_set+0xce>
 80031bc:	f500 3092 	add.w	r0, r0, #74752	; 0x12400
 80031c0:	4281      	cmp	r1, r0
 80031c2:	d041      	beq.n	8003248 <pwm_stm32_pin_set+0xd4>
 80031c4:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 80031c8:	4283      	cmp	r3, r0
 80031ca:	d03a      	beq.n	8003242 <pwm_stm32_pin_set+0xce>
 80031cc:	4b22      	ldr	r3, [pc, #136]	; (8003258 <pwm_stm32_pin_set+0xe4>)
 80031ce:	4299      	cmp	r1, r3
 80031d0:	d03a      	beq.n	8003248 <pwm_stm32_pin_set+0xd4>
		!IS_TIM_CHANNELS(channel)) {
		return -ENOTSUP;
 80031d2:	f06f 0022 	mvn.w	r0, #34	; 0x22
 80031d6:	e032      	b.n	800323e <pwm_stm32_pin_set+0xca>
		!IS_TIM_CHANNELS(channel)) {
 80031d8:	4820      	ldr	r0, [pc, #128]	; (800325c <pwm_stm32_pin_set+0xe8>)
 80031da:	40e0      	lsrs	r0, r4
 80031dc:	07c3      	lsls	r3, r0, #31
 80031de:	d5f8      	bpl.n	80031d2 <pwm_stm32_pin_set+0x5e>
 80031e0:	e007      	b.n	80031f2 <pwm_stm32_pin_set+0x7e>
		return -EINVAL;
 80031e2:	f06f 0015 	mvn.w	r0, #21
 80031e6:	e02a      	b.n	800323e <pwm_stm32_pin_set+0xca>
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 80031e8:	b164      	cbz	r4, 8003204 <pwm_stm32_pin_set+0x90>
		!IS_TIM_CHANNELS(channel)) {
 80031ea:	2c14      	cmp	r4, #20
 80031ec:	d9f4      	bls.n	80031d8 <pwm_stm32_pin_set+0x64>
 80031ee:	2c3c      	cmp	r4, #60	; 0x3c
 80031f0:	d1ef      	bne.n	80031d2 <pwm_stm32_pin_set+0x5e>
	/* FIXME: IS_TIM_32B_COUNTER_INSTANCE not available on
	 * SMT32F1 Cube HAL since all timer counters are 16 bits
	 */
	counter_32b = 0;
#else
	counter_32b = IS_TIM_32B_COUNTER_INSTANCE(PWM_STRUCT(dev));
 80031f2:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80031f6:	d005      	beq.n	8003204 <pwm_stm32_pin_set+0x90>

	/*
	 * The timer counts from 0 up to the value in the ARR register (16-bit).
	 * Thus period_cycles cannot be greater than UINT16_MAX + 1.
	 */
	if (!counter_32b && (period_cycles > 0x10000)) {
 80031f8:	4b19      	ldr	r3, [pc, #100]	; (8003260 <pwm_stm32_pin_set+0xec>)
 80031fa:	4299      	cmp	r1, r3
 80031fc:	d002      	beq.n	8003204 <pwm_stm32_pin_set+0x90>
 80031fe:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003202:	d8e6      	bhi.n	80031d2 <pwm_stm32_pin_set+0x5e>
	}

	/* Configure Timer IP */
	TimerHandle->Instance = PWM_STRUCT(dev);
	TimerHandle->Init.Prescaler = data->pwm_prescaler;
	TimerHandle->Init.ClockDivision = 0;
 8003204:	2500      	movs	r5, #0
	TimerHandle->Init.Prescaler = data->pwm_prescaler;
 8003206:	6c33      	ldr	r3, [r6, #64]	; 0x40
	TimerHandle->Instance = PWM_STRUCT(dev);
 8003208:	6031      	str	r1, [r6, #0]
	TimerHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
	TimerHandle->Init.RepetitionCounter = 0;

	/* Set period value */
	TimerHandle->Init.Period = period_cycles - 1;
 800320a:	3a01      	subs	r2, #1
	TimerHandle->Init.Prescaler = data->pwm_prescaler;
 800320c:	6073      	str	r3, [r6, #4]
	TimerHandle->Init.Period = period_cycles - 1;
 800320e:	60f2      	str	r2, [r6, #12]
	TimerHandle->Init.ClockDivision = 0;
 8003210:	6135      	str	r5, [r6, #16]
	TimerHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8003212:	60b5      	str	r5, [r6, #8]
	TimerHandle->Init.RepetitionCounter = 0;
 8003214:	6175      	str	r5, [r6, #20]

	HAL_TIM_PWM_Init(TimerHandle);
 8003216:	4630      	mov	r0, r6
 8003218:	f002 f80d 	bl	8005236 <HAL_TIM_PWM_Init>

	/* Configure PWM channel */
	sConfig.OCMode       = TIM_OCMODE_PWM1;
 800321c:	2360      	movs	r3, #96	; 0x60
	sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;

	/* Set the pulse value */
	sConfig.Pulse = pulse_cycles;

	HAL_TIM_PWM_ConfigChannel(TimerHandle, &sConfig, channel);
 800321e:	a901      	add	r1, sp, #4
 8003220:	4622      	mov	r2, r4
 8003222:	4630      	mov	r0, r6
	sConfig.OCMode       = TIM_OCMODE_PWM1;
 8003224:	9301      	str	r3, [sp, #4]
	sConfig.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8003226:	9503      	str	r5, [sp, #12]
	sConfig.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8003228:	e9cd 5504 	strd	r5, r5, [sp, #16]
	sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;
 800322c:	e9cd 5506 	strd	r5, r5, [sp, #24]
	sConfig.Pulse = pulse_cycles;
 8003230:	9702      	str	r7, [sp, #8]
	HAL_TIM_PWM_ConfigChannel(TimerHandle, &sConfig, channel);
 8003232:	f002 f81a 	bl	800526a <HAL_TIM_PWM_ConfigChannel>

	return HAL_TIM_PWM_Start(TimerHandle, channel);
 8003236:	4621      	mov	r1, r4
 8003238:	4630      	mov	r0, r6
 800323a:	f002 f8aa 	bl	8005392 <HAL_TIM_PWM_Start>
}
 800323e:	b009      	add	sp, #36	; 0x24
 8003240:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 8003242:	2c00      	cmp	r4, #0
 8003244:	d1d1      	bne.n	80031ea <pwm_stm32_pin_set+0x76>
 8003246:	e7d7      	b.n	80031f8 <pwm_stm32_pin_set+0x84>
 8003248:	2c00      	cmp	r4, #0
 800324a:	d1ce      	bne.n	80031ea <pwm_stm32_pin_set+0x76>
 800324c:	e7d7      	b.n	80031fe <pwm_stm32_pin_set+0x8a>
 800324e:	bf00      	nop
 8003250:	40012c00 	.word	0x40012c00
 8003254:	40001000 	.word	0x40001000
 8003258:	40014800 	.word	0x40014800
 800325c:	00111110 	.word	0x00111110
 8003260:	40000c00 	.word	0x40000c00

08003264 <pwm_stm32_init>:
	data->clock = clk;
}


static int pwm_stm32_init(struct device *dev)
{
 8003264:	b538      	push	{r3, r4, r5, lr}
	const struct pwm_stm32_config *config = DEV_CFG(dev);
 8003266:	6803      	ldr	r3, [r0, #0]
	struct pwm_stm32_data *data = DEV_DATA(dev);
 8003268:	6885      	ldr	r5, [r0, #8]
 800326a:	4807      	ldr	r0, [pc, #28]	; (8003288 <pwm_stm32_init+0x24>)
	const struct pwm_stm32_config *config = DEV_CFG(dev);
 800326c:	689c      	ldr	r4, [r3, #8]
 800326e:	f000 faaf 	bl	80037d0 <z_impl_device_get_binding>
 8003272:	6843      	ldr	r3, [r0, #4]
	data->clock = clk;
 8003274:	6468      	str	r0, [r5, #68]	; 0x44
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	1d21      	adds	r1, r4, #4
 800327a:	4798      	blx	r3

	__pwm_stm32_get_clock(dev);

	/* enable clock */
	if (clock_control_on(data->clock,
 800327c:	2800      	cmp	r0, #0
			(clock_control_subsys_t *)&config->pclken) != 0) {
		return -EIO;
	}

	return 0;
}
 800327e:	bf18      	it	ne
 8003280:	f06f 0004 	mvnne.w	r0, #4
 8003284:	bd38      	pop	{r3, r4, r5, pc}
 8003286:	bf00      	nop
 8003288:	0800675d 	.word	0x0800675d

0800328c <spi_stm32_get_err>:
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
}

static int spi_stm32_get_err(SPI_TypeDef *spi)
{
	u32_t sr = LL_SPI_ReadReg(spi, SR);
 800328c:	6882      	ldr	r2, [r0, #8]

	if (sr & SPI_STM32_ERR_MSK) {
 800328e:	f412 72b8 	ands.w	r2, r2, #368	; 0x170
{
 8003292:	b513      	push	{r0, r1, r4, lr}
 8003294:	4604      	mov	r4, r0
	if (sr & SPI_STM32_ERR_MSK) {
 8003296:	d01a      	beq.n	80032ce <spi_stm32_get_err+0x42>
		LOG_ERR("%s: err=%d", __func__,
 8003298:	2101      	movs	r1, #1
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	f361 0307 	bfi	r3, r1, #0, #8
 80032a2:	480c      	ldr	r0, [pc, #48]	; (80032d4 <spi_stm32_get_err+0x48>)
 80032a4:	490c      	ldr	r1, [pc, #48]	; (80032d8 <spi_stm32_get_err+0x4c>)
 80032a6:	1a09      	subs	r1, r1, r0
 80032a8:	08c9      	lsrs	r1, r1, #3
 80032aa:	f361 138f 	bfi	r3, r1, #6, #10
 80032ae:	480b      	ldr	r0, [pc, #44]	; (80032dc <spi_stm32_get_err+0x50>)
 80032b0:	490b      	ldr	r1, [pc, #44]	; (80032e0 <spi_stm32_get_err+0x54>)
 80032b2:	f001 fc6e 	bl	8004b92 <log_2>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_OVR(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 80032b6:	68a3      	ldr	r3, [r4, #8]
 80032b8:	065b      	lsls	r3, r3, #25
 80032ba:	d505      	bpl.n	80032c8 <spi_stm32_get_err+0x3c>
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
  __IO uint32_t tmpreg;
  tmpreg = SPIx->DR;
 80032bc:	68e3      	ldr	r3, [r4, #12]
 80032be:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80032c0:	9b01      	ldr	r3, [sp, #4]
  tmpreg = SPIx->SR;
 80032c2:	68a3      	ldr	r3, [r4, #8]
 80032c4:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80032c6:	9b01      	ldr	r3, [sp, #4]
		/* OVR error must be explicitly cleared */
		if (LL_SPI_IsActiveFlag_OVR(spi)) {
			LL_SPI_ClearFlag_OVR(spi);
		}

		return -EIO;
 80032c8:	f06f 0004 	mvn.w	r0, #4
 80032cc:	e000      	b.n	80032d0 <spi_stm32_get_err+0x44>
	}

	return 0;
 80032ce:	4610      	mov	r0, r2
}
 80032d0:	b002      	add	sp, #8
 80032d2:	bd10      	pop	{r4, pc}
 80032d4:	08006348 	.word	0x08006348
 80032d8:	08006370 	.word	0x08006370
 80032dc:	08006eea 	.word	0x08006eea
 80032e0:	08006ed8 	.word	0x08006ed8

080032e4 <spi_stm32_init>:
#endif
	.release = spi_stm32_release,
};

static int spi_stm32_init(struct device *dev)
{
 80032e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct spi_stm32_data *data __attribute__((unused)) = dev->driver_data;
	const struct spi_stm32_config *cfg = dev->config->config_info;
 80032e6:	6803      	ldr	r3, [r0, #0]
	struct spi_stm32_data *data __attribute__((unused)) = dev->driver_data;
 80032e8:	6887      	ldr	r7, [r0, #8]
	const struct spi_stm32_config *cfg = dev->config->config_info;
 80032ea:	689e      	ldr	r6, [r3, #8]
{
 80032ec:	4605      	mov	r5, r0
 80032ee:	4811      	ldr	r0, [pc, #68]	; (8003334 <spi_stm32_init+0x50>)
 80032f0:	f000 fa6e 	bl	80037d0 <z_impl_device_get_binding>
 80032f4:	6843      	ldr	r3, [r0, #4]
 80032f6:	4631      	mov	r1, r6
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4798      	blx	r3

	__ASSERT_NO_MSG(device_get_binding(STM32_CLOCK_CONTROL_NAME));

	if (clock_control_on(device_get_binding(STM32_CLOCK_CONTROL_NAME),
 80032fc:	4604      	mov	r4, r0
 80032fe:	b188      	cbz	r0, 8003324 <spi_stm32_init+0x40>
			       (clock_control_subsys_t) &cfg->pclken) != 0) {
		LOG_ERR("Could not enable SPI clock");
 8003300:	2301      	movs	r3, #1
 8003302:	f04f 0100 	mov.w	r1, #0
 8003306:	f363 0107 	bfi	r1, r3, #0, #8
 800330a:	4a0b      	ldr	r2, [pc, #44]	; (8003338 <spi_stm32_init+0x54>)
 800330c:	4b0b      	ldr	r3, [pc, #44]	; (800333c <spi_stm32_init+0x58>)
 800330e:	480c      	ldr	r0, [pc, #48]	; (8003340 <spi_stm32_init+0x5c>)
 8003310:	1a9b      	subs	r3, r3, r2
 8003312:	08db      	lsrs	r3, r3, #3
 8003314:	f363 118f 	bfi	r1, r3, #6, #10
 8003318:	f001 fc1a 	bl	8004b50 <log_0>
		return -EIO;
 800331c:	f06f 0404 	mvn.w	r4, #4
#endif

	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
}
 8003320:	4620      	mov	r0, r4
 8003322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	cfg->irq_config(dev);
 8003324:	4628      	mov	r0, r5
 8003326:	68f3      	ldr	r3, [r6, #12]
 8003328:	4798      	blx	r3
	spi_context_unlock_unconditionally(&data->ctx);
 800332a:	4638      	mov	r0, r7
 800332c:	f002 faeb 	bl	8005906 <spi_context_unlock_unconditionally>
	return 0;
 8003330:	e7f6      	b.n	8003320 <spi_stm32_init+0x3c>
 8003332:	bf00      	nop
 8003334:	0800675d 	.word	0x0800675d
 8003338:	08006348 	.word	0x08006348
 800333c:	08006370 	.word	0x08006370
 8003340:	08006ef5 	.word	0x08006ef5

08003344 <spi_stm32_transceive>:
{
 8003344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003348:	461e      	mov	r6, r3
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 800334a:	6803      	ldr	r3, [r0, #0]
	struct spi_stm32_data *data = DEV_DATA(dev);
 800334c:	6885      	ldr	r5, [r0, #8]
	SPI_TypeDef *spi = cfg->spi;
 800334e:	689b      	ldr	r3, [r3, #8]
{
 8003350:	b08f      	sub	sp, #60	; 0x3c
 8003352:	4604      	mov	r4, r0
 8003354:	4689      	mov	r9, r1
	SPI_TypeDef *spi = cfg->spi;
 8003356:	689f      	ldr	r7, [r3, #8]
	if (!tx_bufs && !rx_bufs) {
 8003358:	4690      	mov	r8, r2
 800335a:	b912      	cbnz	r2, 8003362 <spi_stm32_transceive+0x1e>
 800335c:	2e00      	cmp	r6, #0
 800335e:	f000 8106 	beq.w	800356e <spi_stm32_transceive+0x22a>

static inline void spi_context_lock(struct spi_context *ctx,
				    bool asynchronous,
				    struct k_poll_signal *signal)
{
	k_sem_take(&ctx->lock, K_FOREVER);
 8003362:	f105 0b04 	add.w	fp, r5, #4

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
 8003366:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800336a:	4658      	mov	r0, fp
 800336c:	f000 fede 	bl	800412c <z_impl_k_sem_take>
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 8003370:	6823      	ldr	r3, [r4, #0]
	const u32_t scaler[] = {
 8003372:	f8df c268 	ldr.w	ip, [pc, #616]	; 80035dc <spi_stm32_transceive+0x298>
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	9303      	str	r3, [sp, #12]
	const u32_t scaler[] = {
 800337a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
	struct spi_stm32_data *data = DEV_DATA(dev);
 800337e:	f8d4 a008 	ldr.w	sl, [r4, #8]
	const u32_t scaler[] = {
 8003382:	ac06      	add	r4, sp, #24
 8003384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003386:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800338a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (spi_context_configured(&data->ctx, config)) {
 800338e:	f8da 3000 	ldr.w	r3, [sl]
 8003392:	4599      	cmp	r9, r3
 8003394:	f000 8091 	beq.w	80034ba <spi_stm32_transceive+0x176>
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8003398:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 800339c:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d002      	beq.n	80033aa <spi_stm32_transceive+0x66>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 80033a4:	2b10      	cmp	r3, #16
 80033a6:	f040 80e0 	bne.w	800356a <spi_stm32_transceive+0x226>
	SPI_TypeDef *spi = cfg->spi;
 80033aa:	9b03      	ldr	r3, [sp, #12]
 80033ac:	4886      	ldr	r0, [pc, #536]	; (80035c8 <spi_stm32_transceive+0x284>)
 80033ae:	689c      	ldr	r4, [r3, #8]
 80033b0:	f000 fa0e 	bl	80037d0 <z_impl_device_get_binding>
		(const struct clock_control_driver_api *)dev->driver_api;

	__ASSERT(api->get_rate != NULL, "%s not implemented for device %s",
		__func__, dev->config->name);

	return api->get_rate(dev, sys, rate);
 80033b4:	6843      	ldr	r3, [r0, #4]
 80033b6:	9903      	ldr	r1, [sp, #12]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	aa05      	add	r2, sp, #20
 80033bc:	4798      	blx	r3
		u32_t clk = clock >> br;
 80033be:	9a05      	ldr	r2, [sp, #20]
		if (clk <= config->frequency) {
 80033c0:	f8d9 1000 	ldr.w	r1, [r9]
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 80033c4:	2301      	movs	r3, #1
		u32_t clk = clock >> br;
 80033c6:	fa22 f003 	lsr.w	r0, r2, r3
		if (clk <= config->frequency) {
 80033ca:	4288      	cmp	r0, r1
 80033cc:	f240 80e4 	bls.w	8003598 <spi_stm32_transceive+0x254>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 80033d0:	3301      	adds	r3, #1
 80033d2:	2b09      	cmp	r3, #9
 80033d4:	d1f7      	bne.n	80033c6 <spi_stm32_transceive+0x82>
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 80033d6:	2301      	movs	r3, #1
 80033d8:	f04f 0000 	mov.w	r0, #0
 80033dc:	f363 0007 	bfi	r0, r3, #0, #8
 80033e0:	4c7a      	ldr	r4, [pc, #488]	; (80035cc <spi_stm32_transceive+0x288>)
 80033e2:	4b7b      	ldr	r3, [pc, #492]	; (80035d0 <spi_stm32_transceive+0x28c>)
 80033e4:	1b1b      	subs	r3, r3, r4
 80033e6:	08db      	lsrs	r3, r3, #3
 80033e8:	f363 108f 	bfi	r0, r3, #6, #10
 80033ec:	f8ad 0000 	strh.w	r0, [sp]
 80033f0:	0a13      	lsrs	r3, r2, #8
 80033f2:	4878      	ldr	r0, [pc, #480]	; (80035d4 <spi_stm32_transceive+0x290>)
 80033f4:	0852      	lsrs	r2, r2, #1
 80033f6:	f001 fbe4 	bl	8004bc2 <log_3>
		return -EINVAL;
 80033fa:	f06f 0615 	mvn.w	r6, #21
 80033fe:	e0b6      	b.n	800356e <spi_stm32_transceive+0x22a>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8003400:	6822      	ldr	r2, [r4, #0]
 8003402:	f042 0202 	orr.w	r2, r2, #2
 8003406:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8003408:	6822      	ldr	r2, [r4, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 800340a:	0758      	lsls	r0, r3, #29
 800340c:	bf4c      	ite	mi
 800340e:	f042 0201 	orrmi.w	r2, r2, #1
 8003412:	f022 0201 	bicpl.w	r2, r2, #1
 8003416:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8003418:	6822      	ldr	r2, [r4, #0]
 800341a:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 800341e:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8003420:	6822      	ldr	r2, [r4, #0]
	if (config->operation & SPI_TRANSFER_LSB) {
 8003422:	06d9      	lsls	r1, r3, #27
 8003424:	bf4c      	ite	mi
 8003426:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
 800342a:	f022 0280 	bicpl.w	r2, r2, #128	; 0x80
 800342e:	6022      	str	r2, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 8003430:	6822      	ldr	r2, [r4, #0]
 8003432:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003436:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8003438:	6822      	ldr	r2, [r4, #0]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 800343a:	f013 0101 	ands.w	r1, r3, #1
 800343e:	bf14      	ite	ne
 8003440:	f422 7282 	bicne.w	r2, r2, #260	; 0x104
 8003444:	f442 7282 	orreq.w	r2, r2, #260	; 0x104
 8003448:	6022      	str	r2, [r4, #0]
	if (config->cs) {
 800344a:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800344e:	2a00      	cmp	r2, #0
 8003450:	d06d      	beq.n	800352e <spi_stm32_transceive+0x1ea>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8003452:	6821      	ldr	r1, [r4, #0]
 8003454:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003458:	6021      	str	r1, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 800345a:	6861      	ldr	r1, [r4, #4]
 800345c:	f021 0104 	bic.w	r1, r1, #4
 8003460:	6061      	str	r1, [r4, #4]
	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 8003462:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8003466:	2b08      	cmp	r3, #8
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8003468:	6863      	ldr	r3, [r4, #4]
 800346a:	bf06      	itte	eq
 800346c:	f423 6370 	biceq.w	r3, r3, #3840	; 0xf00
 8003470:	f443 63e0 	orreq.w	r3, r3, #1792	; 0x700
 8003474:	f443 6370 	orrne.w	r3, r3, #3840	; 0xf00
 8003478:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 800347a:	6863      	ldr	r3, [r4, #4]
 800347c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003480:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8003482:	6863      	ldr	r3, [r4, #4]
 8003484:	f023 0310 	bic.w	r3, r3, #16
 8003488:	6063      	str	r3, [r4, #4]
	data->ctx.config = config;
 800348a:	f8ca 9000 	str.w	r9, [sl]
	return 1;
}

static inline void spi_context_cs_configure(struct spi_context *ctx)
{
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
 800348e:	2a00      	cmp	r2, #0
 8003490:	d05c      	beq.n	800354c <spi_stm32_transceive+0x208>
 8003492:	6810      	ldr	r0, [r2, #0]
 8003494:	2800      	cmp	r0, #0
 8003496:	d059      	beq.n	800354c <spi_stm32_transceive+0x208>
 8003498:	6843      	ldr	r3, [r0, #4]
 800349a:	6852      	ldr	r2, [r2, #4]
 800349c:	681c      	ldr	r4, [r3, #0]
 800349e:	2100      	movs	r1, #0
 80034a0:	2301      	movs	r3, #1
 80034a2:	47a0      	blx	r4
		gpio_pin_configure(ctx->config->cs->gpio_dev,
				   ctx->config->cs->gpio_pin, GPIO_DIR_OUT);
		gpio_pin_write(ctx->config->cs->gpio_dev,
 80034a4:	f8da 2000 	ldr.w	r2, [sl]
 80034a8:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
 80034aa:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		gpio_pin_write(ctx->config->cs->gpio_dev,
 80034ae:	43d2      	mvns	r2, r2
 80034b0:	0fd2      	lsrs	r2, r2, #31
 80034b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034b6:	f002 f9f3 	bl	80058a0 <gpio_pin_write>
			       const struct spi_buf_set *rx_bufs,
			       u8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	if (tx_bufs) {
 80034ba:	f1b8 0f00 	cmp.w	r8, #0
 80034be:	d05a      	beq.n	8003576 <spi_stm32_transceive+0x232>
		ctx->current_tx = tx_bufs->buffers;
 80034c0:	f8d8 3000 	ldr.w	r3, [r8]
		ctx->tx_count = tx_bufs->count;
 80034c4:	f8d8 2004 	ldr.w	r2, [r8, #4]
		ctx->current_tx = tx_bufs->buffers;
 80034c8:	62ab      	str	r3, [r5, #40]	; 0x28
		ctx->tx_count = tx_bufs->count;
 80034ca:	62ea      	str	r2, [r5, #44]	; 0x2c
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 80034cc:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
 80034ce:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 80034d0:	63aa      	str	r2, [r5, #56]	; 0x38
		ctx->tx_len = ctx->current_tx->len / dfs;
 80034d2:	63eb      	str	r3, [r5, #60]	; 0x3c
		ctx->tx_count = 0;
		ctx->tx_buf = NULL;
		ctx->tx_len = 0;
	}

	if (rx_bufs) {
 80034d4:	2e00      	cmp	r6, #0
 80034d6:	d053      	beq.n	8003580 <spi_stm32_transceive+0x23c>
		ctx->current_rx = rx_bufs->buffers;
 80034d8:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = rx_bufs->count;
 80034da:	6872      	ldr	r2, [r6, #4]
		ctx->current_rx = rx_bufs->buffers;
 80034dc:	632b      	str	r3, [r5, #48]	; 0x30
		ctx->rx_count = rx_bufs->count;
 80034de:	636a      	str	r2, [r5, #52]	; 0x34
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
 80034e0:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
 80034e2:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
 80034e4:	642a      	str	r2, [r5, #64]	; 0x40
		ctx->rx_len = ctx->current_rx->len / dfs;
 80034e6:	646b      	str	r3, [r5, #68]	; 0x44
		ctx->rx_count = 0;
		ctx->rx_buf = NULL;
		ctx->rx_len = 0;
	}

	ctx->sync_status = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	626b      	str	r3, [r5, #36]	; 0x24
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	f012 0201 	ands.w	r2, r2, #1
 80034f2:	d14a      	bne.n	800358a <spi_stm32_transceive+0x246>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034fa:	603b      	str	r3, [r7, #0]
	_spi_context_cs_control(ctx, on, false);
 80034fc:	2101      	movs	r1, #1
 80034fe:	4628      	mov	r0, r5
 8003500:	f002 f9d7 	bl	80058b2 <_spi_context_cs_control.isra.5>
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableIT_ERR(SPI_TypeDef *SPIx)
{
  SET_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f043 0320 	orr.w	r3, r3, #32
 800350a:	607b      	str	r3, [r7, #4]
	if (rx_bufs) {
 800350c:	2e00      	cmp	r6, #0
 800350e:	d13e      	bne.n	800358e <spi_stm32_transceive+0x24a>
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableIT_TXE(SPI_TypeDef *SPIx)
{
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003516:	607b      	str	r3, [r7, #4]
 8003518:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800351c:	f105 0014 	add.w	r0, r5, #20
 8003520:	f000 fe04 	bl	800412c <z_impl_k_sem_take>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
 8003524:	4658      	mov	r0, fp
	status = ctx->sync_status;
 8003526:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8003528:	f000 fdda 	bl	80040e0 <z_impl_k_sem_give>
	return ret;
 800352c:	e01f      	b.n	800356e <spi_stm32_transceive+0x22a>
		if (config->operation & SPI_OP_MODE_SLAVE) {
 800352e:	b119      	cbz	r1, 8003538 <spi_stm32_transceive+0x1f4>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8003530:	6821      	ldr	r1, [r4, #0]
 8003532:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8003536:	e78f      	b.n	8003458 <spi_stm32_transceive+0x114>
 8003538:	6821      	ldr	r1, [r4, #0]
 800353a:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 800353e:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8003542:	6021      	str	r1, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8003544:	6861      	ldr	r1, [r4, #4]
 8003546:	f041 0104 	orr.w	r1, r1, #4
 800354a:	e789      	b.n	8003460 <spi_stm32_transceive+0x11c>
		LOG_INF("CS control inhibited (no GPIO device)");
 800354c:	2303      	movs	r3, #3
 800354e:	f04f 0100 	mov.w	r1, #0
 8003552:	f363 0107 	bfi	r1, r3, #0, #8
 8003556:	4a1d      	ldr	r2, [pc, #116]	; (80035cc <spi_stm32_transceive+0x288>)
 8003558:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <spi_stm32_transceive+0x28c>)
 800355a:	481f      	ldr	r0, [pc, #124]	; (80035d8 <spi_stm32_transceive+0x294>)
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	08db      	lsrs	r3, r3, #3
 8003560:	f363 118f 	bfi	r1, r3, #6, #10
 8003564:	f001 faf4 	bl	8004b50 <log_0>
	if (ret) {
 8003568:	e7a7      	b.n	80034ba <spi_stm32_transceive+0x176>
		return -ENOTSUP;
 800356a:	f06f 0622 	mvn.w	r6, #34	; 0x22
}
 800356e:	4630      	mov	r0, r6
 8003570:	b00f      	add	sp, #60	; 0x3c
 8003572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ctx->tx_count = 0;
 8003576:	e9c5 880a 	strd	r8, r8, [r5, #40]	; 0x28
		ctx->tx_len = 0;
 800357a:	e9c5 880e 	strd	r8, r8, [r5, #56]	; 0x38
 800357e:	e7a9      	b.n	80034d4 <spi_stm32_transceive+0x190>
		ctx->rx_count = 0;
 8003580:	e9c5 660c 	strd	r6, r6, [r5, #48]	; 0x30
		ctx->rx_len = 0;
 8003584:	e9c5 6610 	strd	r6, r6, [r5, #64]	; 0x40
 8003588:	e7ae      	b.n	80034e8 <spi_stm32_transceive+0x1a4>
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
  return (uint8_t)(READ_REG(SPIx->DR));
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	e7ae      	b.n	80034ec <spi_stm32_transceive+0x1a8>
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003594:	607b      	str	r3, [r7, #4]
 8003596:	e7bb      	b.n	8003510 <spi_stm32_transceive+0x1cc>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003598:	6822      	ldr	r2, [r4, #0]
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 800359a:	a90e      	add	r1, sp, #56	; 0x38
 800359c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a0:	6022      	str	r2, [r4, #0]
 80035a2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 80035a6:	6822      	ldr	r2, [r4, #0]
 80035a8:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80035ac:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80035b0:	4313      	orrs	r3, r2
 80035b2:	6023      	str	r3, [r4, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 80035b4:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 80035b8:	079a      	lsls	r2, r3, #30
 80035ba:	f53f af21 	bmi.w	8003400 <spi_stm32_transceive+0xbc>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 80035be:	6822      	ldr	r2, [r4, #0]
 80035c0:	f022 0202 	bic.w	r2, r2, #2
 80035c4:	e71f      	b.n	8003406 <spi_stm32_transceive+0xc2>
 80035c6:	bf00      	nop
 80035c8:	0800675d 	.word	0x0800675d
 80035cc:	08006348 	.word	0x08006348
 80035d0:	08006370 	.word	0x08006370
 80035d4:	08006f36 	.word	0x08006f36
 80035d8:	08006f10 	.word	0x08006f10
 80035dc:	08006390 	.word	0x08006390

080035e0 <uart_stm32_configure>:
	return UART_CFG_PARITY_NONE;
}

static int uart_stm32_configure(struct device *dev,
				const struct uart_config *cfg)
{
 80035e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct uart_stm32_data *data = DEV_DATA(dev);
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80035e4:	6803      	ldr	r3, [r0, #0]
	const u32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 80035e6:	790a      	ldrb	r2, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80035e8:	689b      	ldr	r3, [r3, #8]
	struct uart_stm32_data *data = DEV_DATA(dev);
 80035ea:	6886      	ldr	r6, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80035ec:	681c      	ldr	r4, [r3, #0]
	switch (parity) {
 80035ee:	2a01      	cmp	r2, #1
{
 80035f0:	460d      	mov	r5, r1
	switch (parity) {
 80035f2:	f000 8081 	beq.w	80036f8 <uart_stm32_configure+0x118>
		return LL_USART_PARITY_NONE;
 80035f6:	2a02      	cmp	r2, #2
 80035f8:	bf0c      	ite	eq
 80035fa:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 80035fe:	2100      	movne	r1, #0
	const u32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8003600:	f895 9005 	ldrb.w	r9, [r5, #5]
	const u32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits);
 8003604:	f895 8006 	ldrb.w	r8, [r5, #6]
 8003608:	f1b9 0f02 	cmp.w	r9, #2
 800360c:	bf96      	itet	ls
 800360e:	4b3f      	ldrls	r3, [pc, #252]	; (800370c <uart_stm32_configure+0x12c>)
	const u32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8003610:	f44f 5e00 	movhi.w	lr, #8192	; 0x2000
 8003614:	f833 e019 	ldrhls.w	lr, [r3, r9, lsl #1]
	switch (db) {
 8003618:	f1b8 0f02 	cmp.w	r8, #2
 800361c:	d06f      	beq.n	80036fe <uart_stm32_configure+0x11e>
		return LL_USART_DATAWIDTH_8B;
 800361e:	f1b8 0f04 	cmp.w	r8, #4
 8003622:	bf0c      	ite	eq
 8003624:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 8003628:	2300      	movne	r3, #0
	const u32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 800362a:	79ef      	ldrb	r7, [r5, #7]

	/* Hardware doesn't support mark or space parity */
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 800362c:	3a03      	subs	r2, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 800362e:	2f01      	cmp	r7, #1
 8003630:	bf14      	ite	ne
 8003632:	f04f 0c00 	movne.w	ip, #0
 8003636:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 800363a:	2a01      	cmp	r2, #1
 800363c:	d962      	bls.n	8003704 <uart_stm32_configure+0x124>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    UART_CFG_STOP_BITS_0_5 == cfg->stop_bits) {
		return -ENOTSUP;
	}
#else
	if (UART_CFG_STOP_BITS_0_5 == cfg->stop_bits) {
 800363e:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 8003642:	d05f      	beq.n	8003704 <uart_stm32_configure+0x124>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((UART_CFG_DATA_BITS_5 == cfg->data_bits) ||
 8003644:	f1b8 0f01 	cmp.w	r8, #1
 8003648:	d95c      	bls.n	8003704 <uart_stm32_configure+0x124>
		) {
		return -ENOTSUP;
	}

	/* Driver supports only RTS CTS flow control */
	if (UART_CFG_FLOW_CTRL_NONE != cfg->flow_ctrl) {
 800364a:	b1c7      	cbz	r7, 800367e <uart_stm32_configure+0x9e>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 800364c:	4a30      	ldr	r2, [pc, #192]	; (8003710 <uart_stm32_configure+0x130>)
 800364e:	4294      	cmp	r4, r2
 8003650:	d013      	beq.n	800367a <uart_stm32_configure+0x9a>
 8003652:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8003656:	4294      	cmp	r4, r2
 8003658:	d00f      	beq.n	800367a <uart_stm32_configure+0x9a>
 800365a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800365e:	4294      	cmp	r4, r2
 8003660:	d00b      	beq.n	800367a <uart_stm32_configure+0x9a>
 8003662:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003666:	4294      	cmp	r4, r2
 8003668:	d007      	beq.n	800367a <uart_stm32_configure+0x9a>
 800366a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800366e:	4294      	cmp	r4, r2
 8003670:	d003      	beq.n	800367a <uart_stm32_configure+0x9a>
 8003672:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8003676:	4294      	cmp	r4, r2
 8003678:	d144      	bne.n	8003704 <uart_stm32_configure+0x124>
 800367a:	2f01      	cmp	r7, #1
 800367c:	d142      	bne.n	8003704 <uart_stm32_configure+0x124>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800367e:	6822      	ldr	r2, [r4, #0]
 8003680:	f022 0201 	bic.w	r2, r2, #1
 8003684:	6022      	str	r2, [r4, #0]
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  */
__STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8003686:	6822      	ldr	r2, [r4, #0]
 8003688:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
		}
	}

	LL_USART_Disable(UartInstance);

	if (parity != uart_stm32_get_parity(dev)) {
 800368c:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 800368e:	bf1f      	itttt	ne
 8003690:	6827      	ldrne	r7, [r4, #0]
 8003692:	f427 67c0 	bicne.w	r7, r7, #1536	; 0x600
 8003696:	430f      	orrne	r7, r1
 8003698:	6027      	strne	r7, [r4, #0]
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  */
__STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800369a:	6862      	ldr	r2, [r4, #4]
 800369c:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 80036a0:	4596      	cmp	lr, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80036a2:	bf1f      	itttt	ne
 80036a4:	6861      	ldrne	r1, [r4, #4]
 80036a6:	f421 5140 	bicne.w	r1, r1, #12288	; 0x3000
 80036aa:	ea41 010e 	orrne.w	r1, r1, lr
 80036ae:	6061      	strne	r1, [r4, #4]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80036b0:	6822      	ldr	r2, [r4, #0]

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

	if (cfg->baudrate != data->baud_rate) {
 80036b2:	6829      	ldr	r1, [r5, #0]
 80036b4:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
	if (databits != uart_stm32_get_databits(dev)) {
 80036b8:	4293      	cmp	r3, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 80036ba:	bf1f      	itttt	ne
 80036bc:	6822      	ldrne	r2, [r4, #0]
 80036be:	f022 2210 	bicne.w	r2, r2, #268439552	; 0x10001000
 80036c2:	431a      	orrne	r2, r3
 80036c4:	6022      	strne	r2, [r4, #0]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80036c6:	68a3      	ldr	r3, [r4, #8]
 80036c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 80036cc:	459c      	cmp	ip, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80036ce:	bf1f      	itttt	ne
 80036d0:	68a3      	ldrne	r3, [r4, #8]
 80036d2:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 80036d6:	ea43 030c 	orrne.w	r3, r3, ip
 80036da:	60a3      	strne	r3, [r4, #8]
	if (cfg->baudrate != data->baud_rate) {
 80036dc:	6833      	ldr	r3, [r6, #0]
 80036de:	4299      	cmp	r1, r3
 80036e0:	d003      	beq.n	80036ea <uart_stm32_configure+0x10a>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 80036e2:	f002 fa50 	bl	8005b86 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 80036e6:	682b      	ldr	r3, [r5, #0]
 80036e8:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	f043 0301 	orr.w	r3, r3, #1
 80036f0:	6023      	str	r3, [r4, #0]
	}

	LL_USART_Enable(UartInstance);
	return 0;
 80036f2:	2000      	movs	r0, #0
};
 80036f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return LL_USART_PARITY_ODD;
 80036f8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80036fc:	e780      	b.n	8003600 <uart_stm32_configure+0x20>
		return LL_USART_DATAWIDTH_7B;
 80036fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003702:	e792      	b.n	800362a <uart_stm32_configure+0x4a>
		return -ENOTSUP;
 8003704:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8003708:	e7f4      	b.n	80036f4 <uart_stm32_configure+0x114>
 800370a:	bf00      	nop
 800370c:	080065c4 	.word	0x080065c4
 8003710:	40013800 	.word	0x40013800

08003714 <uart_stm32_init>:
 *
 * @return 0
 */
static int uart_stm32_init(struct device *dev)
{
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8003714:	6803      	ldr	r3, [r0, #0]
{
 8003716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 800371a:	f8d3 8008 	ldr.w	r8, [r3, #8]
	struct uart_stm32_data *data = DEV_DATA(dev);
 800371e:	6887      	ldr	r7, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003720:	4646      	mov	r6, r8
{
 8003722:	4605      	mov	r5, r0
 8003724:	481e      	ldr	r0, [pc, #120]	; (80037a0 <uart_stm32_init+0x8c>)
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003726:	f856 4b08 	ldr.w	r4, [r6], #8
 800372a:	f000 f851 	bl	80037d0 <z_impl_device_get_binding>
	return api->on(dev, sys);
 800372e:	6843      	ldr	r3, [r0, #4]
	data->clock = clk;
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	4631      	mov	r1, r6
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4798      	blx	r3

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 8003738:	4606      	mov	r6, r0
 800373a:	2800      	cmp	r0, #0
 800373c:	d12c      	bne.n	8003798 <uart_stm32_init+0x84>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	f023 0301 	bic.w	r3, r3, #1
 8003744:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	f043 030c 	orr.w	r3, r3, #12
 800374c:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003754:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003758:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800375a:	6863      	ldr	r3, [r4, #4]
 800375c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003760:	6063      	str	r3, [r4, #4]
	LL_USART_ConfigCharacter(UartInstance,
				 LL_USART_DATAWIDTH_8B,
				 LL_USART_PARITY_NONE,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 8003762:	f898 3010 	ldrb.w	r3, [r8, #16]
 8003766:	b133      	cbz	r3, 8003776 <uart_stm32_init+0x62>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003768:	682b      	ldr	r3, [r5, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800376e:	6893      	ldr	r3, [r2, #8]
 8003770:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003774:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8003776:	6839      	ldr	r1, [r7, #0]
 8003778:	4628      	mov	r0, r5
 800377a:	f002 fa04 	bl	8005b86 <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	6023      	str	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8003786:	69e3      	ldr	r3, [r4, #28]
 8003788:	029a      	lsls	r2, r3, #10
 800378a:	d5fc      	bpl.n	8003786 <uart_stm32_init+0x72>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800378c:	69e3      	ldr	r3, [r4, #28]
 800378e:	025b      	lsls	r3, r3, #9
 8003790:	d5fc      	bpl.n	800378c <uart_stm32_init+0x78>

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	config->uconf.irq_config_func(dev);
#endif
	return 0;
}
 8003792:	4630      	mov	r0, r6
 8003794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
 8003798:	f06f 0604 	mvn.w	r6, #4
 800379c:	e7f9      	b.n	8003792 <uart_stm32_init+0x7e>
 800379e:	bf00      	nop
 80037a0:	0800675d 	.word	0x0800675d

080037a4 <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
 80037a4:	4b09      	ldr	r3, [pc, #36]	; (80037cc <z_sys_device_do_config_level+0x28>)
{
 80037a6:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
 80037a8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 80037ac:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
 80037ae:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
 80037b0:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80037b4:	42a5      	cmp	r5, r4
 80037b6:	d800      	bhi.n	80037ba <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
 80037b8:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	4620      	mov	r0, r4
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	4798      	blx	r3
		if (retval != 0) {
 80037c2:	b100      	cbz	r0, 80037c6 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
 80037c4:	6066      	str	r6, [r4, #4]
								info++) {
 80037c6:	340c      	adds	r4, #12
 80037c8:	e7f4      	b.n	80037b4 <z_sys_device_do_config_level+0x10>
 80037ca:	bf00      	nop
 80037cc:	080065a8 	.word	0x080065a8

080037d0 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
 80037d0:	4b10      	ldr	r3, [pc, #64]	; (8003814 <z_impl_device_get_binding+0x44>)
{
 80037d2:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
 80037d4:	4c10      	ldr	r4, [pc, #64]	; (8003818 <z_impl_device_get_binding+0x48>)
{
 80037d6:	4605      	mov	r5, r0
 80037d8:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
 80037da:	429c      	cmp	r4, r3
 80037dc:	d104      	bne.n	80037e8 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
 80037de:	4c0e      	ldr	r4, [pc, #56]	; (8003818 <z_impl_device_get_binding+0x48>)
 80037e0:	42b4      	cmp	r4, r6
 80037e2:	d109      	bne.n	80037f8 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
 80037e4:	2400      	movs	r4, #0
 80037e6:	e012      	b.n	800380e <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
 80037e8:	6862      	ldr	r2, [r4, #4]
 80037ea:	b11a      	cbz	r2, 80037f4 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
 80037ec:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
 80037ee:	6812      	ldr	r2, [r2, #0]
 80037f0:	42aa      	cmp	r2, r5
 80037f2:	d00c      	beq.n	800380e <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
 80037f4:	340c      	adds	r4, #12
 80037f6:	e7f0      	b.n	80037da <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
 80037f8:	6863      	ldr	r3, [r4, #4]
 80037fa:	b90b      	cbnz	r3, 8003800 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
 80037fc:	340c      	adds	r4, #12
 80037fe:	e7ef      	b.n	80037e0 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	4628      	mov	r0, r5
 8003804:	6819      	ldr	r1, [r3, #0]
 8003806:	f001 fdf9 	bl	80053fc <strcmp>
 800380a:	2800      	cmp	r0, #0
 800380c:	d1f6      	bne.n	80037fc <z_impl_device_get_binding+0x2c>
}
 800380e:	4620      	mov	r0, r4
 8003810:	bd70      	pop	{r4, r5, r6, pc}
 8003812:	bf00      	nop
 8003814:	20005a14 	.word	0x20005a14
 8003818:	2000590c 	.word	0x2000590c

0800381c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 800381c:	4802      	ldr	r0, [pc, #8]	; (8003828 <z_bss_zero+0xc>)
 800381e:	4a03      	ldr	r2, [pc, #12]	; (800382c <z_bss_zero+0x10>)
 8003820:	2100      	movs	r1, #0
 8003822:	1a12      	subs	r2, r2, r0
 8003824:	f001 be37 	b.w	8005496 <memset>
 8003828:	20000000 	.word	0x20000000
 800382c:	200043b0 	.word	0x200043b0

08003830 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 8003830:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
 8003832:	4806      	ldr	r0, [pc, #24]	; (800384c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 8003834:	4a06      	ldr	r2, [pc, #24]	; (8003850 <z_data_copy+0x20>)
 8003836:	4907      	ldr	r1, [pc, #28]	; (8003854 <z_data_copy+0x24>)
 8003838:	1a12      	subs	r2, r2, r0
 800383a:	f001 fe02 	bl	8005442 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
 800383e:	4a06      	ldr	r2, [pc, #24]	; (8003858 <z_data_copy+0x28>)
 8003840:	4906      	ldr	r1, [pc, #24]	; (800385c <z_data_copy+0x2c>)
 8003842:	4807      	ldr	r0, [pc, #28]	; (8003860 <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8003844:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
 8003848:	f001 bdfb 	b.w	8005442 <memcpy>
 800384c:	20005890 	.word	0x20005890
 8003850:	20005a44 	.word	0x20005a44
 8003854:	08006fc4 	.word	0x08006fc4
 8003858:	00000000 	.word	0x00000000
 800385c:	08006fc4 	.word	0x08006fc4
 8003860:	20000000 	.word	0x20000000

08003864 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 8003864:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8003866:	2002      	movs	r0, #2
 8003868:	f7ff ff9c 	bl	80037a4 <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
 800386c:	4807      	ldr	r0, [pc, #28]	; (800388c <bg_thread_main+0x28>)
 800386e:	f001 f947 	bl	8004b00 <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
 8003872:	2003      	movs	r0, #3
 8003874:	f7ff ff96 	bl	80037a4 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
 8003878:	f000 fd0e 	bl	8004298 <z_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
 800387c:	f7fc fdf8 	bl	8000470 <main>

	/* Mark nonessenrial since main() has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
 8003880:	4a03      	ldr	r2, [pc, #12]	; (8003890 <bg_thread_main+0x2c>)
 8003882:	7b13      	ldrb	r3, [r2, #12]
 8003884:	f023 0301 	bic.w	r3, r3, #1
 8003888:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 800388a:	bd08      	pop	{r3, pc}
 800388c:	08006f72 	.word	0x08006f72
 8003890:	200002a0 	.word	0x200002a0

08003894 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b0a2      	sub	sp, #136	; 0x88
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	if (IS_ENABLED(CONFIG_LOG)) {
		log_core_init();
 8003898:	f7fc ff4c 	bl	8000734 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_InterruptStackSetup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
 800389c:	4b3e      	ldr	r3, [pc, #248]	; (8003998 <z_cstart+0x104>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800389e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 80038a2:	4c3e      	ldr	r4, [pc, #248]	; (800399c <z_cstart+0x108>)
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
 80038a4:	4e3e      	ldr	r6, [pc, #248]	; (80039a0 <z_cstart+0x10c>)
 80038a6:	6963      	ldr	r3, [r4, #20]
 80038a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038ac:	6163      	str	r3, [r4, #20]
 80038ae:	2500      	movs	r5, #0
 80038b0:	23f0      	movs	r3, #240	; 0xf0
 80038b2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 80038b6:	77e5      	strb	r5, [r4, #31]
 80038b8:	7625      	strb	r5, [r4, #24]
 80038ba:	7665      	strb	r5, [r4, #25]
 80038bc:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 80038be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038c0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80038c4:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void kernel_arch_init(void)
{
	z_InterruptStackSetup();
	z_ExcSetup();
	z_FaultInit();
 80038c6:	f7fe fd71 	bl	80023ac <z_FaultInit>
	z_CpuIdleInit();
 80038ca:	f7fe fdc9 	bl	8002460 <z_CpuIdleInit>
static ALWAYS_INLINE void z_clearfaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 80038ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038d2:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 80038d4:	62e3      	str	r3, [r4, #44]	; 0x2c
	struct k_thread dummy_thread = {
 80038d6:	ab07      	add	r3, sp, #28
 80038d8:	4629      	mov	r1, r5
 80038da:	226c      	movs	r2, #108	; 0x6c
 80038dc:	4618      	mov	r0, r3
 80038de:	f001 fdda 	bl	8005496 <memset>
 80038e2:	2701      	movs	r7, #1
	_current = &dummy_thread;
 80038e4:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 80038e6:	4628      	mov	r0, r5
	struct k_thread dummy_thread = {
 80038e8:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 80038ec:	f7ff ff5a 	bl	80037a4 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 80038f0:	4638      	mov	r0, r7
 80038f2:	f7ff ff57 	bl	80037a4 <z_sys_device_do_config_level>
	_kernel.ready_q.cache = _main_thread;
 80038f6:	4c2b      	ldr	r4, [pc, #172]	; (80039a4 <z_cstart+0x110>)
	z_sched_init();
 80038f8:	f000 fb70 	bl	8003fdc <z_sched_init>
	z_setup_new_thread(_main_thread, _main_stack,
 80038fc:	4b2a      	ldr	r3, [pc, #168]	; (80039a8 <z_cstart+0x114>)
	_kernel.ready_q.cache = _main_thread;
 80038fe:	6234      	str	r4, [r6, #32]
	z_setup_new_thread(_main_thread, _main_stack,
 8003900:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003904:	e9cd 7304 	strd	r7, r3, [sp, #16]
 8003908:	e9cd 5502 	strd	r5, r5, [sp, #8]
 800390c:	e9cd 5500 	strd	r5, r5, [sp]
 8003910:	4b26      	ldr	r3, [pc, #152]	; (80039ac <z_cstart+0x118>)
 8003912:	4927      	ldr	r1, [pc, #156]	; (80039b0 <z_cstart+0x11c>)
 8003914:	4620      	mov	r0, r4
 8003916:	f000 fc7f 	bl	8004218 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800391a:	7b63      	ldrb	r3, [r4, #13]
 800391c:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8003920:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8003924:	7362      	strb	r2, [r4, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
 8003926:	4635      	mov	r5, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8003928:	d104      	bne.n	8003934 <z_cstart+0xa0>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
 800392a:	69a3      	ldr	r3, [r4, #24]
 800392c:	b913      	cbnz	r3, 8003934 <z_cstart+0xa0>
		z_add_thread_to_ready_q(thread);
 800392e:	4620      	mov	r0, r4
 8003930:	f000 f9e4 	bl	8003cfc <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
 8003934:	4b1f      	ldr	r3, [pc, #124]	; (80039b4 <z_cstart+0x120>)
 8003936:	4e20      	ldr	r6, [pc, #128]	; (80039b8 <z_cstart+0x124>)
 8003938:	9305      	str	r3, [sp, #20]
 800393a:	2201      	movs	r2, #1
 800393c:	230f      	movs	r3, #15
 800393e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003942:	2300      	movs	r3, #0
 8003944:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003948:	491c      	ldr	r1, [pc, #112]	; (80039bc <z_cstart+0x128>)
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	4630      	mov	r0, r6
 800394e:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8003952:	4b1b      	ldr	r3, [pc, #108]	; (80039c0 <z_cstart+0x12c>)
 8003954:	f000 fc60 	bl	8004218 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8003958:	7b73      	ldrb	r3, [r6, #13]
	_kernel.cpus[0].idle_thread = _idle_thread;
 800395a:	60ee      	str	r6, [r5, #12]
 800395c:	f023 0304 	bic.w	r3, r3, #4
 8003960:	7373      	strb	r3, [r6, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8003962:	4b18      	ldr	r3, [pc, #96]	; (80039c4 <z_cstart+0x130>)
	list->tail = (sys_dnode_t *)list;
 8003964:	e9c5 3306 	strd	r3, r3, [r5, #24]
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arch_configure_static_mpu_regions();
 8003968:	f7fe fe64 	bl	8002634 <z_arch_configure_static_mpu_regions>
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arch_configure_dynamic_mpu_regions(main_thread);
 800396c:	480d      	ldr	r0, [pc, #52]	; (80039a4 <z_cstart+0x110>)
	_current = main_thread;
 800396e:	60ac      	str	r4, [r5, #8]
	z_arch_configure_dynamic_mpu_regions(main_thread);
 8003970:	f001 fd2e 	bl	80053d0 <z_arch_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8003974:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <z_cstart+0x118>)
 8003976:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <z_cstart+0x134>)
 8003978:	4618      	mov	r0, r3
 800397a:	f382 8809 	msr	PSP, r2
 800397e:	b663      	cpsie	if
 8003980:	f04f 0100 	mov.w	r1, #0
 8003984:	f381 8811 	msr	BASEPRI, r1
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	2100      	movs	r1, #0
 800398e:	2200      	movs	r2, #0
 8003990:	2300      	movs	r3, #0
 8003992:	f000 ff2b 	bl	80047ec <z_thread_entry>
	"bl z_thread_entry \n\t"   /* z_thread_entry(_main, 0, 0, 0); */
	:
	: "r" (_main), "r" (start_of_main_stack)
	);

	CODE_UNREACHABLE;
 8003996:	bf00      	nop
 8003998:	200053f0 	.word	0x200053f0
 800399c:	e000ed00 	.word	0xe000ed00
 80039a0:	20004370 	.word	0x20004370
 80039a4:	200002a0 	.word	0x200002a0
 80039a8:	0800661d 	.word	0x0800661d
 80039ac:	08003865 	.word	0x08003865
 80039b0:	200046b0 	.word	0x200046b0
 80039b4:	08006fbc 	.word	0x08006fbc
 80039b8:	20000234 	.word	0x20000234
 80039bc:	20004ab0 	.word	0x20004ab0
 80039c0:	08005f7d 	.word	0x08005f7d
 80039c4:	20004388 	.word	0x20004388
 80039c8:	20004ab0 	.word	0x20004ab0

080039cc <init_mem_slab_module>:
 */
static int init_mem_slab_module(struct device *dev)
{
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <init_mem_slab_module+0x30>)
 80039ce:	480c      	ldr	r0, [pc, #48]	; (8003a00 <init_mem_slab_module+0x34>)
{
 80039d0:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
 80039d2:	2400      	movs	r4, #0
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 80039d4:	4283      	cmp	r3, r0
 80039d6:	d301      	bcc.n	80039dc <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
 80039d8:	2000      	movs	r0, #0
 80039da:	bd70      	pop	{r4, r5, r6, pc}
	p = slab->buffer;
 80039dc:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
 80039de:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
 80039e0:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
 80039e2:	2100      	movs	r1, #0
 80039e4:	42a9      	cmp	r1, r5
 80039e6:	d101      	bne.n	80039ec <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 80039e8:	331c      	adds	r3, #28
 80039ea:	e7f3      	b.n	80039d4 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
 80039ec:	695e      	ldr	r6, [r3, #20]
 80039ee:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
 80039f0:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
 80039f2:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
 80039f4:	3101      	adds	r1, #1
		p += slab->block_size;
 80039f6:	4432      	add	r2, r6
 80039f8:	e7f4      	b.n	80039e4 <init_mem_slab_module+0x18>
 80039fa:	bf00      	nop
 80039fc:	20005a14 	.word	0x20005a14
 8003a00:	20005a14 	.word	0x20005a14

08003a04 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
 8003a04:	b510      	push	{r4, lr}
 8003a06:	4613      	mov	r3, r2
 8003a08:	460c      	mov	r4, r1
 8003a0a:	f04f 0210 	mov.w	r2, #16
 8003a0e:	f3ef 8111 	mrs	r1, BASEPRI
 8003a12:	f382 8811 	msr	BASEPRI, r2
 8003a16:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
 8003a1a:	6942      	ldr	r2, [r0, #20]
 8003a1c:	b15a      	cbz	r2, 8003a36 <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
 8003a1e:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
 8003a20:	6813      	ldr	r3, [r2, #0]
 8003a22:	6143      	str	r3, [r0, #20]
		slab->num_used++;
 8003a24:	6983      	ldr	r3, [r0, #24]
 8003a26:	3301      	adds	r3, #1
 8003a28:	6183      	str	r3, [r0, #24]
		result = 0;
 8003a2a:	2000      	movs	r0, #0
	__asm__ volatile(
 8003a2c:	f381 8811 	msr	BASEPRI, r1
 8003a30:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
 8003a34:	e00d      	b.n	8003a52 <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
 8003a36:	b91b      	cbnz	r3, 8003a40 <k_mem_slab_alloc+0x3c>
		*mem = NULL;
 8003a38:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
 8003a3a:	f06f 000b 	mvn.w	r0, #11
 8003a3e:	e7f5      	b.n	8003a2c <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
 8003a40:	4602      	mov	r2, r0
 8003a42:	4804      	ldr	r0, [pc, #16]	; (8003a54 <k_mem_slab_alloc+0x50>)
 8003a44:	f000 fa88 	bl	8003f58 <z_pend_curr>
		if (result == 0) {
 8003a48:	b918      	cbnz	r0, 8003a52 <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
 8003a4a:	4b03      	ldr	r3, [pc, #12]	; (8003a58 <k_mem_slab_alloc+0x54>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	6023      	str	r3, [r4, #0]
}
 8003a52:	bd10      	pop	{r4, pc}
 8003a54:	200043b0 	.word	0x200043b0
 8003a58:	20004370 	.word	0x20004370

08003a5c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
 8003a5c:	b570      	push	{r4, r5, r6, lr}
 8003a5e:	4604      	mov	r4, r0
 8003a60:	460d      	mov	r5, r1
	__asm__ volatile(
 8003a62:	f04f 0310 	mov.w	r3, #16
 8003a66:	f3ef 8611 	mrs	r6, BASEPRI
 8003a6a:	f383 8811 	msr	BASEPRI, r3
 8003a6e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
 8003a72:	f002 f9bd 	bl	8005df0 <z_unpend_first_thread>

	if (pending_thread != NULL) {
 8003a76:	b180      	cbz	r0, 8003a9a <k_mem_slab_free+0x3e>
		z_set_thread_return_value_with_data(pending_thread, 0, *mem);
 8003a78:	682a      	ldr	r2, [r5, #0]
	thread->base.swap_data = data;
 8003a7a:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8003a7c:	7b42      	ldrb	r2, [r0, #13]
}

static ALWAYS_INLINE void
z_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8003a7e:	2100      	movs	r1, #0
 8003a80:	06d2      	lsls	r2, r2, #27
 8003a82:	6681      	str	r1, [r0, #104]	; 0x68
 8003a84:	d103      	bne.n	8003a8e <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
 8003a86:	6983      	ldr	r3, [r0, #24]
 8003a88:	b90b      	cbnz	r3, 8003a8e <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
 8003a8a:	f000 f937 	bl	8003cfc <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
 8003a8e:	4631      	mov	r1, r6
 8003a90:	4808      	ldr	r0, [pc, #32]	; (8003ab4 <k_mem_slab_free+0x58>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
 8003a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
 8003a96:	f002 b94b 	b.w	8005d30 <z_reschedule>
		**(char ***)mem = slab->free_list;
 8003a9a:	682b      	ldr	r3, [r5, #0]
 8003a9c:	6962      	ldr	r2, [r4, #20]
 8003a9e:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
 8003aa0:	682b      	ldr	r3, [r5, #0]
 8003aa2:	6163      	str	r3, [r4, #20]
		slab->num_used--;
 8003aa4:	69a3      	ldr	r3, [r4, #24]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
 8003aaa:	f386 8811 	msr	BASEPRI, r6
 8003aae:	f3bf 8f6f 	isb	sy
}
 8003ab2:	bd70      	pop	{r4, r5, r6, pc}
 8003ab4:	200043b0 	.word	0x200043b0

08003ab8 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
 8003ab8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
 8003aba:	4c07      	ldr	r4, [pc, #28]	; (8003ad8 <init_static_pools+0x20>)
 8003abc:	4d07      	ldr	r5, [pc, #28]	; (8003adc <init_static_pools+0x24>)
 8003abe:	42ac      	cmp	r4, r5
 8003ac0:	d301      	bcc.n	8003ac6 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8003ac6:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
 8003aca:	4620      	mov	r0, r4
 8003acc:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8003ad0:	f000 fd86 	bl	80045e0 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
 8003ad4:	341c      	adds	r4, #28
 8003ad6:	e7f2      	b.n	8003abe <init_static_pools+0x6>
 8003ad8:	20005a14 	.word	0x20005a14
 8003adc:	20005a30 	.word	0x20005a30

08003ae0 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
 8003ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(z_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
 8003ae4:	1e1d      	subs	r5, r3, #0
{
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	4607      	mov	r7, r0
 8003aea:	460c      	mov	r4, r1
 8003aec:	4692      	mov	sl, r2
	if (timeout > 0) {
 8003aee:	dd4e      	ble.n	8003b8e <k_mem_pool_alloc+0xae>
		end = z_tick_get() + z_ms_to_ticks(timeout);
 8003af0:	f000 fcf2 	bl	80044d8 <z_tick_get>
		((s64_t)MSEC_PER_SEC * cyc) / CONFIG_SYS_CLOCK_TICKS_PER_SEC);
#else
	/* simple division keeps precision */
	s32_t ms_per_tick = MSEC_PER_SEC / CONFIG_SYS_CLOCK_TICKS_PER_SEC;

	return (s32_t)ceiling_fraction(ms, ms_per_tick);
 8003af4:	f105 0309 	add.w	r3, r5, #9
 8003af8:	220a      	movs	r2, #10
 8003afa:	fb93 f3f2 	sdiv	r3, r3, r2
 8003afe:	eb10 0803 	adds.w	r8, r0, r3
	return pool - &_k_mem_pool_list_start[0];
 8003b02:	4b24      	ldr	r3, [pc, #144]	; (8003b94 <k_mem_pool_alloc+0xb4>)
 8003b04:	4e24      	ldr	r6, [pc, #144]	; (8003b98 <k_mem_pool_alloc+0xb8>)
 8003b06:	1afb      	subs	r3, r7, r3
 8003b08:	109b      	asrs	r3, r3, #2
 8003b0a:	435e      	muls	r6, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
 8003b0c:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
 8003b0e:	f107 0b14 	add.w	fp, r7, #20
			ret = z_sys_mem_pool_block_alloc(&p->base, size,
 8003b12:	9400      	str	r4, [sp, #0]
 8003b14:	ab03      	add	r3, sp, #12
 8003b16:	aa02      	add	r2, sp, #8
 8003b18:	4651      	mov	r1, sl
 8003b1a:	4638      	mov	r0, r7
 8003b1c:	f000 fdaa 	bl	8004674 <z_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
 8003b20:	f110 0f0b 	cmn.w	r0, #11
 8003b24:	d10b      	bne.n	8003b3e <k_mem_pool_alloc+0x5e>
			ret = z_sys_mem_pool_block_alloc(&p->base, size,
 8003b26:	9400      	str	r4, [sp, #0]
 8003b28:	ab03      	add	r3, sp, #12
 8003b2a:	aa02      	add	r2, sp, #8
 8003b2c:	4651      	mov	r1, sl
 8003b2e:	4638      	mov	r0, r7
 8003b30:	f000 fda0 	bl	8004674 <z_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
 8003b34:	f110 0f0b 	cmn.w	r0, #11
 8003b38:	bf08      	it	eq
 8003b3a:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
 8003b3e:	7963      	ldrb	r3, [r4, #5]
 8003b40:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
 8003b42:	7126      	strb	r6, [r4, #4]
		block->id.level = level_num;
 8003b44:	f362 0303 	bfi	r3, r2, #0, #4
 8003b48:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
 8003b4a:	6863      	ldr	r3, [r4, #4]
 8003b4c:	9a03      	ldr	r2, [sp, #12]
 8003b4e:	f362 331f 	bfi	r3, r2, #12, #20
 8003b52:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
 8003b54:	b1c0      	cbz	r0, 8003b88 <k_mem_pool_alloc+0xa8>
 8003b56:	b1bd      	cbz	r5, 8003b88 <k_mem_pool_alloc+0xa8>
 8003b58:	f110 0f0c 	cmn.w	r0, #12
 8003b5c:	d114      	bne.n	8003b88 <k_mem_pool_alloc+0xa8>
	__asm__ volatile(
 8003b5e:	f04f 0310 	mov.w	r3, #16
 8003b62:	f3ef 8011 	mrs	r0, BASEPRI
 8003b66:	f383 8811 	msr	BASEPRI, r3
 8003b6a:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(z_arch_irq_lock(), wait_q, timeout);
 8003b6e:	462a      	mov	r2, r5
 8003b70:	4659      	mov	r1, fp
 8003b72:	f000 f9cd 	bl	8003f10 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
 8003b76:	1c6b      	adds	r3, r5, #1
 8003b78:	d0cb      	beq.n	8003b12 <k_mem_pool_alloc+0x32>
			timeout = end - z_tick_get();
 8003b7a:	f000 fcad 	bl	80044d8 <z_tick_get>

			if (timeout < 0) {
 8003b7e:	ebb8 0500 	subs.w	r5, r8, r0
 8003b82:	d5c6      	bpl.n	8003b12 <k_mem_pool_alloc+0x32>
				break;
			}
		}
	}

	return -EAGAIN;
 8003b84:	f06f 000a 	mvn.w	r0, #10
}
 8003b88:	b005      	add	sp, #20
 8003b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
 8003b8e:	f04f 0800 	mov.w	r8, #0
 8003b92:	e7b6      	b.n	8003b02 <k_mem_pool_alloc+0x22>
 8003b94:	20005a14 	.word	0x20005a14
 8003b98:	b6db6db7 	.word	0xb6db6db7

08003b9c <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
 8003b9c:	4601      	mov	r1, r0
 8003b9e:	4801      	ldr	r0, [pc, #4]	; (8003ba4 <k_malloc+0x8>)
 8003ba0:	f002 b890 	b.w	8005cc4 <k_mem_pool_malloc>
 8003ba4:	20005a14 	.word	0x20005a14

08003ba8 <reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

static void reset_time_slice(void)
{
 8003ba8:	b508      	push	{r3, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 8003baa:	f7fd ff31 	bl	8001a10 <z_clock_elapsed>
 8003bae:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <reset_time_slice+0x1c>)
 8003bb0:	4a05      	ldr	r2, [pc, #20]	; (8003bc8 <reset_time_slice+0x20>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4418      	add	r0, r3
 8003bb6:	6110      	str	r0, [r2, #16]

	z_set_timeout_expiry(slice_time, false);
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4618      	mov	r0, r3
}
 8003bbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_set_timeout_expiry(slice_time, false);
 8003bc0:	f002 b9b2 	b.w	8005f28 <z_set_timeout_expiry>
 8003bc4:	200043a4 	.word	0x200043a4
 8003bc8:	20004370 	.word	0x20004370

08003bcc <resched.part.15>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bcc:	f3ef 8005 	mrs	r0, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
 8003bd0:	280d      	cmp	r0, #13
 8003bd2:	d809      	bhi.n	8003be8 <resched.part.15+0x1c>
 8003bd4:	b128      	cbz	r0, 8003be2 <resched.part.15+0x16>
 8003bd6:	4b05      	ldr	r3, [pc, #20]	; (8003bec <resched.part.15+0x20>)
 8003bd8:	6858      	ldr	r0, [r3, #4]
 8003bda:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
 8003bde:	f3c0 20c0 	ubfx	r0, r0, #11, #1
	}
	_current_cpu->swap_ok = 0;
#endif

	return z_arch_irq_unlocked(key) && !z_is_in_isr();
}
 8003be2:	f080 0001 	eor.w	r0, r0, #1
 8003be6:	4770      	bx	lr
 8003be8:	2001      	movs	r0, #1
 8003bea:	e7fa      	b.n	8003be2 <resched.part.15+0x16>
 8003bec:	e000ed00 	.word	0xe000ed00

08003bf0 <k_sched_time_slice_set>:
{
 8003bf0:	b510      	push	{r4, lr}
 8003bf2:	f04f 0310 	mov.w	r3, #16
 8003bf6:	f3ef 8411 	mrs	r4, BASEPRI
 8003bfa:	f383 8811 	msr	BASEPRI, r3
 8003bfe:	f3bf 8f6f 	isb	sy
		_current_cpu->slice_ticks = 0;
 8003c02:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <k_sched_time_slice_set+0x38>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	611a      	str	r2, [r3, #16]
 8003c08:	3009      	adds	r0, #9
 8003c0a:	230a      	movs	r3, #10
 8003c0c:	fb90 f0f3 	sdiv	r0, r0, r3
		slice_time = z_ms_to_ticks(slice);
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <k_sched_time_slice_set+0x3c>)
 8003c12:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
 8003c14:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <k_sched_time_slice_set+0x40>)
 8003c16:	6019      	str	r1, [r3, #0]
		reset_time_slice();
 8003c18:	f7ff ffc6 	bl	8003ba8 <reset_time_slice>
	__asm__ volatile(
 8003c1c:	f384 8811 	msr	BASEPRI, r4
 8003c20:	f3bf 8f6f 	isb	sy
}
 8003c24:	bd10      	pop	{r4, pc}
 8003c26:	bf00      	nop
 8003c28:	20004370 	.word	0x20004370
 8003c2c:	200043a4 	.word	0x200043a4
 8003c30:	200043a0 	.word	0x200043a0

08003c34 <k_sched_lock>:
	__asm__ volatile(
 8003c34:	f04f 0310 	mov.w	r3, #16
 8003c38:	f3ef 8111 	mrs	r1, BASEPRI
 8003c3c:	f383 8811 	msr	BASEPRI, r3
 8003c40:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
 8003c44:	4b04      	ldr	r3, [pc, #16]	; (8003c58 <k_sched_lock+0x24>)
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	7bd3      	ldrb	r3, [r2, #15]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8003c4e:	f381 8811 	msr	BASEPRI, r1
 8003c52:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
 8003c56:	4770      	bx	lr
 8003c58:	20004370 	.word	0x20004370

08003c5c <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
 8003c5c:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <z_priq_dumb_remove+0x28>)
 8003c5e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8003c62:	4282      	cmp	r2, r0
 8003c64:	d105      	bne.n	8003c72 <z_priq_dumb_remove+0x16>
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	428b      	cmp	r3, r1
 8003c6a:	d102      	bne.n	8003c72 <z_priq_dumb_remove+0x16>
 8003c6c:	7b4b      	ldrb	r3, [r1, #13]
 8003c6e:	06db      	lsls	r3, r3, #27
 8003c70:	d106      	bne.n	8003c80 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
 8003c72:	e9d1 3200 	ldrd	r3, r2, [r1]
 8003c76:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 8003c78:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8003c7a:	2300      	movs	r3, #0
	node->prev = NULL;
 8003c7c:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	20004370 	.word	0x20004370

08003c88 <update_cache>:
{
 8003c88:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
 8003c8a:	4c0d      	ldr	r4, [pc, #52]	; (8003cc0 <update_cache+0x38>)
{
 8003c8c:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
 8003c8e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003c92:	f002 f876 	bl	8005d82 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
 8003c96:	4605      	mov	r5, r0
 8003c98:	b900      	cbnz	r0, 8003c9c <update_cache+0x14>
 8003c9a:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
 8003c9c:	68a3      	ldr	r3, [r4, #8]
 8003c9e:	b94a      	cbnz	r2, 8003cb4 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
 8003ca0:	7b5a      	ldrb	r2, [r3, #13]
 8003ca2:	06d2      	lsls	r2, r2, #27
 8003ca4:	d106      	bne.n	8003cb4 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8003ca6:	69aa      	ldr	r2, [r5, #24]
 8003ca8:	b922      	cbnz	r2, 8003cb4 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
 8003caa:	89da      	ldrh	r2, [r3, #14]
 8003cac:	2a7f      	cmp	r2, #127	; 0x7f
 8003cae:	d901      	bls.n	8003cb4 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
 8003cb0:	6223      	str	r3, [r4, #32]
}
 8003cb2:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
 8003cb4:	429d      	cmp	r5, r3
 8003cb6:	d001      	beq.n	8003cbc <update_cache+0x34>
			reset_time_slice();
 8003cb8:	f7ff ff76 	bl	8003ba8 <reset_time_slice>
		_kernel.ready_q.cache = th;
 8003cbc:	6225      	str	r5, [r4, #32]
}
 8003cbe:	e7f8      	b.n	8003cb2 <update_cache+0x2a>
 8003cc0:	20004370 	.word	0x20004370

08003cc4 <k_sched_unlock>:
{
 8003cc4:	b510      	push	{r4, lr}
	__asm__ volatile(
 8003cc6:	f04f 0310 	mov.w	r3, #16
 8003cca:	f3ef 8411 	mrs	r4, BASEPRI
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8003cd6:	4b08      	ldr	r3, [pc, #32]	; (8003cf8 <k_sched_unlock+0x34>)
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	7bd3      	ldrb	r3, [r2, #15]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	73d3      	strb	r3, [r2, #15]
		update_cache(1);
 8003ce0:	2001      	movs	r0, #1
 8003ce2:	f7ff ffd1 	bl	8003c88 <update_cache>
	__asm__ volatile(
 8003ce6:	f384 8811 	msr	BASEPRI, r4
 8003cea:	f3bf 8f6f 	isb	sy
}
 8003cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8003cf2:	f002 b83c 	b.w	8005d6e <z_reschedule_unlocked>
 8003cf6:	bf00      	nop
 8003cf8:	20004370 	.word	0x20004370

08003cfc <z_add_thread_to_ready_q>:
{
 8003cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 8003cfe:	f04f 0310 	mov.w	r3, #16
 8003d02:	f3ef 8411 	mrs	r4, BASEPRI
 8003d06:	f383 8811 	msr	BASEPRI, r3
 8003d0a:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8003d0e:	4a15      	ldr	r2, [pc, #84]	; (8003d64 <z_add_thread_to_ready_q+0x68>)
 8003d10:	4611      	mov	r1, r2
 8003d12:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003d16:	428b      	cmp	r3, r1
 8003d18:	d01d      	beq.n	8003d56 <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8003d1a:	b1e3      	cbz	r3, 8003d56 <z_add_thread_to_ready_q+0x5a>
 8003d1c:	6a96      	ldr	r6, [r2, #40]	; 0x28
	if (t1->base.prio < t2->base.prio) {
 8003d1e:	f990 500e 	ldrsb.w	r5, [r0, #14]
 8003d22:	f993 700e 	ldrsb.w	r7, [r3, #14]
 8003d26:	42af      	cmp	r7, r5
 8003d28:	dd10      	ble.n	8003d4c <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
 8003d2a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8003d2c:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
 8003d30:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 8003d32:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
 8003d34:	7b43      	ldrb	r3, [r0, #13]
 8003d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d3a:	7343      	strb	r3, [r0, #13]
		update_cache(0);
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	f7ff ffa3 	bl	8003c88 <update_cache>
	__asm__ volatile(
 8003d42:	f384 8811 	msr	BASEPRI, r4
 8003d46:	f3bf 8f6f 	isb	sy
}
 8003d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 8003d4c:	42b3      	cmp	r3, r6
 8003d4e:	d002      	beq.n	8003d56 <z_add_thread_to_ready_q+0x5a>
 8003d50:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1e5      	bne.n	8003d22 <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
 8003d56:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003d58:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
 8003d5a:	6a93      	ldr	r3, [r2, #40]	; 0x28
	node->next = list;
 8003d5c:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
 8003d5e:	6018      	str	r0, [r3, #0]
	list->tail = node;
 8003d60:	6290      	str	r0, [r2, #40]	; 0x28
 8003d62:	e7e7      	b.n	8003d34 <z_add_thread_to_ready_q+0x38>
 8003d64:	20004370 	.word	0x20004370

08003d68 <z_move_thread_to_end_of_prio_q>:
{
 8003d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6a:	4604      	mov	r4, r0
	__asm__ volatile(
 8003d6c:	f04f 0310 	mov.w	r3, #16
 8003d70:	f3ef 8711 	mrs	r7, BASEPRI
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
		_priq_run_remove(&_kernel.ready_q.runq, thread);
 8003d7c:	4d19      	ldr	r5, [pc, #100]	; (8003de4 <z_move_thread_to_end_of_prio_q+0x7c>)
 8003d7e:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8003d82:	4601      	mov	r1, r0
 8003d84:	4630      	mov	r0, r6
 8003d86:	f7ff ff69 	bl	8003c5c <z_priq_dumb_remove>
	return list->head == list;
 8003d8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003d8c:	42b3      	cmp	r3, r6
 8003d8e:	462a      	mov	r2, r5
 8003d90:	d020      	beq.n	8003dd4 <z_move_thread_to_end_of_prio_q+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8003d92:	b1fb      	cbz	r3, 8003dd4 <z_move_thread_to_end_of_prio_q+0x6c>
 8003d94:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	if (t1->base.prio < t2->base.prio) {
 8003d96:	f994 100e 	ldrsb.w	r1, [r4, #14]
 8003d9a:	f993 500e 	ldrsb.w	r5, [r3, #14]
 8003d9e:	428d      	cmp	r5, r1
 8003da0:	dd13      	ble.n	8003dca <z_move_thread_to_end_of_prio_q+0x62>
	node->prev = successor->prev;
 8003da2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
 8003da4:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
 8003da8:	600c      	str	r4, [r1, #0]
	successor->prev = node;
 8003daa:	605c      	str	r4, [r3, #4]
 8003dac:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
 8003dae:	6890      	ldr	r0, [r2, #8]
 8003db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003db4:	7363      	strb	r3, [r4, #13]
 8003db6:	1b03      	subs	r3, r0, r4
 8003db8:	4258      	negs	r0, r3
 8003dba:	4158      	adcs	r0, r3
 8003dbc:	f7ff ff64 	bl	8003c88 <update_cache>
	__asm__ volatile(
 8003dc0:	f387 8811 	msr	BASEPRI, r7
 8003dc4:	f3bf 8f6f 	isb	sy
}
 8003dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 8003dca:	4283      	cmp	r3, r0
 8003dcc:	d002      	beq.n	8003dd4 <z_move_thread_to_end_of_prio_q+0x6c>
 8003dce:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1e2      	bne.n	8003d9a <z_move_thread_to_end_of_prio_q+0x32>
	node->prev = list->tail;
 8003dd4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003dd6:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 8003dd8:	6a93      	ldr	r3, [r2, #40]	; 0x28
	node->next = list;
 8003dda:	6026      	str	r6, [r4, #0]
	list->tail->next = node;
 8003ddc:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8003dde:	6294      	str	r4, [r2, #40]	; 0x28
 8003de0:	e7e4      	b.n	8003dac <z_move_thread_to_end_of_prio_q+0x44>
 8003de2:	bf00      	nop
 8003de4:	20004370 	.word	0x20004370

08003de8 <z_time_slice>:
	if (pending_current == _current) {
 8003de8:	4914      	ldr	r1, [pc, #80]	; (8003e3c <z_time_slice+0x54>)
 8003dea:	4a15      	ldr	r2, [pc, #84]	; (8003e40 <z_time_slice+0x58>)
 8003dec:	688b      	ldr	r3, [r1, #8]
{
 8003dee:	b510      	push	{r4, lr}
	if (pending_current == _current) {
 8003df0:	6814      	ldr	r4, [r2, #0]
 8003df2:	42a3      	cmp	r3, r4
 8003df4:	d103      	bne.n	8003dfe <z_time_slice+0x16>
}
 8003df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			reset_time_slice();
 8003dfa:	f7ff bed5 	b.w	8003ba8 <reset_time_slice>
	pending_current = NULL;
 8003dfe:	2400      	movs	r4, #0
 8003e00:	6014      	str	r4, [r2, #0]
	if (slice_time && sliceable(_current)) {
 8003e02:	4a10      	ldr	r2, [pc, #64]	; (8003e44 <z_time_slice+0x5c>)
 8003e04:	6812      	ldr	r2, [r2, #0]
 8003e06:	b1ba      	cbz	r2, 8003e38 <z_time_slice+0x50>
		&& !z_is_thread_timeout_active(t);
 8003e08:	89da      	ldrh	r2, [r3, #14]
 8003e0a:	2a7f      	cmp	r2, #127	; 0x7f
 8003e0c:	d814      	bhi.n	8003e38 <z_time_slice+0x50>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
 8003e0e:	4a0e      	ldr	r2, [pc, #56]	; (8003e48 <z_time_slice+0x60>)
 8003e10:	f993 400e 	ldrsb.w	r4, [r3, #14]
 8003e14:	6812      	ldr	r2, [r2, #0]
 8003e16:	4294      	cmp	r4, r2
 8003e18:	db0e      	blt.n	8003e38 <z_time_slice+0x50>
	return thread == _idle_thread;
 8003e1a:	4a0c      	ldr	r2, [pc, #48]	; (8003e4c <z_time_slice+0x64>)
		&& !is_idle(t)
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00a      	beq.n	8003e38 <z_time_slice+0x50>
		&& !z_is_thread_timeout_active(t);
 8003e22:	699a      	ldr	r2, [r3, #24]
 8003e24:	b942      	cbnz	r2, 8003e38 <z_time_slice+0x50>
		if (ticks >= _current_cpu->slice_ticks) {
 8003e26:	690a      	ldr	r2, [r1, #16]
 8003e28:	4282      	cmp	r2, r0
 8003e2a:	dc03      	bgt.n	8003e34 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff ff9b 	bl	8003d68 <z_move_thread_to_end_of_prio_q>
 8003e32:	e7e0      	b.n	8003df6 <z_time_slice+0xe>
			_current_cpu->slice_ticks -= ticks;
 8003e34:	1a12      	subs	r2, r2, r0
 8003e36:	610a      	str	r2, [r1, #16]
}
 8003e38:	bd10      	pop	{r4, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20004370 	.word	0x20004370
 8003e40:	2000439c 	.word	0x2000439c
 8003e44:	200043a4 	.word	0x200043a4
 8003e48:	200043a0 	.word	0x200043a0
 8003e4c:	080065c0 	.word	0x080065c0

08003e50 <z_remove_thread_from_ready_q>:
{
 8003e50:	b538      	push	{r3, r4, r5, lr}
 8003e52:	4604      	mov	r4, r0
	__asm__ volatile(
 8003e54:	f04f 0310 	mov.w	r3, #16
 8003e58:	f3ef 8511 	mrs	r5, BASEPRI
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 8003e64:	7b43      	ldrb	r3, [r0, #13]
 8003e66:	065a      	lsls	r2, r3, #25
 8003e68:	d507      	bpl.n	8003e7a <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 8003e6a:	4601      	mov	r1, r0
 8003e6c:	4809      	ldr	r0, [pc, #36]	; (8003e94 <z_remove_thread_from_ready_q+0x44>)
 8003e6e:	f7ff fef5 	bl	8003c5c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 8003e72:	7b63      	ldrb	r3, [r4, #13]
 8003e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e78:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 8003e7a:	4b07      	ldr	r3, [pc, #28]	; (8003e98 <z_remove_thread_from_ready_q+0x48>)
 8003e7c:	6898      	ldr	r0, [r3, #8]
 8003e7e:	1b03      	subs	r3, r0, r4
 8003e80:	4258      	negs	r0, r3
 8003e82:	4158      	adcs	r0, r3
 8003e84:	f7ff ff00 	bl	8003c88 <update_cache>
	__asm__ volatile(
 8003e88:	f385 8811 	msr	BASEPRI, r5
 8003e8c:	f3bf 8f6f 	isb	sy
}
 8003e90:	bd38      	pop	{r3, r4, r5, pc}
 8003e92:	bf00      	nop
 8003e94:	20004394 	.word	0x20004394
 8003e98:	20004370 	.word	0x20004370

08003e9c <pend>:
{
 8003e9c:	b570      	push	{r4, r5, r6, lr}
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	460d      	mov	r5, r1
 8003ea2:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
 8003ea4:	f7ff ffd4 	bl	8003e50 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
 8003ea8:	7b63      	ldrb	r3, [r4, #13]
 8003eaa:	f043 0302 	orr.w	r3, r3, #2
 8003eae:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 8003eb0:	b17d      	cbz	r5, 8003ed2 <pend+0x36>
	return list->head == list;
 8003eb2:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 8003eb4:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003eb6:	429d      	cmp	r5, r3
 8003eb8:	d020      	beq.n	8003efc <pend+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8003eba:	b1fb      	cbz	r3, 8003efc <pend+0x60>
	if (t1->base.prio < t2->base.prio) {
 8003ebc:	f994 200e 	ldrsb.w	r2, [r4, #14]
 8003ec0:	f993 100e 	ldrsb.w	r1, [r3, #14]
 8003ec4:	4291      	cmp	r1, r2
 8003ec6:	dd13      	ble.n	8003ef0 <pend+0x54>
	node->prev = successor->prev;
 8003ec8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8003eca:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
 8003ece:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8003ed0:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
 8003ed2:	1c73      	adds	r3, r6, #1
 8003ed4:	d019      	beq.n	8003f0a <pend+0x6e>
 8003ed6:	f106 0209 	add.w	r2, r6, #9

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 8003eda:	f104 0018 	add.w	r0, r4, #24
 8003ede:	260a      	movs	r6, #10
 8003ee0:	490a      	ldr	r1, [pc, #40]	; (8003f0c <pend+0x70>)
 8003ee2:	fb92 f2f6 	sdiv	r2, r2, r6
}
 8003ee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003eea:	3201      	adds	r2, #1
 8003eec:	f000 ba5c 	b.w	80043a8 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
 8003ef0:	6869      	ldr	r1, [r5, #4]
 8003ef2:	428b      	cmp	r3, r1
 8003ef4:	d002      	beq.n	8003efc <pend+0x60>
 8003ef6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1e1      	bne.n	8003ec0 <pend+0x24>
	node->prev = list->tail;
 8003efc:	686b      	ldr	r3, [r5, #4]
 8003efe:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 8003f00:	686b      	ldr	r3, [r5, #4]
	node->next = list;
 8003f02:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
 8003f04:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8003f06:	606c      	str	r4, [r5, #4]
 8003f08:	e7e3      	b.n	8003ed2 <pend+0x36>
}
 8003f0a:	bd70      	pop	{r4, r5, r6, pc}
 8003f0c:	08005d8f 	.word	0x08005d8f

08003f10 <z_pend_curr_irqlock>:
{
 8003f10:	b570      	push	{r4, r5, r6, lr}
	pend(_current, wait_q, timeout);
 8003f12:	4d0f      	ldr	r5, [pc, #60]	; (8003f50 <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
 8003f14:	4c0f      	ldr	r4, [pc, #60]	; (8003f54 <z_pend_curr_irqlock+0x44>)
{
 8003f16:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
 8003f18:	68a8      	ldr	r0, [r5, #8]
 8003f1a:	f7ff ffbf 	bl	8003e9c <pend>
	pending_current = _current;
 8003f1e:	68ab      	ldr	r3, [r5, #8]
 8003f20:	6023      	str	r3, [r4, #0]
 8003f22:	4630      	mov	r0, r6
 8003f24:	f7fe f8a2 	bl	800206c <__swap>
	__asm__ volatile(
 8003f28:	f04f 0210 	mov.w	r2, #16
 8003f2c:	f3ef 8311 	mrs	r3, BASEPRI
 8003f30:	f382 8811 	msr	BASEPRI, r2
 8003f34:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
 8003f38:	6822      	ldr	r2, [r4, #0]
 8003f3a:	68a9      	ldr	r1, [r5, #8]
 8003f3c:	4291      	cmp	r1, r2
			pending_current = NULL;
 8003f3e:	bf04      	itt	eq
 8003f40:	2200      	moveq	r2, #0
 8003f42:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
}
 8003f4c:	bd70      	pop	{r4, r5, r6, pc}
 8003f4e:	bf00      	nop
 8003f50:	20004370 	.word	0x20004370
 8003f54:	2000439c 	.word	0x2000439c

08003f58 <z_pend_curr>:
{
 8003f58:	b510      	push	{r4, lr}
 8003f5a:	460c      	mov	r4, r1
 8003f5c:	4611      	mov	r1, r2
	pending_current = _current;
 8003f5e:	4a06      	ldr	r2, [pc, #24]	; (8003f78 <z_pend_curr+0x20>)
 8003f60:	6890      	ldr	r0, [r2, #8]
 8003f62:	4a06      	ldr	r2, [pc, #24]	; (8003f7c <z_pend_curr+0x24>)
 8003f64:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
 8003f66:	461a      	mov	r2, r3
 8003f68:	f7ff ff98 	bl	8003e9c <pend>
 8003f6c:	4620      	mov	r0, r4
}
 8003f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f72:	f7fe b87b 	b.w	800206c <__swap>
 8003f76:	bf00      	nop
 8003f78:	20004370 	.word	0x20004370
 8003f7c:	2000439c 	.word	0x2000439c

08003f80 <z_tick_sleep.part.16>:

#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

static s32_t z_tick_sleep(s32_t ticks)
 8003f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
 8003f82:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
 8003f84:	f001 ffea 	bl	8005f5c <z_tick_get_32>
 8003f88:	1834      	adds	r4, r6, r0
	__asm__ volatile(
 8003f8a:	f04f 0310 	mov.w	r3, #16
 8003f8e:	f3ef 8711 	mrs	r7, BASEPRI
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 8003f9a:	4d0d      	ldr	r5, [pc, #52]	; (8003fd0 <z_tick_sleep.part.16+0x50>)
 8003f9c:	4b0d      	ldr	r3, [pc, #52]	; (8003fd4 <z_tick_sleep.part.16+0x54>)
 8003f9e:	68a8      	ldr	r0, [r5, #8]
 8003fa0:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
 8003fa2:	f7ff ff55 	bl	8003e50 <z_remove_thread_from_ready_q>
 8003fa6:	68a8      	ldr	r0, [r5, #8]
 8003fa8:	490b      	ldr	r1, [pc, #44]	; (8003fd8 <z_tick_sleep.part.16+0x58>)
 8003faa:	4632      	mov	r2, r6
 8003fac:	3018      	adds	r0, #24
 8003fae:	f000 f9fb 	bl	80043a8 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
 8003fb2:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8003fb4:	7b53      	ldrb	r3, [r2, #13]
 8003fb6:	f043 0310 	orr.w	r3, r3, #16
 8003fba:	7353      	strb	r3, [r2, #13]
 8003fbc:	4638      	mov	r0, r7
 8003fbe:	f7fe f855 	bl	800206c <__swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
 8003fc2:	f001 ffcb 	bl	8005f5c <z_tick_get_32>
 8003fc6:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
 8003fc8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8003fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20004370 	.word	0x20004370
 8003fd4:	2000439c 	.word	0x2000439c
 8003fd8:	08005d8f 	.word	0x08005d8f

08003fdc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8003fdc:	4b04      	ldr	r3, [pc, #16]	; (8003ff0 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 8003fde:	2100      	movs	r1, #0
 8003fe0:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
 8003fe4:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
 8003fe8:	4608      	mov	r0, r1
 8003fea:	f7ff be01 	b.w	8003bf0 <k_sched_time_slice_set>
 8003fee:	bf00      	nop
 8003ff0:	20004370 	.word	0x20004370

08003ff4 <z_impl_k_yield>:
{
 8003ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!is_idle(_current)) {
 8003ff6:	4c22      	ldr	r4, [pc, #136]	; (8004080 <z_impl_k_yield+0x8c>)
 8003ff8:	4b22      	ldr	r3, [pc, #136]	; (8004084 <z_impl_k_yield+0x90>)
 8003ffa:	68a2      	ldr	r2, [r4, #8]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d025      	beq.n	800404e <z_impl_k_yield+0x5a>
 8004002:	f04f 0310 	mov.w	r3, #16
 8004006:	f3ef 8611 	mrs	r6, BASEPRI
 800400a:	f383 8811 	msr	BASEPRI, r3
 800400e:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
 8004012:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8004016:	68a1      	ldr	r1, [r4, #8]
 8004018:	4628      	mov	r0, r5
 800401a:	f7ff fe1f 	bl	8003c5c <z_priq_dumb_remove>
	return list->head == list;
 800401e:	6a63      	ldr	r3, [r4, #36]	; 0x24
				_priq_run_add(&_kernel.ready_q.runq,
 8004020:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004022:	42ab      	cmp	r3, r5
 8004024:	d024      	beq.n	8004070 <z_impl_k_yield+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8004026:	b31b      	cbz	r3, 8004070 <z_impl_k_yield+0x7c>
 8004028:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (t1->base.prio < t2->base.prio) {
 800402a:	f992 000e 	ldrsb.w	r0, [r2, #14]
 800402e:	f993 700e 	ldrsb.w	r7, [r3, #14]
 8004032:	4287      	cmp	r7, r0
 8004034:	dd17      	ble.n	8004066 <z_impl_k_yield+0x72>
	node->prev = successor->prev;
 8004036:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
 8004038:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
 800403c:	600a      	str	r2, [r1, #0]
	successor->prev = node;
 800403e:	605a      	str	r2, [r3, #4]
			update_cache(1);
 8004040:	2001      	movs	r0, #1
 8004042:	f7ff fe21 	bl	8003c88 <update_cache>
	__asm__ volatile(
 8004046:	f386 8811 	msr	BASEPRI, r6
 800404a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800404e:	f04f 0310 	mov.w	r3, #16
 8004052:	f3ef 8011 	mrs	r0, BASEPRI
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
}
 800405e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004062:	f7fe b803 	b.w	800206c <__swap>
	return (node == list->tail) ? NULL : node->next;
 8004066:	4299      	cmp	r1, r3
 8004068:	d002      	beq.n	8004070 <z_impl_k_yield+0x7c>
 800406a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1de      	bne.n	800402e <z_impl_k_yield+0x3a>
	node->prev = list->tail;
 8004070:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004072:	6053      	str	r3, [r2, #4]
	list->tail->next = node;
 8004074:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	node->next = list;
 8004076:	6015      	str	r5, [r2, #0]
	list->tail->next = node;
 8004078:	601a      	str	r2, [r3, #0]
	list->tail = node;
 800407a:	62a2      	str	r2, [r4, #40]	; 0x28
 800407c:	e7e0      	b.n	8004040 <z_impl_k_yield+0x4c>
 800407e:	bf00      	nop
 8004080:	20004370 	.word	0x20004370
 8004084:	080065c0 	.word	0x080065c0

08004088 <z_impl_k_wakeup>:
	return z_impl_k_usleep(us);
}
#endif

void z_impl_k_wakeup(k_tid_t thread)
{
 8004088:	b510      	push	{r4, lr}
	if (z_is_thread_pending(thread)) {
 800408a:	7b43      	ldrb	r3, [r0, #13]
 800408c:	079a      	lsls	r2, r3, #30
{
 800408e:	4604      	mov	r4, r0
	if (z_is_thread_pending(thread)) {
 8004090:	d41c      	bmi.n	80040cc <z_impl_k_wakeup+0x44>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8004092:	3018      	adds	r0, #24
 8004094:	f001 ff22 	bl	8005edc <z_abort_timeout>
		return;
	}

	if (z_abort_thread_timeout(thread) < 0) {
 8004098:	2800      	cmp	r0, #0
 800409a:	db17      	blt.n	80040cc <z_impl_k_wakeup+0x44>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800409c:	7b63      	ldrb	r3, [r4, #13]
 800409e:	f023 0310 	bic.w	r3, r3, #16
 80040a2:	7363      	strb	r3, [r4, #13]
	if (z_is_thread_ready(thread)) {
 80040a4:	4620      	mov	r0, r4
 80040a6:	f001 fe21 	bl	8005cec <z_is_thread_ready>
 80040aa:	b110      	cbz	r0, 80040b2 <z_impl_k_wakeup+0x2a>
		z_add_thread_to_ready_q(thread);
 80040ac:	4620      	mov	r0, r4
 80040ae:	f7ff fe25 	bl	8003cfc <z_add_thread_to_ready_q>
 80040b2:	f3ef 8305 	mrs	r3, IPSR
 80040b6:	2b0d      	cmp	r3, #13
 80040b8:	d808      	bhi.n	80040cc <z_impl_k_wakeup+0x44>
 80040ba:	b11b      	cbz	r3, 80040c4 <z_impl_k_wakeup+0x3c>
 80040bc:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <z_impl_k_wakeup+0x48>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	051b      	lsls	r3, r3, #20
 80040c2:	d503      	bpl.n	80040cc <z_impl_k_wakeup+0x44>

	if (IS_ENABLED(CONFIG_SMP) &&
	    !IS_ENABLED(CONFIG_SCHED_IPI_SUPPORTED)) {
		z_sched_ipi();
	}
}
 80040c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_reschedule_unlocked();
 80040c8:	f001 be51 	b.w	8005d6e <z_reschedule_unlocked>
}
 80040cc:	bd10      	pop	{r4, pc}
 80040ce:	bf00      	nop
 80040d0:	e000ed00 	.word	0xe000ed00

080040d4 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
 80040d4:	4b01      	ldr	r3, [pc, #4]	; (80040dc <z_impl_k_current_get+0x8>)
 80040d6:	6898      	ldr	r0, [r3, #8]
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	20004370 	.word	0x20004370

080040e0 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 80040e0:	b570      	push	{r4, r5, r6, lr}
 80040e2:	4604      	mov	r4, r0
 80040e4:	f04f 0310 	mov.w	r3, #16
 80040e8:	f3ef 8611 	mrs	r6, BASEPRI
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
 80040f4:	f001 fe7c 	bl	8005df0 <z_unpend_first_thread>
	if (thread != NULL) {
 80040f8:	4605      	mov	r5, r0
 80040fa:	b170      	cbz	r0, 800411a <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 80040fc:	7b43      	ldrb	r3, [r0, #13]
 80040fe:	06db      	lsls	r3, r3, #27
 8004100:	d103      	bne.n	800410a <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
 8004102:	6983      	ldr	r3, [r0, #24]
 8004104:	b90b      	cbnz	r3, 800410a <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
 8004106:	f7ff fdf9 	bl	8003cfc <z_add_thread_to_ready_q>
 800410a:	2300      	movs	r3, #0
 800410c:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
 800410e:	4631      	mov	r1, r6
 8004110:	4805      	ldr	r0, [pc, #20]	; (8004128 <z_impl_k_sem_give+0x48>)
}
 8004112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
 8004116:	f001 be0b 	b.w	8005d30 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800411a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800411e:	429a      	cmp	r2, r3
 8004120:	bf18      	it	ne
 8004122:	3301      	addne	r3, #1
 8004124:	60a3      	str	r3, [r4, #8]
 8004126:	e7f2      	b.n	800410e <z_impl_k_sem_give+0x2e>
 8004128:	200043b0 	.word	0x200043b0

0800412c <z_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
 800412c:	b410      	push	{r4}
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	f04f 0010 	mov.w	r0, #16
 8004136:	f3ef 8111 	mrs	r1, BASEPRI
 800413a:	f380 8811 	msr	BASEPRI, r0
 800413e:	f3bf 8f6f 	isb	sy
	__ASSERT(((z_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
 8004142:	6894      	ldr	r4, [r2, #8]
 8004144:	b144      	cbz	r4, 8004158 <z_impl_k_sem_take+0x2c>
		sem->count--;
 8004146:	3c01      	subs	r4, #1
 8004148:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
 800414a:	f381 8811 	msr	BASEPRI, r1
 800414e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
 8004152:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
 8004154:	bc10      	pop	{r4}
 8004156:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
 8004158:	b933      	cbnz	r3, 8004168 <z_impl_k_sem_take+0x3c>
 800415a:	f381 8811 	msr	BASEPRI, r1
 800415e:	f3bf 8f6f 	isb	sy
		return -EBUSY;
 8004162:	f06f 000f 	mvn.w	r0, #15
 8004166:	e7f5      	b.n	8004154 <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8004168:	4801      	ldr	r0, [pc, #4]	; (8004170 <z_impl_k_sem_take+0x44>)
}
 800416a:	bc10      	pop	{r4}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 800416c:	f7ff bef4 	b.w	8003f58 <z_pend_curr>
 8004170:	200043b0 	.word	0x200043b0

08004174 <k_is_in_isr>:
 8004174:	f3ef 8005 	mrs	r0, IPSR
 8004178:	280d      	cmp	r0, #13
 800417a:	d807      	bhi.n	800418c <k_is_in_isr+0x18>
 800417c:	b138      	cbz	r0, 800418e <k_is_in_isr+0x1a>
 800417e:	4b04      	ldr	r3, [pc, #16]	; (8004190 <k_is_in_isr+0x1c>)
 8004180:	6858      	ldr	r0, [r3, #4]
 8004182:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
 8004186:	f3c0 20c0 	ubfx	r0, r0, #11, #1
 800418a:	4770      	bx	lr
 800418c:	2001      	movs	r0, #1
}

bool k_is_in_isr(void)
{
	return z_is_in_isr();
}
 800418e:	4770      	bx	lr
 8004190:	e000ed00 	.word	0xe000ed00

08004194 <z_is_thread_essential>:
 *
 * Returns true if current thread is essential, false if it is not.
 */
bool z_is_thread_essential(void)
{
	return (_current->base.user_options & K_ESSENTIAL) == K_ESSENTIAL;
 8004194:	4b02      	ldr	r3, [pc, #8]	; (80041a0 <z_is_thread_essential+0xc>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	7b18      	ldrb	r0, [r3, #12]
}
 800419a:	f000 0001 	and.w	r0, r0, #1
 800419e:	4770      	bx	lr
 80041a0:	20004370 	.word	0x20004370

080041a4 <z_impl_k_busy_wait>:
{
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	/* use 64-bit math to prevent overflow when multiplying */
	u32_t cycles_to_wait = (u32_t)(
		(u64_t)usec_to_wait *
		(u64_t)sys_clock_hw_cycles_per_sec() /
 80041a4:	4908      	ldr	r1, [pc, #32]	; (80041c8 <z_impl_k_busy_wait+0x24>)
 80041a6:	4a09      	ldr	r2, [pc, #36]	; (80041cc <z_impl_k_busy_wait+0x28>)
{
 80041a8:	b538      	push	{r3, r4, r5, lr}
		(u64_t)sys_clock_hw_cycles_per_sec() /
 80041aa:	fba0 0101 	umull	r0, r1, r0, r1
 80041ae:	2300      	movs	r3, #0
 80041b0:	f7fb ffea 	bl	8000188 <__aeabi_uldivmod>
 80041b4:	4604      	mov	r4, r0
		(u64_t)USEC_PER_SEC
	);
	u32_t start_cycles = k_cycle_get_32();
 80041b6:	f7fd fc4b 	bl	8001a50 <z_timer_cycle_get_32>
 80041ba:	4605      	mov	r5, r0

	for (;;) {
		u32_t current_cycles = k_cycle_get_32();
 80041bc:	f7fd fc48 	bl	8001a50 <z_timer_cycle_get_32>

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 80041c0:	1b40      	subs	r0, r0, r5
 80041c2:	42a0      	cmp	r0, r4
 80041c4:	d3fa      	bcc.n	80041bc <z_impl_k_busy_wait+0x18>
		}
	}
#else
	z_arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
}
 80041c6:	bd38      	pop	{r3, r4, r5, pc}
 80041c8:	04c4b400 	.word	0x04c4b400
 80041cc:	000f4240 	.word	0x000f4240

080041d0 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
 80041d0:	b510      	push	{r4, lr}
 80041d2:	4602      	mov	r2, r0
	__asm__ volatile(
 80041d4:	f04f 0310 	mov.w	r3, #16
 80041d8:	f3ef 8411 	mrs	r4, BASEPRI
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
 80041e4:	7b43      	ldrb	r3, [r0, #13]
 80041e6:	0759      	lsls	r1, r3, #29
 80041e8:	d404      	bmi.n	80041f4 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
 80041ea:	f384 8811 	msr	BASEPRI, r4
 80041ee:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
 80041f2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80041f4:	f023 0304 	bic.w	r3, r3, #4
 80041f8:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
 80041fa:	f001 fe3c 	bl	8005e76 <z_is_thread_ready>
 80041fe:	b110      	cbz	r0, 8004206 <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
 8004200:	4610      	mov	r0, r2
 8004202:	f7ff fd7b 	bl	8003cfc <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
 8004206:	4621      	mov	r1, r4
 8004208:	4802      	ldr	r0, [pc, #8]	; (8004214 <z_impl_k_thread_start+0x44>)
}
 800420a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
 800420e:	f001 bd8f 	b.w	8005d30 <z_reschedule>
 8004212:	bf00      	nop
 8004214:	200043b0 	.word	0x200043b0

08004218 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
 8004218:	b530      	push	{r4, r5, lr}
 800421a:	b087      	sub	sp, #28
 800421c:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800421e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004220:	9504      	str	r5, [sp, #16]
 8004222:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004224:	9503      	str	r5, [sp, #12]
 8004226:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004228:	9502      	str	r5, [sp, #8]
 800422a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800422c:	9501      	str	r5, [sp, #4]
 800422e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004230:	9500      	str	r5, [sp, #0]
 8004232:	f7fe f8eb 	bl	800240c <z_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 8004236:	4b03      	ldr	r3, [pc, #12]	; (8004244 <z_setup_new_thread+0x2c>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	b103      	cbz	r3, 800423e <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 800423c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423e:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
 8004240:	b007      	add	sp, #28
 8004242:	bd30      	pop	{r4, r5, pc}
 8004244:	20004370 	.word	0x20004370

08004248 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
 8004248:	b570      	push	{r4, r5, r6, lr}
 800424a:	b086      	sub	sp, #24
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800424c:	2600      	movs	r6, #0
 800424e:	9605      	str	r6, [sp, #20]
 8004250:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8004252:	9604      	str	r6, [sp, #16]
 8004254:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8004256:	9603      	str	r6, [sp, #12]
 8004258:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800425a:	9602      	str	r6, [sp, #8]
 800425c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
 800425e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8004260:	9601      	str	r6, [sp, #4]
 8004262:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004264:	9600      	str	r6, [sp, #0]
{
 8004266:	4605      	mov	r5, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8004268:	f7ff ffd6 	bl	8004218 <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
 800426c:	1c63      	adds	r3, r4, #1
 800426e:	d003      	beq.n	8004278 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
 8004270:	b92c      	cbnz	r4, 800427e <z_impl_k_thread_create+0x36>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
 8004272:	4628      	mov	r0, r5
 8004274:	f7ff ffac 	bl	80041d0 <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
 8004278:	4628      	mov	r0, r5
 800427a:	b006      	add	sp, #24
 800427c:	bd70      	pop	{r4, r5, r6, pc}
 800427e:	3409      	adds	r4, #9
 8004280:	220a      	movs	r2, #10
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 8004282:	4904      	ldr	r1, [pc, #16]	; (8004294 <z_impl_k_thread_create+0x4c>)
 8004284:	fb94 f2f2 	sdiv	r2, r4, r2
 8004288:	f105 0018 	add.w	r0, r5, #24
 800428c:	3201      	adds	r2, #1
 800428e:	f000 f88b 	bl	80043a8 <z_add_timeout>
 8004292:	e7f1      	b.n	8004278 <z_impl_k_thread_create+0x30>
 8004294:	08005d8f 	.word	0x08005d8f

08004298 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
 8004298:	b5f0      	push	{r4, r5, r6, r7, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
 800429a:	4f21      	ldr	r7, [pc, #132]	; (8004320 <z_init_static_threads+0x88>)
 800429c:	4d21      	ldr	r5, [pc, #132]	; (8004324 <z_init_static_threads+0x8c>)
{
 800429e:	b087      	sub	sp, #28
 80042a0:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
 80042a2:	42bd      	cmp	r5, r7
 80042a4:	f105 0430 	add.w	r4, r5, #48	; 0x30
 80042a8:	d30b      	bcc.n	80042c2 <z_init_static_threads+0x2a>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
 80042aa:	f7ff fcc3 	bl	8003c34 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 80042ae:	4c1d      	ldr	r4, [pc, #116]	; (8004324 <z_init_static_threads+0x8c>)
 80042b0:	4f1d      	ldr	r7, [pc, #116]	; (8004328 <z_init_static_threads+0x90>)
 80042b2:	250a      	movs	r5, #10
 80042b4:	42b4      	cmp	r4, r6
 80042b6:	d321      	bcc.n	80042fc <z_init_static_threads+0x64>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
 80042b8:	b007      	add	sp, #28
 80042ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 80042be:	f7ff bd01 	b.w	8003cc4 <k_sched_unlock>
		z_setup_new_thread(
 80042c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80042c6:	9305      	str	r3, [sp, #20]
 80042c8:	f854 3c10 	ldr.w	r3, [r4, #-16]
 80042cc:	9304      	str	r3, [sp, #16]
 80042ce:	f854 3c14 	ldr.w	r3, [r4, #-20]
 80042d2:	9303      	str	r3, [sp, #12]
 80042d4:	f854 3c18 	ldr.w	r3, [r4, #-24]
 80042d8:	9302      	str	r3, [sp, #8]
 80042da:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 80042de:	9301      	str	r3, [sp, #4]
 80042e0:	f854 3c20 	ldr.w	r3, [r4, #-32]
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 80042ea:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 80042ee:	f7ff ff93 	bl	8004218 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 80042f2:	f854 3c30 	ldr.w	r3, [r4, #-48]
 80042f6:	64dd      	str	r5, [r3, #76]	; 0x4c
 80042f8:	4625      	mov	r5, r4
 80042fa:	e7d2      	b.n	80042a2 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
 80042fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80042fe:	1c53      	adds	r3, r2, #1
 8004300:	d003      	beq.n	800430a <z_init_static_threads+0x72>
			schedule_new_thread(thread_data->init_thread,
 8004302:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
 8004304:	b91a      	cbnz	r2, 800430e <z_init_static_threads+0x76>
 8004306:	f7ff ff63 	bl	80041d0 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 800430a:	3430      	adds	r4, #48	; 0x30
 800430c:	e7d2      	b.n	80042b4 <z_init_static_threads+0x1c>
 800430e:	3209      	adds	r2, #9
 8004310:	4639      	mov	r1, r7
 8004312:	fb92 f2f5 	sdiv	r2, r2, r5
 8004316:	3018      	adds	r0, #24
 8004318:	3201      	adds	r2, #1
 800431a:	f000 f845 	bl	80043a8 <z_add_timeout>
 800431e:	e7f4      	b.n	800430a <z_init_static_threads+0x72>
 8004320:	20005a14 	.word	0x20005a14
 8004324:	20005a14 	.word	0x20005a14
 8004328:	08005d8f 	.word	0x08005d8f

0800432c <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
 800432c:	4b03      	ldr	r3, [pc, #12]	; (800433c <elapsed+0x10>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	b90b      	cbnz	r3, 8004336 <elapsed+0xa>
 8004332:	f7fd bb6d 	b.w	8001a10 <z_clock_elapsed>
}
 8004336:	2000      	movs	r0, #0
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	200043a8 	.word	0x200043a8

08004340 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8004340:	6803      	ldr	r3, [r0, #0]
 8004342:	b140      	cbz	r0, 8004356 <remove_timeout+0x16>
 8004344:	4a07      	ldr	r2, [pc, #28]	; (8004364 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
 8004346:	6852      	ldr	r2, [r2, #4]
 8004348:	4290      	cmp	r0, r2
 800434a:	d004      	beq.n	8004356 <remove_timeout+0x16>
	if (next(t) != NULL) {
 800434c:	b11b      	cbz	r3, 8004356 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	6881      	ldr	r1, [r0, #8]
 8004352:	440a      	add	r2, r1
 8004354:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
 8004356:	6842      	ldr	r2, [r0, #4]
 8004358:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 800435a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800435c:	2300      	movs	r3, #0
	node->prev = NULL;
 800435e:	e9c0 3300 	strd	r3, r3, [r0]
}
 8004362:	4770      	bx	lr
 8004364:	20005904 	.word	0x20005904

08004368 <next_timeout>:

static s32_t next_timeout(void)
{
 8004368:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
 800436a:	4b0d      	ldr	r3, [pc, #52]	; (80043a0 <next_timeout+0x38>)
 800436c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800436e:	429c      	cmp	r4, r3
 8004370:	d011      	beq.n	8004396 <next_timeout+0x2e>
	struct _timeout *to = first();
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - elapsed());
 8004372:	b184      	cbz	r4, 8004396 <next_timeout+0x2e>
 8004374:	68a5      	ldr	r5, [r4, #8]
 8004376:	f7ff ffd9 	bl	800432c <elapsed>
 800437a:	1a28      	subs	r0, r5, r0
 800437c:	2800      	cmp	r0, #0
 800437e:	db0d      	blt.n	800439c <next_timeout+0x34>
 8004380:	68a4      	ldr	r4, [r4, #8]
 8004382:	f7ff ffd3 	bl	800432c <elapsed>
 8004386:	1a20      	subs	r0, r4, r0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8004388:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <next_timeout+0x3c>)
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	b113      	cbz	r3, 8004394 <next_timeout+0x2c>
 800438e:	4298      	cmp	r0, r3
 8004390:	bfa8      	it	ge
 8004392:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 8004394:	bd38      	pop	{r3, r4, r5, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - elapsed());
 8004396:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800439a:	e7f5      	b.n	8004388 <next_timeout+0x20>
 800439c:	2000      	movs	r0, #0
 800439e:	e7f3      	b.n	8004388 <next_timeout+0x20>
 80043a0:	20005904 	.word	0x20005904
 80043a4:	20004370 	.word	0x20004370

080043a8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
 80043a8:	b570      	push	{r4, r5, r6, lr}
 80043aa:	4604      	mov	r4, r0
 80043ac:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 80043ae:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
 80043b0:	f04f 0310 	mov.w	r3, #16
 80043b4:	f3ef 8511 	mrs	r5, BASEPRI
 80043b8:	f383 8811 	msr	BASEPRI, r3
 80043bc:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
 80043c0:	f7ff ffb4 	bl	800432c <elapsed>
	return list->head == list;
 80043c4:	4b18      	ldr	r3, [pc, #96]	; (8004428 <z_add_timeout+0x80>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	2e01      	cmp	r6, #1
 80043ca:	bfac      	ite	ge
 80043cc:	1980      	addge	r0, r0, r6
 80043ce:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80043d0:	429a      	cmp	r2, r3
 80043d2:	60a0      	str	r0, [r4, #8]
 80043d4:	d001      	beq.n	80043da <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80043d6:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
 80043d8:	b932      	cbnz	r2, 80043e8 <z_add_timeout+0x40>
	node->prev = list->tail;
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
 80043de:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 80043e0:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
 80043e2:	6014      	str	r4, [r2, #0]
	list->tail = node;
 80043e4:	605c      	str	r4, [r3, #4]
 80043e6:	e00a      	b.n	80043fe <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
 80043e8:	6890      	ldr	r0, [r2, #8]
 80043ea:	68a1      	ldr	r1, [r4, #8]
 80043ec:	4288      	cmp	r0, r1
 80043ee:	dd15      	ble.n	800441c <z_add_timeout+0x74>
				t->dticks -= to->dticks;
 80043f0:	1a41      	subs	r1, r0, r1
 80043f2:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
 80043f4:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 80043f6:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
 80043fa:	600c      	str	r4, [r1, #0]
	successor->prev = node;
 80043fc:	6054      	str	r4, [r2, #4]
	return list->head == list;
 80043fe:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004400:	429a      	cmp	r2, r3
 8004402:	d006      	beq.n	8004412 <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8004404:	4294      	cmp	r4, r2
 8004406:	d104      	bne.n	8004412 <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
 8004408:	f7ff ffae 	bl	8004368 <next_timeout>
 800440c:	2100      	movs	r1, #0
 800440e:	f7fd faaf 	bl	8001970 <z_clock_set_timeout>
	__asm__ volatile(
 8004412:	f385 8811 	msr	BASEPRI, r5
 8004416:	f3bf 8f6f 	isb	sy
		}
	}
}
 800441a:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
 800441c:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 800441e:	42b2      	cmp	r2, r6
 8004420:	60a1      	str	r1, [r4, #8]
 8004422:	d0da      	beq.n	80043da <z_add_timeout+0x32>
 8004424:	6812      	ldr	r2, [r2, #0]
 8004426:	e7d7      	b.n	80043d8 <z_add_timeout+0x30>
 8004428:	20005904 	.word	0x20005904

0800442c <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
 800442c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8004430:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8004432:	f7ff fcd9 	bl	8003de8 <z_time_slice>
	__asm__ volatile(
 8004436:	f04f 0310 	mov.w	r3, #16
 800443a:	f3ef 8511 	mrs	r5, BASEPRI
 800443e:	f383 8811 	msr	BASEPRI, r3
 8004442:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 8004446:	4e21      	ldr	r6, [pc, #132]	; (80044cc <z_clock_announce+0xa0>)
 8004448:	4f21      	ldr	r7, [pc, #132]	; (80044d0 <z_clock_announce+0xa4>)
	return list->head == list;
 800444a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80044d4 <z_clock_announce+0xa8>
 800444e:	6034      	str	r4, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 8004450:	46b8      	mov	r8, r7
 8004452:	f8d9 4000 	ldr.w	r4, [r9]
 8004456:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004458:	454c      	cmp	r4, r9
 800445a:	e9d7 bc00 	ldrd	fp, ip, [r7]
 800445e:	d005      	beq.n	800446c <z_clock_announce+0x40>
 8004460:	b124      	cbz	r4, 800446c <z_clock_announce+0x40>
 8004462:	68a3      	ldr	r3, [r4, #8]
 8004464:	4293      	cmp	r3, r2
 8004466:	dd14      	ble.n	8004492 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 8004468:	1a9b      	subs	r3, r3, r2
 800446a:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
 800446c:	eb1b 0002 	adds.w	r0, fp, r2
 8004470:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
 8004474:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
 8004476:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
 800447a:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
 800447c:	f7ff ff74 	bl	8004368 <next_timeout>
 8004480:	4621      	mov	r1, r4
 8004482:	f7fd fa75 	bl	8001970 <z_clock_set_timeout>
	__asm__ volatile(
 8004486:	f385 8811 	msr	BASEPRI, r5
 800448a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 800448e:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
 8004492:	eb1b 0003 	adds.w	r0, fp, r3
 8004496:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
 800449e:	2300      	movs	r3, #0
		curr_tick += dt;
 80044a0:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
 80044a4:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
 80044a6:	4620      	mov	r0, r4
 80044a8:	f7ff ff4a 	bl	8004340 <remove_timeout>
 80044ac:	f385 8811 	msr	BASEPRI, r5
 80044b0:	f3bf 8f6f 	isb	sy
		t->fn(t);
 80044b4:	68e3      	ldr	r3, [r4, #12]
 80044b6:	4798      	blx	r3
	__asm__ volatile(
 80044b8:	f04f 0310 	mov.w	r3, #16
 80044bc:	f3ef 8511 	mrs	r5, BASEPRI
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 80044c8:	e7c3      	b.n	8004452 <z_clock_announce+0x26>
 80044ca:	bf00      	nop
 80044cc:	200043a8 	.word	0x200043a8
 80044d0:	20000000 	.word	0x20000000
 80044d4:	20005904 	.word	0x20005904

080044d8 <z_tick_get>:

s64_t z_tick_get(void)
{
 80044d8:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
 80044dc:	f04f 0310 	mov.w	r3, #16
 80044e0:	f3ef 8411 	mrs	r4, BASEPRI
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
 80044ec:	f7fd fa90 	bl	8001a10 <z_clock_elapsed>
 80044f0:	4b07      	ldr	r3, [pc, #28]	; (8004510 <z_tick_get+0x38>)
 80044f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f6:	eb12 0b00 	adds.w	fp, r2, r0
 80044fa:	f143 0c00 	adc.w	ip, r3, #0
 80044fe:	4658      	mov	r0, fp
 8004500:	4661      	mov	r1, ip
	__asm__ volatile(
 8004502:	f384 8811 	msr	BASEPRI, r4
 8004506:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 800450a:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
 800450e:	bf00      	nop
 8004510:	20000000 	.word	0x20000000

08004514 <display_write>:
{
 8004514:	b410      	push	{r4}
	return api->write(dev, x, y, desc, buf);
 8004516:	6844      	ldr	r4, [r0, #4]
 8004518:	68a4      	ldr	r4, [r4, #8]
 800451a:	46a4      	mov	ip, r4
}
 800451c:	bc10      	pop	{r4}
	return api->write(dev, x, y, desc, buf);
 800451e:	4760      	bx	ip

08004520 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
 8004520:	b570      	push	{r4, r5, r6, lr}
 8004522:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
 8004524:	f990 000b 	ldrsb.w	r0, [r0, #11]
 8004528:	250c      	movs	r5, #12
 800452a:	434d      	muls	r5, r1
		&p->levels[level].bits : p->levels[level].bits_p;
 800452c:	4288      	cmp	r0, r1
 800452e:	eb06 0405 	add.w	r4, r6, r5
 8004532:	bfb8      	it	lt
 8004534:	5974      	ldrlt	r4, [r6, r5]

	*word = &bitarray[bn / 32];
 8004536:	2a00      	cmp	r2, #0
 8004538:	4610      	mov	r0, r2
 800453a:	bfb8      	it	lt
 800453c:	f102 001f 	addlt.w	r0, r2, #31
 8004540:	1140      	asrs	r0, r0, #5
 8004542:	eb04 0180 	add.w	r1, r4, r0, lsl #2
 8004546:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
 8004548:	f002 001f 	and.w	r0, r2, #31
 800454c:	bd70      	pop	{r4, r5, r6, pc}

0800454e <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
 800454e:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
 8004550:	ab01      	add	r3, sp, #4
 8004552:	f7ff ffe5 	bl	8004520 <get_bit_ptr>

	*word |= (1<<bit);
 8004556:	9a01      	ldr	r2, [sp, #4]
 8004558:	2301      	movs	r3, #1
 800455a:	fa03 f000 	lsl.w	r0, r3, r0
 800455e:	6813      	ldr	r3, [r2, #0]
 8004560:	4303      	orrs	r3, r0
 8004562:	6013      	str	r3, [r2, #0]
}
 8004564:	b003      	add	sp, #12
 8004566:	f85d fb04 	ldr.w	pc, [sp], #4

0800456a <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
 800456a:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
 800456c:	ab01      	add	r3, sp, #4
 800456e:	f7ff ffd7 	bl	8004520 <get_bit_ptr>

	*word &= ~(1<<bit);
 8004572:	9a01      	ldr	r2, [sp, #4]
 8004574:	2301      	movs	r3, #1
 8004576:	fa03 f000 	lsl.w	r0, r3, r0
 800457a:	6813      	ldr	r3, [r2, #0]
 800457c:	ea23 0300 	bic.w	r3, r3, r0
 8004580:	6013      	str	r3, [r2, #0]
}
 8004582:	b003      	add	sp, #12
 8004584:	f85d fb04 	ldr.w	pc, [sp], #4

08004588 <block_fits>:
	return p->n_max * p->max_sz;
}

static bool block_fits(struct sys_mem_pool_base *p,
		       int lvl, int bn, size_t *lsizes)
{
 8004588:	b570      	push	{r4, r5, r6, lr}
	u8_t *parent, *block_end;
	size_t parent_sz;

	block_end = (u8_t *)block_ptr(p, lsizes[lvl], bn) + lsizes[lvl];
 800458a:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 800458e:	6804      	ldr	r4, [r0, #0]
 8004590:	fb02 5505 	mla	r5, r2, r5, r5
 8004594:	008e      	lsls	r6, r1, #2
 8004596:	4425      	add	r5, r4

	if (lvl == 0) {
 8004598:	b941      	cbnz	r1, 80045ac <block_fits+0x24>
	return p->n_max * p->max_sz;
 800459a:	8903      	ldrh	r3, [r0, #8]
 800459c:	6840      	ldr	r0, [r0, #4]
 800459e:	4358      	muls	r0, r3
	} else {
		parent_sz = lsizes[lvl - 1];
		parent = block_ptr(p, lsizes[lvl - 1], bn / 4);
	}

	return block_end <= (parent + parent_sz);
 80045a0:	4420      	add	r0, r4
}
 80045a2:	4285      	cmp	r5, r0
 80045a4:	bf8c      	ite	hi
 80045a6:	2000      	movhi	r0, #0
 80045a8:	2001      	movls	r0, #1
 80045aa:	bd70      	pop	{r4, r5, r6, pc}
		parent_sz = lsizes[lvl - 1];
 80045ac:	4433      	add	r3, r6
		parent = block_ptr(p, lsizes[lvl - 1], bn / 4);
 80045ae:	2a00      	cmp	r2, #0
		parent_sz = lsizes[lvl - 1];
 80045b0:	f853 0c04 	ldr.w	r0, [r3, #-4]
		parent = block_ptr(p, lsizes[lvl - 1], bn / 4);
 80045b4:	bfb8      	it	lt
 80045b6:	3203      	addlt	r2, #3
 80045b8:	1092      	asrs	r2, r2, #2
	return (u8_t *)p->buf + lsz * block;
 80045ba:	fb00 4402 	mla	r4, r0, r2, r4
 80045be:	e7ef      	b.n	80045a0 <block_fits+0x18>

080045c0 <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
 80045c0:	f04f 0310 	mov.w	r3, #16
 80045c4:	f3ef 8011 	mrs	r0, BASEPRI
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
 80045d0:	4770      	bx	lr

080045d2 <pool_irq_unlock.isra.4>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
 80045d2:	07c3      	lsls	r3, r0, #31
 80045d4:	d503      	bpl.n	80045de <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
 80045d6:	f381 8811 	msr	BASEPRI, r1
 80045da:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
 80045de:	4770      	bx	lr

080045e0 <z_sys_mem_pool_base_init>:
{
 80045e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 80045e4:	6843      	ldr	r3, [r0, #4]
 80045e6:	8906      	ldrh	r6, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
 80045e8:	6805      	ldr	r5, [r0, #0]
	for (i = 0; i < p->n_levels; i++) {
 80045ea:	f890 c00a 	ldrb.w	ip, [r0, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 80045ee:	435e      	muls	r6, r3
	p->max_inline_level = -1;
 80045f0:	22ff      	movs	r2, #255	; 0xff
{
 80045f2:	4604      	mov	r4, r0
	p->max_inline_level = -1;
 80045f4:	72c2      	strb	r2, [r0, #11]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
 80045f6:	4435      	add	r5, r6
	for (i = 0; i < p->n_levels; i++) {
 80045f8:	2000      	movs	r0, #0
		sys_dlist_init(&p->levels[i].free_list);
 80045fa:	f04f 0e0c 	mov.w	lr, #12
	for (i = 0; i < p->n_levels; i++) {
 80045fe:	4584      	cmp	ip, r0
 8004600:	dc05      	bgt.n	800460e <z_sys_mem_pool_base_init+0x2e>
	for (i = 0; i < p->n_max; i++) {
 8004602:	2500      	movs	r5, #0
 8004604:	8923      	ldrh	r3, [r4, #8]
 8004606:	42ab      	cmp	r3, r5
 8004608:	dc21      	bgt.n	800464e <z_sys_mem_pool_base_init+0x6e>
}
 800460a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sys_dlist_init(&p->levels[i].free_list);
 800460e:	f8d4 800c 	ldr.w	r8, [r4, #12]
		int nblocks = buflen / sz;
 8004612:	fbb6 f1f3 	udiv	r1, r6, r3
		sys_dlist_init(&p->levels[i].free_list);
 8004616:	fb0e f700 	mul.w	r7, lr, r0
 800461a:	eb08 0207 	add.w	r2, r8, r7
 800461e:	f102 0904 	add.w	r9, r2, #4
		if (nblocks <= 32) {
 8004622:	2920      	cmp	r1, #32
	list->tail = (sys_dnode_t *)list;
 8004624:	e9c2 9901 	strd	r9, r9, [r2, #4]
 8004628:	dc06      	bgt.n	8004638 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
 800462a:	72e0      	strb	r0, [r4, #11]
		sz = _ALIGN4(sz / 4);
 800462c:	089b      	lsrs	r3, r3, #2
 800462e:	3303      	adds	r3, #3
 8004630:	f023 0303 	bic.w	r3, r3, #3
	for (i = 0; i < p->n_levels; i++) {
 8004634:	3001      	adds	r0, #1
 8004636:	e7e2      	b.n	80045fe <z_sys_mem_pool_base_init+0x1e>
			bits += (nblocks + 31)/32;
 8004638:	f111 021f 	adds.w	r2, r1, #31
 800463c:	bf48      	it	mi
 800463e:	f101 023e 	addmi.w	r2, r1, #62	; 0x3e
 8004642:	1152      	asrs	r2, r2, #5
			p->levels[i].bits_p = bits;
 8004644:	f848 5007 	str.w	r5, [r8, r7]
			bits += (nblocks + 31)/32;
 8004648:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800464c:	e7ee      	b.n	800462c <z_sys_mem_pool_base_init+0x4c>
	return (u8_t *)p->buf + lsz * block;
 800464e:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
 8004650:	68e3      	ldr	r3, [r4, #12]
	return (u8_t *)p->buf + lsz * block;
 8004652:	6820      	ldr	r0, [r4, #0]
 8004654:	436a      	muls	r2, r5
 8004656:	1881      	adds	r1, r0, r2
		sys_dlist_append(&p->levels[0].free_list, block);
 8004658:	1d1e      	adds	r6, r3, #4
	node->next = list;
 800465a:	5086      	str	r6, [r0, r2]
	node->prev = list->tail;
 800465c:	689a      	ldr	r2, [r3, #8]
 800465e:	604a      	str	r2, [r1, #4]
	list->tail->next = node;
 8004660:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
 8004662:	4620      	mov	r0, r4
 8004664:	6011      	str	r1, [r2, #0]
	list->tail = node;
 8004666:	6099      	str	r1, [r3, #8]
 8004668:	462a      	mov	r2, r5
 800466a:	2100      	movs	r1, #0
 800466c:	f7ff ff6f 	bl	800454e <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
 8004670:	3501      	adds	r5, #1
 8004672:	e7c7      	b.n	8004604 <z_sys_mem_pool_base_init+0x24>

08004674 <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
 8004674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004678:	b089      	sub	sp, #36	; 0x24
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
 800467a:	7a85      	ldrb	r5, [r0, #10]
{
 800467c:	af00      	add	r7, sp, #0
 800467e:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
 8004682:	00ab      	lsls	r3, r5, #2
 8004684:	3307      	adds	r3, #7
 8004686:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800468a:	ebad 0d03 	sub.w	sp, sp, r3
 800468e:	46e9      	mov	r9, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
 8004690:	464a      	mov	r2, r9
 8004692:	6843      	ldr	r3, [r0, #4]
 8004694:	f842 3904 	str.w	r3, [r2], #-4
{
 8004698:	4604      	mov	r4, r0
	for (i = 0; i < p->n_levels; i++) {
 800469a:	2000      	movs	r0, #0
 800469c:	4285      	cmp	r5, r0
 800469e:	f100 36ff 	add.w	r6, r0, #4294967295	; 0xffffffff
 80046a2:	dd0a      	ble.n	80046ba <z_sys_mem_pool_block_alloc+0x46>
		if (i > 0) {
 80046a4:	b128      	cbz	r0, 80046b2 <z_sys_mem_pool_block_alloc+0x3e>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
 80046a6:	6813      	ldr	r3, [r2, #0]
 80046a8:	089b      	lsrs	r3, r3, #2
 80046aa:	3303      	adds	r3, #3
 80046ac:	f023 0303 	bic.w	r3, r3, #3
 80046b0:	6053      	str	r3, [r2, #4]
		}

		if (lsizes[i] < size) {
 80046b2:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80046b6:	428b      	cmp	r3, r1
 80046b8:	d207      	bcs.n	80046ca <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
 80046ba:	1c73      	adds	r3, r6, #1
 80046bc:	d107      	bne.n	80046ce <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
 80046be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046c0:	2300      	movs	r3, #0
 80046c2:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
 80046c4:	f06f 000b 	mvn.w	r0, #11
 80046c8:	e03f      	b.n	800474a <z_sys_mem_pool_block_alloc+0xd6>
	for (i = 0; i < p->n_levels; i++) {
 80046ca:	3001      	adds	r0, #1
 80046cc:	e7e6      	b.n	800469c <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
 80046ce:	7c20      	ldrb	r0, [r4, #16]
 80046d0:	f010 0001 	ands.w	r0, r0, #1
 80046d4:	d001      	beq.n	80046da <z_sys_mem_pool_block_alloc+0x66>
 80046d6:	f7ff ff73 	bl	80045c0 <pool_irq_lock.isra.2.part.3>
 80046da:	68e2      	ldr	r2, [r4, #12]
	key = pool_irq_lock(p);
 80046dc:	61f8      	str	r0, [r7, #28]
	for (i = alloc_l; i >= 0; i--) {
 80046de:	230c      	movs	r3, #12
 80046e0:	fb03 2306 	mla	r3, r3, r6, r2
	block = sys_dlist_get(&p->levels[l].free_list);
 80046e4:	46b2      	mov	sl, r6
	return list->head == list;
 80046e6:	461a      	mov	r2, r3
 80046e8:	f852 5f04 	ldr.w	r5, [r2, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 80046ec:	4295      	cmp	r5, r2
 80046ee:	d073      	beq.n	80047d8 <z_sys_mem_pool_block_alloc+0x164>
	node->prev->next = node->next;
 80046f0:	e9d5 3100 	ldrd	r3, r1, [r5]
 80046f4:	600b      	str	r3, [r1, #0]
	node->next->prev = node->prev;
 80046f6:	6059      	str	r1, [r3, #4]
	node->next = NULL;
 80046f8:	2300      	movs	r3, #0
	node->prev = NULL;
 80046fa:	e9c5 3300 	strd	r3, r3, [r5]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
 80046fe:	6823      	ldr	r3, [r4, #0]
		data = block_alloc(p, i, lsizes[i]);
 8004700:	f859 202a 	ldr.w	r2, [r9, sl, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
 8004704:	1aeb      	subs	r3, r5, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
 8004706:	4651      	mov	r1, sl
 8004708:	fb93 f2f2 	sdiv	r2, r3, r2
 800470c:	4620      	mov	r0, r4
 800470e:	f7ff ff2c 	bl	800456a <clear_free_bit>
		if (data != NULL) {
 8004712:	eb09 038a 	add.w	r3, r9, sl, lsl #2
 8004716:	f10a 0801 	add.w	r8, sl, #1
 800471a:	61bb      	str	r3, [r7, #24]
			for (from_l = i; from_l < alloc_l; from_l++) {
 800471c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8004720:	42b3      	cmp	r3, r6
 8004722:	db16      	blt.n	8004752 <z_sys_mem_pool_block_alloc+0xde>
	pool_irq_unlock(p, key);
 8004724:	69f9      	ldr	r1, [r7, #28]
 8004726:	7c20      	ldrb	r0, [r4, #16]
 8004728:	f7ff ff53 	bl	80045d2 <pool_irq_unlock.isra.4>
	*data_p = data;
 800472c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800472e:	601d      	str	r5, [r3, #0]
	if (data == NULL) {
 8004730:	2d00      	cmp	r5, #0
 8004732:	d0c7      	beq.n	80046c4 <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	601e      	str	r6, [r3, #0]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	1aed      	subs	r5, r5, r3
 800473c:	f859 3026 	ldr.w	r3, [r9, r6, lsl #2]
 8004740:	fb95 f5f3 	sdiv	r5, r5, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
 8004744:	687b      	ldr	r3, [r7, #4]

	return 0;
 8004746:	2000      	movs	r0, #0
	*block_p = block_num(p, data, lsizes[alloc_l]);
 8004748:	601d      	str	r5, [r3, #0]
}
 800474a:	3724      	adds	r7, #36	; 0x24
 800474c:	46bd      	mov	sp, r7
 800474e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bn = block_num(p, block, lsizes[l]);
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	f853 2b04 	ldr.w	r2, [r3], #4
 8004758:	61bb      	str	r3, [r7, #24]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	1aeb      	subs	r3, r5, r3
 800475e:	fb93 f3f2 	sdiv	r3, r3, r2
		int lbn = 4*bn + i;
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	613b      	str	r3, [r7, #16]
 8004766:	230c      	movs	r3, #12
 8004768:	fb03 f308 	mul.w	r3, r3, r8
 800476c:	617b      	str	r3, [r7, #20]
	for (i = 1; i < 4; i++) {
 800476e:	f04f 0a01 	mov.w	sl, #1
		int lbn = 4*bn + i;
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	eb0a 0b03 	add.w	fp, sl, r3
		int lsz = lsizes[l + 1];
 8004778:	69bb      	ldr	r3, [r7, #24]
		set_free_bit(p, l + 1, lbn);
 800477a:	465a      	mov	r2, fp
		int lsz = lsizes[l + 1];
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	60fb      	str	r3, [r7, #12]
		set_free_bit(p, l + 1, lbn);
 8004780:	4641      	mov	r1, r8
 8004782:	4620      	mov	r0, r4
 8004784:	f7ff fee3 	bl	800454e <set_free_bit>
		if (block_fits(p, l + 1, lbn, lsizes)) {
 8004788:	464b      	mov	r3, r9
 800478a:	465a      	mov	r2, fp
 800478c:	4641      	mov	r1, r8
 800478e:	4620      	mov	r0, r4
 8004790:	f7ff fefa 	bl	8004588 <block_fits>
 8004794:	b168      	cbz	r0, 80047b2 <z_sys_mem_pool_block_alloc+0x13e>
		void *block2 = (lsz * i) + (char *)block;
 8004796:	68fb      	ldr	r3, [r7, #12]
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
 8004798:	6978      	ldr	r0, [r7, #20]
		void *block2 = (lsz * i) + (char *)block;
 800479a:	fb0a f203 	mul.w	r2, sl, r3
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
 800479e:	68e3      	ldr	r3, [r4, #12]
 80047a0:	4403      	add	r3, r0
		void *block2 = (lsz * i) + (char *)block;
 80047a2:	18a9      	adds	r1, r5, r2
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
 80047a4:	1d18      	adds	r0, r3, #4
	node->next = list;
 80047a6:	50a8      	str	r0, [r5, r2]
	node->prev = list->tail;
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	604a      	str	r2, [r1, #4]
	list->tail->next = node;
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	6011      	str	r1, [r2, #0]
	list->tail = node;
 80047b0:	6099      	str	r1, [r3, #8]
	for (i = 1; i < 4; i++) {
 80047b2:	f10a 0a01 	add.w	sl, sl, #1
 80047b6:	f1ba 0f04 	cmp.w	sl, #4
 80047ba:	d1da      	bne.n	8004772 <z_sys_mem_pool_block_alloc+0xfe>
				pool_irq_unlock(p, key);
 80047bc:	7c20      	ldrb	r0, [r4, #16]
 80047be:	69f9      	ldr	r1, [r7, #28]
 80047c0:	f7ff ff07 	bl	80045d2 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
 80047c4:	7c20      	ldrb	r0, [r4, #16]
 80047c6:	f010 0001 	ands.w	r0, r0, #1
 80047ca:	d001      	beq.n	80047d0 <z_sys_mem_pool_block_alloc+0x15c>
 80047cc:	f7ff fef8 	bl	80045c0 <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
 80047d0:	61f8      	str	r0, [r7, #28]
 80047d2:	f108 0801 	add.w	r8, r8, #1
 80047d6:	e7a1      	b.n	800471c <z_sys_mem_pool_block_alloc+0xa8>
	for (i = alloc_l; i >= 0; i--) {
 80047d8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80047dc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80047e0:	f1a3 030c 	sub.w	r3, r3, #12
 80047e4:	f47f af7f 	bne.w	80046e6 <z_sys_mem_pool_block_alloc+0x72>
 80047e8:	2500      	movs	r5, #0
 80047ea:	e79b      	b.n	8004724 <z_sys_mem_pool_block_alloc+0xb0>

080047ec <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 80047ec:	b508      	push	{r3, lr}
 80047ee:	4604      	mov	r4, r0
 80047f0:	4608      	mov	r0, r1
 80047f2:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 80047f4:	461a      	mov	r2, r3
 80047f6:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
 80047f8:	f7ff fc6c 	bl	80040d4 <z_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
 80047fc:	f7fd feb0 	bl	8002560 <z_impl_k_thread_abort>

08004800 <z_arch_printk_char_out>:
}
 8004800:	2000      	movs	r0, #0
 8004802:	4770      	bx	lr

08004804 <print_err>:
{
 8004804:	b570      	push	{r4, r5, r6, lr}
 8004806:	4604      	mov	r4, r0
 8004808:	460d      	mov	r5, r1
	out('E', ctx);
 800480a:	2045      	movs	r0, #69	; 0x45
 800480c:	47a0      	blx	r4
	out('R', ctx);
 800480e:	4629      	mov	r1, r5
 8004810:	2052      	movs	r0, #82	; 0x52
 8004812:	47a0      	blx	r4
	out('R', ctx);
 8004814:	4629      	mov	r1, r5
 8004816:	4623      	mov	r3, r4
 8004818:	2052      	movs	r0, #82	; 0x52
}
 800481a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
 800481e:	4718      	bx	r3

08004820 <z_vprintk>:
{
 8004820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004824:	b08b      	sub	sp, #44	; 0x2c
 8004826:	461c      	mov	r4, r3
	char length_mod = 0;
 8004828:	f04f 0800 	mov.w	r8, #0
 800482c:	1e53      	subs	r3, r2, #1
{
 800482e:	4606      	mov	r6, r0
 8004830:	460f      	mov	r7, r1
 8004832:	9302      	str	r3, [sp, #8]
	int min_width = -1;
 8004834:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
 8004838:	46c1      	mov	r9, r8
			might_format = 0;
 800483a:	2500      	movs	r5, #0
					break;
 800483c:	e005      	b.n	800484a <z_vprintk+0x2a>
		if (!might_format) {
 800483e:	b96d      	cbnz	r5, 800485c <z_vprintk+0x3c>
			if (*fmt != '%') {
 8004840:	2825      	cmp	r0, #37	; 0x25
 8004842:	f000 814f 	beq.w	8004ae4 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
 8004846:	4639      	mov	r1, r7
 8004848:	47b0      	blx	r6
	while (*fmt) {
 800484a:	9b02      	ldr	r3, [sp, #8]
 800484c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8004850:	9302      	str	r3, [sp, #8]
 8004852:	2800      	cmp	r0, #0
 8004854:	d1f3      	bne.n	800483e <z_vprintk+0x1e>
}
 8004856:	b00b      	add	sp, #44	; 0x2c
 8004858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
 800485c:	2864      	cmp	r0, #100	; 0x64
 800485e:	d06e      	beq.n	800493e <z_vprintk+0x11e>
 8004860:	d81a      	bhi.n	8004898 <z_vprintk+0x78>
 8004862:	2839      	cmp	r0, #57	; 0x39
 8004864:	d80a      	bhi.n	800487c <z_vprintk+0x5c>
 8004866:	2831      	cmp	r0, #49	; 0x31
 8004868:	d260      	bcs.n	800492c <z_vprintk+0x10c>
 800486a:	282d      	cmp	r0, #45	; 0x2d
 800486c:	f000 8140 	beq.w	8004af0 <z_vprintk+0x2d0>
 8004870:	2830      	cmp	r0, #48	; 0x30
 8004872:	d04c      	beq.n	800490e <z_vprintk+0xee>
 8004874:	2825      	cmp	r0, #37	; 0x25
 8004876:	d107      	bne.n	8004888 <z_vprintk+0x68>
				out((int)'%', ctx);
 8004878:	4639      	mov	r1, r7
 800487a:	e00b      	b.n	8004894 <z_vprintk+0x74>
			switch (*fmt) {
 800487c:	2858      	cmp	r0, #88	; 0x58
 800487e:	f000 80bb 	beq.w	80049f8 <z_vprintk+0x1d8>
 8004882:	2863      	cmp	r0, #99	; 0x63
 8004884:	f000 812a 	beq.w	8004adc <z_vprintk+0x2bc>
					out((int)'%', ctx);
 8004888:	4639      	mov	r1, r7
 800488a:	2025      	movs	r0, #37	; 0x25
 800488c:	47b0      	blx	r6
					out((int)*fmt, ctx);
 800488e:	9b02      	ldr	r3, [sp, #8]
 8004890:	7818      	ldrb	r0, [r3, #0]
 8004892:	4639      	mov	r1, r7
 8004894:	47b0      	blx	r6
 8004896:	e7d0      	b.n	800483a <z_vprintk+0x1a>
			switch (*fmt) {
 8004898:	2870      	cmp	r0, #112	; 0x70
 800489a:	f000 80a3 	beq.w	80049e4 <z_vprintk+0x1c4>
 800489e:	d811      	bhi.n	80048c4 <z_vprintk+0xa4>
 80048a0:	2869      	cmp	r0, #105	; 0x69
 80048a2:	d04c      	beq.n	800493e <z_vprintk+0x11e>
 80048a4:	286c      	cmp	r0, #108	; 0x6c
 80048a6:	d105      	bne.n	80048b4 <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
 80048a8:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 80048ac:	d12a      	bne.n	8004904 <z_vprintk+0xe4>
					length_mod = 'L';
 80048ae:	f04f 084c 	mov.w	r8, #76	; 0x4c
 80048b2:	e7ca      	b.n	800484a <z_vprintk+0x2a>
			switch (*fmt) {
 80048b4:	2868      	cmp	r0, #104	; 0x68
 80048b6:	d1e7      	bne.n	8004888 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
 80048b8:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
 80048bc:	d122      	bne.n	8004904 <z_vprintk+0xe4>
					length_mod = 'H';
 80048be:	f04f 0848 	mov.w	r8, #72	; 0x48
 80048c2:	e7c2      	b.n	800484a <z_vprintk+0x2a>
			switch (*fmt) {
 80048c4:	2875      	cmp	r0, #117	; 0x75
 80048c6:	d071      	beq.n	80049ac <z_vprintk+0x18c>
 80048c8:	d818      	bhi.n	80048fc <z_vprintk+0xdc>
 80048ca:	2873      	cmp	r0, #115	; 0x73
 80048cc:	d1dc      	bne.n	8004888 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
 80048ce:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
 80048d2:	46ab      	mov	fp, r5
 80048d4:	465b      	mov	r3, fp
 80048d6:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80048da:	2800      	cmp	r0, #0
 80048dc:	f040 80fb 	bne.w	8004ad6 <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
 80048e0:	f1b9 0f03 	cmp.w	r9, #3
 80048e4:	f040 810a 	bne.w	8004afc <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
 80048e8:	1b5d      	subs	r5, r3, r5
 80048ea:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
 80048ee:	2d00      	cmp	r5, #0
 80048f0:	dda3      	ble.n	800483a <z_vprintk+0x1a>
						out(' ', ctx);
 80048f2:	4639      	mov	r1, r7
 80048f4:	2020      	movs	r0, #32
 80048f6:	47b0      	blx	r6
 80048f8:	3d01      	subs	r5, #1
 80048fa:	e7f8      	b.n	80048ee <z_vprintk+0xce>
			switch (*fmt) {
 80048fc:	2878      	cmp	r0, #120	; 0x78
 80048fe:	d07b      	beq.n	80049f8 <z_vprintk+0x1d8>
 8004900:	287a      	cmp	r0, #122	; 0x7a
 8004902:	d1c1      	bne.n	8004888 <z_vprintk+0x68>
				} else if (length_mod == 0) {
 8004904:	f1b8 0f00 	cmp.w	r8, #0
 8004908:	d1be      	bne.n	8004888 <z_vprintk+0x68>
 800490a:	4680      	mov	r8, r0
 800490c:	e79d      	b.n	800484a <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
 800490e:	f1ba 0f00 	cmp.w	sl, #0
 8004912:	da0e      	bge.n	8004932 <z_vprintk+0x112>
 8004914:	f1b9 0f00 	cmp.w	r9, #0
 8004918:	f000 80ed 	beq.w	8004af6 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
 800491c:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
 8004920:	f1b9 0f00 	cmp.w	r9, #0
 8004924:	bf08      	it	eq
 8004926:	f04f 0902 	moveq.w	r9, #2
 800492a:	e78e      	b.n	800484a <z_vprintk+0x2a>
				if (min_width < 0) {
 800492c:	f1ba 0f00 	cmp.w	sl, #0
 8004930:	dbf4      	blt.n	800491c <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
 8004932:	230a      	movs	r3, #10
 8004934:	fb03 0a0a 	mla	sl, r3, sl, r0
 8004938:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
 800493c:	e7f0      	b.n	8004920 <z_vprintk+0x100>
				if (length_mod == 'z') {
 800493e:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
 8004942:	d102      	bne.n	800494a <z_vprintk+0x12a>
					d = va_arg(ap, int);
 8004944:	f854 5b04 	ldr.w	r5, [r4], #4
 8004948:	e01f      	b.n	800498a <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
 800494a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 800494e:	d0f9      	beq.n	8004944 <z_vprintk+0x124>
				} else if (length_mod == 'L') {
 8004950:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
 8004954:	d1f6      	bne.n	8004944 <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
 8004956:	3407      	adds	r4, #7
 8004958:	f024 0407 	bic.w	r4, r4, #7
 800495c:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
 8004960:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
 8004964:	9106      	str	r1, [sp, #24]
 8004966:	f143 0100 	adc.w	r1, r3, #0
 800496a:	9107      	str	r1, [sp, #28]
 800496c:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 8004970:	2100      	movs	r1, #0
 8004972:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004976:	4561      	cmp	r1, ip
 8004978:	bf08      	it	eq
 800497a:	4558      	cmpeq	r0, fp
 800497c:	d204      	bcs.n	8004988 <z_vprintk+0x168>
						print_err(out, ctx);
 800497e:	4639      	mov	r1, r7
 8004980:	4630      	mov	r0, r6
 8004982:	f7ff ff3f 	bl	8004804 <print_err>
						break;
 8004986:	e758      	b.n	800483a <z_vprintk+0x1a>
					d = lld;
 8004988:	4615      	mov	r5, r2
				if (d < 0) {
 800498a:	2d00      	cmp	r5, #0
 800498c:	da05      	bge.n	800499a <z_vprintk+0x17a>
					out((int)'-', ctx);
 800498e:	4639      	mov	r1, r7
 8004990:	202d      	movs	r0, #45	; 0x2d
 8004992:	47b0      	blx	r6
					d = -d;
 8004994:	426d      	negs	r5, r5
					min_width--;
 8004996:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
 800499a:	f8cd a000 	str.w	sl, [sp]
 800499e:	464b      	mov	r3, r9
 80049a0:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
 80049a2:	4639      	mov	r1, r7
 80049a4:	4630      	mov	r0, r6
 80049a6:	f7fb fe17 	bl	80005d8 <_printk_dec_ulong>
				break;
 80049aa:	e746      	b.n	800483a <z_vprintk+0x1a>
				if (length_mod == 'z') {
 80049ac:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
 80049b0:	d102      	bne.n	80049b8 <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
 80049b2:	f854 2b04 	ldr.w	r2, [r4], #4
 80049b6:	e011      	b.n	80049dc <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
 80049b8:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 80049bc:	d0f9      	beq.n	80049b2 <z_vprintk+0x192>
				} else if (length_mod == 'L') {
 80049be:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
 80049c2:	d1f6      	bne.n	80049b2 <z_vprintk+0x192>
					unsigned long long llu =
 80049c4:	3407      	adds	r4, #7
 80049c6:	f024 0407 	bic.w	r4, r4, #7
 80049ca:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
 80049ce:	2100      	movs	r1, #0
 80049d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049d4:	4299      	cmp	r1, r3
 80049d6:	bf08      	it	eq
 80049d8:	4290      	cmpeq	r0, r2
 80049da:	d3d0      	bcc.n	800497e <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
 80049dc:	f8cd a000 	str.w	sl, [sp]
 80049e0:	464b      	mov	r3, r9
 80049e2:	e7de      	b.n	80049a2 <z_vprintk+0x182>
				  out('0', ctx);
 80049e4:	4639      	mov	r1, r7
 80049e6:	2030      	movs	r0, #48	; 0x30
 80049e8:	47b0      	blx	r6
				  out('x', ctx);
 80049ea:	4639      	mov	r1, r7
 80049ec:	2078      	movs	r0, #120	; 0x78
 80049ee:	47b0      	blx	r6
				  min_width = 8;
 80049f0:	f04f 0a08 	mov.w	sl, #8
				  padding = PAD_ZERO_BEFORE;
 80049f4:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
 80049f8:	9b02      	ldr	r3, [sp, #8]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b70      	cmp	r3, #112	; 0x70
 80049fe:	d104      	bne.n	8004a0a <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
 8004a00:	f854 3b04 	ldr.w	r3, [r4], #4
 8004a04:	9304      	str	r3, [sp, #16]
 8004a06:	2300      	movs	r3, #0
 8004a08:	e00d      	b.n	8004a26 <z_vprintk+0x206>
				} else if (length_mod == 'l') {
 8004a0a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 8004a0e:	d0f7      	beq.n	8004a00 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
 8004a10:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
 8004a14:	d1f4      	bne.n	8004a00 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
 8004a16:	3407      	adds	r4, #7
 8004a18:	f024 0307 	bic.w	r3, r4, #7
 8004a1c:	461c      	mov	r4, r3
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f854 2b08 	ldr.w	r2, [r4], #8
 8004a24:	9204      	str	r2, [sp, #16]
	int digits = 0;
 8004a26:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
 8004a28:	2210      	movs	r2, #16
	int digits = 0;
 8004a2a:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
 8004a2c:	9105      	str	r1, [sp, #20]
	int shift = sizeof(num) * 8;
 8004a2e:	f04f 0b40 	mov.w	fp, #64	; 0x40
		shift -= 4;
 8004a32:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
 8004a36:	9804      	ldr	r0, [sp, #16]
 8004a38:	f1cb 0c20 	rsb	ip, fp, #32
 8004a3c:	f1ab 0120 	sub.w	r1, fp, #32
 8004a40:	fa20 f00b 	lsr.w	r0, r0, fp
 8004a44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004a48:	ea40 000c 	orr.w	r0, r0, ip
 8004a4c:	fa23 f101 	lsr.w	r1, r3, r1
 8004a50:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
 8004a52:	f010 000f 	ands.w	r0, r0, #15
 8004a56:	d108      	bne.n	8004a6a <z_vprintk+0x24a>
 8004a58:	9905      	ldr	r1, [sp, #20]
 8004a5a:	b911      	cbnz	r1, 8004a62 <z_vprintk+0x242>
 8004a5c:	f1bb 0f00 	cmp.w	fp, #0
 8004a60:	d124      	bne.n	8004aac <z_vprintk+0x28c>
			nibble += nibble > 9 ? 87 : 48;
 8004a62:	2130      	movs	r1, #48	; 0x30
 8004a64:	e005      	b.n	8004a72 <z_vprintk+0x252>
			found_largest_digit = 1;
 8004a66:	9505      	str	r5, [sp, #20]
 8004a68:	e7e3      	b.n	8004a32 <z_vprintk+0x212>
			nibble += nibble > 9 ? 87 : 48;
 8004a6a:	2809      	cmp	r0, #9
 8004a6c:	bf8c      	ite	hi
 8004a6e:	2157      	movhi	r1, #87	; 0x57
 8004a70:	2130      	movls	r1, #48	; 0x30
 8004a72:	4408      	add	r0, r1
			out((int)nibble, ctx);
 8004a74:	b240      	sxtb	r0, r0
 8004a76:	4639      	mov	r1, r7
 8004a78:	9308      	str	r3, [sp, #32]
 8004a7a:	9205      	str	r2, [sp, #20]
 8004a7c:	47b0      	blx	r6
			digits++;
 8004a7e:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
 8004a80:	9a05      	ldr	r2, [sp, #20]
			digits++;
 8004a82:	3301      	adds	r3, #1
 8004a84:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
 8004a86:	9b08      	ldr	r3, [sp, #32]
 8004a88:	f1bb 0f00 	cmp.w	fp, #0
 8004a8c:	d1eb      	bne.n	8004a66 <z_vprintk+0x246>
	if (padding == PAD_SPACE_AFTER) {
 8004a8e:	f1b9 0f03 	cmp.w	r9, #3
 8004a92:	f47f aed2 	bne.w	800483a <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
 8004a96:	9b03      	ldr	r3, [sp, #12]
 8004a98:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
 8004a9c:	2d00      	cmp	r5, #0
 8004a9e:	f77f aecc 	ble.w	800483a <z_vprintk+0x1a>
			out(' ', ctx);
 8004aa2:	4639      	mov	r1, r7
 8004aa4:	2020      	movs	r0, #32
 8004aa6:	47b0      	blx	r6
 8004aa8:	3d01      	subs	r5, #1
 8004aaa:	e7f7      	b.n	8004a9c <z_vprintk+0x27c>
		if (remaining-- <= min_width) {
 8004aac:	1e51      	subs	r1, r2, #1
 8004aae:	4592      	cmp	sl, r2
 8004ab0:	9108      	str	r1, [sp, #32]
 8004ab2:	db07      	blt.n	8004ac4 <z_vprintk+0x2a4>
			if (padding == PAD_ZERO_BEFORE) {
 8004ab4:	f1b9 0f01 	cmp.w	r9, #1
 8004ab8:	d106      	bne.n	8004ac8 <z_vprintk+0x2a8>
 8004aba:	9309      	str	r3, [sp, #36]	; 0x24
				out('0', ctx);
 8004abc:	4639      	mov	r1, r7
 8004abe:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
 8004ac0:	47b0      	blx	r6
 8004ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
					x = va_arg(ap, unsigned int);
 8004ac4:	9a08      	ldr	r2, [sp, #32]
 8004ac6:	e7b4      	b.n	8004a32 <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
 8004ac8:	f1b9 0f02 	cmp.w	r9, #2
 8004acc:	d1fa      	bne.n	8004ac4 <z_vprintk+0x2a4>
 8004ace:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
 8004ad0:	4639      	mov	r1, r7
 8004ad2:	2020      	movs	r0, #32
 8004ad4:	e7f4      	b.n	8004ac0 <z_vprintk+0x2a0>
					out((int)(*s++), ctx);
 8004ad6:	4639      	mov	r1, r7
 8004ad8:	47b0      	blx	r6
 8004ada:	e6fb      	b.n	80048d4 <z_vprintk+0xb4>
				out(c, ctx);
 8004adc:	4639      	mov	r1, r7
 8004ade:	f854 0b04 	ldr.w	r0, [r4], #4
 8004ae2:	e6d7      	b.n	8004894 <z_vprintk+0x74>
				length_mod = 0;
 8004ae4:	46a8      	mov	r8, r5
				padding = PAD_NONE;
 8004ae6:	46a9      	mov	r9, r5
				min_width = -1;
 8004ae8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
 8004aec:	2501      	movs	r5, #1
 8004aee:	e6ac      	b.n	800484a <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
 8004af0:	f04f 0903 	mov.w	r9, #3
 8004af4:	e6a9      	b.n	800484a <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
 8004af6:	f04f 0901 	mov.w	r9, #1
 8004afa:	e6a6      	b.n	800484a <z_vprintk+0x2a>
			might_format = 0;
 8004afc:	4605      	mov	r5, r0
		++fmt;
 8004afe:	e6a4      	b.n	800484a <z_vprintk+0x2a>

08004b00 <printk>:
{
 8004b00:	b40f      	push	{r0, r1, r2, r3}
 8004b02:	b507      	push	{r0, r1, r2, lr}
 8004b04:	a904      	add	r1, sp, #16
 8004b06:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 8004b0a:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
 8004b0c:	f7fb fdb6 	bl	800067c <vprintk>
}
 8004b10:	b003      	add	sp, #12
 8004b12:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b16:	b004      	add	sp, #16
 8004b18:	4770      	bx	lr

08004b1a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8004b1a:	4770      	bx	lr

08004b1c <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
 8004b1c:	2300      	movs	r3, #0
	list->head = NULL;
 8004b1e:	e9c0 3300 	strd	r3, r3, [r0]
}
 8004b22:	4770      	bx	lr

08004b24 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
 8004b24:	6803      	ldr	r3, [r0, #0]
 8004b26:	b923      	cbnz	r3, 8004b32 <log_list_add_tail+0xe>
		list->head = msg;
 8004b28:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
 8004b2a:	2300      	movs	r3, #0
	list->tail = msg;
 8004b2c:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
 8004b2e:	600b      	str	r3, [r1, #0]
}
 8004b30:	4770      	bx	lr
		list->tail->next = msg;
 8004b32:	6843      	ldr	r3, [r0, #4]
 8004b34:	6019      	str	r1, [r3, #0]
 8004b36:	e7f8      	b.n	8004b2a <log_list_add_tail+0x6>

08004b38 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
 8004b38:	6800      	ldr	r0, [r0, #0]
 8004b3a:	4770      	bx	lr

08004b3c <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
 8004b3c:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
 8004b3e:	b10b      	cbz	r3, 8004b44 <log_list_head_get+0x8>
		list->head = list->head->next;
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	4770      	bx	lr

08004b48 <timestamp_get>:
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
 8004b48:	f001 ba0c 	b.w	8005f64 <z_impl_k_uptime_get_32>

08004b4c <dummy_timestamp>:
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	4770      	bx	lr

08004b50 <log_0>:
{
 8004b50:	b538      	push	{r3, r4, r5, lr}
 8004b52:	4605      	mov	r5, r0
 8004b54:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
 8004b56:	f7fb fdb5 	bl	80006c4 <z_log_msg_std_alloc>

	if (msg != NULL) {
 8004b5a:	b128      	cbz	r0, 8004b68 <log_0+0x18>
		msg->str = str;
 8004b5c:	6105      	str	r5, [r0, #16]
	msg_finalize(msg, src_level);
 8004b5e:	4621      	mov	r1, r4
}
 8004b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	msg_finalize(msg, src_level);
 8004b64:	f7fb bf58 	b.w	8000a18 <msg_finalize>
}
 8004b68:	bd38      	pop	{r3, r4, r5, pc}

08004b6a <log_1>:
{
 8004b6a:	b570      	push	{r4, r5, r6, lr}
 8004b6c:	4604      	mov	r4, r0
 8004b6e:	460e      	mov	r6, r1
 8004b70:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 8004b72:	f7fb fda7 	bl	80006c4 <z_log_msg_std_alloc>

	if (msg != NULL) {
 8004b76:	b158      	cbz	r0, 8004b90 <log_1+0x26>
		msg->str = str;
 8004b78:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
 8004b7a:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
 8004b7c:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f362 1407 	bfi	r4, r2, #4, #4
 8004b84:	7244      	strb	r4, [r0, #9]
	msg_finalize(msg, src_level);
 8004b86:	4629      	mov	r1, r5
}
 8004b88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	msg_finalize(msg, src_level);
 8004b8c:	f7fb bf44 	b.w	8000a18 <msg_finalize>
}
 8004b90:	bd70      	pop	{r4, r5, r6, pc}

08004b92 <log_2>:
{
 8004b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b96:	4605      	mov	r5, r0
 8004b98:	4688      	mov	r8, r1
 8004b9a:	4617      	mov	r7, r2
 8004b9c:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 8004b9e:	f7fb fd91 	bl	80006c4 <z_log_msg_std_alloc>

	if (msg != NULL) {
 8004ba2:	b160      	cbz	r0, 8004bbe <log_2+0x2c>
		msg->str = str;
 8004ba4:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
 8004ba6:	7a45      	ldrb	r5, [r0, #9]
 8004ba8:	2302      	movs	r3, #2
 8004baa:	f363 1507 	bfi	r5, r3, #4, #4
 8004bae:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
 8004bb0:	e9c0 8705 	strd	r8, r7, [r0, #20]
	msg_finalize(msg, src_level);
 8004bb4:	4631      	mov	r1, r6
}
 8004bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	msg_finalize(msg, src_level);
 8004bba:	f7fb bf2d 	b.w	8000a18 <msg_finalize>
}
 8004bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004bc2 <log_3>:
{
 8004bc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bc6:	4605      	mov	r5, r0
 8004bc8:	4689      	mov	r9, r1
 8004bca:	4690      	mov	r8, r2
 8004bcc:	461f      	mov	r7, r3
 8004bce:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
 8004bd2:	f7fb fd77 	bl	80006c4 <z_log_msg_std_alloc>

	if (msg != NULL) {
 8004bd6:	b168      	cbz	r0, 8004bf4 <log_3+0x32>
		msg->str = str;
 8004bd8:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
 8004bda:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
		msg->payload.single.args[2] = arg3;
 8004bdc:	61c7      	str	r7, [r0, #28]
		msg->hdr.params.std.nargs = 3U;
 8004bde:	2303      	movs	r3, #3
 8004be0:	f363 1507 	bfi	r5, r3, #4, #4
 8004be4:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[1] = arg2;
 8004be6:	e9c0 9805 	strd	r9, r8, [r0, #20]
	msg_finalize(msg, src_level);
 8004bea:	4631      	mov	r1, r6
}
 8004bec:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	msg_finalize(msg, src_level);
 8004bf0:	f7fb bf12 	b.w	8000a18 <msg_finalize>
}
 8004bf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004bf8 <log_n>:
{
 8004bf8:	b510      	push	{r4, lr}
 8004bfa:	461c      	mov	r4, r3
	struct log_msg *msg = log_msg_create_n(str, args, narg);
 8004bfc:	f000 f89b 	bl	8004d36 <log_msg_create_n>
	if (msg == NULL) {
 8004c00:	b120      	cbz	r0, 8004c0c <log_n+0x14>
	msg_finalize(msg, src_level);
 8004c02:	4621      	mov	r1, r4
}
 8004c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	msg_finalize(msg, src_level);
 8004c08:	f7fb bf06 	b.w	8000a18 <msg_finalize>
}
 8004c0c:	bd10      	pop	{r4, pc}

08004c0e <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
 8004c0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c12:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
 8004c14:	8903      	ldrh	r3, [r0, #8]
{
 8004c16:	f89d 7020 	ldrb.w	r7, [sp, #32]
	u32_t available_len = msg->hdr.params.hexdump.length;
 8004c1a:	089b      	lsrs	r3, r3, #2
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
 8004c1c:	42a3      	cmp	r3, r4
{
 8004c1e:	460e      	mov	r6, r1
	if (offset >= available_len) {
 8004c20:	d803      	bhi.n	8004c2a <log_msg_hexdump_data_op+0x1c>
		*length = 0;
 8004c22:	2300      	movs	r3, #0
 8004c24:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
 8004c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
 8004c2a:	6811      	ldr	r1, [r2, #0]
 8004c2c:	4421      	add	r1, r4
 8004c2e:	4299      	cmp	r1, r3
		*length = available_len - offset;
 8004c30:	bf84      	itt	hi
 8004c32:	1b19      	subhi	r1, r3, r4
 8004c34:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 8004c36:	2b0c      	cmp	r3, #12
	req_len = *length;
 8004c38:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 8004c3c:	d928      	bls.n	8004c90 <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
 8004c3e:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
 8004c40:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
 8004c44:	d82b      	bhi.n	8004c9e <log_msg_hexdump_data_op+0x90>
		head_data = msg->payload.ext.data.bytes;
 8004c46:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
 8004c48:	2308      	movs	r3, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 8004c4a:	454b      	cmp	r3, r9
 8004c4c:	bf28      	it	cs
 8004c4e:	464b      	movcs	r3, r9
 8004c50:	461d      	mov	r5, r3
		if (put_op) {
 8004c52:	4420      	add	r0, r4
			(void)memcpy(&head_data[offset], data, cpy_len);
 8004c54:	461a      	mov	r2, r3
		if (put_op) {
 8004c56:	b1ff      	cbz	r7, 8004c98 <log_msg_hexdump_data_op+0x8a>
			(void)memcpy(&head_data[offset], data, cpy_len);
 8004c58:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
 8004c5a:	f000 fbf2 	bl	8005442 <memcpy>
		req_len -= cpy_len;
 8004c5e:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
 8004c62:	442e      	add	r6, r5
	while (req_len > 0) {
 8004c64:	f1b9 0f00 	cmp.w	r9, #0
 8004c68:	d0dd      	beq.n	8004c26 <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
 8004c6a:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 8004c6e:	454d      	cmp	r5, r9
 8004c70:	bf28      	it	cs
 8004c72:	464d      	movcs	r5, r9
		if (put_op) {
 8004c74:	1d20      	adds	r0, r4, #4
 8004c76:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
 8004c78:	462a      	mov	r2, r5
		if (put_op) {
 8004c7a:	b1bf      	cbz	r7, 8004cac <log_msg_hexdump_data_op+0x9e>
			(void)memcpy(&cont->payload.bytes[offset],
 8004c7c:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
 8004c7e:	f000 fbe0 	bl	8005442 <memcpy>
		req_len -= cpy_len;
 8004c82:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
 8004c86:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
 8004c8a:	442e      	add	r6, r5
		offset = 0;
 8004c8c:	2400      	movs	r4, #0
 8004c8e:	e7e9      	b.n	8004c64 <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
 8004c90:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
 8004c92:	f04f 0800 	mov.w	r8, #0
 8004c96:	e7d8      	b.n	8004c4a <log_msg_hexdump_data_op+0x3c>
			(void)memcpy(data, &head_data[offset], cpy_len);
 8004c98:	4601      	mov	r1, r0
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	e7dd      	b.n	8004c5a <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
 8004c9e:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
 8004ca0:	2c1b      	cmp	r4, #27
 8004ca2:	d9df      	bls.n	8004c64 <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
 8004ca4:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
 8004ca8:	3c1c      	subs	r4, #28
 8004caa:	e7f9      	b.n	8004ca0 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(data, &cont->payload.bytes[offset],
 8004cac:	4601      	mov	r1, r0
 8004cae:	4630      	mov	r0, r6
 8004cb0:	e7e5      	b.n	8004c7e <log_msg_hexdump_data_op+0x70>

08004cb2 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8004cb2:	3004      	adds	r0, #4
 8004cb4:	f3bf 8f5b 	dmb	ish
 8004cb8:	e850 3f00 	ldrex	r3, [r0]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	e840 3200 	strex	r2, r3, [r0]
 8004cc2:	2a00      	cmp	r2, #0
 8004cc4:	d1f8      	bne.n	8004cb8 <log_msg_get+0x6>
 8004cc6:	f3bf 8f5b 	dmb	ish
}
 8004cca:	4770      	bx	lr

08004ccc <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
 8004ccc:	7a40      	ldrb	r0, [r0, #9]
}
 8004cce:	0900      	lsrs	r0, r0, #4
 8004cd0:	4770      	bx	lr

08004cd2 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
 8004cd2:	7a43      	ldrb	r3, [r0, #9]
 8004cd4:	091b      	lsrs	r3, r3, #4
 8004cd6:	428b      	cmp	r3, r1
 8004cd8:	d916      	bls.n	8004d08 <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
 8004cda:	2b03      	cmp	r3, #3
 8004cdc:	d803      	bhi.n	8004ce6 <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
 8004cde:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004ce2:	6948      	ldr	r0, [r1, #20]
 8004ce4:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
 8004ce6:	2901      	cmp	r1, #1
 8004ce8:	d803      	bhi.n	8004cf2 <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
 8004cea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004cee:	6988      	ldr	r0, [r1, #24]
 8004cf0:	4770      	bx	lr
	cont = msg->payload.ext.next;
 8004cf2:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
 8004cf4:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
 8004cf6:	2906      	cmp	r1, #6
 8004cf8:	d803      	bhi.n	8004d02 <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
 8004cfa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004cfe:	6848      	ldr	r0, [r1, #4]
 8004d00:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
 8004d02:	3907      	subs	r1, #7
		cont = cont->next;
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	e7f6      	b.n	8004cf6 <log_msg_arg_get+0x24>
		return 0;
 8004d08:	2000      	movs	r0, #0
}
 8004d0a:	4770      	bx	lr

08004d0c <log_msg_put>:
{
 8004d0c:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8004d0e:	1d02      	adds	r2, r0, #4
 8004d10:	f3bf 8f5b 	dmb	ish
 8004d14:	e852 1f00 	ldrex	r1, [r2]
 8004d18:	3901      	subs	r1, #1
 8004d1a:	e842 1c00 	strex	ip, r1, [r2]
 8004d1e:	f1bc 0f00 	cmp.w	ip, #0
 8004d22:	d1f7      	bne.n	8004d14 <log_msg_put+0x8>
 8004d24:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	b90b      	cbnz	r3, 8004d30 <log_msg_put+0x24>
		msg_free(msg);
 8004d2c:	f7fb bf42 	b.w	8000bb4 <msg_free>
}
 8004d30:	4770      	bx	lr

08004d32 <log_msg_str_get>:
}
 8004d32:	6900      	ldr	r0, [r0, #16]
 8004d34:	4770      	bx	lr

08004d36 <log_msg_create_n>:
{
 8004d36:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3a:	4682      	mov	sl, r0
 8004d3c:	4688      	mov	r8, r1
 8004d3e:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 8004d40:	f7fb ff26 	bl	8000b90 <log_msg_chunk_alloc>
	if (msg != NULL) {
 8004d44:	4604      	mov	r4, r0
 8004d46:	b330      	cbz	r0, 8004d96 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
 8004d48:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
 8004d4a:	2600      	movs	r6, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
 8004d4c:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
 8004d4e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8004d50:	8106      	strh	r6, [r0, #8]
 8004d52:	d909      	bls.n	8004d68 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
 8004d54:	2202      	movs	r2, #2
 8004d56:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
 8004d58:	f1a5 0902 	sub.w	r9, r5, #2
	next = &msg->payload.ext.next;
 8004d5c:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
 8004d60:	6146      	str	r6, [r0, #20]
	while (n > 0) {
 8004d62:	f1b9 0f00 	cmp.w	r9, #0
 8004d66:	dc0e      	bgt.n	8004d86 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
 8004d68:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
 8004d6a:	f8c4 a010 	str.w	sl, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
 8004d6e:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
 8004d72:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
 8004d74:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
 8004d76:	d818      	bhi.n	8004daa <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
 8004d78:	00aa      	lsls	r2, r5, #2
 8004d7a:	4641      	mov	r1, r8
 8004d7c:	f104 0014 	add.w	r0, r4, #20
 8004d80:	f000 fb5f 	bl	8005442 <memcpy>
		nargs  = 0U;
 8004d84:	e007      	b.n	8004d96 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
 8004d86:	f7fb ff03 	bl	8000b90 <log_msg_chunk_alloc>
		if (cont == NULL) {
 8004d8a:	4607      	mov	r7, r0
 8004d8c:	b930      	cbnz	r0, 8004d9c <log_msg_create_n+0x66>
			msg_free(msg);
 8004d8e:	4620      	mov	r0, r4
 8004d90:	f7fb ff10 	bl	8000bb4 <msg_free>
			return NULL;
 8004d94:	463c      	mov	r4, r7
}
 8004d96:	4620      	mov	r0, r4
 8004d98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
 8004d9c:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
 8004da0:	f1a9 0907 	sub.w	r9, r9, #7
 8004da4:	6006      	str	r6, [r0, #0]
		next = &cont->next;
 8004da6:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
 8004da8:	e7db      	b.n	8004d62 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
 8004daa:	4641      	mov	r1, r8
 8004dac:	2208      	movs	r2, #8
 8004dae:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
 8004db2:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
 8004db4:	f000 fb45 	bl	8005442 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
 8004db8:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
 8004dba:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
 8004dbe:	2d07      	cmp	r5, #7
 8004dc0:	462e      	mov	r6, r5
 8004dc2:	bf28      	it	cs
 8004dc4:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
 8004dc6:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8004dca:	4641      	mov	r1, r8
 8004dcc:	1d38      	adds	r0, r7, #4
 8004dce:	464a      	mov	r2, r9
 8004dd0:	f000 fb37 	bl	8005442 <memcpy>
	while (nargs != 0U) {
 8004dd4:	1bad      	subs	r5, r5, r6
		args += cpy_args;
 8004dd6:	44c8      	add	r8, r9
		cont = cont->next;
 8004dd8:	683f      	ldr	r7, [r7, #0]
	while (nargs != 0U) {
 8004dda:	d1f0      	bne.n	8004dbe <log_msg_create_n+0x88>
 8004ddc:	e7db      	b.n	8004d96 <log_msg_create_n+0x60>

08004dde <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
 8004dde:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
 8004de0:	2400      	movs	r4, #0
 8004de2:	9400      	str	r4, [sp, #0]
 8004de4:	f7ff ff13 	bl	8004c0e <log_msg_hexdump_data_op>
}
 8004de8:	b002      	add	sp, #8
 8004dea:	bd10      	pop	{r4, pc}

08004dec <buffer_write>:
{
 8004dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dee:	4606      	mov	r6, r0
 8004df0:	460d      	mov	r5, r1
 8004df2:	4614      	mov	r4, r2
 8004df4:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
 8004df6:	4621      	mov	r1, r4
 8004df8:	4628      	mov	r0, r5
 8004dfa:	463a      	mov	r2, r7
 8004dfc:	47b0      	blx	r6
	} while (len != 0);
 8004dfe:	1a24      	subs	r4, r4, r0
		buf += processed;
 8004e00:	4405      	add	r5, r0
	} while (len != 0);
 8004e02:	d1f8      	bne.n	8004df6 <buffer_write+0xa>
}
 8004e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004e06 <std_print>:
{
 8004e06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e0a:	b08e      	sub	sp, #56	; 0x38
 8004e0c:	af0e      	add	r7, sp, #56	; 0x38
 8004e0e:	4681      	mov	r9, r0
 8004e10:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
 8004e12:	f7ff ff8e 	bl	8004d32 <log_msg_str_get>
 8004e16:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
 8004e18:	4648      	mov	r0, r9
 8004e1a:	f7ff ff57 	bl	8004ccc <log_msg_nargs_get>
	u32_t *args = alloca(sizeof(u32_t)*nargs);
 8004e1e:	0083      	lsls	r3, r0, #2
 8004e20:	3307      	adds	r3, #7
 8004e22:	f023 0307 	bic.w	r3, r3, #7
 8004e26:	ebad 0d03 	sub.w	sp, sp, r3
	u32_t nargs = log_msg_nargs_get(msg);
 8004e2a:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
 8004e2c:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
 8004e2e:	f04f 0800 	mov.w	r8, #0
 8004e32:	45d0      	cmp	r8, sl
 8004e34:	d116      	bne.n	8004e64 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
 8004e36:	4648      	mov	r0, r9
 8004e38:	f7ff ff48 	bl	8004ccc <log_msg_nargs_get>
 8004e3c:	280f      	cmp	r0, #15
 8004e3e:	d81e      	bhi.n	8004e7e <std_print+0x78>
 8004e40:	e8df f010 	tbh	[pc, r0, lsl #1]
 8004e44:	00200019 	.word	0x00200019
 8004e48:	002d0026 	.word	0x002d0026
 8004e4c:	00410036 	.word	0x00410036
 8004e50:	005d004e 	.word	0x005d004e
 8004e54:	0081006e 	.word	0x0081006e
 8004e58:	00ad0096 	.word	0x00ad0096
 8004e5c:	00e100c6 	.word	0x00e100c6
 8004e60:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
 8004e64:	4641      	mov	r1, r8
 8004e66:	4648      	mov	r0, r9
 8004e68:	f7ff ff33 	bl	8004cd2 <log_msg_arg_get>
 8004e6c:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
	for (i = 0; i < nargs; i++) {
 8004e70:	f108 0801 	add.w	r8, r8, #1
 8004e74:	e7dd      	b.n	8004e32 <std_print+0x2c>
		print_formatted(log_output, str);
 8004e76:	4631      	mov	r1, r6
 8004e78:	4628      	mov	r0, r5
 8004e7a:	f7fb fecd 	bl	8000c18 <print_formatted>
}
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
 8004e84:	6822      	ldr	r2, [r4, #0]
 8004e86:	4631      	mov	r1, r6
 8004e88:	4628      	mov	r0, r5
 8004e8a:	f7fb fec5 	bl	8000c18 <print_formatted>
		break;
 8004e8e:	e7f6      	b.n	8004e7e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
 8004e90:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004e94:	4631      	mov	r1, r6
 8004e96:	4628      	mov	r0, r5
 8004e98:	f7fb febe 	bl	8000c18 <print_formatted>
		break;
 8004e9c:	e7ef      	b.n	8004e7e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
 8004e9e:	68a3      	ldr	r3, [r4, #8]
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004ea6:	4631      	mov	r1, r6
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	f7fb feb5 	bl	8000c18 <print_formatted>
		break;
 8004eae:	e7e6      	b.n	8004e7e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8004eb0:	68e3      	ldr	r3, [r4, #12]
 8004eb2:	9301      	str	r3, [sp, #4]
 8004eb4:	68a3      	ldr	r3, [r4, #8]
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004ebc:	4631      	mov	r1, r6
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	f7fb feaa 	bl	8000c18 <print_formatted>
		break;
 8004ec4:	e7db      	b.n	8004e7e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8004ec6:	6923      	ldr	r3, [r4, #16]
 8004ec8:	9302      	str	r3, [sp, #8]
 8004eca:	68e3      	ldr	r3, [r4, #12]
 8004ecc:	9301      	str	r3, [sp, #4]
 8004ece:	68a3      	ldr	r3, [r4, #8]
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004ed6:	4631      	mov	r1, r6
 8004ed8:	4628      	mov	r0, r5
 8004eda:	f7fb fe9d 	bl	8000c18 <print_formatted>
		break;
 8004ede:	e7ce      	b.n	8004e7e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8004ee0:	6963      	ldr	r3, [r4, #20]
 8004ee2:	9303      	str	r3, [sp, #12]
 8004ee4:	6923      	ldr	r3, [r4, #16]
 8004ee6:	9302      	str	r3, [sp, #8]
 8004ee8:	68e3      	ldr	r3, [r4, #12]
 8004eea:	9301      	str	r3, [sp, #4]
 8004eec:	68a3      	ldr	r3, [r4, #8]
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004ef4:	4631      	mov	r1, r6
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	f7fb fe8e 	bl	8000c18 <print_formatted>
		break;
 8004efc:	e7bf      	b.n	8004e7e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8004efe:	69a3      	ldr	r3, [r4, #24]
 8004f00:	9304      	str	r3, [sp, #16]
 8004f02:	6963      	ldr	r3, [r4, #20]
 8004f04:	9303      	str	r3, [sp, #12]
 8004f06:	6923      	ldr	r3, [r4, #16]
 8004f08:	9302      	str	r3, [sp, #8]
 8004f0a:	68e3      	ldr	r3, [r4, #12]
 8004f0c:	9301      	str	r3, [sp, #4]
 8004f0e:	68a3      	ldr	r3, [r4, #8]
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004f16:	4631      	mov	r1, r6
 8004f18:	4628      	mov	r0, r5
 8004f1a:	f7fb fe7d 	bl	8000c18 <print_formatted>
		break;
 8004f1e:	e7ae      	b.n	8004e7e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8004f20:	69e3      	ldr	r3, [r4, #28]
 8004f22:	9305      	str	r3, [sp, #20]
 8004f24:	69a3      	ldr	r3, [r4, #24]
 8004f26:	9304      	str	r3, [sp, #16]
 8004f28:	6963      	ldr	r3, [r4, #20]
 8004f2a:	9303      	str	r3, [sp, #12]
 8004f2c:	6923      	ldr	r3, [r4, #16]
 8004f2e:	9302      	str	r3, [sp, #8]
 8004f30:	68e3      	ldr	r3, [r4, #12]
 8004f32:	9301      	str	r3, [sp, #4]
 8004f34:	68a3      	ldr	r3, [r4, #8]
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004f3c:	4631      	mov	r1, r6
 8004f3e:	4628      	mov	r0, r5
 8004f40:	f7fb fe6a 	bl	8000c18 <print_formatted>
		break;
 8004f44:	e79b      	b.n	8004e7e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8004f46:	6a23      	ldr	r3, [r4, #32]
 8004f48:	9306      	str	r3, [sp, #24]
 8004f4a:	69e3      	ldr	r3, [r4, #28]
 8004f4c:	9305      	str	r3, [sp, #20]
 8004f4e:	69a3      	ldr	r3, [r4, #24]
 8004f50:	9304      	str	r3, [sp, #16]
 8004f52:	6963      	ldr	r3, [r4, #20]
 8004f54:	9303      	str	r3, [sp, #12]
 8004f56:	6923      	ldr	r3, [r4, #16]
 8004f58:	9302      	str	r3, [sp, #8]
 8004f5a:	68e3      	ldr	r3, [r4, #12]
 8004f5c:	9301      	str	r3, [sp, #4]
 8004f5e:	68a3      	ldr	r3, [r4, #8]
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004f66:	4631      	mov	r1, r6
 8004f68:	4628      	mov	r0, r5
 8004f6a:	f7fb fe55 	bl	8000c18 <print_formatted>
		break;
 8004f6e:	e786      	b.n	8004e7e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8004f70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f72:	9307      	str	r3, [sp, #28]
 8004f74:	6a23      	ldr	r3, [r4, #32]
 8004f76:	9306      	str	r3, [sp, #24]
 8004f78:	69e3      	ldr	r3, [r4, #28]
 8004f7a:	9305      	str	r3, [sp, #20]
 8004f7c:	69a3      	ldr	r3, [r4, #24]
 8004f7e:	9304      	str	r3, [sp, #16]
 8004f80:	6963      	ldr	r3, [r4, #20]
 8004f82:	9303      	str	r3, [sp, #12]
 8004f84:	6923      	ldr	r3, [r4, #16]
 8004f86:	9302      	str	r3, [sp, #8]
 8004f88:	68e3      	ldr	r3, [r4, #12]
 8004f8a:	9301      	str	r3, [sp, #4]
 8004f8c:	68a3      	ldr	r3, [r4, #8]
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004f94:	4631      	mov	r1, r6
 8004f96:	4628      	mov	r0, r5
 8004f98:	f7fb fe3e 	bl	8000c18 <print_formatted>
		break;
 8004f9c:	e76f      	b.n	8004e7e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8004f9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004fa0:	9308      	str	r3, [sp, #32]
 8004fa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fa4:	9307      	str	r3, [sp, #28]
 8004fa6:	6a23      	ldr	r3, [r4, #32]
 8004fa8:	9306      	str	r3, [sp, #24]
 8004faa:	69e3      	ldr	r3, [r4, #28]
 8004fac:	9305      	str	r3, [sp, #20]
 8004fae:	69a3      	ldr	r3, [r4, #24]
 8004fb0:	9304      	str	r3, [sp, #16]
 8004fb2:	6963      	ldr	r3, [r4, #20]
 8004fb4:	9303      	str	r3, [sp, #12]
 8004fb6:	6923      	ldr	r3, [r4, #16]
 8004fb8:	9302      	str	r3, [sp, #8]
 8004fba:	68e3      	ldr	r3, [r4, #12]
 8004fbc:	9301      	str	r3, [sp, #4]
 8004fbe:	68a3      	ldr	r3, [r4, #8]
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004fc6:	4631      	mov	r1, r6
 8004fc8:	4628      	mov	r0, r5
 8004fca:	f7fb fe25 	bl	8000c18 <print_formatted>
		break;
 8004fce:	e756      	b.n	8004e7e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8004fd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8004fd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004fd6:	9308      	str	r3, [sp, #32]
 8004fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fda:	9307      	str	r3, [sp, #28]
 8004fdc:	6a23      	ldr	r3, [r4, #32]
 8004fde:	9306      	str	r3, [sp, #24]
 8004fe0:	69e3      	ldr	r3, [r4, #28]
 8004fe2:	9305      	str	r3, [sp, #20]
 8004fe4:	69a3      	ldr	r3, [r4, #24]
 8004fe6:	9304      	str	r3, [sp, #16]
 8004fe8:	6963      	ldr	r3, [r4, #20]
 8004fea:	9303      	str	r3, [sp, #12]
 8004fec:	6923      	ldr	r3, [r4, #16]
 8004fee:	9302      	str	r3, [sp, #8]
 8004ff0:	68e3      	ldr	r3, [r4, #12]
 8004ff2:	9301      	str	r3, [sp, #4]
 8004ff4:	68a3      	ldr	r3, [r4, #8]
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004ffc:	4631      	mov	r1, r6
 8004ffe:	4628      	mov	r0, r5
 8005000:	f7fb fe0a 	bl	8000c18 <print_formatted>
		break;
 8005004:	e73b      	b.n	8004e7e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8005006:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005008:	930a      	str	r3, [sp, #40]	; 0x28
 800500a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800500c:	9309      	str	r3, [sp, #36]	; 0x24
 800500e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005010:	9308      	str	r3, [sp, #32]
 8005012:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005014:	9307      	str	r3, [sp, #28]
 8005016:	6a23      	ldr	r3, [r4, #32]
 8005018:	9306      	str	r3, [sp, #24]
 800501a:	69e3      	ldr	r3, [r4, #28]
 800501c:	9305      	str	r3, [sp, #20]
 800501e:	69a3      	ldr	r3, [r4, #24]
 8005020:	9304      	str	r3, [sp, #16]
 8005022:	6963      	ldr	r3, [r4, #20]
 8005024:	9303      	str	r3, [sp, #12]
 8005026:	6923      	ldr	r3, [r4, #16]
 8005028:	9302      	str	r3, [sp, #8]
 800502a:	68e3      	ldr	r3, [r4, #12]
 800502c:	9301      	str	r3, [sp, #4]
 800502e:	68a3      	ldr	r3, [r4, #8]
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005036:	4631      	mov	r1, r6
 8005038:	4628      	mov	r0, r5
 800503a:	f7fb fded 	bl	8000c18 <print_formatted>
		break;
 800503e:	e71e      	b.n	8004e7e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 8005040:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005042:	930b      	str	r3, [sp, #44]	; 0x2c
 8005044:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005046:	930a      	str	r3, [sp, #40]	; 0x28
 8005048:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800504a:	9309      	str	r3, [sp, #36]	; 0x24
 800504c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800504e:	9308      	str	r3, [sp, #32]
 8005050:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005052:	9307      	str	r3, [sp, #28]
 8005054:	6a23      	ldr	r3, [r4, #32]
 8005056:	9306      	str	r3, [sp, #24]
 8005058:	69e3      	ldr	r3, [r4, #28]
 800505a:	9305      	str	r3, [sp, #20]
 800505c:	69a3      	ldr	r3, [r4, #24]
 800505e:	9304      	str	r3, [sp, #16]
 8005060:	6963      	ldr	r3, [r4, #20]
 8005062:	9303      	str	r3, [sp, #12]
 8005064:	6923      	ldr	r3, [r4, #16]
 8005066:	9302      	str	r3, [sp, #8]
 8005068:	68e3      	ldr	r3, [r4, #12]
 800506a:	9301      	str	r3, [sp, #4]
 800506c:	68a3      	ldr	r3, [r4, #8]
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005074:	4631      	mov	r1, r6
 8005076:	4628      	mov	r0, r5
 8005078:	f7fb fdce 	bl	8000c18 <print_formatted>
		break;
 800507c:	e6ff      	b.n	8004e7e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
 800507e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005080:	930c      	str	r3, [sp, #48]	; 0x30
 8005082:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005084:	930b      	str	r3, [sp, #44]	; 0x2c
 8005086:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005088:	930a      	str	r3, [sp, #40]	; 0x28
 800508a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800508c:	9309      	str	r3, [sp, #36]	; 0x24
 800508e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005090:	9308      	str	r3, [sp, #32]
 8005092:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005094:	9307      	str	r3, [sp, #28]
 8005096:	6a23      	ldr	r3, [r4, #32]
 8005098:	9306      	str	r3, [sp, #24]
 800509a:	69e3      	ldr	r3, [r4, #28]
 800509c:	9305      	str	r3, [sp, #20]
 800509e:	69a3      	ldr	r3, [r4, #24]
 80050a0:	9304      	str	r3, [sp, #16]
 80050a2:	6963      	ldr	r3, [r4, #20]
 80050a4:	9303      	str	r3, [sp, #12]
 80050a6:	6923      	ldr	r3, [r4, #16]
 80050a8:	9302      	str	r3, [sp, #8]
 80050aa:	68e3      	ldr	r3, [r4, #12]
 80050ac:	9301      	str	r3, [sp, #4]
 80050ae:	68a3      	ldr	r3, [r4, #8]
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80050b6:	4631      	mov	r1, r6
 80050b8:	4628      	mov	r0, r5
 80050ba:	f7fb fdad 	bl	8000c18 <print_formatted>
}
 80050be:	e6de      	b.n	8004e7e <std_print+0x78>

080050c0 <log_output_flush>:
		     log_output->control_block->offset,
 80050c0:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
 80050c2:	6881      	ldr	r1, [r0, #8]
{
 80050c4:	b510      	push	{r4, lr}
 80050c6:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
 80050c8:	e9d2 2300 	ldrd	r2, r3, [r2]
 80050cc:	6800      	ldr	r0, [r0, #0]
 80050ce:	f7ff fe8d 	bl	8004dec <buffer_write>
	log_output->control_block->offset = 0;
 80050d2:	6863      	ldr	r3, [r4, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]
}
 80050d8:	bd10      	pop	{r4, pc}

080050da <out_func>:
{
 80050da:	b508      	push	{r3, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
 80050dc:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
 80050e4:	684a      	ldr	r2, [r1, #4]
 80050e6:	6813      	ldr	r3, [r2, #0]
 80050e8:	3301      	adds	r3, #1
 80050ea:	6013      	str	r3, [r2, #0]
	if (out_ctx->control_block->offset == out_ctx->size) {
 80050ec:	68ca      	ldr	r2, [r1, #12]
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d102      	bne.n	80050f8 <out_func+0x1e>
		log_output_flush(out_ctx);
 80050f2:	4608      	mov	r0, r1
 80050f4:	f7ff ffe4 	bl	80050c0 <log_output_flush>
}
 80050f8:	2000      	movs	r0, #0
 80050fa:	bd08      	pop	{r3, pc}

080050fc <char_out>:
{
 80050fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fe:	460d      	mov	r5, r1
 8005100:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
 8005102:	4604      	mov	r4, r0
 8005104:	1847      	adds	r7, r0, r1
 8005106:	42bc      	cmp	r4, r7
 8005108:	d101      	bne.n	800510e <char_out+0x12>
}
 800510a:	4628      	mov	r0, r5
 800510c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800510e:	6873      	ldr	r3, [r6, #4]
 8005110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	4630      	mov	r0, r6
 8005118:	4798      	blx	r3
 800511a:	e7f4      	b.n	8005106 <char_out+0xa>

0800511c <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 800511c:	4602      	mov	r2, r0
 800511e:	2101      	movs	r1, #1
 8005120:	2000      	movs	r0, #0
 8005122:	f7fb bfa3 	b.w	800106c <__stm32_exti_isr>

08005126 <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 8005126:	4602      	mov	r2, r0
 8005128:	2102      	movs	r1, #2
 800512a:	2001      	movs	r0, #1
 800512c:	f7fb bf9e 	b.w	800106c <__stm32_exti_isr>

08005130 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 8005130:	4602      	mov	r2, r0
 8005132:	2103      	movs	r1, #3
 8005134:	2002      	movs	r0, #2
 8005136:	f7fb bf99 	b.w	800106c <__stm32_exti_isr>

0800513a <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 800513a:	4602      	mov	r2, r0
 800513c:	2104      	movs	r1, #4
 800513e:	2003      	movs	r0, #3
 8005140:	f7fb bf94 	b.w	800106c <__stm32_exti_isr>

08005144 <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 8005144:	4602      	mov	r2, r0
 8005146:	2105      	movs	r1, #5
 8005148:	2004      	movs	r0, #4
 800514a:	f7fb bf8f 	b.w	800106c <__stm32_exti_isr>

0800514e <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 800514e:	4602      	mov	r2, r0
 8005150:	210a      	movs	r1, #10
 8005152:	2005      	movs	r0, #5
 8005154:	f7fb bf8a 	b.w	800106c <__stm32_exti_isr>

08005158 <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 8005158:	4602      	mov	r2, r0
 800515a:	2110      	movs	r1, #16
 800515c:	200a      	movs	r0, #10
 800515e:	f7fb bf85 	b.w	800106c <__stm32_exti_isr>

08005162 <stm32_exti_init>:
      defined(CONFIG_SOC_SERIES_STM32F7X) || \
      defined(CONFIG_SOC_SERIES_STM32L1X) || \
      defined(CONFIG_SOC_SERIES_STM32L4X) || \
      defined(CONFIG_SOC_SERIES_STM32MP1X) || \
      defined(CONFIG_SOC_SERIES_STM32WBX)
	IRQ_CONNECT(EXTI0_IRQn,
 8005162:	2200      	movs	r2, #0
{
 8005164:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8005166:	4611      	mov	r1, r2
 8005168:	2006      	movs	r0, #6
 800516a:	f7fd f937 	bl	80023dc <z_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 800516e:	2200      	movs	r2, #0
 8005170:	4611      	mov	r1, r2
 8005172:	2007      	movs	r0, #7
 8005174:	f7fd f932 	bl	80023dc <z_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8005178:	2200      	movs	r2, #0
 800517a:	4611      	mov	r1, r2
 800517c:	2008      	movs	r0, #8
 800517e:	f7fd f92d 	bl	80023dc <z_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8005182:	2200      	movs	r2, #0
 8005184:	4611      	mov	r1, r2
 8005186:	2009      	movs	r0, #9
 8005188:	f7fd f928 	bl	80023dc <z_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 800518c:	2200      	movs	r2, #0
 800518e:	4611      	mov	r1, r2
 8005190:	200a      	movs	r0, #10
 8005192:	f7fd f923 	bl	80023dc <z_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_GET(exti_stm32),
		0);
#ifndef CONFIG_SOC_SERIES_STM32MP1X
	IRQ_CONNECT(EXTI9_5_IRQn,
 8005196:	2200      	movs	r2, #0
 8005198:	4611      	mov	r1, r2
 800519a:	2017      	movs	r0, #23
 800519c:	f7fd f91e 	bl	80023dc <z_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 80051a0:	2200      	movs	r2, #0
 80051a2:	4611      	mov	r1, r2
 80051a4:	2028      	movs	r0, #40	; 0x28
 80051a6:	f7fd f919 	bl	80023dc <z_irq_priority_set>
}
 80051aa:	2000      	movs	r0, #0
 80051ac:	bd08      	pop	{r3, pc}

080051ae <config_pll_init>:
 * @brief fill in pll configuration structure
 */
void config_pll_init(LL_UTILS_PLLInitTypeDef *pllinit)
{
	pllinit->PLLM = pllm(CONFIG_CLOCK_STM32_PLL_M_DIVISOR);
	pllinit->PLLN = CONFIG_CLOCK_STM32_PLL_N_MULTIPLIER;
 80051ae:	2314      	movs	r3, #20
 80051b0:	2200      	movs	r2, #0
 80051b2:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLR = pllr(CONFIG_CLOCK_STM32_PLL_R_DIVISOR);
 80051b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051ba:	6083      	str	r3, [r0, #8]
}
 80051bc:	4770      	bx	lr

080051be <config_enable_default_clocks>:
		/* Wait for LSE ready */
	}

	LL_PWR_DisableBkUpAccess();
#endif
}
 80051be:	4770      	bx	lr

080051c0 <gpio_pin_write>:
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
 80051c0:	6843      	ldr	r3, [r0, #4]
 * @param value Value set on the pin.
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_write(struct device *port, u32_t pin,
				 u32_t value)
{
 80051c2:	b410      	push	{r4}
	return api->write(port, access_op, pin, value);
 80051c4:	685c      	ldr	r4, [r3, #4]
 80051c6:	4613      	mov	r3, r2
 80051c8:	46a4      	mov	ip, r4
 80051ca:	460a      	mov	r2, r1
	return gpio_write(port, GPIO_ACCESS_BY_PIN, pin, value);
}
 80051cc:	bc10      	pop	{r4}
	return api->write(port, access_op, pin, value);
 80051ce:	2100      	movs	r1, #0
 80051d0:	4760      	bx	ip

080051d2 <ili9340_transmit>:

void ili9340_transmit(struct ili9340_data *data, u8_t cmd, void *tx_data,
		      size_t tx_len)
{
 80051d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051d6:	b087      	sub	sp, #28
 80051d8:	4604      	mov	r4, r0
 80051da:	4698      	mov	r8, r3
	struct spi_buf tx_buf = { .buf = &cmd, .len = 1 };
 80051dc:	f10d 0307 	add.w	r3, sp, #7
{
 80051e0:	4617      	mov	r7, r2
 80051e2:	f88d 1007 	strb.w	r1, [sp, #7]
	struct spi_buf tx_buf = { .buf = &cmd, .len = 1 };
 80051e6:	9302      	str	r3, [sp, #8]
 80051e8:	2501      	movs	r5, #1
	struct spi_buf_set tx_bufs = { .buffers = &tx_buf, .count = 1 };
 80051ea:	ab02      	add	r3, sp, #8

	gpio_pin_write(data->command_data_gpio, DT_INST_0_ILITEK_ILI9340_CMD_DATA_GPIOS_PIN,
 80051ec:	2200      	movs	r2, #0
 80051ee:	2108      	movs	r1, #8
 80051f0:	6840      	ldr	r0, [r0, #4]
	struct spi_buf tx_buf = { .buf = &cmd, .len = 1 };
 80051f2:	9503      	str	r5, [sp, #12]
	struct spi_buf_set tx_bufs = { .buffers = &tx_buf, .count = 1 };
 80051f4:	e9cd 3504 	strd	r3, r5, [sp, #16]
	gpio_pin_write(data->command_data_gpio, DT_INST_0_ILITEK_ILI9340_CMD_DATA_GPIOS_PIN,
 80051f8:	f7ff ffe2 	bl	80051c0 <gpio_pin_write>
		       ILI9340_CMD_DATA_PIN_COMMAND);
	spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
 80051fc:	68a0      	ldr	r0, [r4, #8]
 80051fe:	6843      	ldr	r3, [r0, #4]
 8005200:	f104 060c 	add.w	r6, r4, #12
 8005204:	f8d3 9000 	ldr.w	r9, [r3]
 8005208:	aa04      	add	r2, sp, #16
 800520a:	2300      	movs	r3, #0
 800520c:	4631      	mov	r1, r6
 800520e:	47c8      	blx	r9

	if (tx_data != NULL) {
 8005210:	b16f      	cbz	r7, 800522e <ili9340_transmit+0x5c>
		tx_buf.buf = tx_data;
		tx_buf.len = tx_len;
		gpio_pin_write(data->command_data_gpio,
 8005212:	462a      	mov	r2, r5
 8005214:	2108      	movs	r1, #8
 8005216:	6860      	ldr	r0, [r4, #4]
		tx_buf.len = tx_len;
 8005218:	e9cd 7802 	strd	r7, r8, [sp, #8]
		gpio_pin_write(data->command_data_gpio,
 800521c:	f7ff ffd0 	bl	80051c0 <gpio_pin_write>
			       DT_INST_0_ILITEK_ILI9340_CMD_DATA_GPIOS_PIN,
			       ILI9340_CMD_DATA_PIN_DATA);
		spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
 8005220:	68a0      	ldr	r0, [r4, #8]
 8005222:	6843      	ldr	r3, [r0, #4]
 8005224:	aa04      	add	r2, sp, #16
 8005226:	681c      	ldr	r4, [r3, #0]
 8005228:	4631      	mov	r1, r6
 800522a:	2300      	movs	r3, #0
 800522c:	47a0      	blx	r4
	}
}
 800522e:	b007      	add	sp, #28
 8005230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005234 <HAL_TIM_PWM_MspInit>:
 8005234:	4770      	bx	lr

08005236 <HAL_TIM_PWM_Init>:
{
 8005236:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005238:	4604      	mov	r4, r0
 800523a:	b1a0      	cbz	r0, 8005266 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800523c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005240:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005244:	b91b      	cbnz	r3, 800524e <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005246:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800524a:	f7ff fff3 	bl	8005234 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800524e:	2302      	movs	r3, #2
 8005250:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005254:	6820      	ldr	r0, [r4, #0]
 8005256:	1d21      	adds	r1, r4, #4
 8005258:	f7fc fd3c 	bl	8001cd4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800525c:	2301      	movs	r3, #1
 800525e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005262:	2000      	movs	r0, #0
}
 8005264:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005266:	2001      	movs	r0, #1
 8005268:	e7fc      	b.n	8005264 <HAL_TIM_PWM_Init+0x2e>

0800526a <HAL_TIM_PWM_ConfigChannel>:
{
 800526a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800526c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005270:	2b01      	cmp	r3, #1
{
 8005272:	4604      	mov	r4, r0
 8005274:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8005278:	d010      	beq.n	800529c <HAL_TIM_PWM_ConfigChannel+0x32>
 800527a:	2301      	movs	r3, #1
  switch (Channel)
 800527c:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 800527e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005282:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8005286:	d043      	beq.n	8005310 <HAL_TIM_PWM_ConfigChannel+0xa6>
 8005288:	d809      	bhi.n	800529e <HAL_TIM_PWM_ConfigChannel+0x34>
 800528a:	b1fa      	cbz	r2, 80052cc <HAL_TIM_PWM_ConfigChannel+0x62>
 800528c:	2a04      	cmp	r2, #4
 800528e:	d02e      	beq.n	80052ee <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 8005290:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005292:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005294:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005298:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800529c:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800529e:	2a10      	cmp	r2, #16
 80052a0:	d047      	beq.n	8005332 <HAL_TIM_PWM_ConfigChannel+0xc8>
 80052a2:	2a14      	cmp	r2, #20
 80052a4:	d056      	beq.n	8005354 <HAL_TIM_PWM_ConfigChannel+0xea>
 80052a6:	2a0c      	cmp	r2, #12
 80052a8:	d1f2      	bne.n	8005290 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052aa:	6820      	ldr	r0, [r4, #0]
 80052ac:	f7fc fc76 	bl	8001b9c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052b0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052b2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052b4:	69da      	ldr	r2, [r3, #28]
 80052b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052bc:	69da      	ldr	r2, [r3, #28]
 80052be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052c4:	69da      	ldr	r2, [r3, #28]
 80052c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80052ca:	e030      	b.n	800532e <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052cc:	6820      	ldr	r0, [r4, #0]
 80052ce:	f7fc fbd5 	bl	8001a7c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052d2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052d4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052d6:	699a      	ldr	r2, [r3, #24]
 80052d8:	f042 0208 	orr.w	r2, r2, #8
 80052dc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052de:	699a      	ldr	r2, [r3, #24]
 80052e0:	f022 0204 	bic.w	r2, r2, #4
 80052e4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052e6:	699a      	ldr	r2, [r3, #24]
 80052e8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052ea:	619a      	str	r2, [r3, #24]
      break;
 80052ec:	e7d0      	b.n	8005290 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052ee:	6820      	ldr	r0, [r4, #0]
 80052f0:	f7fc fd56 	bl	8001da0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052f4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052f6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052f8:	699a      	ldr	r2, [r3, #24]
 80052fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005300:	699a      	ldr	r2, [r3, #24]
 8005302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005308:	699a      	ldr	r2, [r3, #24]
 800530a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800530e:	e7ec      	b.n	80052ea <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005310:	6820      	ldr	r0, [r4, #0]
 8005312:	f7fc fbff 	bl	8001b14 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005316:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005318:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800531a:	69da      	ldr	r2, [r3, #28]
 800531c:	f042 0208 	orr.w	r2, r2, #8
 8005320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005322:	69da      	ldr	r2, [r3, #28]
 8005324:	f022 0204 	bic.w	r2, r2, #4
 8005328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800532a:	69da      	ldr	r2, [r3, #28]
 800532c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800532e:	61da      	str	r2, [r3, #28]
      break;
 8005330:	e7ae      	b.n	8005290 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005332:	6820      	ldr	r0, [r4, #0]
 8005334:	f7fc fc66 	bl	8001c04 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005338:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800533a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800533c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800533e:	f042 0208 	orr.w	r2, r2, #8
 8005342:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005346:	f022 0204 	bic.w	r2, r2, #4
 800534a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800534c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800534e:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005350:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005352:	e79d      	b.n	8005290 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005354:	6820      	ldr	r0, [r4, #0]
 8005356:	f7fc fc89 	bl	8001c6c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800535a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800535c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800535e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005360:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005364:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005366:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005368:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800536c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800536e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005370:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005374:	e7ec      	b.n	8005350 <HAL_TIM_PWM_ConfigChannel+0xe6>

08005376 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005376:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005378:	f001 011f 	and.w	r1, r1, #31
{
 800537c:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800537e:	2401      	movs	r4, #1
 8005380:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8005382:	ea23 0304 	bic.w	r3, r3, r4
 8005386:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005388:	6a03      	ldr	r3, [r0, #32]
 800538a:	408a      	lsls	r2, r1
 800538c:	431a      	orrs	r2, r3
 800538e:	6202      	str	r2, [r0, #32]
}
 8005390:	bd10      	pop	{r4, pc}

08005392 <HAL_TIM_PWM_Start>:
 8005392:	f7fc bd4b 	b.w	8001e2c <HAL_TIM_OC_Start>

08005396 <UTILS_GetPLLOutputFrequency>:
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005396:	680b      	ldr	r3, [r1, #0]
 8005398:	091b      	lsrs	r3, r3, #4
 800539a:	3301      	adds	r3, #1
 800539c:	fbb0 f3f3 	udiv	r3, r0, r3
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 80053a0:	6848      	ldr	r0, [r1, #4]
 80053a2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80053a6:	4343      	muls	r3, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U);
 80053a8:	6888      	ldr	r0, [r1, #8]
 80053aa:	0e40      	lsrs	r0, r0, #25
 80053ac:	3001      	adds	r0, #1
 80053ae:	0040      	lsls	r0, r0, #1
}
 80053b0:	fbb3 f0f0 	udiv	r0, r3, r0
 80053b4:	4770      	bx	lr

080053b6 <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
 80053b6:	f7fd b85f 	b.w	8002478 <__bus_fault>

080053ba <z_do_kernel_oops>:

void z_do_kernel_oops(const NANO_ESF *esf)
{
 80053ba:	4601      	mov	r1, r0
	z_NanoFatalErrorHandler(esf->basic.r0, esf);
 80053bc:	6800      	ldr	r0, [r0, #0]
 80053be:	f7fd b86f 	b.w	80024a0 <z_NanoFatalErrorHandler>

080053c2 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
 80053c2:	b508      	push	{r3, lr}
	handler();
 80053c4:	f7fd f91c 	bl	8002600 <z_SysNmiOnReset>
	z_ExcExit();
}
 80053c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_ExcExit();
 80053cc:	f7fc be34 	b.w	8002038 <_IntExit>

080053d0 <z_arch_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 80053d0:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
 80053d2:	2100      	movs	r1, #0
 80053d4:	a801      	add	r0, sp, #4
 80053d6:	f7fd f9fb 	bl	80027d0 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
 80053da:	b003      	add	sp, #12
 80053dc:	f85d fb04 	ldr.w	pc, [sp], #4

080053e0 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
 80053e0:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
 80053e2:	7802      	ldrb	r2, [r0, #0]
 80053e4:	428a      	cmp	r2, r1
 80053e6:	4603      	mov	r3, r0
 80053e8:	f100 0001 	add.w	r0, r0, #1
 80053ec:	d004      	beq.n	80053f8 <strchr+0x18>
 80053ee:	2a00      	cmp	r2, #0
 80053f0:	d1f7      	bne.n	80053e2 <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
 80053f2:	2900      	cmp	r1, #0
 80053f4:	bf18      	it	ne
 80053f6:	2300      	movne	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	4770      	bx	lr

080053fc <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
 80053fc:	3801      	subs	r0, #1
 80053fe:	3901      	subs	r1, #1
 8005400:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8005404:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005408:	4293      	cmp	r3, r2
 800540a:	d101      	bne.n	8005410 <strcmp+0x14>
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1f7      	bne.n	8005400 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
 8005410:	1a98      	subs	r0, r3, r2
 8005412:	4770      	bx	lr

08005414 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
 8005414:	1a43      	subs	r3, r0, r1
 8005416:	4293      	cmp	r3, r2
{
 8005418:	b510      	push	{r4, lr}
 800541a:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
 800541e:	d308      	bcc.n	8005432 <memmove+0x1e>
 8005420:	3901      	subs	r1, #1
	char *dest = d;
 8005422:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
 8005424:	429a      	cmp	r2, r3
 8005426:	d00b      	beq.n	8005440 <memmove+0x2c>
			*dest = *src;
 8005428:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800542c:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
 8005430:	e7f8      	b.n	8005424 <memmove+0x10>
 8005432:	440a      	add	r2, r1
			dest[n] = src[n];
 8005434:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 8005438:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
 800543c:	428a      	cmp	r2, r1
 800543e:	d1f9      	bne.n	8005434 <memmove+0x20>
		}
	}

	return d;
}
 8005440:	bd10      	pop	{r4, pc}

08005442 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
 8005442:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
 8005444:	ea81 0400 	eor.w	r4, r1, r0
 8005448:	07a5      	lsls	r5, r4, #30
 800544a:	4603      	mov	r3, r0
 800544c:	d00b      	beq.n	8005466 <memcpy+0x24>
 800544e:	3b01      	subs	r3, #1
 8005450:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
 8005452:	4291      	cmp	r1, r2
 8005454:	d11a      	bne.n	800548c <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8005456:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
 8005458:	2a00      	cmp	r2, #0
 800545a:	d0fc      	beq.n	8005456 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
 800545c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005460:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
 8005464:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
 8005466:	079c      	lsls	r4, r3, #30
 8005468:	d1f6      	bne.n	8005458 <memcpy+0x16>
 800546a:	0895      	lsrs	r5, r2, #2
 800546c:	00ac      	lsls	r4, r5, #2
 800546e:	1f1e      	subs	r6, r3, #4
 8005470:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
 8005472:	42b9      	cmp	r1, r7
 8005474:	d105      	bne.n	8005482 <memcpy+0x40>
 8005476:	f06f 0603 	mvn.w	r6, #3
 800547a:	fb06 2205 	mla	r2, r6, r5, r2
 800547e:	4423      	add	r3, r4
 8005480:	e7e5      	b.n	800544e <memcpy+0xc>
			*(d_word++) = *(s_word++);
 8005482:	f851 cb04 	ldr.w	ip, [r1], #4
 8005486:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
 800548a:	e7f2      	b.n	8005472 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
 800548c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005490:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 8005494:	e7dd      	b.n	8005452 <memcpy+0x10>

08005496 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
 8005496:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 8005498:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
 800549a:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
 800549c:	079c      	lsls	r4, r3, #30
 800549e:	d110      	bne.n	80054c2 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
 80054a0:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
 80054a4:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
 80054a8:	0894      	lsrs	r4, r2, #2
 80054aa:	eb03 0684 	add.w	r6, r3, r4, lsl #2
 80054ae:	42b3      	cmp	r3, r6
 80054b0:	d10d      	bne.n	80054ce <memset+0x38>
 80054b2:	f06f 0503 	mvn.w	r5, #3
 80054b6:	fb05 2404 	mla	r4, r5, r4, r2
 80054ba:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
 80054bc:	42a3      	cmp	r3, r4
 80054be:	d109      	bne.n	80054d4 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 80054c0:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
 80054c2:	2a00      	cmp	r2, #0
 80054c4:	d0fc      	beq.n	80054c0 <memset+0x2a>
		*(d_byte++) = c_byte;
 80054c6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 80054ca:	3a01      	subs	r2, #1
 80054cc:	e7e6      	b.n	800549c <memset+0x6>
		*(d_word++) = c_word;
 80054ce:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
 80054d2:	e7ec      	b.n	80054ae <memset+0x18>
		*(d_byte++) = c_byte;
 80054d4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 80054d8:	e7f0      	b.n	80054bc <memset+0x26>

080054da <_to_x>:
{
 80054da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054dc:	4604      	mov	r4, r0
		unsigned int d = n % base;
 80054de:	fbb1 f7f2 	udiv	r7, r1, r2
 80054e2:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
 80054e6:	2d09      	cmp	r5, #9
 80054e8:	bf8c      	ite	hi
 80054ea:	2627      	movhi	r6, #39	; 0x27
 80054ec:	2600      	movls	r6, #0
 80054ee:	3530      	adds	r5, #48	; 0x30
 80054f0:	4435      	add	r5, r6
	} while (n);
 80054f2:	4291      	cmp	r1, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
 80054f4:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
 80054f8:	d20a      	bcs.n	8005510 <_to_x+0x36>
		*end++ = '0';
 80054fa:	2130      	movs	r1, #48	; 0x30
	while (end - start < minlen) {
 80054fc:	1a22      	subs	r2, r4, r0
 80054fe:	4293      	cmp	r3, r2
 8005500:	dc08      	bgt.n	8005514 <_to_x+0x3a>
	*end = 0;
 8005502:	2300      	movs	r3, #0
 8005504:	f804 3901 	strb.w	r3, [r4], #-1
	for (end--; end > start; end--, start++) {
 8005508:	42a0      	cmp	r0, r4
 800550a:	d306      	bcc.n	800551a <_to_x+0x40>
}
 800550c:	4610      	mov	r0, r2
 800550e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
 8005510:	4639      	mov	r1, r7
 8005512:	e7e4      	b.n	80054de <_to_x+0x4>
		*end++ = '0';
 8005514:	f804 1b01 	strb.w	r1, [r4], #1
 8005518:	e7f0      	b.n	80054fc <_to_x+0x22>
		char tmp = *end;
 800551a:	7823      	ldrb	r3, [r4, #0]
		*end = *start;
 800551c:	7801      	ldrb	r1, [r0, #0]
 800551e:	f804 1901 	strb.w	r1, [r4], #-1
		*start = tmp;
 8005522:	f800 3b01 	strb.w	r3, [r0], #1
 8005526:	e7ef      	b.n	8005508 <_to_x+0x2e>

08005528 <_rlrshift>:
{
 8005528:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
 800552a:	e9d0 6500 	ldrd	r6, r5, [r0]
 800552e:	0872      	lsrs	r2, r6, #1
 8005530:	f006 0301 	and.w	r3, r6, #1
 8005534:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8005538:	189b      	adds	r3, r3, r2
 800553a:	f04f 0100 	mov.w	r1, #0
 800553e:	ea4f 0455 	mov.w	r4, r5, lsr #1
 8005542:	eb44 0101 	adc.w	r1, r4, r1
 8005546:	e9c0 3100 	strd	r3, r1, [r0]
}
 800554a:	bd70      	pop	{r4, r5, r6, pc}

0800554c <_ldiv5>:
	uint64_t rem = *v, quot = 0U, q;
 800554c:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8005550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	rem += 2U;
 8005554:	3302      	adds	r3, #2
		q = (uint64_t)(hi / 5U) << shifts[i];
 8005556:	f04f 0705 	mov.w	r7, #5
 800555a:	f04f 0c00 	mov.w	ip, #0
	rem += 2U;
 800555e:	f142 0200 	adc.w	r2, r2, #0
		rem -= q * 5U;
 8005562:	ebb3 060c 	subs.w	r6, r3, ip
		q = (uint64_t)(hi / 5U) << shifts[i];
 8005566:	fbb2 fef7 	udiv	lr, r2, r7
		rem -= q * 5U;
 800556a:	fb07 f10e 	mul.w	r1, r7, lr
 800556e:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
 8005572:	08f2      	lsrs	r2, r6, #3
 8005574:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
 8005578:	fbb2 f1f7 	udiv	r1, r2, r7
 800557c:	00ca      	lsls	r2, r1, #3
		quot += q;
 800557e:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
 8005582:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
 8005586:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5U;
 800558a:	fba2 2307 	umull	r2, r3, r2, r7
 800558e:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
 8005590:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
 8005594:	eb18 0403 	adds.w	r4, r8, r3
 8005598:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
 800559c:	e9c0 4500 	strd	r4, r5, [r0]
}
 80055a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080055a4 <_get_digit>:
	if (*digit_count > 0) {
 80055a4:	680b      	ldr	r3, [r1, #0]
 80055a6:	2b00      	cmp	r3, #0
{
 80055a8:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
 80055aa:	dd10      	ble.n	80055ce <_get_digit+0x2a>
		*digit_count -= 1;
 80055ac:	3b01      	subs	r3, #1
		*fr = *fr * 10U;
 80055ae:	6802      	ldr	r2, [r0, #0]
		*digit_count -= 1;
 80055b0:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
 80055b2:	6844      	ldr	r4, [r0, #4]
 80055b4:	210a      	movs	r1, #10
 80055b6:	fba2 5601 	umull	r5, r6, r2, r1
 80055ba:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
 80055be:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
 80055c2:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
 80055c6:	0f31      	lsrs	r1, r6, #28
 80055c8:	3130      	adds	r1, #48	; 0x30
}
 80055ca:	b2c8      	uxtb	r0, r1
 80055cc:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
 80055ce:	2130      	movs	r1, #48	; 0x30
 80055d0:	e7fb      	b.n	80055ca <_get_digit+0x26>

080055d2 <_stdout_hook_default>:
}
 80055d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055d6:	4770      	bx	lr

080055d8 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
 80055d8:	684b      	ldr	r3, [r1, #4]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	dd07      	ble.n	80055ee <sprintf_out+0x16>
		*(p->ptr) = c;
 80055de:	680b      	ldr	r3, [r1, #0]
 80055e0:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
 80055e2:	680b      	ldr	r3, [r1, #0]
 80055e4:	3301      	adds	r3, #1
 80055e6:	600b      	str	r3, [r1, #0]
		p->len -= 1;
 80055e8:	684b      	ldr	r3, [r1, #4]
 80055ea:	3b01      	subs	r3, #1
 80055ec:	604b      	str	r3, [r1, #4]
}
 80055ee:	2000      	movs	r0, #0
 80055f0:	4770      	bx	lr

080055f2 <gpio_stm32_isr>:
	struct gpio_stm32_data *data = dev->driver_data;
 80055f2:	688a      	ldr	r2, [r1, #8]
	if ((BIT(line) & data->cb_pins) != 0) {
 80055f4:	6813      	ldr	r3, [r2, #0]
 80055f6:	40c3      	lsrs	r3, r0
 80055f8:	07db      	lsls	r3, r3, #31
{
 80055fa:	b570      	push	{r4, r5, r6, lr}
 80055fc:	460e      	mov	r6, r1
	if ((BIT(line) & data->cb_pins) != 0) {
 80055fe:	d50f      	bpl.n	8005620 <gpio_stm32_isr+0x2e>
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8005600:	6851      	ldr	r1, [r2, #4]
 8005602:	b169      	cbz	r1, 8005620 <gpio_stm32_isr+0x2e>
		gpio_fire_callbacks(&data->cb, dev, BIT(line));
 8005604:	2501      	movs	r5, #1
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8005606:	680c      	ldr	r4, [r1, #0]
 8005608:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 800560a:	688b      	ldr	r3, [r1, #8]
 800560c:	421d      	tst	r5, r3
 800560e:	d003      	beq.n	8005618 <gpio_stm32_isr+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
 8005610:	684b      	ldr	r3, [r1, #4]
 8005612:	462a      	mov	r2, r5
 8005614:	4630      	mov	r0, r6
 8005616:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8005618:	b114      	cbz	r4, 8005620 <gpio_stm32_isr+0x2e>
 800561a:	4621      	mov	r1, r4
 800561c:	6824      	ldr	r4, [r4, #0]
 800561e:	e7f4      	b.n	800560a <gpio_stm32_isr+0x18>
}
 8005620:	bd70      	pop	{r4, r5, r6, pc}

08005622 <gpio_stm32_write>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8005622:	6800      	ldr	r0, [r0, #0]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8005624:	6880      	ldr	r0, [r0, #8]
{
 8005626:	b510      	push	{r4, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8005628:	6800      	ldr	r0, [r0, #0]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 800562a:	b941      	cbnz	r1, 800563e <gpio_stm32_write+0x1c>
	pinval = 1 << pin;
 800562c:	2401      	movs	r4, #1
 800562e:	fa04 f202 	lsl.w	r2, r4, r2
	if (value != 0U) {
 8005632:	b113      	cbz	r3, 800563a <gpio_stm32_write+0x18>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005634:	6182      	str	r2, [r0, #24]
}
 8005636:	4608      	mov	r0, r1
 8005638:	bd10      	pop	{r4, pc}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800563a:	6282      	str	r2, [r0, #40]	; 0x28
 800563c:	e7fb      	b.n	8005636 <gpio_stm32_write+0x14>
		return -ENOTSUP;
 800563e:	f06f 0122 	mvn.w	r1, #34	; 0x22
 8005642:	e7f8      	b.n	8005636 <gpio_stm32_write+0x14>

08005644 <gpio_stm32_read>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8005644:	6800      	ldr	r0, [r0, #0]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8005646:	6880      	ldr	r0, [r0, #8]
{
 8005648:	b510      	push	{r4, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800564a:	6800      	ldr	r0, [r0, #0]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 800564c:	b931      	cbnz	r1, 800565c <gpio_stm32_read+0x18>
  return (uint32_t)(READ_REG(GPIOx->IDR));
 800564e:	6904      	ldr	r4, [r0, #16]
	*value = (LL_GPIO_ReadInputPort(gpio) >> pin) & 0x1;
 8005650:	40d4      	lsrs	r4, r2
 8005652:	f004 0401 	and.w	r4, r4, #1
 8005656:	601c      	str	r4, [r3, #0]
}
 8005658:	4608      	mov	r0, r1
 800565a:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
 800565c:	f06f 0122 	mvn.w	r1, #34	; 0x22
 8005660:	e7fa      	b.n	8005658 <gpio_stm32_read+0x14>

08005662 <gpio_stm32_manage_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 8005662:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
 8005664:	6858      	ldr	r0, [r3, #4]
{
 8005666:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
 8005668:	b158      	cbz	r0, 8005682 <gpio_stm32_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800566a:	2400      	movs	r4, #0
 800566c:	4281      	cmp	r1, r0
 800566e:	d113      	bne.n	8005698 <gpio_stm32_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
 8005670:	6808      	ldr	r0, [r1, #0]
 8005672:	b95c      	cbnz	r4, 800568c <gpio_stm32_manage_callback+0x2a>
 8005674:	689c      	ldr	r4, [r3, #8]
	list->head = node;
 8005676:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 8005678:	42a1      	cmp	r1, r4
 800567a:	d100      	bne.n	800567e <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 800567c:	6098      	str	r0, [r3, #8]
	parent->next = child;
 800567e:	2000      	movs	r0, #0
 8005680:	6008      	str	r0, [r1, #0]
	if (set) {
 8005682:	b972      	cbnz	r2, 80056a2 <gpio_stm32_manage_callback+0x40>
	return 0;
 8005684:	2000      	movs	r0, #0
}
 8005686:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8005688:	4628      	mov	r0, r5
 800568a:	e7ef      	b.n	800566c <gpio_stm32_manage_callback+0xa>
	parent->next = child;
 800568c:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 800568e:	6898      	ldr	r0, [r3, #8]
 8005690:	4281      	cmp	r1, r0
	list->tail = node;
 8005692:	bf08      	it	eq
 8005694:	609c      	streq	r4, [r3, #8]
 8005696:	e7f2      	b.n	800567e <gpio_stm32_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8005698:	6805      	ldr	r5, [r0, #0]
	return node->next;
 800569a:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800569c:	2d00      	cmp	r5, #0
 800569e:	d1f3      	bne.n	8005688 <gpio_stm32_manage_callback+0x26>
			if (!set) {
 80056a0:	b13a      	cbz	r2, 80056b2 <gpio_stm32_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
 80056a2:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
 80056a4:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 80056a6:	6898      	ldr	r0, [r3, #8]
	list->head = node;
 80056a8:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 80056aa:	2800      	cmp	r0, #0
 80056ac:	d1ea      	bne.n	8005684 <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 80056ae:	6099      	str	r1, [r3, #8]
 80056b0:	e7e9      	b.n	8005686 <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 80056b2:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 80056b6:	e7e6      	b.n	8005686 <gpio_stm32_manage_callback+0x24>

080056b8 <gpio_stm32_enable_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 80056b8:	6880      	ldr	r0, [r0, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 80056ba:	b939      	cbnz	r1, 80056cc <gpio_stm32_enable_callback+0x14>
	data->cb_pins |= BIT(pin);
 80056bc:	2301      	movs	r3, #1
 80056be:	fa03 f202 	lsl.w	r2, r3, r2
 80056c2:	6803      	ldr	r3, [r0, #0]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	6003      	str	r3, [r0, #0]
}
 80056c8:	4608      	mov	r0, r1
 80056ca:	4770      	bx	lr
		return -ENOTSUP;
 80056cc:	f06f 0122 	mvn.w	r1, #34	; 0x22
 80056d0:	e7fa      	b.n	80056c8 <gpio_stm32_enable_callback+0x10>

080056d2 <gpio_stm32_disable_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 80056d2:	6880      	ldr	r0, [r0, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 80056d4:	b941      	cbnz	r1, 80056e8 <gpio_stm32_disable_callback+0x16>
	data->cb_pins &= ~BIT(pin);
 80056d6:	2301      	movs	r3, #1
 80056d8:	fa03 f202 	lsl.w	r2, r3, r2
 80056dc:	6803      	ldr	r3, [r0, #0]
 80056de:	ea23 0302 	bic.w	r3, r3, r2
 80056e2:	6003      	str	r3, [r0, #0]
}
 80056e4:	4608      	mov	r0, r1
 80056e6:	4770      	bx	lr
		return -ENOTSUP;
 80056e8:	f06f 0122 	mvn.w	r1, #34	; 0x22
 80056ec:	e7fa      	b.n	80056e4 <gpio_stm32_disable_callback+0x12>

080056ee <gpio_stm32_flags_to_conf>:
	int direction = flags & GPIO_DIR_MASK;
 80056ee:	f000 0301 	and.w	r3, r0, #1
	if (pincfg == NULL) {
 80056f2:	b1b1      	cbz	r1, 8005722 <gpio_stm32_flags_to_conf+0x34>
	if (direction == GPIO_DIR_OUT) {
 80056f4:	b123      	cbz	r3, 8005700 <gpio_stm32_flags_to_conf+0x12>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 80056f6:	2310      	movs	r3, #16
 80056f8:	600b      	str	r3, [r1, #0]
	return 0;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	4770      	bx	lr
	int pud = flags & GPIO_PUD_MASK;
 8005700:	f400 7040 	and.w	r0, r0, #768	; 0x300
		if (pud == GPIO_PUD_PULL_UP) {
 8005704:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8005708:	d103      	bne.n	8005712 <gpio_stm32_flags_to_conf+0x24>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800570a:	f44f 7200 	mov.w	r2, #512	; 0x200
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800570e:	600a      	str	r2, [r1, #0]
 8005710:	e7f4      	b.n	80056fc <gpio_stm32_flags_to_conf+0xe>
		} else if (pud == GPIO_PUD_PULL_DOWN) {
 8005712:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005716:	d001      	beq.n	800571c <gpio_stm32_flags_to_conf+0x2e>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 8005718:	600b      	str	r3, [r1, #0]
 800571a:	e7ef      	b.n	80056fc <gpio_stm32_flags_to_conf+0xe>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800571c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005720:	e7f5      	b.n	800570e <gpio_stm32_flags_to_conf+0x20>
		return -EINVAL;
 8005722:	f06f 0315 	mvn.w	r3, #21
 8005726:	e7e9      	b.n	80056fc <gpio_stm32_flags_to_conf+0xe>

08005728 <gpio_stm32_configure>:
{
 8005728:	b5f0      	push	{r4, r5, r6, r7, lr}
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 800572a:	f002 0730 	and.w	r7, r2, #48	; 0x30
	pinval = 1 << pin;
 800572e:	2401      	movs	r4, #1
 8005730:	408c      	lsls	r4, r1
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8005732:	093d      	lsrs	r5, r7, #4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005734:	f8d0 c000 	ldr.w	ip, [r0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005738:	fa94 f6a4 	rbit	r6, r4
  return __builtin_clz(value);
 800573c:	fab6 f686 	clz	r6, r6
 8005740:	f04f 0e03 	mov.w	lr, #3
 8005744:	0076      	lsls	r6, r6, #1
 8005746:	fa0e f606 	lsl.w	r6, lr, r6
 800574a:	ea2c 0c06 	bic.w	ip, ip, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800574e:	fa94 f6a4 	rbit	r6, r4
  return __builtin_clz(value);
 8005752:	fab6 f686 	clz	r6, r6
 8005756:	0076      	lsls	r6, r6, #1
 8005758:	40b5      	lsls	r5, r6
 800575a:	ea45 050c 	orr.w	r5, r5, ip
	if (STM32_MODER_ALT_MODE == mode) {
 800575e:	2f20      	cmp	r7, #32
 8005760:	6005      	str	r5, [r0, #0]
 8005762:	d162      	bne.n	800582a <gpio_stm32_configure+0x102>
		if (pin < 8) {
 8005764:	2907      	cmp	r1, #7
 8005766:	dc49      	bgt.n	80057fc <gpio_stm32_configure+0xd4>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005768:	6a05      	ldr	r5, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800576a:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 800576e:	b10e      	cbz	r6, 8005774 <gpio_stm32_configure+0x4c>
  return __builtin_clz(value);
 8005770:	fab6 f786 	clz	r7, r6
 8005774:	260f      	movs	r6, #15
 8005776:	00bf      	lsls	r7, r7, #2
 8005778:	fa06 f707 	lsl.w	r7, r6, r7
 800577c:	ea25 0707 	bic.w	r7, r5, r7
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005780:	fa94 f5a4 	rbit	r5, r4
  return __builtin_clz(value);
 8005784:	fab5 f585 	clz	r5, r5
 8005788:	00ad      	lsls	r5, r5, #2
 800578a:	fa03 f505 	lsl.w	r5, r3, r5
 800578e:	433d      	orrs	r5, r7
 8005790:	6205      	str	r5, [r0, #32]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005792:	6845      	ldr	r5, [r0, #4]
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8005794:	f3c2 1380 	ubfx	r3, r2, #6, #1
 8005798:	ea25 0504 	bic.w	r5, r5, r4
 800579c:	fa03 f101 	lsl.w	r1, r3, r1
 80057a0:	4329      	orrs	r1, r5
 80057a2:	6041      	str	r1, [r0, #4]
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 80057a4:	f3c2 13c1 	ubfx	r3, r2, #7, #2
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80057a8:	6885      	ldr	r5, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057aa:	fa94 f1a4 	rbit	r1, r4
  return __builtin_clz(value);
 80057ae:	fab1 f181 	clz	r1, r1
 80057b2:	2603      	movs	r6, #3
 80057b4:	0049      	lsls	r1, r1, #1
 80057b6:	fa06 f101 	lsl.w	r1, r6, r1
 80057ba:	ea25 0501 	bic.w	r5, r5, r1
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057be:	fa94 f1a4 	rbit	r1, r4
  return __builtin_clz(value);
 80057c2:	fab1 f181 	clz	r1, r1
 80057c6:	0049      	lsls	r1, r1, #1
 80057c8:	408b      	lsls	r3, r1
 80057ca:	432b      	orrs	r3, r5
 80057cc:	6083      	str	r3, [r0, #8]
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 80057ce:	f3c2 2241 	ubfx	r2, r2, #9, #2
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80057d2:	68c1      	ldr	r1, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d4:	fa94 f3a4 	rbit	r3, r4
  return __builtin_clz(value);
 80057d8:	fab3 f383 	clz	r3, r3
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	fa06 f303 	lsl.w	r3, r6, r3
 80057e2:	ea21 0303 	bic.w	r3, r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e6:	fa94 f4a4 	rbit	r4, r4
  return __builtin_clz(value);
 80057ea:	fab4 f484 	clz	r4, r4
 80057ee:	0064      	lsls	r4, r4, #1
 80057f0:	fa02 f404 	lsl.w	r4, r2, r4
 80057f4:	431c      	orrs	r4, r3
 80057f6:	60c4      	str	r4, [r0, #12]
}
 80057f8:	2000      	movs	r0, #0
 80057fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80057fc:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
 8005800:	0a26      	lsrs	r6, r4, #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005802:	fa96 f5a6 	rbit	r5, r6
  if (value == 0U)
 8005806:	b10d      	cbz	r5, 800580c <gpio_stm32_configure+0xe4>
  return __builtin_clz(value);
 8005808:	fab5 f785 	clz	r7, r5
 800580c:	250f      	movs	r5, #15
 800580e:	00bf      	lsls	r7, r7, #2
 8005810:	fa05 f707 	lsl.w	r7, r5, r7
 8005814:	ea2c 0707 	bic.w	r7, ip, r7
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005818:	fa96 f6a6 	rbit	r6, r6
  return __builtin_clz(value);
 800581c:	fab6 f686 	clz	r6, r6
 8005820:	00b6      	lsls	r6, r6, #2
 8005822:	40b3      	lsls	r3, r6
 8005824:	433b      	orrs	r3, r7
 8005826:	6243      	str	r3, [r0, #36]	; 0x24
 8005828:	e7b3      	b.n	8005792 <gpio_stm32_configure+0x6a>
	if (mode == STM32_MODER_ANALOG_MODE) {
 800582a:	2f30      	cmp	r7, #48	; 0x30
  SET_BIT(GPIOx->ASCR, PinMask);
 800582c:	bf02      	ittt	eq
 800582e:	6ac3      	ldreq	r3, [r0, #44]	; 0x2c
 8005830:	4323      	orreq	r3, r4
 8005832:	62c3      	streq	r3, [r0, #44]	; 0x2c
 8005834:	e7ad      	b.n	8005792 <gpio_stm32_configure+0x6a>

08005836 <pwm_stm32_get_cycles_per_sec>:
	const struct pwm_stm32_config *cfg = DEV_CFG(dev);
 8005836:	6803      	ldr	r3, [r0, #0]
{
 8005838:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct pwm_stm32_config *cfg = DEV_CFG(dev);
 800583a:	6899      	ldr	r1, [r3, #8]
	struct pwm_stm32_data *data = DEV_DATA(dev);
 800583c:	6885      	ldr	r5, [r0, #8]
	if (cycles == NULL) {
 800583e:	4614      	mov	r4, r2
 8005840:	b17a      	cbz	r2, 8005862 <pwm_stm32_get_cycles_per_sec+0x2c>
	clock_control_get_rate(data->clock,
 8005842:	6c68      	ldr	r0, [r5, #68]	; 0x44
	return api->get_rate(dev, sys, rate);
 8005844:	6843      	ldr	r3, [r0, #4]
 8005846:	aa01      	add	r2, sp, #4
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	3104      	adds	r1, #4
 800584c:	4798      	blx	r3
	*cycles = (u64_t)(tim_clk / (data->pwm_prescaler + 1));
 800584e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8005850:	9b01      	ldr	r3, [sp, #4]
 8005852:	2000      	movs	r0, #0
 8005854:	3201      	adds	r2, #1
 8005856:	fbb3 f3f2 	udiv	r3, r3, r2
 800585a:	e9c4 3000 	strd	r3, r0, [r4]
}
 800585e:	b003      	add	sp, #12
 8005860:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
 8005862:	f06f 0015 	mvn.w	r0, #21
 8005866:	e7fa      	b.n	800585e <pwm_stm32_get_cycles_per_sec+0x28>

08005868 <spi_stm32_next_tx>:
}

static ALWAYS_INLINE
bool spi_context_tx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->tx_buf && ctx->tx_len);
 8005868:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800586a:	b152      	cbz	r2, 8005882 <spi_stm32_next_tx+0x1a>
 800586c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800586e:	b153      	cbz	r3, 8005886 <spi_stm32_next_tx+0x1e>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8005870:	6803      	ldr	r3, [r0, #0]
 8005872:	889b      	ldrh	r3, [r3, #4]
 8005874:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8005878:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((u8_t *)(data->ctx.tx_buf));
 800587a:	bf0c      	ite	eq
 800587c:	7810      	ldrbeq	r0, [r2, #0]
			tx_frame = UNALIGNED_GET((u16_t *)(data->ctx.tx_buf));
 800587e:	8810      	ldrhne	r0, [r2, #0]
 8005880:	4770      	bx	lr
	u16_t tx_frame = SPI_STM32_TX_NOP;
 8005882:	4610      	mov	r0, r2
 8005884:	4770      	bx	lr
 8005886:	4618      	mov	r0, r3
}
 8005888:	4770      	bx	lr

0800588a <spi_stm32_irq_config_func_1>:
		    POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,
		    &api_funcs);

#ifdef CONFIG_SPI_STM32_INTERRUPT
static void spi_stm32_irq_config_func_1(struct device *dev)
{
 800588a:	b508      	push	{r3, lr}
	IRQ_CONNECT(DT_SPI_1_IRQ, DT_SPI_1_IRQ_PRI,
 800588c:	2023      	movs	r0, #35	; 0x23
 800588e:	2200      	movs	r2, #0
 8005890:	2105      	movs	r1, #5
 8005892:	f7fc fda3 	bl	80023dc <z_irq_priority_set>
		    spi_stm32_isr, DEVICE_GET(spi_stm32_1), 0);
	irq_enable(DT_SPI_1_IRQ);
 8005896:	2023      	movs	r0, #35	; 0x23
}
 8005898:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(DT_SPI_1_IRQ);
 800589c:	f7fc bd8e 	b.w	80023bc <z_arch_irq_enable>

080058a0 <gpio_pin_write>:
 80058a0:	6843      	ldr	r3, [r0, #4]
{
 80058a2:	b410      	push	{r4}
	return api->write(port, access_op, pin, value);
 80058a4:	685c      	ldr	r4, [r3, #4]
 80058a6:	4613      	mov	r3, r2
 80058a8:	46a4      	mov	ip, r4
 80058aa:	460a      	mov	r2, r1
}
 80058ac:	bc10      	pop	{r4}
	return api->write(port, access_op, pin, value);
 80058ae:	2100      	movs	r1, #0
 80058b0:	4760      	bx	ip

080058b2 <_spi_context_cs_control.isra.5>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
 80058b2:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 80058b4:	6804      	ldr	r4, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
 80058b6:	4605      	mov	r5, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 80058b8:	b324      	cbz	r4, 8005904 <_spi_context_cs_control.isra.5+0x52>
 80058ba:	68a3      	ldr	r3, [r4, #8]
 80058bc:	b313      	cbz	r3, 8005904 <_spi_context_cs_control.isra.5+0x52>
 80058be:	6818      	ldr	r0, [r3, #0]
 80058c0:	b300      	cbz	r0, 8005904 <_spi_context_cs_control.isra.5+0x52>
		if (on) {
 80058c2:	b161      	cbz	r1, 80058de <_spi_context_cs_control.isra.5+0x2c>
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
 80058c4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
			gpio_pin_write(ctx->config->cs->gpio_dev,
 80058c8:	6859      	ldr	r1, [r3, #4]
 80058ca:	0fd2      	lsrs	r2, r2, #31
 80058cc:	f7ff ffe8 	bl	80058a0 <gpio_pin_write>
			k_busy_wait(ctx->config->cs->delay);
 80058d0:	682b      	ldr	r3, [r5, #0]
 80058d2:	689b      	ldr	r3, [r3, #8]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_BUSY_WAIT, k_busy_wait, u32_t, usec_to_wait)
 80058d4:	6898      	ldr	r0, [r3, #8]
}
 80058d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058da:	f7fe bc63 	b.w	80041a4 <z_impl_k_busy_wait>
			if (!force_off &&
 80058de:	b912      	cbnz	r2, 80058e6 <_spi_context_cs_control.isra.5+0x34>
 80058e0:	88a2      	ldrh	r2, [r4, #4]
 80058e2:	0492      	lsls	r2, r2, #18
 80058e4:	d40e      	bmi.n	8005904 <_spi_context_cs_control.isra.5+0x52>
 80058e6:	6898      	ldr	r0, [r3, #8]
 80058e8:	f7fe fc5c 	bl	80041a4 <z_impl_k_busy_wait>
			gpio_pin_write(ctx->config->cs->gpio_dev,
 80058ec:	682a      	ldr	r2, [r5, #0]
 80058ee:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
 80058f0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
			gpio_pin_write(ctx->config->cs->gpio_dev,
 80058f4:	43d2      	mvns	r2, r2
 80058f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058fa:	0fd2      	lsrs	r2, r2, #31
}
 80058fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_write(ctx->config->cs->gpio_dev,
 8005900:	f7ff bfce 	b.w	80058a0 <gpio_pin_write>
}
 8005904:	bd38      	pop	{r3, r4, r5, pc}

08005906 <spi_context_unlock_unconditionally>:
{
 8005906:	b510      	push	{r4, lr}
 8005908:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
 800590a:	2201      	movs	r2, #1
 800590c:	2100      	movs	r1, #0
 800590e:	f7ff ffd0 	bl	80058b2 <_spi_context_cs_control.isra.5>
	if (!k_sem_count_get(&ctx->lock)) {
 8005912:	68e3      	ldr	r3, [r4, #12]
 8005914:	b923      	cbnz	r3, 8005920 <spi_context_unlock_unconditionally+0x1a>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
 8005916:	1d20      	adds	r0, r4, #4
}
 8005918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800591c:	f7fe bbe0 	b.w	80040e0 <z_impl_k_sem_give>
 8005920:	bd10      	pop	{r4, pc}

08005922 <spi_stm32_release>:
{
 8005922:	b508      	push	{r3, lr}
	spi_context_unlock_unconditionally(&data->ctx);
 8005924:	6880      	ldr	r0, [r0, #8]
 8005926:	f7ff ffee 	bl	8005906 <spi_context_unlock_unconditionally>
}
 800592a:	2000      	movs	r0, #0
 800592c:	bd08      	pop	{r3, pc}

0800592e <spi_stm32_complete>:
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800592e:	684b      	ldr	r3, [r1, #4]
 8005930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
{
 8005934:	b570      	push	{r4, r5, r6, lr}
 8005936:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8005938:	684b      	ldr	r3, [r1, #4]
 800593a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800593e:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 8005940:	684b      	ldr	r3, [r1, #4]
 8005942:	4616      	mov	r6, r2
 8005944:	f023 0320 	bic.w	r3, r3, #32
	_spi_context_cs_control(ctx, on, false);
 8005948:	2200      	movs	r2, #0
 800594a:	460c      	mov	r4, r1
 800594c:	604b      	str	r3, [r1, #4]
 800594e:	4611      	mov	r1, r2
 8005950:	4605      	mov	r5, r0
 8005952:	f7ff ffae 	bl	80058b2 <_spi_context_cs_control.isra.5>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8005956:	68a3      	ldr	r3, [r4, #8]
 8005958:	07da      	lsls	r2, r3, #31
 800595a:	d501      	bpl.n	8005960 <spi_stm32_complete+0x32>
  return (uint8_t)(READ_REG(SPIx->DR));
 800595c:	68e3      	ldr	r3, [r4, #12]
 800595e:	e7fa      	b.n	8005956 <spi_stm32_complete+0x28>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 8005966:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800596a:	d102      	bne.n	8005972 <spi_stm32_complete+0x44>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800596c:	68a3      	ldr	r3, [r4, #8]
 800596e:	061b      	lsls	r3, r3, #24
 8005970:	d4fc      	bmi.n	800596c <spi_stm32_complete+0x3e>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005978:	6023      	str	r3, [r4, #0]
 800597a:	f105 0014 	add.w	r0, r5, #20
	ctx->sync_status = status;
 800597e:	626e      	str	r6, [r5, #36]	; 0x24
}
 8005980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005984:	f7fe bbac 	b.w	80040e0 <z_impl_k_sem_give>

08005988 <spi_stm32_isr>:
	const struct spi_stm32_config *cfg = dev->config->config_info;
 8005988:	6803      	ldr	r3, [r0, #0]
	SPI_TypeDef *spi = cfg->spi;
 800598a:	689b      	ldr	r3, [r3, #8]
{
 800598c:	b570      	push	{r4, r5, r6, lr}
	SPI_TypeDef *spi = cfg->spi;
 800598e:	689d      	ldr	r5, [r3, #8]
	struct spi_stm32_data *data = dev->driver_data;
 8005990:	6884      	ldr	r4, [r0, #8]
	err = spi_stm32_get_err(spi);
 8005992:	4628      	mov	r0, r5
 8005994:	f7fd fc7a 	bl	800328c <spi_stm32_get_err>
	if (err) {
 8005998:	4602      	mov	r2, r0
 800599a:	b128      	cbz	r0, 80059a8 <spi_stm32_isr+0x20>
		spi_stm32_complete(data, spi, err);
 800599c:	4629      	mov	r1, r5
 800599e:	4620      	mov	r0, r4
}
 80059a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		spi_stm32_complete(data, spi, err);
 80059a4:	f7ff bfc3 	b.w	800592e <spi_stm32_complete>
	return !!(ctx->tx_len);
 80059a8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 80059aa:	b911      	cbnz	r1, 80059b2 <spi_stm32_isr+0x2a>
	if (spi_stm32_transfer_ongoing(data)) {
 80059ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0f4      	beq.n	800599c <spi_stm32_isr+0x14>
	u16_t operation = data->ctx.config->operation;
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	889e      	ldrh	r6, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 80059b6:	07f2      	lsls	r2, r6, #31
 80059b8:	f100 8086 	bmi.w	8005ac8 <spi_stm32_isr+0x140>
	tx_frame = spi_stm32_next_tx(data);
 80059bc:	4620      	mov	r0, r4
 80059be:	f7ff ff53 	bl	8005868 <spi_stm32_next_tx>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80059c2:	68ab      	ldr	r3, [r5, #8]
 80059c4:	079b      	lsls	r3, r3, #30
 80059c6:	d5fc      	bpl.n	80059c2 <spi_stm32_isr+0x3a>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80059c8:	f3c6 1645 	ubfx	r6, r6, #5, #6
 80059cc:	2e08      	cmp	r6, #8
 80059ce:	d14a      	bne.n	8005a66 <spi_stm32_isr+0xde>
		LL_SPI_TransmitData8(spi, tx_frame);
 80059d0:	b2c0      	uxtb	r0, r0
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 80059d2:	7328      	strb	r0, [r5, #12]
	if (!ctx->tx_len) {
 80059d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80059d6:	b183      	cbz	r3, 80059fa <spi_stm32_isr+0x72>
	ctx->tx_len -= len;
 80059d8:	3b01      	subs	r3, #1
 80059da:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (!ctx->tx_len) {
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d13c      	bne.n	8005a5a <spi_stm32_isr+0xd2>
		ctx->tx_count--;
 80059e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80059e2:	3b01      	subs	r3, #1
 80059e4:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (ctx->tx_count) {
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d03b      	beq.n	8005a62 <spi_stm32_isr+0xda>
			ctx->current_tx++;
 80059ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80059ec:	f103 0208 	add.w	r2, r3, #8
 80059f0:	62a2      	str	r2, [r4, #40]	; 0x28
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 80059f2:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 80059f4:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 80059f6:	63a2      	str	r2, [r4, #56]	; 0x38
			ctx->tx_len = ctx->current_tx->len / dfs;
 80059f8:	63e3      	str	r3, [r4, #60]	; 0x3c
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80059fa:	68ab      	ldr	r3, [r5, #8]
 80059fc:	07d9      	lsls	r1, r3, #31
 80059fe:	d5fc      	bpl.n	80059fa <spi_stm32_isr+0x72>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8005a00:	6822      	ldr	r2, [r4, #0]
 8005a02:	8892      	ldrh	r2, [r2, #4]
 8005a04:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8005a08:	2a08      	cmp	r2, #8
 8005a0a:	e9d4 3110 	ldrd	r3, r1, [r4, #64]	; 0x40
  return (uint8_t)(READ_REG(SPIx->DR));
 8005a0e:	68ea      	ldr	r2, [r5, #12]
 8005a10:	d142      	bne.n	8005a98 <spi_stm32_isr+0x110>
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 8005a12:	b10b      	cbz	r3, 8005a18 <spi_stm32_isr+0x90>
 8005a14:	b101      	cbz	r1, 8005a18 <spi_stm32_isr+0x90>
 8005a16:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 8005a18:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005a1a:	b193      	cbz	r3, 8005a42 <spi_stm32_isr+0xba>
	ctx->rx_len -= len;
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	6463      	str	r3, [r4, #68]	; 0x44
	if (!ctx->rx_len) {
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f040 80a3 	bne.w	8005b6c <spi_stm32_isr+0x1e4>
		ctx->rx_count--;
 8005a26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	6363      	str	r3, [r4, #52]	; 0x34
		if (ctx->rx_count) {
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 80a2 	beq.w	8005b76 <spi_stm32_isr+0x1ee>
			ctx->current_rx++;
 8005a32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a34:	f103 0208 	add.w	r2, r3, #8
 8005a38:	6322      	str	r2, [r4, #48]	; 0x30
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
 8005a3a:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
 8005a3c:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
 8005a3e:	6422      	str	r2, [r4, #64]	; 0x40
			ctx->rx_len = ctx->current_rx->len / dfs;
 8005a40:	6463      	str	r3, [r4, #68]	; 0x44
	return spi_stm32_get_err(spi);
 8005a42:	4628      	mov	r0, r5
 8005a44:	f7fd fc22 	bl	800328c <spi_stm32_get_err>
	if (err || !spi_stm32_transfer_ongoing(data)) {
 8005a48:	4602      	mov	r2, r0
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	d1a6      	bne.n	800599c <spi_stm32_isr+0x14>
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 8005a4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a50:	b913      	cbnz	r3, 8005a58 <spi_stm32_isr+0xd0>
	if (err || !spi_stm32_transfer_ongoing(data)) {
 8005a52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0a1      	beq.n	800599c <spi_stm32_isr+0x14>
}
 8005a58:	bd70      	pop	{r4, r5, r6, pc}
	} else if (ctx->tx_buf) {
 8005a5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0cc      	beq.n	80059fa <spi_stm32_isr+0x72>
		ctx->tx_buf += dfs * len;
 8005a60:	3301      	adds	r3, #1
 8005a62:	63a3      	str	r3, [r4, #56]	; 0x38
 8005a64:	e7c9      	b.n	80059fa <spi_stm32_isr+0x72>
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 8005a66:	81a8      	strh	r0, [r5, #12]
	if (!ctx->tx_len) {
 8005a68:	2900      	cmp	r1, #0
 8005a6a:	d0c6      	beq.n	80059fa <spi_stm32_isr+0x72>
	ctx->tx_len -= len;
 8005a6c:	3901      	subs	r1, #1
 8005a6e:	63e1      	str	r1, [r4, #60]	; 0x3c
	if (!ctx->tx_len) {
 8005a70:	b969      	cbnz	r1, 8005a8e <spi_stm32_isr+0x106>
		ctx->tx_count--;
 8005a72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005a74:	3b01      	subs	r3, #1
 8005a76:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (ctx->tx_count) {
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0f2      	beq.n	8005a62 <spi_stm32_isr+0xda>
			ctx->current_tx++;
 8005a7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005a7e:	f103 0208 	add.w	r2, r3, #8
 8005a82:	62a2      	str	r2, [r4, #40]	; 0x28
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 8005a84:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 8005a86:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 8005a88:	63a2      	str	r2, [r4, #56]	; 0x38
			ctx->tx_len = ctx->current_tx->len / dfs;
 8005a8a:	085b      	lsrs	r3, r3, #1
 8005a8c:	e7b4      	b.n	80059f8 <spi_stm32_isr+0x70>
	} else if (ctx->tx_buf) {
 8005a8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0b2      	beq.n	80059fa <spi_stm32_isr+0x72>
		ctx->tx_buf += dfs * len;
 8005a94:	3302      	adds	r3, #2
 8005a96:	e7e4      	b.n	8005a62 <spi_stm32_isr+0xda>
	return !!(ctx->rx_buf && ctx->rx_len);
 8005a98:	b10b      	cbz	r3, 8005a9e <spi_stm32_isr+0x116>
 8005a9a:	b101      	cbz	r1, 8005a9e <spi_stm32_isr+0x116>
			UNALIGNED_PUT(rx_frame, (u16_t *)data->ctx.rx_buf);
 8005a9c:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 8005a9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0ce      	beq.n	8005a42 <spi_stm32_isr+0xba>
	ctx->rx_len -= len;
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	6463      	str	r3, [r4, #68]	; 0x44
	if (!ctx->rx_len) {
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d166      	bne.n	8005b7a <spi_stm32_isr+0x1f2>
		ctx->rx_count--;
 8005aac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	6363      	str	r3, [r4, #52]	; 0x34
		if (ctx->rx_count) {
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d05f      	beq.n	8005b76 <spi_stm32_isr+0x1ee>
			ctx->current_rx++;
 8005ab6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005ab8:	f103 0208 	add.w	r2, r3, #8
 8005abc:	6322      	str	r2, [r4, #48]	; 0x30
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
 8005abe:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
 8005ac0:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
 8005ac2:	6422      	str	r2, [r4, #64]	; 0x40
			ctx->rx_len = ctx->current_rx->len / dfs;
 8005ac4:	085b      	lsrs	r3, r3, #1
 8005ac6:	e7bb      	b.n	8005a40 <spi_stm32_isr+0xb8>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8005ac8:	68ab      	ldr	r3, [r5, #8]
 8005aca:	079a      	lsls	r2, r3, #30
 8005acc:	d549      	bpl.n	8005b62 <spi_stm32_isr+0x1da>
	if (LL_SPI_IsActiveFlag_TXE(spi) && spi_context_tx_on(&data->ctx)) {
 8005ace:	2900      	cmp	r1, #0
 8005ad0:	d047      	beq.n	8005b62 <spi_stm32_isr+0x1da>
		u16_t tx_frame = spi_stm32_next_tx(data);
 8005ad2:	4620      	mov	r0, r4
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8005ad4:	f3c6 1645 	ubfx	r6, r6, #5, #6
		u16_t tx_frame = spi_stm32_next_tx(data);
 8005ad8:	f7ff fec6 	bl	8005868 <spi_stm32_next_tx>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8005adc:	2e08      	cmp	r6, #8
 8005ade:	d129      	bne.n	8005b34 <spi_stm32_isr+0x1ac>
			LL_SPI_TransmitData8(spi, tx_frame);
 8005ae0:	b2c0      	uxtb	r0, r0
  *spidr = TxData;
 8005ae2:	7328      	strb	r0, [r5, #12]
	if (!ctx->tx_len) {
 8005ae4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005ae6:	b173      	cbz	r3, 8005b06 <spi_stm32_isr+0x17e>
	ctx->tx_len -= len;
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (!ctx->tx_len) {
 8005aec:	b9e3      	cbnz	r3, 8005b28 <spi_stm32_isr+0x1a0>
		ctx->tx_count--;
 8005aee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005af0:	3b01      	subs	r3, #1
 8005af2:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (ctx->tx_count) {
 8005af4:	b1e3      	cbz	r3, 8005b30 <spi_stm32_isr+0x1a8>
			ctx->current_tx++;
 8005af6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005af8:	f103 0208 	add.w	r2, r3, #8
 8005afc:	62a2      	str	r2, [r4, #40]	; 0x28
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 8005afe:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 8005b00:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 8005b02:	63a2      	str	r2, [r4, #56]	; 0x38
			ctx->tx_len = ctx->current_tx->len / dfs;
 8005b04:	63e3      	str	r3, [r4, #60]	; 0x3c
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8005b06:	68ab      	ldr	r3, [r5, #8]
 8005b08:	07db      	lsls	r3, r3, #31
 8005b0a:	d59a      	bpl.n	8005a42 <spi_stm32_isr+0xba>
	return !!(ctx->rx_buf && ctx->rx_len);
 8005b0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d097      	beq.n	8005a42 <spi_stm32_isr+0xba>
 8005b12:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005b14:	2a00      	cmp	r2, #0
 8005b16:	d094      	beq.n	8005a42 <spi_stm32_isr+0xba>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8005b18:	6822      	ldr	r2, [r4, #0]
 8005b1a:	8892      	ldrh	r2, [r2, #4]
 8005b1c:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8005b20:	2a08      	cmp	r2, #8
  return (uint8_t)(READ_REG(SPIx->DR));
 8005b22:	68ea      	ldr	r2, [r5, #12]
 8005b24:	d1ba      	bne.n	8005a9c <spi_stm32_isr+0x114>
 8005b26:	e776      	b.n	8005a16 <spi_stm32_isr+0x8e>
	} else if (ctx->tx_buf) {
 8005b28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0eb      	beq.n	8005b06 <spi_stm32_isr+0x17e>
		ctx->tx_buf += dfs * len;
 8005b2e:	3301      	adds	r3, #1
 8005b30:	63a3      	str	r3, [r4, #56]	; 0x38
 8005b32:	e7e8      	b.n	8005b06 <spi_stm32_isr+0x17e>
	ctx->tx_len -= len;
 8005b34:	3901      	subs	r1, #1
  *spidr = TxData;
 8005b36:	81a8      	strh	r0, [r5, #12]
 8005b38:	63e1      	str	r1, [r4, #60]	; 0x3c
	if (!ctx->tx_len) {
 8005b3a:	b969      	cbnz	r1, 8005b58 <spi_stm32_isr+0x1d0>
		ctx->tx_count--;
 8005b3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (ctx->tx_count) {
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0f4      	beq.n	8005b30 <spi_stm32_isr+0x1a8>
			ctx->current_tx++;
 8005b46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005b48:	f103 0208 	add.w	r2, r3, #8
 8005b4c:	62a2      	str	r2, [r4, #40]	; 0x28
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 8005b4e:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 8005b50:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 8005b52:	63a2      	str	r2, [r4, #56]	; 0x38
			ctx->tx_len = ctx->current_tx->len / dfs;
 8005b54:	085b      	lsrs	r3, r3, #1
 8005b56:	e7d5      	b.n	8005b04 <spi_stm32_isr+0x17c>
	} else if (ctx->tx_buf) {
 8005b58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0d3      	beq.n	8005b06 <spi_stm32_isr+0x17e>
		ctx->tx_buf += dfs * len;
 8005b5e:	3302      	adds	r3, #2
 8005b60:	e7e6      	b.n	8005b30 <spi_stm32_isr+0x1a8>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8005b62:	686b      	ldr	r3, [r5, #4]
 8005b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b68:	606b      	str	r3, [r5, #4]
 8005b6a:	e7cc      	b.n	8005b06 <spi_stm32_isr+0x17e>
	} else if (ctx->rx_buf) {
 8005b6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f43f af67 	beq.w	8005a42 <spi_stm32_isr+0xba>
		ctx->rx_buf += dfs * len;
 8005b74:	3301      	adds	r3, #1
 8005b76:	6423      	str	r3, [r4, #64]	; 0x40
 8005b78:	e763      	b.n	8005a42 <spi_stm32_isr+0xba>
	} else if (ctx->rx_buf) {
 8005b7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f43f af60 	beq.w	8005a42 <spi_stm32_isr+0xba>
		ctx->rx_buf += dfs * len;
 8005b82:	3302      	adds	r3, #2
 8005b84:	e7f7      	b.n	8005b76 <spi_stm32_isr+0x1ee>

08005b86 <uart_stm32_set_baudrate>:
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8005b86:	6803      	ldr	r3, [r0, #0]
{
 8005b88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b8a:	460c      	mov	r4, r1
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8005b8c:	6899      	ldr	r1, [r3, #8]
	clock_control_get_rate(data->clock,
 8005b8e:	6883      	ldr	r3, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8005b90:	f851 5b08 	ldr.w	r5, [r1], #8
	clock_control_get_rate(data->clock,
 8005b94:	6858      	ldr	r0, [r3, #4]
 8005b96:	6843      	ldr	r3, [r0, #4]
 8005b98:	aa01      	add	r2, sp, #4
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	4798      	blx	r3
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005b9e:	9901      	ldr	r1, [sp, #4]
 8005ba0:	eb01 0154 	add.w	r1, r1, r4, lsr #1
 8005ba4:	fbb1 f1f4 	udiv	r1, r1, r4
 8005ba8:	b289      	uxth	r1, r1
 8005baa:	60e9      	str	r1, [r5, #12]
}
 8005bac:	b003      	add	sp, #12
 8005bae:	bd30      	pop	{r4, r5, pc}

08005bb0 <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8005bb0:	6803      	ldr	r3, [r0, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8005bb6:	69da      	ldr	r2, [r3, #28]
 8005bb8:	0612      	lsls	r2, r2, #24
 8005bba:	d5fc      	bpl.n	8005bb6 <uart_stm32_poll_out+0x6>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8005bbc:	2240      	movs	r2, #64	; 0x40
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8005bbe:	b289      	uxth	r1, r1
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8005bc0:	621a      	str	r2, [r3, #32]
  USARTx->TDR = Value;
 8005bc2:	8519      	strh	r1, [r3, #40]	; 0x28
}
 8005bc4:	4770      	bx	lr

08005bc6 <uart_stm32_err_check>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8005bc6:	6803      	ldr	r3, [r0, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8005bcc:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8005bce:	69da      	ldr	r2, [r3, #28]
 8005bd0:	07d2      	lsls	r2, r2, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8005bd2:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8005bd4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
		err |= UART_ERROR_PARITY;
 8005bd8:	bf48      	it	mi
 8005bda:	f040 0002 	orrmi.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8005bde:	0791      	lsls	r1, r2, #30
		err |= UART_ERROR_FRAMING;
 8005be0:	bf48      	it	mi
 8005be2:	f040 0004 	orrmi.w	r0, r0, #4
	if (err & UART_ERROR_OVERRUN) {
 8005be6:	07c2      	lsls	r2, r0, #31
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8005be8:	bf44      	itt	mi
 8005bea:	2208      	movmi	r2, #8
 8005bec:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 8005bee:	0781      	lsls	r1, r0, #30
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8005bf0:	bf44      	itt	mi
 8005bf2:	2201      	movmi	r2, #1
 8005bf4:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 8005bf6:	0742      	lsls	r2, r0, #29
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8005bf8:	bf44      	itt	mi
 8005bfa:	2202      	movmi	r2, #2
 8005bfc:	621a      	strmi	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8005bfe:	2204      	movs	r2, #4
 8005c00:	621a      	str	r2, [r3, #32]
}
 8005c02:	4770      	bx	lr

08005c04 <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8005c04:	6803      	ldr	r3, [r0, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8005c0a:	69da      	ldr	r2, [r3, #28]
 8005c0c:	0710      	lsls	r0, r2, #28
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8005c0e:	bf44      	itt	mi
 8005c10:	2208      	movmi	r2, #8
 8005c12:	621a      	strmi	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8005c14:	69da      	ldr	r2, [r3, #28]
 8005c16:	0692      	lsls	r2, r2, #26
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8005c18:	bf43      	ittte	mi
 8005c1a:	8c9b      	ldrhmi	r3, [r3, #36]	; 0x24
 8005c1c:	700b      	strbmi	r3, [r1, #0]
	return 0;
 8005c1e:	2000      	movmi	r0, #0
		return -1;
 8005c20:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 8005c24:	4770      	bx	lr

08005c26 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8005c26:	6883      	ldr	r3, [r0, #8]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8005c2c:	6803      	ldr	r3, [r0, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8005c32:	6813      	ldr	r3, [r2, #0]
 8005c34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8005c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c3c:	d028      	beq.n	8005c90 <uart_stm32_config_get+0x6a>
		return UART_CFG_PARITY_NONE;
 8005c3e:	f5a3 60c0 	sub.w	r0, r3, #1536	; 0x600
 8005c42:	4243      	negs	r3, r0
 8005c44:	4143      	adcs	r3, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8005c46:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8005c48:	6853      	ldr	r3, [r2, #4]
 8005c4a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8005c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c52:	d01f      	beq.n	8005c94 <uart_stm32_config_get+0x6e>
 8005c54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c58:	d01e      	beq.n	8005c98 <uart_stm32_config_get+0x72>
 8005c5a:	2b00      	cmp	r3, #0
		return UART_CFG_STOP_BITS_2;
 8005c5c:	bf0c      	ite	eq
 8005c5e:	2301      	moveq	r3, #1
 8005c60:	2303      	movne	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8005c62:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8005c64:	6813      	ldr	r3, [r2, #0]
 8005c66:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
	switch (db) {
 8005c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c6e:	d015      	beq.n	8005c9c <uart_stm32_config_get+0x76>
 8005c70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		return UART_CFG_DATA_BITS_8;
 8005c74:	bf0c      	ite	eq
 8005c76:	2302      	moveq	r3, #2
 8005c78:	2303      	movne	r3, #3
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8005c7a:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8005c7c:	6893      	ldr	r3, [r2, #8]
 8005c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8005c82:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8005c86:	4253      	negs	r3, r2
 8005c88:	4153      	adcs	r3, r2
 8005c8a:	71cb      	strb	r3, [r1, #7]
}
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	4770      	bx	lr
		return UART_CFG_PARITY_EVEN;
 8005c90:	2302      	movs	r3, #2
 8005c92:	e7d8      	b.n	8005c46 <uart_stm32_config_get+0x20>
		return UART_CFG_STOP_BITS_0_5;
 8005c94:	2300      	movs	r3, #0
 8005c96:	e7e4      	b.n	8005c62 <uart_stm32_config_get+0x3c>
		return UART_CFG_STOP_BITS_1_5;
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e7e2      	b.n	8005c62 <uart_stm32_config_get+0x3c>
		return UART_CFG_DATA_BITS_9;
 8005c9c:	2304      	movs	r3, #4
 8005c9e:	e7ec      	b.n	8005c7a <uart_stm32_config_get+0x54>

08005ca0 <k_mem_slab_init>:
{
 8005ca0:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
 8005ca2:	2400      	movs	r4, #0
	slab->block_size = block_size;
 8005ca4:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
 8005ca8:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
 8005cac:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
 8005cae:	42a3      	cmp	r3, r4
 8005cb0:	d102      	bne.n	8005cb8 <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
 8005cb2:	e9c0 0000 	strd	r0, r0, [r0]
}
 8005cb6:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
 8005cb8:	6945      	ldr	r5, [r0, #20]
 8005cba:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
 8005cbc:	3401      	adds	r4, #1
		slab->free_list = p;
 8005cbe:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
 8005cc0:	4411      	add	r1, r2
 8005cc2:	e7f4      	b.n	8005cae <k_mem_slab_init+0xe>

08005cc4 <k_mem_pool_malloc>:
{
 8005cc4:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
 8005cc6:	2404      	movs	r4, #4
 8005cc8:	190a      	adds	r2, r1, r4
 8005cca:	d204      	bcs.n	8005cd6 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
 8005ccc:	2300      	movs	r3, #0
 8005cce:	4669      	mov	r1, sp
 8005cd0:	f7fd ff06 	bl	8003ae0 <k_mem_pool_alloc>
 8005cd4:	b110      	cbz	r0, 8005cdc <k_mem_pool_malloc+0x18>
		return NULL;
 8005cd6:	2000      	movs	r0, #0
}
 8005cd8:	b002      	add	sp, #8
 8005cda:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
 8005cdc:	4622      	mov	r2, r4
 8005cde:	a901      	add	r1, sp, #4
 8005ce0:	9800      	ldr	r0, [sp, #0]
 8005ce2:	f7ff fbae 	bl	8005442 <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
 8005ce6:	9800      	ldr	r0, [sp, #0]
 8005ce8:	3004      	adds	r0, #4
 8005cea:	e7f5      	b.n	8005cd8 <k_mem_pool_malloc+0x14>

08005cec <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8005cec:	7b43      	ldrb	r3, [r0, #13]
 8005cee:	06db      	lsls	r3, r3, #27
 8005cf0:	bf03      	ittte	eq
 8005cf2:	6980      	ldreq	r0, [r0, #24]
 8005cf4:	fab0 f080 	clzeq	r0, r0
 8005cf8:	0940      	lsreq	r0, r0, #5
 8005cfa:	2000      	movne	r0, #0
}
 8005cfc:	4770      	bx	lr

08005cfe <z_unpend_thread_no_timeout>:
{
 8005cfe:	b538      	push	{r3, r4, r5, lr}
 8005d00:	4604      	mov	r4, r0
	__asm__ volatile(
 8005d02:	f04f 0310 	mov.w	r3, #16
 8005d06:	f3ef 8511 	mrs	r5, BASEPRI
 8005d0a:	f383 8811 	msr	BASEPRI, r3
 8005d0e:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8005d12:	4601      	mov	r1, r0
 8005d14:	6880      	ldr	r0, [r0, #8]
 8005d16:	f7fd ffa1 	bl	8003c5c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8005d1a:	7b63      	ldrb	r3, [r4, #13]
 8005d1c:	f023 0302 	bic.w	r3, r3, #2
 8005d20:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
 8005d22:	f385 8811 	msr	BASEPRI, r5
 8005d26:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60a3      	str	r3, [r4, #8]
}
 8005d2e:	bd38      	pop	{r3, r4, r5, pc}

08005d30 <z_reschedule>:
{
 8005d30:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_is_in_isr();
 8005d32:	b939      	cbnz	r1, 8005d44 <z_reschedule+0x14>
 8005d34:	f7fd ff4a 	bl	8003bcc <resched.part.15>
	if (resched(key.key)) {
 8005d38:	b120      	cbz	r0, 8005d44 <z_reschedule+0x14>
 8005d3a:	4608      	mov	r0, r1
}
 8005d3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005d40:	f7fc b994 	b.w	800206c <__swap>
 8005d44:	f381 8811 	msr	BASEPRI, r1
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	bd08      	pop	{r3, pc}

08005d4e <z_reschedule_irqlock>:
{
 8005d4e:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_is_in_isr();
 8005d50:	4602      	mov	r2, r0
 8005d52:	b938      	cbnz	r0, 8005d64 <z_reschedule_irqlock+0x16>
 8005d54:	f7fd ff3a 	bl	8003bcc <resched.part.15>
	if (resched(key)) {
 8005d58:	b120      	cbz	r0, 8005d64 <z_reschedule_irqlock+0x16>
 8005d5a:	4610      	mov	r0, r2
}
 8005d5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005d60:	f7fc b984 	b.w	800206c <__swap>
 8005d64:	f382 8811 	msr	BASEPRI, r2
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	bd08      	pop	{r3, pc}

08005d6e <z_reschedule_unlocked>:
	__asm__ volatile(
 8005d6e:	f04f 0310 	mov.w	r3, #16
 8005d72:	f3ef 8011 	mrs	r0, BASEPRI
 8005d76:	f383 8811 	msr	BASEPRI, r3
 8005d7a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
 8005d7e:	f7ff bfe6 	b.w	8005d4e <z_reschedule_irqlock>

08005d82 <z_priq_dumb_best>:
	return list->head == list;
 8005d82:	6803      	ldr	r3, [r0, #0]
}
 8005d84:	4298      	cmp	r0, r3
 8005d86:	bf14      	ite	ne
 8005d88:	4618      	movne	r0, r3
 8005d8a:	2000      	moveq	r0, #0
 8005d8c:	4770      	bx	lr

08005d8e <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
 8005d8e:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
 8005d92:	b570      	push	{r4, r5, r6, lr}
 8005d94:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
 8005d96:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
 8005d9a:	b1cb      	cbz	r3, 8005dd0 <z_thread_timeout+0x42>
 8005d9c:	f04f 0310 	mov.w	r3, #16
 8005da0:	f3ef 8611 	mrs	r6, BASEPRI
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8005dac:	4629      	mov	r1, r5
 8005dae:	f850 0c10 	ldr.w	r0, [r0, #-16]
 8005db2:	f7fd ff53 	bl	8003c5c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8005db6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 8005dba:	f023 0302 	bic.w	r3, r3, #2
 8005dbe:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
 8005dc2:	f386 8811 	msr	BASEPRI, r6
 8005dc6:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8005dd0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 8005dd4:	f023 0314 	bic.w	r3, r3, #20
 8005dd8:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
 8005ddc:	4628      	mov	r0, r5
 8005dde:	f7ff ff85 	bl	8005cec <z_is_thread_ready>
 8005de2:	b120      	cbz	r0, 8005dee <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
 8005de4:	4628      	mov	r0, r5
}
 8005de6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005dea:	f7fd bf87 	b.w	8003cfc <z_add_thread_to_ready_q>
 8005dee:	bd70      	pop	{r4, r5, r6, pc}

08005df0 <z_unpend_first_thread>:
{
 8005df0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8005df2:	f04f 0310 	mov.w	r3, #16
 8005df6:	f3ef 8211 	mrs	r2, BASEPRI
 8005dfa:	f383 8811 	msr	BASEPRI, r3
 8005dfe:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
 8005e02:	f7ff ffbe 	bl	8005d82 <z_priq_dumb_best>
 8005e06:	4604      	mov	r4, r0
	__asm__ volatile(
 8005e08:	f382 8811 	msr	BASEPRI, r2
 8005e0c:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
 8005e10:	b1c8      	cbz	r0, 8005e46 <z_unpend_first_thread+0x56>
	__asm__ volatile(
 8005e12:	f04f 0310 	mov.w	r3, #16
 8005e16:	f3ef 8511 	mrs	r5, BASEPRI
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8005e22:	4601      	mov	r1, r0
 8005e24:	6880      	ldr	r0, [r0, #8]
 8005e26:	f7fd ff19 	bl	8003c5c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8005e2a:	7b63      	ldrb	r3, [r4, #13]
 8005e2c:	f023 0302 	bic.w	r3, r3, #2
 8005e30:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
 8005e32:	f385 8811 	msr	BASEPRI, r5
 8005e36:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
 8005e3e:	f104 0018 	add.w	r0, r4, #24
 8005e42:	f000 f84b 	bl	8005edc <z_abort_timeout>
}
 8005e46:	4620      	mov	r0, r4
 8005e48:	bd38      	pop	{r3, r4, r5, pc}

08005e4a <z_impl_k_sleep>:
{
 8005e4a:	b510      	push	{r4, lr}
 8005e4c:	3009      	adds	r0, #9
 8005e4e:	240a      	movs	r4, #10
 8005e50:	fb90 f4f4 	sdiv	r4, r0, r4
	if (ticks == 0) {
 8005e54:	b954      	cbnz	r4, 8005e6c <z_impl_k_sleep+0x22>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
 8005e56:	f7fe f8cd 	bl	8003ff4 <z_impl_k_yield>
}

static inline u64_t __ticks_to_ms(s64_t ticks)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	return (u64_t)ticks * MSEC_PER_SEC /
 8005e5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e5e:	2264      	movs	r2, #100	; 0x64
 8005e60:	2300      	movs	r3, #0
 8005e62:	fb84 0100 	smull	r0, r1, r4, r0
 8005e66:	f7fa f98f 	bl	8000188 <__aeabi_uldivmod>
}
 8005e6a:	bd10      	pop	{r4, pc}
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	f7fe f887 	bl	8003f80 <z_tick_sleep.part.16>
 8005e72:	4604      	mov	r4, r0
 8005e74:	e7f1      	b.n	8005e5a <z_impl_k_sleep+0x10>

08005e76 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8005e76:	7b43      	ldrb	r3, [r0, #13]
 8005e78:	06db      	lsls	r3, r3, #27
 8005e7a:	bf03      	ittte	eq
 8005e7c:	6980      	ldreq	r0, [r0, #24]
 8005e7e:	fab0 f080 	clzeq	r0, r0
 8005e82:	0940      	lsreq	r0, r0, #5
 8005e84:	2000      	movne	r0, #0
}
 8005e86:	4770      	bx	lr

08005e88 <z_impl_k_thread_name_set>:
}
 8005e88:	f06f 0046 	mvn.w	r0, #70	; 0x46
 8005e8c:	4770      	bx	lr

08005e8e <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
 8005e8e:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 8005e90:	b510      	push	{r4, lr}
 8005e92:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
 8005e94:	b103      	cbz	r3, 8005e98 <z_thread_single_abort+0xa>
		thread->fn_abort();
 8005e96:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f7ff ffec 	bl	8005e76 <z_is_thread_ready>
 8005e9e:	b138      	cbz	r0, 8005eb0 <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f7fd ffd5 	bl	8003e50 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
 8005ea6:	7b63      	ldrb	r3, [r4, #13]
 8005ea8:	f043 0308 	orr.w	r3, r3, #8
 8005eac:	7363      	strb	r3, [r4, #13]
}
 8005eae:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
 8005eb0:	7b63      	ldrb	r3, [r4, #13]
 8005eb2:	079b      	lsls	r3, r3, #30
 8005eb4:	d502      	bpl.n	8005ebc <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f7ff ff21 	bl	8005cfe <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
 8005ebc:	69a3      	ldr	r3, [r4, #24]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d0f1      	beq.n	8005ea6 <z_thread_single_abort+0x18>
 8005ec2:	f104 0018 	add.w	r0, r4, #24
 8005ec6:	f000 f809 	bl	8005edc <z_abort_timeout>
 8005eca:	e7ec      	b.n	8005ea6 <z_thread_single_abort+0x18>

08005ecc <z_init_thread_base>:
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
 8005ecc:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
 8005ece:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
 8005ed0:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
 8005ed2:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
 8005ed4:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
 8005ed6:	e9c0 3306 	strd	r3, r3, [r0, #24]

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
 8005eda:	4770      	bx	lr

08005edc <z_abort_timeout>:
{
 8005edc:	b510      	push	{r4, lr}
	__asm__ volatile(
 8005ede:	f04f 0210 	mov.w	r2, #16
 8005ee2:	f3ef 8411 	mrs	r4, BASEPRI
 8005ee6:	f382 8811 	msr	BASEPRI, r2
 8005eea:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8005eee:	6803      	ldr	r3, [r0, #0]
 8005ef0:	b13b      	cbz	r3, 8005f02 <z_abort_timeout+0x26>
			remove_timeout(to);
 8005ef2:	f7fe fa25 	bl	8004340 <remove_timeout>
			ret = 0;
 8005ef6:	2000      	movs	r0, #0
	__asm__ volatile(
 8005ef8:	f384 8811 	msr	BASEPRI, r4
 8005efc:	f3bf 8f6f 	isb	sy
}
 8005f00:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8005f02:	f06f 0015 	mvn.w	r0, #21
 8005f06:	e7f7      	b.n	8005ef8 <z_abort_timeout+0x1c>

08005f08 <z_get_next_timeout_expiry>:
{
 8005f08:	b510      	push	{r4, lr}
	__asm__ volatile(
 8005f0a:	f04f 0310 	mov.w	r3, #16
 8005f0e:	f3ef 8411 	mrs	r4, BASEPRI
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
 8005f1a:	f7fe fa25 	bl	8004368 <next_timeout>
	__asm__ volatile(
 8005f1e:	f384 8811 	msr	BASEPRI, r4
 8005f22:	f3bf 8f6f 	isb	sy
}
 8005f26:	bd10      	pop	{r4, pc}

08005f28 <z_set_timeout_expiry>:
{
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	460e      	mov	r6, r1
	__asm__ volatile(
 8005f2e:	f04f 0310 	mov.w	r3, #16
 8005f32:	f3ef 8511 	mrs	r5, BASEPRI
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
 8005f3e:	f7fe fa13 	bl	8004368 <next_timeout>
		if (sooner && !imminent) {
 8005f42:	42a0      	cmp	r0, r4
 8005f44:	dd05      	ble.n	8005f52 <z_set_timeout_expiry+0x2a>
 8005f46:	2801      	cmp	r0, #1
 8005f48:	dd03      	ble.n	8005f52 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
 8005f4a:	4631      	mov	r1, r6
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f7fb fd0f 	bl	8001970 <z_clock_set_timeout>
	__asm__ volatile(
 8005f52:	f385 8811 	msr	BASEPRI, r5
 8005f56:	f3bf 8f6f 	isb	sy
}
 8005f5a:	bd70      	pop	{r4, r5, r6, pc}

08005f5c <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
 8005f5c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
 8005f5e:	f7fe fabb 	bl	80044d8 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
 8005f62:	bd08      	pop	{r3, pc}

08005f64 <z_impl_k_uptime_get_32>:

u32_t z_impl_k_uptime_get_32(void)
{
 8005f64:	b508      	push	{r3, lr}
	return __ticks_to_ms(z_tick_get_32());
 8005f66:	f7ff fff9 	bl	8005f5c <z_tick_get_32>
 8005f6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005f6e:	2264      	movs	r2, #100	; 0x64
 8005f70:	2300      	movs	r3, #0
 8005f72:	fba0 0101 	umull	r0, r1, r0, r1
 8005f76:	f7fa f907 	bl	8000188 <__aeabi_uldivmod>
}
 8005f7a:	bd08      	pop	{r3, pc}

08005f7c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
 8005f7c:	b508      	push	{r3, lr}
	__asm__ volatile(
 8005f7e:	f04f 0210 	mov.w	r2, #16
 8005f82:	f3ef 8311 	mrs	r3, BASEPRI
 8005f86:	f382 8811 	msr	BASEPRI, r2
 8005f8a:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
 8005f8e:	f7ff ffbb 	bl	8005f08 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
 8005f92:	2101      	movs	r1, #1
 8005f94:	2802      	cmp	r0, #2
 8005f96:	bfd8      	it	le
 8005f98:	4608      	movle	r0, r1
 8005f9a:	f7ff ffc5 	bl	8005f28 <z_set_timeout_expiry>
	k_cpu_idle();
 8005f9e:	f7fc fa65 	bl	800246c <k_cpu_idle>
 8005fa2:	e7ec      	b.n	8005f7e <idle+0x2>

08005fa4 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
 8005fa4:	4770      	bx	lr
